/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CheckEntityCheckResultObjectEntityResult;
import org.openapitools.client.model.EntityObject;
import org.openapitools.client.model.EntityProfileResultObject;
import org.openapitools.client.model.FraudCheckResultObject;
import org.openapitools.client.model.ProcessResultObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes all of the checks that were carried out against an entity as part of our cascading check process. Because there are a number of steps involved in checking an entity, (including the use of past checks done by you or others), there is an overall summary check result that will tell you the final disposition of the the check you requested.  So if you requested a 2+2+governmentID+pep/sanctions/etc (i.e. everything) then there would have been several checks done in order to meet this requirement. Some may have even failed, but eventually we got there. The summary gives the final assessment, based on all available data.  Detailed writeups on how this all works can be found here:   https://apidocs.frankiefinancial.com/docs/understanding-checksummary-results 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckEntityCheckResultObject {
  public static final String SERIALIZED_NAME_BLACKLIST_CHECK_RESULTS = "blacklistCheckResults";
  @SerializedName(SERIALIZED_NAME_BLACKLIST_CHECK_RESULTS)
  private List<ProcessResultObject> blacklistCheckResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHECK_RESULTS_LIST_SUMMARIES = "checkResultsListSummaries";
  @SerializedName(SERIALIZED_NAME_CHECK_RESULTS_LIST_SUMMARIES)
  private List<ProcessResultObject> checkResultsListSummaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHECK_RISK = "checkRisk";
  @SerializedName(SERIALIZED_NAME_CHECK_RISK)
  private ProcessResultObject checkRisk;

  public static final String SERIALIZED_NAME_CHECK_SUMMARY = "checkSummary";
  @SerializedName(SERIALIZED_NAME_CHECK_SUMMARY)
  private ProcessResultObject checkSummary;

  public static final String SERIALIZED_NAME_DEVICE_CHECK_RESULTS = "deviceCheckResults";
  @SerializedName(SERIALIZED_NAME_DEVICE_CHECK_RESULTS)
  private List<ProcessResultObject> deviceCheckResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_DUPLICATE_CHECK_RESULTS = "duplicateCheckResults";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_CHECK_RESULTS)
  private List<ProcessResultObject> duplicateCheckResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTITY = "entity";
  @SerializedName(SERIALIZED_NAME_ENTITY)
  private EntityObject entity;

  public static final String SERIALIZED_NAME_ENTITY_PROFILE_RESULT = "entityProfileResult";
  @SerializedName(SERIALIZED_NAME_ENTITY_PROFILE_RESULT)
  private EntityProfileResultObject entityProfileResult;

  public static final String SERIALIZED_NAME_ENTITY_RESULT = "entityResult";
  @SerializedName(SERIALIZED_NAME_ENTITY_RESULT)
  private CheckEntityCheckResultObjectEntityResult entityResult;

  public static final String SERIALIZED_NAME_FRAUD_CHECK_RESULTS = "fraudCheckResults";
  @SerializedName(SERIALIZED_NAME_FRAUD_CHECK_RESULTS)
  private FraudCheckResultObject fraudCheckResults;

  public static final String SERIALIZED_NAME_MANUAL_CHECK_RESULTS = "manualCheckResults";
  @SerializedName(SERIALIZED_NAME_MANUAL_CHECK_RESULTS)
  private List<ProcessResultObject> manualCheckResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_SHARED_BLOCKLIST_CHECK_RESULTS = "sharedBlocklistCheckResults";
  @SerializedName(SERIALIZED_NAME_SHARED_BLOCKLIST_CHECK_RESULTS)
  private List<ProcessResultObject> sharedBlocklistCheckResults = new ArrayList<>();

  public CheckEntityCheckResultObject() {
  }

  public CheckEntityCheckResultObject blacklistCheckResults(List<ProcessResultObject> blacklistCheckResults) {
    this.blacklistCheckResults = blacklistCheckResults;
    return this;
  }

  public CheckEntityCheckResultObject addBlacklistCheckResultsItem(ProcessResultObject blacklistCheckResultsItem) {
    if (this.blacklistCheckResults == null) {
      this.blacklistCheckResults = new ArrayList<>();
    }
    this.blacklistCheckResults.add(blacklistCheckResultsItem);
    return this;
  }

  /**
   * Collection of check results for the entity having been previously blacklisted.  An array of matched blacklisted entities sorted by match confidence level (highest first). 
   * @return blacklistCheckResults
   */
  @javax.annotation.Nullable
  public List<ProcessResultObject> getBlacklistCheckResults() {
    return blacklistCheckResults;
  }

  public void setBlacklistCheckResults(List<ProcessResultObject> blacklistCheckResults) {
    this.blacklistCheckResults = blacklistCheckResults;
  }


  public CheckEntityCheckResultObject checkResultsListSummaries(List<ProcessResultObject> checkResultsListSummaries) {
    this.checkResultsListSummaries = checkResultsListSummaries;
    return this;
  }

  public CheckEntityCheckResultObject addCheckResultsListSummariesItem(ProcessResultObject checkResultsListSummariesItem) {
    if (this.checkResultsListSummaries == null) {
      this.checkResultsListSummaries = new ArrayList<>();
    }
    this.checkResultsListSummaries.add(checkResultsListSummariesItem);
    return this;
  }

  /**
   * Contains a list of all checkSummary records (one for each check)
   * @return checkResultsListSummaries
   */
  @javax.annotation.Nullable
  public List<ProcessResultObject> getCheckResultsListSummaries() {
    return checkResultsListSummaries;
  }

  public void setCheckResultsListSummaries(List<ProcessResultObject> checkResultsListSummaries) {
    this.checkResultsListSummaries = checkResultsListSummaries;
  }


  public CheckEntityCheckResultObject checkRisk(ProcessResultObject checkRisk) {
    this.checkRisk = checkRisk;
    return this;
  }

  /**
   * Get checkRisk
   * @return checkRisk
   */
  @javax.annotation.Nullable
  public ProcessResultObject getCheckRisk() {
    return checkRisk;
  }

  public void setCheckRisk(ProcessResultObject checkRisk) {
    this.checkRisk = checkRisk;
  }


  public CheckEntityCheckResultObject checkSummary(ProcessResultObject checkSummary) {
    this.checkSummary = checkSummary;
    return this;
  }

  /**
   * Get checkSummary
   * @return checkSummary
   */
  @javax.annotation.Nullable
  public ProcessResultObject getCheckSummary() {
    return checkSummary;
  }

  public void setCheckSummary(ProcessResultObject checkSummary) {
    this.checkSummary = checkSummary;
  }


  public CheckEntityCheckResultObject deviceCheckResults(List<ProcessResultObject> deviceCheckResults) {
    this.deviceCheckResults = deviceCheckResults;
    return this;
  }

  public CheckEntityCheckResultObject addDeviceCheckResultsItem(ProcessResultObject deviceCheckResultsItem) {
    if (this.deviceCheckResults == null) {
      this.deviceCheckResults = new ArrayList<>();
    }
    this.deviceCheckResults.add(deviceCheckResultsItem);
    return this;
  }

  /**
   * We can perform a number of device checks on an entity, such as those from ThreatMetrix and/or BioCatch. If one of these checks was incorporated into the ID check, then these will appear here. 
   * @return deviceCheckResults
   */
  @javax.annotation.Nullable
  public List<ProcessResultObject> getDeviceCheckResults() {
    return deviceCheckResults;
  }

  public void setDeviceCheckResults(List<ProcessResultObject> deviceCheckResults) {
    this.deviceCheckResults = deviceCheckResults;
  }


  public CheckEntityCheckResultObject duplicateCheckResults(List<ProcessResultObject> duplicateCheckResults) {
    this.duplicateCheckResults = duplicateCheckResults;
    return this;
  }

  public CheckEntityCheckResultObject addDuplicateCheckResultsItem(ProcessResultObject duplicateCheckResultsItem) {
    if (this.duplicateCheckResults == null) {
      this.duplicateCheckResults = new ArrayList<>();
    }
    this.duplicateCheckResults.add(duplicateCheckResultsItem);
    return this;
  }

  /**
   * Collection of check results for the entity having previously been checked.  An array of matched checked entities sorted by match confidence level (highest first). 
   * @return duplicateCheckResults
   */
  @javax.annotation.Nullable
  public List<ProcessResultObject> getDuplicateCheckResults() {
    return duplicateCheckResults;
  }

  public void setDuplicateCheckResults(List<ProcessResultObject> duplicateCheckResults) {
    this.duplicateCheckResults = duplicateCheckResults;
  }


  public CheckEntityCheckResultObject entity(EntityObject entity) {
    this.entity = entity;
    return this;
  }

  /**
   * Get entity
   * @return entity
   */
  @javax.annotation.Nullable
  public EntityObject getEntity() {
    return entity;
  }

  public void setEntity(EntityObject entity) {
    this.entity = entity;
  }


  public CheckEntityCheckResultObject entityProfileResult(EntityProfileResultObject entityProfileResult) {
    this.entityProfileResult = entityProfileResult;
    return this;
  }

  /**
   * Get entityProfileResult
   * @return entityProfileResult
   */
  @javax.annotation.Nullable
  public EntityProfileResultObject getEntityProfileResult() {
    return entityProfileResult;
  }

  public void setEntityProfileResult(EntityProfileResultObject entityProfileResult) {
    this.entityProfileResult = entityProfileResult;
  }


  public CheckEntityCheckResultObject entityResult(CheckEntityCheckResultObjectEntityResult entityResult) {
    this.entityResult = entityResult;
    return this;
  }

  /**
   * Get entityResult
   * @return entityResult
   */
  @javax.annotation.Nullable
  public CheckEntityCheckResultObjectEntityResult getEntityResult() {
    return entityResult;
  }

  public void setEntityResult(CheckEntityCheckResultObjectEntityResult entityResult) {
    this.entityResult = entityResult;
  }


  public CheckEntityCheckResultObject fraudCheckResults(FraudCheckResultObject fraudCheckResults) {
    this.fraudCheckResults = fraudCheckResults;
    return this;
  }

  /**
   * Get fraudCheckResults
   * @return fraudCheckResults
   */
  @javax.annotation.Nullable
  public FraudCheckResultObject getFraudCheckResults() {
    return fraudCheckResults;
  }

  public void setFraudCheckResults(FraudCheckResultObject fraudCheckResults) {
    this.fraudCheckResults = fraudCheckResults;
  }


  public CheckEntityCheckResultObject manualCheckResults(List<ProcessResultObject> manualCheckResults) {
    this.manualCheckResults = manualCheckResults;
    return this;
  }

  public CheckEntityCheckResultObject addManualCheckResultsItem(ProcessResultObject manualCheckResultsItem) {
    if (this.manualCheckResults == null) {
      this.manualCheckResults = new ArrayList<>();
    }
    this.manualCheckResults.add(manualCheckResultsItem);
    return this;
  }

  /**
   * Collection of check results for the manual KYC.  An array of one entry with the manual check result. 
   * @return manualCheckResults
   */
  @javax.annotation.Nullable
  public List<ProcessResultObject> getManualCheckResults() {
    return manualCheckResults;
  }

  public void setManualCheckResults(List<ProcessResultObject> manualCheckResults) {
    this.manualCheckResults = manualCheckResults;
  }


  public CheckEntityCheckResultObject requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public CheckEntityCheckResultObject sharedBlocklistCheckResults(List<ProcessResultObject> sharedBlocklistCheckResults) {
    this.sharedBlocklistCheckResults = sharedBlocklistCheckResults;
    return this;
  }

  public CheckEntityCheckResultObject addSharedBlocklistCheckResultsItem(ProcessResultObject sharedBlocklistCheckResultsItem) {
    if (this.sharedBlocklistCheckResults == null) {
      this.sharedBlocklistCheckResults = new ArrayList<>();
    }
    this.sharedBlocklistCheckResults.add(sharedBlocklistCheckResultsItem);
    return this;
  }

  /**
   * Collection of check results for the entity having been previously blacklisted in shared blocklist.  An array of matched blacklisted entities sorted by match confidence level (highest first). 
   * @return sharedBlocklistCheckResults
   */
  @javax.annotation.Nullable
  public List<ProcessResultObject> getSharedBlocklistCheckResults() {
    return sharedBlocklistCheckResults;
  }

  public void setSharedBlocklistCheckResults(List<ProcessResultObject> sharedBlocklistCheckResults) {
    this.sharedBlocklistCheckResults = sharedBlocklistCheckResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckEntityCheckResultObject checkEntityCheckResultObject = (CheckEntityCheckResultObject) o;
    return Objects.equals(this.blacklistCheckResults, checkEntityCheckResultObject.blacklistCheckResults) &&
        Objects.equals(this.checkResultsListSummaries, checkEntityCheckResultObject.checkResultsListSummaries) &&
        Objects.equals(this.checkRisk, checkEntityCheckResultObject.checkRisk) &&
        Objects.equals(this.checkSummary, checkEntityCheckResultObject.checkSummary) &&
        Objects.equals(this.deviceCheckResults, checkEntityCheckResultObject.deviceCheckResults) &&
        Objects.equals(this.duplicateCheckResults, checkEntityCheckResultObject.duplicateCheckResults) &&
        Objects.equals(this.entity, checkEntityCheckResultObject.entity) &&
        Objects.equals(this.entityProfileResult, checkEntityCheckResultObject.entityProfileResult) &&
        Objects.equals(this.entityResult, checkEntityCheckResultObject.entityResult) &&
        Objects.equals(this.fraudCheckResults, checkEntityCheckResultObject.fraudCheckResults) &&
        Objects.equals(this.manualCheckResults, checkEntityCheckResultObject.manualCheckResults) &&
        Objects.equals(this.requestId, checkEntityCheckResultObject.requestId) &&
        Objects.equals(this.sharedBlocklistCheckResults, checkEntityCheckResultObject.sharedBlocklistCheckResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blacklistCheckResults, checkResultsListSummaries, checkRisk, checkSummary, deviceCheckResults, duplicateCheckResults, entity, entityProfileResult, entityResult, fraudCheckResults, manualCheckResults, requestId, sharedBlocklistCheckResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckEntityCheckResultObject {\n");
    sb.append("    blacklistCheckResults: ").append(toIndentedString(blacklistCheckResults)).append("\n");
    sb.append("    checkResultsListSummaries: ").append(toIndentedString(checkResultsListSummaries)).append("\n");
    sb.append("    checkRisk: ").append(toIndentedString(checkRisk)).append("\n");
    sb.append("    checkSummary: ").append(toIndentedString(checkSummary)).append("\n");
    sb.append("    deviceCheckResults: ").append(toIndentedString(deviceCheckResults)).append("\n");
    sb.append("    duplicateCheckResults: ").append(toIndentedString(duplicateCheckResults)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    entityProfileResult: ").append(toIndentedString(entityProfileResult)).append("\n");
    sb.append("    entityResult: ").append(toIndentedString(entityResult)).append("\n");
    sb.append("    fraudCheckResults: ").append(toIndentedString(fraudCheckResults)).append("\n");
    sb.append("    manualCheckResults: ").append(toIndentedString(manualCheckResults)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    sharedBlocklistCheckResults: ").append(toIndentedString(sharedBlocklistCheckResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blacklistCheckResults");
    openapiFields.add("checkResultsListSummaries");
    openapiFields.add("checkRisk");
    openapiFields.add("checkSummary");
    openapiFields.add("deviceCheckResults");
    openapiFields.add("duplicateCheckResults");
    openapiFields.add("entity");
    openapiFields.add("entityProfileResult");
    openapiFields.add("entityResult");
    openapiFields.add("fraudCheckResults");
    openapiFields.add("manualCheckResults");
    openapiFields.add("requestId");
    openapiFields.add("sharedBlocklistCheckResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckEntityCheckResultObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckEntityCheckResultObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckEntityCheckResultObject is not found in the empty JSON string", CheckEntityCheckResultObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckEntityCheckResultObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckEntityCheckResultObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("blacklistCheckResults") != null && !jsonObj.get("blacklistCheckResults").isJsonNull()) {
        JsonArray jsonArrayblacklistCheckResults = jsonObj.getAsJsonArray("blacklistCheckResults");
        if (jsonArrayblacklistCheckResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("blacklistCheckResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `blacklistCheckResults` to be an array in the JSON string but got `%s`", jsonObj.get("blacklistCheckResults").toString()));
          }

          // validate the optional field `blacklistCheckResults` (array)
          for (int i = 0; i < jsonArrayblacklistCheckResults.size(); i++) {
            ProcessResultObject.validateJsonElement(jsonArrayblacklistCheckResults.get(i));
          };
        }
      }
      if (jsonObj.get("checkResultsListSummaries") != null && !jsonObj.get("checkResultsListSummaries").isJsonNull()) {
        JsonArray jsonArraycheckResultsListSummaries = jsonObj.getAsJsonArray("checkResultsListSummaries");
        if (jsonArraycheckResultsListSummaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("checkResultsListSummaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `checkResultsListSummaries` to be an array in the JSON string but got `%s`", jsonObj.get("checkResultsListSummaries").toString()));
          }

          // validate the optional field `checkResultsListSummaries` (array)
          for (int i = 0; i < jsonArraycheckResultsListSummaries.size(); i++) {
            ProcessResultObject.validateJsonElement(jsonArraycheckResultsListSummaries.get(i));
          };
        }
      }
      // validate the optional field `checkRisk`
      if (jsonObj.get("checkRisk") != null && !jsonObj.get("checkRisk").isJsonNull()) {
        ProcessResultObject.validateJsonElement(jsonObj.get("checkRisk"));
      }
      // validate the optional field `checkSummary`
      if (jsonObj.get("checkSummary") != null && !jsonObj.get("checkSummary").isJsonNull()) {
        ProcessResultObject.validateJsonElement(jsonObj.get("checkSummary"));
      }
      if (jsonObj.get("deviceCheckResults") != null && !jsonObj.get("deviceCheckResults").isJsonNull()) {
        JsonArray jsonArraydeviceCheckResults = jsonObj.getAsJsonArray("deviceCheckResults");
        if (jsonArraydeviceCheckResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deviceCheckResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deviceCheckResults` to be an array in the JSON string but got `%s`", jsonObj.get("deviceCheckResults").toString()));
          }

          // validate the optional field `deviceCheckResults` (array)
          for (int i = 0; i < jsonArraydeviceCheckResults.size(); i++) {
            ProcessResultObject.validateJsonElement(jsonArraydeviceCheckResults.get(i));
          };
        }
      }
      if (jsonObj.get("duplicateCheckResults") != null && !jsonObj.get("duplicateCheckResults").isJsonNull()) {
        JsonArray jsonArrayduplicateCheckResults = jsonObj.getAsJsonArray("duplicateCheckResults");
        if (jsonArrayduplicateCheckResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("duplicateCheckResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `duplicateCheckResults` to be an array in the JSON string but got `%s`", jsonObj.get("duplicateCheckResults").toString()));
          }

          // validate the optional field `duplicateCheckResults` (array)
          for (int i = 0; i < jsonArrayduplicateCheckResults.size(); i++) {
            ProcessResultObject.validateJsonElement(jsonArrayduplicateCheckResults.get(i));
          };
        }
      }
      // validate the optional field `entity`
      if (jsonObj.get("entity") != null && !jsonObj.get("entity").isJsonNull()) {
        EntityObject.validateJsonElement(jsonObj.get("entity"));
      }
      // validate the optional field `entityProfileResult`
      if (jsonObj.get("entityProfileResult") != null && !jsonObj.get("entityProfileResult").isJsonNull()) {
        EntityProfileResultObject.validateJsonElement(jsonObj.get("entityProfileResult"));
      }
      // validate the optional field `entityResult`
      if (jsonObj.get("entityResult") != null && !jsonObj.get("entityResult").isJsonNull()) {
        CheckEntityCheckResultObjectEntityResult.validateJsonElement(jsonObj.get("entityResult"));
      }
      // validate the optional field `fraudCheckResults`
      if (jsonObj.get("fraudCheckResults") != null && !jsonObj.get("fraudCheckResults").isJsonNull()) {
        FraudCheckResultObject.validateJsonElement(jsonObj.get("fraudCheckResults"));
      }
      if (jsonObj.get("manualCheckResults") != null && !jsonObj.get("manualCheckResults").isJsonNull()) {
        JsonArray jsonArraymanualCheckResults = jsonObj.getAsJsonArray("manualCheckResults");
        if (jsonArraymanualCheckResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("manualCheckResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `manualCheckResults` to be an array in the JSON string but got `%s`", jsonObj.get("manualCheckResults").toString()));
          }

          // validate the optional field `manualCheckResults` (array)
          for (int i = 0; i < jsonArraymanualCheckResults.size(); i++) {
            ProcessResultObject.validateJsonElement(jsonArraymanualCheckResults.get(i));
          };
        }
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if (jsonObj.get("sharedBlocklistCheckResults") != null && !jsonObj.get("sharedBlocklistCheckResults").isJsonNull()) {
        JsonArray jsonArraysharedBlocklistCheckResults = jsonObj.getAsJsonArray("sharedBlocklistCheckResults");
        if (jsonArraysharedBlocklistCheckResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sharedBlocklistCheckResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sharedBlocklistCheckResults` to be an array in the JSON string but got `%s`", jsonObj.get("sharedBlocklistCheckResults").toString()));
          }

          // validate the optional field `sharedBlocklistCheckResults` (array)
          for (int i = 0; i < jsonArraysharedBlocklistCheckResults.size(); i++) {
            ProcessResultObject.validateJsonElement(jsonArraysharedBlocklistCheckResults.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckEntityCheckResultObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckEntityCheckResultObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckEntityCheckResultObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckEntityCheckResultObject.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckEntityCheckResultObject>() {
           @Override
           public void write(JsonWriter out, CheckEntityCheckResultObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckEntityCheckResultObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckEntityCheckResultObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckEntityCheckResultObject
   * @throws IOException if the JSON string is invalid with respect to CheckEntityCheckResultObject
   */
  public static CheckEntityCheckResultObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckEntityCheckResultObject.class);
  }

  /**
   * Convert an instance of CheckEntityCheckResultObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

