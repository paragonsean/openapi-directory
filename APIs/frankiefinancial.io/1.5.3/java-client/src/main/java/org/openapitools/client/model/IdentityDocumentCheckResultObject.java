/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GeneralCheckResultObject;
import org.openapitools.client.model.IdentityDocumentObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This object holds the identityDocument that was checked and the results associated with said checks. You can also leave the checkResult blank/nil if there are no results for that identityDocument if you wish.  This is useful for returning results on a freshly crerated entity where the API user would want to confirm that the data has indeed been stored, and be able to capture relevant documentIds - perhaps to address issues as to why it wasn&#39;t checked. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentityDocumentCheckResultObject {
  public static final String SERIALIZED_NAME_CHECK_RESULT = "checkResult";
  @SerializedName(SERIALIZED_NAME_CHECK_RESULT)
  private List<GeneralCheckResultObject> checkResult = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID_DOCUMENT = "idDocument";
  @SerializedName(SERIALIZED_NAME_ID_DOCUMENT)
  private IdentityDocumentObject idDocument;

  public IdentityDocumentCheckResultObject() {
  }

  public IdentityDocumentCheckResultObject checkResult(List<GeneralCheckResultObject> checkResult) {
    this.checkResult = checkResult;
    return this;
  }

  public IdentityDocumentCheckResultObject addCheckResultItem(GeneralCheckResultObject checkResultItem) {
    if (this.checkResult == null) {
      this.checkResult = new ArrayList<>();
    }
    this.checkResult.add(checkResultItem);
    return this;
  }

  /**
   * An array in reverse chronological order of all checks done on this data point for the given entity. Older checks may have been previously done by you or another institution, and if so, these will be listed.
   * @return checkResult
   */
  @javax.annotation.Nullable
  public List<GeneralCheckResultObject> getCheckResult() {
    return checkResult;
  }

  public void setCheckResult(List<GeneralCheckResultObject> checkResult) {
    this.checkResult = checkResult;
  }


  public IdentityDocumentCheckResultObject idDocument(IdentityDocumentObject idDocument) {
    this.idDocument = idDocument;
    return this;
  }

  /**
   * Get idDocument
   * @return idDocument
   */
  @javax.annotation.Nullable
  public IdentityDocumentObject getIdDocument() {
    return idDocument;
  }

  public void setIdDocument(IdentityDocumentObject idDocument) {
    this.idDocument = idDocument;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentityDocumentCheckResultObject identityDocumentCheckResultObject = (IdentityDocumentCheckResultObject) o;
    return Objects.equals(this.checkResult, identityDocumentCheckResultObject.checkResult) &&
        Objects.equals(this.idDocument, identityDocumentCheckResultObject.idDocument);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkResult, idDocument);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentityDocumentCheckResultObject {\n");
    sb.append("    checkResult: ").append(toIndentedString(checkResult)).append("\n");
    sb.append("    idDocument: ").append(toIndentedString(idDocument)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checkResult");
    openapiFields.add("idDocument");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentityDocumentCheckResultObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentityDocumentCheckResultObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentityDocumentCheckResultObject is not found in the empty JSON string", IdentityDocumentCheckResultObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentityDocumentCheckResultObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentityDocumentCheckResultObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("checkResult") != null && !jsonObj.get("checkResult").isJsonNull()) {
        JsonArray jsonArraycheckResult = jsonObj.getAsJsonArray("checkResult");
        if (jsonArraycheckResult != null) {
          // ensure the json data is an array
          if (!jsonObj.get("checkResult").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `checkResult` to be an array in the JSON string but got `%s`", jsonObj.get("checkResult").toString()));
          }

          // validate the optional field `checkResult` (array)
          for (int i = 0; i < jsonArraycheckResult.size(); i++) {
            GeneralCheckResultObject.validateJsonElement(jsonArraycheckResult.get(i));
          };
        }
      }
      // validate the optional field `idDocument`
      if (jsonObj.get("idDocument") != null && !jsonObj.get("idDocument").isJsonNull()) {
        IdentityDocumentObject.validateJsonElement(jsonObj.get("idDocument"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentityDocumentCheckResultObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentityDocumentCheckResultObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentityDocumentCheckResultObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentityDocumentCheckResultObject.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentityDocumentCheckResultObject>() {
           @Override
           public void write(JsonWriter out, IdentityDocumentCheckResultObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentityDocumentCheckResultObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentityDocumentCheckResultObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentityDocumentCheckResultObject
   * @throws IOException if the JSON string is invalid with respect to IdentityDocumentCheckResultObject
   */
  public static IdentityDocumentCheckResultObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentityDocumentCheckResultObject.class);
  }

  /**
   * Convert an instance of IdentityDocumentCheckResultObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

