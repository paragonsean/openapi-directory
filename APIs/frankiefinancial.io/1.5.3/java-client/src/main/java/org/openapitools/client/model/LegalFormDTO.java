/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LegalFormDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LegalFormDTO {
  public static final String SERIALIZED_NAME_BASIS = "Basis";
  @SerializedName(SERIALIZED_NAME_BASIS)
  private String basis;

  public static final String SERIALIZED_NAME_CAPITAL = "Capital";
  @SerializedName(SERIALIZED_NAME_CAPITAL)
  private String capital;

  public static final String SERIALIZED_NAME_COMMENTS = "Comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_CONTROL = "Control";
  @SerializedName(SERIALIZED_NAME_CONTROL)
  private String control;

  public static final String SERIALIZED_NAME_INCORP = "Incorp";
  @SerializedName(SERIALIZED_NAME_INCORP)
  private String incorp;

  public static final String SERIALIZED_NAME_PARTNER = "Partner";
  @SerializedName(SERIALIZED_NAME_PARTNER)
  private String partner;

  public static final String SERIALIZED_NAME_RESPONSIBILITY = "Responsibility";
  @SerializedName(SERIALIZED_NAME_RESPONSIBILITY)
  private String responsibility;

  public static final String SERIALIZED_NAME_STOCKS = "Stocks";
  @SerializedName(SERIALIZED_NAME_STOCKS)
  private String stocks;

  public LegalFormDTO() {
  }

  public LegalFormDTO basis(String basis) {
    this.basis = basis;
    return this;
  }

  /**
   * Get basis
   * @return basis
   */
  @javax.annotation.Nullable
  public String getBasis() {
    return basis;
  }

  public void setBasis(String basis) {
    this.basis = basis;
  }


  public LegalFormDTO capital(String capital) {
    this.capital = capital;
    return this;
  }

  /**
   * Get capital
   * @return capital
   */
  @javax.annotation.Nullable
  public String getCapital() {
    return capital;
  }

  public void setCapital(String capital) {
    this.capital = capital;
  }


  public LegalFormDTO comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  public LegalFormDTO control(String control) {
    this.control = control;
    return this;
  }

  /**
   * Get control
   * @return control
   */
  @javax.annotation.Nullable
  public String getControl() {
    return control;
  }

  public void setControl(String control) {
    this.control = control;
  }


  public LegalFormDTO incorp(String incorp) {
    this.incorp = incorp;
    return this;
  }

  /**
   * Get incorp
   * @return incorp
   */
  @javax.annotation.Nullable
  public String getIncorp() {
    return incorp;
  }

  public void setIncorp(String incorp) {
    this.incorp = incorp;
  }


  public LegalFormDTO partner(String partner) {
    this.partner = partner;
    return this;
  }

  /**
   * Get partner
   * @return partner
   */
  @javax.annotation.Nullable
  public String getPartner() {
    return partner;
  }

  public void setPartner(String partner) {
    this.partner = partner;
  }


  public LegalFormDTO responsibility(String responsibility) {
    this.responsibility = responsibility;
    return this;
  }

  /**
   * Get responsibility
   * @return responsibility
   */
  @javax.annotation.Nullable
  public String getResponsibility() {
    return responsibility;
  }

  public void setResponsibility(String responsibility) {
    this.responsibility = responsibility;
  }


  public LegalFormDTO stocks(String stocks) {
    this.stocks = stocks;
    return this;
  }

  /**
   * Get stocks
   * @return stocks
   */
  @javax.annotation.Nullable
  public String getStocks() {
    return stocks;
  }

  public void setStocks(String stocks) {
    this.stocks = stocks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalFormDTO legalFormDTO = (LegalFormDTO) o;
    return Objects.equals(this.basis, legalFormDTO.basis) &&
        Objects.equals(this.capital, legalFormDTO.capital) &&
        Objects.equals(this.comments, legalFormDTO.comments) &&
        Objects.equals(this.control, legalFormDTO.control) &&
        Objects.equals(this.incorp, legalFormDTO.incorp) &&
        Objects.equals(this.partner, legalFormDTO.partner) &&
        Objects.equals(this.responsibility, legalFormDTO.responsibility) &&
        Objects.equals(this.stocks, legalFormDTO.stocks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basis, capital, comments, control, incorp, partner, responsibility, stocks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalFormDTO {\n");
    sb.append("    basis: ").append(toIndentedString(basis)).append("\n");
    sb.append("    capital: ").append(toIndentedString(capital)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    control: ").append(toIndentedString(control)).append("\n");
    sb.append("    incorp: ").append(toIndentedString(incorp)).append("\n");
    sb.append("    partner: ").append(toIndentedString(partner)).append("\n");
    sb.append("    responsibility: ").append(toIndentedString(responsibility)).append("\n");
    sb.append("    stocks: ").append(toIndentedString(stocks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Basis");
    openapiFields.add("Capital");
    openapiFields.add("Comments");
    openapiFields.add("Control");
    openapiFields.add("Incorp");
    openapiFields.add("Partner");
    openapiFields.add("Responsibility");
    openapiFields.add("Stocks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LegalFormDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LegalFormDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegalFormDTO is not found in the empty JSON string", LegalFormDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LegalFormDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LegalFormDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Basis") != null && !jsonObj.get("Basis").isJsonNull()) && !jsonObj.get("Basis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Basis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Basis").toString()));
      }
      if ((jsonObj.get("Capital") != null && !jsonObj.get("Capital").isJsonNull()) && !jsonObj.get("Capital").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Capital` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Capital").toString()));
      }
      if ((jsonObj.get("Comments") != null && !jsonObj.get("Comments").isJsonNull()) && !jsonObj.get("Comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Comments").toString()));
      }
      if ((jsonObj.get("Control") != null && !jsonObj.get("Control").isJsonNull()) && !jsonObj.get("Control").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Control` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Control").toString()));
      }
      if ((jsonObj.get("Incorp") != null && !jsonObj.get("Incorp").isJsonNull()) && !jsonObj.get("Incorp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Incorp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Incorp").toString()));
      }
      if ((jsonObj.get("Partner") != null && !jsonObj.get("Partner").isJsonNull()) && !jsonObj.get("Partner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Partner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Partner").toString()));
      }
      if ((jsonObj.get("Responsibility") != null && !jsonObj.get("Responsibility").isJsonNull()) && !jsonObj.get("Responsibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Responsibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Responsibility").toString()));
      }
      if ((jsonObj.get("Stocks") != null && !jsonObj.get("Stocks").isJsonNull()) && !jsonObj.get("Stocks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Stocks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Stocks").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegalFormDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegalFormDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegalFormDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegalFormDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<LegalFormDTO>() {
           @Override
           public void write(JsonWriter out, LegalFormDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LegalFormDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LegalFormDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LegalFormDTO
   * @throws IOException if the JSON string is invalid with respect to LegalFormDTO
   */
  public static LegalFormDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegalFormDTO.class);
  }

  /**
   * Convert an instance of LegalFormDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

