# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BookDepreciationSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, averaging_method: str=None, book_effective_date_of_change_id: str=None, depreciable_object_id: str=None, depreciable_object_type: str=None, depreciation_calculation_method: str=None, depreciation_method: str=None, depreciation_rate: float=None, effective_life_years: int=None):
        """BookDepreciationSetting - a model defined in OpenAPI

        :param averaging_method: The averaging_method of this BookDepreciationSetting.
        :param book_effective_date_of_change_id: The book_effective_date_of_change_id of this BookDepreciationSetting.
        :param depreciable_object_id: The depreciable_object_id of this BookDepreciationSetting.
        :param depreciable_object_type: The depreciable_object_type of this BookDepreciationSetting.
        :param depreciation_calculation_method: The depreciation_calculation_method of this BookDepreciationSetting.
        :param depreciation_method: The depreciation_method of this BookDepreciationSetting.
        :param depreciation_rate: The depreciation_rate of this BookDepreciationSetting.
        :param effective_life_years: The effective_life_years of this BookDepreciationSetting.
        """
        self.openapi_types = {
            'averaging_method': str,
            'book_effective_date_of_change_id': str,
            'depreciable_object_id': str,
            'depreciable_object_type': str,
            'depreciation_calculation_method': str,
            'depreciation_method': str,
            'depreciation_rate': float,
            'effective_life_years': int
        }

        self.attribute_map = {
            'averaging_method': 'averagingMethod',
            'book_effective_date_of_change_id': 'bookEffectiveDateOfChangeId',
            'depreciable_object_id': 'depreciableObjectId',
            'depreciable_object_type': 'depreciableObjectType',
            'depreciation_calculation_method': 'depreciationCalculationMethod',
            'depreciation_method': 'depreciationMethod',
            'depreciation_rate': 'depreciationRate',
            'effective_life_years': 'effectiveLifeYears'
        }

        self._averaging_method = averaging_method
        self._book_effective_date_of_change_id = book_effective_date_of_change_id
        self._depreciable_object_id = depreciable_object_id
        self._depreciable_object_type = depreciable_object_type
        self._depreciation_calculation_method = depreciation_calculation_method
        self._depreciation_method = depreciation_method
        self._depreciation_rate = depreciation_rate
        self._effective_life_years = effective_life_years

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookDepreciationSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BookDepreciationSetting of this BookDepreciationSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def averaging_method(self):
        """Gets the averaging_method of this BookDepreciationSetting.

        The method of averaging applied to this asset. See Averaging Methods

        :return: The averaging_method of this BookDepreciationSetting.
        :rtype: str
        """
        return self._averaging_method

    @averaging_method.setter
    def averaging_method(self, averaging_method):
        """Sets the averaging_method of this BookDepreciationSetting.

        The method of averaging applied to this asset. See Averaging Methods

        :param averaging_method: The averaging_method of this BookDepreciationSetting.
        :type averaging_method: str
        """
        allowed_values = ["FullMonth", "ActualDays"]  # noqa: E501
        if averaging_method not in allowed_values:
            raise ValueError(
                "Invalid value for `averaging_method` ({0}), must be one of {1}"
                .format(averaging_method, allowed_values)
            )

        self._averaging_method = averaging_method

    @property
    def book_effective_date_of_change_id(self):
        """Gets the book_effective_date_of_change_id of this BookDepreciationSetting.

        Unique Xero identifier for the effective date change

        :return: The book_effective_date_of_change_id of this BookDepreciationSetting.
        :rtype: str
        """
        return self._book_effective_date_of_change_id

    @book_effective_date_of_change_id.setter
    def book_effective_date_of_change_id(self, book_effective_date_of_change_id):
        """Sets the book_effective_date_of_change_id of this BookDepreciationSetting.

        Unique Xero identifier for the effective date change

        :param book_effective_date_of_change_id: The book_effective_date_of_change_id of this BookDepreciationSetting.
        :type book_effective_date_of_change_id: str
        """

        self._book_effective_date_of_change_id = book_effective_date_of_change_id

    @property
    def depreciable_object_id(self):
        """Gets the depreciable_object_id of this BookDepreciationSetting.

        Unique Xero identifier for the depreciable object

        :return: The depreciable_object_id of this BookDepreciationSetting.
        :rtype: str
        """
        return self._depreciable_object_id

    @depreciable_object_id.setter
    def depreciable_object_id(self, depreciable_object_id):
        """Sets the depreciable_object_id of this BookDepreciationSetting.

        Unique Xero identifier for the depreciable object

        :param depreciable_object_id: The depreciable_object_id of this BookDepreciationSetting.
        :type depreciable_object_id: str
        """

        self._depreciable_object_id = depreciable_object_id

    @property
    def depreciable_object_type(self):
        """Gets the depreciable_object_type of this BookDepreciationSetting.

        The type of asset object

        :return: The depreciable_object_type of this BookDepreciationSetting.
        :rtype: str
        """
        return self._depreciable_object_type

    @depreciable_object_type.setter
    def depreciable_object_type(self, depreciable_object_type):
        """Sets the depreciable_object_type of this BookDepreciationSetting.

        The type of asset object

        :param depreciable_object_type: The depreciable_object_type of this BookDepreciationSetting.
        :type depreciable_object_type: str
        """

        self._depreciable_object_type = depreciable_object_type

    @property
    def depreciation_calculation_method(self):
        """Gets the depreciation_calculation_method of this BookDepreciationSetting.

        See Depreciation Calculation Methods

        :return: The depreciation_calculation_method of this BookDepreciationSetting.
        :rtype: str
        """
        return self._depreciation_calculation_method

    @depreciation_calculation_method.setter
    def depreciation_calculation_method(self, depreciation_calculation_method):
        """Sets the depreciation_calculation_method of this BookDepreciationSetting.

        See Depreciation Calculation Methods

        :param depreciation_calculation_method: The depreciation_calculation_method of this BookDepreciationSetting.
        :type depreciation_calculation_method: str
        """
        allowed_values = ["Rate", "Life", "None"]  # noqa: E501
        if depreciation_calculation_method not in allowed_values:
            raise ValueError(
                "Invalid value for `depreciation_calculation_method` ({0}), must be one of {1}"
                .format(depreciation_calculation_method, allowed_values)
            )

        self._depreciation_calculation_method = depreciation_calculation_method

    @property
    def depreciation_method(self):
        """Gets the depreciation_method of this BookDepreciationSetting.

        The method of depreciation applied to this asset. See Depreciation Methods

        :return: The depreciation_method of this BookDepreciationSetting.
        :rtype: str
        """
        return self._depreciation_method

    @depreciation_method.setter
    def depreciation_method(self, depreciation_method):
        """Sets the depreciation_method of this BookDepreciationSetting.

        The method of depreciation applied to this asset. See Depreciation Methods

        :param depreciation_method: The depreciation_method of this BookDepreciationSetting.
        :type depreciation_method: str
        """
        allowed_values = ["NoDepreciation", "StraightLine", "DiminishingValue100", "DiminishingValue150", "DiminishingValue200", "FullDepreciation"]  # noqa: E501
        if depreciation_method not in allowed_values:
            raise ValueError(
                "Invalid value for `depreciation_method` ({0}), must be one of {1}"
                .format(depreciation_method, allowed_values)
            )

        self._depreciation_method = depreciation_method

    @property
    def depreciation_rate(self):
        """Gets the depreciation_rate of this BookDepreciationSetting.

        The rate of depreciation (e.g. 0.05)

        :return: The depreciation_rate of this BookDepreciationSetting.
        :rtype: float
        """
        return self._depreciation_rate

    @depreciation_rate.setter
    def depreciation_rate(self, depreciation_rate):
        """Sets the depreciation_rate of this BookDepreciationSetting.

        The rate of depreciation (e.g. 0.05)

        :param depreciation_rate: The depreciation_rate of this BookDepreciationSetting.
        :type depreciation_rate: float
        """

        self._depreciation_rate = depreciation_rate

    @property
    def effective_life_years(self):
        """Gets the effective_life_years of this BookDepreciationSetting.

        Effective life of the asset in years (e.g. 5)

        :return: The effective_life_years of this BookDepreciationSetting.
        :rtype: int
        """
        return self._effective_life_years

    @effective_life_years.setter
    def effective_life_years(self, effective_life_years):
        """Sets the effective_life_years of this BookDepreciationSetting.

        Effective life of the asset in years (e.g. 5)

        :param effective_life_years: The effective_life_years of this BookDepreciationSetting.
        :type effective_life_years: int
        """

        self._effective_life_years = effective_life_years
