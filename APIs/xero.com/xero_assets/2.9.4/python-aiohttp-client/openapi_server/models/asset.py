# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_status import AssetStatus
from openapi_server.models.book_depreciation_detail import BookDepreciationDetail
from openapi_server.models.book_depreciation_setting import BookDepreciationSetting
from openapi_server import util


class Asset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounting_book_value: float=None, asset_id: str=None, asset_name: str=None, asset_number: str=None, asset_status: AssetStatus=None, asset_type_id: str=None, book_depreciation_detail: BookDepreciationDetail=None, book_depreciation_setting: BookDepreciationSetting=None, can_rollback: bool=None, disposal_date: date=None, disposal_price: float=None, is_delete_enabled_for_date: bool=None, purchase_date: date=None, purchase_price: float=None, serial_number: str=None, warranty_expiry_date: str=None):
        """Asset - a model defined in OpenAPI

        :param accounting_book_value: The accounting_book_value of this Asset.
        :param asset_id: The asset_id of this Asset.
        :param asset_name: The asset_name of this Asset.
        :param asset_number: The asset_number of this Asset.
        :param asset_status: The asset_status of this Asset.
        :param asset_type_id: The asset_type_id of this Asset.
        :param book_depreciation_detail: The book_depreciation_detail of this Asset.
        :param book_depreciation_setting: The book_depreciation_setting of this Asset.
        :param can_rollback: The can_rollback of this Asset.
        :param disposal_date: The disposal_date of this Asset.
        :param disposal_price: The disposal_price of this Asset.
        :param is_delete_enabled_for_date: The is_delete_enabled_for_date of this Asset.
        :param purchase_date: The purchase_date of this Asset.
        :param purchase_price: The purchase_price of this Asset.
        :param serial_number: The serial_number of this Asset.
        :param warranty_expiry_date: The warranty_expiry_date of this Asset.
        """
        self.openapi_types = {
            'accounting_book_value': float,
            'asset_id': str,
            'asset_name': str,
            'asset_number': str,
            'asset_status': AssetStatus,
            'asset_type_id': str,
            'book_depreciation_detail': BookDepreciationDetail,
            'book_depreciation_setting': BookDepreciationSetting,
            'can_rollback': bool,
            'disposal_date': date,
            'disposal_price': float,
            'is_delete_enabled_for_date': bool,
            'purchase_date': date,
            'purchase_price': float,
            'serial_number': str,
            'warranty_expiry_date': str
        }

        self.attribute_map = {
            'accounting_book_value': 'accountingBookValue',
            'asset_id': 'assetId',
            'asset_name': 'assetName',
            'asset_number': 'assetNumber',
            'asset_status': 'assetStatus',
            'asset_type_id': 'assetTypeId',
            'book_depreciation_detail': 'bookDepreciationDetail',
            'book_depreciation_setting': 'bookDepreciationSetting',
            'can_rollback': 'canRollback',
            'disposal_date': 'disposalDate',
            'disposal_price': 'disposalPrice',
            'is_delete_enabled_for_date': 'isDeleteEnabledForDate',
            'purchase_date': 'purchaseDate',
            'purchase_price': 'purchasePrice',
            'serial_number': 'serialNumber',
            'warranty_expiry_date': 'warrantyExpiryDate'
        }

        self._accounting_book_value = accounting_book_value
        self._asset_id = asset_id
        self._asset_name = asset_name
        self._asset_number = asset_number
        self._asset_status = asset_status
        self._asset_type_id = asset_type_id
        self._book_depreciation_detail = book_depreciation_detail
        self._book_depreciation_setting = book_depreciation_setting
        self._can_rollback = can_rollback
        self._disposal_date = disposal_date
        self._disposal_price = disposal_price
        self._is_delete_enabled_for_date = is_delete_enabled_for_date
        self._purchase_date = purchase_date
        self._purchase_price = purchase_price
        self._serial_number = serial_number
        self._warranty_expiry_date = warranty_expiry_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Asset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Asset of this Asset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounting_book_value(self):
        """Gets the accounting_book_value of this Asset.

        The accounting value of the asset

        :return: The accounting_book_value of this Asset.
        :rtype: float
        """
        return self._accounting_book_value

    @accounting_book_value.setter
    def accounting_book_value(self, accounting_book_value):
        """Sets the accounting_book_value of this Asset.

        The accounting value of the asset

        :param accounting_book_value: The accounting_book_value of this Asset.
        :type accounting_book_value: float
        """

        self._accounting_book_value = accounting_book_value

    @property
    def asset_id(self):
        """Gets the asset_id of this Asset.

        The Xero-generated Id for the asset

        :return: The asset_id of this Asset.
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this Asset.

        The Xero-generated Id for the asset

        :param asset_id: The asset_id of this Asset.
        :type asset_id: str
        """

        self._asset_id = asset_id

    @property
    def asset_name(self):
        """Gets the asset_name of this Asset.

        The name of the asset

        :return: The asset_name of this Asset.
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this Asset.

        The name of the asset

        :param asset_name: The asset_name of this Asset.
        :type asset_name: str
        """
        if asset_name is None:
            raise ValueError("Invalid value for `asset_name`, must not be `None`")

        self._asset_name = asset_name

    @property
    def asset_number(self):
        """Gets the asset_number of this Asset.

        Must be unique.

        :return: The asset_number of this Asset.
        :rtype: str
        """
        return self._asset_number

    @asset_number.setter
    def asset_number(self, asset_number):
        """Sets the asset_number of this Asset.

        Must be unique.

        :param asset_number: The asset_number of this Asset.
        :type asset_number: str
        """

        self._asset_number = asset_number

    @property
    def asset_status(self):
        """Gets the asset_status of this Asset.


        :return: The asset_status of this Asset.
        :rtype: AssetStatus
        """
        return self._asset_status

    @asset_status.setter
    def asset_status(self, asset_status):
        """Sets the asset_status of this Asset.


        :param asset_status: The asset_status of this Asset.
        :type asset_status: AssetStatus
        """

        self._asset_status = asset_status

    @property
    def asset_type_id(self):
        """Gets the asset_type_id of this Asset.

        The Xero-generated Id for the asset type

        :return: The asset_type_id of this Asset.
        :rtype: str
        """
        return self._asset_type_id

    @asset_type_id.setter
    def asset_type_id(self, asset_type_id):
        """Sets the asset_type_id of this Asset.

        The Xero-generated Id for the asset type

        :param asset_type_id: The asset_type_id of this Asset.
        :type asset_type_id: str
        """

        self._asset_type_id = asset_type_id

    @property
    def book_depreciation_detail(self):
        """Gets the book_depreciation_detail of this Asset.


        :return: The book_depreciation_detail of this Asset.
        :rtype: BookDepreciationDetail
        """
        return self._book_depreciation_detail

    @book_depreciation_detail.setter
    def book_depreciation_detail(self, book_depreciation_detail):
        """Sets the book_depreciation_detail of this Asset.


        :param book_depreciation_detail: The book_depreciation_detail of this Asset.
        :type book_depreciation_detail: BookDepreciationDetail
        """

        self._book_depreciation_detail = book_depreciation_detail

    @property
    def book_depreciation_setting(self):
        """Gets the book_depreciation_setting of this Asset.


        :return: The book_depreciation_setting of this Asset.
        :rtype: BookDepreciationSetting
        """
        return self._book_depreciation_setting

    @book_depreciation_setting.setter
    def book_depreciation_setting(self, book_depreciation_setting):
        """Sets the book_depreciation_setting of this Asset.


        :param book_depreciation_setting: The book_depreciation_setting of this Asset.
        :type book_depreciation_setting: BookDepreciationSetting
        """

        self._book_depreciation_setting = book_depreciation_setting

    @property
    def can_rollback(self):
        """Gets the can_rollback of this Asset.

        Boolean to indicate whether depreciation can be rolled back for this asset individually. This is true if it doesn't have 'legacy' journal entries and if there is no lock period that would prevent this asset from rolling back.

        :return: The can_rollback of this Asset.
        :rtype: bool
        """
        return self._can_rollback

    @can_rollback.setter
    def can_rollback(self, can_rollback):
        """Sets the can_rollback of this Asset.

        Boolean to indicate whether depreciation can be rolled back for this asset individually. This is true if it doesn't have 'legacy' journal entries and if there is no lock period that would prevent this asset from rolling back.

        :param can_rollback: The can_rollback of this Asset.
        :type can_rollback: bool
        """

        self._can_rollback = can_rollback

    @property
    def disposal_date(self):
        """Gets the disposal_date of this Asset.

        The date the asset was disposed

        :return: The disposal_date of this Asset.
        :rtype: date
        """
        return self._disposal_date

    @disposal_date.setter
    def disposal_date(self, disposal_date):
        """Sets the disposal_date of this Asset.

        The date the asset was disposed

        :param disposal_date: The disposal_date of this Asset.
        :type disposal_date: date
        """

        self._disposal_date = disposal_date

    @property
    def disposal_price(self):
        """Gets the disposal_price of this Asset.

        The price the asset was disposed at

        :return: The disposal_price of this Asset.
        :rtype: float
        """
        return self._disposal_price

    @disposal_price.setter
    def disposal_price(self, disposal_price):
        """Sets the disposal_price of this Asset.

        The price the asset was disposed at

        :param disposal_price: The disposal_price of this Asset.
        :type disposal_price: float
        """

        self._disposal_price = disposal_price

    @property
    def is_delete_enabled_for_date(self):
        """Gets the is_delete_enabled_for_date of this Asset.

        Boolean to indicate whether delete is enabled

        :return: The is_delete_enabled_for_date of this Asset.
        :rtype: bool
        """
        return self._is_delete_enabled_for_date

    @is_delete_enabled_for_date.setter
    def is_delete_enabled_for_date(self, is_delete_enabled_for_date):
        """Sets the is_delete_enabled_for_date of this Asset.

        Boolean to indicate whether delete is enabled

        :param is_delete_enabled_for_date: The is_delete_enabled_for_date of this Asset.
        :type is_delete_enabled_for_date: bool
        """

        self._is_delete_enabled_for_date = is_delete_enabled_for_date

    @property
    def purchase_date(self):
        """Gets the purchase_date of this Asset.

        The date the asset was purchased YYYY-MM-DD

        :return: The purchase_date of this Asset.
        :rtype: date
        """
        return self._purchase_date

    @purchase_date.setter
    def purchase_date(self, purchase_date):
        """Sets the purchase_date of this Asset.

        The date the asset was purchased YYYY-MM-DD

        :param purchase_date: The purchase_date of this Asset.
        :type purchase_date: date
        """

        self._purchase_date = purchase_date

    @property
    def purchase_price(self):
        """Gets the purchase_price of this Asset.

        The purchase price of the asset

        :return: The purchase_price of this Asset.
        :rtype: float
        """
        return self._purchase_price

    @purchase_price.setter
    def purchase_price(self, purchase_price):
        """Sets the purchase_price of this Asset.

        The purchase price of the asset

        :param purchase_price: The purchase_price of this Asset.
        :type purchase_price: float
        """

        self._purchase_price = purchase_price

    @property
    def serial_number(self):
        """Gets the serial_number of this Asset.

        The asset's serial number

        :return: The serial_number of this Asset.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Asset.

        The asset's serial number

        :param serial_number: The serial_number of this Asset.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def warranty_expiry_date(self):
        """Gets the warranty_expiry_date of this Asset.

        The date the asset’s warranty expires (if needed) YYYY-MM-DD

        :return: The warranty_expiry_date of this Asset.
        :rtype: str
        """
        return self._warranty_expiry_date

    @warranty_expiry_date.setter
    def warranty_expiry_date(self, warranty_expiry_date):
        """Sets the warranty_expiry_date of this Asset.

        The date the asset’s warranty expires (if needed) YYYY-MM-DD

        :param warranty_expiry_date: The warranty_expiry_date of this Asset.
        :type warranty_expiry_date: str
        """

        self._warranty_expiry_date = warranty_expiry_date
