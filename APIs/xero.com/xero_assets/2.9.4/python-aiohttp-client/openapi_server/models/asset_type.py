# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.book_depreciation_setting import BookDepreciationSetting
from openapi_server import util


class AssetType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accumulated_depreciation_account_id: str=None, asset_type_id: str=None, asset_type_name: str=None, book_depreciation_setting: BookDepreciationSetting=None, depreciation_expense_account_id: str=None, fixed_asset_account_id: str=None, locks: int=None):
        """AssetType - a model defined in OpenAPI

        :param accumulated_depreciation_account_id: The accumulated_depreciation_account_id of this AssetType.
        :param asset_type_id: The asset_type_id of this AssetType.
        :param asset_type_name: The asset_type_name of this AssetType.
        :param book_depreciation_setting: The book_depreciation_setting of this AssetType.
        :param depreciation_expense_account_id: The depreciation_expense_account_id of this AssetType.
        :param fixed_asset_account_id: The fixed_asset_account_id of this AssetType.
        :param locks: The locks of this AssetType.
        """
        self.openapi_types = {
            'accumulated_depreciation_account_id': str,
            'asset_type_id': str,
            'asset_type_name': str,
            'book_depreciation_setting': BookDepreciationSetting,
            'depreciation_expense_account_id': str,
            'fixed_asset_account_id': str,
            'locks': int
        }

        self.attribute_map = {
            'accumulated_depreciation_account_id': 'accumulatedDepreciationAccountId',
            'asset_type_id': 'assetTypeId',
            'asset_type_name': 'assetTypeName',
            'book_depreciation_setting': 'bookDepreciationSetting',
            'depreciation_expense_account_id': 'depreciationExpenseAccountId',
            'fixed_asset_account_id': 'fixedAssetAccountId',
            'locks': 'locks'
        }

        self._accumulated_depreciation_account_id = accumulated_depreciation_account_id
        self._asset_type_id = asset_type_id
        self._asset_type_name = asset_type_name
        self._book_depreciation_setting = book_depreciation_setting
        self._depreciation_expense_account_id = depreciation_expense_account_id
        self._fixed_asset_account_id = fixed_asset_account_id
        self._locks = locks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssetType of this AssetType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accumulated_depreciation_account_id(self):
        """Gets the accumulated_depreciation_account_id of this AssetType.

        The account for accumulated depreciation of fixed assets of this type

        :return: The accumulated_depreciation_account_id of this AssetType.
        :rtype: str
        """
        return self._accumulated_depreciation_account_id

    @accumulated_depreciation_account_id.setter
    def accumulated_depreciation_account_id(self, accumulated_depreciation_account_id):
        """Sets the accumulated_depreciation_account_id of this AssetType.

        The account for accumulated depreciation of fixed assets of this type

        :param accumulated_depreciation_account_id: The accumulated_depreciation_account_id of this AssetType.
        :type accumulated_depreciation_account_id: str
        """

        self._accumulated_depreciation_account_id = accumulated_depreciation_account_id

    @property
    def asset_type_id(self):
        """Gets the asset_type_id of this AssetType.

        Xero generated unique identifier for asset types

        :return: The asset_type_id of this AssetType.
        :rtype: str
        """
        return self._asset_type_id

    @asset_type_id.setter
    def asset_type_id(self, asset_type_id):
        """Sets the asset_type_id of this AssetType.

        Xero generated unique identifier for asset types

        :param asset_type_id: The asset_type_id of this AssetType.
        :type asset_type_id: str
        """

        self._asset_type_id = asset_type_id

    @property
    def asset_type_name(self):
        """Gets the asset_type_name of this AssetType.

        The name of the asset type

        :return: The asset_type_name of this AssetType.
        :rtype: str
        """
        return self._asset_type_name

    @asset_type_name.setter
    def asset_type_name(self, asset_type_name):
        """Sets the asset_type_name of this AssetType.

        The name of the asset type

        :param asset_type_name: The asset_type_name of this AssetType.
        :type asset_type_name: str
        """
        if asset_type_name is None:
            raise ValueError("Invalid value for `asset_type_name`, must not be `None`")

        self._asset_type_name = asset_type_name

    @property
    def book_depreciation_setting(self):
        """Gets the book_depreciation_setting of this AssetType.


        :return: The book_depreciation_setting of this AssetType.
        :rtype: BookDepreciationSetting
        """
        return self._book_depreciation_setting

    @book_depreciation_setting.setter
    def book_depreciation_setting(self, book_depreciation_setting):
        """Sets the book_depreciation_setting of this AssetType.


        :param book_depreciation_setting: The book_depreciation_setting of this AssetType.
        :type book_depreciation_setting: BookDepreciationSetting
        """
        if book_depreciation_setting is None:
            raise ValueError("Invalid value for `book_depreciation_setting`, must not be `None`")

        self._book_depreciation_setting = book_depreciation_setting

    @property
    def depreciation_expense_account_id(self):
        """Gets the depreciation_expense_account_id of this AssetType.

        The expense account for the depreciation of fixed assets of this type

        :return: The depreciation_expense_account_id of this AssetType.
        :rtype: str
        """
        return self._depreciation_expense_account_id

    @depreciation_expense_account_id.setter
    def depreciation_expense_account_id(self, depreciation_expense_account_id):
        """Sets the depreciation_expense_account_id of this AssetType.

        The expense account for the depreciation of fixed assets of this type

        :param depreciation_expense_account_id: The depreciation_expense_account_id of this AssetType.
        :type depreciation_expense_account_id: str
        """

        self._depreciation_expense_account_id = depreciation_expense_account_id

    @property
    def fixed_asset_account_id(self):
        """Gets the fixed_asset_account_id of this AssetType.

        The asset account for fixed assets of this type

        :return: The fixed_asset_account_id of this AssetType.
        :rtype: str
        """
        return self._fixed_asset_account_id

    @fixed_asset_account_id.setter
    def fixed_asset_account_id(self, fixed_asset_account_id):
        """Sets the fixed_asset_account_id of this AssetType.

        The asset account for fixed assets of this type

        :param fixed_asset_account_id: The fixed_asset_account_id of this AssetType.
        :type fixed_asset_account_id: str
        """

        self._fixed_asset_account_id = fixed_asset_account_id

    @property
    def locks(self):
        """Gets the locks of this AssetType.

        All asset types that have accumulated depreciation for any assets that use them are deemed ‘locked’ and cannot be removed.

        :return: The locks of this AssetType.
        :rtype: int
        """
        return self._locks

    @locks.setter
    def locks(self, locks):
        """Sets the locks of this AssetType.

        All asset types that have accumulated depreciation for any assets that use them are deemed ‘locked’ and cannot be removed.

        :param locks: The locks of this AssetType.
        :type locks: int
        """

        self._locks = locks
