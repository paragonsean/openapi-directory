# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BookDepreciationDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_limit: float=None, current_accum_depreciation_amount: float=None, current_capital_gain: float=None, current_gain_loss: float=None, depreciation_start_date: date=None, prior_accum_depreciation_amount: float=None, residual_value: float=None):
        """BookDepreciationDetail - a model defined in OpenAPI

        :param cost_limit: The cost_limit of this BookDepreciationDetail.
        :param current_accum_depreciation_amount: The current_accum_depreciation_amount of this BookDepreciationDetail.
        :param current_capital_gain: The current_capital_gain of this BookDepreciationDetail.
        :param current_gain_loss: The current_gain_loss of this BookDepreciationDetail.
        :param depreciation_start_date: The depreciation_start_date of this BookDepreciationDetail.
        :param prior_accum_depreciation_amount: The prior_accum_depreciation_amount of this BookDepreciationDetail.
        :param residual_value: The residual_value of this BookDepreciationDetail.
        """
        self.openapi_types = {
            'cost_limit': float,
            'current_accum_depreciation_amount': float,
            'current_capital_gain': float,
            'current_gain_loss': float,
            'depreciation_start_date': date,
            'prior_accum_depreciation_amount': float,
            'residual_value': float
        }

        self.attribute_map = {
            'cost_limit': 'costLimit',
            'current_accum_depreciation_amount': 'currentAccumDepreciationAmount',
            'current_capital_gain': 'currentCapitalGain',
            'current_gain_loss': 'currentGainLoss',
            'depreciation_start_date': 'depreciationStartDate',
            'prior_accum_depreciation_amount': 'priorAccumDepreciationAmount',
            'residual_value': 'residualValue'
        }

        self._cost_limit = cost_limit
        self._current_accum_depreciation_amount = current_accum_depreciation_amount
        self._current_capital_gain = current_capital_gain
        self._current_gain_loss = current_gain_loss
        self._depreciation_start_date = depreciation_start_date
        self._prior_accum_depreciation_amount = prior_accum_depreciation_amount
        self._residual_value = residual_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookDepreciationDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BookDepreciationDetail of this BookDepreciationDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_limit(self):
        """Gets the cost_limit of this BookDepreciationDetail.

        The value of the asset you want to depreciate, if this is less than the cost of the asset.

        :return: The cost_limit of this BookDepreciationDetail.
        :rtype: float
        """
        return self._cost_limit

    @cost_limit.setter
    def cost_limit(self, cost_limit):
        """Sets the cost_limit of this BookDepreciationDetail.

        The value of the asset you want to depreciate, if this is less than the cost of the asset.

        :param cost_limit: The cost_limit of this BookDepreciationDetail.
        :type cost_limit: float
        """

        self._cost_limit = cost_limit

    @property
    def current_accum_depreciation_amount(self):
        """Gets the current_accum_depreciation_amount of this BookDepreciationDetail.

        All depreciation occurring in the current financial year.

        :return: The current_accum_depreciation_amount of this BookDepreciationDetail.
        :rtype: float
        """
        return self._current_accum_depreciation_amount

    @current_accum_depreciation_amount.setter
    def current_accum_depreciation_amount(self, current_accum_depreciation_amount):
        """Sets the current_accum_depreciation_amount of this BookDepreciationDetail.

        All depreciation occurring in the current financial year.

        :param current_accum_depreciation_amount: The current_accum_depreciation_amount of this BookDepreciationDetail.
        :type current_accum_depreciation_amount: float
        """

        self._current_accum_depreciation_amount = current_accum_depreciation_amount

    @property
    def current_capital_gain(self):
        """Gets the current_capital_gain of this BookDepreciationDetail.

        When an asset is disposed, this will be the sell price minus the purchase price if a profit was made.

        :return: The current_capital_gain of this BookDepreciationDetail.
        :rtype: float
        """
        return self._current_capital_gain

    @current_capital_gain.setter
    def current_capital_gain(self, current_capital_gain):
        """Sets the current_capital_gain of this BookDepreciationDetail.

        When an asset is disposed, this will be the sell price minus the purchase price if a profit was made.

        :param current_capital_gain: The current_capital_gain of this BookDepreciationDetail.
        :type current_capital_gain: float
        """

        self._current_capital_gain = current_capital_gain

    @property
    def current_gain_loss(self):
        """Gets the current_gain_loss of this BookDepreciationDetail.

        When an asset is disposed, this will be the lowest one of sell price or purchase price, minus the current book value.

        :return: The current_gain_loss of this BookDepreciationDetail.
        :rtype: float
        """
        return self._current_gain_loss

    @current_gain_loss.setter
    def current_gain_loss(self, current_gain_loss):
        """Sets the current_gain_loss of this BookDepreciationDetail.

        When an asset is disposed, this will be the lowest one of sell price or purchase price, minus the current book value.

        :param current_gain_loss: The current_gain_loss of this BookDepreciationDetail.
        :type current_gain_loss: float
        """

        self._current_gain_loss = current_gain_loss

    @property
    def depreciation_start_date(self):
        """Gets the depreciation_start_date of this BookDepreciationDetail.

        YYYY-MM-DD

        :return: The depreciation_start_date of this BookDepreciationDetail.
        :rtype: date
        """
        return self._depreciation_start_date

    @depreciation_start_date.setter
    def depreciation_start_date(self, depreciation_start_date):
        """Sets the depreciation_start_date of this BookDepreciationDetail.

        YYYY-MM-DD

        :param depreciation_start_date: The depreciation_start_date of this BookDepreciationDetail.
        :type depreciation_start_date: date
        """

        self._depreciation_start_date = depreciation_start_date

    @property
    def prior_accum_depreciation_amount(self):
        """Gets the prior_accum_depreciation_amount of this BookDepreciationDetail.

        All depreciation prior to the current financial year.

        :return: The prior_accum_depreciation_amount of this BookDepreciationDetail.
        :rtype: float
        """
        return self._prior_accum_depreciation_amount

    @prior_accum_depreciation_amount.setter
    def prior_accum_depreciation_amount(self, prior_accum_depreciation_amount):
        """Sets the prior_accum_depreciation_amount of this BookDepreciationDetail.

        All depreciation prior to the current financial year.

        :param prior_accum_depreciation_amount: The prior_accum_depreciation_amount of this BookDepreciationDetail.
        :type prior_accum_depreciation_amount: float
        """

        self._prior_accum_depreciation_amount = prior_accum_depreciation_amount

    @property
    def residual_value(self):
        """Gets the residual_value of this BookDepreciationDetail.

        The value of the asset remaining when you've fully depreciated it.

        :return: The residual_value of this BookDepreciationDetail.
        :rtype: float
        """
        return self._residual_value

    @residual_value.setter
    def residual_value(self, residual_value):
        """Sets the residual_value of this BookDepreciationDetail.

        The value of the asset remaining when you've fully depreciated it.

        :param residual_value: The residual_value of this BookDepreciationDetail.
        :type residual_value: float
        """

        self._residual_value = residual_value
