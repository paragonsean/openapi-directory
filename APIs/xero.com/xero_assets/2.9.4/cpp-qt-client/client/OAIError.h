/**
 * Xero Assets API
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIError.h
 *
 * 
 */

#ifndef OAIError_H
#define OAIError_H

#include <QJsonObject>

#include "OAIFieldValidationErrorsElement.h"
#include "OAIResourceValidationErrorsElement.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFieldValidationErrorsElement;
class OAIResourceValidationErrorsElement;

class OAIError : public OAIObject {
public:
    OAIError();
    OAIError(QString json);
    ~OAIError() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDetail() const;
    void setDetail(const QString &detail);
    bool is_detail_Set() const;
    bool is_detail_Valid() const;

    QList<OAIFieldValidationErrorsElement> getFieldValidationErrors() const;
    void setFieldValidationErrors(const QList<OAIFieldValidationErrorsElement> &field_validation_errors);
    bool is_field_validation_errors_Set() const;
    bool is_field_validation_errors_Valid() const;

    QList<OAIResourceValidationErrorsElement> getResourceValidationErrors() const;
    void setResourceValidationErrors(const QList<OAIResourceValidationErrorsElement> &resource_validation_errors);
    bool is_resource_validation_errors_Set() const;
    bool is_resource_validation_errors_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_detail;
    bool m_detail_isSet;
    bool m_detail_isValid;

    QList<OAIFieldValidationErrorsElement> m_field_validation_errors;
    bool m_field_validation_errors_isSet;
    bool m_field_validation_errors_isValid;

    QList<OAIResourceValidationErrorsElement> m_resource_validation_errors;
    bool m_resource_validation_errors_isSet;
    bool m_resource_validation_errors_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIError)

#endif // OAIError_H
