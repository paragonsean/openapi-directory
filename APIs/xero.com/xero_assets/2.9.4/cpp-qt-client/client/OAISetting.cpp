/**
 * Xero Assets API
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetting::OAISetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetting::OAISetting() {
    this->initializeModel();
}

OAISetting::~OAISetting() {}

void OAISetting::initializeModel() {

    m_asset_number_prefix_isSet = false;
    m_asset_number_prefix_isValid = false;

    m_asset_number_sequence_isSet = false;
    m_asset_number_sequence_isValid = false;

    m_asset_start_date_isSet = false;
    m_asset_start_date_isValid = false;

    m_default_capital_gain_on_disposal_account_id_isSet = false;
    m_default_capital_gain_on_disposal_account_id_isValid = false;

    m_default_gain_on_disposal_account_id_isSet = false;
    m_default_gain_on_disposal_account_id_isValid = false;

    m_default_loss_on_disposal_account_id_isSet = false;
    m_default_loss_on_disposal_account_id_isValid = false;

    m_last_depreciation_date_isSet = false;
    m_last_depreciation_date_isValid = false;

    m_opt_in_for_tax_isSet = false;
    m_opt_in_for_tax_isValid = false;
}

void OAISetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetting::fromJsonObject(QJsonObject json) {

    m_asset_number_prefix_isValid = ::OpenAPI::fromJsonValue(m_asset_number_prefix, json[QString("assetNumberPrefix")]);
    m_asset_number_prefix_isSet = !json[QString("assetNumberPrefix")].isNull() && m_asset_number_prefix_isValid;

    m_asset_number_sequence_isValid = ::OpenAPI::fromJsonValue(m_asset_number_sequence, json[QString("assetNumberSequence")]);
    m_asset_number_sequence_isSet = !json[QString("assetNumberSequence")].isNull() && m_asset_number_sequence_isValid;

    m_asset_start_date_isValid = ::OpenAPI::fromJsonValue(m_asset_start_date, json[QString("assetStartDate")]);
    m_asset_start_date_isSet = !json[QString("assetStartDate")].isNull() && m_asset_start_date_isValid;

    m_default_capital_gain_on_disposal_account_id_isValid = ::OpenAPI::fromJsonValue(m_default_capital_gain_on_disposal_account_id, json[QString("defaultCapitalGainOnDisposalAccountId")]);
    m_default_capital_gain_on_disposal_account_id_isSet = !json[QString("defaultCapitalGainOnDisposalAccountId")].isNull() && m_default_capital_gain_on_disposal_account_id_isValid;

    m_default_gain_on_disposal_account_id_isValid = ::OpenAPI::fromJsonValue(m_default_gain_on_disposal_account_id, json[QString("defaultGainOnDisposalAccountId")]);
    m_default_gain_on_disposal_account_id_isSet = !json[QString("defaultGainOnDisposalAccountId")].isNull() && m_default_gain_on_disposal_account_id_isValid;

    m_default_loss_on_disposal_account_id_isValid = ::OpenAPI::fromJsonValue(m_default_loss_on_disposal_account_id, json[QString("defaultLossOnDisposalAccountId")]);
    m_default_loss_on_disposal_account_id_isSet = !json[QString("defaultLossOnDisposalAccountId")].isNull() && m_default_loss_on_disposal_account_id_isValid;

    m_last_depreciation_date_isValid = ::OpenAPI::fromJsonValue(m_last_depreciation_date, json[QString("lastDepreciationDate")]);
    m_last_depreciation_date_isSet = !json[QString("lastDepreciationDate")].isNull() && m_last_depreciation_date_isValid;

    m_opt_in_for_tax_isValid = ::OpenAPI::fromJsonValue(m_opt_in_for_tax, json[QString("optInForTax")]);
    m_opt_in_for_tax_isSet = !json[QString("optInForTax")].isNull() && m_opt_in_for_tax_isValid;
}

QString OAISetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetting::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_number_prefix_isSet) {
        obj.insert(QString("assetNumberPrefix"), ::OpenAPI::toJsonValue(m_asset_number_prefix));
    }
    if (m_asset_number_sequence_isSet) {
        obj.insert(QString("assetNumberSequence"), ::OpenAPI::toJsonValue(m_asset_number_sequence));
    }
    if (m_asset_start_date_isSet) {
        obj.insert(QString("assetStartDate"), ::OpenAPI::toJsonValue(m_asset_start_date));
    }
    if (m_default_capital_gain_on_disposal_account_id_isSet) {
        obj.insert(QString("defaultCapitalGainOnDisposalAccountId"), ::OpenAPI::toJsonValue(m_default_capital_gain_on_disposal_account_id));
    }
    if (m_default_gain_on_disposal_account_id_isSet) {
        obj.insert(QString("defaultGainOnDisposalAccountId"), ::OpenAPI::toJsonValue(m_default_gain_on_disposal_account_id));
    }
    if (m_default_loss_on_disposal_account_id_isSet) {
        obj.insert(QString("defaultLossOnDisposalAccountId"), ::OpenAPI::toJsonValue(m_default_loss_on_disposal_account_id));
    }
    if (m_last_depreciation_date_isSet) {
        obj.insert(QString("lastDepreciationDate"), ::OpenAPI::toJsonValue(m_last_depreciation_date));
    }
    if (m_opt_in_for_tax_isSet) {
        obj.insert(QString("optInForTax"), ::OpenAPI::toJsonValue(m_opt_in_for_tax));
    }
    return obj;
}

QString OAISetting::getAssetNumberPrefix() const {
    return m_asset_number_prefix;
}
void OAISetting::setAssetNumberPrefix(const QString &asset_number_prefix) {
    m_asset_number_prefix = asset_number_prefix;
    m_asset_number_prefix_isSet = true;
}

bool OAISetting::is_asset_number_prefix_Set() const{
    return m_asset_number_prefix_isSet;
}

bool OAISetting::is_asset_number_prefix_Valid() const{
    return m_asset_number_prefix_isValid;
}

QString OAISetting::getAssetNumberSequence() const {
    return m_asset_number_sequence;
}
void OAISetting::setAssetNumberSequence(const QString &asset_number_sequence) {
    m_asset_number_sequence = asset_number_sequence;
    m_asset_number_sequence_isSet = true;
}

bool OAISetting::is_asset_number_sequence_Set() const{
    return m_asset_number_sequence_isSet;
}

bool OAISetting::is_asset_number_sequence_Valid() const{
    return m_asset_number_sequence_isValid;
}

QDate OAISetting::getAssetStartDate() const {
    return m_asset_start_date;
}
void OAISetting::setAssetStartDate(const QDate &asset_start_date) {
    m_asset_start_date = asset_start_date;
    m_asset_start_date_isSet = true;
}

bool OAISetting::is_asset_start_date_Set() const{
    return m_asset_start_date_isSet;
}

bool OAISetting::is_asset_start_date_Valid() const{
    return m_asset_start_date_isValid;
}

QString OAISetting::getDefaultCapitalGainOnDisposalAccountId() const {
    return m_default_capital_gain_on_disposal_account_id;
}
void OAISetting::setDefaultCapitalGainOnDisposalAccountId(const QString &default_capital_gain_on_disposal_account_id) {
    m_default_capital_gain_on_disposal_account_id = default_capital_gain_on_disposal_account_id;
    m_default_capital_gain_on_disposal_account_id_isSet = true;
}

bool OAISetting::is_default_capital_gain_on_disposal_account_id_Set() const{
    return m_default_capital_gain_on_disposal_account_id_isSet;
}

bool OAISetting::is_default_capital_gain_on_disposal_account_id_Valid() const{
    return m_default_capital_gain_on_disposal_account_id_isValid;
}

QString OAISetting::getDefaultGainOnDisposalAccountId() const {
    return m_default_gain_on_disposal_account_id;
}
void OAISetting::setDefaultGainOnDisposalAccountId(const QString &default_gain_on_disposal_account_id) {
    m_default_gain_on_disposal_account_id = default_gain_on_disposal_account_id;
    m_default_gain_on_disposal_account_id_isSet = true;
}

bool OAISetting::is_default_gain_on_disposal_account_id_Set() const{
    return m_default_gain_on_disposal_account_id_isSet;
}

bool OAISetting::is_default_gain_on_disposal_account_id_Valid() const{
    return m_default_gain_on_disposal_account_id_isValid;
}

QString OAISetting::getDefaultLossOnDisposalAccountId() const {
    return m_default_loss_on_disposal_account_id;
}
void OAISetting::setDefaultLossOnDisposalAccountId(const QString &default_loss_on_disposal_account_id) {
    m_default_loss_on_disposal_account_id = default_loss_on_disposal_account_id;
    m_default_loss_on_disposal_account_id_isSet = true;
}

bool OAISetting::is_default_loss_on_disposal_account_id_Set() const{
    return m_default_loss_on_disposal_account_id_isSet;
}

bool OAISetting::is_default_loss_on_disposal_account_id_Valid() const{
    return m_default_loss_on_disposal_account_id_isValid;
}

QDate OAISetting::getLastDepreciationDate() const {
    return m_last_depreciation_date;
}
void OAISetting::setLastDepreciationDate(const QDate &last_depreciation_date) {
    m_last_depreciation_date = last_depreciation_date;
    m_last_depreciation_date_isSet = true;
}

bool OAISetting::is_last_depreciation_date_Set() const{
    return m_last_depreciation_date_isSet;
}

bool OAISetting::is_last_depreciation_date_Valid() const{
    return m_last_depreciation_date_isValid;
}

bool OAISetting::isOptInForTax() const {
    return m_opt_in_for_tax;
}
void OAISetting::setOptInForTax(const bool &opt_in_for_tax) {
    m_opt_in_for_tax = opt_in_for_tax;
    m_opt_in_for_tax_isSet = true;
}

bool OAISetting::is_opt_in_for_tax_Set() const{
    return m_opt_in_for_tax_isSet;
}

bool OAISetting::is_opt_in_for_tax_Valid() const{
    return m_opt_in_for_tax_isValid;
}

bool OAISetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_number_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_number_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_capital_gain_on_disposal_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_gain_on_disposal_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_loss_on_disposal_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_depreciation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_in_for_tax_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
