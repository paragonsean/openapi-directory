/**
 * Xero Assets API
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetType::OAIAssetType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetType::OAIAssetType() {
    this->initializeModel();
}

OAIAssetType::~OAIAssetType() {}

void OAIAssetType::initializeModel() {

    m_accumulated_depreciation_account_id_isSet = false;
    m_accumulated_depreciation_account_id_isValid = false;

    m_asset_type_id_isSet = false;
    m_asset_type_id_isValid = false;

    m_asset_type_name_isSet = false;
    m_asset_type_name_isValid = false;

    m_book_depreciation_setting_isSet = false;
    m_book_depreciation_setting_isValid = false;

    m_depreciation_expense_account_id_isSet = false;
    m_depreciation_expense_account_id_isValid = false;

    m_fixed_asset_account_id_isSet = false;
    m_fixed_asset_account_id_isValid = false;

    m_locks_isSet = false;
    m_locks_isValid = false;
}

void OAIAssetType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetType::fromJsonObject(QJsonObject json) {

    m_accumulated_depreciation_account_id_isValid = ::OpenAPI::fromJsonValue(m_accumulated_depreciation_account_id, json[QString("accumulatedDepreciationAccountId")]);
    m_accumulated_depreciation_account_id_isSet = !json[QString("accumulatedDepreciationAccountId")].isNull() && m_accumulated_depreciation_account_id_isValid;

    m_asset_type_id_isValid = ::OpenAPI::fromJsonValue(m_asset_type_id, json[QString("assetTypeId")]);
    m_asset_type_id_isSet = !json[QString("assetTypeId")].isNull() && m_asset_type_id_isValid;

    m_asset_type_name_isValid = ::OpenAPI::fromJsonValue(m_asset_type_name, json[QString("assetTypeName")]);
    m_asset_type_name_isSet = !json[QString("assetTypeName")].isNull() && m_asset_type_name_isValid;

    m_book_depreciation_setting_isValid = ::OpenAPI::fromJsonValue(m_book_depreciation_setting, json[QString("bookDepreciationSetting")]);
    m_book_depreciation_setting_isSet = !json[QString("bookDepreciationSetting")].isNull() && m_book_depreciation_setting_isValid;

    m_depreciation_expense_account_id_isValid = ::OpenAPI::fromJsonValue(m_depreciation_expense_account_id, json[QString("depreciationExpenseAccountId")]);
    m_depreciation_expense_account_id_isSet = !json[QString("depreciationExpenseAccountId")].isNull() && m_depreciation_expense_account_id_isValid;

    m_fixed_asset_account_id_isValid = ::OpenAPI::fromJsonValue(m_fixed_asset_account_id, json[QString("fixedAssetAccountId")]);
    m_fixed_asset_account_id_isSet = !json[QString("fixedAssetAccountId")].isNull() && m_fixed_asset_account_id_isValid;

    m_locks_isValid = ::OpenAPI::fromJsonValue(m_locks, json[QString("locks")]);
    m_locks_isSet = !json[QString("locks")].isNull() && m_locks_isValid;
}

QString OAIAssetType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetType::asJsonObject() const {
    QJsonObject obj;
    if (m_accumulated_depreciation_account_id_isSet) {
        obj.insert(QString("accumulatedDepreciationAccountId"), ::OpenAPI::toJsonValue(m_accumulated_depreciation_account_id));
    }
    if (m_asset_type_id_isSet) {
        obj.insert(QString("assetTypeId"), ::OpenAPI::toJsonValue(m_asset_type_id));
    }
    if (m_asset_type_name_isSet) {
        obj.insert(QString("assetTypeName"), ::OpenAPI::toJsonValue(m_asset_type_name));
    }
    if (m_book_depreciation_setting.isSet()) {
        obj.insert(QString("bookDepreciationSetting"), ::OpenAPI::toJsonValue(m_book_depreciation_setting));
    }
    if (m_depreciation_expense_account_id_isSet) {
        obj.insert(QString("depreciationExpenseAccountId"), ::OpenAPI::toJsonValue(m_depreciation_expense_account_id));
    }
    if (m_fixed_asset_account_id_isSet) {
        obj.insert(QString("fixedAssetAccountId"), ::OpenAPI::toJsonValue(m_fixed_asset_account_id));
    }
    if (m_locks_isSet) {
        obj.insert(QString("locks"), ::OpenAPI::toJsonValue(m_locks));
    }
    return obj;
}

QString OAIAssetType::getAccumulatedDepreciationAccountId() const {
    return m_accumulated_depreciation_account_id;
}
void OAIAssetType::setAccumulatedDepreciationAccountId(const QString &accumulated_depreciation_account_id) {
    m_accumulated_depreciation_account_id = accumulated_depreciation_account_id;
    m_accumulated_depreciation_account_id_isSet = true;
}

bool OAIAssetType::is_accumulated_depreciation_account_id_Set() const{
    return m_accumulated_depreciation_account_id_isSet;
}

bool OAIAssetType::is_accumulated_depreciation_account_id_Valid() const{
    return m_accumulated_depreciation_account_id_isValid;
}

QString OAIAssetType::getAssetTypeId() const {
    return m_asset_type_id;
}
void OAIAssetType::setAssetTypeId(const QString &asset_type_id) {
    m_asset_type_id = asset_type_id;
    m_asset_type_id_isSet = true;
}

bool OAIAssetType::is_asset_type_id_Set() const{
    return m_asset_type_id_isSet;
}

bool OAIAssetType::is_asset_type_id_Valid() const{
    return m_asset_type_id_isValid;
}

QString OAIAssetType::getAssetTypeName() const {
    return m_asset_type_name;
}
void OAIAssetType::setAssetTypeName(const QString &asset_type_name) {
    m_asset_type_name = asset_type_name;
    m_asset_type_name_isSet = true;
}

bool OAIAssetType::is_asset_type_name_Set() const{
    return m_asset_type_name_isSet;
}

bool OAIAssetType::is_asset_type_name_Valid() const{
    return m_asset_type_name_isValid;
}

OAIBookDepreciationSetting OAIAssetType::getBookDepreciationSetting() const {
    return m_book_depreciation_setting;
}
void OAIAssetType::setBookDepreciationSetting(const OAIBookDepreciationSetting &book_depreciation_setting) {
    m_book_depreciation_setting = book_depreciation_setting;
    m_book_depreciation_setting_isSet = true;
}

bool OAIAssetType::is_book_depreciation_setting_Set() const{
    return m_book_depreciation_setting_isSet;
}

bool OAIAssetType::is_book_depreciation_setting_Valid() const{
    return m_book_depreciation_setting_isValid;
}

QString OAIAssetType::getDepreciationExpenseAccountId() const {
    return m_depreciation_expense_account_id;
}
void OAIAssetType::setDepreciationExpenseAccountId(const QString &depreciation_expense_account_id) {
    m_depreciation_expense_account_id = depreciation_expense_account_id;
    m_depreciation_expense_account_id_isSet = true;
}

bool OAIAssetType::is_depreciation_expense_account_id_Set() const{
    return m_depreciation_expense_account_id_isSet;
}

bool OAIAssetType::is_depreciation_expense_account_id_Valid() const{
    return m_depreciation_expense_account_id_isValid;
}

QString OAIAssetType::getFixedAssetAccountId() const {
    return m_fixed_asset_account_id;
}
void OAIAssetType::setFixedAssetAccountId(const QString &fixed_asset_account_id) {
    m_fixed_asset_account_id = fixed_asset_account_id;
    m_fixed_asset_account_id_isSet = true;
}

bool OAIAssetType::is_fixed_asset_account_id_Set() const{
    return m_fixed_asset_account_id_isSet;
}

bool OAIAssetType::is_fixed_asset_account_id_Valid() const{
    return m_fixed_asset_account_id_isValid;
}

qint32 OAIAssetType::getLocks() const {
    return m_locks;
}
void OAIAssetType::setLocks(const qint32 &locks) {
    m_locks = locks;
    m_locks_isSet = true;
}

bool OAIAssetType::is_locks_Set() const{
    return m_locks_isSet;
}

bool OAIAssetType::is_locks_Valid() const{
    return m_locks_isValid;
}

bool OAIAssetType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accumulated_depreciation_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_book_depreciation_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_depreciation_expense_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_asset_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_asset_type_name_isValid && m_book_depreciation_setting_isValid && true;
}

} // namespace OpenAPI
