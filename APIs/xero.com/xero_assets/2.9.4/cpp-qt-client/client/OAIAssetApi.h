/**
 * Xero Assets API
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAssetApi_H
#define OAI_OAIAssetApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAsset.h"
#include "OAIAssetStatusQueryParam.h"
#include "OAIAssetType.h"
#include "OAIAssets.h"
#include "OAISetting.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAssetApi : public QObject {
    Q_OBJECT

public:
    OAIAssetApi(const int timeOut = 0);
    ~OAIAssetApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_asset OAIAsset [required]
    */
    virtual void createAsset(const QString &xero_tenant_id, const OAIAsset &oai_asset);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_asset_type OAIAssetType [optional]
    */
    virtual void createAssetType(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<OAIAssetType> &oai_asset_type = ::OpenAPI::OptionalParam<OAIAssetType>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getAssetById(const QString &xero_tenant_id, const QString &id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    */
    virtual void getAssetSettings(const QString &xero_tenant_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    */
    virtual void getAssetTypes(const QString &xero_tenant_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  status OAIAssetStatusQueryParam [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  filter_by QString [optional]
    */
    virtual void getAssets(const QString &xero_tenant_id, const OAIAssetStatusQueryParam &status, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_by = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAssetCallback(OAIHttpRequestWorker *worker);
    void createAssetTypeCallback(OAIHttpRequestWorker *worker);
    void getAssetByIdCallback(OAIHttpRequestWorker *worker);
    void getAssetSettingsCallback(OAIHttpRequestWorker *worker);
    void getAssetTypesCallback(OAIHttpRequestWorker *worker);
    void getAssetsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAssetSignal(OAIAsset summary);
    void createAssetTypeSignal(OAIAssetType summary);
    void getAssetByIdSignal(OAIAsset summary);
    void getAssetSettingsSignal(OAISetting summary);
    void getAssetTypesSignal(QList<OAIAssetType> summary);
    void getAssetsSignal(OAIAssets summary);


    void createAssetSignalFull(OAIHttpRequestWorker *worker, OAIAsset summary);
    void createAssetTypeSignalFull(OAIHttpRequestWorker *worker, OAIAssetType summary);
    void getAssetByIdSignalFull(OAIHttpRequestWorker *worker, OAIAsset summary);
    void getAssetSettingsSignalFull(OAIHttpRequestWorker *worker, OAISetting summary);
    void getAssetTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssetType> summary);
    void getAssetsSignalFull(OAIHttpRequestWorker *worker, OAIAssets summary);

    Q_DECL_DEPRECATED_X("Use createAssetSignalError() instead")
    void createAssetSignalE(OAIAsset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssetSignalError(OAIAsset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAssetTypeSignalError() instead")
    void createAssetTypeSignalE(OAIAssetType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssetTypeSignalError(OAIAssetType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssetByIdSignalError() instead")
    void getAssetByIdSignalE(OAIAsset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssetByIdSignalError(OAIAsset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssetSettingsSignalError() instead")
    void getAssetSettingsSignalE(OAISetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssetSettingsSignalError(OAISetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssetTypesSignalError() instead")
    void getAssetTypesSignalE(QList<OAIAssetType> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssetTypesSignalError(QList<OAIAssetType> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssetsSignalError() instead")
    void getAssetsSignalE(OAIAssets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssetsSignalError(OAIAssets summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAssetSignalErrorFull() instead")
    void createAssetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAssetTypeSignalErrorFull() instead")
    void createAssetTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssetTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssetByIdSignalErrorFull() instead")
    void getAssetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssetSettingsSignalErrorFull() instead")
    void getAssetSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssetSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssetTypesSignalErrorFull() instead")
    void getAssetTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssetTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssetsSignalErrorFull() instead")
    void getAssetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
