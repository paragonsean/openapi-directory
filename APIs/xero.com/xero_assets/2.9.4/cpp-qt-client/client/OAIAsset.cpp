/**
 * Xero Assets API
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsset::OAIAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsset::OAIAsset() {
    this->initializeModel();
}

OAIAsset::~OAIAsset() {}

void OAIAsset::initializeModel() {

    m_accounting_book_value_isSet = false;
    m_accounting_book_value_isValid = false;

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_asset_name_isSet = false;
    m_asset_name_isValid = false;

    m_asset_number_isSet = false;
    m_asset_number_isValid = false;

    m_asset_status_isSet = false;
    m_asset_status_isValid = false;

    m_asset_type_id_isSet = false;
    m_asset_type_id_isValid = false;

    m_book_depreciation_detail_isSet = false;
    m_book_depreciation_detail_isValid = false;

    m_book_depreciation_setting_isSet = false;
    m_book_depreciation_setting_isValid = false;

    m_can_rollback_isSet = false;
    m_can_rollback_isValid = false;

    m_disposal_date_isSet = false;
    m_disposal_date_isValid = false;

    m_disposal_price_isSet = false;
    m_disposal_price_isValid = false;

    m_is_delete_enabled_for_date_isSet = false;
    m_is_delete_enabled_for_date_isValid = false;

    m_purchase_date_isSet = false;
    m_purchase_date_isValid = false;

    m_purchase_price_isSet = false;
    m_purchase_price_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_warranty_expiry_date_isSet = false;
    m_warranty_expiry_date_isValid = false;
}

void OAIAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsset::fromJsonObject(QJsonObject json) {

    m_accounting_book_value_isValid = ::OpenAPI::fromJsonValue(m_accounting_book_value, json[QString("accountingBookValue")]);
    m_accounting_book_value_isSet = !json[QString("accountingBookValue")].isNull() && m_accounting_book_value_isValid;

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("assetId")]);
    m_asset_id_isSet = !json[QString("assetId")].isNull() && m_asset_id_isValid;

    m_asset_name_isValid = ::OpenAPI::fromJsonValue(m_asset_name, json[QString("assetName")]);
    m_asset_name_isSet = !json[QString("assetName")].isNull() && m_asset_name_isValid;

    m_asset_number_isValid = ::OpenAPI::fromJsonValue(m_asset_number, json[QString("assetNumber")]);
    m_asset_number_isSet = !json[QString("assetNumber")].isNull() && m_asset_number_isValid;

    m_asset_status_isValid = ::OpenAPI::fromJsonValue(m_asset_status, json[QString("assetStatus")]);
    m_asset_status_isSet = !json[QString("assetStatus")].isNull() && m_asset_status_isValid;

    m_asset_type_id_isValid = ::OpenAPI::fromJsonValue(m_asset_type_id, json[QString("assetTypeId")]);
    m_asset_type_id_isSet = !json[QString("assetTypeId")].isNull() && m_asset_type_id_isValid;

    m_book_depreciation_detail_isValid = ::OpenAPI::fromJsonValue(m_book_depreciation_detail, json[QString("bookDepreciationDetail")]);
    m_book_depreciation_detail_isSet = !json[QString("bookDepreciationDetail")].isNull() && m_book_depreciation_detail_isValid;

    m_book_depreciation_setting_isValid = ::OpenAPI::fromJsonValue(m_book_depreciation_setting, json[QString("bookDepreciationSetting")]);
    m_book_depreciation_setting_isSet = !json[QString("bookDepreciationSetting")].isNull() && m_book_depreciation_setting_isValid;

    m_can_rollback_isValid = ::OpenAPI::fromJsonValue(m_can_rollback, json[QString("canRollback")]);
    m_can_rollback_isSet = !json[QString("canRollback")].isNull() && m_can_rollback_isValid;

    m_disposal_date_isValid = ::OpenAPI::fromJsonValue(m_disposal_date, json[QString("disposalDate")]);
    m_disposal_date_isSet = !json[QString("disposalDate")].isNull() && m_disposal_date_isValid;

    m_disposal_price_isValid = ::OpenAPI::fromJsonValue(m_disposal_price, json[QString("disposalPrice")]);
    m_disposal_price_isSet = !json[QString("disposalPrice")].isNull() && m_disposal_price_isValid;

    m_is_delete_enabled_for_date_isValid = ::OpenAPI::fromJsonValue(m_is_delete_enabled_for_date, json[QString("isDeleteEnabledForDate")]);
    m_is_delete_enabled_for_date_isSet = !json[QString("isDeleteEnabledForDate")].isNull() && m_is_delete_enabled_for_date_isValid;

    m_purchase_date_isValid = ::OpenAPI::fromJsonValue(m_purchase_date, json[QString("purchaseDate")]);
    m_purchase_date_isSet = !json[QString("purchaseDate")].isNull() && m_purchase_date_isValid;

    m_purchase_price_isValid = ::OpenAPI::fromJsonValue(m_purchase_price, json[QString("purchasePrice")]);
    m_purchase_price_isSet = !json[QString("purchasePrice")].isNull() && m_purchase_price_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_warranty_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_warranty_expiry_date, json[QString("warrantyExpiryDate")]);
    m_warranty_expiry_date_isSet = !json[QString("warrantyExpiryDate")].isNull() && m_warranty_expiry_date_isValid;
}

QString OAIAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_accounting_book_value_isSet) {
        obj.insert(QString("accountingBookValue"), ::OpenAPI::toJsonValue(m_accounting_book_value));
    }
    if (m_asset_id_isSet) {
        obj.insert(QString("assetId"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_asset_name_isSet) {
        obj.insert(QString("assetName"), ::OpenAPI::toJsonValue(m_asset_name));
    }
    if (m_asset_number_isSet) {
        obj.insert(QString("assetNumber"), ::OpenAPI::toJsonValue(m_asset_number));
    }
    if (m_asset_status.isSet()) {
        obj.insert(QString("assetStatus"), ::OpenAPI::toJsonValue(m_asset_status));
    }
    if (m_asset_type_id_isSet) {
        obj.insert(QString("assetTypeId"), ::OpenAPI::toJsonValue(m_asset_type_id));
    }
    if (m_book_depreciation_detail.isSet()) {
        obj.insert(QString("bookDepreciationDetail"), ::OpenAPI::toJsonValue(m_book_depreciation_detail));
    }
    if (m_book_depreciation_setting.isSet()) {
        obj.insert(QString("bookDepreciationSetting"), ::OpenAPI::toJsonValue(m_book_depreciation_setting));
    }
    if (m_can_rollback_isSet) {
        obj.insert(QString("canRollback"), ::OpenAPI::toJsonValue(m_can_rollback));
    }
    if (m_disposal_date_isSet) {
        obj.insert(QString("disposalDate"), ::OpenAPI::toJsonValue(m_disposal_date));
    }
    if (m_disposal_price_isSet) {
        obj.insert(QString("disposalPrice"), ::OpenAPI::toJsonValue(m_disposal_price));
    }
    if (m_is_delete_enabled_for_date_isSet) {
        obj.insert(QString("isDeleteEnabledForDate"), ::OpenAPI::toJsonValue(m_is_delete_enabled_for_date));
    }
    if (m_purchase_date_isSet) {
        obj.insert(QString("purchaseDate"), ::OpenAPI::toJsonValue(m_purchase_date));
    }
    if (m_purchase_price_isSet) {
        obj.insert(QString("purchasePrice"), ::OpenAPI::toJsonValue(m_purchase_price));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_warranty_expiry_date_isSet) {
        obj.insert(QString("warrantyExpiryDate"), ::OpenAPI::toJsonValue(m_warranty_expiry_date));
    }
    return obj;
}

double OAIAsset::getAccountingBookValue() const {
    return m_accounting_book_value;
}
void OAIAsset::setAccountingBookValue(const double &accounting_book_value) {
    m_accounting_book_value = accounting_book_value;
    m_accounting_book_value_isSet = true;
}

bool OAIAsset::is_accounting_book_value_Set() const{
    return m_accounting_book_value_isSet;
}

bool OAIAsset::is_accounting_book_value_Valid() const{
    return m_accounting_book_value_isValid;
}

QString OAIAsset::getAssetId() const {
    return m_asset_id;
}
void OAIAsset::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIAsset::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIAsset::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

QString OAIAsset::getAssetName() const {
    return m_asset_name;
}
void OAIAsset::setAssetName(const QString &asset_name) {
    m_asset_name = asset_name;
    m_asset_name_isSet = true;
}

bool OAIAsset::is_asset_name_Set() const{
    return m_asset_name_isSet;
}

bool OAIAsset::is_asset_name_Valid() const{
    return m_asset_name_isValid;
}

QString OAIAsset::getAssetNumber() const {
    return m_asset_number;
}
void OAIAsset::setAssetNumber(const QString &asset_number) {
    m_asset_number = asset_number;
    m_asset_number_isSet = true;
}

bool OAIAsset::is_asset_number_Set() const{
    return m_asset_number_isSet;
}

bool OAIAsset::is_asset_number_Valid() const{
    return m_asset_number_isValid;
}

OAIAssetStatus OAIAsset::getAssetStatus() const {
    return m_asset_status;
}
void OAIAsset::setAssetStatus(const OAIAssetStatus &asset_status) {
    m_asset_status = asset_status;
    m_asset_status_isSet = true;
}

bool OAIAsset::is_asset_status_Set() const{
    return m_asset_status_isSet;
}

bool OAIAsset::is_asset_status_Valid() const{
    return m_asset_status_isValid;
}

QString OAIAsset::getAssetTypeId() const {
    return m_asset_type_id;
}
void OAIAsset::setAssetTypeId(const QString &asset_type_id) {
    m_asset_type_id = asset_type_id;
    m_asset_type_id_isSet = true;
}

bool OAIAsset::is_asset_type_id_Set() const{
    return m_asset_type_id_isSet;
}

bool OAIAsset::is_asset_type_id_Valid() const{
    return m_asset_type_id_isValid;
}

OAIBookDepreciationDetail OAIAsset::getBookDepreciationDetail() const {
    return m_book_depreciation_detail;
}
void OAIAsset::setBookDepreciationDetail(const OAIBookDepreciationDetail &book_depreciation_detail) {
    m_book_depreciation_detail = book_depreciation_detail;
    m_book_depreciation_detail_isSet = true;
}

bool OAIAsset::is_book_depreciation_detail_Set() const{
    return m_book_depreciation_detail_isSet;
}

bool OAIAsset::is_book_depreciation_detail_Valid() const{
    return m_book_depreciation_detail_isValid;
}

OAIBookDepreciationSetting OAIAsset::getBookDepreciationSetting() const {
    return m_book_depreciation_setting;
}
void OAIAsset::setBookDepreciationSetting(const OAIBookDepreciationSetting &book_depreciation_setting) {
    m_book_depreciation_setting = book_depreciation_setting;
    m_book_depreciation_setting_isSet = true;
}

bool OAIAsset::is_book_depreciation_setting_Set() const{
    return m_book_depreciation_setting_isSet;
}

bool OAIAsset::is_book_depreciation_setting_Valid() const{
    return m_book_depreciation_setting_isValid;
}

bool OAIAsset::isCanRollback() const {
    return m_can_rollback;
}
void OAIAsset::setCanRollback(const bool &can_rollback) {
    m_can_rollback = can_rollback;
    m_can_rollback_isSet = true;
}

bool OAIAsset::is_can_rollback_Set() const{
    return m_can_rollback_isSet;
}

bool OAIAsset::is_can_rollback_Valid() const{
    return m_can_rollback_isValid;
}

QDate OAIAsset::getDisposalDate() const {
    return m_disposal_date;
}
void OAIAsset::setDisposalDate(const QDate &disposal_date) {
    m_disposal_date = disposal_date;
    m_disposal_date_isSet = true;
}

bool OAIAsset::is_disposal_date_Set() const{
    return m_disposal_date_isSet;
}

bool OAIAsset::is_disposal_date_Valid() const{
    return m_disposal_date_isValid;
}

double OAIAsset::getDisposalPrice() const {
    return m_disposal_price;
}
void OAIAsset::setDisposalPrice(const double &disposal_price) {
    m_disposal_price = disposal_price;
    m_disposal_price_isSet = true;
}

bool OAIAsset::is_disposal_price_Set() const{
    return m_disposal_price_isSet;
}

bool OAIAsset::is_disposal_price_Valid() const{
    return m_disposal_price_isValid;
}

bool OAIAsset::isIsDeleteEnabledForDate() const {
    return m_is_delete_enabled_for_date;
}
void OAIAsset::setIsDeleteEnabledForDate(const bool &is_delete_enabled_for_date) {
    m_is_delete_enabled_for_date = is_delete_enabled_for_date;
    m_is_delete_enabled_for_date_isSet = true;
}

bool OAIAsset::is_is_delete_enabled_for_date_Set() const{
    return m_is_delete_enabled_for_date_isSet;
}

bool OAIAsset::is_is_delete_enabled_for_date_Valid() const{
    return m_is_delete_enabled_for_date_isValid;
}

QDate OAIAsset::getPurchaseDate() const {
    return m_purchase_date;
}
void OAIAsset::setPurchaseDate(const QDate &purchase_date) {
    m_purchase_date = purchase_date;
    m_purchase_date_isSet = true;
}

bool OAIAsset::is_purchase_date_Set() const{
    return m_purchase_date_isSet;
}

bool OAIAsset::is_purchase_date_Valid() const{
    return m_purchase_date_isValid;
}

double OAIAsset::getPurchasePrice() const {
    return m_purchase_price;
}
void OAIAsset::setPurchasePrice(const double &purchase_price) {
    m_purchase_price = purchase_price;
    m_purchase_price_isSet = true;
}

bool OAIAsset::is_purchase_price_Set() const{
    return m_purchase_price_isSet;
}

bool OAIAsset::is_purchase_price_Valid() const{
    return m_purchase_price_isValid;
}

QString OAIAsset::getSerialNumber() const {
    return m_serial_number;
}
void OAIAsset::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIAsset::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIAsset::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAIAsset::getWarrantyExpiryDate() const {
    return m_warranty_expiry_date;
}
void OAIAsset::setWarrantyExpiryDate(const QString &warranty_expiry_date) {
    m_warranty_expiry_date = warranty_expiry_date;
    m_warranty_expiry_date_isSet = true;
}

bool OAIAsset::is_warranty_expiry_date_Set() const{
    return m_warranty_expiry_date_isSet;
}

bool OAIAsset::is_warranty_expiry_date_Valid() const{
    return m_warranty_expiry_date_isValid;
}

bool OAIAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounting_book_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_book_depreciation_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_book_depreciation_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_rollback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disposal_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disposal_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_delete_enabled_for_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warranty_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_asset_name_isValid && true;
}

} // namespace OpenAPI
