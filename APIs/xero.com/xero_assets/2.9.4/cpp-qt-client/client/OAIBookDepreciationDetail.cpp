/**
 * Xero Assets API
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBookDepreciationDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBookDepreciationDetail::OAIBookDepreciationDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBookDepreciationDetail::OAIBookDepreciationDetail() {
    this->initializeModel();
}

OAIBookDepreciationDetail::~OAIBookDepreciationDetail() {}

void OAIBookDepreciationDetail::initializeModel() {

    m_cost_limit_isSet = false;
    m_cost_limit_isValid = false;

    m_current_accum_depreciation_amount_isSet = false;
    m_current_accum_depreciation_amount_isValid = false;

    m_current_capital_gain_isSet = false;
    m_current_capital_gain_isValid = false;

    m_current_gain_loss_isSet = false;
    m_current_gain_loss_isValid = false;

    m_depreciation_start_date_isSet = false;
    m_depreciation_start_date_isValid = false;

    m_prior_accum_depreciation_amount_isSet = false;
    m_prior_accum_depreciation_amount_isValid = false;

    m_residual_value_isSet = false;
    m_residual_value_isValid = false;
}

void OAIBookDepreciationDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBookDepreciationDetail::fromJsonObject(QJsonObject json) {

    m_cost_limit_isValid = ::OpenAPI::fromJsonValue(m_cost_limit, json[QString("costLimit")]);
    m_cost_limit_isSet = !json[QString("costLimit")].isNull() && m_cost_limit_isValid;

    m_current_accum_depreciation_amount_isValid = ::OpenAPI::fromJsonValue(m_current_accum_depreciation_amount, json[QString("currentAccumDepreciationAmount")]);
    m_current_accum_depreciation_amount_isSet = !json[QString("currentAccumDepreciationAmount")].isNull() && m_current_accum_depreciation_amount_isValid;

    m_current_capital_gain_isValid = ::OpenAPI::fromJsonValue(m_current_capital_gain, json[QString("currentCapitalGain")]);
    m_current_capital_gain_isSet = !json[QString("currentCapitalGain")].isNull() && m_current_capital_gain_isValid;

    m_current_gain_loss_isValid = ::OpenAPI::fromJsonValue(m_current_gain_loss, json[QString("currentGainLoss")]);
    m_current_gain_loss_isSet = !json[QString("currentGainLoss")].isNull() && m_current_gain_loss_isValid;

    m_depreciation_start_date_isValid = ::OpenAPI::fromJsonValue(m_depreciation_start_date, json[QString("depreciationStartDate")]);
    m_depreciation_start_date_isSet = !json[QString("depreciationStartDate")].isNull() && m_depreciation_start_date_isValid;

    m_prior_accum_depreciation_amount_isValid = ::OpenAPI::fromJsonValue(m_prior_accum_depreciation_amount, json[QString("priorAccumDepreciationAmount")]);
    m_prior_accum_depreciation_amount_isSet = !json[QString("priorAccumDepreciationAmount")].isNull() && m_prior_accum_depreciation_amount_isValid;

    m_residual_value_isValid = ::OpenAPI::fromJsonValue(m_residual_value, json[QString("residualValue")]);
    m_residual_value_isSet = !json[QString("residualValue")].isNull() && m_residual_value_isValid;
}

QString OAIBookDepreciationDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBookDepreciationDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_limit_isSet) {
        obj.insert(QString("costLimit"), ::OpenAPI::toJsonValue(m_cost_limit));
    }
    if (m_current_accum_depreciation_amount_isSet) {
        obj.insert(QString("currentAccumDepreciationAmount"), ::OpenAPI::toJsonValue(m_current_accum_depreciation_amount));
    }
    if (m_current_capital_gain_isSet) {
        obj.insert(QString("currentCapitalGain"), ::OpenAPI::toJsonValue(m_current_capital_gain));
    }
    if (m_current_gain_loss_isSet) {
        obj.insert(QString("currentGainLoss"), ::OpenAPI::toJsonValue(m_current_gain_loss));
    }
    if (m_depreciation_start_date_isSet) {
        obj.insert(QString("depreciationStartDate"), ::OpenAPI::toJsonValue(m_depreciation_start_date));
    }
    if (m_prior_accum_depreciation_amount_isSet) {
        obj.insert(QString("priorAccumDepreciationAmount"), ::OpenAPI::toJsonValue(m_prior_accum_depreciation_amount));
    }
    if (m_residual_value_isSet) {
        obj.insert(QString("residualValue"), ::OpenAPI::toJsonValue(m_residual_value));
    }
    return obj;
}

double OAIBookDepreciationDetail::getCostLimit() const {
    return m_cost_limit;
}
void OAIBookDepreciationDetail::setCostLimit(const double &cost_limit) {
    m_cost_limit = cost_limit;
    m_cost_limit_isSet = true;
}

bool OAIBookDepreciationDetail::is_cost_limit_Set() const{
    return m_cost_limit_isSet;
}

bool OAIBookDepreciationDetail::is_cost_limit_Valid() const{
    return m_cost_limit_isValid;
}

double OAIBookDepreciationDetail::getCurrentAccumDepreciationAmount() const {
    return m_current_accum_depreciation_amount;
}
void OAIBookDepreciationDetail::setCurrentAccumDepreciationAmount(const double &current_accum_depreciation_amount) {
    m_current_accum_depreciation_amount = current_accum_depreciation_amount;
    m_current_accum_depreciation_amount_isSet = true;
}

bool OAIBookDepreciationDetail::is_current_accum_depreciation_amount_Set() const{
    return m_current_accum_depreciation_amount_isSet;
}

bool OAIBookDepreciationDetail::is_current_accum_depreciation_amount_Valid() const{
    return m_current_accum_depreciation_amount_isValid;
}

double OAIBookDepreciationDetail::getCurrentCapitalGain() const {
    return m_current_capital_gain;
}
void OAIBookDepreciationDetail::setCurrentCapitalGain(const double &current_capital_gain) {
    m_current_capital_gain = current_capital_gain;
    m_current_capital_gain_isSet = true;
}

bool OAIBookDepreciationDetail::is_current_capital_gain_Set() const{
    return m_current_capital_gain_isSet;
}

bool OAIBookDepreciationDetail::is_current_capital_gain_Valid() const{
    return m_current_capital_gain_isValid;
}

double OAIBookDepreciationDetail::getCurrentGainLoss() const {
    return m_current_gain_loss;
}
void OAIBookDepreciationDetail::setCurrentGainLoss(const double &current_gain_loss) {
    m_current_gain_loss = current_gain_loss;
    m_current_gain_loss_isSet = true;
}

bool OAIBookDepreciationDetail::is_current_gain_loss_Set() const{
    return m_current_gain_loss_isSet;
}

bool OAIBookDepreciationDetail::is_current_gain_loss_Valid() const{
    return m_current_gain_loss_isValid;
}

QDate OAIBookDepreciationDetail::getDepreciationStartDate() const {
    return m_depreciation_start_date;
}
void OAIBookDepreciationDetail::setDepreciationStartDate(const QDate &depreciation_start_date) {
    m_depreciation_start_date = depreciation_start_date;
    m_depreciation_start_date_isSet = true;
}

bool OAIBookDepreciationDetail::is_depreciation_start_date_Set() const{
    return m_depreciation_start_date_isSet;
}

bool OAIBookDepreciationDetail::is_depreciation_start_date_Valid() const{
    return m_depreciation_start_date_isValid;
}

double OAIBookDepreciationDetail::getPriorAccumDepreciationAmount() const {
    return m_prior_accum_depreciation_amount;
}
void OAIBookDepreciationDetail::setPriorAccumDepreciationAmount(const double &prior_accum_depreciation_amount) {
    m_prior_accum_depreciation_amount = prior_accum_depreciation_amount;
    m_prior_accum_depreciation_amount_isSet = true;
}

bool OAIBookDepreciationDetail::is_prior_accum_depreciation_amount_Set() const{
    return m_prior_accum_depreciation_amount_isSet;
}

bool OAIBookDepreciationDetail::is_prior_accum_depreciation_amount_Valid() const{
    return m_prior_accum_depreciation_amount_isValid;
}

double OAIBookDepreciationDetail::getResidualValue() const {
    return m_residual_value;
}
void OAIBookDepreciationDetail::setResidualValue(const double &residual_value) {
    m_residual_value = residual_value;
    m_residual_value_isSet = true;
}

bool OAIBookDepreciationDetail::is_residual_value_Set() const{
    return m_residual_value_isSet;
}

bool OAIBookDepreciationDetail::is_residual_value_Valid() const{
    return m_residual_value_isValid;
}

bool OAIBookDepreciationDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_accum_depreciation_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_capital_gain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_gain_loss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depreciation_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prior_accum_depreciation_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_residual_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBookDepreciationDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
