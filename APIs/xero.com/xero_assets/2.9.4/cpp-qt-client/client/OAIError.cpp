/**
 * Xero Assets API
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError::OAIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError::OAIError() {
    this->initializeModel();
}

OAIError::~OAIError() {}

void OAIError::initializeModel() {

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_field_validation_errors_isSet = false;
    m_field_validation_errors_isValid = false;

    m_resource_validation_errors_isSet = false;
    m_resource_validation_errors_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError::fromJsonObject(QJsonObject json) {

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_field_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_field_validation_errors, json[QString("fieldValidationErrors")]);
    m_field_validation_errors_isSet = !json[QString("fieldValidationErrors")].isNull() && m_field_validation_errors_isValid;

    m_resource_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_resource_validation_errors, json[QString("resourceValidationErrors")]);
    m_resource_validation_errors_isSet = !json[QString("resourceValidationErrors")].isNull() && m_resource_validation_errors_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_field_validation_errors.size() > 0) {
        obj.insert(QString("fieldValidationErrors"), ::OpenAPI::toJsonValue(m_field_validation_errors));
    }
    if (m_resource_validation_errors.size() > 0) {
        obj.insert(QString("resourceValidationErrors"), ::OpenAPI::toJsonValue(m_resource_validation_errors));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIError::getDetail() const {
    return m_detail;
}
void OAIError::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIError::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIError::is_detail_Valid() const{
    return m_detail_isValid;
}

QList<OAIFieldValidationErrorsElement> OAIError::getFieldValidationErrors() const {
    return m_field_validation_errors;
}
void OAIError::setFieldValidationErrors(const QList<OAIFieldValidationErrorsElement> &field_validation_errors) {
    m_field_validation_errors = field_validation_errors;
    m_field_validation_errors_isSet = true;
}

bool OAIError::is_field_validation_errors_Set() const{
    return m_field_validation_errors_isSet;
}

bool OAIError::is_field_validation_errors_Valid() const{
    return m_field_validation_errors_isValid;
}

QList<OAIResourceValidationErrorsElement> OAIError::getResourceValidationErrors() const {
    return m_resource_validation_errors;
}
void OAIError::setResourceValidationErrors(const QList<OAIResourceValidationErrorsElement> &resource_validation_errors) {
    m_resource_validation_errors = resource_validation_errors;
    m_resource_validation_errors_isSet = true;
}

bool OAIError::is_resource_validation_errors_Set() const{
    return m_resource_validation_errors_isSet;
}

bool OAIError::is_resource_validation_errors_Valid() const{
    return m_resource_validation_errors_isValid;
}

QString OAIError::getTitle() const {
    return m_title;
}
void OAIError::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIError::is_title_Set() const{
    return m_title_isSet;
}

bool OAIError::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIError::getType() const {
    return m_type;
}
void OAIError::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIError::is_type_Set() const{
    return m_type_isSet;
}

bool OAIError::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
