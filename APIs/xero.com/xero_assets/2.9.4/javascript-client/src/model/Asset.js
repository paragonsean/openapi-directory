/**
 * Xero Assets API
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssetStatus from './AssetStatus';
import BookDepreciationDetail from './BookDepreciationDetail';
import BookDepreciationSetting from './BookDepreciationSetting';

/**
 * The Asset model module.
 * @module model/Asset
 * @version 2.9.4
 */
class Asset {
    /**
     * Constructs a new <code>Asset</code>.
     * @alias module:model/Asset
     * @param assetName {String} The name of the asset
     */
    constructor(assetName) { 
        
        Asset.initialize(this, assetName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, assetName) { 
        obj['assetName'] = assetName;
    }

    /**
     * Constructs a <code>Asset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Asset} obj Optional instance to populate.
     * @return {module:model/Asset} The populated <code>Asset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Asset();

            if (data.hasOwnProperty('accountingBookValue')) {
                obj['accountingBookValue'] = ApiClient.convertToType(data['accountingBookValue'], 'Number');
            }
            if (data.hasOwnProperty('assetId')) {
                obj['assetId'] = ApiClient.convertToType(data['assetId'], 'String');
            }
            if (data.hasOwnProperty('assetName')) {
                obj['assetName'] = ApiClient.convertToType(data['assetName'], 'String');
            }
            if (data.hasOwnProperty('assetNumber')) {
                obj['assetNumber'] = ApiClient.convertToType(data['assetNumber'], 'String');
            }
            if (data.hasOwnProperty('assetStatus')) {
                obj['assetStatus'] = AssetStatus.constructFromObject(data['assetStatus']);
            }
            if (data.hasOwnProperty('assetTypeId')) {
                obj['assetTypeId'] = ApiClient.convertToType(data['assetTypeId'], 'String');
            }
            if (data.hasOwnProperty('bookDepreciationDetail')) {
                obj['bookDepreciationDetail'] = BookDepreciationDetail.constructFromObject(data['bookDepreciationDetail']);
            }
            if (data.hasOwnProperty('bookDepreciationSetting')) {
                obj['bookDepreciationSetting'] = BookDepreciationSetting.constructFromObject(data['bookDepreciationSetting']);
            }
            if (data.hasOwnProperty('canRollback')) {
                obj['canRollback'] = ApiClient.convertToType(data['canRollback'], 'Boolean');
            }
            if (data.hasOwnProperty('disposalDate')) {
                obj['disposalDate'] = ApiClient.convertToType(data['disposalDate'], 'Date');
            }
            if (data.hasOwnProperty('disposalPrice')) {
                obj['disposalPrice'] = ApiClient.convertToType(data['disposalPrice'], 'Number');
            }
            if (data.hasOwnProperty('isDeleteEnabledForDate')) {
                obj['isDeleteEnabledForDate'] = ApiClient.convertToType(data['isDeleteEnabledForDate'], 'Boolean');
            }
            if (data.hasOwnProperty('purchaseDate')) {
                obj['purchaseDate'] = ApiClient.convertToType(data['purchaseDate'], 'Date');
            }
            if (data.hasOwnProperty('purchasePrice')) {
                obj['purchasePrice'] = ApiClient.convertToType(data['purchasePrice'], 'Number');
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
            if (data.hasOwnProperty('warrantyExpiryDate')) {
                obj['warrantyExpiryDate'] = ApiClient.convertToType(data['warrantyExpiryDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Asset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Asset</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Asset.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['assetId'] && !(typeof data['assetId'] === 'string' || data['assetId'] instanceof String)) {
            throw new Error("Expected the field `assetId` to be a primitive type in the JSON string but got " + data['assetId']);
        }
        // ensure the json data is a string
        if (data['assetName'] && !(typeof data['assetName'] === 'string' || data['assetName'] instanceof String)) {
            throw new Error("Expected the field `assetName` to be a primitive type in the JSON string but got " + data['assetName']);
        }
        // ensure the json data is a string
        if (data['assetNumber'] && !(typeof data['assetNumber'] === 'string' || data['assetNumber'] instanceof String)) {
            throw new Error("Expected the field `assetNumber` to be a primitive type in the JSON string but got " + data['assetNumber']);
        }
        // ensure the json data is a string
        if (data['assetTypeId'] && !(typeof data['assetTypeId'] === 'string' || data['assetTypeId'] instanceof String)) {
            throw new Error("Expected the field `assetTypeId` to be a primitive type in the JSON string but got " + data['assetTypeId']);
        }
        // validate the optional field `bookDepreciationDetail`
        if (data['bookDepreciationDetail']) { // data not null
          BookDepreciationDetail.validateJSON(data['bookDepreciationDetail']);
        }
        // validate the optional field `bookDepreciationSetting`
        if (data['bookDepreciationSetting']) { // data not null
          BookDepreciationSetting.validateJSON(data['bookDepreciationSetting']);
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }
        // ensure the json data is a string
        if (data['warrantyExpiryDate'] && !(typeof data['warrantyExpiryDate'] === 'string' || data['warrantyExpiryDate'] instanceof String)) {
            throw new Error("Expected the field `warrantyExpiryDate` to be a primitive type in the JSON string but got " + data['warrantyExpiryDate']);
        }

        return true;
    }


}

Asset.RequiredProperties = ["assetName"];

/**
 * The accounting value of the asset
 * @member {Number} accountingBookValue
 */
Asset.prototype['accountingBookValue'] = undefined;

/**
 * The Xero-generated Id for the asset
 * @member {String} assetId
 */
Asset.prototype['assetId'] = undefined;

/**
 * The name of the asset
 * @member {String} assetName
 */
Asset.prototype['assetName'] = undefined;

/**
 * Must be unique.
 * @member {String} assetNumber
 */
Asset.prototype['assetNumber'] = undefined;

/**
 * @member {module:model/AssetStatus} assetStatus
 */
Asset.prototype['assetStatus'] = undefined;

/**
 * The Xero-generated Id for the asset type
 * @member {String} assetTypeId
 */
Asset.prototype['assetTypeId'] = undefined;

/**
 * @member {module:model/BookDepreciationDetail} bookDepreciationDetail
 */
Asset.prototype['bookDepreciationDetail'] = undefined;

/**
 * @member {module:model/BookDepreciationSetting} bookDepreciationSetting
 */
Asset.prototype['bookDepreciationSetting'] = undefined;

/**
 * Boolean to indicate whether depreciation can be rolled back for this asset individually. This is true if it doesn't have 'legacy' journal entries and if there is no lock period that would prevent this asset from rolling back.
 * @member {Boolean} canRollback
 */
Asset.prototype['canRollback'] = undefined;

/**
 * The date the asset was disposed
 * @member {Date} disposalDate
 */
Asset.prototype['disposalDate'] = undefined;

/**
 * The price the asset was disposed at
 * @member {Number} disposalPrice
 */
Asset.prototype['disposalPrice'] = undefined;

/**
 * Boolean to indicate whether delete is enabled
 * @member {Boolean} isDeleteEnabledForDate
 */
Asset.prototype['isDeleteEnabledForDate'] = undefined;

/**
 * The date the asset was purchased YYYY-MM-DD
 * @member {Date} purchaseDate
 */
Asset.prototype['purchaseDate'] = undefined;

/**
 * The purchase price of the asset
 * @member {Number} purchasePrice
 */
Asset.prototype['purchasePrice'] = undefined;

/**
 * The asset's serial number
 * @member {String} serialNumber
 */
Asset.prototype['serialNumber'] = undefined;

/**
 * The date the assetâ€™s warranty expires (if needed) YYYY-MM-DD
 * @member {String} warrantyExpiryDate
 */
Asset.prototype['warrantyExpiryDate'] = undefined;






export default Asset;

