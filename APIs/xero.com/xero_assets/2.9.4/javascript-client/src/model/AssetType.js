/**
 * Xero Assets API
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BookDepreciationSetting from './BookDepreciationSetting';

/**
 * The AssetType model module.
 * @module model/AssetType
 * @version 2.9.4
 */
class AssetType {
    /**
     * Constructs a new <code>AssetType</code>.
     * @alias module:model/AssetType
     * @param assetTypeName {String} The name of the asset type
     * @param bookDepreciationSetting {module:model/BookDepreciationSetting} 
     */
    constructor(assetTypeName, bookDepreciationSetting) { 
        
        AssetType.initialize(this, assetTypeName, bookDepreciationSetting);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, assetTypeName, bookDepreciationSetting) { 
        obj['assetTypeName'] = assetTypeName;
        obj['bookDepreciationSetting'] = bookDepreciationSetting;
    }

    /**
     * Constructs a <code>AssetType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssetType} obj Optional instance to populate.
     * @return {module:model/AssetType} The populated <code>AssetType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssetType();

            if (data.hasOwnProperty('accumulatedDepreciationAccountId')) {
                obj['accumulatedDepreciationAccountId'] = ApiClient.convertToType(data['accumulatedDepreciationAccountId'], 'String');
            }
            if (data.hasOwnProperty('assetTypeId')) {
                obj['assetTypeId'] = ApiClient.convertToType(data['assetTypeId'], 'String');
            }
            if (data.hasOwnProperty('assetTypeName')) {
                obj['assetTypeName'] = ApiClient.convertToType(data['assetTypeName'], 'String');
            }
            if (data.hasOwnProperty('bookDepreciationSetting')) {
                obj['bookDepreciationSetting'] = BookDepreciationSetting.constructFromObject(data['bookDepreciationSetting']);
            }
            if (data.hasOwnProperty('depreciationExpenseAccountId')) {
                obj['depreciationExpenseAccountId'] = ApiClient.convertToType(data['depreciationExpenseAccountId'], 'String');
            }
            if (data.hasOwnProperty('fixedAssetAccountId')) {
                obj['fixedAssetAccountId'] = ApiClient.convertToType(data['fixedAssetAccountId'], 'String');
            }
            if (data.hasOwnProperty('locks')) {
                obj['locks'] = ApiClient.convertToType(data['locks'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssetType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssetType</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AssetType.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accumulatedDepreciationAccountId'] && !(typeof data['accumulatedDepreciationAccountId'] === 'string' || data['accumulatedDepreciationAccountId'] instanceof String)) {
            throw new Error("Expected the field `accumulatedDepreciationAccountId` to be a primitive type in the JSON string but got " + data['accumulatedDepreciationAccountId']);
        }
        // ensure the json data is a string
        if (data['assetTypeId'] && !(typeof data['assetTypeId'] === 'string' || data['assetTypeId'] instanceof String)) {
            throw new Error("Expected the field `assetTypeId` to be a primitive type in the JSON string but got " + data['assetTypeId']);
        }
        // ensure the json data is a string
        if (data['assetTypeName'] && !(typeof data['assetTypeName'] === 'string' || data['assetTypeName'] instanceof String)) {
            throw new Error("Expected the field `assetTypeName` to be a primitive type in the JSON string but got " + data['assetTypeName']);
        }
        // validate the optional field `bookDepreciationSetting`
        if (data['bookDepreciationSetting']) { // data not null
          BookDepreciationSetting.validateJSON(data['bookDepreciationSetting']);
        }
        // ensure the json data is a string
        if (data['depreciationExpenseAccountId'] && !(typeof data['depreciationExpenseAccountId'] === 'string' || data['depreciationExpenseAccountId'] instanceof String)) {
            throw new Error("Expected the field `depreciationExpenseAccountId` to be a primitive type in the JSON string but got " + data['depreciationExpenseAccountId']);
        }
        // ensure the json data is a string
        if (data['fixedAssetAccountId'] && !(typeof data['fixedAssetAccountId'] === 'string' || data['fixedAssetAccountId'] instanceof String)) {
            throw new Error("Expected the field `fixedAssetAccountId` to be a primitive type in the JSON string but got " + data['fixedAssetAccountId']);
        }

        return true;
    }


}

AssetType.RequiredProperties = ["assetTypeName", "bookDepreciationSetting"];

/**
 * The account for accumulated depreciation of fixed assets of this type
 * @member {String} accumulatedDepreciationAccountId
 */
AssetType.prototype['accumulatedDepreciationAccountId'] = undefined;

/**
 * Xero generated unique identifier for asset types
 * @member {String} assetTypeId
 */
AssetType.prototype['assetTypeId'] = undefined;

/**
 * The name of the asset type
 * @member {String} assetTypeName
 */
AssetType.prototype['assetTypeName'] = undefined;

/**
 * @member {module:model/BookDepreciationSetting} bookDepreciationSetting
 */
AssetType.prototype['bookDepreciationSetting'] = undefined;

/**
 * The expense account for the depreciation of fixed assets of this type
 * @member {String} depreciationExpenseAccountId
 */
AssetType.prototype['depreciationExpenseAccountId'] = undefined;

/**
 * The asset account for fixed assets of this type
 * @member {String} fixedAssetAccountId
 */
AssetType.prototype['fixedAssetAccountId'] = undefined;

/**
 * All asset types that have accumulated depreciation for any assets that use them are deemed ‘locked’ and cannot be removed.
 * @member {Number} locks
 */
AssetType.prototype['locks'] = undefined;






export default AssetType;

