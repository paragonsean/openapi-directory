/**
 * Xero Assets API
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResourceValidationErrorsElement model module.
 * @module model/ResourceValidationErrorsElement
 * @version 2.9.4
 */
class ResourceValidationErrorsElement {
    /**
     * Constructs a new <code>ResourceValidationErrorsElement</code>.
     * @alias module:model/ResourceValidationErrorsElement
     */
    constructor() { 
        
        ResourceValidationErrorsElement.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceValidationErrorsElement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceValidationErrorsElement} obj Optional instance to populate.
     * @return {module:model/ResourceValidationErrorsElement} The populated <code>ResourceValidationErrorsElement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceValidationErrorsElement();

            if (data.hasOwnProperty('detail')) {
                obj['detail'] = ApiClient.convertToType(data['detail'], 'String');
            }
            if (data.hasOwnProperty('localisedMessage')) {
                obj['localisedMessage'] = ApiClient.convertToType(data['localisedMessage'], 'String');
            }
            if (data.hasOwnProperty('resourceName')) {
                obj['resourceName'] = ApiClient.convertToType(data['resourceName'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceValidationErrorsElement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceValidationErrorsElement</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['detail'] && !(typeof data['detail'] === 'string' || data['detail'] instanceof String)) {
            throw new Error("Expected the field `detail` to be a primitive type in the JSON string but got " + data['detail']);
        }
        // ensure the json data is a string
        if (data['localisedMessage'] && !(typeof data['localisedMessage'] === 'string' || data['localisedMessage'] instanceof String)) {
            throw new Error("Expected the field `localisedMessage` to be a primitive type in the JSON string but got " + data['localisedMessage']);
        }
        // ensure the json data is a string
        if (data['resourceName'] && !(typeof data['resourceName'] === 'string' || data['resourceName'] instanceof String)) {
            throw new Error("Expected the field `resourceName` to be a primitive type in the JSON string but got " + data['resourceName']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Detail of the resource validation error
 * @member {String} detail
 */
ResourceValidationErrorsElement.prototype['detail'] = undefined;

/**
 * Explanation of the resource validation error
 * @member {String} localisedMessage
 */
ResourceValidationErrorsElement.prototype['localisedMessage'] = undefined;

/**
 * The field name of the erroneous field
 * @member {String} resourceName
 */
ResourceValidationErrorsElement.prototype['resourceName'] = undefined;

/**
 * Title of the resource validation error
 * @member {String} title
 */
ResourceValidationErrorsElement.prototype['title'] = undefined;

/**
 * Internal type of the resource error message
 * @member {String} type
 */
ResourceValidationErrorsElement.prototype['type'] = undefined;






export default ResourceValidationErrorsElement;

