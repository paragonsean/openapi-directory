/**
 * Xero Assets API
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Setting model module.
 * @module model/Setting
 * @version 2.9.4
 */
class Setting {
    /**
     * Constructs a new <code>Setting</code>.
     * @alias module:model/Setting
     */
    constructor() { 
        
        Setting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Setting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Setting} obj Optional instance to populate.
     * @return {module:model/Setting} The populated <code>Setting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Setting();

            if (data.hasOwnProperty('assetNumberPrefix')) {
                obj['assetNumberPrefix'] = ApiClient.convertToType(data['assetNumberPrefix'], 'String');
            }
            if (data.hasOwnProperty('assetNumberSequence')) {
                obj['assetNumberSequence'] = ApiClient.convertToType(data['assetNumberSequence'], 'String');
            }
            if (data.hasOwnProperty('assetStartDate')) {
                obj['assetStartDate'] = ApiClient.convertToType(data['assetStartDate'], 'Date');
            }
            if (data.hasOwnProperty('defaultCapitalGainOnDisposalAccountId')) {
                obj['defaultCapitalGainOnDisposalAccountId'] = ApiClient.convertToType(data['defaultCapitalGainOnDisposalAccountId'], 'String');
            }
            if (data.hasOwnProperty('defaultGainOnDisposalAccountId')) {
                obj['defaultGainOnDisposalAccountId'] = ApiClient.convertToType(data['defaultGainOnDisposalAccountId'], 'String');
            }
            if (data.hasOwnProperty('defaultLossOnDisposalAccountId')) {
                obj['defaultLossOnDisposalAccountId'] = ApiClient.convertToType(data['defaultLossOnDisposalAccountId'], 'String');
            }
            if (data.hasOwnProperty('lastDepreciationDate')) {
                obj['lastDepreciationDate'] = ApiClient.convertToType(data['lastDepreciationDate'], 'Date');
            }
            if (data.hasOwnProperty('optInForTax')) {
                obj['optInForTax'] = ApiClient.convertToType(data['optInForTax'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Setting</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Setting</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assetNumberPrefix'] && !(typeof data['assetNumberPrefix'] === 'string' || data['assetNumberPrefix'] instanceof String)) {
            throw new Error("Expected the field `assetNumberPrefix` to be a primitive type in the JSON string but got " + data['assetNumberPrefix']);
        }
        // ensure the json data is a string
        if (data['assetNumberSequence'] && !(typeof data['assetNumberSequence'] === 'string' || data['assetNumberSequence'] instanceof String)) {
            throw new Error("Expected the field `assetNumberSequence` to be a primitive type in the JSON string but got " + data['assetNumberSequence']);
        }
        // ensure the json data is a string
        if (data['defaultCapitalGainOnDisposalAccountId'] && !(typeof data['defaultCapitalGainOnDisposalAccountId'] === 'string' || data['defaultCapitalGainOnDisposalAccountId'] instanceof String)) {
            throw new Error("Expected the field `defaultCapitalGainOnDisposalAccountId` to be a primitive type in the JSON string but got " + data['defaultCapitalGainOnDisposalAccountId']);
        }
        // ensure the json data is a string
        if (data['defaultGainOnDisposalAccountId'] && !(typeof data['defaultGainOnDisposalAccountId'] === 'string' || data['defaultGainOnDisposalAccountId'] instanceof String)) {
            throw new Error("Expected the field `defaultGainOnDisposalAccountId` to be a primitive type in the JSON string but got " + data['defaultGainOnDisposalAccountId']);
        }
        // ensure the json data is a string
        if (data['defaultLossOnDisposalAccountId'] && !(typeof data['defaultLossOnDisposalAccountId'] === 'string' || data['defaultLossOnDisposalAccountId'] instanceof String)) {
            throw new Error("Expected the field `defaultLossOnDisposalAccountId` to be a primitive type in the JSON string but got " + data['defaultLossOnDisposalAccountId']);
        }

        return true;
    }


}



/**
 * The prefix used for fixed asset numbers (“FA-” by default)
 * @member {String} assetNumberPrefix
 */
Setting.prototype['assetNumberPrefix'] = undefined;

/**
 * The next available sequence number
 * @member {String} assetNumberSequence
 */
Setting.prototype['assetNumberSequence'] = undefined;

/**
 * The date depreciation calculations started on registered fixed assets in Xero
 * @member {Date} assetStartDate
 */
Setting.prototype['assetStartDate'] = undefined;

/**
 * Default account that capital gains are posted to
 * @member {String} defaultCapitalGainOnDisposalAccountId
 */
Setting.prototype['defaultCapitalGainOnDisposalAccountId'] = undefined;

/**
 * Default account that gains are posted to
 * @member {String} defaultGainOnDisposalAccountId
 */
Setting.prototype['defaultGainOnDisposalAccountId'] = undefined;

/**
 * Default account that losses are posted to
 * @member {String} defaultLossOnDisposalAccountId
 */
Setting.prototype['defaultLossOnDisposalAccountId'] = undefined;

/**
 * The last depreciation date
 * @member {Date} lastDepreciationDate
 */
Setting.prototype['lastDepreciationDate'] = undefined;

/**
 * opt in for tax calculation
 * @member {Boolean} optInForTax
 */
Setting.prototype['optInForTax'] = undefined;






export default Setting;

