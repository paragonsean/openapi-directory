/**
 * Xero Assets API
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BookDepreciationSetting model module.
 * @module model/BookDepreciationSetting
 * @version 2.9.4
 */
class BookDepreciationSetting {
    /**
     * Constructs a new <code>BookDepreciationSetting</code>.
     * @alias module:model/BookDepreciationSetting
     */
    constructor() { 
        
        BookDepreciationSetting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BookDepreciationSetting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BookDepreciationSetting} obj Optional instance to populate.
     * @return {module:model/BookDepreciationSetting} The populated <code>BookDepreciationSetting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BookDepreciationSetting();

            if (data.hasOwnProperty('averagingMethod')) {
                obj['averagingMethod'] = ApiClient.convertToType(data['averagingMethod'], 'String');
            }
            if (data.hasOwnProperty('bookEffectiveDateOfChangeId')) {
                obj['bookEffectiveDateOfChangeId'] = ApiClient.convertToType(data['bookEffectiveDateOfChangeId'], 'String');
            }
            if (data.hasOwnProperty('depreciableObjectId')) {
                obj['depreciableObjectId'] = ApiClient.convertToType(data['depreciableObjectId'], 'String');
            }
            if (data.hasOwnProperty('depreciableObjectType')) {
                obj['depreciableObjectType'] = ApiClient.convertToType(data['depreciableObjectType'], 'String');
            }
            if (data.hasOwnProperty('depreciationCalculationMethod')) {
                obj['depreciationCalculationMethod'] = ApiClient.convertToType(data['depreciationCalculationMethod'], 'String');
            }
            if (data.hasOwnProperty('depreciationMethod')) {
                obj['depreciationMethod'] = ApiClient.convertToType(data['depreciationMethod'], 'String');
            }
            if (data.hasOwnProperty('depreciationRate')) {
                obj['depreciationRate'] = ApiClient.convertToType(data['depreciationRate'], 'Number');
            }
            if (data.hasOwnProperty('effectiveLifeYears')) {
                obj['effectiveLifeYears'] = ApiClient.convertToType(data['effectiveLifeYears'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BookDepreciationSetting</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BookDepreciationSetting</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['averagingMethod'] && !(typeof data['averagingMethod'] === 'string' || data['averagingMethod'] instanceof String)) {
            throw new Error("Expected the field `averagingMethod` to be a primitive type in the JSON string but got " + data['averagingMethod']);
        }
        // ensure the json data is a string
        if (data['bookEffectiveDateOfChangeId'] && !(typeof data['bookEffectiveDateOfChangeId'] === 'string' || data['bookEffectiveDateOfChangeId'] instanceof String)) {
            throw new Error("Expected the field `bookEffectiveDateOfChangeId` to be a primitive type in the JSON string but got " + data['bookEffectiveDateOfChangeId']);
        }
        // ensure the json data is a string
        if (data['depreciableObjectId'] && !(typeof data['depreciableObjectId'] === 'string' || data['depreciableObjectId'] instanceof String)) {
            throw new Error("Expected the field `depreciableObjectId` to be a primitive type in the JSON string but got " + data['depreciableObjectId']);
        }
        // ensure the json data is a string
        if (data['depreciableObjectType'] && !(typeof data['depreciableObjectType'] === 'string' || data['depreciableObjectType'] instanceof String)) {
            throw new Error("Expected the field `depreciableObjectType` to be a primitive type in the JSON string but got " + data['depreciableObjectType']);
        }
        // ensure the json data is a string
        if (data['depreciationCalculationMethod'] && !(typeof data['depreciationCalculationMethod'] === 'string' || data['depreciationCalculationMethod'] instanceof String)) {
            throw new Error("Expected the field `depreciationCalculationMethod` to be a primitive type in the JSON string but got " + data['depreciationCalculationMethod']);
        }
        // ensure the json data is a string
        if (data['depreciationMethod'] && !(typeof data['depreciationMethod'] === 'string' || data['depreciationMethod'] instanceof String)) {
            throw new Error("Expected the field `depreciationMethod` to be a primitive type in the JSON string but got " + data['depreciationMethod']);
        }

        return true;
    }


}



/**
 * The method of averaging applied to this asset. See Averaging Methods
 * @member {module:model/BookDepreciationSetting.AveragingMethodEnum} averagingMethod
 */
BookDepreciationSetting.prototype['averagingMethod'] = undefined;

/**
 * Unique Xero identifier for the effective date change
 * @member {String} bookEffectiveDateOfChangeId
 */
BookDepreciationSetting.prototype['bookEffectiveDateOfChangeId'] = undefined;

/**
 * Unique Xero identifier for the depreciable object
 * @member {String} depreciableObjectId
 */
BookDepreciationSetting.prototype['depreciableObjectId'] = undefined;

/**
 * The type of asset object
 * @member {String} depreciableObjectType
 */
BookDepreciationSetting.prototype['depreciableObjectType'] = undefined;

/**
 * See Depreciation Calculation Methods
 * @member {module:model/BookDepreciationSetting.DepreciationCalculationMethodEnum} depreciationCalculationMethod
 */
BookDepreciationSetting.prototype['depreciationCalculationMethod'] = undefined;

/**
 * The method of depreciation applied to this asset. See Depreciation Methods
 * @member {module:model/BookDepreciationSetting.DepreciationMethodEnum} depreciationMethod
 */
BookDepreciationSetting.prototype['depreciationMethod'] = undefined;

/**
 * The rate of depreciation (e.g. 0.05)
 * @member {Number} depreciationRate
 */
BookDepreciationSetting.prototype['depreciationRate'] = undefined;

/**
 * Effective life of the asset in years (e.g. 5)
 * @member {Number} effectiveLifeYears
 */
BookDepreciationSetting.prototype['effectiveLifeYears'] = undefined;





/**
 * Allowed values for the <code>averagingMethod</code> property.
 * @enum {String}
 * @readonly
 */
BookDepreciationSetting['AveragingMethodEnum'] = {

    /**
     * value: "FullMonth"
     * @const
     */
    "FullMonth": "FullMonth",

    /**
     * value: "ActualDays"
     * @const
     */
    "ActualDays": "ActualDays"
};


/**
 * Allowed values for the <code>depreciationCalculationMethod</code> property.
 * @enum {String}
 * @readonly
 */
BookDepreciationSetting['DepreciationCalculationMethodEnum'] = {

    /**
     * value: "Rate"
     * @const
     */
    "Rate": "Rate",

    /**
     * value: "Life"
     * @const
     */
    "Life": "Life",

    /**
     * value: "None"
     * @const
     */
    "None": "None"
};


/**
 * Allowed values for the <code>depreciationMethod</code> property.
 * @enum {String}
 * @readonly
 */
BookDepreciationSetting['DepreciationMethodEnum'] = {

    /**
     * value: "NoDepreciation"
     * @const
     */
    "NoDepreciation": "NoDepreciation",

    /**
     * value: "StraightLine"
     * @const
     */
    "StraightLine": "StraightLine",

    /**
     * value: "DiminishingValue100"
     * @const
     */
    "DiminishingValue100": "DiminishingValue100",

    /**
     * value: "DiminishingValue150"
     * @const
     */
    "DiminishingValue150": "DiminishingValue150",

    /**
     * value: "DiminishingValue200"
     * @const
     */
    "DiminishingValue200": "DiminishingValue200",

    /**
     * value: "FullDepreciation"
     * @const
     */
    "FullDepreciation": "FullDepreciation"
};



export default BookDepreciationSetting;

