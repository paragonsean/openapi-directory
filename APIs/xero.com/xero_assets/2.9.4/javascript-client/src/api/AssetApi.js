/**
 * Xero Assets API
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Asset from '../model/Asset';
import AssetStatusQueryParam from '../model/AssetStatusQueryParam';
import AssetType from '../model/AssetType';
import Assets from '../model/Assets';
import Setting from '../model/Setting';

/**
* Asset service.
* @module api/AssetApi
* @version 2.9.4
*/
export default class AssetApi {

    /**
    * Constructs a new AssetApi. 
    * @alias module:api/AssetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAsset operation.
     * @callback module:api/AssetApi~createAssetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Asset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a fixed asset
     * Adds an asset to the system
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/Asset} asset Fixed asset you are creating
     * @param {module:api/AssetApi~createAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Asset}
     */
    createAsset(xeroTenantId, asset, callback) {
      let postBody = asset;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createAsset");
      }
      // verify the required parameter 'asset' is set
      if (asset === undefined || asset === null) {
        throw new Error("Missing the required parameter 'asset' when calling createAsset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Asset;
      return this.apiClient.callApi(
        '/Assets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAssetType operation.
     * @callback module:api/AssetApi~createAssetTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a fixed asset type
     * Adds an fixed asset type to the system
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {module:model/AssetType} [assetType] Asset type to add
     * @param {module:api/AssetApi~createAssetTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetType}
     */
    createAssetType(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = opts['assetType'];
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createAssetType");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssetType;
      return this.apiClient.callApi(
        '/AssetTypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssetById operation.
     * @callback module:api/AssetApi~getAssetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Asset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves fixed asset by id
     * By passing in the appropriate asset id, you can search for a specific fixed asset in the system 
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} id fixed asset id for single object
     * @param {module:api/AssetApi~getAssetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Asset}
     */
    getAssetById(xeroTenantId, id, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getAssetById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAssetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Asset;
      return this.apiClient.callApi(
        '/Assets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssetSettings operation.
     * @callback module:api/AssetApi~getAssetSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Setting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches fixed asset settings
     * By passing in the appropriate options, you can search for available fixed asset types in the system
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:api/AssetApi~getAssetSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Setting}
     */
    getAssetSettings(xeroTenantId, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getAssetSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Setting;
      return this.apiClient.callApi(
        '/Settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssetTypes operation.
     * @callback module:api/AssetApi~getAssetTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssetType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches fixed asset types
     * By passing in the appropriate options, you can search for available fixed asset types in the system
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:api/AssetApi~getAssetTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssetType>}
     */
    getAssetTypes(xeroTenantId, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getAssetTypes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssetType];
      return this.apiClient.callApi(
        '/AssetTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssets operation.
     * @callback module:api/AssetApi~getAssetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Assets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches fixed asset
     * By passing in the appropriate options, you can search for available fixed asset in the system
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/AssetStatusQueryParam} status Required when retrieving a collection of assets. See Asset Status Codes
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Results are paged. This specifies which page of the results to return. The default page is 1.
     * @param {Number} [pageSize] The number of records returned per page. By default the number of records returned is 10.
     * @param {module:model/String} [orderBy] Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice.
     * @param {module:model/String} [sortDirection] ASC or DESC
     * @param {String} [filterBy] A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields.
     * @param {module:api/AssetApi~getAssetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Assets}
     */
    getAssets(xeroTenantId, status, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getAssets");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling getAssets");
      }

      let pathParams = {
      };
      let queryParams = {
        'status': status,
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'orderBy': opts['orderBy'],
        'sortDirection': opts['sortDirection'],
        'filterBy': opts['filterBy']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Assets;
      return this.apiClient.callApi(
        '/Assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
