/*
 * Xero Assets API
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Asset;
import org.openapitools.client.model.AssetStatusQueryParam;
import org.openapitools.client.model.AssetType;
import org.openapitools.client.model.Assets;
import org.openapitools.client.model.Setting;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAsset
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param asset Fixed asset you are creating (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> return single object - create new asset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetCall(String xeroTenantId, Asset asset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = asset;

        // create path and map variables
        String localVarPath = "/Assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAssetValidateBeforeCall(String xeroTenantId, Asset asset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createAsset(Async)");
        }

        // verify the required parameter 'asset' is set
        if (asset == null) {
            throw new ApiException("Missing the required parameter 'asset' when calling createAsset(Async)");
        }

        return createAssetCall(xeroTenantId, asset, _callback);

    }

    /**
     * adds a fixed asset
     * Adds an asset to the system
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param asset Fixed asset you are creating (required)
     * @return Asset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> return single object - create new asset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public Asset createAsset(String xeroTenantId, Asset asset) throws ApiException {
        ApiResponse<Asset> localVarResp = createAssetWithHttpInfo(xeroTenantId, asset);
        return localVarResp.getData();
    }

    /**
     * adds a fixed asset
     * Adds an asset to the system
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param asset Fixed asset you are creating (required)
     * @return ApiResponse&lt;Asset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> return single object - create new asset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Asset> createAssetWithHttpInfo(String xeroTenantId, Asset asset) throws ApiException {
        okhttp3.Call localVarCall = createAssetValidateBeforeCall(xeroTenantId, asset, null);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * adds a fixed asset (asynchronously)
     * Adds an asset to the system
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param asset Fixed asset you are creating (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> return single object - create new asset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetAsync(String xeroTenantId, Asset asset, final ApiCallback<Asset> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAssetValidateBeforeCall(xeroTenantId, asset, _callback);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAssetType
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param assetType Asset type to add (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> results single object -  created fixed type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> a type already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetTypeCall(String xeroTenantId, AssetType assetType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetType;

        // create path and map variables
        String localVarPath = "/AssetTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAssetTypeValidateBeforeCall(String xeroTenantId, AssetType assetType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createAssetType(Async)");
        }

        return createAssetTypeCall(xeroTenantId, assetType, _callback);

    }

    /**
     * adds a fixed asset type
     * Adds an fixed asset type to the system
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param assetType Asset type to add (optional)
     * @return AssetType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> results single object -  created fixed type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> a type already exists </td><td>  -  </td></tr>
     </table>
     */
    public AssetType createAssetType(String xeroTenantId, AssetType assetType) throws ApiException {
        ApiResponse<AssetType> localVarResp = createAssetTypeWithHttpInfo(xeroTenantId, assetType);
        return localVarResp.getData();
    }

    /**
     * adds a fixed asset type
     * Adds an fixed asset type to the system
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param assetType Asset type to add (optional)
     * @return ApiResponse&lt;AssetType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> results single object -  created fixed type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> a type already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetType> createAssetTypeWithHttpInfo(String xeroTenantId, AssetType assetType) throws ApiException {
        okhttp3.Call localVarCall = createAssetTypeValidateBeforeCall(xeroTenantId, assetType, null);
        Type localVarReturnType = new TypeToken<AssetType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * adds a fixed asset type (asynchronously)
     * Adds an fixed asset type to the system
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param assetType Asset type to add (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> results single object -  created fixed type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> a type already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetTypeAsync(String xeroTenantId, AssetType assetType, final ApiCallback<AssetType> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAssetTypeValidateBeforeCall(xeroTenantId, assetType, _callback);
        Type localVarReturnType = new TypeToken<AssetType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssetById
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param id fixed asset id for single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetByIdCall(String xeroTenantId, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Assets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetByIdValidateBeforeCall(String xeroTenantId, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getAssetById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAssetById(Async)");
        }

        return getAssetByIdCall(xeroTenantId, id, _callback);

    }

    /**
     * Retrieves fixed asset by id
     * By passing in the appropriate asset id, you can search for a specific fixed asset in the system 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param id fixed asset id for single object (required)
     * @return Asset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public Asset getAssetById(String xeroTenantId, UUID id) throws ApiException {
        ApiResponse<Asset> localVarResp = getAssetByIdWithHttpInfo(xeroTenantId, id);
        return localVarResp.getData();
    }

    /**
     * Retrieves fixed asset by id
     * By passing in the appropriate asset id, you can search for a specific fixed asset in the system 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param id fixed asset id for single object (required)
     * @return ApiResponse&lt;Asset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Asset> getAssetByIdWithHttpInfo(String xeroTenantId, UUID id) throws ApiException {
        okhttp3.Call localVarCall = getAssetByIdValidateBeforeCall(xeroTenantId, id, null);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves fixed asset by id (asynchronously)
     * By passing in the appropriate asset id, you can search for a specific fixed asset in the system 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param id fixed asset id for single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetByIdAsync(String xeroTenantId, UUID id, final ApiCallback<Asset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetByIdValidateBeforeCall(xeroTenantId, id, _callback);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssetSettings
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetSettingsCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetSettingsValidateBeforeCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getAssetSettings(Async)");
        }

        return getAssetSettingsCall(xeroTenantId, _callback);

    }

    /**
     * searches fixed asset settings
     * By passing in the appropriate options, you can search for available fixed asset types in the system
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return Setting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public Setting getAssetSettings(String xeroTenantId) throws ApiException {
        ApiResponse<Setting> localVarResp = getAssetSettingsWithHttpInfo(xeroTenantId);
        return localVarResp.getData();
    }

    /**
     * searches fixed asset settings
     * By passing in the appropriate options, you can search for available fixed asset types in the system
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return ApiResponse&lt;Setting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Setting> getAssetSettingsWithHttpInfo(String xeroTenantId) throws ApiException {
        okhttp3.Call localVarCall = getAssetSettingsValidateBeforeCall(xeroTenantId, null);
        Type localVarReturnType = new TypeToken<Setting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * searches fixed asset settings (asynchronously)
     * By passing in the appropriate options, you can search for available fixed asset types in the system
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetSettingsAsync(String xeroTenantId, final ApiCallback<Setting> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetSettingsValidateBeforeCall(xeroTenantId, _callback);
        Type localVarReturnType = new TypeToken<Setting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssetTypes
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetTypesCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AssetTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetTypesValidateBeforeCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getAssetTypes(Async)");
        }

        return getAssetTypesCall(xeroTenantId, _callback);

    }

    /**
     * searches fixed asset types
     * By passing in the appropriate options, you can search for available fixed asset types in the system
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return List&lt;AssetType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public List<AssetType> getAssetTypes(String xeroTenantId) throws ApiException {
        ApiResponse<List<AssetType>> localVarResp = getAssetTypesWithHttpInfo(xeroTenantId);
        return localVarResp.getData();
    }

    /**
     * searches fixed asset types
     * By passing in the appropriate options, you can search for available fixed asset types in the system
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return ApiResponse&lt;List&lt;AssetType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssetType>> getAssetTypesWithHttpInfo(String xeroTenantId) throws ApiException {
        okhttp3.Call localVarCall = getAssetTypesValidateBeforeCall(xeroTenantId, null);
        Type localVarReturnType = new TypeToken<List<AssetType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * searches fixed asset types (asynchronously)
     * By passing in the appropriate options, you can search for available fixed asset types in the system
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetTypesAsync(String xeroTenantId, final ApiCallback<List<AssetType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetTypesValidateBeforeCall(xeroTenantId, _callback);
        Type localVarReturnType = new TypeToken<List<AssetType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssets
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param status Required when retrieving a collection of assets. See Asset Status Codes (required)
     * @param page Results are paged. This specifies which page of the results to return. The default page is 1. (optional)
     * @param pageSize The number of records returned per page. By default the number of records returned is 10. (optional)
     * @param orderBy Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice. (optional)
     * @param sortDirection ASC or DESC (optional)
     * @param filterBy A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetsCall(String xeroTenantId, AssetStatusQueryParam status, Integer page, Integer pageSize, String orderBy, String sortDirection, String filterBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDirection", sortDirection));
        }

        if (filterBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterBy", filterBy));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetsValidateBeforeCall(String xeroTenantId, AssetStatusQueryParam status, Integer page, Integer pageSize, String orderBy, String sortDirection, String filterBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getAssets(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling getAssets(Async)");
        }

        return getAssetsCall(xeroTenantId, status, page, pageSize, orderBy, sortDirection, filterBy, _callback);

    }

    /**
     * searches fixed asset
     * By passing in the appropriate options, you can search for available fixed asset in the system
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param status Required when retrieving a collection of assets. See Asset Status Codes (required)
     * @param page Results are paged. This specifies which page of the results to return. The default page is 1. (optional)
     * @param pageSize The number of records returned per page. By default the number of records returned is 10. (optional)
     * @param orderBy Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice. (optional)
     * @param sortDirection ASC or DESC (optional)
     * @param filterBy A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields. (optional)
     * @return Assets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public Assets getAssets(String xeroTenantId, AssetStatusQueryParam status, Integer page, Integer pageSize, String orderBy, String sortDirection, String filterBy) throws ApiException {
        ApiResponse<Assets> localVarResp = getAssetsWithHttpInfo(xeroTenantId, status, page, pageSize, orderBy, sortDirection, filterBy);
        return localVarResp.getData();
    }

    /**
     * searches fixed asset
     * By passing in the appropriate options, you can search for available fixed asset in the system
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param status Required when retrieving a collection of assets. See Asset Status Codes (required)
     * @param page Results are paged. This specifies which page of the results to return. The default page is 1. (optional)
     * @param pageSize The number of records returned per page. By default the number of records returned is 10. (optional)
     * @param orderBy Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice. (optional)
     * @param sortDirection ASC or DESC (optional)
     * @param filterBy A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields. (optional)
     * @return ApiResponse&lt;Assets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assets> getAssetsWithHttpInfo(String xeroTenantId, AssetStatusQueryParam status, Integer page, Integer pageSize, String orderBy, String sortDirection, String filterBy) throws ApiException {
        okhttp3.Call localVarCall = getAssetsValidateBeforeCall(xeroTenantId, status, page, pageSize, orderBy, sortDirection, filterBy, null);
        Type localVarReturnType = new TypeToken<Assets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * searches fixed asset (asynchronously)
     * By passing in the appropriate options, you can search for available fixed asset in the system
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param status Required when retrieving a collection of assets. See Asset Status Codes (required)
     * @param page Results are paged. This specifies which page of the results to return. The default page is 1. (optional)
     * @param pageSize The number of records returned per page. By default the number of records returned is 10. (optional)
     * @param orderBy Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice. (optional)
     * @param sortDirection ASC or DESC (optional)
     * @param filterBy A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetsAsync(String xeroTenantId, AssetStatusQueryParam status, Integer page, Integer pageSize, String orderBy, String sortDirection, String filterBy, final ApiCallback<Assets> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetsValidateBeforeCall(xeroTenantId, status, page, pageSize, orderBy, sortDirection, filterBy, _callback);
        Type localVarReturnType = new TypeToken<Assets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
