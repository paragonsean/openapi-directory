/*
 * Xero Assets API
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BookDepreciationDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:35.289965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BookDepreciationDetail {
  public static final String SERIALIZED_NAME_COST_LIMIT = "costLimit";
  @SerializedName(SERIALIZED_NAME_COST_LIMIT)
  private Double costLimit;

  public static final String SERIALIZED_NAME_CURRENT_ACCUM_DEPRECIATION_AMOUNT = "currentAccumDepreciationAmount";
  @SerializedName(SERIALIZED_NAME_CURRENT_ACCUM_DEPRECIATION_AMOUNT)
  private Double currentAccumDepreciationAmount;

  public static final String SERIALIZED_NAME_CURRENT_CAPITAL_GAIN = "currentCapitalGain";
  @SerializedName(SERIALIZED_NAME_CURRENT_CAPITAL_GAIN)
  private Double currentCapitalGain;

  public static final String SERIALIZED_NAME_CURRENT_GAIN_LOSS = "currentGainLoss";
  @SerializedName(SERIALIZED_NAME_CURRENT_GAIN_LOSS)
  private Double currentGainLoss;

  public static final String SERIALIZED_NAME_DEPRECIATION_START_DATE = "depreciationStartDate";
  @SerializedName(SERIALIZED_NAME_DEPRECIATION_START_DATE)
  private LocalDate depreciationStartDate;

  public static final String SERIALIZED_NAME_PRIOR_ACCUM_DEPRECIATION_AMOUNT = "priorAccumDepreciationAmount";
  @SerializedName(SERIALIZED_NAME_PRIOR_ACCUM_DEPRECIATION_AMOUNT)
  private Double priorAccumDepreciationAmount;

  public static final String SERIALIZED_NAME_RESIDUAL_VALUE = "residualValue";
  @SerializedName(SERIALIZED_NAME_RESIDUAL_VALUE)
  private Double residualValue;

  public BookDepreciationDetail() {
  }

  public BookDepreciationDetail costLimit(Double costLimit) {
    this.costLimit = costLimit;
    return this;
  }

  /**
   * The value of the asset you want to depreciate, if this is less than the cost of the asset.
   * @return costLimit
   */
  @javax.annotation.Nullable
  public Double getCostLimit() {
    return costLimit;
  }

  public void setCostLimit(Double costLimit) {
    this.costLimit = costLimit;
  }


  public BookDepreciationDetail currentAccumDepreciationAmount(Double currentAccumDepreciationAmount) {
    this.currentAccumDepreciationAmount = currentAccumDepreciationAmount;
    return this;
  }

  /**
   * All depreciation occurring in the current financial year.
   * @return currentAccumDepreciationAmount
   */
  @javax.annotation.Nullable
  public Double getCurrentAccumDepreciationAmount() {
    return currentAccumDepreciationAmount;
  }

  public void setCurrentAccumDepreciationAmount(Double currentAccumDepreciationAmount) {
    this.currentAccumDepreciationAmount = currentAccumDepreciationAmount;
  }


  public BookDepreciationDetail currentCapitalGain(Double currentCapitalGain) {
    this.currentCapitalGain = currentCapitalGain;
    return this;
  }

  /**
   * When an asset is disposed, this will be the sell price minus the purchase price if a profit was made.
   * @return currentCapitalGain
   */
  @javax.annotation.Nullable
  public Double getCurrentCapitalGain() {
    return currentCapitalGain;
  }

  public void setCurrentCapitalGain(Double currentCapitalGain) {
    this.currentCapitalGain = currentCapitalGain;
  }


  public BookDepreciationDetail currentGainLoss(Double currentGainLoss) {
    this.currentGainLoss = currentGainLoss;
    return this;
  }

  /**
   * When an asset is disposed, this will be the lowest one of sell price or purchase price, minus the current book value.
   * @return currentGainLoss
   */
  @javax.annotation.Nullable
  public Double getCurrentGainLoss() {
    return currentGainLoss;
  }

  public void setCurrentGainLoss(Double currentGainLoss) {
    this.currentGainLoss = currentGainLoss;
  }


  public BookDepreciationDetail depreciationStartDate(LocalDate depreciationStartDate) {
    this.depreciationStartDate = depreciationStartDate;
    return this;
  }

  /**
   * YYYY-MM-DD
   * @return depreciationStartDate
   */
  @javax.annotation.Nullable
  public LocalDate getDepreciationStartDate() {
    return depreciationStartDate;
  }

  public void setDepreciationStartDate(LocalDate depreciationStartDate) {
    this.depreciationStartDate = depreciationStartDate;
  }


  public BookDepreciationDetail priorAccumDepreciationAmount(Double priorAccumDepreciationAmount) {
    this.priorAccumDepreciationAmount = priorAccumDepreciationAmount;
    return this;
  }

  /**
   * All depreciation prior to the current financial year.
   * @return priorAccumDepreciationAmount
   */
  @javax.annotation.Nullable
  public Double getPriorAccumDepreciationAmount() {
    return priorAccumDepreciationAmount;
  }

  public void setPriorAccumDepreciationAmount(Double priorAccumDepreciationAmount) {
    this.priorAccumDepreciationAmount = priorAccumDepreciationAmount;
  }


  public BookDepreciationDetail residualValue(Double residualValue) {
    this.residualValue = residualValue;
    return this;
  }

  /**
   * The value of the asset remaining when you&#39;ve fully depreciated it.
   * @return residualValue
   */
  @javax.annotation.Nullable
  public Double getResidualValue() {
    return residualValue;
  }

  public void setResidualValue(Double residualValue) {
    this.residualValue = residualValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BookDepreciationDetail bookDepreciationDetail = (BookDepreciationDetail) o;
    return Objects.equals(this.costLimit, bookDepreciationDetail.costLimit) &&
        Objects.equals(this.currentAccumDepreciationAmount, bookDepreciationDetail.currentAccumDepreciationAmount) &&
        Objects.equals(this.currentCapitalGain, bookDepreciationDetail.currentCapitalGain) &&
        Objects.equals(this.currentGainLoss, bookDepreciationDetail.currentGainLoss) &&
        Objects.equals(this.depreciationStartDate, bookDepreciationDetail.depreciationStartDate) &&
        Objects.equals(this.priorAccumDepreciationAmount, bookDepreciationDetail.priorAccumDepreciationAmount) &&
        Objects.equals(this.residualValue, bookDepreciationDetail.residualValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costLimit, currentAccumDepreciationAmount, currentCapitalGain, currentGainLoss, depreciationStartDate, priorAccumDepreciationAmount, residualValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BookDepreciationDetail {\n");
    sb.append("    costLimit: ").append(toIndentedString(costLimit)).append("\n");
    sb.append("    currentAccumDepreciationAmount: ").append(toIndentedString(currentAccumDepreciationAmount)).append("\n");
    sb.append("    currentCapitalGain: ").append(toIndentedString(currentCapitalGain)).append("\n");
    sb.append("    currentGainLoss: ").append(toIndentedString(currentGainLoss)).append("\n");
    sb.append("    depreciationStartDate: ").append(toIndentedString(depreciationStartDate)).append("\n");
    sb.append("    priorAccumDepreciationAmount: ").append(toIndentedString(priorAccumDepreciationAmount)).append("\n");
    sb.append("    residualValue: ").append(toIndentedString(residualValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("costLimit");
    openapiFields.add("currentAccumDepreciationAmount");
    openapiFields.add("currentCapitalGain");
    openapiFields.add("currentGainLoss");
    openapiFields.add("depreciationStartDate");
    openapiFields.add("priorAccumDepreciationAmount");
    openapiFields.add("residualValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BookDepreciationDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BookDepreciationDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BookDepreciationDetail is not found in the empty JSON string", BookDepreciationDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BookDepreciationDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BookDepreciationDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BookDepreciationDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BookDepreciationDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BookDepreciationDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BookDepreciationDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<BookDepreciationDetail>() {
           @Override
           public void write(JsonWriter out, BookDepreciationDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BookDepreciationDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BookDepreciationDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BookDepreciationDetail
   * @throws IOException if the JSON string is invalid with respect to BookDepreciationDetail
   */
  public static BookDepreciationDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BookDepreciationDetail.class);
  }

  /**
   * Convert an instance of BookDepreciationDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

