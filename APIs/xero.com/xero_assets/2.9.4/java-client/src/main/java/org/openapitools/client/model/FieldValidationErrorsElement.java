/*
 * Xero Assets API
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FieldValidationErrorsElement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:35.289965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FieldValidationErrorsElement {
  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private String detail;

  public static final String SERIALIZED_NAME_FIELD_NAME = "fieldName";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private String fieldName;

  public static final String SERIALIZED_NAME_LOCALISED_MESSAGE = "localisedMessage";
  @SerializedName(SERIALIZED_NAME_LOCALISED_MESSAGE)
  private String localisedMessage;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VALUE_PROVIDED = "valueProvided";
  @SerializedName(SERIALIZED_NAME_VALUE_PROVIDED)
  private String valueProvided;

  public FieldValidationErrorsElement() {
  }

  public FieldValidationErrorsElement detail(String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * Detail of the field validation error
   * @return detail
   */
  @javax.annotation.Nullable
  public String getDetail() {
    return detail;
  }

  public void setDetail(String detail) {
    this.detail = detail;
  }


  public FieldValidationErrorsElement fieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  /**
   * The field name of the erroneous field
   * @return fieldName
   */
  @javax.annotation.Nullable
  public String getFieldName() {
    return fieldName;
  }

  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }


  public FieldValidationErrorsElement localisedMessage(String localisedMessage) {
    this.localisedMessage = localisedMessage;
    return this;
  }

  /**
   * Explanation of the field validation error
   * @return localisedMessage
   */
  @javax.annotation.Nullable
  public String getLocalisedMessage() {
    return localisedMessage;
  }

  public void setLocalisedMessage(String localisedMessage) {
    this.localisedMessage = localisedMessage;
  }


  public FieldValidationErrorsElement title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the field validation error
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public FieldValidationErrorsElement type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Internal type of the field validation error message
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public FieldValidationErrorsElement valueProvided(String valueProvided) {
    this.valueProvided = valueProvided;
    return this;
  }

  /**
   * The provided value
   * @return valueProvided
   */
  @javax.annotation.Nullable
  public String getValueProvided() {
    return valueProvided;
  }

  public void setValueProvided(String valueProvided) {
    this.valueProvided = valueProvided;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldValidationErrorsElement fieldValidationErrorsElement = (FieldValidationErrorsElement) o;
    return Objects.equals(this.detail, fieldValidationErrorsElement.detail) &&
        Objects.equals(this.fieldName, fieldValidationErrorsElement.fieldName) &&
        Objects.equals(this.localisedMessage, fieldValidationErrorsElement.localisedMessage) &&
        Objects.equals(this.title, fieldValidationErrorsElement.title) &&
        Objects.equals(this.type, fieldValidationErrorsElement.type) &&
        Objects.equals(this.valueProvided, fieldValidationErrorsElement.valueProvided);
  }

  @Override
  public int hashCode() {
    return Objects.hash(detail, fieldName, localisedMessage, title, type, valueProvided);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldValidationErrorsElement {\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    localisedMessage: ").append(toIndentedString(localisedMessage)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    valueProvided: ").append(toIndentedString(valueProvided)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("detail");
    openapiFields.add("fieldName");
    openapiFields.add("localisedMessage");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("valueProvided");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FieldValidationErrorsElement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldValidationErrorsElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldValidationErrorsElement is not found in the empty JSON string", FieldValidationErrorsElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FieldValidationErrorsElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldValidationErrorsElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("detail") != null && !jsonObj.get("detail").isJsonNull()) && !jsonObj.get("detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detail").toString()));
      }
      if ((jsonObj.get("fieldName") != null && !jsonObj.get("fieldName").isJsonNull()) && !jsonObj.get("fieldName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldName").toString()));
      }
      if ((jsonObj.get("localisedMessage") != null && !jsonObj.get("localisedMessage").isJsonNull()) && !jsonObj.get("localisedMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localisedMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localisedMessage").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("valueProvided") != null && !jsonObj.get("valueProvided").isJsonNull()) && !jsonObj.get("valueProvided").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueProvided` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueProvided").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldValidationErrorsElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldValidationErrorsElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldValidationErrorsElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldValidationErrorsElement.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldValidationErrorsElement>() {
           @Override
           public void write(JsonWriter out, FieldValidationErrorsElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldValidationErrorsElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FieldValidationErrorsElement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FieldValidationErrorsElement
   * @throws IOException if the JSON string is invalid with respect to FieldValidationErrorsElement
   */
  public static FieldValidationErrorsElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldValidationErrorsElement.class);
  }

  /**
   * Convert an instance of FieldValidationErrorsElement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

