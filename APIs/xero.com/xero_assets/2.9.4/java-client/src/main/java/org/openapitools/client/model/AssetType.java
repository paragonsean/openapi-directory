/*
 * Xero Assets API
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.BookDepreciationSetting;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssetType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:35.289965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssetType {
  public static final String SERIALIZED_NAME_ACCUMULATED_DEPRECIATION_ACCOUNT_ID = "accumulatedDepreciationAccountId";
  @SerializedName(SERIALIZED_NAME_ACCUMULATED_DEPRECIATION_ACCOUNT_ID)
  private UUID accumulatedDepreciationAccountId;

  public static final String SERIALIZED_NAME_ASSET_TYPE_ID = "assetTypeId";
  @SerializedName(SERIALIZED_NAME_ASSET_TYPE_ID)
  private UUID assetTypeId;

  public static final String SERIALIZED_NAME_ASSET_TYPE_NAME = "assetTypeName";
  @SerializedName(SERIALIZED_NAME_ASSET_TYPE_NAME)
  private String assetTypeName;

  public static final String SERIALIZED_NAME_BOOK_DEPRECIATION_SETTING = "bookDepreciationSetting";
  @SerializedName(SERIALIZED_NAME_BOOK_DEPRECIATION_SETTING)
  private BookDepreciationSetting bookDepreciationSetting;

  public static final String SERIALIZED_NAME_DEPRECIATION_EXPENSE_ACCOUNT_ID = "depreciationExpenseAccountId";
  @SerializedName(SERIALIZED_NAME_DEPRECIATION_EXPENSE_ACCOUNT_ID)
  private UUID depreciationExpenseAccountId;

  public static final String SERIALIZED_NAME_FIXED_ASSET_ACCOUNT_ID = "fixedAssetAccountId";
  @SerializedName(SERIALIZED_NAME_FIXED_ASSET_ACCOUNT_ID)
  private UUID fixedAssetAccountId;

  public static final String SERIALIZED_NAME_LOCKS = "locks";
  @SerializedName(SERIALIZED_NAME_LOCKS)
  private Integer locks;

  public AssetType() {
  }

  public AssetType accumulatedDepreciationAccountId(UUID accumulatedDepreciationAccountId) {
    this.accumulatedDepreciationAccountId = accumulatedDepreciationAccountId;
    return this;
  }

  /**
   * The account for accumulated depreciation of fixed assets of this type
   * @return accumulatedDepreciationAccountId
   */
  @javax.annotation.Nullable
  public UUID getAccumulatedDepreciationAccountId() {
    return accumulatedDepreciationAccountId;
  }

  public void setAccumulatedDepreciationAccountId(UUID accumulatedDepreciationAccountId) {
    this.accumulatedDepreciationAccountId = accumulatedDepreciationAccountId;
  }


  public AssetType assetTypeId(UUID assetTypeId) {
    this.assetTypeId = assetTypeId;
    return this;
  }

  /**
   * Xero generated unique identifier for asset types
   * @return assetTypeId
   */
  @javax.annotation.Nullable
  public UUID getAssetTypeId() {
    return assetTypeId;
  }

  public void setAssetTypeId(UUID assetTypeId) {
    this.assetTypeId = assetTypeId;
  }


  public AssetType assetTypeName(String assetTypeName) {
    this.assetTypeName = assetTypeName;
    return this;
  }

  /**
   * The name of the asset type
   * @return assetTypeName
   */
  @javax.annotation.Nonnull
  public String getAssetTypeName() {
    return assetTypeName;
  }

  public void setAssetTypeName(String assetTypeName) {
    this.assetTypeName = assetTypeName;
  }


  public AssetType bookDepreciationSetting(BookDepreciationSetting bookDepreciationSetting) {
    this.bookDepreciationSetting = bookDepreciationSetting;
    return this;
  }

  /**
   * Get bookDepreciationSetting
   * @return bookDepreciationSetting
   */
  @javax.annotation.Nonnull
  public BookDepreciationSetting getBookDepreciationSetting() {
    return bookDepreciationSetting;
  }

  public void setBookDepreciationSetting(BookDepreciationSetting bookDepreciationSetting) {
    this.bookDepreciationSetting = bookDepreciationSetting;
  }


  public AssetType depreciationExpenseAccountId(UUID depreciationExpenseAccountId) {
    this.depreciationExpenseAccountId = depreciationExpenseAccountId;
    return this;
  }

  /**
   * The expense account for the depreciation of fixed assets of this type
   * @return depreciationExpenseAccountId
   */
  @javax.annotation.Nullable
  public UUID getDepreciationExpenseAccountId() {
    return depreciationExpenseAccountId;
  }

  public void setDepreciationExpenseAccountId(UUID depreciationExpenseAccountId) {
    this.depreciationExpenseAccountId = depreciationExpenseAccountId;
  }


  public AssetType fixedAssetAccountId(UUID fixedAssetAccountId) {
    this.fixedAssetAccountId = fixedAssetAccountId;
    return this;
  }

  /**
   * The asset account for fixed assets of this type
   * @return fixedAssetAccountId
   */
  @javax.annotation.Nullable
  public UUID getFixedAssetAccountId() {
    return fixedAssetAccountId;
  }

  public void setFixedAssetAccountId(UUID fixedAssetAccountId) {
    this.fixedAssetAccountId = fixedAssetAccountId;
  }


  public AssetType locks(Integer locks) {
    this.locks = locks;
    return this;
  }

  /**
   * All asset types that have accumulated depreciation for any assets that use them are deemed ‘locked’ and cannot be removed.
   * @return locks
   */
  @javax.annotation.Nullable
  public Integer getLocks() {
    return locks;
  }

  public void setLocks(Integer locks) {
    this.locks = locks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetType assetType = (AssetType) o;
    return Objects.equals(this.accumulatedDepreciationAccountId, assetType.accumulatedDepreciationAccountId) &&
        Objects.equals(this.assetTypeId, assetType.assetTypeId) &&
        Objects.equals(this.assetTypeName, assetType.assetTypeName) &&
        Objects.equals(this.bookDepreciationSetting, assetType.bookDepreciationSetting) &&
        Objects.equals(this.depreciationExpenseAccountId, assetType.depreciationExpenseAccountId) &&
        Objects.equals(this.fixedAssetAccountId, assetType.fixedAssetAccountId) &&
        Objects.equals(this.locks, assetType.locks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accumulatedDepreciationAccountId, assetTypeId, assetTypeName, bookDepreciationSetting, depreciationExpenseAccountId, fixedAssetAccountId, locks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetType {\n");
    sb.append("    accumulatedDepreciationAccountId: ").append(toIndentedString(accumulatedDepreciationAccountId)).append("\n");
    sb.append("    assetTypeId: ").append(toIndentedString(assetTypeId)).append("\n");
    sb.append("    assetTypeName: ").append(toIndentedString(assetTypeName)).append("\n");
    sb.append("    bookDepreciationSetting: ").append(toIndentedString(bookDepreciationSetting)).append("\n");
    sb.append("    depreciationExpenseAccountId: ").append(toIndentedString(depreciationExpenseAccountId)).append("\n");
    sb.append("    fixedAssetAccountId: ").append(toIndentedString(fixedAssetAccountId)).append("\n");
    sb.append("    locks: ").append(toIndentedString(locks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accumulatedDepreciationAccountId");
    openapiFields.add("assetTypeId");
    openapiFields.add("assetTypeName");
    openapiFields.add("bookDepreciationSetting");
    openapiFields.add("depreciationExpenseAccountId");
    openapiFields.add("fixedAssetAccountId");
    openapiFields.add("locks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("assetTypeName");
    openapiRequiredFields.add("bookDepreciationSetting");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetType is not found in the empty JSON string", AssetType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssetType.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accumulatedDepreciationAccountId") != null && !jsonObj.get("accumulatedDepreciationAccountId").isJsonNull()) && !jsonObj.get("accumulatedDepreciationAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accumulatedDepreciationAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accumulatedDepreciationAccountId").toString()));
      }
      if ((jsonObj.get("assetTypeId") != null && !jsonObj.get("assetTypeId").isJsonNull()) && !jsonObj.get("assetTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetTypeId").toString()));
      }
      if (!jsonObj.get("assetTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetTypeName").toString()));
      }
      // validate the required field `bookDepreciationSetting`
      BookDepreciationSetting.validateJsonElement(jsonObj.get("bookDepreciationSetting"));
      if ((jsonObj.get("depreciationExpenseAccountId") != null && !jsonObj.get("depreciationExpenseAccountId").isJsonNull()) && !jsonObj.get("depreciationExpenseAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `depreciationExpenseAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("depreciationExpenseAccountId").toString()));
      }
      if ((jsonObj.get("fixedAssetAccountId") != null && !jsonObj.get("fixedAssetAccountId").isJsonNull()) && !jsonObj.get("fixedAssetAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixedAssetAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixedAssetAccountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetType.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetType>() {
           @Override
           public void write(JsonWriter out, AssetType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetType
   * @throws IOException if the JSON string is invalid with respect to AssetType
   */
  public static AssetType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetType.class);
  }

  /**
   * Convert an instance of AssetType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

