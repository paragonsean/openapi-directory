/*
 * Xero Assets API
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BookDepreciationSetting
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:35.289965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BookDepreciationSetting {
  /**
   * The method of averaging applied to this asset. See Averaging Methods
   */
  @JsonAdapter(AveragingMethodEnum.Adapter.class)
  public enum AveragingMethodEnum {
    FULL_MONTH("FullMonth"),
    
    ACTUAL_DAYS("ActualDays");

    private String value;

    AveragingMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AveragingMethodEnum fromValue(String value) {
      for (AveragingMethodEnum b : AveragingMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AveragingMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AveragingMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AveragingMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AveragingMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AveragingMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVERAGING_METHOD = "averagingMethod";
  @SerializedName(SERIALIZED_NAME_AVERAGING_METHOD)
  private AveragingMethodEnum averagingMethod;

  public static final String SERIALIZED_NAME_BOOK_EFFECTIVE_DATE_OF_CHANGE_ID = "bookEffectiveDateOfChangeId";
  @SerializedName(SERIALIZED_NAME_BOOK_EFFECTIVE_DATE_OF_CHANGE_ID)
  private UUID bookEffectiveDateOfChangeId;

  public static final String SERIALIZED_NAME_DEPRECIABLE_OBJECT_ID = "depreciableObjectId";
  @SerializedName(SERIALIZED_NAME_DEPRECIABLE_OBJECT_ID)
  private UUID depreciableObjectId;

  public static final String SERIALIZED_NAME_DEPRECIABLE_OBJECT_TYPE = "depreciableObjectType";
  @SerializedName(SERIALIZED_NAME_DEPRECIABLE_OBJECT_TYPE)
  private String depreciableObjectType;

  /**
   * See Depreciation Calculation Methods
   */
  @JsonAdapter(DepreciationCalculationMethodEnum.Adapter.class)
  public enum DepreciationCalculationMethodEnum {
    RATE("Rate"),
    
    LIFE("Life"),
    
    NONE("None");

    private String value;

    DepreciationCalculationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DepreciationCalculationMethodEnum fromValue(String value) {
      for (DepreciationCalculationMethodEnum b : DepreciationCalculationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DepreciationCalculationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DepreciationCalculationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DepreciationCalculationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DepreciationCalculationMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DepreciationCalculationMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEPRECIATION_CALCULATION_METHOD = "depreciationCalculationMethod";
  @SerializedName(SERIALIZED_NAME_DEPRECIATION_CALCULATION_METHOD)
  private DepreciationCalculationMethodEnum depreciationCalculationMethod;

  /**
   * The method of depreciation applied to this asset. See Depreciation Methods
   */
  @JsonAdapter(DepreciationMethodEnum.Adapter.class)
  public enum DepreciationMethodEnum {
    NO_DEPRECIATION("NoDepreciation"),
    
    STRAIGHT_LINE("StraightLine"),
    
    DIMINISHING_VALUE100("DiminishingValue100"),
    
    DIMINISHING_VALUE150("DiminishingValue150"),
    
    DIMINISHING_VALUE200("DiminishingValue200"),
    
    FULL_DEPRECIATION("FullDepreciation");

    private String value;

    DepreciationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DepreciationMethodEnum fromValue(String value) {
      for (DepreciationMethodEnum b : DepreciationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DepreciationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DepreciationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DepreciationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DepreciationMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DepreciationMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEPRECIATION_METHOD = "depreciationMethod";
  @SerializedName(SERIALIZED_NAME_DEPRECIATION_METHOD)
  private DepreciationMethodEnum depreciationMethod;

  public static final String SERIALIZED_NAME_DEPRECIATION_RATE = "depreciationRate";
  @SerializedName(SERIALIZED_NAME_DEPRECIATION_RATE)
  private Double depreciationRate;

  public static final String SERIALIZED_NAME_EFFECTIVE_LIFE_YEARS = "effectiveLifeYears";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_LIFE_YEARS)
  private Integer effectiveLifeYears;

  public BookDepreciationSetting() {
  }

  public BookDepreciationSetting averagingMethod(AveragingMethodEnum averagingMethod) {
    this.averagingMethod = averagingMethod;
    return this;
  }

  /**
   * The method of averaging applied to this asset. See Averaging Methods
   * @return averagingMethod
   */
  @javax.annotation.Nullable
  public AveragingMethodEnum getAveragingMethod() {
    return averagingMethod;
  }

  public void setAveragingMethod(AveragingMethodEnum averagingMethod) {
    this.averagingMethod = averagingMethod;
  }


  public BookDepreciationSetting bookEffectiveDateOfChangeId(UUID bookEffectiveDateOfChangeId) {
    this.bookEffectiveDateOfChangeId = bookEffectiveDateOfChangeId;
    return this;
  }

  /**
   * Unique Xero identifier for the effective date change
   * @return bookEffectiveDateOfChangeId
   */
  @javax.annotation.Nullable
  public UUID getBookEffectiveDateOfChangeId() {
    return bookEffectiveDateOfChangeId;
  }

  public void setBookEffectiveDateOfChangeId(UUID bookEffectiveDateOfChangeId) {
    this.bookEffectiveDateOfChangeId = bookEffectiveDateOfChangeId;
  }


  public BookDepreciationSetting depreciableObjectId(UUID depreciableObjectId) {
    this.depreciableObjectId = depreciableObjectId;
    return this;
  }

  /**
   * Unique Xero identifier for the depreciable object
   * @return depreciableObjectId
   */
  @javax.annotation.Nullable
  public UUID getDepreciableObjectId() {
    return depreciableObjectId;
  }

  public void setDepreciableObjectId(UUID depreciableObjectId) {
    this.depreciableObjectId = depreciableObjectId;
  }


  public BookDepreciationSetting depreciableObjectType(String depreciableObjectType) {
    this.depreciableObjectType = depreciableObjectType;
    return this;
  }

  /**
   * The type of asset object
   * @return depreciableObjectType
   */
  @javax.annotation.Nullable
  public String getDepreciableObjectType() {
    return depreciableObjectType;
  }

  public void setDepreciableObjectType(String depreciableObjectType) {
    this.depreciableObjectType = depreciableObjectType;
  }


  public BookDepreciationSetting depreciationCalculationMethod(DepreciationCalculationMethodEnum depreciationCalculationMethod) {
    this.depreciationCalculationMethod = depreciationCalculationMethod;
    return this;
  }

  /**
   * See Depreciation Calculation Methods
   * @return depreciationCalculationMethod
   */
  @javax.annotation.Nullable
  public DepreciationCalculationMethodEnum getDepreciationCalculationMethod() {
    return depreciationCalculationMethod;
  }

  public void setDepreciationCalculationMethod(DepreciationCalculationMethodEnum depreciationCalculationMethod) {
    this.depreciationCalculationMethod = depreciationCalculationMethod;
  }


  public BookDepreciationSetting depreciationMethod(DepreciationMethodEnum depreciationMethod) {
    this.depreciationMethod = depreciationMethod;
    return this;
  }

  /**
   * The method of depreciation applied to this asset. See Depreciation Methods
   * @return depreciationMethod
   */
  @javax.annotation.Nullable
  public DepreciationMethodEnum getDepreciationMethod() {
    return depreciationMethod;
  }

  public void setDepreciationMethod(DepreciationMethodEnum depreciationMethod) {
    this.depreciationMethod = depreciationMethod;
  }


  public BookDepreciationSetting depreciationRate(Double depreciationRate) {
    this.depreciationRate = depreciationRate;
    return this;
  }

  /**
   * The rate of depreciation (e.g. 0.05)
   * @return depreciationRate
   */
  @javax.annotation.Nullable
  public Double getDepreciationRate() {
    return depreciationRate;
  }

  public void setDepreciationRate(Double depreciationRate) {
    this.depreciationRate = depreciationRate;
  }


  public BookDepreciationSetting effectiveLifeYears(Integer effectiveLifeYears) {
    this.effectiveLifeYears = effectiveLifeYears;
    return this;
  }

  /**
   * Effective life of the asset in years (e.g. 5)
   * @return effectiveLifeYears
   */
  @javax.annotation.Nullable
  public Integer getEffectiveLifeYears() {
    return effectiveLifeYears;
  }

  public void setEffectiveLifeYears(Integer effectiveLifeYears) {
    this.effectiveLifeYears = effectiveLifeYears;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BookDepreciationSetting bookDepreciationSetting = (BookDepreciationSetting) o;
    return Objects.equals(this.averagingMethod, bookDepreciationSetting.averagingMethod) &&
        Objects.equals(this.bookEffectiveDateOfChangeId, bookDepreciationSetting.bookEffectiveDateOfChangeId) &&
        Objects.equals(this.depreciableObjectId, bookDepreciationSetting.depreciableObjectId) &&
        Objects.equals(this.depreciableObjectType, bookDepreciationSetting.depreciableObjectType) &&
        Objects.equals(this.depreciationCalculationMethod, bookDepreciationSetting.depreciationCalculationMethod) &&
        Objects.equals(this.depreciationMethod, bookDepreciationSetting.depreciationMethod) &&
        Objects.equals(this.depreciationRate, bookDepreciationSetting.depreciationRate) &&
        Objects.equals(this.effectiveLifeYears, bookDepreciationSetting.effectiveLifeYears);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averagingMethod, bookEffectiveDateOfChangeId, depreciableObjectId, depreciableObjectType, depreciationCalculationMethod, depreciationMethod, depreciationRate, effectiveLifeYears);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BookDepreciationSetting {\n");
    sb.append("    averagingMethod: ").append(toIndentedString(averagingMethod)).append("\n");
    sb.append("    bookEffectiveDateOfChangeId: ").append(toIndentedString(bookEffectiveDateOfChangeId)).append("\n");
    sb.append("    depreciableObjectId: ").append(toIndentedString(depreciableObjectId)).append("\n");
    sb.append("    depreciableObjectType: ").append(toIndentedString(depreciableObjectType)).append("\n");
    sb.append("    depreciationCalculationMethod: ").append(toIndentedString(depreciationCalculationMethod)).append("\n");
    sb.append("    depreciationMethod: ").append(toIndentedString(depreciationMethod)).append("\n");
    sb.append("    depreciationRate: ").append(toIndentedString(depreciationRate)).append("\n");
    sb.append("    effectiveLifeYears: ").append(toIndentedString(effectiveLifeYears)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("averagingMethod");
    openapiFields.add("bookEffectiveDateOfChangeId");
    openapiFields.add("depreciableObjectId");
    openapiFields.add("depreciableObjectType");
    openapiFields.add("depreciationCalculationMethod");
    openapiFields.add("depreciationMethod");
    openapiFields.add("depreciationRate");
    openapiFields.add("effectiveLifeYears");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BookDepreciationSetting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BookDepreciationSetting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BookDepreciationSetting is not found in the empty JSON string", BookDepreciationSetting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BookDepreciationSetting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BookDepreciationSetting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("averagingMethod") != null && !jsonObj.get("averagingMethod").isJsonNull()) && !jsonObj.get("averagingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `averagingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("averagingMethod").toString()));
      }
      // validate the optional field `averagingMethod`
      if (jsonObj.get("averagingMethod") != null && !jsonObj.get("averagingMethod").isJsonNull()) {
        AveragingMethodEnum.validateJsonElement(jsonObj.get("averagingMethod"));
      }
      if ((jsonObj.get("bookEffectiveDateOfChangeId") != null && !jsonObj.get("bookEffectiveDateOfChangeId").isJsonNull()) && !jsonObj.get("bookEffectiveDateOfChangeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookEffectiveDateOfChangeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bookEffectiveDateOfChangeId").toString()));
      }
      if ((jsonObj.get("depreciableObjectId") != null && !jsonObj.get("depreciableObjectId").isJsonNull()) && !jsonObj.get("depreciableObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `depreciableObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("depreciableObjectId").toString()));
      }
      if ((jsonObj.get("depreciableObjectType") != null && !jsonObj.get("depreciableObjectType").isJsonNull()) && !jsonObj.get("depreciableObjectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `depreciableObjectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("depreciableObjectType").toString()));
      }
      if ((jsonObj.get("depreciationCalculationMethod") != null && !jsonObj.get("depreciationCalculationMethod").isJsonNull()) && !jsonObj.get("depreciationCalculationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `depreciationCalculationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("depreciationCalculationMethod").toString()));
      }
      // validate the optional field `depreciationCalculationMethod`
      if (jsonObj.get("depreciationCalculationMethod") != null && !jsonObj.get("depreciationCalculationMethod").isJsonNull()) {
        DepreciationCalculationMethodEnum.validateJsonElement(jsonObj.get("depreciationCalculationMethod"));
      }
      if ((jsonObj.get("depreciationMethod") != null && !jsonObj.get("depreciationMethod").isJsonNull()) && !jsonObj.get("depreciationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `depreciationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("depreciationMethod").toString()));
      }
      // validate the optional field `depreciationMethod`
      if (jsonObj.get("depreciationMethod") != null && !jsonObj.get("depreciationMethod").isJsonNull()) {
        DepreciationMethodEnum.validateJsonElement(jsonObj.get("depreciationMethod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BookDepreciationSetting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BookDepreciationSetting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BookDepreciationSetting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BookDepreciationSetting.class));

       return (TypeAdapter<T>) new TypeAdapter<BookDepreciationSetting>() {
           @Override
           public void write(JsonWriter out, BookDepreciationSetting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BookDepreciationSetting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BookDepreciationSetting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BookDepreciationSetting
   * @throws IOException if the JSON string is invalid with respect to BookDepreciationSetting
   */
  public static BookDepreciationSetting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BookDepreciationSetting.class);
  }

  /**
   * Convert an instance of BookDepreciationSetting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

