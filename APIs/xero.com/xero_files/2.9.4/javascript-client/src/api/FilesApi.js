/**
 * Xero Files API
 * These endpoints are specific to Xero Files API
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Association from '../model/Association';
import FileObject from '../model/FileObject';
import Files from '../model/Files';
import Folder from '../model/Folder';

/**
* Files service.
* @module api/FilesApi
* @version 2.9.4
*/
export default class FilesApi {

    /**
    * Constructs a new FilesApi. 
    * @alias module:api/FilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createFileAssociation operation.
     * @callback module:api/FilesApi~createFileAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Association} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new file association
     * By passing in the appropriate options, you can create a new folder
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} fileId File id for single object
     * @param {Object} opts Optional parameters
     * @param {module:model/Association} [association] 
     * @param {module:api/FilesApi~createFileAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Association}
     */
    createFileAssociation(xeroTenantId, fileId, opts, callback) {
      opts = opts || {};
      let postBody = opts['association'];
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createFileAssociation");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling createFileAssociation");
      }

      let pathParams = {
        'FileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Association;
      return this.apiClient.callApi(
        '/Files/{FileId}/Associations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFolder operation.
     * @callback module:api/FilesApi~createFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Folder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new folder
     * By passing in the appropriate properties, you can create a new folder
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {module:model/Folder} [folder] 
     * @param {module:api/FilesApi~createFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Folder}
     */
    createFolder(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = opts['folder'];
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createFolder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Folder;
      return this.apiClient.callApi(
        '/Folders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFile operation.
     * @callback module:api/FilesApi~deleteFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specific file
     * Delete a specific file
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} fileId File id for single object
     * @param {module:api/FilesApi~deleteFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFile(xeroTenantId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling deleteFile");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteFile");
      }

      let pathParams = {
        'FileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Files/{FileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFileAssociation operation.
     * @callback module:api/FilesApi~deleteFileAssociationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing file association
     * By passing in the appropriate options, you can create a new folder
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} fileId File id for single object
     * @param {String} objectId Object id for single object
     * @param {module:api/FilesApi~deleteFileAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFileAssociation(xeroTenantId, fileId, objectId, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling deleteFileAssociation");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteFileAssociation");
      }
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling deleteFileAssociation");
      }

      let pathParams = {
        'FileId': fileId,
        'ObjectId': objectId
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Files/{FileId}/Associations/{ObjectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFolder operation.
     * @callback module:api/FilesApi~deleteFolderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a folder
     * By passing in the appropriate ID, you can delete a folder
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} folderId Folder id for single object
     * @param {module:api/FilesApi~deleteFolderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFolder(xeroTenantId, folderId, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling deleteFolder");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling deleteFolder");
      }

      let pathParams = {
        'FolderId': folderId
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Folders/{FolderId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssociationsByObject operation.
     * @callback module:api/FilesApi~getAssociationsByObjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an association object using a unique object ID
     * By passing in the appropriate options,
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} objectId Object id for single object
     * @param {module:api/FilesApi~getAssociationsByObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Association>}
     */
    getAssociationsByObject(xeroTenantId, objectId, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getAssociationsByObject");
      }
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling getAssociationsByObject");
      }

      let pathParams = {
        'ObjectId': objectId
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Association];
      return this.apiClient.callApi(
        '/Associations/{ObjectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFile operation.
     * @callback module:api/FilesApi~getFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a file by a unique file ID
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} fileId File id for single object
     * @param {module:api/FilesApi~getFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileObject}
     */
    getFile(xeroTenantId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getFile");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getFile");
      }

      let pathParams = {
        'FileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileObject;
      return this.apiClient.callApi(
        '/Files/{FileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileAssociations operation.
     * @callback module:api/FilesApi~getFileAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Association>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific file associations
     * By passing in the appropriate options,  
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} fileId File id for single object
     * @param {module:api/FilesApi~getFileAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Association>}
     */
    getFileAssociations(xeroTenantId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getFileAssociations");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getFileAssociations");
      }

      let pathParams = {
        'FileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Association];
      return this.apiClient.callApi(
        '/Files/{FileId}/Associations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileContent operation.
     * @callback module:api/FilesApi~getFileContentCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the content of a specific file
     * By passing in the appropriate options, retrieve data for specific file
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} fileId File id for single object
     * @param {module:api/FilesApi~getFileContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getFileContent(xeroTenantId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getFileContent");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getFileContent");
      }

      let pathParams = {
        'FileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Files/{FileId}/Content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFiles operation.
     * @callback module:api/FilesApi~getFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Files} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves files
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] pass an optional page size value
     * @param {Number} [page] number of records to skip for pagination
     * @param {module:model/String} [sort] values to sort by
     * @param {module:api/FilesApi~getFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Files}
     */
    getFiles(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getFiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'sort': opts['sort']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Files;
      return this.apiClient.callApi(
        '/Files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFolder operation.
     * @callback module:api/FilesApi~getFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Folder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves specific folder by using a unique folder ID
     * By passing in the appropriate ID, you can search for specific folder
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} folderId Folder id for single object
     * @param {module:api/FilesApi~getFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Folder}
     */
    getFolder(xeroTenantId, folderId, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getFolder");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling getFolder");
      }

      let pathParams = {
        'FolderId': folderId
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Folder;
      return this.apiClient.callApi(
        '/Folders/{FolderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFolders operation.
     * @callback module:api/FilesApi~getFoldersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Folder>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves folders
     * By passing in the appropriate options, you can search for available folders
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort] values to sort by
     * @param {module:api/FilesApi~getFoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Folder>}
     */
    getFolders(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getFolders");
      }

      let pathParams = {
      };
      let queryParams = {
        'sort': opts['sort']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Folder];
      return this.apiClient.callApi(
        '/Folders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInbox operation.
     * @callback module:api/FilesApi~getInboxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Folder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves inbox folder
     * Search for the user inbox
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:api/FilesApi~getInboxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Folder}
     */
    getInbox(xeroTenantId, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getInbox");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Folder;
      return this.apiClient.callApi(
        '/Inbox', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFile operation.
     * @callback module:api/FilesApi~updateFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a file
     * Updates file properties of a single file
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} fileId File id for single object
     * @param {Object} opts Optional parameters
     * @param {module:model/FileObject} [fileObject] 
     * @param {module:api/FilesApi~updateFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileObject}
     */
    updateFile(xeroTenantId, fileId, opts, callback) {
      opts = opts || {};
      let postBody = opts['fileObject'];
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateFile");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling updateFile");
      }

      let pathParams = {
        'FileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileObject;
      return this.apiClient.callApi(
        '/Files/{FileId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFolder operation.
     * @callback module:api/FilesApi~updateFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Folder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing folder
     * By passing in the appropriate ID and properties, you can update a folder
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} folderId Folder id for single object
     * @param {module:model/Folder} folder 
     * @param {module:api/FilesApi~updateFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Folder}
     */
    updateFolder(xeroTenantId, folderId, folder, callback) {
      let postBody = folder;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateFolder");
      }
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling updateFolder");
      }
      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling updateFolder");
      }

      let pathParams = {
        'FolderId': folderId
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Folder;
      return this.apiClient.callApi(
        '/Folders/{FolderId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile operation.
     * @callback module:api/FilesApi~uploadFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads a File
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {String} [folderId] pass an optional folder id to save file to specific folder
     * @param {Blob} [body] 
     * @param {String} [filename] 
     * @param {String} [mimeType] 
     * @param {String} [name] exact name of the file you are uploading
     * @param {module:api/FilesApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileObject}
     */
    uploadFile(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling uploadFile");
      }

      let pathParams = {
      };
      let queryParams = {
        'FolderId': opts['folderId']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
        'body': opts['body'],
        'filename': opts['filename'],
        'mimeType': opts['mimeType'],
        'name': opts['name']
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FileObject;
      return this.apiClient.callApi(
        '/Files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
