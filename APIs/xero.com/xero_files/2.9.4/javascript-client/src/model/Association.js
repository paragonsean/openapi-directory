/**
 * Xero Files API
 * These endpoints are specific to Xero Files API
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjectGroup from './ObjectGroup';
import ObjectType from './ObjectType';

/**
 * The Association model module.
 * @module model/Association
 * @version 2.9.4
 */
class Association {
    /**
     * Constructs a new <code>Association</code>.
     * @alias module:model/Association
     */
    constructor() { 
        
        Association.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Association</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Association} obj Optional instance to populate.
     * @return {module:model/Association} The populated <code>Association</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Association();

            if (data.hasOwnProperty('FileId')) {
                obj['FileId'] = ApiClient.convertToType(data['FileId'], 'String');
            }
            if (data.hasOwnProperty('ObjectGroup')) {
                obj['ObjectGroup'] = ObjectGroup.constructFromObject(data['ObjectGroup']);
            }
            if (data.hasOwnProperty('ObjectId')) {
                obj['ObjectId'] = ApiClient.convertToType(data['ObjectId'], 'String');
            }
            if (data.hasOwnProperty('ObjectType')) {
                obj['ObjectType'] = ObjectType.constructFromObject(data['ObjectType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Association</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Association</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['FileId'] && !(typeof data['FileId'] === 'string' || data['FileId'] instanceof String)) {
            throw new Error("Expected the field `FileId` to be a primitive type in the JSON string but got " + data['FileId']);
        }
        // ensure the json data is a string
        if (data['ObjectId'] && !(typeof data['ObjectId'] === 'string' || data['ObjectId'] instanceof String)) {
            throw new Error("Expected the field `ObjectId` to be a primitive type in the JSON string but got " + data['ObjectId']);
        }

        return true;
    }


}



/**
 * The unique identifier of the file
 * @member {String} FileId
 */
Association.prototype['FileId'] = undefined;

/**
 * @member {module:model/ObjectGroup} ObjectGroup
 */
Association.prototype['ObjectGroup'] = undefined;

/**
 * The identifier of the object that the file is being associated with (e.g. InvoiceID, BankTransactionID, ContactID)
 * @member {String} ObjectId
 */
Association.prototype['ObjectId'] = undefined;

/**
 * @member {module:model/ObjectType} ObjectType
 */
Association.prototype['ObjectType'] = undefined;






export default Association;

