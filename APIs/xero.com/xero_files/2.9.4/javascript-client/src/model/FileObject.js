/**
 * Xero Files API
 * These endpoints are specific to Xero Files API
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';

/**
 * The FileObject model module.
 * @module model/FileObject
 * @version 2.9.4
 */
class FileObject {
    /**
     * Constructs a new <code>FileObject</code>.
     * @alias module:model/FileObject
     */
    constructor() { 
        
        FileObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FileObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileObject} obj Optional instance to populate.
     * @return {module:model/FileObject} The populated <code>FileObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileObject();

            if (data.hasOwnProperty('CreatedDateUtc')) {
                obj['CreatedDateUtc'] = ApiClient.convertToType(data['CreatedDateUtc'], 'String');
            }
            if (data.hasOwnProperty('FolderId')) {
                obj['FolderId'] = ApiClient.convertToType(data['FolderId'], 'String');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('MimeType')) {
                obj['MimeType'] = ApiClient.convertToType(data['MimeType'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Size')) {
                obj['Size'] = ApiClient.convertToType(data['Size'], 'Number');
            }
            if (data.hasOwnProperty('UpdatedDateUtc')) {
                obj['UpdatedDateUtc'] = ApiClient.convertToType(data['UpdatedDateUtc'], 'String');
            }
            if (data.hasOwnProperty('User')) {
                obj['User'] = User.constructFromObject(data['User']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CreatedDateUtc'] && !(typeof data['CreatedDateUtc'] === 'string' || data['CreatedDateUtc'] instanceof String)) {
            throw new Error("Expected the field `CreatedDateUtc` to be a primitive type in the JSON string but got " + data['CreatedDateUtc']);
        }
        // ensure the json data is a string
        if (data['FolderId'] && !(typeof data['FolderId'] === 'string' || data['FolderId'] instanceof String)) {
            throw new Error("Expected the field `FolderId` to be a primitive type in the JSON string but got " + data['FolderId']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['MimeType'] && !(typeof data['MimeType'] === 'string' || data['MimeType'] instanceof String)) {
            throw new Error("Expected the field `MimeType` to be a primitive type in the JSON string but got " + data['MimeType']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUtc'] && !(typeof data['UpdatedDateUtc'] === 'string' || data['UpdatedDateUtc'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUtc` to be a primitive type in the JSON string but got " + data['UpdatedDateUtc']);
        }
        // validate the optional field `User`
        if (data['User']) { // data not null
          User.validateJSON(data['User']);
        }

        return true;
    }


}



/**
 * Created date in UTC
 * @member {String} CreatedDateUtc
 */
FileObject.prototype['CreatedDateUtc'] = undefined;

/**
 * Folder relation object's UUID
 * @member {String} FolderId
 */
FileObject.prototype['FolderId'] = undefined;

/**
 * File object's UUID
 * @member {String} Id
 */
FileObject.prototype['Id'] = undefined;

/**
 * MimeType of the file (image/png, image/jpeg, application/pdf, etc..)
 * @member {String} MimeType
 */
FileObject.prototype['MimeType'] = undefined;

/**
 * File Name
 * @member {String} Name
 */
FileObject.prototype['Name'] = undefined;

/**
 * Numeric value in bytes
 * @member {Number} Size
 */
FileObject.prototype['Size'] = undefined;

/**
 * Updated date in UTC
 * @member {String} UpdatedDateUtc
 */
FileObject.prototype['UpdatedDateUtc'] = undefined;

/**
 * @member {module:model/User} User
 */
FileObject.prototype['User'] = undefined;






export default FileObject;

