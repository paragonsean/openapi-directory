/*
 * Xero Files API
 * These endpoints are specific to Xero Files API
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FileObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:30.025143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileObject {
  public static final String SERIALIZED_NAME_CREATED_DATE_UTC = "CreatedDateUtc";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_UTC)
  private String createdDateUtc;

  public static final String SERIALIZED_NAME_FOLDER_ID = "FolderId";
  @SerializedName(SERIALIZED_NAME_FOLDER_ID)
  private UUID folderId;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_MIME_TYPE = "MimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SIZE = "Size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_UPDATED_DATE_UTC = "UpdatedDateUtc";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_UTC)
  private String updatedDateUtc;

  public static final String SERIALIZED_NAME_USER = "User";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public FileObject() {
  }

  public FileObject createdDateUtc(String createdDateUtc) {
    this.createdDateUtc = createdDateUtc;
    return this;
  }

  /**
   * Created date in UTC
   * @return createdDateUtc
   */
  @javax.annotation.Nullable
  public String getCreatedDateUtc() {
    return createdDateUtc;
  }

  public void setCreatedDateUtc(String createdDateUtc) {
    this.createdDateUtc = createdDateUtc;
  }


  public FileObject folderId(UUID folderId) {
    this.folderId = folderId;
    return this;
  }

  /**
   * Folder relation object&#39;s UUID
   * @return folderId
   */
  @javax.annotation.Nullable
  public UUID getFolderId() {
    return folderId;
  }

  public void setFolderId(UUID folderId) {
    this.folderId = folderId;
  }


  public FileObject id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * File object&#39;s UUID
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public FileObject mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * MimeType of the file (image/png, image/jpeg, application/pdf, etc..)
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public FileObject name(String name) {
    this.name = name;
    return this;
  }

  /**
   * File Name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FileObject size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * Numeric value in bytes
   * @return size
   */
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public FileObject updatedDateUtc(String updatedDateUtc) {
    this.updatedDateUtc = updatedDateUtc;
    return this;
  }

  /**
   * Updated date in UTC
   * @return updatedDateUtc
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUtc() {
    return updatedDateUtc;
  }

  public void setUpdatedDateUtc(String updatedDateUtc) {
    this.updatedDateUtc = updatedDateUtc;
  }


  public FileObject user(User user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileObject fileObject = (FileObject) o;
    return Objects.equals(this.createdDateUtc, fileObject.createdDateUtc) &&
        Objects.equals(this.folderId, fileObject.folderId) &&
        Objects.equals(this.id, fileObject.id) &&
        Objects.equals(this.mimeType, fileObject.mimeType) &&
        Objects.equals(this.name, fileObject.name) &&
        Objects.equals(this.size, fileObject.size) &&
        Objects.equals(this.updatedDateUtc, fileObject.updatedDateUtc) &&
        Objects.equals(this.user, fileObject.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdDateUtc, folderId, id, mimeType, name, size, updatedDateUtc, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileObject {\n");
    sb.append("    createdDateUtc: ").append(toIndentedString(createdDateUtc)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    updatedDateUtc: ").append(toIndentedString(updatedDateUtc)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CreatedDateUtc");
    openapiFields.add("FolderId");
    openapiFields.add("Id");
    openapiFields.add("MimeType");
    openapiFields.add("Name");
    openapiFields.add("Size");
    openapiFields.add("UpdatedDateUtc");
    openapiFields.add("User");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileObject is not found in the empty JSON string", FileObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CreatedDateUtc") != null && !jsonObj.get("CreatedDateUtc").isJsonNull()) && !jsonObj.get("CreatedDateUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CreatedDateUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CreatedDateUtc").toString()));
      }
      if ((jsonObj.get("FolderId") != null && !jsonObj.get("FolderId").isJsonNull()) && !jsonObj.get("FolderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FolderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FolderId").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("MimeType") != null && !jsonObj.get("MimeType").isJsonNull()) && !jsonObj.get("MimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MimeType").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("UpdatedDateUtc") != null && !jsonObj.get("UpdatedDateUtc").isJsonNull()) && !jsonObj.get("UpdatedDateUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUtc").toString()));
      }
      // validate the optional field `User`
      if (jsonObj.get("User") != null && !jsonObj.get("User").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("User"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileObject.class));

       return (TypeAdapter<T>) new TypeAdapter<FileObject>() {
           @Override
           public void write(JsonWriter out, FileObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileObject
   * @throws IOException if the JSON string is invalid with respect to FileObject
   */
  public static FileObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileObject.class);
  }

  /**
   * Convert an instance of FileObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

