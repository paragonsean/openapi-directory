/*
 * Xero Files API
 * These endpoints are specific to Xero Files API
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.ObjectGroup;
import org.openapitools.client.model.ObjectType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Association
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:30.025143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Association {
  public static final String SERIALIZED_NAME_FILE_ID = "FileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private UUID fileId;

  public static final String SERIALIZED_NAME_OBJECT_GROUP = "ObjectGroup";
  @SerializedName(SERIALIZED_NAME_OBJECT_GROUP)
  private ObjectGroup objectGroup;

  public static final String SERIALIZED_NAME_OBJECT_ID = "ObjectId";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private UUID objectId;

  public static final String SERIALIZED_NAME_OBJECT_TYPE = "ObjectType";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE)
  private ObjectType objectType;

  public Association() {
  }

  public Association fileId(UUID fileId) {
    this.fileId = fileId;
    return this;
  }

  /**
   * The unique identifier of the file
   * @return fileId
   */
  @javax.annotation.Nullable
  public UUID getFileId() {
    return fileId;
  }

  public void setFileId(UUID fileId) {
    this.fileId = fileId;
  }


  public Association objectGroup(ObjectGroup objectGroup) {
    this.objectGroup = objectGroup;
    return this;
  }

  /**
   * Get objectGroup
   * @return objectGroup
   */
  @javax.annotation.Nullable
  public ObjectGroup getObjectGroup() {
    return objectGroup;
  }

  public void setObjectGroup(ObjectGroup objectGroup) {
    this.objectGroup = objectGroup;
  }


  public Association objectId(UUID objectId) {
    this.objectId = objectId;
    return this;
  }

  /**
   * The identifier of the object that the file is being associated with (e.g. InvoiceID, BankTransactionID, ContactID)
   * @return objectId
   */
  @javax.annotation.Nullable
  public UUID getObjectId() {
    return objectId;
  }

  public void setObjectId(UUID objectId) {
    this.objectId = objectId;
  }


  public Association objectType(ObjectType objectType) {
    this.objectType = objectType;
    return this;
  }

  /**
   * Get objectType
   * @return objectType
   */
  @javax.annotation.Nullable
  public ObjectType getObjectType() {
    return objectType;
  }

  public void setObjectType(ObjectType objectType) {
    this.objectType = objectType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Association association = (Association) o;
    return Objects.equals(this.fileId, association.fileId) &&
        Objects.equals(this.objectGroup, association.objectGroup) &&
        Objects.equals(this.objectId, association.objectId) &&
        Objects.equals(this.objectType, association.objectType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileId, objectGroup, objectId, objectType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Association {\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    objectGroup: ").append(toIndentedString(objectGroup)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FileId");
    openapiFields.add("ObjectGroup");
    openapiFields.add("ObjectId");
    openapiFields.add("ObjectType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Association
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Association.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Association is not found in the empty JSON string", Association.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Association.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Association` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("FileId") != null && !jsonObj.get("FileId").isJsonNull()) && !jsonObj.get("FileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FileId").toString()));
      }
      // validate the optional field `ObjectGroup`
      if (jsonObj.get("ObjectGroup") != null && !jsonObj.get("ObjectGroup").isJsonNull()) {
        ObjectGroup.validateJsonElement(jsonObj.get("ObjectGroup"));
      }
      if ((jsonObj.get("ObjectId") != null && !jsonObj.get("ObjectId").isJsonNull()) && !jsonObj.get("ObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ObjectId").toString()));
      }
      // validate the optional field `ObjectType`
      if (jsonObj.get("ObjectType") != null && !jsonObj.get("ObjectType").isJsonNull()) {
        ObjectType.validateJsonElement(jsonObj.get("ObjectType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Association.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Association' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Association> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Association.class));

       return (TypeAdapter<T>) new TypeAdapter<Association>() {
           @Override
           public void write(JsonWriter out, Association value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Association read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Association given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Association
   * @throws IOException if the JSON string is invalid with respect to Association
   */
  public static Association fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Association.class);
  }

  /**
   * Convert an instance of Association to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

