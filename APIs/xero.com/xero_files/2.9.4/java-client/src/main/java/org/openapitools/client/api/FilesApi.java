/*
 * Xero Files API
 * These endpoints are specific to Xero Files API
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Association;
import java.io.File;
import org.openapitools.client.model.FileObject;
import org.openapitools.client.model.Files;
import org.openapitools.client.model.Folder;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createFileAssociation
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param association  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFileAssociationCall(String xeroTenantId, UUID fileId, Association association, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = association;

        // create path and map variables
        String localVarPath = "/Files/{FileId}/Associations"
            .replace("{" + "FileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFileAssociationValidateBeforeCall(String xeroTenantId, UUID fileId, Association association, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createFileAssociation(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling createFileAssociation(Async)");
        }

        return createFileAssociationCall(xeroTenantId, fileId, association, _callback);

    }

    /**
     * Creates a new file association
     * By passing in the appropriate options, you can create a new folder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param association  (optional)
     * @return Association
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public Association createFileAssociation(String xeroTenantId, UUID fileId, Association association) throws ApiException {
        ApiResponse<Association> localVarResp = createFileAssociationWithHttpInfo(xeroTenantId, fileId, association);
        return localVarResp.getData();
    }

    /**
     * Creates a new file association
     * By passing in the appropriate options, you can create a new folder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param association  (optional)
     * @return ApiResponse&lt;Association&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Association> createFileAssociationWithHttpInfo(String xeroTenantId, UUID fileId, Association association) throws ApiException {
        okhttp3.Call localVarCall = createFileAssociationValidateBeforeCall(xeroTenantId, fileId, association, null);
        Type localVarReturnType = new TypeToken<Association>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new file association (asynchronously)
     * By passing in the appropriate options, you can create a new folder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param association  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFileAssociationAsync(String xeroTenantId, UUID fileId, Association association, final ApiCallback<Association> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFileAssociationValidateBeforeCall(xeroTenantId, fileId, association, _callback);
        Type localVarReturnType = new TypeToken<Association>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFolder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folder  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFolderCall(String xeroTenantId, Folder folder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = folder;

        // create path and map variables
        String localVarPath = "/Folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFolderValidateBeforeCall(String xeroTenantId, Folder folder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createFolder(Async)");
        }

        return createFolderCall(xeroTenantId, folder, _callback);

    }

    /**
     * Creates a new folder
     * By passing in the appropriate properties, you can create a new folder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folder  (optional)
     * @return Folder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public Folder createFolder(String xeroTenantId, Folder folder) throws ApiException {
        ApiResponse<Folder> localVarResp = createFolderWithHttpInfo(xeroTenantId, folder);
        return localVarResp.getData();
    }

    /**
     * Creates a new folder
     * By passing in the appropriate properties, you can create a new folder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folder  (optional)
     * @return ApiResponse&lt;Folder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Folder> createFolderWithHttpInfo(String xeroTenantId, Folder folder) throws ApiException {
        okhttp3.Call localVarCall = createFolderValidateBeforeCall(xeroTenantId, folder, null);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new folder (asynchronously)
     * By passing in the appropriate properties, you can create a new folder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folder  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFolderAsync(String xeroTenantId, Folder folder, final ApiCallback<Folder> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFolderValidateBeforeCall(xeroTenantId, folder, _callback);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFile
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful deletion - return response 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileCall(String xeroTenantId, UUID fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Files/{FileId}"
            .replace("{" + "FileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFileValidateBeforeCall(String xeroTenantId, UUID fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling deleteFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFile(Async)");
        }

        return deleteFileCall(xeroTenantId, fileId, _callback);

    }

    /**
     * Deletes a specific file
     * Delete a specific file
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful deletion - return response 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFile(String xeroTenantId, UUID fileId) throws ApiException {
        deleteFileWithHttpInfo(xeroTenantId, fileId);
    }

    /**
     * Deletes a specific file
     * Delete a specific file
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful deletion - return response 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFileWithHttpInfo(String xeroTenantId, UUID fileId) throws ApiException {
        okhttp3.Call localVarCall = deleteFileValidateBeforeCall(xeroTenantId, fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a specific file (asynchronously)
     * Delete a specific file
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful deletion - return response 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileAsync(String xeroTenantId, UUID fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFileValidateBeforeCall(xeroTenantId, fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFileAssociation
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param objectId Object id for single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful deletion - return response 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileAssociationCall(String xeroTenantId, UUID fileId, UUID objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Files/{FileId}/Associations/{ObjectId}"
            .replace("{" + "FileId" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "ObjectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFileAssociationValidateBeforeCall(String xeroTenantId, UUID fileId, UUID objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling deleteFileAssociation(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFileAssociation(Async)");
        }

        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling deleteFileAssociation(Async)");
        }

        return deleteFileAssociationCall(xeroTenantId, fileId, objectId, _callback);

    }

    /**
     * Deletes an existing file association
     * By passing in the appropriate options, you can create a new folder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param objectId Object id for single object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful deletion - return response 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFileAssociation(String xeroTenantId, UUID fileId, UUID objectId) throws ApiException {
        deleteFileAssociationWithHttpInfo(xeroTenantId, fileId, objectId);
    }

    /**
     * Deletes an existing file association
     * By passing in the appropriate options, you can create a new folder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param objectId Object id for single object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful deletion - return response 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFileAssociationWithHttpInfo(String xeroTenantId, UUID fileId, UUID objectId) throws ApiException {
        okhttp3.Call localVarCall = deleteFileAssociationValidateBeforeCall(xeroTenantId, fileId, objectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes an existing file association (asynchronously)
     * By passing in the appropriate options, you can create a new folder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param objectId Object id for single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful deletion - return response 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileAssociationAsync(String xeroTenantId, UUID fileId, UUID objectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFileAssociationValidateBeforeCall(xeroTenantId, fileId, objectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFolder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folderId Folder id for single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful deletion - return response 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFolderCall(String xeroTenantId, UUID folderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Folders/{FolderId}"
            .replace("{" + "FolderId" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFolderValidateBeforeCall(String xeroTenantId, UUID folderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling deleteFolder(Async)");
        }

        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling deleteFolder(Async)");
        }

        return deleteFolderCall(xeroTenantId, folderId, _callback);

    }

    /**
     * Deletes a folder
     * By passing in the appropriate ID, you can delete a folder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folderId Folder id for single object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful deletion - return response 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFolder(String xeroTenantId, UUID folderId) throws ApiException {
        deleteFolderWithHttpInfo(xeroTenantId, folderId);
    }

    /**
     * Deletes a folder
     * By passing in the appropriate ID, you can delete a folder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folderId Folder id for single object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful deletion - return response 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFolderWithHttpInfo(String xeroTenantId, UUID folderId) throws ApiException {
        okhttp3.Call localVarCall = deleteFolderValidateBeforeCall(xeroTenantId, folderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a folder (asynchronously)
     * By passing in the appropriate ID, you can delete a folder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folderId Folder id for single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful deletion - return response 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFolderAsync(String xeroTenantId, UUID folderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFolderValidateBeforeCall(xeroTenantId, folderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssociationsByObject
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param objectId Object id for single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssociationsByObjectCall(String xeroTenantId, UUID objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Associations/{ObjectId}"
            .replace("{" + "ObjectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssociationsByObjectValidateBeforeCall(String xeroTenantId, UUID objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getAssociationsByObject(Async)");
        }

        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getAssociationsByObject(Async)");
        }

        return getAssociationsByObjectCall(xeroTenantId, objectId, _callback);

    }

    /**
     * Retrieves an association object using a unique object ID
     * By passing in the appropriate options,
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param objectId Object id for single object (required)
     * @return List&lt;Association&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public List<Association> getAssociationsByObject(String xeroTenantId, UUID objectId) throws ApiException {
        ApiResponse<List<Association>> localVarResp = getAssociationsByObjectWithHttpInfo(xeroTenantId, objectId);
        return localVarResp.getData();
    }

    /**
     * Retrieves an association object using a unique object ID
     * By passing in the appropriate options,
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param objectId Object id for single object (required)
     * @return ApiResponse&lt;List&lt;Association&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Association>> getAssociationsByObjectWithHttpInfo(String xeroTenantId, UUID objectId) throws ApiException {
        okhttp3.Call localVarCall = getAssociationsByObjectValidateBeforeCall(xeroTenantId, objectId, null);
        Type localVarReturnType = new TypeToken<List<Association>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves an association object using a unique object ID (asynchronously)
     * By passing in the appropriate options,
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param objectId Object id for single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssociationsByObjectAsync(String xeroTenantId, UUID objectId, final ApiCallback<List<Association>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssociationsByObjectValidateBeforeCall(xeroTenantId, objectId, _callback);
        Type localVarReturnType = new TypeToken<List<Association>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFile
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileCall(String xeroTenantId, UUID fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Files/{FileId}"
            .replace("{" + "FileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileValidateBeforeCall(String xeroTenantId, UUID fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFile(Async)");
        }

        return getFileCall(xeroTenantId, fileId, _callback);

    }

    /**
     * Retrieves a file by a unique file ID
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @return FileObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public FileObject getFile(String xeroTenantId, UUID fileId) throws ApiException {
        ApiResponse<FileObject> localVarResp = getFileWithHttpInfo(xeroTenantId, fileId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a file by a unique file ID
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @return ApiResponse&lt;FileObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileObject> getFileWithHttpInfo(String xeroTenantId, UUID fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileValidateBeforeCall(xeroTenantId, fileId, null);
        Type localVarReturnType = new TypeToken<FileObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a file by a unique file ID (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileAsync(String xeroTenantId, UUID fileId, final ApiCallback<FileObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileValidateBeforeCall(xeroTenantId, fileId, _callback);
        Type localVarReturnType = new TypeToken<FileObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFileAssociations
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileAssociationsCall(String xeroTenantId, UUID fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Files/{FileId}/Associations"
            .replace("{" + "FileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileAssociationsValidateBeforeCall(String xeroTenantId, UUID fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getFileAssociations(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileAssociations(Async)");
        }

        return getFileAssociationsCall(xeroTenantId, fileId, _callback);

    }

    /**
     * Retrieves a specific file associations
     * By passing in the appropriate options,  
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @return List&lt;Association&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public List<Association> getFileAssociations(String xeroTenantId, UUID fileId) throws ApiException {
        ApiResponse<List<Association>> localVarResp = getFileAssociationsWithHttpInfo(xeroTenantId, fileId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific file associations
     * By passing in the appropriate options,  
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @return ApiResponse&lt;List&lt;Association&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Association>> getFileAssociationsWithHttpInfo(String xeroTenantId, UUID fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileAssociationsValidateBeforeCall(xeroTenantId, fileId, null);
        Type localVarReturnType = new TypeToken<List<Association>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific file associations (asynchronously)
     * By passing in the appropriate options,  
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileAssociationsAsync(String xeroTenantId, UUID fileId, final ApiCallback<List<Association>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileAssociationsValidateBeforeCall(xeroTenantId, fileId, _callback);
        Type localVarReturnType = new TypeToken<List<Association>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFileContent
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns the byte array of the specific file based on id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileContentCall(String xeroTenantId, UUID fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Files/{FileId}/Content"
            .replace("{" + "FileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileContentValidateBeforeCall(String xeroTenantId, UUID fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getFileContent(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileContent(Async)");
        }

        return getFileContentCall(xeroTenantId, fileId, _callback);

    }

    /**
     * Retrieves the content of a specific file
     * By passing in the appropriate options, retrieve data for specific file
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns the byte array of the specific file based on id </td><td>  -  </td></tr>
     </table>
     */
    public File getFileContent(String xeroTenantId, UUID fileId) throws ApiException {
        ApiResponse<File> localVarResp = getFileContentWithHttpInfo(xeroTenantId, fileId);
        return localVarResp.getData();
    }

    /**
     * Retrieves the content of a specific file
     * By passing in the appropriate options, retrieve data for specific file
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns the byte array of the specific file based on id </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getFileContentWithHttpInfo(String xeroTenantId, UUID fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileContentValidateBeforeCall(xeroTenantId, fileId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the content of a specific file (asynchronously)
     * By passing in the appropriate options, retrieve data for specific file
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns the byte array of the specific file based on id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileContentAsync(String xeroTenantId, UUID fileId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileContentValidateBeforeCall(xeroTenantId, fileId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFiles
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param pagesize pass an optional page size value (optional)
     * @param page number of records to skip for pagination (optional)
     * @param sort values to sort by (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesCall(String xeroTenantId, Integer pagesize, Integer page, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilesValidateBeforeCall(String xeroTenantId, Integer pagesize, Integer page, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getFiles(Async)");
        }

        return getFilesCall(xeroTenantId, pagesize, page, sort, _callback);

    }

    /**
     * Retrieves files
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param pagesize pass an optional page size value (optional)
     * @param page number of records to skip for pagination (optional)
     * @param sort values to sort by (optional)
     * @return Files
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public Files getFiles(String xeroTenantId, Integer pagesize, Integer page, String sort) throws ApiException {
        ApiResponse<Files> localVarResp = getFilesWithHttpInfo(xeroTenantId, pagesize, page, sort);
        return localVarResp.getData();
    }

    /**
     * Retrieves files
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param pagesize pass an optional page size value (optional)
     * @param page number of records to skip for pagination (optional)
     * @param sort values to sort by (optional)
     * @return ApiResponse&lt;Files&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Files> getFilesWithHttpInfo(String xeroTenantId, Integer pagesize, Integer page, String sort) throws ApiException {
        okhttp3.Call localVarCall = getFilesValidateBeforeCall(xeroTenantId, pagesize, page, sort, null);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves files (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param pagesize pass an optional page size value (optional)
     * @param page number of records to skip for pagination (optional)
     * @param sort values to sort by (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesAsync(String xeroTenantId, Integer pagesize, Integer page, String sort, final ApiCallback<Files> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilesValidateBeforeCall(xeroTenantId, pagesize, page, sort, _callback);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFolder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folderId Folder id for single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFolderCall(String xeroTenantId, UUID folderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Folders/{FolderId}"
            .replace("{" + "FolderId" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderValidateBeforeCall(String xeroTenantId, UUID folderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getFolder(Async)");
        }

        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling getFolder(Async)");
        }

        return getFolderCall(xeroTenantId, folderId, _callback);

    }

    /**
     * Retrieves specific folder by using a unique folder ID
     * By passing in the appropriate ID, you can search for specific folder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folderId Folder id for single object (required)
     * @return Folder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public Folder getFolder(String xeroTenantId, UUID folderId) throws ApiException {
        ApiResponse<Folder> localVarResp = getFolderWithHttpInfo(xeroTenantId, folderId);
        return localVarResp.getData();
    }

    /**
     * Retrieves specific folder by using a unique folder ID
     * By passing in the appropriate ID, you can search for specific folder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folderId Folder id for single object (required)
     * @return ApiResponse&lt;Folder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Folder> getFolderWithHttpInfo(String xeroTenantId, UUID folderId) throws ApiException {
        okhttp3.Call localVarCall = getFolderValidateBeforeCall(xeroTenantId, folderId, null);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves specific folder by using a unique folder ID (asynchronously)
     * By passing in the appropriate ID, you can search for specific folder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folderId Folder id for single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFolderAsync(String xeroTenantId, UUID folderId, final ApiCallback<Folder> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderValidateBeforeCall(xeroTenantId, folderId, _callback);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFolders
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param sort values to sort by (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFoldersCall(String xeroTenantId, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFoldersValidateBeforeCall(String xeroTenantId, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getFolders(Async)");
        }

        return getFoldersCall(xeroTenantId, sort, _callback);

    }

    /**
     * Retrieves folders
     * By passing in the appropriate options, you can search for available folders
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param sort values to sort by (optional)
     * @return List&lt;Folder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public List<Folder> getFolders(String xeroTenantId, String sort) throws ApiException {
        ApiResponse<List<Folder>> localVarResp = getFoldersWithHttpInfo(xeroTenantId, sort);
        return localVarResp.getData();
    }

    /**
     * Retrieves folders
     * By passing in the appropriate options, you can search for available folders
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param sort values to sort by (optional)
     * @return ApiResponse&lt;List&lt;Folder&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Folder>> getFoldersWithHttpInfo(String xeroTenantId, String sort) throws ApiException {
        okhttp3.Call localVarCall = getFoldersValidateBeforeCall(xeroTenantId, sort, null);
        Type localVarReturnType = new TypeToken<List<Folder>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves folders (asynchronously)
     * By passing in the appropriate options, you can search for available folders
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param sort values to sort by (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFoldersAsync(String xeroTenantId, String sort, final ApiCallback<List<Folder>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFoldersValidateBeforeCall(xeroTenantId, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Folder>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInbox
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInboxCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Inbox";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxValidateBeforeCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getInbox(Async)");
        }

        return getInboxCall(xeroTenantId, _callback);

    }

    /**
     * Retrieves inbox folder
     * Search for the user inbox
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return Folder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public Folder getInbox(String xeroTenantId) throws ApiException {
        ApiResponse<Folder> localVarResp = getInboxWithHttpInfo(xeroTenantId);
        return localVarResp.getData();
    }

    /**
     * Retrieves inbox folder
     * Search for the user inbox
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return ApiResponse&lt;Folder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Folder> getInboxWithHttpInfo(String xeroTenantId) throws ApiException {
        okhttp3.Call localVarCall = getInboxValidateBeforeCall(xeroTenantId, null);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves inbox folder (asynchronously)
     * Search for the user inbox
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInboxAsync(String xeroTenantId, final ApiCallback<Folder> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxValidateBeforeCall(xeroTenantId, _callback);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFile
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param fileObject  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFileCall(String xeroTenantId, UUID fileId, FileObject fileObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileObject;

        // create path and map variables
        String localVarPath = "/Files/{FileId}"
            .replace("{" + "FileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFileValidateBeforeCall(String xeroTenantId, UUID fileId, FileObject fileObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling updateFile(Async)");
        }

        return updateFileCall(xeroTenantId, fileId, fileObject, _callback);

    }

    /**
     * Update a file
     * Updates file properties of a single file
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param fileObject  (optional)
     * @return FileObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public FileObject updateFile(String xeroTenantId, UUID fileId, FileObject fileObject) throws ApiException {
        ApiResponse<FileObject> localVarResp = updateFileWithHttpInfo(xeroTenantId, fileId, fileObject);
        return localVarResp.getData();
    }

    /**
     * Update a file
     * Updates file properties of a single file
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param fileObject  (optional)
     * @return ApiResponse&lt;FileObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileObject> updateFileWithHttpInfo(String xeroTenantId, UUID fileId, FileObject fileObject) throws ApiException {
        okhttp3.Call localVarCall = updateFileValidateBeforeCall(xeroTenantId, fileId, fileObject, null);
        Type localVarReturnType = new TypeToken<FileObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a file (asynchronously)
     * Updates file properties of a single file
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fileId File id for single object (required)
     * @param fileObject  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFileAsync(String xeroTenantId, UUID fileId, FileObject fileObject, final ApiCallback<FileObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFileValidateBeforeCall(xeroTenantId, fileId, fileObject, _callback);
        Type localVarReturnType = new TypeToken<FileObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFolder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folderId Folder id for single object (required)
     * @param folder  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> return the updated object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFolderCall(String xeroTenantId, UUID folderId, Folder folder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = folder;

        // create path and map variables
        String localVarPath = "/Folders/{FolderId}"
            .replace("{" + "FolderId" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFolderValidateBeforeCall(String xeroTenantId, UUID folderId, Folder folder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateFolder(Async)");
        }

        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling updateFolder(Async)");
        }

        // verify the required parameter 'folder' is set
        if (folder == null) {
            throw new ApiException("Missing the required parameter 'folder' when calling updateFolder(Async)");
        }

        return updateFolderCall(xeroTenantId, folderId, folder, _callback);

    }

    /**
     * Updates an existing folder
     * By passing in the appropriate ID and properties, you can update a folder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folderId Folder id for single object (required)
     * @param folder  (required)
     * @return Folder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> return the updated object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public Folder updateFolder(String xeroTenantId, UUID folderId, Folder folder) throws ApiException {
        ApiResponse<Folder> localVarResp = updateFolderWithHttpInfo(xeroTenantId, folderId, folder);
        return localVarResp.getData();
    }

    /**
     * Updates an existing folder
     * By passing in the appropriate ID and properties, you can update a folder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folderId Folder id for single object (required)
     * @param folder  (required)
     * @return ApiResponse&lt;Folder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> return the updated object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Folder> updateFolderWithHttpInfo(String xeroTenantId, UUID folderId, Folder folder) throws ApiException {
        okhttp3.Call localVarCall = updateFolderValidateBeforeCall(xeroTenantId, folderId, folder, null);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an existing folder (asynchronously)
     * By passing in the appropriate ID and properties, you can update a folder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folderId Folder id for single object (required)
     * @param folder  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> return the updated object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFolderAsync(String xeroTenantId, UUID folderId, Folder folder, final ApiCallback<Folder> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFolderValidateBeforeCall(xeroTenantId, folderId, folder, _callback);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadFile
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folderId pass an optional folder id to save file to specific folder (optional)
     * @param body  (optional)
     * @param filename  (optional)
     * @param mimeType  (optional)
     * @param name exact name of the file you are uploading (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFileCall(String xeroTenantId, UUID folderId, byte[] body, String filename, String mimeType, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (body != null) {
            localVarFormParams.put("body", body);
        }

        if (filename != null) {
            localVarFormParams.put("filename", filename);
        }

        if (mimeType != null) {
            localVarFormParams.put("mimeType", mimeType);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (folderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FolderId", folderId));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadFileValidateBeforeCall(String xeroTenantId, UUID folderId, byte[] body, String filename, String mimeType, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling uploadFile(Async)");
        }

        return uploadFileCall(xeroTenantId, folderId, body, filename, mimeType, name, _callback);

    }

    /**
     * Uploads a File
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folderId pass an optional folder id to save file to specific folder (optional)
     * @param body  (optional)
     * @param filename  (optional)
     * @param mimeType  (optional)
     * @param name exact name of the file you are uploading (optional)
     * @return FileObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public FileObject uploadFile(String xeroTenantId, UUID folderId, byte[] body, String filename, String mimeType, String name) throws ApiException {
        ApiResponse<FileObject> localVarResp = uploadFileWithHttpInfo(xeroTenantId, folderId, body, filename, mimeType, name);
        return localVarResp.getData();
    }

    /**
     * Uploads a File
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folderId pass an optional folder id to save file to specific folder (optional)
     * @param body  (optional)
     * @param filename  (optional)
     * @param mimeType  (optional)
     * @param name exact name of the file you are uploading (optional)
     * @return ApiResponse&lt;FileObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileObject> uploadFileWithHttpInfo(String xeroTenantId, UUID folderId, byte[] body, String filename, String mimeType, String name) throws ApiException {
        okhttp3.Call localVarCall = uploadFileValidateBeforeCall(xeroTenantId, folderId, body, filename, mimeType, name, null);
        Type localVarReturnType = new TypeToken<FileObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Uploads a File (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param folderId pass an optional folder id to save file to specific folder (optional)
     * @param body  (optional)
     * @param filename  (optional)
     * @param mimeType  (optional)
     * @param name exact name of the file you are uploading (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFileAsync(String xeroTenantId, UUID folderId, byte[] body, String filename, String mimeType, String name, final ApiCallback<FileObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadFileValidateBeforeCall(xeroTenantId, folderId, body, filename, mimeType, name, _callback);
        Type localVarReturnType = new TypeToken<FileObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
