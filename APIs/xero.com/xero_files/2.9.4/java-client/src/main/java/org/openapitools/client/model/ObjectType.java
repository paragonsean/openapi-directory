/*
 * Xero Files API
 * These endpoints are specific to Xero Files API
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The Object Type
 */
@JsonAdapter(ObjectType.Adapter.class)
public enum ObjectType {
  
  UNKNOWN("Unknown"),
  
  ACCPAY("Accpay"),
  
  ACC_PAY_CREDIT("AccPayCredit"),
  
  ACC_PAY_PAYMENT("AccPayPayment"),
  
  ACC_REC("AccRec"),
  
  ACC_REC_CREDIT("AccRecCredit"),
  
  ACC_REC_PAYMENT("AccRecPayment"),
  
  ADJUSTMENT("Adjustment"),
  
  AP_CREDIT_PAYMENT("ApCreditPayment"),
  
  AP_OVER_PAYMENT("ApOverPayment"),
  
  AP_OVER_PAYMENT_PAYMENT("ApOverPaymentPayment"),
  
  AP_OVER_PAYMENT_SOURCE_PAYMENT("ApOverPaymentSourcePayment"),
  
  AP_PREPAYMENT("ApPrepayment"),
  
  AP_PREPAYMENT_PAYMENT("ApPrepaymentPayment"),
  
  AP_PREPAYMENT_SOURCE_PAYMENT("ApPrepaymentSourcePayment"),
  
  AR_CREDIT_PAYMENT("ArCreditPayment"),
  
  AR_OVER_PAYMENT("ArOverPayment"),
  
  AR_OVERPAYMENT_PAYMENT("ArOverpaymentPayment"),
  
  AR_OVERPAYMENT_SOURCE_PAYMENT("ArOverpaymentSourcePayment"),
  
  AR_PREPAYMENT("ArPrepayment"),
  
  AR_PREPAYMENT_PAYMENT("ArPrepaymentPayment"),
  
  AR_PREPAYMENT_SOURCE_PAYMENT("ArPrepaymentSourcePayment"),
  
  CASH_PAID("CashPaid"),
  
  CASH_REC("CashRec"),
  
  EXP_PAYMENT("ExpPayment"),
  
  MAN_JOURNAL("ManJournal"),
  
  PURCHASE_ORDER("PurchaseOrder"),
  
  RECEIPT("Receipt"),
  
  TRANSFER("Transfer"),
  
  ACCOUNT("Account"),
  
  CONTACT("Contact"),
  
  BUSINESS("Business"),
  
  EMPLOYEE("Employee"),
  
  PERSON("Person"),
  
  USER("User"),
  
  ORG("Org"),
  
  FIXED_ASSET("FixedAsset"),
  
  PAY_RUN("PayRun"),
  
  PRICE_LIST_ITEM("PriceListItem"),
  
  BANK("Bank"),
  
  CURRENT("Current"),
  
  EQUITY("Equity"),
  
  EXPENSE("Expense"),
  
  FIXED("Fixed"),
  
  LIABILITY("Liability"),
  
  PREPAYMENT("Prepayment"),
  
  REVENUE("Revenue"),
  
  SALES("Sales"),
  
  OVERHEADS("Overheads"),
  
  DEPRECIATN("Depreciatn"),
  
  OTHER_INCOME("OtherIncome"),
  
  DIRECT_COSTS("DirectCosts"),
  
  CURRLIAB("Currliab"),
  
  TERMLIAB("Termliab"),
  
  NON_CURRENT("NonCurrent");

  private String value;

  ObjectType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ObjectType fromValue(String value) {
    for (ObjectType b : ObjectType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ObjectType> {
    @Override
    public void write(final JsonWriter jsonWriter, final ObjectType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ObjectType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ObjectType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ObjectType.fromValue(value);
  }
}

