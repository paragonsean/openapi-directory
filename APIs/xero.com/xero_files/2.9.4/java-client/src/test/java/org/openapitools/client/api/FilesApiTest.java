/*
 * Xero Files API
 * These endpoints are specific to Xero Files API
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Association;
import java.io.File;
import org.openapitools.client.model.FileObject;
import org.openapitools.client.model.Files;
import org.openapitools.client.model.Folder;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FilesApi
 */
@Disabled
public class FilesApiTest {

    private final FilesApi api = new FilesApi();

    /**
     * Creates a new file association
     *
     * By passing in the appropriate options, you can create a new folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFileAssociationTest() throws ApiException {
        String xeroTenantId = null;
        UUID fileId = null;
        Association association = null;
        Association response = api.createFileAssociation(xeroTenantId, fileId, association);
        // TODO: test validations
    }

    /**
     * Creates a new folder
     *
     * By passing in the appropriate properties, you can create a new folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFolderTest() throws ApiException {
        String xeroTenantId = null;
        Folder folder = null;
        Folder response = api.createFolder(xeroTenantId, folder);
        // TODO: test validations
    }

    /**
     * Deletes a specific file
     *
     * Delete a specific file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFileTest() throws ApiException {
        String xeroTenantId = null;
        UUID fileId = null;
        api.deleteFile(xeroTenantId, fileId);
        // TODO: test validations
    }

    /**
     * Deletes an existing file association
     *
     * By passing in the appropriate options, you can create a new folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFileAssociationTest() throws ApiException {
        String xeroTenantId = null;
        UUID fileId = null;
        UUID objectId = null;
        api.deleteFileAssociation(xeroTenantId, fileId, objectId);
        // TODO: test validations
    }

    /**
     * Deletes a folder
     *
     * By passing in the appropriate ID, you can delete a folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFolderTest() throws ApiException {
        String xeroTenantId = null;
        UUID folderId = null;
        api.deleteFolder(xeroTenantId, folderId);
        // TODO: test validations
    }

    /**
     * Retrieves an association object using a unique object ID
     *
     * By passing in the appropriate options,
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssociationsByObjectTest() throws ApiException {
        String xeroTenantId = null;
        UUID objectId = null;
        List<Association> response = api.getAssociationsByObject(xeroTenantId, objectId);
        // TODO: test validations
    }

    /**
     * Retrieves a file by a unique file ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFileTest() throws ApiException {
        String xeroTenantId = null;
        UUID fileId = null;
        FileObject response = api.getFile(xeroTenantId, fileId);
        // TODO: test validations
    }

    /**
     * Retrieves a specific file associations
     *
     * By passing in the appropriate options,  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFileAssociationsTest() throws ApiException {
        String xeroTenantId = null;
        UUID fileId = null;
        List<Association> response = api.getFileAssociations(xeroTenantId, fileId);
        // TODO: test validations
    }

    /**
     * Retrieves the content of a specific file
     *
     * By passing in the appropriate options, retrieve data for specific file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFileContentTest() throws ApiException {
        String xeroTenantId = null;
        UUID fileId = null;
        File response = api.getFileContent(xeroTenantId, fileId);
        // TODO: test validations
    }

    /**
     * Retrieves files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilesTest() throws ApiException {
        String xeroTenantId = null;
        Integer pagesize = null;
        Integer page = null;
        String sort = null;
        Files response = api.getFiles(xeroTenantId, pagesize, page, sort);
        // TODO: test validations
    }

    /**
     * Retrieves specific folder by using a unique folder ID
     *
     * By passing in the appropriate ID, you can search for specific folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFolderTest() throws ApiException {
        String xeroTenantId = null;
        UUID folderId = null;
        Folder response = api.getFolder(xeroTenantId, folderId);
        // TODO: test validations
    }

    /**
     * Retrieves folders
     *
     * By passing in the appropriate options, you can search for available folders
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFoldersTest() throws ApiException {
        String xeroTenantId = null;
        String sort = null;
        List<Folder> response = api.getFolders(xeroTenantId, sort);
        // TODO: test validations
    }

    /**
     * Retrieves inbox folder
     *
     * Search for the user inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxTest() throws ApiException {
        String xeroTenantId = null;
        Folder response = api.getInbox(xeroTenantId);
        // TODO: test validations
    }

    /**
     * Update a file
     *
     * Updates file properties of a single file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFileTest() throws ApiException {
        String xeroTenantId = null;
        UUID fileId = null;
        FileObject fileObject = null;
        FileObject response = api.updateFile(xeroTenantId, fileId, fileObject);
        // TODO: test validations
    }

    /**
     * Updates an existing folder
     *
     * By passing in the appropriate ID and properties, you can update a folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFolderTest() throws ApiException {
        String xeroTenantId = null;
        UUID folderId = null;
        Folder folder = null;
        Folder response = api.updateFolder(xeroTenantId, folderId, folder);
        // TODO: test validations
    }

    /**
     * Uploads a File
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException {
        String xeroTenantId = null;
        UUID folderId = null;
        byte[] body = null;
        String filename = null;
        String mimeType = null;
        String name = null;
        FileObject response = api.uploadFile(xeroTenantId, folderId, body, filename, mimeType, name);
        // TODO: test validations
    }

}
