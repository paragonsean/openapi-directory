# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Folder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, file_count: int=None, id: str=None, is_inbox: bool=None, name: str=None):
        """Folder - a model defined in OpenAPI

        :param email: The email of this Folder.
        :param file_count: The file_count of this Folder.
        :param id: The id of this Folder.
        :param is_inbox: The is_inbox of this Folder.
        :param name: The name of this Folder.
        """
        self.openapi_types = {
            'email': str,
            'file_count': int,
            'id': str,
            'is_inbox': bool,
            'name': str
        }

        self.attribute_map = {
            'email': 'Email',
            'file_count': 'FileCount',
            'id': 'Id',
            'is_inbox': 'IsInbox',
            'name': 'Name'
        }

        self._email = email
        self._file_count = file_count
        self._id = id
        self._is_inbox = is_inbox
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Folder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Folder of this Folder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Folder.

        The email address used to email files to the inbox. Only the inbox will have this element.

        :return: The email of this Folder.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Folder.

        The email address used to email files to the inbox. Only the inbox will have this element.

        :param email: The email of this Folder.
        :type email: str
        """

        self._email = email

    @property
    def file_count(self):
        """Gets the file_count of this Folder.

        The number of files in the folder

        :return: The file_count of this Folder.
        :rtype: int
        """
        return self._file_count

    @file_count.setter
    def file_count(self, file_count):
        """Sets the file_count of this Folder.

        The number of files in the folder

        :param file_count: The file_count of this Folder.
        :type file_count: int
        """

        self._file_count = file_count

    @property
    def id(self):
        """Gets the id of this Folder.

        Xero unique identifier for a folder  Files

        :return: The id of this Folder.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Folder.

        Xero unique identifier for a folder  Files

        :param id: The id of this Folder.
        :type id: str
        """

        self._id = id

    @property
    def is_inbox(self):
        """Gets the is_inbox of this Folder.

        to indicate if the folder is the Inbox. The Inbox cannot be renamed or deleted.

        :return: The is_inbox of this Folder.
        :rtype: bool
        """
        return self._is_inbox

    @is_inbox.setter
    def is_inbox(self, is_inbox):
        """Sets the is_inbox of this Folder.

        to indicate if the folder is the Inbox. The Inbox cannot be renamed or deleted.

        :param is_inbox: The is_inbox of this Folder.
        :type is_inbox: bool
        """

        self._is_inbox = is_inbox

    @property
    def name(self):
        """Gets the name of this Folder.

        The name of the folder

        :return: The name of this Folder.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Folder.

        The name of the folder

        :param name: The name of this Folder.
        :type name: str
        """

        self._name = name
