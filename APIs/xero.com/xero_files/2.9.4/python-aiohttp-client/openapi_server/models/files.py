# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_object import FileObject
from openapi_server import util


class Files(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[FileObject]=None, page: int=None, per_page: int=None, total_count: int=None):
        """Files - a model defined in OpenAPI

        :param items: The items of this Files.
        :param page: The page of this Files.
        :param per_page: The per_page of this Files.
        :param total_count: The total_count of this Files.
        """
        self.openapi_types = {
            'items': List[FileObject],
            'page': int,
            'per_page': int,
            'total_count': int
        }

        self.attribute_map = {
            'items': 'Items',
            'page': 'Page',
            'per_page': 'PerPage',
            'total_count': 'TotalCount'
        }

        self._items = items
        self._page = page
        self._per_page = per_page
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Files':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Files of this Files.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this Files.


        :return: The items of this Files.
        :rtype: List[FileObject]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Files.


        :param items: The items of this Files.
        :type items: List[FileObject]
        """

        self._items = items

    @property
    def page(self):
        """Gets the page of this Files.


        :return: The page of this Files.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this Files.


        :param page: The page of this Files.
        :type page: int
        """

        self._page = page

    @property
    def per_page(self):
        """Gets the per_page of this Files.


        :return: The per_page of this Files.
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this Files.


        :param per_page: The per_page of this Files.
        :type per_page: int
        """

        self._per_page = per_page

    @property
    def total_count(self):
        """Gets the total_count of this Files.


        :return: The total_count of this Files.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this Files.


        :param total_count: The total_count of this Files.
        :type total_count: int
        """

        self._total_count = total_count
