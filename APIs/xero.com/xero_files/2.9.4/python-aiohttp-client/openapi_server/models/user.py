# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_name: str=None, full_name: str=None, id: str=None, last_name: str=None, name: str=None):
        """User - a model defined in OpenAPI

        :param first_name: The first_name of this User.
        :param full_name: The full_name of this User.
        :param id: The id of this User.
        :param last_name: The last_name of this User.
        :param name: The name of this User.
        """
        self.openapi_types = {
            'first_name': str,
            'full_name': str,
            'id': str,
            'last_name': str,
            'name': str
        }

        self.attribute_map = {
            'first_name': 'FirstName',
            'full_name': 'FullName',
            'id': 'Id',
            'last_name': 'LastName',
            'name': 'Name'
        }

        self._first_name = first_name
        self._full_name = full_name
        self._id = id
        self._last_name = last_name
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self):
        """Gets the first_name of this User.

        First name of user

        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        First name of user

        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def full_name(self):
        """Gets the full_name of this User.

        Last name of user

        :return: The full_name of this User.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this User.

        Last name of user

        :param full_name: The full_name of this User.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def id(self):
        """Gets the id of this User.

        Xero identifier

        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        Xero identifier

        :param id: The id of this User.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this User.

        Last name of user

        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        Last name of user

        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def name(self):
        """Gets the name of this User.

        Key is Name, but returns Email address of user who created the file

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        Key is Name, but returns Email address of user who created the file

        :param name: The name of this User.
        :type name: str
        """

        self._name = name
