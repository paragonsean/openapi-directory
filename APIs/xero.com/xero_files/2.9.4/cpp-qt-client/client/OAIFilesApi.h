/**
 * Xero Files API
 * These endpoints are specific to Xero Files API
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFilesApi_H
#define OAI_OAIFilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssociation.h"
#include "OAIFileObject.h"
#include "OAIFiles.h"
#include "OAIFolder.h"
#include "OAIHttpFileElement.h"
#include <QString>
#include <QByteArray>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFilesApi : public QObject {
    Q_OBJECT

public:
    OAIFilesApi(const int timeOut = 0);
    ~OAIFilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  file_id QString [required]
    * @param[in]  oai_association OAIAssociation [optional]
    */
    virtual void createFileAssociation(const QString &xero_tenant_id, const QString &file_id, const ::OpenAPI::OptionalParam<OAIAssociation> &oai_association = ::OpenAPI::OptionalParam<OAIAssociation>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_folder OAIFolder [optional]
    */
    virtual void createFolder(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<OAIFolder> &oai_folder = ::OpenAPI::OptionalParam<OAIFolder>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  file_id QString [required]
    */
    virtual void deleteFile(const QString &xero_tenant_id, const QString &file_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  file_id QString [required]
    * @param[in]  object_id QString [required]
    */
    virtual void deleteFileAssociation(const QString &xero_tenant_id, const QString &file_id, const QString &object_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  folder_id QString [required]
    */
    virtual void deleteFolder(const QString &xero_tenant_id, const QString &folder_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  object_id QString [required]
    */
    virtual void getAssociationsByObject(const QString &xero_tenant_id, const QString &object_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  file_id QString [required]
    */
    virtual void getFile(const QString &xero_tenant_id, const QString &file_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  file_id QString [required]
    */
    virtual void getFileAssociations(const QString &xero_tenant_id, const QString &file_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  file_id QString [required]
    */
    virtual void getFileContent(const QString &xero_tenant_id, const QString &file_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getFiles(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  folder_id QString [required]
    */
    virtual void getFolder(const QString &xero_tenant_id, const QString &folder_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  sort QString [optional]
    */
    virtual void getFolders(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    */
    virtual void getInbox(const QString &xero_tenant_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  file_id QString [required]
    * @param[in]  oai_file_object OAIFileObject [optional]
    */
    virtual void updateFile(const QString &xero_tenant_id, const QString &file_id, const ::OpenAPI::OptionalParam<OAIFileObject> &oai_file_object = ::OpenAPI::OptionalParam<OAIFileObject>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  folder_id QString [required]
    * @param[in]  oai_folder OAIFolder [required]
    */
    virtual void updateFolder(const QString &xero_tenant_id, const QString &folder_id, const OAIFolder &oai_folder);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  folder_id QString [optional]
    * @param[in]  body QByteArray [optional]
    * @param[in]  filename QString [optional]
    * @param[in]  mime_type QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void uploadFile(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QString> &folder_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &body = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &filename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mime_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createFileAssociationCallback(OAIHttpRequestWorker *worker);
    void createFolderCallback(OAIHttpRequestWorker *worker);
    void deleteFileCallback(OAIHttpRequestWorker *worker);
    void deleteFileAssociationCallback(OAIHttpRequestWorker *worker);
    void deleteFolderCallback(OAIHttpRequestWorker *worker);
    void getAssociationsByObjectCallback(OAIHttpRequestWorker *worker);
    void getFileCallback(OAIHttpRequestWorker *worker);
    void getFileAssociationsCallback(OAIHttpRequestWorker *worker);
    void getFileContentCallback(OAIHttpRequestWorker *worker);
    void getFilesCallback(OAIHttpRequestWorker *worker);
    void getFolderCallback(OAIHttpRequestWorker *worker);
    void getFoldersCallback(OAIHttpRequestWorker *worker);
    void getInboxCallback(OAIHttpRequestWorker *worker);
    void updateFileCallback(OAIHttpRequestWorker *worker);
    void updateFolderCallback(OAIHttpRequestWorker *worker);
    void uploadFileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createFileAssociationSignal(OAIAssociation summary);
    void createFolderSignal(OAIFolder summary);
    void deleteFileSignal();
    void deleteFileAssociationSignal();
    void deleteFolderSignal();
    void getAssociationsByObjectSignal(QList<OAIAssociation> summary);
    void getFileSignal(OAIFileObject summary);
    void getFileAssociationsSignal(QList<OAIAssociation> summary);
    void getFileContentSignal(OAIHttpFileElement summary);
    void getFilesSignal(OAIFiles summary);
    void getFolderSignal(OAIFolder summary);
    void getFoldersSignal(QList<OAIFolder> summary);
    void getInboxSignal(OAIFolder summary);
    void updateFileSignal(OAIFileObject summary);
    void updateFolderSignal(OAIFolder summary);
    void uploadFileSignal(OAIFileObject summary);


    void createFileAssociationSignalFull(OAIHttpRequestWorker *worker, OAIAssociation summary);
    void createFolderSignalFull(OAIHttpRequestWorker *worker, OAIFolder summary);
    void deleteFileSignalFull(OAIHttpRequestWorker *worker);
    void deleteFileAssociationSignalFull(OAIHttpRequestWorker *worker);
    void deleteFolderSignalFull(OAIHttpRequestWorker *worker);
    void getAssociationsByObjectSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssociation> summary);
    void getFileSignalFull(OAIHttpRequestWorker *worker, OAIFileObject summary);
    void getFileAssociationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssociation> summary);
    void getFileContentSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getFilesSignalFull(OAIHttpRequestWorker *worker, OAIFiles summary);
    void getFolderSignalFull(OAIHttpRequestWorker *worker, OAIFolder summary);
    void getFoldersSignalFull(OAIHttpRequestWorker *worker, QList<OAIFolder> summary);
    void getInboxSignalFull(OAIHttpRequestWorker *worker, OAIFolder summary);
    void updateFileSignalFull(OAIHttpRequestWorker *worker, OAIFileObject summary);
    void updateFolderSignalFull(OAIHttpRequestWorker *worker, OAIFolder summary);
    void uploadFileSignalFull(OAIHttpRequestWorker *worker, OAIFileObject summary);

    Q_DECL_DEPRECATED_X("Use createFileAssociationSignalError() instead")
    void createFileAssociationSignalE(OAIAssociation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFileAssociationSignalError(OAIAssociation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFolderSignalError() instead")
    void createFolderSignalE(OAIFolder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFolderSignalError(OAIFolder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFileSignalError() instead")
    void deleteFileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFileAssociationSignalError() instead")
    void deleteFileAssociationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFileAssociationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFolderSignalError() instead")
    void deleteFolderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFolderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssociationsByObjectSignalError() instead")
    void getAssociationsByObjectSignalE(QList<OAIAssociation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationsByObjectSignalError(QList<OAIAssociation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileSignalError() instead")
    void getFileSignalE(OAIFileObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileSignalError(OAIFileObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileAssociationsSignalError() instead")
    void getFileAssociationsSignalE(QList<OAIAssociation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileAssociationsSignalError(QList<OAIAssociation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileContentSignalError() instead")
    void getFileContentSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileContentSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFilesSignalError() instead")
    void getFilesSignalE(OAIFiles summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFilesSignalError(OAIFiles summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFolderSignalError() instead")
    void getFolderSignalE(OAIFolder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFolderSignalError(OAIFolder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFoldersSignalError() instead")
    void getFoldersSignalE(QList<OAIFolder> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFoldersSignalError(QList<OAIFolder> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInboxSignalError() instead")
    void getInboxSignalE(OAIFolder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInboxSignalError(OAIFolder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFileSignalError() instead")
    void updateFileSignalE(OAIFileObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFileSignalError(OAIFileObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFolderSignalError() instead")
    void updateFolderSignalE(OAIFolder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFolderSignalError(OAIFolder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileSignalError() instead")
    void uploadFileSignalE(OAIFileObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileSignalError(OAIFileObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createFileAssociationSignalErrorFull() instead")
    void createFileAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFileAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFolderSignalErrorFull() instead")
    void createFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFileSignalErrorFull() instead")
    void deleteFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFileAssociationSignalErrorFull() instead")
    void deleteFileAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFileAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFolderSignalErrorFull() instead")
    void deleteFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssociationsByObjectSignalErrorFull() instead")
    void getAssociationsByObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationsByObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileSignalErrorFull() instead")
    void getFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileAssociationsSignalErrorFull() instead")
    void getFileAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileContentSignalErrorFull() instead")
    void getFileContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFilesSignalErrorFull() instead")
    void getFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFolderSignalErrorFull() instead")
    void getFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFoldersSignalErrorFull() instead")
    void getFoldersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFoldersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInboxSignalErrorFull() instead")
    void getInboxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInboxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFileSignalErrorFull() instead")
    void updateFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFolderSignalErrorFull() instead")
    void updateFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileSignalErrorFull() instead")
    void uploadFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
