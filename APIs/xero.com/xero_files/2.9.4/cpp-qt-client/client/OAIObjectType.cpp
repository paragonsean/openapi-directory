/**
 * Xero Files API
 * These endpoints are specific to Xero Files API
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectType::OAIObjectType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectType::OAIObjectType() {
    this->initializeModel();
}

OAIObjectType::~OAIObjectType() {}

void OAIObjectType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIObjectType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIObjectType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Unknown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Accpay", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::ACCPAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AccPayCredit", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::ACCPAYCREDIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AccPayPayment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::ACCPAYPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AccRec", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::ACCREC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AccRecCredit", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::ACCRECCREDIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AccRecPayment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::ACCRECPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Adjustment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::ADJUSTMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApCreditPayment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::APCREDITPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApOverPayment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::APOVERPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApOverPaymentPayment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::APOVERPAYMENTPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApOverPaymentSourcePayment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::APOVERPAYMENTSOURCEPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApPrepayment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::APPREPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApPrepaymentPayment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::APPREPAYMENTPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApPrepaymentSourcePayment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::APPREPAYMENTSOURCEPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ArCreditPayment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::ARCREDITPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ArOverPayment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::AROVERPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ArOverpaymentPayment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::AROVERPAYMENTPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ArOverpaymentSourcePayment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::AROVERPAYMENTSOURCEPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ArPrepayment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::ARPREPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ArPrepaymentPayment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::ARPREPAYMENTPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ArPrepaymentSourcePayment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::ARPREPAYMENTSOURCEPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CashPaid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::CASHPAID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CashRec", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::CASHREC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExpPayment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::EXPPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ManJournal", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::MANJOURNAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PurchaseOrder", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::PURCHASEORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Receipt", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::RECEIPT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Transfer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::TRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Account", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::ACCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Contact", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::CONTACT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Business", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::BUSINESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Employee", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::EMPLOYEE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Person", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::PERSON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("User", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::USER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Org", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::ORG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FixedAsset", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::FIXEDASSET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PayRun", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::PAYRUN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PriceListItem", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::PRICELISTITEM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bank", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::BANK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Current", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::CURRENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Equity", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::EQUITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Expense", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::EXPENSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Fixed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::FIXED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Liability", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::LIABILITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Prepayment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::PREPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Revenue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::REVENUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Sales", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::SALES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Overheads", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::OVERHEADS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Depreciatn", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::DEPRECIATN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OtherIncome", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::OTHERINCOME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DirectCosts", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::DIRECTCOSTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Currliab", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::CURRLIAB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Termliab", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::TERMLIAB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NonCurrent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectType::NONCURRENT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIObjectType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIObjectType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIObjectType::UNKNOWN:
            val = "Unknown";
            break;
        case eOAIObjectType::ACCPAY:
            val = "Accpay";
            break;
        case eOAIObjectType::ACCPAYCREDIT:
            val = "AccPayCredit";
            break;
        case eOAIObjectType::ACCPAYPAYMENT:
            val = "AccPayPayment";
            break;
        case eOAIObjectType::ACCREC:
            val = "AccRec";
            break;
        case eOAIObjectType::ACCRECCREDIT:
            val = "AccRecCredit";
            break;
        case eOAIObjectType::ACCRECPAYMENT:
            val = "AccRecPayment";
            break;
        case eOAIObjectType::ADJUSTMENT:
            val = "Adjustment";
            break;
        case eOAIObjectType::APCREDITPAYMENT:
            val = "ApCreditPayment";
            break;
        case eOAIObjectType::APOVERPAYMENT:
            val = "ApOverPayment";
            break;
        case eOAIObjectType::APOVERPAYMENTPAYMENT:
            val = "ApOverPaymentPayment";
            break;
        case eOAIObjectType::APOVERPAYMENTSOURCEPAYMENT:
            val = "ApOverPaymentSourcePayment";
            break;
        case eOAIObjectType::APPREPAYMENT:
            val = "ApPrepayment";
            break;
        case eOAIObjectType::APPREPAYMENTPAYMENT:
            val = "ApPrepaymentPayment";
            break;
        case eOAIObjectType::APPREPAYMENTSOURCEPAYMENT:
            val = "ApPrepaymentSourcePayment";
            break;
        case eOAIObjectType::ARCREDITPAYMENT:
            val = "ArCreditPayment";
            break;
        case eOAIObjectType::AROVERPAYMENT:
            val = "ArOverPayment";
            break;
        case eOAIObjectType::AROVERPAYMENTPAYMENT:
            val = "ArOverpaymentPayment";
            break;
        case eOAIObjectType::AROVERPAYMENTSOURCEPAYMENT:
            val = "ArOverpaymentSourcePayment";
            break;
        case eOAIObjectType::ARPREPAYMENT:
            val = "ArPrepayment";
            break;
        case eOAIObjectType::ARPREPAYMENTPAYMENT:
            val = "ArPrepaymentPayment";
            break;
        case eOAIObjectType::ARPREPAYMENTSOURCEPAYMENT:
            val = "ArPrepaymentSourcePayment";
            break;
        case eOAIObjectType::CASHPAID:
            val = "CashPaid";
            break;
        case eOAIObjectType::CASHREC:
            val = "CashRec";
            break;
        case eOAIObjectType::EXPPAYMENT:
            val = "ExpPayment";
            break;
        case eOAIObjectType::MANJOURNAL:
            val = "ManJournal";
            break;
        case eOAIObjectType::PURCHASEORDER:
            val = "PurchaseOrder";
            break;
        case eOAIObjectType::RECEIPT:
            val = "Receipt";
            break;
        case eOAIObjectType::TRANSFER:
            val = "Transfer";
            break;
        case eOAIObjectType::ACCOUNT:
            val = "Account";
            break;
        case eOAIObjectType::CONTACT:
            val = "Contact";
            break;
        case eOAIObjectType::BUSINESS:
            val = "Business";
            break;
        case eOAIObjectType::EMPLOYEE:
            val = "Employee";
            break;
        case eOAIObjectType::PERSON:
            val = "Person";
            break;
        case eOAIObjectType::USER:
            val = "User";
            break;
        case eOAIObjectType::ORG:
            val = "Org";
            break;
        case eOAIObjectType::FIXEDASSET:
            val = "FixedAsset";
            break;
        case eOAIObjectType::PAYRUN:
            val = "PayRun";
            break;
        case eOAIObjectType::PRICELISTITEM:
            val = "PriceListItem";
            break;
        case eOAIObjectType::BANK:
            val = "Bank";
            break;
        case eOAIObjectType::CURRENT:
            val = "Current";
            break;
        case eOAIObjectType::EQUITY:
            val = "Equity";
            break;
        case eOAIObjectType::EXPENSE:
            val = "Expense";
            break;
        case eOAIObjectType::FIXED:
            val = "Fixed";
            break;
        case eOAIObjectType::LIABILITY:
            val = "Liability";
            break;
        case eOAIObjectType::PREPAYMENT:
            val = "Prepayment";
            break;
        case eOAIObjectType::REVENUE:
            val = "Revenue";
            break;
        case eOAIObjectType::SALES:
            val = "Sales";
            break;
        case eOAIObjectType::OVERHEADS:
            val = "Overheads";
            break;
        case eOAIObjectType::DEPRECIATN:
            val = "Depreciatn";
            break;
        case eOAIObjectType::OTHERINCOME:
            val = "OtherIncome";
            break;
        case eOAIObjectType::DIRECTCOSTS:
            val = "DirectCosts";
            break;
        case eOAIObjectType::CURRLIAB:
            val = "Currliab";
            break;
        case eOAIObjectType::TERMLIAB:
            val = "Termliab";
            break;
        case eOAIObjectType::NONCURRENT:
            val = "NonCurrent";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIObjectType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIObjectType::eOAIObjectType OAIObjectType::getValue() const {
    return m_value;
}

void OAIObjectType::setValue(const OAIObjectType::eOAIObjectType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIObjectType::isSet() const {
    
    return m_value_isSet;
}

bool OAIObjectType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
