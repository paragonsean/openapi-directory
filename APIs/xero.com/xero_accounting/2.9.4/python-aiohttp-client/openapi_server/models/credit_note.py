# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allocation import Allocation
from openapi_server.models.contact import Contact
from openapi_server.models.currency_code import CurrencyCode
from openapi_server.models.line_amount_types import LineAmountTypes
from openapi_server.models.line_item import LineItem
from openapi_server.models.payment import Payment
from openapi_server.models.validation_error import ValidationError
from openapi_server import util


class CreditNote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocations: List[Allocation]=None, applied_amount: float=None, branding_theme_id: str=None, cis_deduction: float=None, cis_rate: float=None, contact: Contact=None, credit_note_id: str=None, credit_note_number: str=None, currency_code: CurrencyCode=None, currency_rate: float=None, _date: str=None, due_date: str=None, fully_paid_on_date: str=None, has_attachments: bool=False, has_errors: bool=False, line_amount_types: LineAmountTypes=None, line_items: List[LineItem]=None, payments: List[Payment]=None, reference: str=None, remaining_credit: float=None, sent_to_contact: bool=None, status: str=None, status_attribute_string: str=None, sub_total: float=None, total: float=None, total_tax: float=None, type: str=None, updated_date_utc: str=None, validation_errors: List[ValidationError]=None, warnings: List[ValidationError]=None):
        """CreditNote - a model defined in OpenAPI

        :param allocations: The allocations of this CreditNote.
        :param applied_amount: The applied_amount of this CreditNote.
        :param branding_theme_id: The branding_theme_id of this CreditNote.
        :param cis_deduction: The cis_deduction of this CreditNote.
        :param cis_rate: The cis_rate of this CreditNote.
        :param contact: The contact of this CreditNote.
        :param credit_note_id: The credit_note_id of this CreditNote.
        :param credit_note_number: The credit_note_number of this CreditNote.
        :param currency_code: The currency_code of this CreditNote.
        :param currency_rate: The currency_rate of this CreditNote.
        :param _date: The _date of this CreditNote.
        :param due_date: The due_date of this CreditNote.
        :param fully_paid_on_date: The fully_paid_on_date of this CreditNote.
        :param has_attachments: The has_attachments of this CreditNote.
        :param has_errors: The has_errors of this CreditNote.
        :param line_amount_types: The line_amount_types of this CreditNote.
        :param line_items: The line_items of this CreditNote.
        :param payments: The payments of this CreditNote.
        :param reference: The reference of this CreditNote.
        :param remaining_credit: The remaining_credit of this CreditNote.
        :param sent_to_contact: The sent_to_contact of this CreditNote.
        :param status: The status of this CreditNote.
        :param status_attribute_string: The status_attribute_string of this CreditNote.
        :param sub_total: The sub_total of this CreditNote.
        :param total: The total of this CreditNote.
        :param total_tax: The total_tax of this CreditNote.
        :param type: The type of this CreditNote.
        :param updated_date_utc: The updated_date_utc of this CreditNote.
        :param validation_errors: The validation_errors of this CreditNote.
        :param warnings: The warnings of this CreditNote.
        """
        self.openapi_types = {
            'allocations': List[Allocation],
            'applied_amount': float,
            'branding_theme_id': str,
            'cis_deduction': float,
            'cis_rate': float,
            'contact': Contact,
            'credit_note_id': str,
            'credit_note_number': str,
            'currency_code': CurrencyCode,
            'currency_rate': float,
            '_date': str,
            'due_date': str,
            'fully_paid_on_date': str,
            'has_attachments': bool,
            'has_errors': bool,
            'line_amount_types': LineAmountTypes,
            'line_items': List[LineItem],
            'payments': List[Payment],
            'reference': str,
            'remaining_credit': float,
            'sent_to_contact': bool,
            'status': str,
            'status_attribute_string': str,
            'sub_total': float,
            'total': float,
            'total_tax': float,
            'type': str,
            'updated_date_utc': str,
            'validation_errors': List[ValidationError],
            'warnings': List[ValidationError]
        }

        self.attribute_map = {
            'allocations': 'Allocations',
            'applied_amount': 'AppliedAmount',
            'branding_theme_id': 'BrandingThemeID',
            'cis_deduction': 'CISDeduction',
            'cis_rate': 'CISRate',
            'contact': 'Contact',
            'credit_note_id': 'CreditNoteID',
            'credit_note_number': 'CreditNoteNumber',
            'currency_code': 'CurrencyCode',
            'currency_rate': 'CurrencyRate',
            '_date': 'Date',
            'due_date': 'DueDate',
            'fully_paid_on_date': 'FullyPaidOnDate',
            'has_attachments': 'HasAttachments',
            'has_errors': 'HasErrors',
            'line_amount_types': 'LineAmountTypes',
            'line_items': 'LineItems',
            'payments': 'Payments',
            'reference': 'Reference',
            'remaining_credit': 'RemainingCredit',
            'sent_to_contact': 'SentToContact',
            'status': 'Status',
            'status_attribute_string': 'StatusAttributeString',
            'sub_total': 'SubTotal',
            'total': 'Total',
            'total_tax': 'TotalTax',
            'type': 'Type',
            'updated_date_utc': 'UpdatedDateUTC',
            'validation_errors': 'ValidationErrors',
            'warnings': 'Warnings'
        }

        self._allocations = allocations
        self._applied_amount = applied_amount
        self._branding_theme_id = branding_theme_id
        self._cis_deduction = cis_deduction
        self._cis_rate = cis_rate
        self._contact = contact
        self._credit_note_id = credit_note_id
        self._credit_note_number = credit_note_number
        self._currency_code = currency_code
        self._currency_rate = currency_rate
        self.__date = _date
        self._due_date = due_date
        self._fully_paid_on_date = fully_paid_on_date
        self._has_attachments = has_attachments
        self._has_errors = has_errors
        self._line_amount_types = line_amount_types
        self._line_items = line_items
        self._payments = payments
        self._reference = reference
        self._remaining_credit = remaining_credit
        self._sent_to_contact = sent_to_contact
        self._status = status
        self._status_attribute_string = status_attribute_string
        self._sub_total = sub_total
        self._total = total
        self._total_tax = total_tax
        self._type = type
        self._updated_date_utc = updated_date_utc
        self._validation_errors = validation_errors
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreditNote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreditNote of this CreditNote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocations(self):
        """Gets the allocations of this CreditNote.

        See Allocations

        :return: The allocations of this CreditNote.
        :rtype: List[Allocation]
        """
        return self._allocations

    @allocations.setter
    def allocations(self, allocations):
        """Sets the allocations of this CreditNote.

        See Allocations

        :param allocations: The allocations of this CreditNote.
        :type allocations: List[Allocation]
        """

        self._allocations = allocations

    @property
    def applied_amount(self):
        """Gets the applied_amount of this CreditNote.

        The amount of applied to an invoice

        :return: The applied_amount of this CreditNote.
        :rtype: float
        """
        return self._applied_amount

    @applied_amount.setter
    def applied_amount(self, applied_amount):
        """Sets the applied_amount of this CreditNote.

        The amount of applied to an invoice

        :param applied_amount: The applied_amount of this CreditNote.
        :type applied_amount: float
        """

        self._applied_amount = applied_amount

    @property
    def branding_theme_id(self):
        """Gets the branding_theme_id of this CreditNote.

        See BrandingThemes

        :return: The branding_theme_id of this CreditNote.
        :rtype: str
        """
        return self._branding_theme_id

    @branding_theme_id.setter
    def branding_theme_id(self, branding_theme_id):
        """Sets the branding_theme_id of this CreditNote.

        See BrandingThemes

        :param branding_theme_id: The branding_theme_id of this CreditNote.
        :type branding_theme_id: str
        """

        self._branding_theme_id = branding_theme_id

    @property
    def cis_deduction(self):
        """Gets the cis_deduction of this CreditNote.

        CIS deduction for UK contractors

        :return: The cis_deduction of this CreditNote.
        :rtype: float
        """
        return self._cis_deduction

    @cis_deduction.setter
    def cis_deduction(self, cis_deduction):
        """Sets the cis_deduction of this CreditNote.

        CIS deduction for UK contractors

        :param cis_deduction: The cis_deduction of this CreditNote.
        :type cis_deduction: float
        """

        self._cis_deduction = cis_deduction

    @property
    def cis_rate(self):
        """Gets the cis_rate of this CreditNote.

        CIS Deduction rate for the organisation

        :return: The cis_rate of this CreditNote.
        :rtype: float
        """
        return self._cis_rate

    @cis_rate.setter
    def cis_rate(self, cis_rate):
        """Sets the cis_rate of this CreditNote.

        CIS Deduction rate for the organisation

        :param cis_rate: The cis_rate of this CreditNote.
        :type cis_rate: float
        """

        self._cis_rate = cis_rate

    @property
    def contact(self):
        """Gets the contact of this CreditNote.


        :return: The contact of this CreditNote.
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this CreditNote.


        :param contact: The contact of this CreditNote.
        :type contact: Contact
        """

        self._contact = contact

    @property
    def credit_note_id(self):
        """Gets the credit_note_id of this CreditNote.

        Xero generated unique identifier

        :return: The credit_note_id of this CreditNote.
        :rtype: str
        """
        return self._credit_note_id

    @credit_note_id.setter
    def credit_note_id(self, credit_note_id):
        """Sets the credit_note_id of this CreditNote.

        Xero generated unique identifier

        :param credit_note_id: The credit_note_id of this CreditNote.
        :type credit_note_id: str
        """

        self._credit_note_id = credit_note_id

    @property
    def credit_note_number(self):
        """Gets the credit_note_number of this CreditNote.

        ACCRECCREDIT – Unique alpha numeric code identifying credit note (when missing will auto-generate from your Organisation Invoice Settings)

        :return: The credit_note_number of this CreditNote.
        :rtype: str
        """
        return self._credit_note_number

    @credit_note_number.setter
    def credit_note_number(self, credit_note_number):
        """Sets the credit_note_number of this CreditNote.

        ACCRECCREDIT – Unique alpha numeric code identifying credit note (when missing will auto-generate from your Organisation Invoice Settings)

        :param credit_note_number: The credit_note_number of this CreditNote.
        :type credit_note_number: str
        """

        self._credit_note_number = credit_note_number

    @property
    def currency_code(self):
        """Gets the currency_code of this CreditNote.


        :return: The currency_code of this CreditNote.
        :rtype: CurrencyCode
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CreditNote.


        :param currency_code: The currency_code of this CreditNote.
        :type currency_code: CurrencyCode
        """

        self._currency_code = currency_code

    @property
    def currency_rate(self):
        """Gets the currency_rate of this CreditNote.

        The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used

        :return: The currency_rate of this CreditNote.
        :rtype: float
        """
        return self._currency_rate

    @currency_rate.setter
    def currency_rate(self, currency_rate):
        """Sets the currency_rate of this CreditNote.

        The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used

        :param currency_rate: The currency_rate of this CreditNote.
        :type currency_rate: float
        """

        self._currency_rate = currency_rate

    @property
    def _date(self):
        """Gets the _date of this CreditNote.

        The date the credit note is issued YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation

        :return: The _date of this CreditNote.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CreditNote.

        The date the credit note is issued YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation

        :param _date: The _date of this CreditNote.
        :type _date: str
        """

        self.__date = _date

    @property
    def due_date(self):
        """Gets the due_date of this CreditNote.

        Date invoice is due – YYYY-MM-DD

        :return: The due_date of this CreditNote.
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this CreditNote.

        Date invoice is due – YYYY-MM-DD

        :param due_date: The due_date of this CreditNote.
        :type due_date: str
        """

        self._due_date = due_date

    @property
    def fully_paid_on_date(self):
        """Gets the fully_paid_on_date of this CreditNote.

        Date when credit note was fully paid(UTC format)

        :return: The fully_paid_on_date of this CreditNote.
        :rtype: str
        """
        return self._fully_paid_on_date

    @fully_paid_on_date.setter
    def fully_paid_on_date(self, fully_paid_on_date):
        """Sets the fully_paid_on_date of this CreditNote.

        Date when credit note was fully paid(UTC format)

        :param fully_paid_on_date: The fully_paid_on_date of this CreditNote.
        :type fully_paid_on_date: str
        """

        self._fully_paid_on_date = fully_paid_on_date

    @property
    def has_attachments(self):
        """Gets the has_attachments of this CreditNote.

        boolean to indicate if a credit note has an attachment

        :return: The has_attachments of this CreditNote.
        :rtype: bool
        """
        return self._has_attachments

    @has_attachments.setter
    def has_attachments(self, has_attachments):
        """Sets the has_attachments of this CreditNote.

        boolean to indicate if a credit note has an attachment

        :param has_attachments: The has_attachments of this CreditNote.
        :type has_attachments: bool
        """

        self._has_attachments = has_attachments

    @property
    def has_errors(self):
        """Gets the has_errors of this CreditNote.

        A boolean to indicate if a credit note has an validation errors

        :return: The has_errors of this CreditNote.
        :rtype: bool
        """
        return self._has_errors

    @has_errors.setter
    def has_errors(self, has_errors):
        """Sets the has_errors of this CreditNote.

        A boolean to indicate if a credit note has an validation errors

        :param has_errors: The has_errors of this CreditNote.
        :type has_errors: bool
        """

        self._has_errors = has_errors

    @property
    def line_amount_types(self):
        """Gets the line_amount_types of this CreditNote.


        :return: The line_amount_types of this CreditNote.
        :rtype: LineAmountTypes
        """
        return self._line_amount_types

    @line_amount_types.setter
    def line_amount_types(self, line_amount_types):
        """Sets the line_amount_types of this CreditNote.


        :param line_amount_types: The line_amount_types of this CreditNote.
        :type line_amount_types: LineAmountTypes
        """

        self._line_amount_types = line_amount_types

    @property
    def line_items(self):
        """Gets the line_items of this CreditNote.

        See Invoice Line Items

        :return: The line_items of this CreditNote.
        :rtype: List[LineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this CreditNote.

        See Invoice Line Items

        :param line_items: The line_items of this CreditNote.
        :type line_items: List[LineItem]
        """

        self._line_items = line_items

    @property
    def payments(self):
        """Gets the payments of this CreditNote.

        See Payments

        :return: The payments of this CreditNote.
        :rtype: List[Payment]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this CreditNote.

        See Payments

        :param payments: The payments of this CreditNote.
        :type payments: List[Payment]
        """

        self._payments = payments

    @property
    def reference(self):
        """Gets the reference of this CreditNote.

        ACCRECCREDIT only – additional reference number

        :return: The reference of this CreditNote.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this CreditNote.

        ACCRECCREDIT only – additional reference number

        :param reference: The reference of this CreditNote.
        :type reference: str
        """

        self._reference = reference

    @property
    def remaining_credit(self):
        """Gets the remaining_credit of this CreditNote.

        The remaining credit balance on the Credit Note

        :return: The remaining_credit of this CreditNote.
        :rtype: float
        """
        return self._remaining_credit

    @remaining_credit.setter
    def remaining_credit(self, remaining_credit):
        """Sets the remaining_credit of this CreditNote.

        The remaining credit balance on the Credit Note

        :param remaining_credit: The remaining_credit of this CreditNote.
        :type remaining_credit: float
        """

        self._remaining_credit = remaining_credit

    @property
    def sent_to_contact(self):
        """Gets the sent_to_contact of this CreditNote.

        boolean to indicate if a credit note has been sent to a contact via  the Xero app (currently read only)

        :return: The sent_to_contact of this CreditNote.
        :rtype: bool
        """
        return self._sent_to_contact

    @sent_to_contact.setter
    def sent_to_contact(self, sent_to_contact):
        """Sets the sent_to_contact of this CreditNote.

        boolean to indicate if a credit note has been sent to a contact via  the Xero app (currently read only)

        :param sent_to_contact: The sent_to_contact of this CreditNote.
        :type sent_to_contact: bool
        """

        self._sent_to_contact = sent_to_contact

    @property
    def status(self):
        """Gets the status of this CreditNote.

        See Credit Note Status Codes

        :return: The status of this CreditNote.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreditNote.

        See Credit Note Status Codes

        :param status: The status of this CreditNote.
        :type status: str
        """
        allowed_values = ["DRAFT", "SUBMITTED", "DELETED", "AUTHORISED", "PAID", "VOIDED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_attribute_string(self):
        """Gets the status_attribute_string of this CreditNote.

        A string to indicate if a invoice status

        :return: The status_attribute_string of this CreditNote.
        :rtype: str
        """
        return self._status_attribute_string

    @status_attribute_string.setter
    def status_attribute_string(self, status_attribute_string):
        """Sets the status_attribute_string of this CreditNote.

        A string to indicate if a invoice status

        :param status_attribute_string: The status_attribute_string of this CreditNote.
        :type status_attribute_string: str
        """

        self._status_attribute_string = status_attribute_string

    @property
    def sub_total(self):
        """Gets the sub_total of this CreditNote.

        The subtotal of the credit note excluding taxes

        :return: The sub_total of this CreditNote.
        :rtype: float
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this CreditNote.

        The subtotal of the credit note excluding taxes

        :param sub_total: The sub_total of this CreditNote.
        :type sub_total: float
        """

        self._sub_total = sub_total

    @property
    def total(self):
        """Gets the total of this CreditNote.

        The total of the Credit Note(subtotal + total tax)

        :return: The total of this CreditNote.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this CreditNote.

        The total of the Credit Note(subtotal + total tax)

        :param total: The total of this CreditNote.
        :type total: float
        """

        self._total = total

    @property
    def total_tax(self):
        """Gets the total_tax of this CreditNote.

        The total tax on the credit note

        :return: The total_tax of this CreditNote.
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this CreditNote.

        The total tax on the credit note

        :param total_tax: The total_tax of this CreditNote.
        :type total_tax: float
        """

        self._total_tax = total_tax

    @property
    def type(self):
        """Gets the type of this CreditNote.

        See Credit Note Types

        :return: The type of this CreditNote.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreditNote.

        See Credit Note Types

        :param type: The type of this CreditNote.
        :type type: str
        """
        allowed_values = ["ACCPAYCREDIT", "ACCRECCREDIT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this CreditNote.

        UTC timestamp of last update to the credit note

        :return: The updated_date_utc of this CreditNote.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this CreditNote.

        UTC timestamp of last update to the credit note

        :param updated_date_utc: The updated_date_utc of this CreditNote.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc

    @property
    def validation_errors(self):
        """Gets the validation_errors of this CreditNote.

        Displays array of validation error messages from the API

        :return: The validation_errors of this CreditNote.
        :rtype: List[ValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this CreditNote.

        Displays array of validation error messages from the API

        :param validation_errors: The validation_errors of this CreditNote.
        :type validation_errors: List[ValidationError]
        """

        self._validation_errors = validation_errors

    @property
    def warnings(self):
        """Gets the warnings of this CreditNote.

        Displays array of warning messages from the API

        :return: The warnings of this CreditNote.
        :rtype: List[ValidationError]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this CreditNote.

        Displays array of warning messages from the API

        :param warnings: The warnings of this CreditNote.
        :type warnings: List[ValidationError]
        """

        self._warnings = warnings
