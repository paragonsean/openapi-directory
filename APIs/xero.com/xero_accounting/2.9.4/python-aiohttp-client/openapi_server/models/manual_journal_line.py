# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tracking_category import TrackingCategory
from openapi_server import util


class ManualJournalLine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, account_id: str=None, description: str=None, is_blank: bool=None, line_amount: float=None, tax_amount: float=None, tax_type: str=None, tracking: List[TrackingCategory]=None):
        """ManualJournalLine - a model defined in OpenAPI

        :param account_code: The account_code of this ManualJournalLine.
        :param account_id: The account_id of this ManualJournalLine.
        :param description: The description of this ManualJournalLine.
        :param is_blank: The is_blank of this ManualJournalLine.
        :param line_amount: The line_amount of this ManualJournalLine.
        :param tax_amount: The tax_amount of this ManualJournalLine.
        :param tax_type: The tax_type of this ManualJournalLine.
        :param tracking: The tracking of this ManualJournalLine.
        """
        self.openapi_types = {
            'account_code': str,
            'account_id': str,
            'description': str,
            'is_blank': bool,
            'line_amount': float,
            'tax_amount': float,
            'tax_type': str,
            'tracking': List[TrackingCategory]
        }

        self.attribute_map = {
            'account_code': 'AccountCode',
            'account_id': 'AccountID',
            'description': 'Description',
            'is_blank': 'IsBlank',
            'line_amount': 'LineAmount',
            'tax_amount': 'TaxAmount',
            'tax_type': 'TaxType',
            'tracking': 'Tracking'
        }

        self._account_code = account_code
        self._account_id = account_id
        self._description = description
        self._is_blank = is_blank
        self._line_amount = line_amount
        self._tax_amount = tax_amount
        self._tax_type = tax_type
        self._tracking = tracking

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManualJournalLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManualJournalLine of this ManualJournalLine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this ManualJournalLine.

        See Accounts

        :return: The account_code of this ManualJournalLine.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this ManualJournalLine.

        See Accounts

        :param account_code: The account_code of this ManualJournalLine.
        :type account_code: str
        """

        self._account_code = account_code

    @property
    def account_id(self):
        """Gets the account_id of this ManualJournalLine.

        See Accounts

        :return: The account_id of this ManualJournalLine.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ManualJournalLine.

        See Accounts

        :param account_id: The account_id of this ManualJournalLine.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def description(self):
        """Gets the description of this ManualJournalLine.

        Description for journal line

        :return: The description of this ManualJournalLine.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ManualJournalLine.

        Description for journal line

        :param description: The description of this ManualJournalLine.
        :type description: str
        """

        self._description = description

    @property
    def is_blank(self):
        """Gets the is_blank of this ManualJournalLine.

        is the line blank

        :return: The is_blank of this ManualJournalLine.
        :rtype: bool
        """
        return self._is_blank

    @is_blank.setter
    def is_blank(self, is_blank):
        """Sets the is_blank of this ManualJournalLine.

        is the line blank

        :param is_blank: The is_blank of this ManualJournalLine.
        :type is_blank: bool
        """

        self._is_blank = is_blank

    @property
    def line_amount(self):
        """Gets the line_amount of this ManualJournalLine.

        total for line. Debits are positive, credits are negative value

        :return: The line_amount of this ManualJournalLine.
        :rtype: float
        """
        return self._line_amount

    @line_amount.setter
    def line_amount(self, line_amount):
        """Sets the line_amount of this ManualJournalLine.

        total for line. Debits are positive, credits are negative value

        :param line_amount: The line_amount of this ManualJournalLine.
        :type line_amount: float
        """

        self._line_amount = line_amount

    @property
    def tax_amount(self):
        """Gets the tax_amount of this ManualJournalLine.

        The calculated tax amount based on the TaxType and LineAmount

        :return: The tax_amount of this ManualJournalLine.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this ManualJournalLine.

        The calculated tax amount based on the TaxType and LineAmount

        :param tax_amount: The tax_amount of this ManualJournalLine.
        :type tax_amount: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_type(self):
        """Gets the tax_type of this ManualJournalLine.

        The tax type from TaxRates

        :return: The tax_type of this ManualJournalLine.
        :rtype: str
        """
        return self._tax_type

    @tax_type.setter
    def tax_type(self, tax_type):
        """Sets the tax_type of this ManualJournalLine.

        The tax type from TaxRates

        :param tax_type: The tax_type of this ManualJournalLine.
        :type tax_type: str
        """

        self._tax_type = tax_type

    @property
    def tracking(self):
        """Gets the tracking of this ManualJournalLine.

        Optional Tracking Category – see Tracking. Any JournalLine can have a maximum of 2 <TrackingCategory> elements.

        :return: The tracking of this ManualJournalLine.
        :rtype: List[TrackingCategory]
        """
        return self._tracking

    @tracking.setter
    def tracking(self, tracking):
        """Sets the tracking of this ManualJournalLine.

        Optional Tracking Category – see Tracking. Any JournalLine can have a maximum of 2 <TrackingCategory> elements.

        :param tracking: The tracking of this ManualJournalLine.
        :type tracking: List[TrackingCategory]
        """

        self._tracking = tracking
