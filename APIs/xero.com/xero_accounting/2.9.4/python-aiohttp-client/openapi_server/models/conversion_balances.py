# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.balance_details import BalanceDetails
from openapi_server import util


class ConversionBalances(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, balance: float=None, balance_details: List[BalanceDetails]=None):
        """ConversionBalances - a model defined in OpenAPI

        :param account_code: The account_code of this ConversionBalances.
        :param balance: The balance of this ConversionBalances.
        :param balance_details: The balance_details of this ConversionBalances.
        """
        self.openapi_types = {
            'account_code': str,
            'balance': float,
            'balance_details': List[BalanceDetails]
        }

        self.attribute_map = {
            'account_code': 'AccountCode',
            'balance': 'Balance',
            'balance_details': 'BalanceDetails'
        }

        self._account_code = account_code
        self._balance = balance
        self._balance_details = balance_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversionBalances':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConversionBalances of this ConversionBalances.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this ConversionBalances.

        The account code for a account

        :return: The account_code of this ConversionBalances.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this ConversionBalances.

        The account code for a account

        :param account_code: The account_code of this ConversionBalances.
        :type account_code: str
        """

        self._account_code = account_code

    @property
    def balance(self):
        """Gets the balance of this ConversionBalances.

        The opening balances of the account. Debits are positive, credits are negative values

        :return: The balance of this ConversionBalances.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this ConversionBalances.

        The opening balances of the account. Debits are positive, credits are negative values

        :param balance: The balance of this ConversionBalances.
        :type balance: float
        """

        self._balance = balance

    @property
    def balance_details(self):
        """Gets the balance_details of this ConversionBalances.


        :return: The balance_details of this ConversionBalances.
        :rtype: List[BalanceDetails]
        """
        return self._balance_details

    @balance_details.setter
    def balance_details(self, balance_details):
        """Sets the balance_details of this ConversionBalances.


        :param balance_details: The balance_details of this ConversionBalances.
        :type balance_details: List[BalanceDetails]
        """

        self._balance_details = balance_details
