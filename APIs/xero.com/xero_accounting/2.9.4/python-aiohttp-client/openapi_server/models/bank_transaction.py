# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account import Account
from openapi_server.models.contact import Contact
from openapi_server.models.currency_code import CurrencyCode
from openapi_server.models.line_amount_types import LineAmountTypes
from openapi_server.models.line_item import LineItem
from openapi_server.models.validation_error import ValidationError
from openapi_server import util


class BankTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bank_account: Account=None, bank_transaction_id: str=None, contact: Contact=None, currency_code: CurrencyCode=None, currency_rate: float=None, _date: str=None, has_attachments: bool=False, is_reconciled: bool=None, line_amount_types: LineAmountTypes=None, line_items: List[LineItem]=None, overpayment_id: str=None, prepayment_id: str=None, reference: str=None, status: str=None, status_attribute_string: str=None, sub_total: float=None, total: float=None, total_tax: float=None, type: str=None, updated_date_utc: str=None, url: str=None, validation_errors: List[ValidationError]=None):
        """BankTransaction - a model defined in OpenAPI

        :param bank_account: The bank_account of this BankTransaction.
        :param bank_transaction_id: The bank_transaction_id of this BankTransaction.
        :param contact: The contact of this BankTransaction.
        :param currency_code: The currency_code of this BankTransaction.
        :param currency_rate: The currency_rate of this BankTransaction.
        :param _date: The _date of this BankTransaction.
        :param has_attachments: The has_attachments of this BankTransaction.
        :param is_reconciled: The is_reconciled of this BankTransaction.
        :param line_amount_types: The line_amount_types of this BankTransaction.
        :param line_items: The line_items of this BankTransaction.
        :param overpayment_id: The overpayment_id of this BankTransaction.
        :param prepayment_id: The prepayment_id of this BankTransaction.
        :param reference: The reference of this BankTransaction.
        :param status: The status of this BankTransaction.
        :param status_attribute_string: The status_attribute_string of this BankTransaction.
        :param sub_total: The sub_total of this BankTransaction.
        :param total: The total of this BankTransaction.
        :param total_tax: The total_tax of this BankTransaction.
        :param type: The type of this BankTransaction.
        :param updated_date_utc: The updated_date_utc of this BankTransaction.
        :param url: The url of this BankTransaction.
        :param validation_errors: The validation_errors of this BankTransaction.
        """
        self.openapi_types = {
            'bank_account': Account,
            'bank_transaction_id': str,
            'contact': Contact,
            'currency_code': CurrencyCode,
            'currency_rate': float,
            '_date': str,
            'has_attachments': bool,
            'is_reconciled': bool,
            'line_amount_types': LineAmountTypes,
            'line_items': List[LineItem],
            'overpayment_id': str,
            'prepayment_id': str,
            'reference': str,
            'status': str,
            'status_attribute_string': str,
            'sub_total': float,
            'total': float,
            'total_tax': float,
            'type': str,
            'updated_date_utc': str,
            'url': str,
            'validation_errors': List[ValidationError]
        }

        self.attribute_map = {
            'bank_account': 'BankAccount',
            'bank_transaction_id': 'BankTransactionID',
            'contact': 'Contact',
            'currency_code': 'CurrencyCode',
            'currency_rate': 'CurrencyRate',
            '_date': 'Date',
            'has_attachments': 'HasAttachments',
            'is_reconciled': 'IsReconciled',
            'line_amount_types': 'LineAmountTypes',
            'line_items': 'LineItems',
            'overpayment_id': 'OverpaymentID',
            'prepayment_id': 'PrepaymentID',
            'reference': 'Reference',
            'status': 'Status',
            'status_attribute_string': 'StatusAttributeString',
            'sub_total': 'SubTotal',
            'total': 'Total',
            'total_tax': 'TotalTax',
            'type': 'Type',
            'updated_date_utc': 'UpdatedDateUTC',
            'url': 'Url',
            'validation_errors': 'ValidationErrors'
        }

        self._bank_account = bank_account
        self._bank_transaction_id = bank_transaction_id
        self._contact = contact
        self._currency_code = currency_code
        self._currency_rate = currency_rate
        self.__date = _date
        self._has_attachments = has_attachments
        self._is_reconciled = is_reconciled
        self._line_amount_types = line_amount_types
        self._line_items = line_items
        self._overpayment_id = overpayment_id
        self._prepayment_id = prepayment_id
        self._reference = reference
        self._status = status
        self._status_attribute_string = status_attribute_string
        self._sub_total = sub_total
        self._total = total
        self._total_tax = total_tax
        self._type = type
        self._updated_date_utc = updated_date_utc
        self._url = url
        self._validation_errors = validation_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankTransaction of this BankTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bank_account(self):
        """Gets the bank_account of this BankTransaction.


        :return: The bank_account of this BankTransaction.
        :rtype: Account
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this BankTransaction.


        :param bank_account: The bank_account of this BankTransaction.
        :type bank_account: Account
        """
        if bank_account is None:
            raise ValueError("Invalid value for `bank_account`, must not be `None`")

        self._bank_account = bank_account

    @property
    def bank_transaction_id(self):
        """Gets the bank_transaction_id of this BankTransaction.

        Xero generated unique identifier for bank transaction

        :return: The bank_transaction_id of this BankTransaction.
        :rtype: str
        """
        return self._bank_transaction_id

    @bank_transaction_id.setter
    def bank_transaction_id(self, bank_transaction_id):
        """Sets the bank_transaction_id of this BankTransaction.

        Xero generated unique identifier for bank transaction

        :param bank_transaction_id: The bank_transaction_id of this BankTransaction.
        :type bank_transaction_id: str
        """

        self._bank_transaction_id = bank_transaction_id

    @property
    def contact(self):
        """Gets the contact of this BankTransaction.


        :return: The contact of this BankTransaction.
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this BankTransaction.


        :param contact: The contact of this BankTransaction.
        :type contact: Contact
        """

        self._contact = contact

    @property
    def currency_code(self):
        """Gets the currency_code of this BankTransaction.


        :return: The currency_code of this BankTransaction.
        :rtype: CurrencyCode
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this BankTransaction.


        :param currency_code: The currency_code of this BankTransaction.
        :type currency_code: CurrencyCode
        """

        self._currency_code = currency_code

    @property
    def currency_rate(self):
        """Gets the currency_rate of this BankTransaction.

        Exchange rate to base currency when money is spent or received. e.g.0.7500 Only used for bank transactions in non base currency. If this isn’t specified for non base currency accounts then either the user-defined rate (preference) or the XE.com day rate will be used. Setting currency is only supported on overpayments.

        :return: The currency_rate of this BankTransaction.
        :rtype: float
        """
        return self._currency_rate

    @currency_rate.setter
    def currency_rate(self, currency_rate):
        """Sets the currency_rate of this BankTransaction.

        Exchange rate to base currency when money is spent or received. e.g.0.7500 Only used for bank transactions in non base currency. If this isn’t specified for non base currency accounts then either the user-defined rate (preference) or the XE.com day rate will be used. Setting currency is only supported on overpayments.

        :param currency_rate: The currency_rate of this BankTransaction.
        :type currency_rate: float
        """

        self._currency_rate = currency_rate

    @property
    def _date(self):
        """Gets the _date of this BankTransaction.

        Date of transaction – YYYY-MM-DD

        :return: The _date of this BankTransaction.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this BankTransaction.

        Date of transaction – YYYY-MM-DD

        :param _date: The _date of this BankTransaction.
        :type _date: str
        """

        self.__date = _date

    @property
    def has_attachments(self):
        """Gets the has_attachments of this BankTransaction.

        Boolean to indicate if a bank transaction has an attachment

        :return: The has_attachments of this BankTransaction.
        :rtype: bool
        """
        return self._has_attachments

    @has_attachments.setter
    def has_attachments(self, has_attachments):
        """Sets the has_attachments of this BankTransaction.

        Boolean to indicate if a bank transaction has an attachment

        :param has_attachments: The has_attachments of this BankTransaction.
        :type has_attachments: bool
        """

        self._has_attachments = has_attachments

    @property
    def is_reconciled(self):
        """Gets the is_reconciled of this BankTransaction.

        Boolean to show if transaction is reconciled

        :return: The is_reconciled of this BankTransaction.
        :rtype: bool
        """
        return self._is_reconciled

    @is_reconciled.setter
    def is_reconciled(self, is_reconciled):
        """Sets the is_reconciled of this BankTransaction.

        Boolean to show if transaction is reconciled

        :param is_reconciled: The is_reconciled of this BankTransaction.
        :type is_reconciled: bool
        """

        self._is_reconciled = is_reconciled

    @property
    def line_amount_types(self):
        """Gets the line_amount_types of this BankTransaction.


        :return: The line_amount_types of this BankTransaction.
        :rtype: LineAmountTypes
        """
        return self._line_amount_types

    @line_amount_types.setter
    def line_amount_types(self, line_amount_types):
        """Sets the line_amount_types of this BankTransaction.


        :param line_amount_types: The line_amount_types of this BankTransaction.
        :type line_amount_types: LineAmountTypes
        """

        self._line_amount_types = line_amount_types

    @property
    def line_items(self):
        """Gets the line_items of this BankTransaction.

        See LineItems

        :return: The line_items of this BankTransaction.
        :rtype: List[LineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this BankTransaction.

        See LineItems

        :param line_items: The line_items of this BankTransaction.
        :type line_items: List[LineItem]
        """
        if line_items is None:
            raise ValueError("Invalid value for `line_items`, must not be `None`")

        self._line_items = line_items

    @property
    def overpayment_id(self):
        """Gets the overpayment_id of this BankTransaction.

        Xero generated unique identifier for an Overpayment. This will be returned on BankTransactions with a Type of SPEND-OVERPAYMENT or RECEIVE-OVERPAYMENT

        :return: The overpayment_id of this BankTransaction.
        :rtype: str
        """
        return self._overpayment_id

    @overpayment_id.setter
    def overpayment_id(self, overpayment_id):
        """Sets the overpayment_id of this BankTransaction.

        Xero generated unique identifier for an Overpayment. This will be returned on BankTransactions with a Type of SPEND-OVERPAYMENT or RECEIVE-OVERPAYMENT

        :param overpayment_id: The overpayment_id of this BankTransaction.
        :type overpayment_id: str
        """

        self._overpayment_id = overpayment_id

    @property
    def prepayment_id(self):
        """Gets the prepayment_id of this BankTransaction.

        Xero generated unique identifier for a Prepayment. This will be returned on BankTransactions with a Type of SPEND-PREPAYMENT or RECEIVE-PREPAYMENT

        :return: The prepayment_id of this BankTransaction.
        :rtype: str
        """
        return self._prepayment_id

    @prepayment_id.setter
    def prepayment_id(self, prepayment_id):
        """Sets the prepayment_id of this BankTransaction.

        Xero generated unique identifier for a Prepayment. This will be returned on BankTransactions with a Type of SPEND-PREPAYMENT or RECEIVE-PREPAYMENT

        :param prepayment_id: The prepayment_id of this BankTransaction.
        :type prepayment_id: str
        """

        self._prepayment_id = prepayment_id

    @property
    def reference(self):
        """Gets the reference of this BankTransaction.

        Reference for the transaction. Only supported for SPEND and RECEIVE transactions.

        :return: The reference of this BankTransaction.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this BankTransaction.

        Reference for the transaction. Only supported for SPEND and RECEIVE transactions.

        :param reference: The reference of this BankTransaction.
        :type reference: str
        """

        self._reference = reference

    @property
    def status(self):
        """Gets the status of this BankTransaction.

        See Bank Transaction Status Codes

        :return: The status of this BankTransaction.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BankTransaction.

        See Bank Transaction Status Codes

        :param status: The status of this BankTransaction.
        :type status: str
        """
        allowed_values = ["AUTHORISED", "DELETED", "VOIDED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_attribute_string(self):
        """Gets the status_attribute_string of this BankTransaction.

        A string to indicate if a invoice status

        :return: The status_attribute_string of this BankTransaction.
        :rtype: str
        """
        return self._status_attribute_string

    @status_attribute_string.setter
    def status_attribute_string(self, status_attribute_string):
        """Sets the status_attribute_string of this BankTransaction.

        A string to indicate if a invoice status

        :param status_attribute_string: The status_attribute_string of this BankTransaction.
        :type status_attribute_string: str
        """

        self._status_attribute_string = status_attribute_string

    @property
    def sub_total(self):
        """Gets the sub_total of this BankTransaction.

        Total of bank transaction excluding taxes

        :return: The sub_total of this BankTransaction.
        :rtype: float
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this BankTransaction.

        Total of bank transaction excluding taxes

        :param sub_total: The sub_total of this BankTransaction.
        :type sub_total: float
        """

        self._sub_total = sub_total

    @property
    def total(self):
        """Gets the total of this BankTransaction.

        Total of bank transaction tax inclusive

        :return: The total of this BankTransaction.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this BankTransaction.

        Total of bank transaction tax inclusive

        :param total: The total of this BankTransaction.
        :type total: float
        """

        self._total = total

    @property
    def total_tax(self):
        """Gets the total_tax of this BankTransaction.

        Total tax on bank transaction

        :return: The total_tax of this BankTransaction.
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this BankTransaction.

        Total tax on bank transaction

        :param total_tax: The total_tax of this BankTransaction.
        :type total_tax: float
        """

        self._total_tax = total_tax

    @property
    def type(self):
        """Gets the type of this BankTransaction.

        See Bank Transaction Types

        :return: The type of this BankTransaction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BankTransaction.

        See Bank Transaction Types

        :param type: The type of this BankTransaction.
        :type type: str
        """
        allowed_values = ["RECEIVE", "RECEIVE-OVERPAYMENT", "RECEIVE-PREPAYMENT", "SPEND", "SPEND-OVERPAYMENT", "SPEND-PREPAYMENT", "RECEIVE-TRANSFER", "SPEND-TRANSFER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this BankTransaction.

        Last modified date UTC format

        :return: The updated_date_utc of this BankTransaction.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this BankTransaction.

        Last modified date UTC format

        :param updated_date_utc: The updated_date_utc of this BankTransaction.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc

    @property
    def url(self):
        """Gets the url of this BankTransaction.

        URL link to a source document – shown as “Go to App Name”

        :return: The url of this BankTransaction.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this BankTransaction.

        URL link to a source document – shown as “Go to App Name”

        :param url: The url of this BankTransaction.
        :type url: str
        """

        self._url = url

    @property
    def validation_errors(self):
        """Gets the validation_errors of this BankTransaction.

        Displays array of validation error messages from the API

        :return: The validation_errors of this BankTransaction.
        :rtype: List[ValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this BankTransaction.

        Displays array of validation error messages from the API

        :param validation_errors: The validation_errors of this BankTransaction.
        :type validation_errors: List[ValidationError]
        """

        self._validation_errors = validation_errors
