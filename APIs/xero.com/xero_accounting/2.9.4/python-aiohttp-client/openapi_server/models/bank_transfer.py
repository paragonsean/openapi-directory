# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account import Account
from openapi_server.models.validation_error import ValidationError
from openapi_server import util


class BankTransfer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, bank_transfer_id: str=None, created_date_utc: str=None, currency_rate: float=None, _date: str=None, from_bank_account: Account=None, from_bank_transaction_id: str=None, has_attachments: bool=False, to_bank_account: Account=None, to_bank_transaction_id: str=None, validation_errors: List[ValidationError]=None):
        """BankTransfer - a model defined in OpenAPI

        :param amount: The amount of this BankTransfer.
        :param bank_transfer_id: The bank_transfer_id of this BankTransfer.
        :param created_date_utc: The created_date_utc of this BankTransfer.
        :param currency_rate: The currency_rate of this BankTransfer.
        :param _date: The _date of this BankTransfer.
        :param from_bank_account: The from_bank_account of this BankTransfer.
        :param from_bank_transaction_id: The from_bank_transaction_id of this BankTransfer.
        :param has_attachments: The has_attachments of this BankTransfer.
        :param to_bank_account: The to_bank_account of this BankTransfer.
        :param to_bank_transaction_id: The to_bank_transaction_id of this BankTransfer.
        :param validation_errors: The validation_errors of this BankTransfer.
        """
        self.openapi_types = {
            'amount': float,
            'bank_transfer_id': str,
            'created_date_utc': str,
            'currency_rate': float,
            '_date': str,
            'from_bank_account': Account,
            'from_bank_transaction_id': str,
            'has_attachments': bool,
            'to_bank_account': Account,
            'to_bank_transaction_id': str,
            'validation_errors': List[ValidationError]
        }

        self.attribute_map = {
            'amount': 'Amount',
            'bank_transfer_id': 'BankTransferID',
            'created_date_utc': 'CreatedDateUTC',
            'currency_rate': 'CurrencyRate',
            '_date': 'Date',
            'from_bank_account': 'FromBankAccount',
            'from_bank_transaction_id': 'FromBankTransactionID',
            'has_attachments': 'HasAttachments',
            'to_bank_account': 'ToBankAccount',
            'to_bank_transaction_id': 'ToBankTransactionID',
            'validation_errors': 'ValidationErrors'
        }

        self._amount = amount
        self._bank_transfer_id = bank_transfer_id
        self._created_date_utc = created_date_utc
        self._currency_rate = currency_rate
        self.__date = _date
        self._from_bank_account = from_bank_account
        self._from_bank_transaction_id = from_bank_transaction_id
        self._has_attachments = has_attachments
        self._to_bank_account = to_bank_account
        self._to_bank_transaction_id = to_bank_transaction_id
        self._validation_errors = validation_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankTransfer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankTransfer of this BankTransfer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this BankTransfer.

        amount of the transaction

        :return: The amount of this BankTransfer.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BankTransfer.

        amount of the transaction

        :param amount: The amount of this BankTransfer.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def bank_transfer_id(self):
        """Gets the bank_transfer_id of this BankTransfer.

        The identifier of the Bank Transfer

        :return: The bank_transfer_id of this BankTransfer.
        :rtype: str
        """
        return self._bank_transfer_id

    @bank_transfer_id.setter
    def bank_transfer_id(self, bank_transfer_id):
        """Sets the bank_transfer_id of this BankTransfer.

        The identifier of the Bank Transfer

        :param bank_transfer_id: The bank_transfer_id of this BankTransfer.
        :type bank_transfer_id: str
        """

        self._bank_transfer_id = bank_transfer_id

    @property
    def created_date_utc(self):
        """Gets the created_date_utc of this BankTransfer.

        UTC timestamp of creation date of bank transfer

        :return: The created_date_utc of this BankTransfer.
        :rtype: str
        """
        return self._created_date_utc

    @created_date_utc.setter
    def created_date_utc(self, created_date_utc):
        """Sets the created_date_utc of this BankTransfer.

        UTC timestamp of creation date of bank transfer

        :param created_date_utc: The created_date_utc of this BankTransfer.
        :type created_date_utc: str
        """

        self._created_date_utc = created_date_utc

    @property
    def currency_rate(self):
        """Gets the currency_rate of this BankTransfer.

        The currency rate

        :return: The currency_rate of this BankTransfer.
        :rtype: float
        """
        return self._currency_rate

    @currency_rate.setter
    def currency_rate(self, currency_rate):
        """Sets the currency_rate of this BankTransfer.

        The currency rate

        :param currency_rate: The currency_rate of this BankTransfer.
        :type currency_rate: float
        """

        self._currency_rate = currency_rate

    @property
    def _date(self):
        """Gets the _date of this BankTransfer.

        The date of the Transfer YYYY-MM-DD

        :return: The _date of this BankTransfer.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this BankTransfer.

        The date of the Transfer YYYY-MM-DD

        :param _date: The _date of this BankTransfer.
        :type _date: str
        """

        self.__date = _date

    @property
    def from_bank_account(self):
        """Gets the from_bank_account of this BankTransfer.


        :return: The from_bank_account of this BankTransfer.
        :rtype: Account
        """
        return self._from_bank_account

    @from_bank_account.setter
    def from_bank_account(self, from_bank_account):
        """Sets the from_bank_account of this BankTransfer.


        :param from_bank_account: The from_bank_account of this BankTransfer.
        :type from_bank_account: Account
        """
        if from_bank_account is None:
            raise ValueError("Invalid value for `from_bank_account`, must not be `None`")

        self._from_bank_account = from_bank_account

    @property
    def from_bank_transaction_id(self):
        """Gets the from_bank_transaction_id of this BankTransfer.

        The Bank Transaction ID for the source account

        :return: The from_bank_transaction_id of this BankTransfer.
        :rtype: str
        """
        return self._from_bank_transaction_id

    @from_bank_transaction_id.setter
    def from_bank_transaction_id(self, from_bank_transaction_id):
        """Sets the from_bank_transaction_id of this BankTransfer.

        The Bank Transaction ID for the source account

        :param from_bank_transaction_id: The from_bank_transaction_id of this BankTransfer.
        :type from_bank_transaction_id: str
        """

        self._from_bank_transaction_id = from_bank_transaction_id

    @property
    def has_attachments(self):
        """Gets the has_attachments of this BankTransfer.

        Boolean to indicate if a Bank Transfer has an attachment

        :return: The has_attachments of this BankTransfer.
        :rtype: bool
        """
        return self._has_attachments

    @has_attachments.setter
    def has_attachments(self, has_attachments):
        """Sets the has_attachments of this BankTransfer.

        Boolean to indicate if a Bank Transfer has an attachment

        :param has_attachments: The has_attachments of this BankTransfer.
        :type has_attachments: bool
        """

        self._has_attachments = has_attachments

    @property
    def to_bank_account(self):
        """Gets the to_bank_account of this BankTransfer.


        :return: The to_bank_account of this BankTransfer.
        :rtype: Account
        """
        return self._to_bank_account

    @to_bank_account.setter
    def to_bank_account(self, to_bank_account):
        """Sets the to_bank_account of this BankTransfer.


        :param to_bank_account: The to_bank_account of this BankTransfer.
        :type to_bank_account: Account
        """
        if to_bank_account is None:
            raise ValueError("Invalid value for `to_bank_account`, must not be `None`")

        self._to_bank_account = to_bank_account

    @property
    def to_bank_transaction_id(self):
        """Gets the to_bank_transaction_id of this BankTransfer.

        The Bank Transaction ID for the destination account

        :return: The to_bank_transaction_id of this BankTransfer.
        :rtype: str
        """
        return self._to_bank_transaction_id

    @to_bank_transaction_id.setter
    def to_bank_transaction_id(self, to_bank_transaction_id):
        """Sets the to_bank_transaction_id of this BankTransfer.

        The Bank Transaction ID for the destination account

        :param to_bank_transaction_id: The to_bank_transaction_id of this BankTransfer.
        :type to_bank_transaction_id: str
        """

        self._to_bank_transaction_id = to_bank_transaction_id

    @property
    def validation_errors(self):
        """Gets the validation_errors of this BankTransfer.

        Displays array of validation error messages from the API

        :return: The validation_errors of this BankTransfer.
        :rtype: List[ValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this BankTransfer.

        Displays array of validation error messages from the API

        :param validation_errors: The validation_errors of this BankTransfer.
        :type validation_errors: List[ValidationError]
        """

        self._validation_errors = validation_errors
