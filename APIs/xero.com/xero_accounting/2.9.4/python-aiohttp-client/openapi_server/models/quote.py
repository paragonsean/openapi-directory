# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact import Contact
from openapi_server.models.currency_code import CurrencyCode
from openapi_server.models.line_item import LineItem
from openapi_server.models.quote_line_amount_types import QuoteLineAmountTypes
from openapi_server.models.quote_status_codes import QuoteStatusCodes
from openapi_server.models.validation_error import ValidationError
from openapi_server import util


class Quote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branding_theme_id: str=None, contact: Contact=None, currency_code: CurrencyCode=None, currency_rate: float=None, _date: str=None, date_string: str=None, expiry_date: str=None, expiry_date_string: str=None, line_amount_types: QuoteLineAmountTypes=None, line_items: List[LineItem]=None, quote_id: str=None, quote_number: str=None, reference: str=None, status: QuoteStatusCodes=None, status_attribute_string: str=None, sub_total: float=None, summary: str=None, terms: str=None, title: str=None, total: float=None, total_discount: float=None, total_tax: float=None, updated_date_utc: str=None, validation_errors: List[ValidationError]=None):
        """Quote - a model defined in OpenAPI

        :param branding_theme_id: The branding_theme_id of this Quote.
        :param contact: The contact of this Quote.
        :param currency_code: The currency_code of this Quote.
        :param currency_rate: The currency_rate of this Quote.
        :param _date: The _date of this Quote.
        :param date_string: The date_string of this Quote.
        :param expiry_date: The expiry_date of this Quote.
        :param expiry_date_string: The expiry_date_string of this Quote.
        :param line_amount_types: The line_amount_types of this Quote.
        :param line_items: The line_items of this Quote.
        :param quote_id: The quote_id of this Quote.
        :param quote_number: The quote_number of this Quote.
        :param reference: The reference of this Quote.
        :param status: The status of this Quote.
        :param status_attribute_string: The status_attribute_string of this Quote.
        :param sub_total: The sub_total of this Quote.
        :param summary: The summary of this Quote.
        :param terms: The terms of this Quote.
        :param title: The title of this Quote.
        :param total: The total of this Quote.
        :param total_discount: The total_discount of this Quote.
        :param total_tax: The total_tax of this Quote.
        :param updated_date_utc: The updated_date_utc of this Quote.
        :param validation_errors: The validation_errors of this Quote.
        """
        self.openapi_types = {
            'branding_theme_id': str,
            'contact': Contact,
            'currency_code': CurrencyCode,
            'currency_rate': float,
            '_date': str,
            'date_string': str,
            'expiry_date': str,
            'expiry_date_string': str,
            'line_amount_types': QuoteLineAmountTypes,
            'line_items': List[LineItem],
            'quote_id': str,
            'quote_number': str,
            'reference': str,
            'status': QuoteStatusCodes,
            'status_attribute_string': str,
            'sub_total': float,
            'summary': str,
            'terms': str,
            'title': str,
            'total': float,
            'total_discount': float,
            'total_tax': float,
            'updated_date_utc': str,
            'validation_errors': List[ValidationError]
        }

        self.attribute_map = {
            'branding_theme_id': 'BrandingThemeID',
            'contact': 'Contact',
            'currency_code': 'CurrencyCode',
            'currency_rate': 'CurrencyRate',
            '_date': 'Date',
            'date_string': 'DateString',
            'expiry_date': 'ExpiryDate',
            'expiry_date_string': 'ExpiryDateString',
            'line_amount_types': 'LineAmountTypes',
            'line_items': 'LineItems',
            'quote_id': 'QuoteID',
            'quote_number': 'QuoteNumber',
            'reference': 'Reference',
            'status': 'Status',
            'status_attribute_string': 'StatusAttributeString',
            'sub_total': 'SubTotal',
            'summary': 'Summary',
            'terms': 'Terms',
            'title': 'Title',
            'total': 'Total',
            'total_discount': 'TotalDiscount',
            'total_tax': 'TotalTax',
            'updated_date_utc': 'UpdatedDateUTC',
            'validation_errors': 'ValidationErrors'
        }

        self._branding_theme_id = branding_theme_id
        self._contact = contact
        self._currency_code = currency_code
        self._currency_rate = currency_rate
        self.__date = _date
        self._date_string = date_string
        self._expiry_date = expiry_date
        self._expiry_date_string = expiry_date_string
        self._line_amount_types = line_amount_types
        self._line_items = line_items
        self._quote_id = quote_id
        self._quote_number = quote_number
        self._reference = reference
        self._status = status
        self._status_attribute_string = status_attribute_string
        self._sub_total = sub_total
        self._summary = summary
        self._terms = terms
        self._title = title
        self._total = total
        self._total_discount = total_discount
        self._total_tax = total_tax
        self._updated_date_utc = updated_date_utc
        self._validation_errors = validation_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Quote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Quote of this Quote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branding_theme_id(self):
        """Gets the branding_theme_id of this Quote.

        See BrandingThemes

        :return: The branding_theme_id of this Quote.
        :rtype: str
        """
        return self._branding_theme_id

    @branding_theme_id.setter
    def branding_theme_id(self, branding_theme_id):
        """Sets the branding_theme_id of this Quote.

        See BrandingThemes

        :param branding_theme_id: The branding_theme_id of this Quote.
        :type branding_theme_id: str
        """

        self._branding_theme_id = branding_theme_id

    @property
    def contact(self):
        """Gets the contact of this Quote.


        :return: The contact of this Quote.
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Quote.


        :param contact: The contact of this Quote.
        :type contact: Contact
        """

        self._contact = contact

    @property
    def currency_code(self):
        """Gets the currency_code of this Quote.


        :return: The currency_code of this Quote.
        :rtype: CurrencyCode
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Quote.


        :param currency_code: The currency_code of this Quote.
        :type currency_code: CurrencyCode
        """

        self._currency_code = currency_code

    @property
    def currency_rate(self):
        """Gets the currency_rate of this Quote.

        The currency rate for a multicurrency quote

        :return: The currency_rate of this Quote.
        :rtype: float
        """
        return self._currency_rate

    @currency_rate.setter
    def currency_rate(self, currency_rate):
        """Sets the currency_rate of this Quote.

        The currency rate for a multicurrency quote

        :param currency_rate: The currency_rate of this Quote.
        :type currency_rate: float
        """

        self._currency_rate = currency_rate

    @property
    def _date(self):
        """Gets the _date of this Quote.

        Date quote was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation

        :return: The _date of this Quote.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Quote.

        Date quote was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation

        :param _date: The _date of this Quote.
        :type _date: str
        """

        self.__date = _date

    @property
    def date_string(self):
        """Gets the date_string of this Quote.

        Date the quote was issued (YYYY-MM-DD)

        :return: The date_string of this Quote.
        :rtype: str
        """
        return self._date_string

    @date_string.setter
    def date_string(self, date_string):
        """Sets the date_string of this Quote.

        Date the quote was issued (YYYY-MM-DD)

        :param date_string: The date_string of this Quote.
        :type date_string: str
        """

        self._date_string = date_string

    @property
    def expiry_date(self):
        """Gets the expiry_date of this Quote.

        Date the quote expires – YYYY-MM-DD.

        :return: The expiry_date of this Quote.
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this Quote.

        Date the quote expires – YYYY-MM-DD.

        :param expiry_date: The expiry_date of this Quote.
        :type expiry_date: str
        """

        self._expiry_date = expiry_date

    @property
    def expiry_date_string(self):
        """Gets the expiry_date_string of this Quote.

        Date the quote expires – YYYY-MM-DD.

        :return: The expiry_date_string of this Quote.
        :rtype: str
        """
        return self._expiry_date_string

    @expiry_date_string.setter
    def expiry_date_string(self, expiry_date_string):
        """Sets the expiry_date_string of this Quote.

        Date the quote expires – YYYY-MM-DD.

        :param expiry_date_string: The expiry_date_string of this Quote.
        :type expiry_date_string: str
        """

        self._expiry_date_string = expiry_date_string

    @property
    def line_amount_types(self):
        """Gets the line_amount_types of this Quote.


        :return: The line_amount_types of this Quote.
        :rtype: QuoteLineAmountTypes
        """
        return self._line_amount_types

    @line_amount_types.setter
    def line_amount_types(self, line_amount_types):
        """Sets the line_amount_types of this Quote.


        :param line_amount_types: The line_amount_types of this Quote.
        :type line_amount_types: QuoteLineAmountTypes
        """

        self._line_amount_types = line_amount_types

    @property
    def line_items(self):
        """Gets the line_items of this Quote.

        See LineItems

        :return: The line_items of this Quote.
        :rtype: List[LineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this Quote.

        See LineItems

        :param line_items: The line_items of this Quote.
        :type line_items: List[LineItem]
        """

        self._line_items = line_items

    @property
    def quote_id(self):
        """Gets the quote_id of this Quote.

        QuoteID GUID is automatically generated and is returned after create or GET.

        :return: The quote_id of this Quote.
        :rtype: str
        """
        return self._quote_id

    @quote_id.setter
    def quote_id(self, quote_id):
        """Sets the quote_id of this Quote.

        QuoteID GUID is automatically generated and is returned after create or GET.

        :param quote_id: The quote_id of this Quote.
        :type quote_id: str
        """

        self._quote_id = quote_id

    @property
    def quote_number(self):
        """Gets the quote_number of this Quote.

        Unique alpha numeric code identifying a quote (Max Length = 255)

        :return: The quote_number of this Quote.
        :rtype: str
        """
        return self._quote_number

    @quote_number.setter
    def quote_number(self, quote_number):
        """Sets the quote_number of this Quote.

        Unique alpha numeric code identifying a quote (Max Length = 255)

        :param quote_number: The quote_number of this Quote.
        :type quote_number: str
        """
        if quote_number is not None and len(quote_number) > 255:
            raise ValueError("Invalid value for `quote_number`, length must be less than or equal to `255`")

        self._quote_number = quote_number

    @property
    def reference(self):
        """Gets the reference of this Quote.

        Additional reference number

        :return: The reference of this Quote.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Quote.

        Additional reference number

        :param reference: The reference of this Quote.
        :type reference: str
        """
        if reference is not None and len(reference) > 4000:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `4000`")

        self._reference = reference

    @property
    def status(self):
        """Gets the status of this Quote.


        :return: The status of this Quote.
        :rtype: QuoteStatusCodes
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Quote.


        :param status: The status of this Quote.
        :type status: QuoteStatusCodes
        """

        self._status = status

    @property
    def status_attribute_string(self):
        """Gets the status_attribute_string of this Quote.

        A string to indicate if a invoice status

        :return: The status_attribute_string of this Quote.
        :rtype: str
        """
        return self._status_attribute_string

    @status_attribute_string.setter
    def status_attribute_string(self, status_attribute_string):
        """Sets the status_attribute_string of this Quote.

        A string to indicate if a invoice status

        :param status_attribute_string: The status_attribute_string of this Quote.
        :type status_attribute_string: str
        """

        self._status_attribute_string = status_attribute_string

    @property
    def sub_total(self):
        """Gets the sub_total of this Quote.

        Total of quote excluding taxes.

        :return: The sub_total of this Quote.
        :rtype: float
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this Quote.

        Total of quote excluding taxes.

        :param sub_total: The sub_total of this Quote.
        :type sub_total: float
        """

        self._sub_total = sub_total

    @property
    def summary(self):
        """Gets the summary of this Quote.

        Summary text for the quote

        :return: The summary of this Quote.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Quote.

        Summary text for the quote

        :param summary: The summary of this Quote.
        :type summary: str
        """
        if summary is not None and len(summary) > 3000:
            raise ValueError("Invalid value for `summary`, length must be less than or equal to `3000`")

        self._summary = summary

    @property
    def terms(self):
        """Gets the terms of this Quote.

        Terms of the quote

        :return: The terms of this Quote.
        :rtype: str
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this Quote.

        Terms of the quote

        :param terms: The terms of this Quote.
        :type terms: str
        """
        if terms is not None and len(terms) > 4000:
            raise ValueError("Invalid value for `terms`, length must be less than or equal to `4000`")

        self._terms = terms

    @property
    def title(self):
        """Gets the title of this Quote.

        Title text for the quote

        :return: The title of this Quote.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Quote.

        Title text for the quote

        :param title: The title of this Quote.
        :type title: str
        """
        if title is not None and len(title) > 100:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `100`")

        self._title = title

    @property
    def total(self):
        """Gets the total of this Quote.

        Total of Quote tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts

        :return: The total of this Quote.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Quote.

        Total of Quote tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts

        :param total: The total of this Quote.
        :type total: float
        """

        self._total = total

    @property
    def total_discount(self):
        """Gets the total_discount of this Quote.

        Total of discounts applied on the quote line items

        :return: The total_discount of this Quote.
        :rtype: float
        """
        return self._total_discount

    @total_discount.setter
    def total_discount(self, total_discount):
        """Sets the total_discount of this Quote.

        Total of discounts applied on the quote line items

        :param total_discount: The total_discount of this Quote.
        :type total_discount: float
        """

        self._total_discount = total_discount

    @property
    def total_tax(self):
        """Gets the total_tax of this Quote.

        Total tax on quote

        :return: The total_tax of this Quote.
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this Quote.

        Total tax on quote

        :param total_tax: The total_tax of this Quote.
        :type total_tax: float
        """

        self._total_tax = total_tax

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this Quote.

        Last modified date UTC format

        :return: The updated_date_utc of this Quote.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this Quote.

        Last modified date UTC format

        :param updated_date_utc: The updated_date_utc of this Quote.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc

    @property
    def validation_errors(self):
        """Gets the validation_errors of this Quote.

        Displays array of validation error messages from the API

        :return: The validation_errors of this Quote.
        :rtype: List[ValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this Quote.

        Displays array of validation error messages from the API

        :param validation_errors: The validation_errors of this Quote.
        :type validation_errors: List[ValidationError]
        """

        self._validation_errors = validation_errors
