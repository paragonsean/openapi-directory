# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaxComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_compound: bool=None, is_non_recoverable: bool=None, name: str=None, rate: float=None):
        """TaxComponent - a model defined in OpenAPI

        :param is_compound: The is_compound of this TaxComponent.
        :param is_non_recoverable: The is_non_recoverable of this TaxComponent.
        :param name: The name of this TaxComponent.
        :param rate: The rate of this TaxComponent.
        """
        self.openapi_types = {
            'is_compound': bool,
            'is_non_recoverable': bool,
            'name': str,
            'rate': float
        }

        self.attribute_map = {
            'is_compound': 'IsCompound',
            'is_non_recoverable': 'IsNonRecoverable',
            'name': 'Name',
            'rate': 'Rate'
        }

        self._is_compound = is_compound
        self._is_non_recoverable = is_non_recoverable
        self._name = name
        self._rate = rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaxComponent of this TaxComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_compound(self):
        """Gets the is_compound of this TaxComponent.

        Boolean to describe if Tax rate is compounded.

        :return: The is_compound of this TaxComponent.
        :rtype: bool
        """
        return self._is_compound

    @is_compound.setter
    def is_compound(self, is_compound):
        """Sets the is_compound of this TaxComponent.

        Boolean to describe if Tax rate is compounded.

        :param is_compound: The is_compound of this TaxComponent.
        :type is_compound: bool
        """

        self._is_compound = is_compound

    @property
    def is_non_recoverable(self):
        """Gets the is_non_recoverable of this TaxComponent.

        Boolean to describe if tax rate is non-recoverable. Non-recoverable rates are only applicable to Canadian organisations

        :return: The is_non_recoverable of this TaxComponent.
        :rtype: bool
        """
        return self._is_non_recoverable

    @is_non_recoverable.setter
    def is_non_recoverable(self, is_non_recoverable):
        """Sets the is_non_recoverable of this TaxComponent.

        Boolean to describe if tax rate is non-recoverable. Non-recoverable rates are only applicable to Canadian organisations

        :param is_non_recoverable: The is_non_recoverable of this TaxComponent.
        :type is_non_recoverable: bool
        """

        self._is_non_recoverable = is_non_recoverable

    @property
    def name(self):
        """Gets the name of this TaxComponent.

        Name of Tax Component

        :return: The name of this TaxComponent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaxComponent.

        Name of Tax Component

        :param name: The name of this TaxComponent.
        :type name: str
        """

        self._name = name

    @property
    def rate(self):
        """Gets the rate of this TaxComponent.

        Tax Rate (up to 4dp)

        :return: The rate of this TaxComponent.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this TaxComponent.

        Tax Rate (up to 4dp)

        :param rate: The rate of this TaxComponent.
        :type rate: float
        """

        self._rate = rate
