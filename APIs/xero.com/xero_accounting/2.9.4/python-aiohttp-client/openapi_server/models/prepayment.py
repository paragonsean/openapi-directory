# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allocation import Allocation
from openapi_server.models.attachment import Attachment
from openapi_server.models.contact import Contact
from openapi_server.models.currency_code import CurrencyCode
from openapi_server.models.line_amount_types import LineAmountTypes
from openapi_server.models.line_item import LineItem
from openapi_server import util


class Prepayment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocations: List[Allocation]=None, applied_amount: float=None, attachments: List[Attachment]=None, contact: Contact=None, currency_code: CurrencyCode=None, currency_rate: float=None, _date: str=None, has_attachments: bool=False, line_amount_types: LineAmountTypes=None, line_items: List[LineItem]=None, prepayment_id: str=None, reference: str=None, remaining_credit: float=None, status: str=None, sub_total: float=None, total: float=None, total_tax: float=None, type: str=None, updated_date_utc: str=None):
        """Prepayment - a model defined in OpenAPI

        :param allocations: The allocations of this Prepayment.
        :param applied_amount: The applied_amount of this Prepayment.
        :param attachments: The attachments of this Prepayment.
        :param contact: The contact of this Prepayment.
        :param currency_code: The currency_code of this Prepayment.
        :param currency_rate: The currency_rate of this Prepayment.
        :param _date: The _date of this Prepayment.
        :param has_attachments: The has_attachments of this Prepayment.
        :param line_amount_types: The line_amount_types of this Prepayment.
        :param line_items: The line_items of this Prepayment.
        :param prepayment_id: The prepayment_id of this Prepayment.
        :param reference: The reference of this Prepayment.
        :param remaining_credit: The remaining_credit of this Prepayment.
        :param status: The status of this Prepayment.
        :param sub_total: The sub_total of this Prepayment.
        :param total: The total of this Prepayment.
        :param total_tax: The total_tax of this Prepayment.
        :param type: The type of this Prepayment.
        :param updated_date_utc: The updated_date_utc of this Prepayment.
        """
        self.openapi_types = {
            'allocations': List[Allocation],
            'applied_amount': float,
            'attachments': List[Attachment],
            'contact': Contact,
            'currency_code': CurrencyCode,
            'currency_rate': float,
            '_date': str,
            'has_attachments': bool,
            'line_amount_types': LineAmountTypes,
            'line_items': List[LineItem],
            'prepayment_id': str,
            'reference': str,
            'remaining_credit': float,
            'status': str,
            'sub_total': float,
            'total': float,
            'total_tax': float,
            'type': str,
            'updated_date_utc': str
        }

        self.attribute_map = {
            'allocations': 'Allocations',
            'applied_amount': 'AppliedAmount',
            'attachments': 'Attachments',
            'contact': 'Contact',
            'currency_code': 'CurrencyCode',
            'currency_rate': 'CurrencyRate',
            '_date': 'Date',
            'has_attachments': 'HasAttachments',
            'line_amount_types': 'LineAmountTypes',
            'line_items': 'LineItems',
            'prepayment_id': 'PrepaymentID',
            'reference': 'Reference',
            'remaining_credit': 'RemainingCredit',
            'status': 'Status',
            'sub_total': 'SubTotal',
            'total': 'Total',
            'total_tax': 'TotalTax',
            'type': 'Type',
            'updated_date_utc': 'UpdatedDateUTC'
        }

        self._allocations = allocations
        self._applied_amount = applied_amount
        self._attachments = attachments
        self._contact = contact
        self._currency_code = currency_code
        self._currency_rate = currency_rate
        self.__date = _date
        self._has_attachments = has_attachments
        self._line_amount_types = line_amount_types
        self._line_items = line_items
        self._prepayment_id = prepayment_id
        self._reference = reference
        self._remaining_credit = remaining_credit
        self._status = status
        self._sub_total = sub_total
        self._total = total
        self._total_tax = total_tax
        self._type = type
        self._updated_date_utc = updated_date_utc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Prepayment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Prepayment of this Prepayment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocations(self):
        """Gets the allocations of this Prepayment.

        See Allocations

        :return: The allocations of this Prepayment.
        :rtype: List[Allocation]
        """
        return self._allocations

    @allocations.setter
    def allocations(self, allocations):
        """Sets the allocations of this Prepayment.

        See Allocations

        :param allocations: The allocations of this Prepayment.
        :type allocations: List[Allocation]
        """

        self._allocations = allocations

    @property
    def applied_amount(self):
        """Gets the applied_amount of this Prepayment.

        The amount of applied to an invoice

        :return: The applied_amount of this Prepayment.
        :rtype: float
        """
        return self._applied_amount

    @applied_amount.setter
    def applied_amount(self, applied_amount):
        """Sets the applied_amount of this Prepayment.

        The amount of applied to an invoice

        :param applied_amount: The applied_amount of this Prepayment.
        :type applied_amount: float
        """

        self._applied_amount = applied_amount

    @property
    def attachments(self):
        """Gets the attachments of this Prepayment.

        See Attachments

        :return: The attachments of this Prepayment.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Prepayment.

        See Attachments

        :param attachments: The attachments of this Prepayment.
        :type attachments: List[Attachment]
        """

        self._attachments = attachments

    @property
    def contact(self):
        """Gets the contact of this Prepayment.


        :return: The contact of this Prepayment.
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Prepayment.


        :param contact: The contact of this Prepayment.
        :type contact: Contact
        """

        self._contact = contact

    @property
    def currency_code(self):
        """Gets the currency_code of this Prepayment.


        :return: The currency_code of this Prepayment.
        :rtype: CurrencyCode
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Prepayment.


        :param currency_code: The currency_code of this Prepayment.
        :type currency_code: CurrencyCode
        """

        self._currency_code = currency_code

    @property
    def currency_rate(self):
        """Gets the currency_rate of this Prepayment.

        The currency rate for a multicurrency prepayment. If no rate is specified, the XE.com day rate is used

        :return: The currency_rate of this Prepayment.
        :rtype: float
        """
        return self._currency_rate

    @currency_rate.setter
    def currency_rate(self, currency_rate):
        """Sets the currency_rate of this Prepayment.

        The currency rate for a multicurrency prepayment. If no rate is specified, the XE.com day rate is used

        :param currency_rate: The currency_rate of this Prepayment.
        :type currency_rate: float
        """

        self._currency_rate = currency_rate

    @property
    def _date(self):
        """Gets the _date of this Prepayment.

        The date the prepayment is created YYYY-MM-DD

        :return: The _date of this Prepayment.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Prepayment.

        The date the prepayment is created YYYY-MM-DD

        :param _date: The _date of this Prepayment.
        :type _date: str
        """

        self.__date = _date

    @property
    def has_attachments(self):
        """Gets the has_attachments of this Prepayment.

        boolean to indicate if a prepayment has an attachment

        :return: The has_attachments of this Prepayment.
        :rtype: bool
        """
        return self._has_attachments

    @has_attachments.setter
    def has_attachments(self, has_attachments):
        """Sets the has_attachments of this Prepayment.

        boolean to indicate if a prepayment has an attachment

        :param has_attachments: The has_attachments of this Prepayment.
        :type has_attachments: bool
        """

        self._has_attachments = has_attachments

    @property
    def line_amount_types(self):
        """Gets the line_amount_types of this Prepayment.


        :return: The line_amount_types of this Prepayment.
        :rtype: LineAmountTypes
        """
        return self._line_amount_types

    @line_amount_types.setter
    def line_amount_types(self, line_amount_types):
        """Sets the line_amount_types of this Prepayment.


        :param line_amount_types: The line_amount_types of this Prepayment.
        :type line_amount_types: LineAmountTypes
        """

        self._line_amount_types = line_amount_types

    @property
    def line_items(self):
        """Gets the line_items of this Prepayment.

        See Prepayment Line Items

        :return: The line_items of this Prepayment.
        :rtype: List[LineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this Prepayment.

        See Prepayment Line Items

        :param line_items: The line_items of this Prepayment.
        :type line_items: List[LineItem]
        """

        self._line_items = line_items

    @property
    def prepayment_id(self):
        """Gets the prepayment_id of this Prepayment.

        Xero generated unique identifier

        :return: The prepayment_id of this Prepayment.
        :rtype: str
        """
        return self._prepayment_id

    @prepayment_id.setter
    def prepayment_id(self, prepayment_id):
        """Sets the prepayment_id of this Prepayment.

        Xero generated unique identifier

        :param prepayment_id: The prepayment_id of this Prepayment.
        :type prepayment_id: str
        """

        self._prepayment_id = prepayment_id

    @property
    def reference(self):
        """Gets the reference of this Prepayment.

        Returns Invoice number field. Reference field isn't available.

        :return: The reference of this Prepayment.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Prepayment.

        Returns Invoice number field. Reference field isn't available.

        :param reference: The reference of this Prepayment.
        :type reference: str
        """

        self._reference = reference

    @property
    def remaining_credit(self):
        """Gets the remaining_credit of this Prepayment.

        The remaining credit balance on the prepayment

        :return: The remaining_credit of this Prepayment.
        :rtype: float
        """
        return self._remaining_credit

    @remaining_credit.setter
    def remaining_credit(self, remaining_credit):
        """Sets the remaining_credit of this Prepayment.

        The remaining credit balance on the prepayment

        :param remaining_credit: The remaining_credit of this Prepayment.
        :type remaining_credit: float
        """

        self._remaining_credit = remaining_credit

    @property
    def status(self):
        """Gets the status of this Prepayment.

        See Prepayment Status Codes

        :return: The status of this Prepayment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Prepayment.

        See Prepayment Status Codes

        :param status: The status of this Prepayment.
        :type status: str
        """
        allowed_values = ["AUTHORISED", "PAID", "VOIDED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sub_total(self):
        """Gets the sub_total of this Prepayment.

        The subtotal of the prepayment excluding taxes

        :return: The sub_total of this Prepayment.
        :rtype: float
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this Prepayment.

        The subtotal of the prepayment excluding taxes

        :param sub_total: The sub_total of this Prepayment.
        :type sub_total: float
        """

        self._sub_total = sub_total

    @property
    def total(self):
        """Gets the total of this Prepayment.

        The total of the prepayment(subtotal + total tax)

        :return: The total of this Prepayment.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Prepayment.

        The total of the prepayment(subtotal + total tax)

        :param total: The total of this Prepayment.
        :type total: float
        """

        self._total = total

    @property
    def total_tax(self):
        """Gets the total_tax of this Prepayment.

        The total tax on the prepayment

        :return: The total_tax of this Prepayment.
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this Prepayment.

        The total tax on the prepayment

        :param total_tax: The total_tax of this Prepayment.
        :type total_tax: float
        """

        self._total_tax = total_tax

    @property
    def type(self):
        """Gets the type of this Prepayment.

        See Prepayment Types

        :return: The type of this Prepayment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Prepayment.

        See Prepayment Types

        :param type: The type of this Prepayment.
        :type type: str
        """
        allowed_values = ["RECEIVE-PREPAYMENT", "SPEND-PREPAYMENT", "ARPREPAYMENT", "APPREPAYMENT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this Prepayment.

        UTC timestamp of last update to the prepayment

        :return: The updated_date_utc of this Prepayment.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this Prepayment.

        UTC timestamp of last update to the prepayment

        :param updated_date_utc: The updated_date_utc of this Prepayment.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc
