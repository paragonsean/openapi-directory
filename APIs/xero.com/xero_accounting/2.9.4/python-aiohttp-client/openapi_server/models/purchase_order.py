# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment import Attachment
from openapi_server.models.contact import Contact
from openapi_server.models.currency_code import CurrencyCode
from openapi_server.models.line_amount_types import LineAmountTypes
from openapi_server.models.line_item import LineItem
from openapi_server.models.validation_error import ValidationError
from openapi_server import util


class PurchaseOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[Attachment]=None, attention_to: str=None, branding_theme_id: str=None, contact: Contact=None, currency_code: CurrencyCode=None, currency_rate: float=None, _date: str=None, delivery_address: str=None, delivery_date: str=None, delivery_instructions: str=None, expected_arrival_date: str=None, has_attachments: bool=False, line_amount_types: LineAmountTypes=None, line_items: List[LineItem]=None, purchase_order_id: str=None, purchase_order_number: str=None, reference: str=None, sent_to_contact: bool=None, status: str=None, status_attribute_string: str=None, sub_total: float=None, telephone: str=None, total: float=None, total_discount: float=None, total_tax: float=None, updated_date_utc: str=None, validation_errors: List[ValidationError]=None, warnings: List[ValidationError]=None):
        """PurchaseOrder - a model defined in OpenAPI

        :param attachments: The attachments of this PurchaseOrder.
        :param attention_to: The attention_to of this PurchaseOrder.
        :param branding_theme_id: The branding_theme_id of this PurchaseOrder.
        :param contact: The contact of this PurchaseOrder.
        :param currency_code: The currency_code of this PurchaseOrder.
        :param currency_rate: The currency_rate of this PurchaseOrder.
        :param _date: The _date of this PurchaseOrder.
        :param delivery_address: The delivery_address of this PurchaseOrder.
        :param delivery_date: The delivery_date of this PurchaseOrder.
        :param delivery_instructions: The delivery_instructions of this PurchaseOrder.
        :param expected_arrival_date: The expected_arrival_date of this PurchaseOrder.
        :param has_attachments: The has_attachments of this PurchaseOrder.
        :param line_amount_types: The line_amount_types of this PurchaseOrder.
        :param line_items: The line_items of this PurchaseOrder.
        :param purchase_order_id: The purchase_order_id of this PurchaseOrder.
        :param purchase_order_number: The purchase_order_number of this PurchaseOrder.
        :param reference: The reference of this PurchaseOrder.
        :param sent_to_contact: The sent_to_contact of this PurchaseOrder.
        :param status: The status of this PurchaseOrder.
        :param status_attribute_string: The status_attribute_string of this PurchaseOrder.
        :param sub_total: The sub_total of this PurchaseOrder.
        :param telephone: The telephone of this PurchaseOrder.
        :param total: The total of this PurchaseOrder.
        :param total_discount: The total_discount of this PurchaseOrder.
        :param total_tax: The total_tax of this PurchaseOrder.
        :param updated_date_utc: The updated_date_utc of this PurchaseOrder.
        :param validation_errors: The validation_errors of this PurchaseOrder.
        :param warnings: The warnings of this PurchaseOrder.
        """
        self.openapi_types = {
            'attachments': List[Attachment],
            'attention_to': str,
            'branding_theme_id': str,
            'contact': Contact,
            'currency_code': CurrencyCode,
            'currency_rate': float,
            '_date': str,
            'delivery_address': str,
            'delivery_date': str,
            'delivery_instructions': str,
            'expected_arrival_date': str,
            'has_attachments': bool,
            'line_amount_types': LineAmountTypes,
            'line_items': List[LineItem],
            'purchase_order_id': str,
            'purchase_order_number': str,
            'reference': str,
            'sent_to_contact': bool,
            'status': str,
            'status_attribute_string': str,
            'sub_total': float,
            'telephone': str,
            'total': float,
            'total_discount': float,
            'total_tax': float,
            'updated_date_utc': str,
            'validation_errors': List[ValidationError],
            'warnings': List[ValidationError]
        }

        self.attribute_map = {
            'attachments': 'Attachments',
            'attention_to': 'AttentionTo',
            'branding_theme_id': 'BrandingThemeID',
            'contact': 'Contact',
            'currency_code': 'CurrencyCode',
            'currency_rate': 'CurrencyRate',
            '_date': 'Date',
            'delivery_address': 'DeliveryAddress',
            'delivery_date': 'DeliveryDate',
            'delivery_instructions': 'DeliveryInstructions',
            'expected_arrival_date': 'ExpectedArrivalDate',
            'has_attachments': 'HasAttachments',
            'line_amount_types': 'LineAmountTypes',
            'line_items': 'LineItems',
            'purchase_order_id': 'PurchaseOrderID',
            'purchase_order_number': 'PurchaseOrderNumber',
            'reference': 'Reference',
            'sent_to_contact': 'SentToContact',
            'status': 'Status',
            'status_attribute_string': 'StatusAttributeString',
            'sub_total': 'SubTotal',
            'telephone': 'Telephone',
            'total': 'Total',
            'total_discount': 'TotalDiscount',
            'total_tax': 'TotalTax',
            'updated_date_utc': 'UpdatedDateUTC',
            'validation_errors': 'ValidationErrors',
            'warnings': 'Warnings'
        }

        self._attachments = attachments
        self._attention_to = attention_to
        self._branding_theme_id = branding_theme_id
        self._contact = contact
        self._currency_code = currency_code
        self._currency_rate = currency_rate
        self.__date = _date
        self._delivery_address = delivery_address
        self._delivery_date = delivery_date
        self._delivery_instructions = delivery_instructions
        self._expected_arrival_date = expected_arrival_date
        self._has_attachments = has_attachments
        self._line_amount_types = line_amount_types
        self._line_items = line_items
        self._purchase_order_id = purchase_order_id
        self._purchase_order_number = purchase_order_number
        self._reference = reference
        self._sent_to_contact = sent_to_contact
        self._status = status
        self._status_attribute_string = status_attribute_string
        self._sub_total = sub_total
        self._telephone = telephone
        self._total = total
        self._total_discount = total_discount
        self._total_tax = total_tax
        self._updated_date_utc = updated_date_utc
        self._validation_errors = validation_errors
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PurchaseOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PurchaseOrder of this PurchaseOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this PurchaseOrder.

        Displays array of attachments from the API

        :return: The attachments of this PurchaseOrder.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this PurchaseOrder.

        Displays array of attachments from the API

        :param attachments: The attachments of this PurchaseOrder.
        :type attachments: List[Attachment]
        """

        self._attachments = attachments

    @property
    def attention_to(self):
        """Gets the attention_to of this PurchaseOrder.

        The person that the delivery is going to

        :return: The attention_to of this PurchaseOrder.
        :rtype: str
        """
        return self._attention_to

    @attention_to.setter
    def attention_to(self, attention_to):
        """Sets the attention_to of this PurchaseOrder.

        The person that the delivery is going to

        :param attention_to: The attention_to of this PurchaseOrder.
        :type attention_to: str
        """

        self._attention_to = attention_to

    @property
    def branding_theme_id(self):
        """Gets the branding_theme_id of this PurchaseOrder.

        See BrandingThemes

        :return: The branding_theme_id of this PurchaseOrder.
        :rtype: str
        """
        return self._branding_theme_id

    @branding_theme_id.setter
    def branding_theme_id(self, branding_theme_id):
        """Sets the branding_theme_id of this PurchaseOrder.

        See BrandingThemes

        :param branding_theme_id: The branding_theme_id of this PurchaseOrder.
        :type branding_theme_id: str
        """

        self._branding_theme_id = branding_theme_id

    @property
    def contact(self):
        """Gets the contact of this PurchaseOrder.


        :return: The contact of this PurchaseOrder.
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this PurchaseOrder.


        :param contact: The contact of this PurchaseOrder.
        :type contact: Contact
        """

        self._contact = contact

    @property
    def currency_code(self):
        """Gets the currency_code of this PurchaseOrder.


        :return: The currency_code of this PurchaseOrder.
        :rtype: CurrencyCode
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this PurchaseOrder.


        :param currency_code: The currency_code of this PurchaseOrder.
        :type currency_code: CurrencyCode
        """

        self._currency_code = currency_code

    @property
    def currency_rate(self):
        """Gets the currency_rate of this PurchaseOrder.

        The currency rate for a multicurrency purchase order. If no rate is specified, the XE.com day rate is used.

        :return: The currency_rate of this PurchaseOrder.
        :rtype: float
        """
        return self._currency_rate

    @currency_rate.setter
    def currency_rate(self, currency_rate):
        """Sets the currency_rate of this PurchaseOrder.

        The currency rate for a multicurrency purchase order. If no rate is specified, the XE.com day rate is used.

        :param currency_rate: The currency_rate of this PurchaseOrder.
        :type currency_rate: float
        """

        self._currency_rate = currency_rate

    @property
    def _date(self):
        """Gets the _date of this PurchaseOrder.

        Date purchase order was issued – YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation

        :return: The _date of this PurchaseOrder.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PurchaseOrder.

        Date purchase order was issued – YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation

        :param _date: The _date of this PurchaseOrder.
        :type _date: str
        """

        self.__date = _date

    @property
    def delivery_address(self):
        """Gets the delivery_address of this PurchaseOrder.

        The address the goods are to be delivered to

        :return: The delivery_address of this PurchaseOrder.
        :rtype: str
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this PurchaseOrder.

        The address the goods are to be delivered to

        :param delivery_address: The delivery_address of this PurchaseOrder.
        :type delivery_address: str
        """

        self._delivery_address = delivery_address

    @property
    def delivery_date(self):
        """Gets the delivery_date of this PurchaseOrder.

        Date the goods are to be delivered – YYYY-MM-DD

        :return: The delivery_date of this PurchaseOrder.
        :rtype: str
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this PurchaseOrder.

        Date the goods are to be delivered – YYYY-MM-DD

        :param delivery_date: The delivery_date of this PurchaseOrder.
        :type delivery_date: str
        """

        self._delivery_date = delivery_date

    @property
    def delivery_instructions(self):
        """Gets the delivery_instructions of this PurchaseOrder.

        A free text feild for instructions (500 characters max)

        :return: The delivery_instructions of this PurchaseOrder.
        :rtype: str
        """
        return self._delivery_instructions

    @delivery_instructions.setter
    def delivery_instructions(self, delivery_instructions):
        """Sets the delivery_instructions of this PurchaseOrder.

        A free text feild for instructions (500 characters max)

        :param delivery_instructions: The delivery_instructions of this PurchaseOrder.
        :type delivery_instructions: str
        """

        self._delivery_instructions = delivery_instructions

    @property
    def expected_arrival_date(self):
        """Gets the expected_arrival_date of this PurchaseOrder.

        The date the goods are expected to arrive.

        :return: The expected_arrival_date of this PurchaseOrder.
        :rtype: str
        """
        return self._expected_arrival_date

    @expected_arrival_date.setter
    def expected_arrival_date(self, expected_arrival_date):
        """Sets the expected_arrival_date of this PurchaseOrder.

        The date the goods are expected to arrive.

        :param expected_arrival_date: The expected_arrival_date of this PurchaseOrder.
        :type expected_arrival_date: str
        """

        self._expected_arrival_date = expected_arrival_date

    @property
    def has_attachments(self):
        """Gets the has_attachments of this PurchaseOrder.

        boolean to indicate if a purchase order has an attachment

        :return: The has_attachments of this PurchaseOrder.
        :rtype: bool
        """
        return self._has_attachments

    @has_attachments.setter
    def has_attachments(self, has_attachments):
        """Sets the has_attachments of this PurchaseOrder.

        boolean to indicate if a purchase order has an attachment

        :param has_attachments: The has_attachments of this PurchaseOrder.
        :type has_attachments: bool
        """

        self._has_attachments = has_attachments

    @property
    def line_amount_types(self):
        """Gets the line_amount_types of this PurchaseOrder.


        :return: The line_amount_types of this PurchaseOrder.
        :rtype: LineAmountTypes
        """
        return self._line_amount_types

    @line_amount_types.setter
    def line_amount_types(self, line_amount_types):
        """Sets the line_amount_types of this PurchaseOrder.


        :param line_amount_types: The line_amount_types of this PurchaseOrder.
        :type line_amount_types: LineAmountTypes
        """

        self._line_amount_types = line_amount_types

    @property
    def line_items(self):
        """Gets the line_items of this PurchaseOrder.

        See LineItems

        :return: The line_items of this PurchaseOrder.
        :rtype: List[LineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this PurchaseOrder.

        See LineItems

        :param line_items: The line_items of this PurchaseOrder.
        :type line_items: List[LineItem]
        """

        self._line_items = line_items

    @property
    def purchase_order_id(self):
        """Gets the purchase_order_id of this PurchaseOrder.

        Xero generated unique identifier for purchase order

        :return: The purchase_order_id of this PurchaseOrder.
        :rtype: str
        """
        return self._purchase_order_id

    @purchase_order_id.setter
    def purchase_order_id(self, purchase_order_id):
        """Sets the purchase_order_id of this PurchaseOrder.

        Xero generated unique identifier for purchase order

        :param purchase_order_id: The purchase_order_id of this PurchaseOrder.
        :type purchase_order_id: str
        """

        self._purchase_order_id = purchase_order_id

    @property
    def purchase_order_number(self):
        """Gets the purchase_order_number of this PurchaseOrder.

        Unique alpha numeric code identifying purchase order (when missing will auto-generate from your Organisation Invoice Settings)

        :return: The purchase_order_number of this PurchaseOrder.
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """Sets the purchase_order_number of this PurchaseOrder.

        Unique alpha numeric code identifying purchase order (when missing will auto-generate from your Organisation Invoice Settings)

        :param purchase_order_number: The purchase_order_number of this PurchaseOrder.
        :type purchase_order_number: str
        """

        self._purchase_order_number = purchase_order_number

    @property
    def reference(self):
        """Gets the reference of this PurchaseOrder.

        Additional reference number

        :return: The reference of this PurchaseOrder.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PurchaseOrder.

        Additional reference number

        :param reference: The reference of this PurchaseOrder.
        :type reference: str
        """

        self._reference = reference

    @property
    def sent_to_contact(self):
        """Gets the sent_to_contact of this PurchaseOrder.

        Boolean to set whether the purchase order should be marked as “sent”. This can be set only on purchase orders that have been approved or billed

        :return: The sent_to_contact of this PurchaseOrder.
        :rtype: bool
        """
        return self._sent_to_contact

    @sent_to_contact.setter
    def sent_to_contact(self, sent_to_contact):
        """Sets the sent_to_contact of this PurchaseOrder.

        Boolean to set whether the purchase order should be marked as “sent”. This can be set only on purchase orders that have been approved or billed

        :param sent_to_contact: The sent_to_contact of this PurchaseOrder.
        :type sent_to_contact: bool
        """

        self._sent_to_contact = sent_to_contact

    @property
    def status(self):
        """Gets the status of this PurchaseOrder.

        See Purchase Order Status Codes

        :return: The status of this PurchaseOrder.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PurchaseOrder.

        See Purchase Order Status Codes

        :param status: The status of this PurchaseOrder.
        :type status: str
        """
        allowed_values = ["DRAFT", "SUBMITTED", "AUTHORISED", "BILLED", "DELETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_attribute_string(self):
        """Gets the status_attribute_string of this PurchaseOrder.

        A string to indicate if a invoice status

        :return: The status_attribute_string of this PurchaseOrder.
        :rtype: str
        """
        return self._status_attribute_string

    @status_attribute_string.setter
    def status_attribute_string(self, status_attribute_string):
        """Sets the status_attribute_string of this PurchaseOrder.

        A string to indicate if a invoice status

        :param status_attribute_string: The status_attribute_string of this PurchaseOrder.
        :type status_attribute_string: str
        """

        self._status_attribute_string = status_attribute_string

    @property
    def sub_total(self):
        """Gets the sub_total of this PurchaseOrder.

        Total of purchase order excluding taxes

        :return: The sub_total of this PurchaseOrder.
        :rtype: float
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this PurchaseOrder.

        Total of purchase order excluding taxes

        :param sub_total: The sub_total of this PurchaseOrder.
        :type sub_total: float
        """

        self._sub_total = sub_total

    @property
    def telephone(self):
        """Gets the telephone of this PurchaseOrder.

        The phone number for the person accepting the delivery

        :return: The telephone of this PurchaseOrder.
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this PurchaseOrder.

        The phone number for the person accepting the delivery

        :param telephone: The telephone of this PurchaseOrder.
        :type telephone: str
        """

        self._telephone = telephone

    @property
    def total(self):
        """Gets the total of this PurchaseOrder.

        Total of Purchase Order tax inclusive (i.e. SubTotal + TotalTax)

        :return: The total of this PurchaseOrder.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PurchaseOrder.

        Total of Purchase Order tax inclusive (i.e. SubTotal + TotalTax)

        :param total: The total of this PurchaseOrder.
        :type total: float
        """

        self._total = total

    @property
    def total_discount(self):
        """Gets the total_discount of this PurchaseOrder.

        Total of discounts applied on the purchase order line items

        :return: The total_discount of this PurchaseOrder.
        :rtype: float
        """
        return self._total_discount

    @total_discount.setter
    def total_discount(self, total_discount):
        """Sets the total_discount of this PurchaseOrder.

        Total of discounts applied on the purchase order line items

        :param total_discount: The total_discount of this PurchaseOrder.
        :type total_discount: float
        """

        self._total_discount = total_discount

    @property
    def total_tax(self):
        """Gets the total_tax of this PurchaseOrder.

        Total tax on purchase order

        :return: The total_tax of this PurchaseOrder.
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this PurchaseOrder.

        Total tax on purchase order

        :param total_tax: The total_tax of this PurchaseOrder.
        :type total_tax: float
        """

        self._total_tax = total_tax

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this PurchaseOrder.

        Last modified date UTC format

        :return: The updated_date_utc of this PurchaseOrder.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this PurchaseOrder.

        Last modified date UTC format

        :param updated_date_utc: The updated_date_utc of this PurchaseOrder.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc

    @property
    def validation_errors(self):
        """Gets the validation_errors of this PurchaseOrder.

        Displays array of validation error messages from the API

        :return: The validation_errors of this PurchaseOrder.
        :rtype: List[ValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this PurchaseOrder.

        Displays array of validation error messages from the API

        :param validation_errors: The validation_errors of this PurchaseOrder.
        :type validation_errors: List[ValidationError]
        """

        self._validation_errors = validation_errors

    @property
    def warnings(self):
        """Gets the warnings of this PurchaseOrder.

        Displays array of warning messages from the API

        :return: The warnings of this PurchaseOrder.
        :rtype: List[ValidationError]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this PurchaseOrder.

        Displays array of warning messages from the API

        :param warnings: The warnings of this PurchaseOrder.
        :type warnings: List[ValidationError]
        """

        self._warnings = warnings
