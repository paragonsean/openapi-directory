# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchPaymentDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bank_account_name: str=None, bank_account_number: str=None, code: str=None, details: str=None, reference: str=None):
        """BatchPaymentDetails - a model defined in OpenAPI

        :param bank_account_name: The bank_account_name of this BatchPaymentDetails.
        :param bank_account_number: The bank_account_number of this BatchPaymentDetails.
        :param code: The code of this BatchPaymentDetails.
        :param details: The details of this BatchPaymentDetails.
        :param reference: The reference of this BatchPaymentDetails.
        """
        self.openapi_types = {
            'bank_account_name': str,
            'bank_account_number': str,
            'code': str,
            'details': str,
            'reference': str
        }

        self.attribute_map = {
            'bank_account_name': 'BankAccountName',
            'bank_account_number': 'BankAccountNumber',
            'code': 'Code',
            'details': 'Details',
            'reference': 'Reference'
        }

        self._bank_account_name = bank_account_name
        self._bank_account_number = bank_account_number
        self._code = code
        self._details = details
        self._reference = reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchPaymentDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchPaymentDetails of this BatchPaymentDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bank_account_name(self):
        """Gets the bank_account_name of this BatchPaymentDetails.

        Name of bank for use with Batch Payments

        :return: The bank_account_name of this BatchPaymentDetails.
        :rtype: str
        """
        return self._bank_account_name

    @bank_account_name.setter
    def bank_account_name(self, bank_account_name):
        """Sets the bank_account_name of this BatchPaymentDetails.

        Name of bank for use with Batch Payments

        :param bank_account_name: The bank_account_name of this BatchPaymentDetails.
        :type bank_account_name: str
        """

        self._bank_account_name = bank_account_name

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this BatchPaymentDetails.

        Bank account number for use with Batch Payments

        :return: The bank_account_number of this BatchPaymentDetails.
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this BatchPaymentDetails.

        Bank account number for use with Batch Payments

        :param bank_account_number: The bank_account_number of this BatchPaymentDetails.
        :type bank_account_number: str
        """

        self._bank_account_number = bank_account_number

    @property
    def code(self):
        """Gets the code of this BatchPaymentDetails.

        (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.

        :return: The code of this BatchPaymentDetails.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this BatchPaymentDetails.

        (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.

        :param code: The code of this BatchPaymentDetails.
        :type code: str
        """
        if code is not None and len(code) > 12:
            raise ValueError("Invalid value for `code`, length must be less than or equal to `12`")

        self._code = code

    @property
    def details(self):
        """Gets the details of this BatchPaymentDetails.

        (Non-NZ Only) These details are sent to the org’s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length = 18

        :return: The details of this BatchPaymentDetails.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this BatchPaymentDetails.

        (Non-NZ Only) These details are sent to the org’s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length = 18

        :param details: The details of this BatchPaymentDetails.
        :type details: str
        """

        self._details = details

    @property
    def reference(self):
        """Gets the reference of this BatchPaymentDetails.

        (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.

        :return: The reference of this BatchPaymentDetails.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this BatchPaymentDetails.

        (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.

        :param reference: The reference of this BatchPaymentDetails.
        :type reference: str
        """
        if reference is not None and len(reference) > 12:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `12`")

        self._reference = reference
