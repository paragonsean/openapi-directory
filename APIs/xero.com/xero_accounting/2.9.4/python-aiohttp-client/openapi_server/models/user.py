# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_address: str=None, first_name: str=None, is_subscriber: bool=None, last_name: str=None, organisation_role: str=None, updated_date_utc: str=None, user_id: str=None):
        """User - a model defined in OpenAPI

        :param email_address: The email_address of this User.
        :param first_name: The first_name of this User.
        :param is_subscriber: The is_subscriber of this User.
        :param last_name: The last_name of this User.
        :param organisation_role: The organisation_role of this User.
        :param updated_date_utc: The updated_date_utc of this User.
        :param user_id: The user_id of this User.
        """
        self.openapi_types = {
            'email_address': str,
            'first_name': str,
            'is_subscriber': bool,
            'last_name': str,
            'organisation_role': str,
            'updated_date_utc': str,
            'user_id': str
        }

        self.attribute_map = {
            'email_address': 'EmailAddress',
            'first_name': 'FirstName',
            'is_subscriber': 'IsSubscriber',
            'last_name': 'LastName',
            'organisation_role': 'OrganisationRole',
            'updated_date_utc': 'UpdatedDateUTC',
            'user_id': 'UserID'
        }

        self._email_address = email_address
        self._first_name = first_name
        self._is_subscriber = is_subscriber
        self._last_name = last_name
        self._organisation_role = organisation_role
        self._updated_date_utc = updated_date_utc
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_address(self):
        """Gets the email_address of this User.

        Email address of user

        :return: The email_address of this User.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this User.

        Email address of user

        :param email_address: The email_address of this User.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def first_name(self):
        """Gets the first_name of this User.

        First name of user

        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        First name of user

        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def is_subscriber(self):
        """Gets the is_subscriber of this User.

        Boolean to indicate if user is the subscriber

        :return: The is_subscriber of this User.
        :rtype: bool
        """
        return self._is_subscriber

    @is_subscriber.setter
    def is_subscriber(self, is_subscriber):
        """Sets the is_subscriber of this User.

        Boolean to indicate if user is the subscriber

        :param is_subscriber: The is_subscriber of this User.
        :type is_subscriber: bool
        """

        self._is_subscriber = is_subscriber

    @property
    def last_name(self):
        """Gets the last_name of this User.

        Last name of user

        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        Last name of user

        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def organisation_role(self):
        """Gets the organisation_role of this User.

        User role that defines permissions in Xero and via API (READONLY, INVOICEONLY, STANDARD, FINANCIALADVISER, etc)

        :return: The organisation_role of this User.
        :rtype: str
        """
        return self._organisation_role

    @organisation_role.setter
    def organisation_role(self, organisation_role):
        """Sets the organisation_role of this User.

        User role that defines permissions in Xero and via API (READONLY, INVOICEONLY, STANDARD, FINANCIALADVISER, etc)

        :param organisation_role: The organisation_role of this User.
        :type organisation_role: str
        """
        allowed_values = ["READONLY", "INVOICEONLY", "STANDARD", "FINANCIALADVISER", "MANAGEDCLIENT", "CASHBOOKCLIENT", "UNKNOWN"]  # noqa: E501
        if organisation_role not in allowed_values:
            raise ValueError(
                "Invalid value for `organisation_role` ({0}), must be one of {1}"
                .format(organisation_role, allowed_values)
            )

        self._organisation_role = organisation_role

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this User.

        Timestamp of last change to user

        :return: The updated_date_utc of this User.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this User.

        Timestamp of last change to user

        :param updated_date_utc: The updated_date_utc of this User.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc

    @property
    def user_id(self):
        """Gets the user_id of this User.

        Xero identifier

        :return: The user_id of this User.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.

        Xero identifier

        :param user_id: The user_id of this User.
        :type user_id: str
        """

        self._user_id = user_id
