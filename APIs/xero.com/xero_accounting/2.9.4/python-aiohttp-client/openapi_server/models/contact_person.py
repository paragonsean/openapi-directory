# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContactPerson(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_address: str=None, first_name: str=None, include_in_emails: bool=None, last_name: str=None):
        """ContactPerson - a model defined in OpenAPI

        :param email_address: The email_address of this ContactPerson.
        :param first_name: The first_name of this ContactPerson.
        :param include_in_emails: The include_in_emails of this ContactPerson.
        :param last_name: The last_name of this ContactPerson.
        """
        self.openapi_types = {
            'email_address': str,
            'first_name': str,
            'include_in_emails': bool,
            'last_name': str
        }

        self.attribute_map = {
            'email_address': 'EmailAddress',
            'first_name': 'FirstName',
            'include_in_emails': 'IncludeInEmails',
            'last_name': 'LastName'
        }

        self._email_address = email_address
        self._first_name = first_name
        self._include_in_emails = include_in_emails
        self._last_name = last_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactPerson':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactPerson of this ContactPerson.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_address(self):
        """Gets the email_address of this ContactPerson.

        Email address of person

        :return: The email_address of this ContactPerson.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this ContactPerson.

        Email address of person

        :param email_address: The email_address of this ContactPerson.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def first_name(self):
        """Gets the first_name of this ContactPerson.

        First name of person

        :return: The first_name of this ContactPerson.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ContactPerson.

        First name of person

        :param first_name: The first_name of this ContactPerson.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def include_in_emails(self):
        """Gets the include_in_emails of this ContactPerson.

        boolean to indicate whether contact should be included on emails with invoices etc.

        :return: The include_in_emails of this ContactPerson.
        :rtype: bool
        """
        return self._include_in_emails

    @include_in_emails.setter
    def include_in_emails(self, include_in_emails):
        """Sets the include_in_emails of this ContactPerson.

        boolean to indicate whether contact should be included on emails with invoices etc.

        :param include_in_emails: The include_in_emails of this ContactPerson.
        :type include_in_emails: bool
        """

        self._include_in_emails = include_in_emails

    @property
    def last_name(self):
        """Gets the last_name of this ContactPerson.

        Last name of person

        :return: The last_name of this ContactPerson.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ContactPerson.

        Last name of person

        :param last_name: The last_name of this ContactPerson.
        :type last_name: str
        """

        self._last_name = last_name
