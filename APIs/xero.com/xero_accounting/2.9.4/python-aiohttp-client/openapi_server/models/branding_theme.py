# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BrandingTheme(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branding_theme_id: str=None, created_date_utc: str=None, logo_url: str=None, name: str=None, sort_order: int=None, type: str=None):
        """BrandingTheme - a model defined in OpenAPI

        :param branding_theme_id: The branding_theme_id of this BrandingTheme.
        :param created_date_utc: The created_date_utc of this BrandingTheme.
        :param logo_url: The logo_url of this BrandingTheme.
        :param name: The name of this BrandingTheme.
        :param sort_order: The sort_order of this BrandingTheme.
        :param type: The type of this BrandingTheme.
        """
        self.openapi_types = {
            'branding_theme_id': str,
            'created_date_utc': str,
            'logo_url': str,
            'name': str,
            'sort_order': int,
            'type': str
        }

        self.attribute_map = {
            'branding_theme_id': 'BrandingThemeID',
            'created_date_utc': 'CreatedDateUTC',
            'logo_url': 'LogoUrl',
            'name': 'Name',
            'sort_order': 'SortOrder',
            'type': 'Type'
        }

        self._branding_theme_id = branding_theme_id
        self._created_date_utc = created_date_utc
        self._logo_url = logo_url
        self._name = name
        self._sort_order = sort_order
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrandingTheme':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BrandingTheme of this BrandingTheme.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branding_theme_id(self):
        """Gets the branding_theme_id of this BrandingTheme.

        Xero identifier

        :return: The branding_theme_id of this BrandingTheme.
        :rtype: str
        """
        return self._branding_theme_id

    @branding_theme_id.setter
    def branding_theme_id(self, branding_theme_id):
        """Sets the branding_theme_id of this BrandingTheme.

        Xero identifier

        :param branding_theme_id: The branding_theme_id of this BrandingTheme.
        :type branding_theme_id: str
        """

        self._branding_theme_id = branding_theme_id

    @property
    def created_date_utc(self):
        """Gets the created_date_utc of this BrandingTheme.

        UTC timestamp of creation date of branding theme

        :return: The created_date_utc of this BrandingTheme.
        :rtype: str
        """
        return self._created_date_utc

    @created_date_utc.setter
    def created_date_utc(self, created_date_utc):
        """Sets the created_date_utc of this BrandingTheme.

        UTC timestamp of creation date of branding theme

        :param created_date_utc: The created_date_utc of this BrandingTheme.
        :type created_date_utc: str
        """

        self._created_date_utc = created_date_utc

    @property
    def logo_url(self):
        """Gets the logo_url of this BrandingTheme.

        The location of the image file used as the logo on this branding theme

        :return: The logo_url of this BrandingTheme.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this BrandingTheme.

        The location of the image file used as the logo on this branding theme

        :param logo_url: The logo_url of this BrandingTheme.
        :type logo_url: str
        """

        self._logo_url = logo_url

    @property
    def name(self):
        """Gets the name of this BrandingTheme.

        Name of branding theme

        :return: The name of this BrandingTheme.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BrandingTheme.

        Name of branding theme

        :param name: The name of this BrandingTheme.
        :type name: str
        """

        self._name = name

    @property
    def sort_order(self):
        """Gets the sort_order of this BrandingTheme.

        Integer – ranked order of branding theme. The default branding theme has a value of 0

        :return: The sort_order of this BrandingTheme.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this BrandingTheme.

        Integer – ranked order of branding theme. The default branding theme has a value of 0

        :param sort_order: The sort_order of this BrandingTheme.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def type(self):
        """Gets the type of this BrandingTheme.

        Always INVOICE

        :return: The type of this BrandingTheme.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BrandingTheme.

        Always INVOICE

        :param type: The type of this BrandingTheme.
        :type type: str
        """
        allowed_values = ["INVOICE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
