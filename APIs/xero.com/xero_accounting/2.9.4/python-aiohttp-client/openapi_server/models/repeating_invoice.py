# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment import Attachment
from openapi_server.models.contact import Contact
from openapi_server.models.currency_code import CurrencyCode
from openapi_server.models.line_amount_types import LineAmountTypes
from openapi_server.models.line_item import LineItem
from openapi_server.models.schedule import Schedule
from openapi_server import util


class RepeatingInvoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[Attachment]=None, branding_theme_id: str=None, contact: Contact=None, currency_code: CurrencyCode=None, has_attachments: bool=False, id: str=None, line_amount_types: LineAmountTypes=None, line_items: List[LineItem]=None, reference: str=None, repeating_invoice_id: str=None, schedule: Schedule=None, status: str=None, sub_total: float=None, total: float=None, total_tax: float=None, type: str=None):
        """RepeatingInvoice - a model defined in OpenAPI

        :param attachments: The attachments of this RepeatingInvoice.
        :param branding_theme_id: The branding_theme_id of this RepeatingInvoice.
        :param contact: The contact of this RepeatingInvoice.
        :param currency_code: The currency_code of this RepeatingInvoice.
        :param has_attachments: The has_attachments of this RepeatingInvoice.
        :param id: The id of this RepeatingInvoice.
        :param line_amount_types: The line_amount_types of this RepeatingInvoice.
        :param line_items: The line_items of this RepeatingInvoice.
        :param reference: The reference of this RepeatingInvoice.
        :param repeating_invoice_id: The repeating_invoice_id of this RepeatingInvoice.
        :param schedule: The schedule of this RepeatingInvoice.
        :param status: The status of this RepeatingInvoice.
        :param sub_total: The sub_total of this RepeatingInvoice.
        :param total: The total of this RepeatingInvoice.
        :param total_tax: The total_tax of this RepeatingInvoice.
        :param type: The type of this RepeatingInvoice.
        """
        self.openapi_types = {
            'attachments': List[Attachment],
            'branding_theme_id': str,
            'contact': Contact,
            'currency_code': CurrencyCode,
            'has_attachments': bool,
            'id': str,
            'line_amount_types': LineAmountTypes,
            'line_items': List[LineItem],
            'reference': str,
            'repeating_invoice_id': str,
            'schedule': Schedule,
            'status': str,
            'sub_total': float,
            'total': float,
            'total_tax': float,
            'type': str
        }

        self.attribute_map = {
            'attachments': 'Attachments',
            'branding_theme_id': 'BrandingThemeID',
            'contact': 'Contact',
            'currency_code': 'CurrencyCode',
            'has_attachments': 'HasAttachments',
            'id': 'ID',
            'line_amount_types': 'LineAmountTypes',
            'line_items': 'LineItems',
            'reference': 'Reference',
            'repeating_invoice_id': 'RepeatingInvoiceID',
            'schedule': 'Schedule',
            'status': 'Status',
            'sub_total': 'SubTotal',
            'total': 'Total',
            'total_tax': 'TotalTax',
            'type': 'Type'
        }

        self._attachments = attachments
        self._branding_theme_id = branding_theme_id
        self._contact = contact
        self._currency_code = currency_code
        self._has_attachments = has_attachments
        self._id = id
        self._line_amount_types = line_amount_types
        self._line_items = line_items
        self._reference = reference
        self._repeating_invoice_id = repeating_invoice_id
        self._schedule = schedule
        self._status = status
        self._sub_total = sub_total
        self._total = total
        self._total_tax = total_tax
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepeatingInvoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepeatingInvoice of this RepeatingInvoice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this RepeatingInvoice.

        Displays array of attachments from the API

        :return: The attachments of this RepeatingInvoice.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this RepeatingInvoice.

        Displays array of attachments from the API

        :param attachments: The attachments of this RepeatingInvoice.
        :type attachments: List[Attachment]
        """

        self._attachments = attachments

    @property
    def branding_theme_id(self):
        """Gets the branding_theme_id of this RepeatingInvoice.

        See BrandingThemes

        :return: The branding_theme_id of this RepeatingInvoice.
        :rtype: str
        """
        return self._branding_theme_id

    @branding_theme_id.setter
    def branding_theme_id(self, branding_theme_id):
        """Sets the branding_theme_id of this RepeatingInvoice.

        See BrandingThemes

        :param branding_theme_id: The branding_theme_id of this RepeatingInvoice.
        :type branding_theme_id: str
        """

        self._branding_theme_id = branding_theme_id

    @property
    def contact(self):
        """Gets the contact of this RepeatingInvoice.


        :return: The contact of this RepeatingInvoice.
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this RepeatingInvoice.


        :param contact: The contact of this RepeatingInvoice.
        :type contact: Contact
        """

        self._contact = contact

    @property
    def currency_code(self):
        """Gets the currency_code of this RepeatingInvoice.


        :return: The currency_code of this RepeatingInvoice.
        :rtype: CurrencyCode
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this RepeatingInvoice.


        :param currency_code: The currency_code of this RepeatingInvoice.
        :type currency_code: CurrencyCode
        """

        self._currency_code = currency_code

    @property
    def has_attachments(self):
        """Gets the has_attachments of this RepeatingInvoice.

        boolean to indicate if an invoice has an attachment

        :return: The has_attachments of this RepeatingInvoice.
        :rtype: bool
        """
        return self._has_attachments

    @has_attachments.setter
    def has_attachments(self, has_attachments):
        """Sets the has_attachments of this RepeatingInvoice.

        boolean to indicate if an invoice has an attachment

        :param has_attachments: The has_attachments of this RepeatingInvoice.
        :type has_attachments: bool
        """

        self._has_attachments = has_attachments

    @property
    def id(self):
        """Gets the id of this RepeatingInvoice.

        Xero generated unique identifier for repeating invoice template

        :return: The id of this RepeatingInvoice.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepeatingInvoice.

        Xero generated unique identifier for repeating invoice template

        :param id: The id of this RepeatingInvoice.
        :type id: str
        """

        self._id = id

    @property
    def line_amount_types(self):
        """Gets the line_amount_types of this RepeatingInvoice.


        :return: The line_amount_types of this RepeatingInvoice.
        :rtype: LineAmountTypes
        """
        return self._line_amount_types

    @line_amount_types.setter
    def line_amount_types(self, line_amount_types):
        """Sets the line_amount_types of this RepeatingInvoice.


        :param line_amount_types: The line_amount_types of this RepeatingInvoice.
        :type line_amount_types: LineAmountTypes
        """

        self._line_amount_types = line_amount_types

    @property
    def line_items(self):
        """Gets the line_items of this RepeatingInvoice.

        See LineItems

        :return: The line_items of this RepeatingInvoice.
        :rtype: List[LineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this RepeatingInvoice.

        See LineItems

        :param line_items: The line_items of this RepeatingInvoice.
        :type line_items: List[LineItem]
        """

        self._line_items = line_items

    @property
    def reference(self):
        """Gets the reference of this RepeatingInvoice.

        ACCREC only – additional reference number

        :return: The reference of this RepeatingInvoice.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this RepeatingInvoice.

        ACCREC only – additional reference number

        :param reference: The reference of this RepeatingInvoice.
        :type reference: str
        """

        self._reference = reference

    @property
    def repeating_invoice_id(self):
        """Gets the repeating_invoice_id of this RepeatingInvoice.

        Xero generated unique identifier for repeating invoice template

        :return: The repeating_invoice_id of this RepeatingInvoice.
        :rtype: str
        """
        return self._repeating_invoice_id

    @repeating_invoice_id.setter
    def repeating_invoice_id(self, repeating_invoice_id):
        """Sets the repeating_invoice_id of this RepeatingInvoice.

        Xero generated unique identifier for repeating invoice template

        :param repeating_invoice_id: The repeating_invoice_id of this RepeatingInvoice.
        :type repeating_invoice_id: str
        """

        self._repeating_invoice_id = repeating_invoice_id

    @property
    def schedule(self):
        """Gets the schedule of this RepeatingInvoice.


        :return: The schedule of this RepeatingInvoice.
        :rtype: Schedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this RepeatingInvoice.


        :param schedule: The schedule of this RepeatingInvoice.
        :type schedule: Schedule
        """

        self._schedule = schedule

    @property
    def status(self):
        """Gets the status of this RepeatingInvoice.

        One of the following - DRAFT or AUTHORISED – See Invoice Status Codes

        :return: The status of this RepeatingInvoice.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RepeatingInvoice.

        One of the following - DRAFT or AUTHORISED – See Invoice Status Codes

        :param status: The status of this RepeatingInvoice.
        :type status: str
        """
        allowed_values = ["DRAFT", "AUTHORISED", "DELETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sub_total(self):
        """Gets the sub_total of this RepeatingInvoice.

        Total of invoice excluding taxes

        :return: The sub_total of this RepeatingInvoice.
        :rtype: float
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this RepeatingInvoice.

        Total of invoice excluding taxes

        :param sub_total: The sub_total of this RepeatingInvoice.
        :type sub_total: float
        """

        self._sub_total = sub_total

    @property
    def total(self):
        """Gets the total of this RepeatingInvoice.

        Total of Invoice tax inclusive (i.e. SubTotal + TotalTax)

        :return: The total of this RepeatingInvoice.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this RepeatingInvoice.

        Total of Invoice tax inclusive (i.e. SubTotal + TotalTax)

        :param total: The total of this RepeatingInvoice.
        :type total: float
        """

        self._total = total

    @property
    def total_tax(self):
        """Gets the total_tax of this RepeatingInvoice.

        Total tax on invoice

        :return: The total_tax of this RepeatingInvoice.
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this RepeatingInvoice.

        Total tax on invoice

        :param total_tax: The total_tax of this RepeatingInvoice.
        :type total_tax: float
        """

        self._total_tax = total_tax

    @property
    def type(self):
        """Gets the type of this RepeatingInvoice.

        See Invoice Types

        :return: The type of this RepeatingInvoice.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RepeatingInvoice.

        See Invoice Types

        :param type: The type of this RepeatingInvoice.
        :type type: str
        """
        allowed_values = ["ACCPAY", "ACCREC"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
