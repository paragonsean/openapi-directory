# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BalanceDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance: float=None, currency_code: str=None, currency_rate: float=None):
        """BalanceDetails - a model defined in OpenAPI

        :param balance: The balance of this BalanceDetails.
        :param currency_code: The currency_code of this BalanceDetails.
        :param currency_rate: The currency_rate of this BalanceDetails.
        """
        self.openapi_types = {
            'balance': float,
            'currency_code': str,
            'currency_rate': float
        }

        self.attribute_map = {
            'balance': 'Balance',
            'currency_code': 'CurrencyCode',
            'currency_rate': 'CurrencyRate'
        }

        self._balance = balance
        self._currency_code = currency_code
        self._currency_rate = currency_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BalanceDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BalanceDetails of this BalanceDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self):
        """Gets the balance of this BalanceDetails.

        The opening balances of the account. Debits are positive, credits are negative values

        :return: The balance of this BalanceDetails.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this BalanceDetails.

        The opening balances of the account. Debits are positive, credits are negative values

        :param balance: The balance of this BalanceDetails.
        :type balance: float
        """

        self._balance = balance

    @property
    def currency_code(self):
        """Gets the currency_code of this BalanceDetails.

        The currency of the balance (Not required for base currency)

        :return: The currency_code of this BalanceDetails.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this BalanceDetails.

        The currency of the balance (Not required for base currency)

        :param currency_code: The currency_code of this BalanceDetails.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def currency_rate(self):
        """Gets the currency_rate of this BalanceDetails.

        (Optional) Exchange rate to base currency when money is spent or received. If not specified, XE rate for the day is applied

        :return: The currency_rate of this BalanceDetails.
        :rtype: float
        """
        return self._currency_rate

    @currency_rate.setter
    def currency_rate(self, currency_rate):
        """Sets the currency_rate of this BalanceDetails.

        (Optional) Exchange rate to base currency when money is spent or received. If not specified, XE rate for the day is applied

        :param currency_rate: The currency_rate of this BalanceDetails.
        :type currency_rate: float
        """

        self._currency_rate = currency_rate
