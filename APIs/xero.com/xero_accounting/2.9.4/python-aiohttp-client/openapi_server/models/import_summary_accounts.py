# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportSummaryAccounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deleted: float=None, errored: float=None, locked: float=None, new: float=None, new_or_updated: float=None, present: bool=None, system: float=None, total: float=None, updated: float=None):
        """ImportSummaryAccounts - a model defined in OpenAPI

        :param deleted: The deleted of this ImportSummaryAccounts.
        :param errored: The errored of this ImportSummaryAccounts.
        :param locked: The locked of this ImportSummaryAccounts.
        :param new: The new of this ImportSummaryAccounts.
        :param new_or_updated: The new_or_updated of this ImportSummaryAccounts.
        :param present: The present of this ImportSummaryAccounts.
        :param system: The system of this ImportSummaryAccounts.
        :param total: The total of this ImportSummaryAccounts.
        :param updated: The updated of this ImportSummaryAccounts.
        """
        self.openapi_types = {
            'deleted': float,
            'errored': float,
            'locked': float,
            'new': float,
            'new_or_updated': float,
            'present': bool,
            'system': float,
            'total': float,
            'updated': float
        }

        self.attribute_map = {
            'deleted': 'Deleted',
            'errored': 'Errored',
            'locked': 'Locked',
            'new': 'New',
            'new_or_updated': 'NewOrUpdated',
            'present': 'Present',
            'system': 'System',
            'total': 'Total',
            'updated': 'Updated'
        }

        self._deleted = deleted
        self._errored = errored
        self._locked = locked
        self._new = new
        self._new_or_updated = new_or_updated
        self._present = present
        self._system = system
        self._total = total
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportSummaryAccounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportSummaryAccounts of this ImportSummaryAccounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deleted(self):
        """Gets the deleted of this ImportSummaryAccounts.

        The number of accounts deleted

        :return: The deleted of this ImportSummaryAccounts.
        :rtype: float
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ImportSummaryAccounts.

        The number of accounts deleted

        :param deleted: The deleted of this ImportSummaryAccounts.
        :type deleted: float
        """

        self._deleted = deleted

    @property
    def errored(self):
        """Gets the errored of this ImportSummaryAccounts.

        The number of accounts that had an error

        :return: The errored of this ImportSummaryAccounts.
        :rtype: float
        """
        return self._errored

    @errored.setter
    def errored(self, errored):
        """Sets the errored of this ImportSummaryAccounts.

        The number of accounts that had an error

        :param errored: The errored of this ImportSummaryAccounts.
        :type errored: float
        """

        self._errored = errored

    @property
    def locked(self):
        """Gets the locked of this ImportSummaryAccounts.

        The number of locked accounts

        :return: The locked of this ImportSummaryAccounts.
        :rtype: float
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this ImportSummaryAccounts.

        The number of locked accounts

        :param locked: The locked of this ImportSummaryAccounts.
        :type locked: float
        """

        self._locked = locked

    @property
    def new(self):
        """Gets the new of this ImportSummaryAccounts.

        The number of new accounts created

        :return: The new of this ImportSummaryAccounts.
        :rtype: float
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this ImportSummaryAccounts.

        The number of new accounts created

        :param new: The new of this ImportSummaryAccounts.
        :type new: float
        """

        self._new = new

    @property
    def new_or_updated(self):
        """Gets the new_or_updated of this ImportSummaryAccounts.

        The number of new or updated accounts

        :return: The new_or_updated of this ImportSummaryAccounts.
        :rtype: float
        """
        return self._new_or_updated

    @new_or_updated.setter
    def new_or_updated(self, new_or_updated):
        """Sets the new_or_updated of this ImportSummaryAccounts.

        The number of new or updated accounts

        :param new_or_updated: The new_or_updated of this ImportSummaryAccounts.
        :type new_or_updated: float
        """

        self._new_or_updated = new_or_updated

    @property
    def present(self):
        """Gets the present of this ImportSummaryAccounts.


        :return: The present of this ImportSummaryAccounts.
        :rtype: bool
        """
        return self._present

    @present.setter
    def present(self, present):
        """Sets the present of this ImportSummaryAccounts.


        :param present: The present of this ImportSummaryAccounts.
        :type present: bool
        """

        self._present = present

    @property
    def system(self):
        """Gets the system of this ImportSummaryAccounts.

        The number of system accounts

        :return: The system of this ImportSummaryAccounts.
        :rtype: float
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this ImportSummaryAccounts.

        The number of system accounts

        :param system: The system of this ImportSummaryAccounts.
        :type system: float
        """

        self._system = system

    @property
    def total(self):
        """Gets the total of this ImportSummaryAccounts.

        The total number of accounts in the org

        :return: The total of this ImportSummaryAccounts.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ImportSummaryAccounts.

        The total number of accounts in the org

        :param total: The total of this ImportSummaryAccounts.
        :type total: float
        """

        self._total = total

    @property
    def updated(self):
        """Gets the updated of this ImportSummaryAccounts.

        The number of accounts updated

        :return: The updated of this ImportSummaryAccounts.
        :rtype: float
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ImportSummaryAccounts.

        The number of accounts updated

        :param updated: The updated of this ImportSummaryAccounts.
        :type updated: float
        """

        self._updated = updated
