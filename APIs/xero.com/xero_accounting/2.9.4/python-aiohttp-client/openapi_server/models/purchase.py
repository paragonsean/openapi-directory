# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Purchase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, cogs_account_code: str=None, tax_type: str=None, unit_price: float=None):
        """Purchase - a model defined in OpenAPI

        :param account_code: The account_code of this Purchase.
        :param cogs_account_code: The cogs_account_code of this Purchase.
        :param tax_type: The tax_type of this Purchase.
        :param unit_price: The unit_price of this Purchase.
        """
        self.openapi_types = {
            'account_code': str,
            'cogs_account_code': str,
            'tax_type': str,
            'unit_price': float
        }

        self.attribute_map = {
            'account_code': 'AccountCode',
            'cogs_account_code': 'COGSAccountCode',
            'tax_type': 'TaxType',
            'unit_price': 'UnitPrice'
        }

        self._account_code = account_code
        self._cogs_account_code = cogs_account_code
        self._tax_type = tax_type
        self._unit_price = unit_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Purchase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Purchase of this Purchase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this Purchase.

        Default account code to be used for purchased/sale. Not applicable to the purchase details of tracked items

        :return: The account_code of this Purchase.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this Purchase.

        Default account code to be used for purchased/sale. Not applicable to the purchase details of tracked items

        :param account_code: The account_code of this Purchase.
        :type account_code: str
        """

        self._account_code = account_code

    @property
    def cogs_account_code(self):
        """Gets the cogs_account_code of this Purchase.

        Cost of goods sold account. Only applicable to the purchase details of tracked items.

        :return: The cogs_account_code of this Purchase.
        :rtype: str
        """
        return self._cogs_account_code

    @cogs_account_code.setter
    def cogs_account_code(self, cogs_account_code):
        """Sets the cogs_account_code of this Purchase.

        Cost of goods sold account. Only applicable to the purchase details of tracked items.

        :param cogs_account_code: The cogs_account_code of this Purchase.
        :type cogs_account_code: str
        """

        self._cogs_account_code = cogs_account_code

    @property
    def tax_type(self):
        """Gets the tax_type of this Purchase.

        The tax type from TaxRates

        :return: The tax_type of this Purchase.
        :rtype: str
        """
        return self._tax_type

    @tax_type.setter
    def tax_type(self, tax_type):
        """Sets the tax_type of this Purchase.

        The tax type from TaxRates

        :param tax_type: The tax_type of this Purchase.
        :type tax_type: str
        """

        self._tax_type = tax_type

    @property
    def unit_price(self):
        """Gets the unit_price of this Purchase.

        Unit Price of the item. By default UnitPrice is rounded to two decimal places. You can use 4 decimal places by adding the unitdp=4 querystring parameter to your request.

        :return: The unit_price of this Purchase.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this Purchase.

        Unit Price of the item. By default UnitPrice is rounded to two decimal places. You can use 4 decimal places by adding the unitdp=4 querystring parameter to your request.

        :param unit_price: The unit_price of this Purchase.
        :type unit_price: float
        """

        self._unit_price = unit_price
