# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account import Account
from openapi_server.models.payment import Payment
from openapi_server import util


class BatchPayment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: Account=None, amount: float=None, batch_payment_id: str=None, code: str=None, _date: str=None, date_string: str=None, details: str=None, is_reconciled: str=None, narrative: str=None, particulars: str=None, payments: List[Payment]=None, reference: str=None, status: str=None, total_amount: str=None, type: str=None, updated_date_utc: str=None):
        """BatchPayment - a model defined in OpenAPI

        :param account: The account of this BatchPayment.
        :param amount: The amount of this BatchPayment.
        :param batch_payment_id: The batch_payment_id of this BatchPayment.
        :param code: The code of this BatchPayment.
        :param _date: The _date of this BatchPayment.
        :param date_string: The date_string of this BatchPayment.
        :param details: The details of this BatchPayment.
        :param is_reconciled: The is_reconciled of this BatchPayment.
        :param narrative: The narrative of this BatchPayment.
        :param particulars: The particulars of this BatchPayment.
        :param payments: The payments of this BatchPayment.
        :param reference: The reference of this BatchPayment.
        :param status: The status of this BatchPayment.
        :param total_amount: The total_amount of this BatchPayment.
        :param type: The type of this BatchPayment.
        :param updated_date_utc: The updated_date_utc of this BatchPayment.
        """
        self.openapi_types = {
            'account': Account,
            'amount': float,
            'batch_payment_id': str,
            'code': str,
            '_date': str,
            'date_string': str,
            'details': str,
            'is_reconciled': str,
            'narrative': str,
            'particulars': str,
            'payments': List[Payment],
            'reference': str,
            'status': str,
            'total_amount': str,
            'type': str,
            'updated_date_utc': str
        }

        self.attribute_map = {
            'account': 'Account',
            'amount': 'Amount',
            'batch_payment_id': 'BatchPaymentID',
            'code': 'Code',
            '_date': 'Date',
            'date_string': 'DateString',
            'details': 'Details',
            'is_reconciled': 'IsReconciled',
            'narrative': 'Narrative',
            'particulars': 'Particulars',
            'payments': 'Payments',
            'reference': 'Reference',
            'status': 'Status',
            'total_amount': 'TotalAmount',
            'type': 'Type',
            'updated_date_utc': 'UpdatedDateUTC'
        }

        self._account = account
        self._amount = amount
        self._batch_payment_id = batch_payment_id
        self._code = code
        self.__date = _date
        self._date_string = date_string
        self._details = details
        self._is_reconciled = is_reconciled
        self._narrative = narrative
        self._particulars = particulars
        self._payments = payments
        self._reference = reference
        self._status = status
        self._total_amount = total_amount
        self._type = type
        self._updated_date_utc = updated_date_utc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchPayment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchPayment of this BatchPayment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this BatchPayment.


        :return: The account of this BatchPayment.
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this BatchPayment.


        :param account: The account of this BatchPayment.
        :type account: Account
        """

        self._account = account

    @property
    def amount(self):
        """Gets the amount of this BatchPayment.

        The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00

        :return: The amount of this BatchPayment.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BatchPayment.

        The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00

        :param amount: The amount of this BatchPayment.
        :type amount: float
        """

        self._amount = amount

    @property
    def batch_payment_id(self):
        """Gets the batch_payment_id of this BatchPayment.

        The Xero generated unique identifier for the bank transaction (read-only)

        :return: The batch_payment_id of this BatchPayment.
        :rtype: str
        """
        return self._batch_payment_id

    @batch_payment_id.setter
    def batch_payment_id(self, batch_payment_id):
        """Sets the batch_payment_id of this BatchPayment.

        The Xero generated unique identifier for the bank transaction (read-only)

        :param batch_payment_id: The batch_payment_id of this BatchPayment.
        :type batch_payment_id: str
        """

        self._batch_payment_id = batch_payment_id

    @property
    def code(self):
        """Gets the code of this BatchPayment.

        (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.

        :return: The code of this BatchPayment.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this BatchPayment.

        (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.

        :param code: The code of this BatchPayment.
        :type code: str
        """
        if code is not None and len(code) > 12:
            raise ValueError("Invalid value for `code`, length must be less than or equal to `12`")

        self._code = code

    @property
    def _date(self):
        """Gets the _date of this BatchPayment.

        Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06

        :return: The _date of this BatchPayment.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this BatchPayment.

        Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06

        :param _date: The _date of this BatchPayment.
        :type _date: str
        """

        self.__date = _date

    @property
    def date_string(self):
        """Gets the date_string of this BatchPayment.

        Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06

        :return: The date_string of this BatchPayment.
        :rtype: str
        """
        return self._date_string

    @date_string.setter
    def date_string(self, date_string):
        """Sets the date_string of this BatchPayment.

        Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06

        :param date_string: The date_string of this BatchPayment.
        :type date_string: str
        """

        self._date_string = date_string

    @property
    def details(self):
        """Gets the details of this BatchPayment.

        (Non-NZ Only) These details are sent to the org’s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length = 18

        :return: The details of this BatchPayment.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this BatchPayment.

        (Non-NZ Only) These details are sent to the org’s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length = 18

        :param details: The details of this BatchPayment.
        :type details: str
        """

        self._details = details

    @property
    def is_reconciled(self):
        """Gets the is_reconciled of this BatchPayment.

        Booelan that tells you if the batch payment has been reconciled (read-only)

        :return: The is_reconciled of this BatchPayment.
        :rtype: str
        """
        return self._is_reconciled

    @is_reconciled.setter
    def is_reconciled(self, is_reconciled):
        """Sets the is_reconciled of this BatchPayment.

        Booelan that tells you if the batch payment has been reconciled (read-only)

        :param is_reconciled: The is_reconciled of this BatchPayment.
        :type is_reconciled: str
        """

        self._is_reconciled = is_reconciled

    @property
    def narrative(self):
        """Gets the narrative of this BatchPayment.

        (UK Only) Only shows on the statement line in Xero. Max length =18

        :return: The narrative of this BatchPayment.
        :rtype: str
        """
        return self._narrative

    @narrative.setter
    def narrative(self, narrative):
        """Sets the narrative of this BatchPayment.

        (UK Only) Only shows on the statement line in Xero. Max length =18

        :param narrative: The narrative of this BatchPayment.
        :type narrative: str
        """
        if narrative is not None and len(narrative) > 18:
            raise ValueError("Invalid value for `narrative`, length must be less than or equal to `18`")

        self._narrative = narrative

    @property
    def particulars(self):
        """Gets the particulars of this BatchPayment.

        (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.

        :return: The particulars of this BatchPayment.
        :rtype: str
        """
        return self._particulars

    @particulars.setter
    def particulars(self, particulars):
        """Sets the particulars of this BatchPayment.

        (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.

        :param particulars: The particulars of this BatchPayment.
        :type particulars: str
        """
        if particulars is not None and len(particulars) > 12:
            raise ValueError("Invalid value for `particulars`, length must be less than or equal to `12`")

        self._particulars = particulars

    @property
    def payments(self):
        """Gets the payments of this BatchPayment.

        An array of payments

        :return: The payments of this BatchPayment.
        :rtype: List[Payment]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this BatchPayment.

        An array of payments

        :param payments: The payments of this BatchPayment.
        :type payments: List[Payment]
        """

        self._payments = payments

    @property
    def reference(self):
        """Gets the reference of this BatchPayment.

        (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.

        :return: The reference of this BatchPayment.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this BatchPayment.

        (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.

        :param reference: The reference of this BatchPayment.
        :type reference: str
        """
        if reference is not None and len(reference) > 255:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `255`")

        self._reference = reference

    @property
    def status(self):
        """Gets the status of this BatchPayment.

        AUTHORISED or DELETED (read-only). New batch payments will have a status of AUTHORISED. It is not possible to delete batch payments via the API.

        :return: The status of this BatchPayment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BatchPayment.

        AUTHORISED or DELETED (read-only). New batch payments will have a status of AUTHORISED. It is not possible to delete batch payments via the API.

        :param status: The status of this BatchPayment.
        :type status: str
        """
        allowed_values = ["AUTHORISED", "DELETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def total_amount(self):
        """Gets the total_amount of this BatchPayment.

        The total of the payments that make up the batch (read-only)

        :return: The total_amount of this BatchPayment.
        :rtype: str
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this BatchPayment.

        The total of the payments that make up the batch (read-only)

        :param total_amount: The total_amount of this BatchPayment.
        :type total_amount: str
        """

        self._total_amount = total_amount

    @property
    def type(self):
        """Gets the type of this BatchPayment.

        PAYBATCH for bill payments or RECBATCH for sales invoice payments (read-only)

        :return: The type of this BatchPayment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BatchPayment.

        PAYBATCH for bill payments or RECBATCH for sales invoice payments (read-only)

        :param type: The type of this BatchPayment.
        :type type: str
        """
        allowed_values = ["PAYBATCH", "RECBATCH"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this BatchPayment.

        UTC timestamp of last update to the payment

        :return: The updated_date_utc of this BatchPayment.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this BatchPayment.

        UTC timestamp of last update to the payment

        :param updated_date_utc: The updated_date_utc of this BatchPayment.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc
