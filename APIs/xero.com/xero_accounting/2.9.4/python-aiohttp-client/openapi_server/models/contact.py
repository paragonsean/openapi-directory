# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.attachment import Attachment
from openapi_server.models.balances import Balances
from openapi_server.models.batch_payment_details import BatchPaymentDetails
from openapi_server.models.branding_theme import BrandingTheme
from openapi_server.models.contact_group import ContactGroup
from openapi_server.models.contact_person import ContactPerson
from openapi_server.models.currency_code import CurrencyCode
from openapi_server.models.payment_term import PaymentTerm
from openapi_server.models.phone import Phone
from openapi_server.models.sales_tracking_category import SalesTrackingCategory
from openapi_server.models.validation_error import ValidationError
from openapi_server import util


class Contact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, accounts_payable_tax_type: str=None, accounts_receivable_tax_type: str=None, addresses: List[Address]=None, attachments: List[Attachment]=None, balances: Balances=None, bank_account_details: str=None, batch_payments: BatchPaymentDetails=None, branding_theme: BrandingTheme=None, contact_groups: List[ContactGroup]=None, contact_id: str=None, contact_number: str=None, contact_persons: List[ContactPerson]=None, contact_status: str=None, default_currency: CurrencyCode=None, discount: float=None, email_address: str=None, first_name: str=None, has_attachments: bool=False, has_validation_errors: bool=False, is_customer: bool=None, is_supplier: bool=None, last_name: str=None, name: str=None, payment_terms: PaymentTerm=None, phones: List[Phone]=None, purchases_default_account_code: str=None, purchases_tracking_categories: List[SalesTrackingCategory]=None, sales_default_account_code: str=None, sales_tracking_categories: List[SalesTrackingCategory]=None, skype_user_name: str=None, status_attribute_string: str=None, tax_number: str=None, tracking_category_name: str=None, tracking_category_option: str=None, updated_date_utc: str=None, validation_errors: List[ValidationError]=None, website: str=None, xero_network_key: str=None):
        """Contact - a model defined in OpenAPI

        :param account_number: The account_number of this Contact.
        :param accounts_payable_tax_type: The accounts_payable_tax_type of this Contact.
        :param accounts_receivable_tax_type: The accounts_receivable_tax_type of this Contact.
        :param addresses: The addresses of this Contact.
        :param attachments: The attachments of this Contact.
        :param balances: The balances of this Contact.
        :param bank_account_details: The bank_account_details of this Contact.
        :param batch_payments: The batch_payments of this Contact.
        :param branding_theme: The branding_theme of this Contact.
        :param contact_groups: The contact_groups of this Contact.
        :param contact_id: The contact_id of this Contact.
        :param contact_number: The contact_number of this Contact.
        :param contact_persons: The contact_persons of this Contact.
        :param contact_status: The contact_status of this Contact.
        :param default_currency: The default_currency of this Contact.
        :param discount: The discount of this Contact.
        :param email_address: The email_address of this Contact.
        :param first_name: The first_name of this Contact.
        :param has_attachments: The has_attachments of this Contact.
        :param has_validation_errors: The has_validation_errors of this Contact.
        :param is_customer: The is_customer of this Contact.
        :param is_supplier: The is_supplier of this Contact.
        :param last_name: The last_name of this Contact.
        :param name: The name of this Contact.
        :param payment_terms: The payment_terms of this Contact.
        :param phones: The phones of this Contact.
        :param purchases_default_account_code: The purchases_default_account_code of this Contact.
        :param purchases_tracking_categories: The purchases_tracking_categories of this Contact.
        :param sales_default_account_code: The sales_default_account_code of this Contact.
        :param sales_tracking_categories: The sales_tracking_categories of this Contact.
        :param skype_user_name: The skype_user_name of this Contact.
        :param status_attribute_string: The status_attribute_string of this Contact.
        :param tax_number: The tax_number of this Contact.
        :param tracking_category_name: The tracking_category_name of this Contact.
        :param tracking_category_option: The tracking_category_option of this Contact.
        :param updated_date_utc: The updated_date_utc of this Contact.
        :param validation_errors: The validation_errors of this Contact.
        :param website: The website of this Contact.
        :param xero_network_key: The xero_network_key of this Contact.
        """
        self.openapi_types = {
            'account_number': str,
            'accounts_payable_tax_type': str,
            'accounts_receivable_tax_type': str,
            'addresses': List[Address],
            'attachments': List[Attachment],
            'balances': Balances,
            'bank_account_details': str,
            'batch_payments': BatchPaymentDetails,
            'branding_theme': BrandingTheme,
            'contact_groups': List[ContactGroup],
            'contact_id': str,
            'contact_number': str,
            'contact_persons': List[ContactPerson],
            'contact_status': str,
            'default_currency': CurrencyCode,
            'discount': float,
            'email_address': str,
            'first_name': str,
            'has_attachments': bool,
            'has_validation_errors': bool,
            'is_customer': bool,
            'is_supplier': bool,
            'last_name': str,
            'name': str,
            'payment_terms': PaymentTerm,
            'phones': List[Phone],
            'purchases_default_account_code': str,
            'purchases_tracking_categories': List[SalesTrackingCategory],
            'sales_default_account_code': str,
            'sales_tracking_categories': List[SalesTrackingCategory],
            'skype_user_name': str,
            'status_attribute_string': str,
            'tax_number': str,
            'tracking_category_name': str,
            'tracking_category_option': str,
            'updated_date_utc': str,
            'validation_errors': List[ValidationError],
            'website': str,
            'xero_network_key': str
        }

        self.attribute_map = {
            'account_number': 'AccountNumber',
            'accounts_payable_tax_type': 'AccountsPayableTaxType',
            'accounts_receivable_tax_type': 'AccountsReceivableTaxType',
            'addresses': 'Addresses',
            'attachments': 'Attachments',
            'balances': 'Balances',
            'bank_account_details': 'BankAccountDetails',
            'batch_payments': 'BatchPayments',
            'branding_theme': 'BrandingTheme',
            'contact_groups': 'ContactGroups',
            'contact_id': 'ContactID',
            'contact_number': 'ContactNumber',
            'contact_persons': 'ContactPersons',
            'contact_status': 'ContactStatus',
            'default_currency': 'DefaultCurrency',
            'discount': 'Discount',
            'email_address': 'EmailAddress',
            'first_name': 'FirstName',
            'has_attachments': 'HasAttachments',
            'has_validation_errors': 'HasValidationErrors',
            'is_customer': 'IsCustomer',
            'is_supplier': 'IsSupplier',
            'last_name': 'LastName',
            'name': 'Name',
            'payment_terms': 'PaymentTerms',
            'phones': 'Phones',
            'purchases_default_account_code': 'PurchasesDefaultAccountCode',
            'purchases_tracking_categories': 'PurchasesTrackingCategories',
            'sales_default_account_code': 'SalesDefaultAccountCode',
            'sales_tracking_categories': 'SalesTrackingCategories',
            'skype_user_name': 'SkypeUserName',
            'status_attribute_string': 'StatusAttributeString',
            'tax_number': 'TaxNumber',
            'tracking_category_name': 'TrackingCategoryName',
            'tracking_category_option': 'TrackingCategoryOption',
            'updated_date_utc': 'UpdatedDateUTC',
            'validation_errors': 'ValidationErrors',
            'website': 'Website',
            'xero_network_key': 'XeroNetworkKey'
        }

        self._account_number = account_number
        self._accounts_payable_tax_type = accounts_payable_tax_type
        self._accounts_receivable_tax_type = accounts_receivable_tax_type
        self._addresses = addresses
        self._attachments = attachments
        self._balances = balances
        self._bank_account_details = bank_account_details
        self._batch_payments = batch_payments
        self._branding_theme = branding_theme
        self._contact_groups = contact_groups
        self._contact_id = contact_id
        self._contact_number = contact_number
        self._contact_persons = contact_persons
        self._contact_status = contact_status
        self._default_currency = default_currency
        self._discount = discount
        self._email_address = email_address
        self._first_name = first_name
        self._has_attachments = has_attachments
        self._has_validation_errors = has_validation_errors
        self._is_customer = is_customer
        self._is_supplier = is_supplier
        self._last_name = last_name
        self._name = name
        self._payment_terms = payment_terms
        self._phones = phones
        self._purchases_default_account_code = purchases_default_account_code
        self._purchases_tracking_categories = purchases_tracking_categories
        self._sales_default_account_code = sales_default_account_code
        self._sales_tracking_categories = sales_tracking_categories
        self._skype_user_name = skype_user_name
        self._status_attribute_string = status_attribute_string
        self._tax_number = tax_number
        self._tracking_category_name = tracking_category_name
        self._tracking_category_option = tracking_category_option
        self._updated_date_utc = updated_date_utc
        self._validation_errors = validation_errors
        self._website = website
        self._xero_network_key = xero_network_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contact of this Contact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this Contact.

        A user defined account number. This can be updated via the API and the Xero UI (max length = 50)

        :return: The account_number of this Contact.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this Contact.

        A user defined account number. This can be updated via the API and the Xero UI (max length = 50)

        :param account_number: The account_number of this Contact.
        :type account_number: str
        """
        if account_number is not None and len(account_number) > 50:
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `50`")

        self._account_number = account_number

    @property
    def accounts_payable_tax_type(self):
        """Gets the accounts_payable_tax_type of this Contact.

        The tax type from TaxRates

        :return: The accounts_payable_tax_type of this Contact.
        :rtype: str
        """
        return self._accounts_payable_tax_type

    @accounts_payable_tax_type.setter
    def accounts_payable_tax_type(self, accounts_payable_tax_type):
        """Sets the accounts_payable_tax_type of this Contact.

        The tax type from TaxRates

        :param accounts_payable_tax_type: The accounts_payable_tax_type of this Contact.
        :type accounts_payable_tax_type: str
        """

        self._accounts_payable_tax_type = accounts_payable_tax_type

    @property
    def accounts_receivable_tax_type(self):
        """Gets the accounts_receivable_tax_type of this Contact.

        The tax type from TaxRates

        :return: The accounts_receivable_tax_type of this Contact.
        :rtype: str
        """
        return self._accounts_receivable_tax_type

    @accounts_receivable_tax_type.setter
    def accounts_receivable_tax_type(self, accounts_receivable_tax_type):
        """Sets the accounts_receivable_tax_type of this Contact.

        The tax type from TaxRates

        :param accounts_receivable_tax_type: The accounts_receivable_tax_type of this Contact.
        :type accounts_receivable_tax_type: str
        """

        self._accounts_receivable_tax_type = accounts_receivable_tax_type

    @property
    def addresses(self):
        """Gets the addresses of this Contact.

        Store certain address types for a contact – see address types

        :return: The addresses of this Contact.
        :rtype: List[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Contact.

        Store certain address types for a contact – see address types

        :param addresses: The addresses of this Contact.
        :type addresses: List[Address]
        """

        self._addresses = addresses

    @property
    def attachments(self):
        """Gets the attachments of this Contact.

        Displays array of attachments from the API

        :return: The attachments of this Contact.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Contact.

        Displays array of attachments from the API

        :param attachments: The attachments of this Contact.
        :type attachments: List[Attachment]
        """

        self._attachments = attachments

    @property
    def balances(self):
        """Gets the balances of this Contact.


        :return: The balances of this Contact.
        :rtype: Balances
        """
        return self._balances

    @balances.setter
    def balances(self, balances):
        """Sets the balances of this Contact.


        :param balances: The balances of this Contact.
        :type balances: Balances
        """

        self._balances = balances

    @property
    def bank_account_details(self):
        """Gets the bank_account_details of this Contact.

        Bank account number of contact

        :return: The bank_account_details of this Contact.
        :rtype: str
        """
        return self._bank_account_details

    @bank_account_details.setter
    def bank_account_details(self, bank_account_details):
        """Sets the bank_account_details of this Contact.

        Bank account number of contact

        :param bank_account_details: The bank_account_details of this Contact.
        :type bank_account_details: str
        """

        self._bank_account_details = bank_account_details

    @property
    def batch_payments(self):
        """Gets the batch_payments of this Contact.


        :return: The batch_payments of this Contact.
        :rtype: BatchPaymentDetails
        """
        return self._batch_payments

    @batch_payments.setter
    def batch_payments(self, batch_payments):
        """Sets the batch_payments of this Contact.


        :param batch_payments: The batch_payments of this Contact.
        :type batch_payments: BatchPaymentDetails
        """

        self._batch_payments = batch_payments

    @property
    def branding_theme(self):
        """Gets the branding_theme of this Contact.


        :return: The branding_theme of this Contact.
        :rtype: BrandingTheme
        """
        return self._branding_theme

    @branding_theme.setter
    def branding_theme(self, branding_theme):
        """Sets the branding_theme of this Contact.


        :param branding_theme: The branding_theme of this Contact.
        :type branding_theme: BrandingTheme
        """

        self._branding_theme = branding_theme

    @property
    def contact_groups(self):
        """Gets the contact_groups of this Contact.

        Displays which contact groups a contact is included in

        :return: The contact_groups of this Contact.
        :rtype: List[ContactGroup]
        """
        return self._contact_groups

    @contact_groups.setter
    def contact_groups(self, contact_groups):
        """Sets the contact_groups of this Contact.

        Displays which contact groups a contact is included in

        :param contact_groups: The contact_groups of this Contact.
        :type contact_groups: List[ContactGroup]
        """

        self._contact_groups = contact_groups

    @property
    def contact_id(self):
        """Gets the contact_id of this Contact.

        Xero identifier

        :return: The contact_id of this Contact.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this Contact.

        Xero identifier

        :param contact_id: The contact_id of this Contact.
        :type contact_id: str
        """

        self._contact_id = contact_id

    @property
    def contact_number(self):
        """Gets the contact_number of this Contact.

        This can be updated via the API only i.e. This field is read only on the Xero contact screen, used to identify contacts in external systems (max length = 50). If the Contact Number is used, this is displayed as Contact Code in the Contacts UI in Xero.

        :return: The contact_number of this Contact.
        :rtype: str
        """
        return self._contact_number

    @contact_number.setter
    def contact_number(self, contact_number):
        """Sets the contact_number of this Contact.

        This can be updated via the API only i.e. This field is read only on the Xero contact screen, used to identify contacts in external systems (max length = 50). If the Contact Number is used, this is displayed as Contact Code in the Contacts UI in Xero.

        :param contact_number: The contact_number of this Contact.
        :type contact_number: str
        """
        if contact_number is not None and len(contact_number) > 50:
            raise ValueError("Invalid value for `contact_number`, length must be less than or equal to `50`")

        self._contact_number = contact_number

    @property
    def contact_persons(self):
        """Gets the contact_persons of this Contact.

        See contact persons

        :return: The contact_persons of this Contact.
        :rtype: List[ContactPerson]
        """
        return self._contact_persons

    @contact_persons.setter
    def contact_persons(self, contact_persons):
        """Sets the contact_persons of this Contact.

        See contact persons

        :param contact_persons: The contact_persons of this Contact.
        :type contact_persons: List[ContactPerson]
        """

        self._contact_persons = contact_persons

    @property
    def contact_status(self):
        """Gets the contact_status of this Contact.

        Current status of a contact – see contact status types

        :return: The contact_status of this Contact.
        :rtype: str
        """
        return self._contact_status

    @contact_status.setter
    def contact_status(self, contact_status):
        """Sets the contact_status of this Contact.

        Current status of a contact – see contact status types

        :param contact_status: The contact_status of this Contact.
        :type contact_status: str
        """
        allowed_values = ["ACTIVE", "ARCHIVED", "GDPRREQUEST"]  # noqa: E501
        if contact_status not in allowed_values:
            raise ValueError(
                "Invalid value for `contact_status` ({0}), must be one of {1}"
                .format(contact_status, allowed_values)
            )

        self._contact_status = contact_status

    @property
    def default_currency(self):
        """Gets the default_currency of this Contact.


        :return: The default_currency of this Contact.
        :rtype: CurrencyCode
        """
        return self._default_currency

    @default_currency.setter
    def default_currency(self, default_currency):
        """Sets the default_currency of this Contact.


        :param default_currency: The default_currency of this Contact.
        :type default_currency: CurrencyCode
        """

        self._default_currency = default_currency

    @property
    def discount(self):
        """Gets the discount of this Contact.

        The default discount rate for the contact (read only)

        :return: The discount of this Contact.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this Contact.

        The default discount rate for the contact (read only)

        :param discount: The discount of this Contact.
        :type discount: float
        """

        self._discount = discount

    @property
    def email_address(self):
        """Gets the email_address of this Contact.

        Email address of contact person (umlauts not supported) (max length  = 255)

        :return: The email_address of this Contact.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Contact.

        Email address of contact person (umlauts not supported) (max length  = 255)

        :param email_address: The email_address of this Contact.
        :type email_address: str
        """
        if email_address is not None and len(email_address) > 255:
            raise ValueError("Invalid value for `email_address`, length must be less than or equal to `255`")

        self._email_address = email_address

    @property
    def first_name(self):
        """Gets the first_name of this Contact.

        First name of contact person (max length = 255)

        :return: The first_name of this Contact.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Contact.

        First name of contact person (max length = 255)

        :param first_name: The first_name of this Contact.
        :type first_name: str
        """
        if first_name is not None and len(first_name) > 255:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `255`")

        self._first_name = first_name

    @property
    def has_attachments(self):
        """Gets the has_attachments of this Contact.

        A boolean to indicate if a contact has an attachment

        :return: The has_attachments of this Contact.
        :rtype: bool
        """
        return self._has_attachments

    @has_attachments.setter
    def has_attachments(self, has_attachments):
        """Sets the has_attachments of this Contact.

        A boolean to indicate if a contact has an attachment

        :param has_attachments: The has_attachments of this Contact.
        :type has_attachments: bool
        """

        self._has_attachments = has_attachments

    @property
    def has_validation_errors(self):
        """Gets the has_validation_errors of this Contact.

        A boolean to indicate if a contact has an validation errors

        :return: The has_validation_errors of this Contact.
        :rtype: bool
        """
        return self._has_validation_errors

    @has_validation_errors.setter
    def has_validation_errors(self, has_validation_errors):
        """Sets the has_validation_errors of this Contact.

        A boolean to indicate if a contact has an validation errors

        :param has_validation_errors: The has_validation_errors of this Contact.
        :type has_validation_errors: bool
        """

        self._has_validation_errors = has_validation_errors

    @property
    def is_customer(self):
        """Gets the is_customer of this Contact.

        true or false – Boolean that describes if a contact has any AR invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts receivable invoice is generated against this contact.

        :return: The is_customer of this Contact.
        :rtype: bool
        """
        return self._is_customer

    @is_customer.setter
    def is_customer(self, is_customer):
        """Sets the is_customer of this Contact.

        true or false – Boolean that describes if a contact has any AR invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts receivable invoice is generated against this contact.

        :param is_customer: The is_customer of this Contact.
        :type is_customer: bool
        """

        self._is_customer = is_customer

    @property
    def is_supplier(self):
        """Gets the is_supplier of this Contact.

        true or false – Boolean that describes if a contact that has any AP  invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts payable invoice is generated against this contact.

        :return: The is_supplier of this Contact.
        :rtype: bool
        """
        return self._is_supplier

    @is_supplier.setter
    def is_supplier(self, is_supplier):
        """Sets the is_supplier of this Contact.

        true or false – Boolean that describes if a contact that has any AP  invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts payable invoice is generated against this contact.

        :param is_supplier: The is_supplier of this Contact.
        :type is_supplier: bool
        """

        self._is_supplier = is_supplier

    @property
    def last_name(self):
        """Gets the last_name of this Contact.

        Last name of contact person (max length = 255)

        :return: The last_name of this Contact.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Contact.

        Last name of contact person (max length = 255)

        :param last_name: The last_name of this Contact.
        :type last_name: str
        """
        if last_name is not None and len(last_name) > 255:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `255`")

        self._last_name = last_name

    @property
    def name(self):
        """Gets the name of this Contact.

        Full name of contact/organisation (max length = 255)

        :return: The name of this Contact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Contact.

        Full name of contact/organisation (max length = 255)

        :param name: The name of this Contact.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def payment_terms(self):
        """Gets the payment_terms of this Contact.


        :return: The payment_terms of this Contact.
        :rtype: PaymentTerm
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """Sets the payment_terms of this Contact.


        :param payment_terms: The payment_terms of this Contact.
        :type payment_terms: PaymentTerm
        """

        self._payment_terms = payment_terms

    @property
    def phones(self):
        """Gets the phones of this Contact.

        Store certain phone types for a contact – see phone types

        :return: The phones of this Contact.
        :rtype: List[Phone]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this Contact.

        Store certain phone types for a contact – see phone types

        :param phones: The phones of this Contact.
        :type phones: List[Phone]
        """

        self._phones = phones

    @property
    def purchases_default_account_code(self):
        """Gets the purchases_default_account_code of this Contact.

        The default purchases account code for contacts

        :return: The purchases_default_account_code of this Contact.
        :rtype: str
        """
        return self._purchases_default_account_code

    @purchases_default_account_code.setter
    def purchases_default_account_code(self, purchases_default_account_code):
        """Sets the purchases_default_account_code of this Contact.

        The default purchases account code for contacts

        :param purchases_default_account_code: The purchases_default_account_code of this Contact.
        :type purchases_default_account_code: str
        """

        self._purchases_default_account_code = purchases_default_account_code

    @property
    def purchases_tracking_categories(self):
        """Gets the purchases_tracking_categories of this Contact.

        The default purchases tracking categories for contacts

        :return: The purchases_tracking_categories of this Contact.
        :rtype: List[SalesTrackingCategory]
        """
        return self._purchases_tracking_categories

    @purchases_tracking_categories.setter
    def purchases_tracking_categories(self, purchases_tracking_categories):
        """Sets the purchases_tracking_categories of this Contact.

        The default purchases tracking categories for contacts

        :param purchases_tracking_categories: The purchases_tracking_categories of this Contact.
        :type purchases_tracking_categories: List[SalesTrackingCategory]
        """

        self._purchases_tracking_categories = purchases_tracking_categories

    @property
    def sales_default_account_code(self):
        """Gets the sales_default_account_code of this Contact.

        The default sales account code for contacts

        :return: The sales_default_account_code of this Contact.
        :rtype: str
        """
        return self._sales_default_account_code

    @sales_default_account_code.setter
    def sales_default_account_code(self, sales_default_account_code):
        """Sets the sales_default_account_code of this Contact.

        The default sales account code for contacts

        :param sales_default_account_code: The sales_default_account_code of this Contact.
        :type sales_default_account_code: str
        """

        self._sales_default_account_code = sales_default_account_code

    @property
    def sales_tracking_categories(self):
        """Gets the sales_tracking_categories of this Contact.

        The default sales tracking categories for contacts

        :return: The sales_tracking_categories of this Contact.
        :rtype: List[SalesTrackingCategory]
        """
        return self._sales_tracking_categories

    @sales_tracking_categories.setter
    def sales_tracking_categories(self, sales_tracking_categories):
        """Sets the sales_tracking_categories of this Contact.

        The default sales tracking categories for contacts

        :param sales_tracking_categories: The sales_tracking_categories of this Contact.
        :type sales_tracking_categories: List[SalesTrackingCategory]
        """

        self._sales_tracking_categories = sales_tracking_categories

    @property
    def skype_user_name(self):
        """Gets the skype_user_name of this Contact.

        Skype user name of contact

        :return: The skype_user_name of this Contact.
        :rtype: str
        """
        return self._skype_user_name

    @skype_user_name.setter
    def skype_user_name(self, skype_user_name):
        """Sets the skype_user_name of this Contact.

        Skype user name of contact

        :param skype_user_name: The skype_user_name of this Contact.
        :type skype_user_name: str
        """

        self._skype_user_name = skype_user_name

    @property
    def status_attribute_string(self):
        """Gets the status_attribute_string of this Contact.

        Status of object

        :return: The status_attribute_string of this Contact.
        :rtype: str
        """
        return self._status_attribute_string

    @status_attribute_string.setter
    def status_attribute_string(self, status_attribute_string):
        """Sets the status_attribute_string of this Contact.

        Status of object

        :param status_attribute_string: The status_attribute_string of this Contact.
        :type status_attribute_string: str
        """

        self._status_attribute_string = status_attribute_string

    @property
    def tax_number(self):
        """Gets the tax_number of this Contact.

        Tax number of contact – this is also known as the ABN (Australia), GST Number (New Zealand), VAT Number (UK) or Tax ID Number (US and global) in the Xero UI depending on which regionalized version of Xero you are using (max length = 50)

        :return: The tax_number of this Contact.
        :rtype: str
        """
        return self._tax_number

    @tax_number.setter
    def tax_number(self, tax_number):
        """Sets the tax_number of this Contact.

        Tax number of contact – this is also known as the ABN (Australia), GST Number (New Zealand), VAT Number (UK) or Tax ID Number (US and global) in the Xero UI depending on which regionalized version of Xero you are using (max length = 50)

        :param tax_number: The tax_number of this Contact.
        :type tax_number: str
        """
        if tax_number is not None and len(tax_number) > 50:
            raise ValueError("Invalid value for `tax_number`, length must be less than or equal to `50`")

        self._tax_number = tax_number

    @property
    def tracking_category_name(self):
        """Gets the tracking_category_name of this Contact.

        The name of the Tracking Category assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories

        :return: The tracking_category_name of this Contact.
        :rtype: str
        """
        return self._tracking_category_name

    @tracking_category_name.setter
    def tracking_category_name(self, tracking_category_name):
        """Sets the tracking_category_name of this Contact.

        The name of the Tracking Category assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories

        :param tracking_category_name: The tracking_category_name of this Contact.
        :type tracking_category_name: str
        """

        self._tracking_category_name = tracking_category_name

    @property
    def tracking_category_option(self):
        """Gets the tracking_category_option of this Contact.

        The name of the Tracking Option assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories

        :return: The tracking_category_option of this Contact.
        :rtype: str
        """
        return self._tracking_category_option

    @tracking_category_option.setter
    def tracking_category_option(self, tracking_category_option):
        """Sets the tracking_category_option of this Contact.

        The name of the Tracking Option assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories

        :param tracking_category_option: The tracking_category_option of this Contact.
        :type tracking_category_option: str
        """

        self._tracking_category_option = tracking_category_option

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this Contact.

        UTC timestamp of last update to contact

        :return: The updated_date_utc of this Contact.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this Contact.

        UTC timestamp of last update to contact

        :param updated_date_utc: The updated_date_utc of this Contact.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc

    @property
    def validation_errors(self):
        """Gets the validation_errors of this Contact.

        Displays validation errors returned from the API

        :return: The validation_errors of this Contact.
        :rtype: List[ValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this Contact.

        Displays validation errors returned from the API

        :param validation_errors: The validation_errors of this Contact.
        :type validation_errors: List[ValidationError]
        """

        self._validation_errors = validation_errors

    @property
    def website(self):
        """Gets the website of this Contact.

        Website address for contact (read only)

        :return: The website of this Contact.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Contact.

        Website address for contact (read only)

        :param website: The website of this Contact.
        :type website: str
        """

        self._website = website

    @property
    def xero_network_key(self):
        """Gets the xero_network_key of this Contact.

        Store XeroNetworkKey for contacts.

        :return: The xero_network_key of this Contact.
        :rtype: str
        """
        return self._xero_network_key

    @xero_network_key.setter
    def xero_network_key(self, xero_network_key):
        """Sets the xero_network_key of this Contact.

        Store XeroNetworkKey for contacts.

        :param xero_network_key: The xero_network_key of this Contact.
        :type xero_network_key: str
        """

        self._xero_network_key = xero_network_key
