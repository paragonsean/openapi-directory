# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment import Attachment
from openapi_server.models.contact import Contact
from openapi_server.models.line_amount_types import LineAmountTypes
from openapi_server.models.line_item import LineItem
from openapi_server.models.user import User
from openapi_server.models.validation_error import ValidationError
from openapi_server import util


class Receipt(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[Attachment]=None, contact: Contact=None, _date: str=None, has_attachments: bool=False, line_amount_types: LineAmountTypes=None, line_items: List[LineItem]=None, receipt_id: str=None, receipt_number: str=None, reference: str=None, status: str=None, sub_total: float=None, total: float=None, total_tax: float=None, updated_date_utc: str=None, url: str=None, user: User=None, validation_errors: List[ValidationError]=None, warnings: List[ValidationError]=None):
        """Receipt - a model defined in OpenAPI

        :param attachments: The attachments of this Receipt.
        :param contact: The contact of this Receipt.
        :param _date: The _date of this Receipt.
        :param has_attachments: The has_attachments of this Receipt.
        :param line_amount_types: The line_amount_types of this Receipt.
        :param line_items: The line_items of this Receipt.
        :param receipt_id: The receipt_id of this Receipt.
        :param receipt_number: The receipt_number of this Receipt.
        :param reference: The reference of this Receipt.
        :param status: The status of this Receipt.
        :param sub_total: The sub_total of this Receipt.
        :param total: The total of this Receipt.
        :param total_tax: The total_tax of this Receipt.
        :param updated_date_utc: The updated_date_utc of this Receipt.
        :param url: The url of this Receipt.
        :param user: The user of this Receipt.
        :param validation_errors: The validation_errors of this Receipt.
        :param warnings: The warnings of this Receipt.
        """
        self.openapi_types = {
            'attachments': List[Attachment],
            'contact': Contact,
            '_date': str,
            'has_attachments': bool,
            'line_amount_types': LineAmountTypes,
            'line_items': List[LineItem],
            'receipt_id': str,
            'receipt_number': str,
            'reference': str,
            'status': str,
            'sub_total': float,
            'total': float,
            'total_tax': float,
            'updated_date_utc': str,
            'url': str,
            'user': User,
            'validation_errors': List[ValidationError],
            'warnings': List[ValidationError]
        }

        self.attribute_map = {
            'attachments': 'Attachments',
            'contact': 'Contact',
            '_date': 'Date',
            'has_attachments': 'HasAttachments',
            'line_amount_types': 'LineAmountTypes',
            'line_items': 'LineItems',
            'receipt_id': 'ReceiptID',
            'receipt_number': 'ReceiptNumber',
            'reference': 'Reference',
            'status': 'Status',
            'sub_total': 'SubTotal',
            'total': 'Total',
            'total_tax': 'TotalTax',
            'updated_date_utc': 'UpdatedDateUTC',
            'url': 'Url',
            'user': 'User',
            'validation_errors': 'ValidationErrors',
            'warnings': 'Warnings'
        }

        self._attachments = attachments
        self._contact = contact
        self.__date = _date
        self._has_attachments = has_attachments
        self._line_amount_types = line_amount_types
        self._line_items = line_items
        self._receipt_id = receipt_id
        self._receipt_number = receipt_number
        self._reference = reference
        self._status = status
        self._sub_total = sub_total
        self._total = total
        self._total_tax = total_tax
        self._updated_date_utc = updated_date_utc
        self._url = url
        self._user = user
        self._validation_errors = validation_errors
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Receipt':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Receipt of this Receipt.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this Receipt.

        Displays array of attachments from the API

        :return: The attachments of this Receipt.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Receipt.

        Displays array of attachments from the API

        :param attachments: The attachments of this Receipt.
        :type attachments: List[Attachment]
        """

        self._attachments = attachments

    @property
    def contact(self):
        """Gets the contact of this Receipt.


        :return: The contact of this Receipt.
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Receipt.


        :param contact: The contact of this Receipt.
        :type contact: Contact
        """

        self._contact = contact

    @property
    def _date(self):
        """Gets the _date of this Receipt.

        Date of receipt – YYYY-MM-DD

        :return: The _date of this Receipt.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Receipt.

        Date of receipt – YYYY-MM-DD

        :param _date: The _date of this Receipt.
        :type _date: str
        """

        self.__date = _date

    @property
    def has_attachments(self):
        """Gets the has_attachments of this Receipt.

        boolean to indicate if a receipt has an attachment

        :return: The has_attachments of this Receipt.
        :rtype: bool
        """
        return self._has_attachments

    @has_attachments.setter
    def has_attachments(self, has_attachments):
        """Sets the has_attachments of this Receipt.

        boolean to indicate if a receipt has an attachment

        :param has_attachments: The has_attachments of this Receipt.
        :type has_attachments: bool
        """

        self._has_attachments = has_attachments

    @property
    def line_amount_types(self):
        """Gets the line_amount_types of this Receipt.


        :return: The line_amount_types of this Receipt.
        :rtype: LineAmountTypes
        """
        return self._line_amount_types

    @line_amount_types.setter
    def line_amount_types(self, line_amount_types):
        """Sets the line_amount_types of this Receipt.


        :param line_amount_types: The line_amount_types of this Receipt.
        :type line_amount_types: LineAmountTypes
        """

        self._line_amount_types = line_amount_types

    @property
    def line_items(self):
        """Gets the line_items of this Receipt.


        :return: The line_items of this Receipt.
        :rtype: List[LineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this Receipt.


        :param line_items: The line_items of this Receipt.
        :type line_items: List[LineItem]
        """

        self._line_items = line_items

    @property
    def receipt_id(self):
        """Gets the receipt_id of this Receipt.

        Xero generated unique identifier for receipt

        :return: The receipt_id of this Receipt.
        :rtype: str
        """
        return self._receipt_id

    @receipt_id.setter
    def receipt_id(self, receipt_id):
        """Sets the receipt_id of this Receipt.

        Xero generated unique identifier for receipt

        :param receipt_id: The receipt_id of this Receipt.
        :type receipt_id: str
        """

        self._receipt_id = receipt_id

    @property
    def receipt_number(self):
        """Gets the receipt_number of this Receipt.

        Xero generated sequence number for receipt in current claim for a given user

        :return: The receipt_number of this Receipt.
        :rtype: str
        """
        return self._receipt_number

    @receipt_number.setter
    def receipt_number(self, receipt_number):
        """Sets the receipt_number of this Receipt.

        Xero generated sequence number for receipt in current claim for a given user

        :param receipt_number: The receipt_number of this Receipt.
        :type receipt_number: str
        """

        self._receipt_number = receipt_number

    @property
    def reference(self):
        """Gets the reference of this Receipt.

        Additional reference number

        :return: The reference of this Receipt.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Receipt.

        Additional reference number

        :param reference: The reference of this Receipt.
        :type reference: str
        """

        self._reference = reference

    @property
    def status(self):
        """Gets the status of this Receipt.

        Current status of receipt – see status types

        :return: The status of this Receipt.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Receipt.

        Current status of receipt – see status types

        :param status: The status of this Receipt.
        :type status: str
        """
        allowed_values = ["DRAFT", "SUBMITTED", "AUTHORISED", "DECLINED", "VOIDED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sub_total(self):
        """Gets the sub_total of this Receipt.

        Total of receipt excluding taxes

        :return: The sub_total of this Receipt.
        :rtype: float
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this Receipt.

        Total of receipt excluding taxes

        :param sub_total: The sub_total of this Receipt.
        :type sub_total: float
        """

        self._sub_total = sub_total

    @property
    def total(self):
        """Gets the total of this Receipt.

        Total of receipt tax inclusive (i.e. SubTotal + TotalTax)

        :return: The total of this Receipt.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Receipt.

        Total of receipt tax inclusive (i.e. SubTotal + TotalTax)

        :param total: The total of this Receipt.
        :type total: float
        """

        self._total = total

    @property
    def total_tax(self):
        """Gets the total_tax of this Receipt.

        Total tax on receipt

        :return: The total_tax of this Receipt.
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this Receipt.

        Total tax on receipt

        :param total_tax: The total_tax of this Receipt.
        :type total_tax: float
        """

        self._total_tax = total_tax

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this Receipt.

        Last modified date UTC format

        :return: The updated_date_utc of this Receipt.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this Receipt.

        Last modified date UTC format

        :param updated_date_utc: The updated_date_utc of this Receipt.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc

    @property
    def url(self):
        """Gets the url of this Receipt.

        URL link to a source document – shown as “Go to [appName]” in the Xero app

        :return: The url of this Receipt.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Receipt.

        URL link to a source document – shown as “Go to [appName]” in the Xero app

        :param url: The url of this Receipt.
        :type url: str
        """

        self._url = url

    @property
    def user(self):
        """Gets the user of this Receipt.


        :return: The user of this Receipt.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Receipt.


        :param user: The user of this Receipt.
        :type user: User
        """

        self._user = user

    @property
    def validation_errors(self):
        """Gets the validation_errors of this Receipt.

        Displays array of validation error messages from the API

        :return: The validation_errors of this Receipt.
        :rtype: List[ValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this Receipt.

        Displays array of validation error messages from the API

        :param validation_errors: The validation_errors of this Receipt.
        :type validation_errors: List[ValidationError]
        """

        self._validation_errors = validation_errors

    @property
    def warnings(self):
        """Gets the warnings of this Receipt.

        Displays array of warning messages from the API

        :return: The warnings of this Receipt.
        :rtype: List[ValidationError]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this Receipt.

        Displays array of warning messages from the API

        :param warnings: The warnings of this Receipt.
        :type warnings: List[ValidationError]
        """

        self._warnings = warnings
