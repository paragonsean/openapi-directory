# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account import Account
from openapi_server.models.credit_note import CreditNote
from openapi_server.models.invoice import Invoice
from openapi_server.models.overpayment import Overpayment
from openapi_server.models.prepayment import Prepayment
from openapi_server.models.validation_error import ValidationError
from openapi_server import util


class Payment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: Account=None, amount: float=None, bank_account_number: str=None, batch_payment_id: str=None, code: str=None, credit_note: CreditNote=None, credit_note_number: str=None, currency_rate: float=None, _date: str=None, details: str=None, has_account: bool=False, has_validation_errors: bool=False, invoice: Invoice=None, invoice_number: str=None, is_reconciled: bool=None, overpayment: Overpayment=None, particulars: str=None, payment_id: str=None, payment_type: str=None, prepayment: Prepayment=None, reference: str=None, status: str=None, status_attribute_string: str=None, updated_date_utc: str=None, validation_errors: List[ValidationError]=None):
        """Payment - a model defined in OpenAPI

        :param account: The account of this Payment.
        :param amount: The amount of this Payment.
        :param bank_account_number: The bank_account_number of this Payment.
        :param batch_payment_id: The batch_payment_id of this Payment.
        :param code: The code of this Payment.
        :param credit_note: The credit_note of this Payment.
        :param credit_note_number: The credit_note_number of this Payment.
        :param currency_rate: The currency_rate of this Payment.
        :param _date: The _date of this Payment.
        :param details: The details of this Payment.
        :param has_account: The has_account of this Payment.
        :param has_validation_errors: The has_validation_errors of this Payment.
        :param invoice: The invoice of this Payment.
        :param invoice_number: The invoice_number of this Payment.
        :param is_reconciled: The is_reconciled of this Payment.
        :param overpayment: The overpayment of this Payment.
        :param particulars: The particulars of this Payment.
        :param payment_id: The payment_id of this Payment.
        :param payment_type: The payment_type of this Payment.
        :param prepayment: The prepayment of this Payment.
        :param reference: The reference of this Payment.
        :param status: The status of this Payment.
        :param status_attribute_string: The status_attribute_string of this Payment.
        :param updated_date_utc: The updated_date_utc of this Payment.
        :param validation_errors: The validation_errors of this Payment.
        """
        self.openapi_types = {
            'account': Account,
            'amount': float,
            'bank_account_number': str,
            'batch_payment_id': str,
            'code': str,
            'credit_note': CreditNote,
            'credit_note_number': str,
            'currency_rate': float,
            '_date': str,
            'details': str,
            'has_account': bool,
            'has_validation_errors': bool,
            'invoice': Invoice,
            'invoice_number': str,
            'is_reconciled': bool,
            'overpayment': Overpayment,
            'particulars': str,
            'payment_id': str,
            'payment_type': str,
            'prepayment': Prepayment,
            'reference': str,
            'status': str,
            'status_attribute_string': str,
            'updated_date_utc': str,
            'validation_errors': List[ValidationError]
        }

        self.attribute_map = {
            'account': 'Account',
            'amount': 'Amount',
            'bank_account_number': 'BankAccountNumber',
            'batch_payment_id': 'BatchPaymentID',
            'code': 'Code',
            'credit_note': 'CreditNote',
            'credit_note_number': 'CreditNoteNumber',
            'currency_rate': 'CurrencyRate',
            '_date': 'Date',
            'details': 'Details',
            'has_account': 'HasAccount',
            'has_validation_errors': 'HasValidationErrors',
            'invoice': 'Invoice',
            'invoice_number': 'InvoiceNumber',
            'is_reconciled': 'IsReconciled',
            'overpayment': 'Overpayment',
            'particulars': 'Particulars',
            'payment_id': 'PaymentID',
            'payment_type': 'PaymentType',
            'prepayment': 'Prepayment',
            'reference': 'Reference',
            'status': 'Status',
            'status_attribute_string': 'StatusAttributeString',
            'updated_date_utc': 'UpdatedDateUTC',
            'validation_errors': 'ValidationErrors'
        }

        self._account = account
        self._amount = amount
        self._bank_account_number = bank_account_number
        self._batch_payment_id = batch_payment_id
        self._code = code
        self._credit_note = credit_note
        self._credit_note_number = credit_note_number
        self._currency_rate = currency_rate
        self.__date = _date
        self._details = details
        self._has_account = has_account
        self._has_validation_errors = has_validation_errors
        self._invoice = invoice
        self._invoice_number = invoice_number
        self._is_reconciled = is_reconciled
        self._overpayment = overpayment
        self._particulars = particulars
        self._payment_id = payment_id
        self._payment_type = payment_type
        self._prepayment = prepayment
        self._reference = reference
        self._status = status
        self._status_attribute_string = status_attribute_string
        self._updated_date_utc = updated_date_utc
        self._validation_errors = validation_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Payment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Payment of this Payment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this Payment.


        :return: The account of this Payment.
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Payment.


        :param account: The account of this Payment.
        :type account: Account
        """

        self._account = account

    @property
    def amount(self):
        """Gets the amount of this Payment.

        The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00

        :return: The amount of this Payment.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Payment.

        The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00

        :param amount: The amount of this Payment.
        :type amount: float
        """

        self._amount = amount

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this Payment.

        The suppliers bank account number the payment is being made to

        :return: The bank_account_number of this Payment.
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this Payment.

        The suppliers bank account number the payment is being made to

        :param bank_account_number: The bank_account_number of this Payment.
        :type bank_account_number: str
        """

        self._bank_account_number = bank_account_number

    @property
    def batch_payment_id(self):
        """Gets the batch_payment_id of this Payment.

        Present if the payment was created as part of a batch.

        :return: The batch_payment_id of this Payment.
        :rtype: str
        """
        return self._batch_payment_id

    @batch_payment_id.setter
    def batch_payment_id(self, batch_payment_id):
        """Sets the batch_payment_id of this Payment.

        Present if the payment was created as part of a batch.

        :param batch_payment_id: The batch_payment_id of this Payment.
        :type batch_payment_id: str
        """

        self._batch_payment_id = batch_payment_id

    @property
    def code(self):
        """Gets the code of this Payment.

        Code of account you are using to make the payment e.g. 001 (note- not all accounts have a code value)

        :return: The code of this Payment.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Payment.

        Code of account you are using to make the payment e.g. 001 (note- not all accounts have a code value)

        :param code: The code of this Payment.
        :type code: str
        """

        self._code = code

    @property
    def credit_note(self):
        """Gets the credit_note of this Payment.


        :return: The credit_note of this Payment.
        :rtype: CreditNote
        """
        return self._credit_note

    @credit_note.setter
    def credit_note(self, credit_note):
        """Sets the credit_note of this Payment.


        :param credit_note: The credit_note of this Payment.
        :type credit_note: CreditNote
        """

        self._credit_note = credit_note

    @property
    def credit_note_number(self):
        """Gets the credit_note_number of this Payment.

        Number of invoice or credit note you are applying payment to e.g. INV-4003

        :return: The credit_note_number of this Payment.
        :rtype: str
        """
        return self._credit_note_number

    @credit_note_number.setter
    def credit_note_number(self, credit_note_number):
        """Sets the credit_note_number of this Payment.

        Number of invoice or credit note you are applying payment to e.g. INV-4003

        :param credit_note_number: The credit_note_number of this Payment.
        :type credit_note_number: str
        """

        self._credit_note_number = credit_note_number

    @property
    def currency_rate(self):
        """Gets the currency_rate of this Payment.

        Exchange rate when payment is received. Only used for non base currency invoices and credit notes e.g. 0.7500

        :return: The currency_rate of this Payment.
        :rtype: float
        """
        return self._currency_rate

    @currency_rate.setter
    def currency_rate(self, currency_rate):
        """Sets the currency_rate of this Payment.

        Exchange rate when payment is received. Only used for non base currency invoices and credit notes e.g. 0.7500

        :param currency_rate: The currency_rate of this Payment.
        :type currency_rate: float
        """

        self._currency_rate = currency_rate

    @property
    def _date(self):
        """Gets the _date of this Payment.

        Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06

        :return: The _date of this Payment.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Payment.

        Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06

        :param _date: The _date of this Payment.
        :type _date: str
        """

        self.__date = _date

    @property
    def details(self):
        """Gets the details of this Payment.

        The information to appear on the supplier's bank account

        :return: The details of this Payment.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Payment.

        The information to appear on the supplier's bank account

        :param details: The details of this Payment.
        :type details: str
        """

        self._details = details

    @property
    def has_account(self):
        """Gets the has_account of this Payment.

        A boolean to indicate if a contact has an validation errors

        :return: The has_account of this Payment.
        :rtype: bool
        """
        return self._has_account

    @has_account.setter
    def has_account(self, has_account):
        """Sets the has_account of this Payment.

        A boolean to indicate if a contact has an validation errors

        :param has_account: The has_account of this Payment.
        :type has_account: bool
        """

        self._has_account = has_account

    @property
    def has_validation_errors(self):
        """Gets the has_validation_errors of this Payment.

        A boolean to indicate if a contact has an validation errors

        :return: The has_validation_errors of this Payment.
        :rtype: bool
        """
        return self._has_validation_errors

    @has_validation_errors.setter
    def has_validation_errors(self, has_validation_errors):
        """Sets the has_validation_errors of this Payment.

        A boolean to indicate if a contact has an validation errors

        :param has_validation_errors: The has_validation_errors of this Payment.
        :type has_validation_errors: bool
        """

        self._has_validation_errors = has_validation_errors

    @property
    def invoice(self):
        """Gets the invoice of this Payment.


        :return: The invoice of this Payment.
        :rtype: Invoice
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this Payment.


        :param invoice: The invoice of this Payment.
        :type invoice: Invoice
        """

        self._invoice = invoice

    @property
    def invoice_number(self):
        """Gets the invoice_number of this Payment.

        Number of invoice or credit note you are applying payment to e.g.INV-4003

        :return: The invoice_number of this Payment.
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this Payment.

        Number of invoice or credit note you are applying payment to e.g.INV-4003

        :param invoice_number: The invoice_number of this Payment.
        :type invoice_number: str
        """

        self._invoice_number = invoice_number

    @property
    def is_reconciled(self):
        """Gets the is_reconciled of this Payment.

        An optional parameter for the payment. A boolean indicating whether you would like the payment to be created as reconciled when using PUT, or whether a payment has been reconciled when using GET

        :return: The is_reconciled of this Payment.
        :rtype: bool
        """
        return self._is_reconciled

    @is_reconciled.setter
    def is_reconciled(self, is_reconciled):
        """Sets the is_reconciled of this Payment.

        An optional parameter for the payment. A boolean indicating whether you would like the payment to be created as reconciled when using PUT, or whether a payment has been reconciled when using GET

        :param is_reconciled: The is_reconciled of this Payment.
        :type is_reconciled: bool
        """

        self._is_reconciled = is_reconciled

    @property
    def overpayment(self):
        """Gets the overpayment of this Payment.


        :return: The overpayment of this Payment.
        :rtype: Overpayment
        """
        return self._overpayment

    @overpayment.setter
    def overpayment(self, overpayment):
        """Sets the overpayment of this Payment.


        :param overpayment: The overpayment of this Payment.
        :type overpayment: Overpayment
        """

        self._overpayment = overpayment

    @property
    def particulars(self):
        """Gets the particulars of this Payment.

        The suppliers bank account number the payment is being made to

        :return: The particulars of this Payment.
        :rtype: str
        """
        return self._particulars

    @particulars.setter
    def particulars(self, particulars):
        """Sets the particulars of this Payment.

        The suppliers bank account number the payment is being made to

        :param particulars: The particulars of this Payment.
        :type particulars: str
        """

        self._particulars = particulars

    @property
    def payment_id(self):
        """Gets the payment_id of this Payment.

        The Xero identifier for an Payment e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9

        :return: The payment_id of this Payment.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this Payment.

        The Xero identifier for an Payment e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9

        :param payment_id: The payment_id of this Payment.
        :type payment_id: str
        """

        self._payment_id = payment_id

    @property
    def payment_type(self):
        """Gets the payment_type of this Payment.

        See Payment Types.

        :return: The payment_type of this Payment.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this Payment.

        See Payment Types.

        :param payment_type: The payment_type of this Payment.
        :type payment_type: str
        """
        allowed_values = ["ACCRECPAYMENT", "ACCPAYPAYMENT", "ARCREDITPAYMENT", "APCREDITPAYMENT", "AROVERPAYMENTPAYMENT", "ARPREPAYMENTPAYMENT", "APPREPAYMENTPAYMENT", "APOVERPAYMENTPAYMENT"]  # noqa: E501
        if payment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_type` ({0}), must be one of {1}"
                .format(payment_type, allowed_values)
            )

        self._payment_type = payment_type

    @property
    def prepayment(self):
        """Gets the prepayment of this Payment.


        :return: The prepayment of this Payment.
        :rtype: Prepayment
        """
        return self._prepayment

    @prepayment.setter
    def prepayment(self, prepayment):
        """Sets the prepayment of this Payment.


        :param prepayment: The prepayment of this Payment.
        :type prepayment: Prepayment
        """

        self._prepayment = prepayment

    @property
    def reference(self):
        """Gets the reference of this Payment.

        An optional description for the payment e.g. Direct Debit

        :return: The reference of this Payment.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Payment.

        An optional description for the payment e.g. Direct Debit

        :param reference: The reference of this Payment.
        :type reference: str
        """

        self._reference = reference

    @property
    def status(self):
        """Gets the status of this Payment.

        The status of the payment.

        :return: The status of this Payment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Payment.

        The status of the payment.

        :param status: The status of this Payment.
        :type status: str
        """
        allowed_values = ["AUTHORISED", "DELETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_attribute_string(self):
        """Gets the status_attribute_string of this Payment.

        A string to indicate if a invoice status

        :return: The status_attribute_string of this Payment.
        :rtype: str
        """
        return self._status_attribute_string

    @status_attribute_string.setter
    def status_attribute_string(self, status_attribute_string):
        """Sets the status_attribute_string of this Payment.

        A string to indicate if a invoice status

        :param status_attribute_string: The status_attribute_string of this Payment.
        :type status_attribute_string: str
        """

        self._status_attribute_string = status_attribute_string

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this Payment.

        UTC timestamp of last update to the payment

        :return: The updated_date_utc of this Payment.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this Payment.

        UTC timestamp of last update to the payment

        :param updated_date_utc: The updated_date_utc of this Payment.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc

    @property
    def validation_errors(self):
        """Gets the validation_errors of this Payment.

        Displays array of validation error messages from the API

        :return: The validation_errors of this Payment.
        :rtype: List[ValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this Payment.

        Displays array of validation error messages from the API

        :param validation_errors: The validation_errors of this Payment.
        :type validation_errors: List[ValidationError]
        """

        self._validation_errors = validation_errors
