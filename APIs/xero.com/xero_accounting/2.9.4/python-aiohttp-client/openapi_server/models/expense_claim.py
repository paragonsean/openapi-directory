# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment import Payment
from openapi_server.models.receipt import Receipt
from openapi_server.models.user import User
from openapi_server import util


class ExpenseClaim(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_due: float=None, amount_paid: float=None, expense_claim_id: str=None, payment_due_date: str=None, payments: List[Payment]=None, receipt_id: str=None, receipts: List[Receipt]=None, reporting_date: str=None, status: str=None, total: float=None, updated_date_utc: str=None, user: User=None):
        """ExpenseClaim - a model defined in OpenAPI

        :param amount_due: The amount_due of this ExpenseClaim.
        :param amount_paid: The amount_paid of this ExpenseClaim.
        :param expense_claim_id: The expense_claim_id of this ExpenseClaim.
        :param payment_due_date: The payment_due_date of this ExpenseClaim.
        :param payments: The payments of this ExpenseClaim.
        :param receipt_id: The receipt_id of this ExpenseClaim.
        :param receipts: The receipts of this ExpenseClaim.
        :param reporting_date: The reporting_date of this ExpenseClaim.
        :param status: The status of this ExpenseClaim.
        :param total: The total of this ExpenseClaim.
        :param updated_date_utc: The updated_date_utc of this ExpenseClaim.
        :param user: The user of this ExpenseClaim.
        """
        self.openapi_types = {
            'amount_due': float,
            'amount_paid': float,
            'expense_claim_id': str,
            'payment_due_date': str,
            'payments': List[Payment],
            'receipt_id': str,
            'receipts': List[Receipt],
            'reporting_date': str,
            'status': str,
            'total': float,
            'updated_date_utc': str,
            'user': User
        }

        self.attribute_map = {
            'amount_due': 'AmountDue',
            'amount_paid': 'AmountPaid',
            'expense_claim_id': 'ExpenseClaimID',
            'payment_due_date': 'PaymentDueDate',
            'payments': 'Payments',
            'receipt_id': 'ReceiptID',
            'receipts': 'Receipts',
            'reporting_date': 'ReportingDate',
            'status': 'Status',
            'total': 'Total',
            'updated_date_utc': 'UpdatedDateUTC',
            'user': 'User'
        }

        self._amount_due = amount_due
        self._amount_paid = amount_paid
        self._expense_claim_id = expense_claim_id
        self._payment_due_date = payment_due_date
        self._payments = payments
        self._receipt_id = receipt_id
        self._receipts = receipts
        self._reporting_date = reporting_date
        self._status = status
        self._total = total
        self._updated_date_utc = updated_date_utc
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpenseClaim':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpenseClaim of this ExpenseClaim.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_due(self):
        """Gets the amount_due of this ExpenseClaim.

        The amount due to be paid for an expense claim

        :return: The amount_due of this ExpenseClaim.
        :rtype: float
        """
        return self._amount_due

    @amount_due.setter
    def amount_due(self, amount_due):
        """Sets the amount_due of this ExpenseClaim.

        The amount due to be paid for an expense claim

        :param amount_due: The amount_due of this ExpenseClaim.
        :type amount_due: float
        """

        self._amount_due = amount_due

    @property
    def amount_paid(self):
        """Gets the amount_paid of this ExpenseClaim.

        The amount still to pay for an expense claim

        :return: The amount_paid of this ExpenseClaim.
        :rtype: float
        """
        return self._amount_paid

    @amount_paid.setter
    def amount_paid(self, amount_paid):
        """Sets the amount_paid of this ExpenseClaim.

        The amount still to pay for an expense claim

        :param amount_paid: The amount_paid of this ExpenseClaim.
        :type amount_paid: float
        """

        self._amount_paid = amount_paid

    @property
    def expense_claim_id(self):
        """Gets the expense_claim_id of this ExpenseClaim.

        Xero generated unique identifier for an expense claim

        :return: The expense_claim_id of this ExpenseClaim.
        :rtype: str
        """
        return self._expense_claim_id

    @expense_claim_id.setter
    def expense_claim_id(self, expense_claim_id):
        """Sets the expense_claim_id of this ExpenseClaim.

        Xero generated unique identifier for an expense claim

        :param expense_claim_id: The expense_claim_id of this ExpenseClaim.
        :type expense_claim_id: str
        """

        self._expense_claim_id = expense_claim_id

    @property
    def payment_due_date(self):
        """Gets the payment_due_date of this ExpenseClaim.

        The date when the expense claim is due to be paid YYYY-MM-DD

        :return: The payment_due_date of this ExpenseClaim.
        :rtype: str
        """
        return self._payment_due_date

    @payment_due_date.setter
    def payment_due_date(self, payment_due_date):
        """Sets the payment_due_date of this ExpenseClaim.

        The date when the expense claim is due to be paid YYYY-MM-DD

        :param payment_due_date: The payment_due_date of this ExpenseClaim.
        :type payment_due_date: str
        """

        self._payment_due_date = payment_due_date

    @property
    def payments(self):
        """Gets the payments of this ExpenseClaim.

        See Payments

        :return: The payments of this ExpenseClaim.
        :rtype: List[Payment]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this ExpenseClaim.

        See Payments

        :param payments: The payments of this ExpenseClaim.
        :type payments: List[Payment]
        """

        self._payments = payments

    @property
    def receipt_id(self):
        """Gets the receipt_id of this ExpenseClaim.

        The Xero identifier for the Receipt e.g. e59a2c7f-1306-4078-a0f3-73537afcbba9

        :return: The receipt_id of this ExpenseClaim.
        :rtype: str
        """
        return self._receipt_id

    @receipt_id.setter
    def receipt_id(self, receipt_id):
        """Sets the receipt_id of this ExpenseClaim.

        The Xero identifier for the Receipt e.g. e59a2c7f-1306-4078-a0f3-73537afcbba9

        :param receipt_id: The receipt_id of this ExpenseClaim.
        :type receipt_id: str
        """

        self._receipt_id = receipt_id

    @property
    def receipts(self):
        """Gets the receipts of this ExpenseClaim.


        :return: The receipts of this ExpenseClaim.
        :rtype: List[Receipt]
        """
        return self._receipts

    @receipts.setter
    def receipts(self, receipts):
        """Sets the receipts of this ExpenseClaim.


        :param receipts: The receipts of this ExpenseClaim.
        :type receipts: List[Receipt]
        """

        self._receipts = receipts

    @property
    def reporting_date(self):
        """Gets the reporting_date of this ExpenseClaim.

        The date the expense claim will be reported in Xero YYYY-MM-DD

        :return: The reporting_date of this ExpenseClaim.
        :rtype: str
        """
        return self._reporting_date

    @reporting_date.setter
    def reporting_date(self, reporting_date):
        """Sets the reporting_date of this ExpenseClaim.

        The date the expense claim will be reported in Xero YYYY-MM-DD

        :param reporting_date: The reporting_date of this ExpenseClaim.
        :type reporting_date: str
        """

        self._reporting_date = reporting_date

    @property
    def status(self):
        """Gets the status of this ExpenseClaim.

        Current status of an expense claim – see status types

        :return: The status of this ExpenseClaim.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ExpenseClaim.

        Current status of an expense claim – see status types

        :param status: The status of this ExpenseClaim.
        :type status: str
        """
        allowed_values = ["SUBMITTED", "AUTHORISED", "PAID", "VOIDED", "DELETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def total(self):
        """Gets the total of this ExpenseClaim.

        The total of an expense claim being paid

        :return: The total of this ExpenseClaim.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ExpenseClaim.

        The total of an expense claim being paid

        :param total: The total of this ExpenseClaim.
        :type total: float
        """

        self._total = total

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this ExpenseClaim.

        Last modified date UTC format

        :return: The updated_date_utc of this ExpenseClaim.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this ExpenseClaim.

        Last modified date UTC format

        :param updated_date_utc: The updated_date_utc of this ExpenseClaim.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc

    @property
    def user(self):
        """Gets the user of this ExpenseClaim.


        :return: The user of this ExpenseClaim.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ExpenseClaim.


        :param user: The user of this ExpenseClaim.
        :type user: User
        """

        self._user = user
