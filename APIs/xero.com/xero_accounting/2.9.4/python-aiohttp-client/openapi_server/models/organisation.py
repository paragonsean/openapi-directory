# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_for_organisation import AddressForOrganisation
from openapi_server.models.country_code import CountryCode
from openapi_server.models.currency_code import CurrencyCode
from openapi_server.models.external_link import ExternalLink
from openapi_server.models.payment_term import PaymentTerm
from openapi_server.models.phone import Phone
from openapi_server.models.time_zone import TimeZone
from openapi_server import util


class Organisation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key: str=None, addresses: List[AddressForOrganisation]=None, base_currency: CurrencyCode=None, _class: str=None, country_code: CountryCode=None, created_date_utc: str=None, default_purchases_tax: str=None, default_sales_tax: str=None, edition: str=None, employer_identification_number: str=None, end_of_year_lock_date: str=None, external_links: List[ExternalLink]=None, financial_year_end_day: int=None, financial_year_end_month: int=None, is_demo_company: bool=None, legal_name: str=None, line_of_business: str=None, name: str=None, organisation_entity_type: str=None, organisation_id: str=None, organisation_status: str=None, organisation_type: str=None, payment_terms: PaymentTerm=None, pays_tax: bool=None, period_lock_date: str=None, phones: List[Phone]=None, registration_number: str=None, sales_tax_basis: str=None, sales_tax_period: str=None, short_code: str=None, tax_number: str=None, timezone: TimeZone=None, version: str=None):
        """Organisation - a model defined in OpenAPI

        :param api_key: The api_key of this Organisation.
        :param addresses: The addresses of this Organisation.
        :param base_currency: The base_currency of this Organisation.
        :param _class: The _class of this Organisation.
        :param country_code: The country_code of this Organisation.
        :param created_date_utc: The created_date_utc of this Organisation.
        :param default_purchases_tax: The default_purchases_tax of this Organisation.
        :param default_sales_tax: The default_sales_tax of this Organisation.
        :param edition: The edition of this Organisation.
        :param employer_identification_number: The employer_identification_number of this Organisation.
        :param end_of_year_lock_date: The end_of_year_lock_date of this Organisation.
        :param external_links: The external_links of this Organisation.
        :param financial_year_end_day: The financial_year_end_day of this Organisation.
        :param financial_year_end_month: The financial_year_end_month of this Organisation.
        :param is_demo_company: The is_demo_company of this Organisation.
        :param legal_name: The legal_name of this Organisation.
        :param line_of_business: The line_of_business of this Organisation.
        :param name: The name of this Organisation.
        :param organisation_entity_type: The organisation_entity_type of this Organisation.
        :param organisation_id: The organisation_id of this Organisation.
        :param organisation_status: The organisation_status of this Organisation.
        :param organisation_type: The organisation_type of this Organisation.
        :param payment_terms: The payment_terms of this Organisation.
        :param pays_tax: The pays_tax of this Organisation.
        :param period_lock_date: The period_lock_date of this Organisation.
        :param phones: The phones of this Organisation.
        :param registration_number: The registration_number of this Organisation.
        :param sales_tax_basis: The sales_tax_basis of this Organisation.
        :param sales_tax_period: The sales_tax_period of this Organisation.
        :param short_code: The short_code of this Organisation.
        :param tax_number: The tax_number of this Organisation.
        :param timezone: The timezone of this Organisation.
        :param version: The version of this Organisation.
        """
        self.openapi_types = {
            'api_key': str,
            'addresses': List[AddressForOrganisation],
            'base_currency': CurrencyCode,
            '_class': str,
            'country_code': CountryCode,
            'created_date_utc': str,
            'default_purchases_tax': str,
            'default_sales_tax': str,
            'edition': str,
            'employer_identification_number': str,
            'end_of_year_lock_date': str,
            'external_links': List[ExternalLink],
            'financial_year_end_day': int,
            'financial_year_end_month': int,
            'is_demo_company': bool,
            'legal_name': str,
            'line_of_business': str,
            'name': str,
            'organisation_entity_type': str,
            'organisation_id': str,
            'organisation_status': str,
            'organisation_type': str,
            'payment_terms': PaymentTerm,
            'pays_tax': bool,
            'period_lock_date': str,
            'phones': List[Phone],
            'registration_number': str,
            'sales_tax_basis': str,
            'sales_tax_period': str,
            'short_code': str,
            'tax_number': str,
            'timezone': TimeZone,
            'version': str
        }

        self.attribute_map = {
            'api_key': 'APIKey',
            'addresses': 'Addresses',
            'base_currency': 'BaseCurrency',
            '_class': 'Class',
            'country_code': 'CountryCode',
            'created_date_utc': 'CreatedDateUTC',
            'default_purchases_tax': 'DefaultPurchasesTax',
            'default_sales_tax': 'DefaultSalesTax',
            'edition': 'Edition',
            'employer_identification_number': 'EmployerIdentificationNumber',
            'end_of_year_lock_date': 'EndOfYearLockDate',
            'external_links': 'ExternalLinks',
            'financial_year_end_day': 'FinancialYearEndDay',
            'financial_year_end_month': 'FinancialYearEndMonth',
            'is_demo_company': 'IsDemoCompany',
            'legal_name': 'LegalName',
            'line_of_business': 'LineOfBusiness',
            'name': 'Name',
            'organisation_entity_type': 'OrganisationEntityType',
            'organisation_id': 'OrganisationID',
            'organisation_status': 'OrganisationStatus',
            'organisation_type': 'OrganisationType',
            'payment_terms': 'PaymentTerms',
            'pays_tax': 'PaysTax',
            'period_lock_date': 'PeriodLockDate',
            'phones': 'Phones',
            'registration_number': 'RegistrationNumber',
            'sales_tax_basis': 'SalesTaxBasis',
            'sales_tax_period': 'SalesTaxPeriod',
            'short_code': 'ShortCode',
            'tax_number': 'TaxNumber',
            'timezone': 'Timezone',
            'version': 'Version'
        }

        self._api_key = api_key
        self._addresses = addresses
        self._base_currency = base_currency
        self.__class = _class
        self._country_code = country_code
        self._created_date_utc = created_date_utc
        self._default_purchases_tax = default_purchases_tax
        self._default_sales_tax = default_sales_tax
        self._edition = edition
        self._employer_identification_number = employer_identification_number
        self._end_of_year_lock_date = end_of_year_lock_date
        self._external_links = external_links
        self._financial_year_end_day = financial_year_end_day
        self._financial_year_end_month = financial_year_end_month
        self._is_demo_company = is_demo_company
        self._legal_name = legal_name
        self._line_of_business = line_of_business
        self._name = name
        self._organisation_entity_type = organisation_entity_type
        self._organisation_id = organisation_id
        self._organisation_status = organisation_status
        self._organisation_type = organisation_type
        self._payment_terms = payment_terms
        self._pays_tax = pays_tax
        self._period_lock_date = period_lock_date
        self._phones = phones
        self._registration_number = registration_number
        self._sales_tax_basis = sales_tax_basis
        self._sales_tax_period = sales_tax_period
        self._short_code = short_code
        self._tax_number = tax_number
        self._timezone = timezone
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Organisation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Organisation of this Organisation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key(self):
        """Gets the api_key of this Organisation.

        Display a unique key used for Xero-to-Xero transactions

        :return: The api_key of this Organisation.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this Organisation.

        Display a unique key used for Xero-to-Xero transactions

        :param api_key: The api_key of this Organisation.
        :type api_key: str
        """

        self._api_key = api_key

    @property
    def addresses(self):
        """Gets the addresses of this Organisation.

        Address details for organisation – see Addresses

        :return: The addresses of this Organisation.
        :rtype: List[AddressForOrganisation]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Organisation.

        Address details for organisation – see Addresses

        :param addresses: The addresses of this Organisation.
        :type addresses: List[AddressForOrganisation]
        """

        self._addresses = addresses

    @property
    def base_currency(self):
        """Gets the base_currency of this Organisation.


        :return: The base_currency of this Organisation.
        :rtype: CurrencyCode
        """
        return self._base_currency

    @base_currency.setter
    def base_currency(self, base_currency):
        """Sets the base_currency of this Organisation.


        :param base_currency: The base_currency of this Organisation.
        :type base_currency: CurrencyCode
        """

        self._base_currency = base_currency

    @property
    def _class(self):
        """Gets the _class of this Organisation.

        Organisation Classes describe which plan the Xero organisation is on (e.g. DEMO, TRIAL, PREMIUM)

        :return: The _class of this Organisation.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this Organisation.

        Organisation Classes describe which plan the Xero organisation is on (e.g. DEMO, TRIAL, PREMIUM)

        :param _class: The _class of this Organisation.
        :type _class: str
        """
        allowed_values = ["DEMO", "TRIAL", "STARTER", "STANDARD", "PREMIUM", "PREMIUM_20", "PREMIUM_50", "PREMIUM_100", "LEDGER", "GST_CASHBOOK", "NON_GST_CASHBOOK"]  # noqa: E501
        if _class not in allowed_values:
            raise ValueError(
                "Invalid value for `_class` ({0}), must be one of {1}"
                .format(_class, allowed_values)
            )

        self.__class = _class

    @property
    def country_code(self):
        """Gets the country_code of this Organisation.


        :return: The country_code of this Organisation.
        :rtype: CountryCode
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Organisation.


        :param country_code: The country_code of this Organisation.
        :type country_code: CountryCode
        """

        self._country_code = country_code

    @property
    def created_date_utc(self):
        """Gets the created_date_utc of this Organisation.

        Timestamp when the organisation was created in Xero

        :return: The created_date_utc of this Organisation.
        :rtype: str
        """
        return self._created_date_utc

    @created_date_utc.setter
    def created_date_utc(self, created_date_utc):
        """Sets the created_date_utc of this Organisation.

        Timestamp when the organisation was created in Xero

        :param created_date_utc: The created_date_utc of this Organisation.
        :type created_date_utc: str
        """

        self._created_date_utc = created_date_utc

    @property
    def default_purchases_tax(self):
        """Gets the default_purchases_tax of this Organisation.

        The default for LineAmountTypes on purchase transactions

        :return: The default_purchases_tax of this Organisation.
        :rtype: str
        """
        return self._default_purchases_tax

    @default_purchases_tax.setter
    def default_purchases_tax(self, default_purchases_tax):
        """Sets the default_purchases_tax of this Organisation.

        The default for LineAmountTypes on purchase transactions

        :param default_purchases_tax: The default_purchases_tax of this Organisation.
        :type default_purchases_tax: str
        """

        self._default_purchases_tax = default_purchases_tax

    @property
    def default_sales_tax(self):
        """Gets the default_sales_tax of this Organisation.

        The default for LineAmountTypes on sales transactions

        :return: The default_sales_tax of this Organisation.
        :rtype: str
        """
        return self._default_sales_tax

    @default_sales_tax.setter
    def default_sales_tax(self, default_sales_tax):
        """Sets the default_sales_tax of this Organisation.

        The default for LineAmountTypes on sales transactions

        :param default_sales_tax: The default_sales_tax of this Organisation.
        :type default_sales_tax: str
        """

        self._default_sales_tax = default_sales_tax

    @property
    def edition(self):
        """Gets the edition of this Organisation.

        BUSINESS or PARTNER. Partner edition organisations are sold exclusively through accounting partners and have restricted functionality (e.g. no access to invoicing)

        :return: The edition of this Organisation.
        :rtype: str
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this Organisation.

        BUSINESS or PARTNER. Partner edition organisations are sold exclusively through accounting partners and have restricted functionality (e.g. no access to invoicing)

        :param edition: The edition of this Organisation.
        :type edition: str
        """
        allowed_values = ["BUSINESS", "PARTNER"]  # noqa: E501
        if edition not in allowed_values:
            raise ValueError(
                "Invalid value for `edition` ({0}), must be one of {1}"
                .format(edition, allowed_values)
            )

        self._edition = edition

    @property
    def employer_identification_number(self):
        """Gets the employer_identification_number of this Organisation.

        Shown if set. US Only.

        :return: The employer_identification_number of this Organisation.
        :rtype: str
        """
        return self._employer_identification_number

    @employer_identification_number.setter
    def employer_identification_number(self, employer_identification_number):
        """Sets the employer_identification_number of this Organisation.

        Shown if set. US Only.

        :param employer_identification_number: The employer_identification_number of this Organisation.
        :type employer_identification_number: str
        """

        self._employer_identification_number = employer_identification_number

    @property
    def end_of_year_lock_date(self):
        """Gets the end_of_year_lock_date of this Organisation.

        Shown if set. See lock dates

        :return: The end_of_year_lock_date of this Organisation.
        :rtype: str
        """
        return self._end_of_year_lock_date

    @end_of_year_lock_date.setter
    def end_of_year_lock_date(self, end_of_year_lock_date):
        """Sets the end_of_year_lock_date of this Organisation.

        Shown if set. See lock dates

        :param end_of_year_lock_date: The end_of_year_lock_date of this Organisation.
        :type end_of_year_lock_date: str
        """

        self._end_of_year_lock_date = end_of_year_lock_date

    @property
    def external_links(self):
        """Gets the external_links of this Organisation.

        Organisation profile links for popular services such as Facebook,Twitter, GooglePlus and LinkedIn. You can also add link to your website here. Shown if Organisation settings  is updated in Xero. See ExternalLinks below

        :return: The external_links of this Organisation.
        :rtype: List[ExternalLink]
        """
        return self._external_links

    @external_links.setter
    def external_links(self, external_links):
        """Sets the external_links of this Organisation.

        Organisation profile links for popular services such as Facebook,Twitter, GooglePlus and LinkedIn. You can also add link to your website here. Shown if Organisation settings  is updated in Xero. See ExternalLinks below

        :param external_links: The external_links of this Organisation.
        :type external_links: List[ExternalLink]
        """

        self._external_links = external_links

    @property
    def financial_year_end_day(self):
        """Gets the financial_year_end_day of this Organisation.

        Calendar day e.g. 0-31

        :return: The financial_year_end_day of this Organisation.
        :rtype: int
        """
        return self._financial_year_end_day

    @financial_year_end_day.setter
    def financial_year_end_day(self, financial_year_end_day):
        """Sets the financial_year_end_day of this Organisation.

        Calendar day e.g. 0-31

        :param financial_year_end_day: The financial_year_end_day of this Organisation.
        :type financial_year_end_day: int
        """

        self._financial_year_end_day = financial_year_end_day

    @property
    def financial_year_end_month(self):
        """Gets the financial_year_end_month of this Organisation.

        Calendar Month e.g. 1-12

        :return: The financial_year_end_month of this Organisation.
        :rtype: int
        """
        return self._financial_year_end_month

    @financial_year_end_month.setter
    def financial_year_end_month(self, financial_year_end_month):
        """Sets the financial_year_end_month of this Organisation.

        Calendar Month e.g. 1-12

        :param financial_year_end_month: The financial_year_end_month of this Organisation.
        :type financial_year_end_month: int
        """

        self._financial_year_end_month = financial_year_end_month

    @property
    def is_demo_company(self):
        """Gets the is_demo_company of this Organisation.

        Boolean to describe if organisation is a demo company.

        :return: The is_demo_company of this Organisation.
        :rtype: bool
        """
        return self._is_demo_company

    @is_demo_company.setter
    def is_demo_company(self, is_demo_company):
        """Sets the is_demo_company of this Organisation.

        Boolean to describe if organisation is a demo company.

        :param is_demo_company: The is_demo_company of this Organisation.
        :type is_demo_company: bool
        """

        self._is_demo_company = is_demo_company

    @property
    def legal_name(self):
        """Gets the legal_name of this Organisation.

        Organisation name shown on Reports

        :return: The legal_name of this Organisation.
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this Organisation.

        Organisation name shown on Reports

        :param legal_name: The legal_name of this Organisation.
        :type legal_name: str
        """

        self._legal_name = legal_name

    @property
    def line_of_business(self):
        """Gets the line_of_business of this Organisation.

        Description of business type as defined in Organisation settings

        :return: The line_of_business of this Organisation.
        :rtype: str
        """
        return self._line_of_business

    @line_of_business.setter
    def line_of_business(self, line_of_business):
        """Sets the line_of_business of this Organisation.

        Description of business type as defined in Organisation settings

        :param line_of_business: The line_of_business of this Organisation.
        :type line_of_business: str
        """

        self._line_of_business = line_of_business

    @property
    def name(self):
        """Gets the name of this Organisation.

        Display name of organisation shown in Xero

        :return: The name of this Organisation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organisation.

        Display name of organisation shown in Xero

        :param name: The name of this Organisation.
        :type name: str
        """

        self._name = name

    @property
    def organisation_entity_type(self):
        """Gets the organisation_entity_type of this Organisation.

        Organisation Entity Type

        :return: The organisation_entity_type of this Organisation.
        :rtype: str
        """
        return self._organisation_entity_type

    @organisation_entity_type.setter
    def organisation_entity_type(self, organisation_entity_type):
        """Sets the organisation_entity_type of this Organisation.

        Organisation Entity Type

        :param organisation_entity_type: The organisation_entity_type of this Organisation.
        :type organisation_entity_type: str
        """
        allowed_values = ["ACCOUNTING_PRACTICE", "COMPANY", "CHARITY", "CLUB_OR_SOCIETY", "LOOK_THROUGH_COMPANY", "NOT_FOR_PROFIT", "PARTNERSHIP", "S_CORPORATION", "SELF_MANAGED_SUPERANNUATION_FUND", "SOLE_TRADER", "SUPERANNUATION_FUND", "TRUST"]  # noqa: E501
        if organisation_entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `organisation_entity_type` ({0}), must be one of {1}"
                .format(organisation_entity_type, allowed_values)
            )

        self._organisation_entity_type = organisation_entity_type

    @property
    def organisation_id(self):
        """Gets the organisation_id of this Organisation.

        Unique Xero identifier

        :return: The organisation_id of this Organisation.
        :rtype: str
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this Organisation.

        Unique Xero identifier

        :param organisation_id: The organisation_id of this Organisation.
        :type organisation_id: str
        """

        self._organisation_id = organisation_id

    @property
    def organisation_status(self):
        """Gets the organisation_status of this Organisation.

        Will be set to ACTIVE if you can connect to organisation via the Xero API

        :return: The organisation_status of this Organisation.
        :rtype: str
        """
        return self._organisation_status

    @organisation_status.setter
    def organisation_status(self, organisation_status):
        """Sets the organisation_status of this Organisation.

        Will be set to ACTIVE if you can connect to organisation via the Xero API

        :param organisation_status: The organisation_status of this Organisation.
        :type organisation_status: str
        """

        self._organisation_status = organisation_status

    @property
    def organisation_type(self):
        """Gets the organisation_type of this Organisation.

        Organisation Type

        :return: The organisation_type of this Organisation.
        :rtype: str
        """
        return self._organisation_type

    @organisation_type.setter
    def organisation_type(self, organisation_type):
        """Sets the organisation_type of this Organisation.

        Organisation Type

        :param organisation_type: The organisation_type of this Organisation.
        :type organisation_type: str
        """
        allowed_values = ["ACCOUNTING_PRACTICE", "COMPANY", "CHARITY", "CLUB_OR_SOCIETY", "LOOK_THROUGH_COMPANY", "NOT_FOR_PROFIT", "PARTNERSHIP", "S_CORPORATION", "SELF_MANAGED_SUPERANNUATION_FUND", "SOLE_TRADER", "SUPERANNUATION_FUND", "TRUST"]  # noqa: E501
        if organisation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `organisation_type` ({0}), must be one of {1}"
                .format(organisation_type, allowed_values)
            )

        self._organisation_type = organisation_type

    @property
    def payment_terms(self):
        """Gets the payment_terms of this Organisation.


        :return: The payment_terms of this Organisation.
        :rtype: PaymentTerm
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """Sets the payment_terms of this Organisation.


        :param payment_terms: The payment_terms of this Organisation.
        :type payment_terms: PaymentTerm
        """

        self._payment_terms = payment_terms

    @property
    def pays_tax(self):
        """Gets the pays_tax of this Organisation.

        Boolean to describe if organisation is registered with a local tax authority i.e. true, false

        :return: The pays_tax of this Organisation.
        :rtype: bool
        """
        return self._pays_tax

    @pays_tax.setter
    def pays_tax(self, pays_tax):
        """Sets the pays_tax of this Organisation.

        Boolean to describe if organisation is registered with a local tax authority i.e. true, false

        :param pays_tax: The pays_tax of this Organisation.
        :type pays_tax: bool
        """

        self._pays_tax = pays_tax

    @property
    def period_lock_date(self):
        """Gets the period_lock_date of this Organisation.

        Shown if set. See lock dates

        :return: The period_lock_date of this Organisation.
        :rtype: str
        """
        return self._period_lock_date

    @period_lock_date.setter
    def period_lock_date(self, period_lock_date):
        """Sets the period_lock_date of this Organisation.

        Shown if set. See lock dates

        :param period_lock_date: The period_lock_date of this Organisation.
        :type period_lock_date: str
        """

        self._period_lock_date = period_lock_date

    @property
    def phones(self):
        """Gets the phones of this Organisation.

        Phones details for organisation – see Phones

        :return: The phones of this Organisation.
        :rtype: List[Phone]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this Organisation.

        Phones details for organisation – see Phones

        :param phones: The phones of this Organisation.
        :type phones: List[Phone]
        """

        self._phones = phones

    @property
    def registration_number(self):
        """Gets the registration_number of this Organisation.

        Shows for New Zealand, Australian and UK organisations

        :return: The registration_number of this Organisation.
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """Sets the registration_number of this Organisation.

        Shows for New Zealand, Australian and UK organisations

        :param registration_number: The registration_number of this Organisation.
        :type registration_number: str
        """

        self._registration_number = registration_number

    @property
    def sales_tax_basis(self):
        """Gets the sales_tax_basis of this Organisation.

        The accounting basis used for tax returns. See Sales Tax Basis

        :return: The sales_tax_basis of this Organisation.
        :rtype: str
        """
        return self._sales_tax_basis

    @sales_tax_basis.setter
    def sales_tax_basis(self, sales_tax_basis):
        """Sets the sales_tax_basis of this Organisation.

        The accounting basis used for tax returns. See Sales Tax Basis

        :param sales_tax_basis: The sales_tax_basis of this Organisation.
        :type sales_tax_basis: str
        """
        allowed_values = ["PAYMENTS", "INVOICE", "NONE", "CASH", "ACCRUAL", "FLATRATECASH", "FLATRATEACCRUAL", "ACCRUALS"]  # noqa: E501
        if sales_tax_basis not in allowed_values:
            raise ValueError(
                "Invalid value for `sales_tax_basis` ({0}), must be one of {1}"
                .format(sales_tax_basis, allowed_values)
            )

        self._sales_tax_basis = sales_tax_basis

    @property
    def sales_tax_period(self):
        """Gets the sales_tax_period of this Organisation.

        The frequency with which tax returns are processed. See Sales Tax Period

        :return: The sales_tax_period of this Organisation.
        :rtype: str
        """
        return self._sales_tax_period

    @sales_tax_period.setter
    def sales_tax_period(self, sales_tax_period):
        """Sets the sales_tax_period of this Organisation.

        The frequency with which tax returns are processed. See Sales Tax Period

        :param sales_tax_period: The sales_tax_period of this Organisation.
        :type sales_tax_period: str
        """
        allowed_values = ["MONTHLY", "QUARTERLY1", "QUARTERLY2", "QUARTERLY3", "ANNUALLY", "ONEMONTHS", "TWOMONTHS", "SIXMONTHS", "1MONTHLY", "2MONTHLY", "3MONTHLY", "6MONTHLY", "QUARTERLY", "YEARLY", "NONE"]  # noqa: E501
        if sales_tax_period not in allowed_values:
            raise ValueError(
                "Invalid value for `sales_tax_period` ({0}), must be one of {1}"
                .format(sales_tax_period, allowed_values)
            )

        self._sales_tax_period = sales_tax_period

    @property
    def short_code(self):
        """Gets the short_code of this Organisation.

        A unique identifier for the organisation. Potential uses.

        :return: The short_code of this Organisation.
        :rtype: str
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code):
        """Sets the short_code of this Organisation.

        A unique identifier for the organisation. Potential uses.

        :param short_code: The short_code of this Organisation.
        :type short_code: str
        """

        self._short_code = short_code

    @property
    def tax_number(self):
        """Gets the tax_number of this Organisation.

        Shown if set. Displays in the Xero UI as Tax File Number (AU), GST Number (NZ), VAT Number (UK) and Tax ID Number (US & Global).

        :return: The tax_number of this Organisation.
        :rtype: str
        """
        return self._tax_number

    @tax_number.setter
    def tax_number(self, tax_number):
        """Sets the tax_number of this Organisation.

        Shown if set. Displays in the Xero UI as Tax File Number (AU), GST Number (NZ), VAT Number (UK) and Tax ID Number (US & Global).

        :param tax_number: The tax_number of this Organisation.
        :type tax_number: str
        """

        self._tax_number = tax_number

    @property
    def timezone(self):
        """Gets the timezone of this Organisation.


        :return: The timezone of this Organisation.
        :rtype: TimeZone
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Organisation.


        :param timezone: The timezone of this Organisation.
        :type timezone: TimeZone
        """

        self._timezone = timezone

    @property
    def version(self):
        """Gets the version of this Organisation.

        See Version Types

        :return: The version of this Organisation.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Organisation.

        See Version Types

        :param version: The version of this Organisation.
        :type version: str
        """
        allowed_values = ["AU", "NZ", "GLOBAL", "UK", "US", "AUONRAMP", "NZONRAMP", "GLOBALONRAMP", "UKONRAMP", "USONRAMP"]  # noqa: E501
        if version not in allowed_values:
            raise ValueError(
                "Invalid value for `version` ({0}), must be one of {1}"
                .format(version, allowed_values)
            )

        self._version = version
