# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.validation_error import ValidationError
from openapi_server import util


class PaymentService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pay_now_text: str=None, payment_service_id: str=None, payment_service_name: str=None, payment_service_type: str=None, payment_service_url: str=None, validation_errors: List[ValidationError]=None):
        """PaymentService - a model defined in OpenAPI

        :param pay_now_text: The pay_now_text of this PaymentService.
        :param payment_service_id: The payment_service_id of this PaymentService.
        :param payment_service_name: The payment_service_name of this PaymentService.
        :param payment_service_type: The payment_service_type of this PaymentService.
        :param payment_service_url: The payment_service_url of this PaymentService.
        :param validation_errors: The validation_errors of this PaymentService.
        """
        self.openapi_types = {
            'pay_now_text': str,
            'payment_service_id': str,
            'payment_service_name': str,
            'payment_service_type': str,
            'payment_service_url': str,
            'validation_errors': List[ValidationError]
        }

        self.attribute_map = {
            'pay_now_text': 'PayNowText',
            'payment_service_id': 'PaymentServiceID',
            'payment_service_name': 'PaymentServiceName',
            'payment_service_type': 'PaymentServiceType',
            'payment_service_url': 'PaymentServiceUrl',
            'validation_errors': 'ValidationErrors'
        }

        self._pay_now_text = pay_now_text
        self._payment_service_id = payment_service_id
        self._payment_service_name = payment_service_name
        self._payment_service_type = payment_service_type
        self._payment_service_url = payment_service_url
        self._validation_errors = validation_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentService of this PaymentService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pay_now_text(self):
        """Gets the pay_now_text of this PaymentService.

        The text displayed on the Pay Now button in Xero Online Invoicing. If this is not set it will default to Pay by credit card

        :return: The pay_now_text of this PaymentService.
        :rtype: str
        """
        return self._pay_now_text

    @pay_now_text.setter
    def pay_now_text(self, pay_now_text):
        """Sets the pay_now_text of this PaymentService.

        The text displayed on the Pay Now button in Xero Online Invoicing. If this is not set it will default to Pay by credit card

        :param pay_now_text: The pay_now_text of this PaymentService.
        :type pay_now_text: str
        """

        self._pay_now_text = pay_now_text

    @property
    def payment_service_id(self):
        """Gets the payment_service_id of this PaymentService.

        Xero identifier

        :return: The payment_service_id of this PaymentService.
        :rtype: str
        """
        return self._payment_service_id

    @payment_service_id.setter
    def payment_service_id(self, payment_service_id):
        """Sets the payment_service_id of this PaymentService.

        Xero identifier

        :param payment_service_id: The payment_service_id of this PaymentService.
        :type payment_service_id: str
        """

        self._payment_service_id = payment_service_id

    @property
    def payment_service_name(self):
        """Gets the payment_service_name of this PaymentService.

        Name of payment service

        :return: The payment_service_name of this PaymentService.
        :rtype: str
        """
        return self._payment_service_name

    @payment_service_name.setter
    def payment_service_name(self, payment_service_name):
        """Sets the payment_service_name of this PaymentService.

        Name of payment service

        :param payment_service_name: The payment_service_name of this PaymentService.
        :type payment_service_name: str
        """

        self._payment_service_name = payment_service_name

    @property
    def payment_service_type(self):
        """Gets the payment_service_type of this PaymentService.

        This will always be CUSTOM for payment services created via the API.

        :return: The payment_service_type of this PaymentService.
        :rtype: str
        """
        return self._payment_service_type

    @payment_service_type.setter
    def payment_service_type(self, payment_service_type):
        """Sets the payment_service_type of this PaymentService.

        This will always be CUSTOM for payment services created via the API.

        :param payment_service_type: The payment_service_type of this PaymentService.
        :type payment_service_type: str
        """

        self._payment_service_type = payment_service_type

    @property
    def payment_service_url(self):
        """Gets the payment_service_url of this PaymentService.

        The custom payment URL

        :return: The payment_service_url of this PaymentService.
        :rtype: str
        """
        return self._payment_service_url

    @payment_service_url.setter
    def payment_service_url(self, payment_service_url):
        """Sets the payment_service_url of this PaymentService.

        The custom payment URL

        :param payment_service_url: The payment_service_url of this PaymentService.
        :type payment_service_url: str
        """

        self._payment_service_url = payment_service_url

    @property
    def validation_errors(self):
        """Gets the validation_errors of this PaymentService.

        Displays array of validation error messages from the API

        :return: The validation_errors of this PaymentService.
        :rtype: List[ValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this PaymentService.

        Displays array of validation error messages from the API

        :param validation_errors: The validation_errors of this PaymentService.
        :type validation_errors: List[ValidationError]
        """

        self._validation_errors = validation_errors
