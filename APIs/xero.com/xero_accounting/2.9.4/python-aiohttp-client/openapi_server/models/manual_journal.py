# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment import Attachment
from openapi_server.models.line_amount_types import LineAmountTypes
from openapi_server.models.manual_journal_line import ManualJournalLine
from openapi_server.models.validation_error import ValidationError
from openapi_server import util


class ManualJournal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[Attachment]=None, _date: str=None, has_attachments: bool=False, journal_lines: List[ManualJournalLine]=None, line_amount_types: LineAmountTypes=None, manual_journal_id: str=None, narration: str=None, show_on_cash_basis_reports: bool=None, status: str=None, status_attribute_string: str=None, updated_date_utc: str=None, url: str=None, validation_errors: List[ValidationError]=None, warnings: List[ValidationError]=None):
        """ManualJournal - a model defined in OpenAPI

        :param attachments: The attachments of this ManualJournal.
        :param _date: The _date of this ManualJournal.
        :param has_attachments: The has_attachments of this ManualJournal.
        :param journal_lines: The journal_lines of this ManualJournal.
        :param line_amount_types: The line_amount_types of this ManualJournal.
        :param manual_journal_id: The manual_journal_id of this ManualJournal.
        :param narration: The narration of this ManualJournal.
        :param show_on_cash_basis_reports: The show_on_cash_basis_reports of this ManualJournal.
        :param status: The status of this ManualJournal.
        :param status_attribute_string: The status_attribute_string of this ManualJournal.
        :param updated_date_utc: The updated_date_utc of this ManualJournal.
        :param url: The url of this ManualJournal.
        :param validation_errors: The validation_errors of this ManualJournal.
        :param warnings: The warnings of this ManualJournal.
        """
        self.openapi_types = {
            'attachments': List[Attachment],
            '_date': str,
            'has_attachments': bool,
            'journal_lines': List[ManualJournalLine],
            'line_amount_types': LineAmountTypes,
            'manual_journal_id': str,
            'narration': str,
            'show_on_cash_basis_reports': bool,
            'status': str,
            'status_attribute_string': str,
            'updated_date_utc': str,
            'url': str,
            'validation_errors': List[ValidationError],
            'warnings': List[ValidationError]
        }

        self.attribute_map = {
            'attachments': 'Attachments',
            '_date': 'Date',
            'has_attachments': 'HasAttachments',
            'journal_lines': 'JournalLines',
            'line_amount_types': 'LineAmountTypes',
            'manual_journal_id': 'ManualJournalID',
            'narration': 'Narration',
            'show_on_cash_basis_reports': 'ShowOnCashBasisReports',
            'status': 'Status',
            'status_attribute_string': 'StatusAttributeString',
            'updated_date_utc': 'UpdatedDateUTC',
            'url': 'Url',
            'validation_errors': 'ValidationErrors',
            'warnings': 'Warnings'
        }

        self._attachments = attachments
        self.__date = _date
        self._has_attachments = has_attachments
        self._journal_lines = journal_lines
        self._line_amount_types = line_amount_types
        self._manual_journal_id = manual_journal_id
        self._narration = narration
        self._show_on_cash_basis_reports = show_on_cash_basis_reports
        self._status = status
        self._status_attribute_string = status_attribute_string
        self._updated_date_utc = updated_date_utc
        self._url = url
        self._validation_errors = validation_errors
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManualJournal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManualJournal of this ManualJournal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this ManualJournal.

        Displays array of attachments from the API

        :return: The attachments of this ManualJournal.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this ManualJournal.

        Displays array of attachments from the API

        :param attachments: The attachments of this ManualJournal.
        :type attachments: List[Attachment]
        """

        self._attachments = attachments

    @property
    def _date(self):
        """Gets the _date of this ManualJournal.

        Date journal was posted – YYYY-MM-DD

        :return: The _date of this ManualJournal.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ManualJournal.

        Date journal was posted – YYYY-MM-DD

        :param _date: The _date of this ManualJournal.
        :type _date: str
        """

        self.__date = _date

    @property
    def has_attachments(self):
        """Gets the has_attachments of this ManualJournal.

        Boolean to indicate if a manual journal has an attachment

        :return: The has_attachments of this ManualJournal.
        :rtype: bool
        """
        return self._has_attachments

    @has_attachments.setter
    def has_attachments(self, has_attachments):
        """Sets the has_attachments of this ManualJournal.

        Boolean to indicate if a manual journal has an attachment

        :param has_attachments: The has_attachments of this ManualJournal.
        :type has_attachments: bool
        """

        self._has_attachments = has_attachments

    @property
    def journal_lines(self):
        """Gets the journal_lines of this ManualJournal.

        See JournalLines

        :return: The journal_lines of this ManualJournal.
        :rtype: List[ManualJournalLine]
        """
        return self._journal_lines

    @journal_lines.setter
    def journal_lines(self, journal_lines):
        """Sets the journal_lines of this ManualJournal.

        See JournalLines

        :param journal_lines: The journal_lines of this ManualJournal.
        :type journal_lines: List[ManualJournalLine]
        """

        self._journal_lines = journal_lines

    @property
    def line_amount_types(self):
        """Gets the line_amount_types of this ManualJournal.


        :return: The line_amount_types of this ManualJournal.
        :rtype: LineAmountTypes
        """
        return self._line_amount_types

    @line_amount_types.setter
    def line_amount_types(self, line_amount_types):
        """Sets the line_amount_types of this ManualJournal.


        :param line_amount_types: The line_amount_types of this ManualJournal.
        :type line_amount_types: LineAmountTypes
        """

        self._line_amount_types = line_amount_types

    @property
    def manual_journal_id(self):
        """Gets the manual_journal_id of this ManualJournal.

        The Xero identifier for a Manual Journal

        :return: The manual_journal_id of this ManualJournal.
        :rtype: str
        """
        return self._manual_journal_id

    @manual_journal_id.setter
    def manual_journal_id(self, manual_journal_id):
        """Sets the manual_journal_id of this ManualJournal.

        The Xero identifier for a Manual Journal

        :param manual_journal_id: The manual_journal_id of this ManualJournal.
        :type manual_journal_id: str
        """

        self._manual_journal_id = manual_journal_id

    @property
    def narration(self):
        """Gets the narration of this ManualJournal.

        Description of journal being posted

        :return: The narration of this ManualJournal.
        :rtype: str
        """
        return self._narration

    @narration.setter
    def narration(self, narration):
        """Sets the narration of this ManualJournal.

        Description of journal being posted

        :param narration: The narration of this ManualJournal.
        :type narration: str
        """
        if narration is None:
            raise ValueError("Invalid value for `narration`, must not be `None`")

        self._narration = narration

    @property
    def show_on_cash_basis_reports(self):
        """Gets the show_on_cash_basis_reports of this ManualJournal.

        Boolean – default is true if not specified

        :return: The show_on_cash_basis_reports of this ManualJournal.
        :rtype: bool
        """
        return self._show_on_cash_basis_reports

    @show_on_cash_basis_reports.setter
    def show_on_cash_basis_reports(self, show_on_cash_basis_reports):
        """Sets the show_on_cash_basis_reports of this ManualJournal.

        Boolean – default is true if not specified

        :param show_on_cash_basis_reports: The show_on_cash_basis_reports of this ManualJournal.
        :type show_on_cash_basis_reports: bool
        """

        self._show_on_cash_basis_reports = show_on_cash_basis_reports

    @property
    def status(self):
        """Gets the status of this ManualJournal.

        See Manual Journal Status Codes

        :return: The status of this ManualJournal.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ManualJournal.

        See Manual Journal Status Codes

        :param status: The status of this ManualJournal.
        :type status: str
        """
        allowed_values = ["DRAFT", "POSTED", "DELETED", "VOIDED", "ARCHIVED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_attribute_string(self):
        """Gets the status_attribute_string of this ManualJournal.

        A string to indicate if a invoice status

        :return: The status_attribute_string of this ManualJournal.
        :rtype: str
        """
        return self._status_attribute_string

    @status_attribute_string.setter
    def status_attribute_string(self, status_attribute_string):
        """Sets the status_attribute_string of this ManualJournal.

        A string to indicate if a invoice status

        :param status_attribute_string: The status_attribute_string of this ManualJournal.
        :type status_attribute_string: str
        """

        self._status_attribute_string = status_attribute_string

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this ManualJournal.

        Last modified date UTC format

        :return: The updated_date_utc of this ManualJournal.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this ManualJournal.

        Last modified date UTC format

        :param updated_date_utc: The updated_date_utc of this ManualJournal.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc

    @property
    def url(self):
        """Gets the url of this ManualJournal.

        Url link to a source document – shown as “Go to [appName]” in the Xero app

        :return: The url of this ManualJournal.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ManualJournal.

        Url link to a source document – shown as “Go to [appName]” in the Xero app

        :param url: The url of this ManualJournal.
        :type url: str
        """

        self._url = url

    @property
    def validation_errors(self):
        """Gets the validation_errors of this ManualJournal.

        Displays array of validation error messages from the API

        :return: The validation_errors of this ManualJournal.
        :rtype: List[ValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this ManualJournal.

        Displays array of validation error messages from the API

        :param validation_errors: The validation_errors of this ManualJournal.
        :type validation_errors: List[ValidationError]
        """

        self._validation_errors = validation_errors

    @property
    def warnings(self):
        """Gets the warnings of this ManualJournal.

        Displays array of warning messages from the API

        :return: The warnings of this ManualJournal.
        :rtype: List[ValidationError]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this ManualJournal.

        Displays array of warning messages from the API

        :param warnings: The warnings of this ManualJournal.
        :type warnings: List[ValidationError]
        """

        self._warnings = warnings
