# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CISOrgSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cis_contractor_enabled: bool=None, cis_sub_contractor_enabled: bool=None, rate: float=None):
        """CISOrgSetting - a model defined in OpenAPI

        :param cis_contractor_enabled: The cis_contractor_enabled of this CISOrgSetting.
        :param cis_sub_contractor_enabled: The cis_sub_contractor_enabled of this CISOrgSetting.
        :param rate: The rate of this CISOrgSetting.
        """
        self.openapi_types = {
            'cis_contractor_enabled': bool,
            'cis_sub_contractor_enabled': bool,
            'rate': float
        }

        self.attribute_map = {
            'cis_contractor_enabled': 'CISContractorEnabled',
            'cis_sub_contractor_enabled': 'CISSubContractorEnabled',
            'rate': 'Rate'
        }

        self._cis_contractor_enabled = cis_contractor_enabled
        self._cis_sub_contractor_enabled = cis_sub_contractor_enabled
        self._rate = rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CISOrgSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CISOrgSetting of this CISOrgSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cis_contractor_enabled(self):
        """Gets the cis_contractor_enabled of this CISOrgSetting.

        true or false - Boolean that describes if the organisation is a CIS Contractor

        :return: The cis_contractor_enabled of this CISOrgSetting.
        :rtype: bool
        """
        return self._cis_contractor_enabled

    @cis_contractor_enabled.setter
    def cis_contractor_enabled(self, cis_contractor_enabled):
        """Sets the cis_contractor_enabled of this CISOrgSetting.

        true or false - Boolean that describes if the organisation is a CIS Contractor

        :param cis_contractor_enabled: The cis_contractor_enabled of this CISOrgSetting.
        :type cis_contractor_enabled: bool
        """

        self._cis_contractor_enabled = cis_contractor_enabled

    @property
    def cis_sub_contractor_enabled(self):
        """Gets the cis_sub_contractor_enabled of this CISOrgSetting.

        true or false - Boolean that describes if the organisation is a CIS SubContractor

        :return: The cis_sub_contractor_enabled of this CISOrgSetting.
        :rtype: bool
        """
        return self._cis_sub_contractor_enabled

    @cis_sub_contractor_enabled.setter
    def cis_sub_contractor_enabled(self, cis_sub_contractor_enabled):
        """Sets the cis_sub_contractor_enabled of this CISOrgSetting.

        true or false - Boolean that describes if the organisation is a CIS SubContractor

        :param cis_sub_contractor_enabled: The cis_sub_contractor_enabled of this CISOrgSetting.
        :type cis_sub_contractor_enabled: bool
        """

        self._cis_sub_contractor_enabled = cis_sub_contractor_enabled

    @property
    def rate(self):
        """Gets the rate of this CISOrgSetting.

        CIS Deduction rate for the organisation

        :return: The rate of this CISOrgSetting.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this CISOrgSetting.

        CIS Deduction rate for the organisation

        :param rate: The rate of this CISOrgSetting.
        :type rate: float
        """

        self._rate = rate
