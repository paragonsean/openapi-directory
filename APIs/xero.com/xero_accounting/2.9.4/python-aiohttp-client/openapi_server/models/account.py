# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_type import AccountType
from openapi_server.models.currency_code import CurrencyCode
from openapi_server.models.validation_error import ValidationError
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, add_to_watchlist: bool=None, bank_account_number: str=None, bank_account_type: str=None, _class: str=None, code: str=None, currency_code: CurrencyCode=None, description: str=None, enable_payments_to_account: bool=None, has_attachments: bool=False, name: str=None, reporting_code: str=None, reporting_code_name: str=None, show_in_expense_claims: bool=None, status: str=None, system_account: str=None, tax_type: str=None, type: AccountType=None, updated_date_utc: str=None, validation_errors: List[ValidationError]=None):
        """Account - a model defined in OpenAPI

        :param account_id: The account_id of this Account.
        :param add_to_watchlist: The add_to_watchlist of this Account.
        :param bank_account_number: The bank_account_number of this Account.
        :param bank_account_type: The bank_account_type of this Account.
        :param _class: The _class of this Account.
        :param code: The code of this Account.
        :param currency_code: The currency_code of this Account.
        :param description: The description of this Account.
        :param enable_payments_to_account: The enable_payments_to_account of this Account.
        :param has_attachments: The has_attachments of this Account.
        :param name: The name of this Account.
        :param reporting_code: The reporting_code of this Account.
        :param reporting_code_name: The reporting_code_name of this Account.
        :param show_in_expense_claims: The show_in_expense_claims of this Account.
        :param status: The status of this Account.
        :param system_account: The system_account of this Account.
        :param tax_type: The tax_type of this Account.
        :param type: The type of this Account.
        :param updated_date_utc: The updated_date_utc of this Account.
        :param validation_errors: The validation_errors of this Account.
        """
        self.openapi_types = {
            'account_id': str,
            'add_to_watchlist': bool,
            'bank_account_number': str,
            'bank_account_type': str,
            '_class': str,
            'code': str,
            'currency_code': CurrencyCode,
            'description': str,
            'enable_payments_to_account': bool,
            'has_attachments': bool,
            'name': str,
            'reporting_code': str,
            'reporting_code_name': str,
            'show_in_expense_claims': bool,
            'status': str,
            'system_account': str,
            'tax_type': str,
            'type': AccountType,
            'updated_date_utc': str,
            'validation_errors': List[ValidationError]
        }

        self.attribute_map = {
            'account_id': 'AccountID',
            'add_to_watchlist': 'AddToWatchlist',
            'bank_account_number': 'BankAccountNumber',
            'bank_account_type': 'BankAccountType',
            '_class': 'Class',
            'code': 'Code',
            'currency_code': 'CurrencyCode',
            'description': 'Description',
            'enable_payments_to_account': 'EnablePaymentsToAccount',
            'has_attachments': 'HasAttachments',
            'name': 'Name',
            'reporting_code': 'ReportingCode',
            'reporting_code_name': 'ReportingCodeName',
            'show_in_expense_claims': 'ShowInExpenseClaims',
            'status': 'Status',
            'system_account': 'SystemAccount',
            'tax_type': 'TaxType',
            'type': 'Type',
            'updated_date_utc': 'UpdatedDateUTC',
            'validation_errors': 'ValidationErrors'
        }

        self._account_id = account_id
        self._add_to_watchlist = add_to_watchlist
        self._bank_account_number = bank_account_number
        self._bank_account_type = bank_account_type
        self.__class = _class
        self._code = code
        self._currency_code = currency_code
        self._description = description
        self._enable_payments_to_account = enable_payments_to_account
        self._has_attachments = has_attachments
        self._name = name
        self._reporting_code = reporting_code
        self._reporting_code_name = reporting_code_name
        self._show_in_expense_claims = show_in_expense_claims
        self._status = status
        self._system_account = system_account
        self._tax_type = tax_type
        self._type = type
        self._updated_date_utc = updated_date_utc
        self._validation_errors = validation_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Account.

        The Xero identifier for an account – specified as a string following  the endpoint name   e.g. /297c2dc5-cc47-4afd-8ec8-74990b8761e9

        :return: The account_id of this Account.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Account.

        The Xero identifier for an account – specified as a string following  the endpoint name   e.g. /297c2dc5-cc47-4afd-8ec8-74990b8761e9

        :param account_id: The account_id of this Account.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def add_to_watchlist(self):
        """Gets the add_to_watchlist of this Account.

        Boolean – describes whether the account is shown in the watchlist widget on the dashboard

        :return: The add_to_watchlist of this Account.
        :rtype: bool
        """
        return self._add_to_watchlist

    @add_to_watchlist.setter
    def add_to_watchlist(self, add_to_watchlist):
        """Sets the add_to_watchlist of this Account.

        Boolean – describes whether the account is shown in the watchlist widget on the dashboard

        :param add_to_watchlist: The add_to_watchlist of this Account.
        :type add_to_watchlist: bool
        """

        self._add_to_watchlist = add_to_watchlist

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this Account.

        For bank accounts only (Account Type BANK)

        :return: The bank_account_number of this Account.
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this Account.

        For bank accounts only (Account Type BANK)

        :param bank_account_number: The bank_account_number of this Account.
        :type bank_account_number: str
        """

        self._bank_account_number = bank_account_number

    @property
    def bank_account_type(self):
        """Gets the bank_account_type of this Account.

        For bank accounts only. See Bank Account types

        :return: The bank_account_type of this Account.
        :rtype: str
        """
        return self._bank_account_type

    @bank_account_type.setter
    def bank_account_type(self, bank_account_type):
        """Sets the bank_account_type of this Account.

        For bank accounts only. See Bank Account types

        :param bank_account_type: The bank_account_type of this Account.
        :type bank_account_type: str
        """
        allowed_values = ["BANK", "CREDITCARD", "PAYPAL", "NONE", ""]  # noqa: E501
        if bank_account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `bank_account_type` ({0}), must be one of {1}"
                .format(bank_account_type, allowed_values)
            )

        self._bank_account_type = bank_account_type

    @property
    def _class(self):
        """Gets the _class of this Account.

        See Account Class Types

        :return: The _class of this Account.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this Account.

        See Account Class Types

        :param _class: The _class of this Account.
        :type _class: str
        """
        allowed_values = ["ASSET", "EQUITY", "EXPENSE", "LIABILITY", "REVENUE"]  # noqa: E501
        if _class not in allowed_values:
            raise ValueError(
                "Invalid value for `_class` ({0}), must be one of {1}"
                .format(_class, allowed_values)
            )

        self.__class = _class

    @property
    def code(self):
        """Gets the code of this Account.

        Customer defined alpha numeric account code e.g 200 or SALES (max length = 10)

        :return: The code of this Account.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Account.

        Customer defined alpha numeric account code e.g 200 or SALES (max length = 10)

        :param code: The code of this Account.
        :type code: str
        """

        self._code = code

    @property
    def currency_code(self):
        """Gets the currency_code of this Account.


        :return: The currency_code of this Account.
        :rtype: CurrencyCode
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Account.


        :param currency_code: The currency_code of this Account.
        :type currency_code: CurrencyCode
        """

        self._currency_code = currency_code

    @property
    def description(self):
        """Gets the description of this Account.

        Description of the Account. Valid for all types of accounts except bank accounts (max length = 4000)

        :return: The description of this Account.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Account.

        Description of the Account. Valid for all types of accounts except bank accounts (max length = 4000)

        :param description: The description of this Account.
        :type description: str
        """

        self._description = description

    @property
    def enable_payments_to_account(self):
        """Gets the enable_payments_to_account of this Account.

        Boolean – describes whether account can have payments applied to it

        :return: The enable_payments_to_account of this Account.
        :rtype: bool
        """
        return self._enable_payments_to_account

    @enable_payments_to_account.setter
    def enable_payments_to_account(self, enable_payments_to_account):
        """Sets the enable_payments_to_account of this Account.

        Boolean – describes whether account can have payments applied to it

        :param enable_payments_to_account: The enable_payments_to_account of this Account.
        :type enable_payments_to_account: bool
        """

        self._enable_payments_to_account = enable_payments_to_account

    @property
    def has_attachments(self):
        """Gets the has_attachments of this Account.

        boolean to indicate if an account has an attachment (read only)

        :return: The has_attachments of this Account.
        :rtype: bool
        """
        return self._has_attachments

    @has_attachments.setter
    def has_attachments(self, has_attachments):
        """Sets the has_attachments of this Account.

        boolean to indicate if an account has an attachment (read only)

        :param has_attachments: The has_attachments of this Account.
        :type has_attachments: bool
        """

        self._has_attachments = has_attachments

    @property
    def name(self):
        """Gets the name of this Account.

        Name of account (max length = 150)

        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.

        Name of account (max length = 150)

        :param name: The name of this Account.
        :type name: str
        """
        if name is not None and len(name) > 150:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `150`")

        self._name = name

    @property
    def reporting_code(self):
        """Gets the reporting_code of this Account.

        Shown if set

        :return: The reporting_code of this Account.
        :rtype: str
        """
        return self._reporting_code

    @reporting_code.setter
    def reporting_code(self, reporting_code):
        """Sets the reporting_code of this Account.

        Shown if set

        :param reporting_code: The reporting_code of this Account.
        :type reporting_code: str
        """

        self._reporting_code = reporting_code

    @property
    def reporting_code_name(self):
        """Gets the reporting_code_name of this Account.

        Shown if set

        :return: The reporting_code_name of this Account.
        :rtype: str
        """
        return self._reporting_code_name

    @reporting_code_name.setter
    def reporting_code_name(self, reporting_code_name):
        """Sets the reporting_code_name of this Account.

        Shown if set

        :param reporting_code_name: The reporting_code_name of this Account.
        :type reporting_code_name: str
        """

        self._reporting_code_name = reporting_code_name

    @property
    def show_in_expense_claims(self):
        """Gets the show_in_expense_claims of this Account.

        Boolean – describes whether account code is available for use with expense claims

        :return: The show_in_expense_claims of this Account.
        :rtype: bool
        """
        return self._show_in_expense_claims

    @show_in_expense_claims.setter
    def show_in_expense_claims(self, show_in_expense_claims):
        """Sets the show_in_expense_claims of this Account.

        Boolean – describes whether account code is available for use with expense claims

        :param show_in_expense_claims: The show_in_expense_claims of this Account.
        :type show_in_expense_claims: bool
        """

        self._show_in_expense_claims = show_in_expense_claims

    @property
    def status(self):
        """Gets the status of this Account.

        Accounts with a status of ACTIVE can be updated to ARCHIVED. See Account Status Codes

        :return: The status of this Account.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Account.

        Accounts with a status of ACTIVE can be updated to ARCHIVED. See Account Status Codes

        :param status: The status of this Account.
        :type status: str
        """
        allowed_values = ["ACTIVE", "ARCHIVED", "DELETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def system_account(self):
        """Gets the system_account of this Account.

        If this is a system account then this element is returned. See System Account types. Note that non-system accounts may have this element set as either “” or null.

        :return: The system_account of this Account.
        :rtype: str
        """
        return self._system_account

    @system_account.setter
    def system_account(self, system_account):
        """Sets the system_account of this Account.

        If this is a system account then this element is returned. See System Account types. Note that non-system accounts may have this element set as either “” or null.

        :param system_account: The system_account of this Account.
        :type system_account: str
        """
        allowed_values = ["DEBTORS", "CREDITORS", "BANKCURRENCYGAIN", "GST", "GSTONIMPORTS", "HISTORICAL", "REALISEDCURRENCYGAIN", "RETAINEDEARNINGS", "ROUNDING", "TRACKINGTRANSFERS", "UNPAIDEXPCLM", "UNREALISEDCURRENCYGAIN", "WAGEPAYABLES", "CISASSETS", "CISASSET", "CISLABOUR", "CISLABOUREXPENSE", "CISLABOURINCOME", "CISLIABILITY", "CISMATERIALS", ""]  # noqa: E501
        if system_account not in allowed_values:
            raise ValueError(
                "Invalid value for `system_account` ({0}), must be one of {1}"
                .format(system_account, allowed_values)
            )

        self._system_account = system_account

    @property
    def tax_type(self):
        """Gets the tax_type of this Account.

        The tax type from TaxRates

        :return: The tax_type of this Account.
        :rtype: str
        """
        return self._tax_type

    @tax_type.setter
    def tax_type(self, tax_type):
        """Sets the tax_type of this Account.

        The tax type from TaxRates

        :param tax_type: The tax_type of this Account.
        :type tax_type: str
        """

        self._tax_type = tax_type

    @property
    def type(self):
        """Gets the type of this Account.


        :return: The type of this Account.
        :rtype: AccountType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Account.


        :param type: The type of this Account.
        :type type: AccountType
        """

        self._type = type

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this Account.

        Last modified date UTC format

        :return: The updated_date_utc of this Account.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this Account.

        Last modified date UTC format

        :param updated_date_utc: The updated_date_utc of this Account.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc

    @property
    def validation_errors(self):
        """Gets the validation_errors of this Account.

        Displays array of validation error messages from the API

        :return: The validation_errors of this Account.
        :rtype: List[ValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this Account.

        Displays array of validation error messages from the API

        :param validation_errors: The validation_errors of this Account.
        :type validation_errors: List[ValidationError]
        """

        self._validation_errors = validation_errors
