# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact import Contact
from openapi_server import util


class ContactGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_group_id: str=None, contacts: List[Contact]=None, name: str=None, status: str=None):
        """ContactGroup - a model defined in OpenAPI

        :param contact_group_id: The contact_group_id of this ContactGroup.
        :param contacts: The contacts of this ContactGroup.
        :param name: The name of this ContactGroup.
        :param status: The status of this ContactGroup.
        """
        self.openapi_types = {
            'contact_group_id': str,
            'contacts': List[Contact],
            'name': str,
            'status': str
        }

        self.attribute_map = {
            'contact_group_id': 'ContactGroupID',
            'contacts': 'Contacts',
            'name': 'Name',
            'status': 'Status'
        }

        self._contact_group_id = contact_group_id
        self._contacts = contacts
        self._name = name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactGroup of this ContactGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_group_id(self):
        """Gets the contact_group_id of this ContactGroup.

        The Xero identifier for an contact group – specified as a string following the endpoint name. e.g. /297c2dc5-cc47-4afd-8ec8-74990b8761e9

        :return: The contact_group_id of this ContactGroup.
        :rtype: str
        """
        return self._contact_group_id

    @contact_group_id.setter
    def contact_group_id(self, contact_group_id):
        """Sets the contact_group_id of this ContactGroup.

        The Xero identifier for an contact group – specified as a string following the endpoint name. e.g. /297c2dc5-cc47-4afd-8ec8-74990b8761e9

        :param contact_group_id: The contact_group_id of this ContactGroup.
        :type contact_group_id: str
        """

        self._contact_group_id = contact_group_id

    @property
    def contacts(self):
        """Gets the contacts of this ContactGroup.

        The ContactID and Name of Contacts in a contact group. Returned on GETs when the ContactGroupID is supplied in the URL.

        :return: The contacts of this ContactGroup.
        :rtype: List[Contact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this ContactGroup.

        The ContactID and Name of Contacts in a contact group. Returned on GETs when the ContactGroupID is supplied in the URL.

        :param contacts: The contacts of this ContactGroup.
        :type contacts: List[Contact]
        """

        self._contacts = contacts

    @property
    def name(self):
        """Gets the name of this ContactGroup.

        The Name of the contact group. Required when creating a new contact  group

        :return: The name of this ContactGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContactGroup.

        The Name of the contact group. Required when creating a new contact  group

        :param name: The name of this ContactGroup.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this ContactGroup.

        The Status of a contact group. To delete a contact group update the status to DELETED. Only contact groups with a status of ACTIVE are returned on GETs.

        :return: The status of this ContactGroup.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContactGroup.

        The Status of a contact group. To delete a contact group update the status to DELETED. Only contact groups with a status of ACTIVE are returned on GETs.

        :param status: The status of this ContactGroup.
        :type status: str
        """
        allowed_values = ["ACTIVE", "DELETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
