# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ten_ninety_nine_contact import TenNinetyNineContact
from openapi_server import util


class Report(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contacts: List[TenNinetyNineContact]=None, report_date: str=None, report_id: str=None, report_name: str=None, report_title: str=None, report_type: str=None, updated_date_utc: str=None):
        """Report - a model defined in OpenAPI

        :param contacts: The contacts of this Report.
        :param report_date: The report_date of this Report.
        :param report_id: The report_id of this Report.
        :param report_name: The report_name of this Report.
        :param report_title: The report_title of this Report.
        :param report_type: The report_type of this Report.
        :param updated_date_utc: The updated_date_utc of this Report.
        """
        self.openapi_types = {
            'contacts': List[TenNinetyNineContact],
            'report_date': str,
            'report_id': str,
            'report_name': str,
            'report_title': str,
            'report_type': str,
            'updated_date_utc': str
        }

        self.attribute_map = {
            'contacts': 'Contacts',
            'report_date': 'ReportDate',
            'report_id': 'ReportID',
            'report_name': 'ReportName',
            'report_title': 'ReportTitle',
            'report_type': 'ReportType',
            'updated_date_utc': 'UpdatedDateUTC'
        }

        self._contacts = contacts
        self._report_date = report_date
        self._report_id = report_id
        self._report_name = report_name
        self._report_title = report_title
        self._report_type = report_type
        self._updated_date_utc = updated_date_utc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Report':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report of this Report.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contacts(self):
        """Gets the contacts of this Report.


        :return: The contacts of this Report.
        :rtype: List[TenNinetyNineContact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Report.


        :param contacts: The contacts of this Report.
        :type contacts: List[TenNinetyNineContact]
        """

        self._contacts = contacts

    @property
    def report_date(self):
        """Gets the report_date of this Report.

        Date of report

        :return: The report_date of this Report.
        :rtype: str
        """
        return self._report_date

    @report_date.setter
    def report_date(self, report_date):
        """Sets the report_date of this Report.

        Date of report

        :param report_date: The report_date of this Report.
        :type report_date: str
        """

        self._report_date = report_date

    @property
    def report_id(self):
        """Gets the report_id of this Report.

        See Prepayment Types

        :return: The report_id of this Report.
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this Report.

        See Prepayment Types

        :param report_id: The report_id of this Report.
        :type report_id: str
        """

        self._report_id = report_id

    @property
    def report_name(self):
        """Gets the report_name of this Report.

        See Prepayment Types

        :return: The report_name of this Report.
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """Sets the report_name of this Report.

        See Prepayment Types

        :param report_name: The report_name of this Report.
        :type report_name: str
        """

        self._report_name = report_name

    @property
    def report_title(self):
        """Gets the report_title of this Report.

        See Prepayment Types

        :return: The report_title of this Report.
        :rtype: str
        """
        return self._report_title

    @report_title.setter
    def report_title(self, report_title):
        """Sets the report_title of this Report.

        See Prepayment Types

        :param report_title: The report_title of this Report.
        :type report_title: str
        """

        self._report_title = report_title

    @property
    def report_type(self):
        """Gets the report_type of this Report.

        See Prepayment Types

        :return: The report_type of this Report.
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this Report.

        See Prepayment Types

        :param report_type: The report_type of this Report.
        :type report_type: str
        """
        allowed_values = ["AgedPayablesByContact"]  # noqa: E501
        if report_type not in allowed_values:
            raise ValueError(
                "Invalid value for `report_type` ({0}), must be one of {1}"
                .format(report_type, allowed_values)
            )

        self._report_type = report_type

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this Report.

        Updated Date

        :return: The updated_date_utc of this Report.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this Report.

        Updated Date

        :param updated_date_utc: The updated_date_utc of this Report.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc
