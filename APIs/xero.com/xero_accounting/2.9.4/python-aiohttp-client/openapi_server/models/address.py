# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_line1: str=None, address_line2: str=None, address_line3: str=None, address_line4: str=None, address_type: str=None, attention_to: str=None, city: str=None, country: str=None, postal_code: str=None, region: str=None):
        """Address - a model defined in OpenAPI

        :param address_line1: The address_line1 of this Address.
        :param address_line2: The address_line2 of this Address.
        :param address_line3: The address_line3 of this Address.
        :param address_line4: The address_line4 of this Address.
        :param address_type: The address_type of this Address.
        :param attention_to: The attention_to of this Address.
        :param city: The city of this Address.
        :param country: The country of this Address.
        :param postal_code: The postal_code of this Address.
        :param region: The region of this Address.
        """
        self.openapi_types = {
            'address_line1': str,
            'address_line2': str,
            'address_line3': str,
            'address_line4': str,
            'address_type': str,
            'attention_to': str,
            'city': str,
            'country': str,
            'postal_code': str,
            'region': str
        }

        self.attribute_map = {
            'address_line1': 'AddressLine1',
            'address_line2': 'AddressLine2',
            'address_line3': 'AddressLine3',
            'address_line4': 'AddressLine4',
            'address_type': 'AddressType',
            'attention_to': 'AttentionTo',
            'city': 'City',
            'country': 'Country',
            'postal_code': 'PostalCode',
            'region': 'Region'
        }

        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._address_line3 = address_line3
        self._address_line4 = address_line4
        self._address_type = address_type
        self._attention_to = attention_to
        self._city = city
        self._country = country
        self._postal_code = postal_code
        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_line1(self):
        """Gets the address_line1 of this Address.

        max length = 500

        :return: The address_line1 of this Address.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this Address.

        max length = 500

        :param address_line1: The address_line1 of this Address.
        :type address_line1: str
        """
        if address_line1 is not None and len(address_line1) > 500:
            raise ValueError("Invalid value for `address_line1`, length must be less than or equal to `500`")

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this Address.

        max length = 500

        :return: The address_line2 of this Address.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this Address.

        max length = 500

        :param address_line2: The address_line2 of this Address.
        :type address_line2: str
        """
        if address_line2 is not None and len(address_line2) > 500:
            raise ValueError("Invalid value for `address_line2`, length must be less than or equal to `500`")

        self._address_line2 = address_line2

    @property
    def address_line3(self):
        """Gets the address_line3 of this Address.

        max length = 500

        :return: The address_line3 of this Address.
        :rtype: str
        """
        return self._address_line3

    @address_line3.setter
    def address_line3(self, address_line3):
        """Sets the address_line3 of this Address.

        max length = 500

        :param address_line3: The address_line3 of this Address.
        :type address_line3: str
        """
        if address_line3 is not None and len(address_line3) > 500:
            raise ValueError("Invalid value for `address_line3`, length must be less than or equal to `500`")

        self._address_line3 = address_line3

    @property
    def address_line4(self):
        """Gets the address_line4 of this Address.

        max length = 500

        :return: The address_line4 of this Address.
        :rtype: str
        """
        return self._address_line4

    @address_line4.setter
    def address_line4(self, address_line4):
        """Sets the address_line4 of this Address.

        max length = 500

        :param address_line4: The address_line4 of this Address.
        :type address_line4: str
        """
        if address_line4 is not None and len(address_line4) > 500:
            raise ValueError("Invalid value for `address_line4`, length must be less than or equal to `500`")

        self._address_line4 = address_line4

    @property
    def address_type(self):
        """Gets the address_type of this Address.

        define the type of address

        :return: The address_type of this Address.
        :rtype: str
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this Address.

        define the type of address

        :param address_type: The address_type of this Address.
        :type address_type: str
        """
        allowed_values = ["POBOX", "STREET"]  # noqa: E501
        if address_type not in allowed_values:
            raise ValueError(
                "Invalid value for `address_type` ({0}), must be one of {1}"
                .format(address_type, allowed_values)
            )

        self._address_type = address_type

    @property
    def attention_to(self):
        """Gets the attention_to of this Address.

        max length = 255

        :return: The attention_to of this Address.
        :rtype: str
        """
        return self._attention_to

    @attention_to.setter
    def attention_to(self, attention_to):
        """Sets the attention_to of this Address.

        max length = 255

        :param attention_to: The attention_to of this Address.
        :type attention_to: str
        """
        if attention_to is not None and len(attention_to) > 255:
            raise ValueError("Invalid value for `attention_to`, length must be less than or equal to `255`")

        self._attention_to = attention_to

    @property
    def city(self):
        """Gets the city of this Address.

        max length = 255

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        max length = 255

        :param city: The city of this Address.
        :type city: str
        """
        if city is not None and len(city) > 255:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `255`")

        self._city = city

    @property
    def country(self):
        """Gets the country of this Address.

        max length = 50, [A-Z], [a-z] only

        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.

        max length = 50, [A-Z], [a-z] only

        :param country: The country of this Address.
        :type country: str
        """
        if country is not None and len(country) > 50:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `50`")

        self._country = country

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.

        max length = 50

        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        max length = 50

        :param postal_code: The postal_code of this Address.
        :type postal_code: str
        """
        if postal_code is not None and len(postal_code) > 50:
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `50`")

        self._postal_code = postal_code

    @property
    def region(self):
        """Gets the region of this Address.

        max length = 255

        :return: The region of this Address.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Address.

        max length = 255

        :param region: The region of this Address.
        :type region: str
        """
        if region is not None and len(region) > 255:
            raise ValueError("Invalid value for `region`, length must be less than or equal to `255`")

        self._region = region
