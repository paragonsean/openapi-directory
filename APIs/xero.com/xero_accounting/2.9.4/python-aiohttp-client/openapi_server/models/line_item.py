# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.line_item_tracking import LineItemTracking
from openapi_server import util


class LineItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, description: str=None, discount_amount: float=None, discount_rate: float=None, item_code: str=None, line_amount: float=None, line_item_id: str=None, quantity: float=None, repeating_invoice_id: str=None, tax_amount: float=None, tax_type: str=None, tracking: List[LineItemTracking]=None, unit_amount: float=None):
        """LineItem - a model defined in OpenAPI

        :param account_code: The account_code of this LineItem.
        :param description: The description of this LineItem.
        :param discount_amount: The discount_amount of this LineItem.
        :param discount_rate: The discount_rate of this LineItem.
        :param item_code: The item_code of this LineItem.
        :param line_amount: The line_amount of this LineItem.
        :param line_item_id: The line_item_id of this LineItem.
        :param quantity: The quantity of this LineItem.
        :param repeating_invoice_id: The repeating_invoice_id of this LineItem.
        :param tax_amount: The tax_amount of this LineItem.
        :param tax_type: The tax_type of this LineItem.
        :param tracking: The tracking of this LineItem.
        :param unit_amount: The unit_amount of this LineItem.
        """
        self.openapi_types = {
            'account_code': str,
            'description': str,
            'discount_amount': float,
            'discount_rate': float,
            'item_code': str,
            'line_amount': float,
            'line_item_id': str,
            'quantity': float,
            'repeating_invoice_id': str,
            'tax_amount': float,
            'tax_type': str,
            'tracking': List[LineItemTracking],
            'unit_amount': float
        }

        self.attribute_map = {
            'account_code': 'AccountCode',
            'description': 'Description',
            'discount_amount': 'DiscountAmount',
            'discount_rate': 'DiscountRate',
            'item_code': 'ItemCode',
            'line_amount': 'LineAmount',
            'line_item_id': 'LineItemID',
            'quantity': 'Quantity',
            'repeating_invoice_id': 'RepeatingInvoiceID',
            'tax_amount': 'TaxAmount',
            'tax_type': 'TaxType',
            'tracking': 'Tracking',
            'unit_amount': 'UnitAmount'
        }

        self._account_code = account_code
        self._description = description
        self._discount_amount = discount_amount
        self._discount_rate = discount_rate
        self._item_code = item_code
        self._line_amount = line_amount
        self._line_item_id = line_item_id
        self._quantity = quantity
        self._repeating_invoice_id = repeating_invoice_id
        self._tax_amount = tax_amount
        self._tax_type = tax_type
        self._tracking = tracking
        self._unit_amount = unit_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LineItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LineItem of this LineItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this LineItem.

        See Accounts

        :return: The account_code of this LineItem.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this LineItem.

        See Accounts

        :param account_code: The account_code of this LineItem.
        :type account_code: str
        """

        self._account_code = account_code

    @property
    def description(self):
        """Gets the description of this LineItem.

        Description needs to be at least 1 char long. A line item with just a description (i.e no unit amount or quantity) can be created by specifying just a <Description> element that contains at least 1 character

        :return: The description of this LineItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LineItem.

        Description needs to be at least 1 char long. A line item with just a description (i.e no unit amount or quantity) can be created by specifying just a <Description> element that contains at least 1 character

        :param description: The description of this LineItem.
        :type description: str
        """

        self._description = description

    @property
    def discount_amount(self):
        """Gets the discount_amount of this LineItem.

        Discount amount being applied to a line item. Only supported on ACCREC invoices - ACCPAY invoices and credit notes in Xero do not support discounts.

        :return: The discount_amount of this LineItem.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this LineItem.

        Discount amount being applied to a line item. Only supported on ACCREC invoices - ACCPAY invoices and credit notes in Xero do not support discounts.

        :param discount_amount: The discount_amount of this LineItem.
        :type discount_amount: float
        """

        self._discount_amount = discount_amount

    @property
    def discount_rate(self):
        """Gets the discount_rate of this LineItem.

        Percentage discount being applied to a line item (only supported on  ACCREC invoices – ACC PAY invoices and credit notes in Xero do not support discounts

        :return: The discount_rate of this LineItem.
        :rtype: float
        """
        return self._discount_rate

    @discount_rate.setter
    def discount_rate(self, discount_rate):
        """Sets the discount_rate of this LineItem.

        Percentage discount being applied to a line item (only supported on  ACCREC invoices – ACC PAY invoices and credit notes in Xero do not support discounts

        :param discount_rate: The discount_rate of this LineItem.
        :type discount_rate: float
        """

        self._discount_rate = discount_rate

    @property
    def item_code(self):
        """Gets the item_code of this LineItem.

        See Items

        :return: The item_code of this LineItem.
        :rtype: str
        """
        return self._item_code

    @item_code.setter
    def item_code(self, item_code):
        """Sets the item_code of this LineItem.

        See Items

        :param item_code: The item_code of this LineItem.
        :type item_code: str
        """

        self._item_code = item_code

    @property
    def line_amount(self):
        """Gets the line_amount of this LineItem.

        If you wish to omit either of the <Quantity> or <UnitAmount> you can provide a LineAmount and Xero will calculate the missing amount for you. The line amount reflects the discounted price if a DiscountRate has been used . i.e LineAmount = Quantity * Unit Amount * ((100 – DiscountRate)/100)

        :return: The line_amount of this LineItem.
        :rtype: float
        """
        return self._line_amount

    @line_amount.setter
    def line_amount(self, line_amount):
        """Sets the line_amount of this LineItem.

        If you wish to omit either of the <Quantity> or <UnitAmount> you can provide a LineAmount and Xero will calculate the missing amount for you. The line amount reflects the discounted price if a DiscountRate has been used . i.e LineAmount = Quantity * Unit Amount * ((100 – DiscountRate)/100)

        :param line_amount: The line_amount of this LineItem.
        :type line_amount: float
        """

        self._line_amount = line_amount

    @property
    def line_item_id(self):
        """Gets the line_item_id of this LineItem.

        LineItem unique ID

        :return: The line_item_id of this LineItem.
        :rtype: str
        """
        return self._line_item_id

    @line_item_id.setter
    def line_item_id(self, line_item_id):
        """Sets the line_item_id of this LineItem.

        LineItem unique ID

        :param line_item_id: The line_item_id of this LineItem.
        :type line_item_id: str
        """

        self._line_item_id = line_item_id

    @property
    def quantity(self):
        """Gets the quantity of this LineItem.

        LineItem Quantity

        :return: The quantity of this LineItem.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this LineItem.

        LineItem Quantity

        :param quantity: The quantity of this LineItem.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def repeating_invoice_id(self):
        """Gets the repeating_invoice_id of this LineItem.

        The Xero identifier for a Repeating Invoice

        :return: The repeating_invoice_id of this LineItem.
        :rtype: str
        """
        return self._repeating_invoice_id

    @repeating_invoice_id.setter
    def repeating_invoice_id(self, repeating_invoice_id):
        """Sets the repeating_invoice_id of this LineItem.

        The Xero identifier for a Repeating Invoice

        :param repeating_invoice_id: The repeating_invoice_id of this LineItem.
        :type repeating_invoice_id: str
        """

        self._repeating_invoice_id = repeating_invoice_id

    @property
    def tax_amount(self):
        """Gets the tax_amount of this LineItem.

        The tax amount is auto calculated as a percentage of the line amount (see below) based on the tax rate. This value can be overriden if the calculated <TaxAmount> is not correct.

        :return: The tax_amount of this LineItem.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this LineItem.

        The tax amount is auto calculated as a percentage of the line amount (see below) based on the tax rate. This value can be overriden if the calculated <TaxAmount> is not correct.

        :param tax_amount: The tax_amount of this LineItem.
        :type tax_amount: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_type(self):
        """Gets the tax_type of this LineItem.

        The tax type from TaxRates

        :return: The tax_type of this LineItem.
        :rtype: str
        """
        return self._tax_type

    @tax_type.setter
    def tax_type(self, tax_type):
        """Sets the tax_type of this LineItem.

        The tax type from TaxRates

        :param tax_type: The tax_type of this LineItem.
        :type tax_type: str
        """

        self._tax_type = tax_type

    @property
    def tracking(self):
        """Gets the tracking of this LineItem.

        Optional Tracking Category – see Tracking.  Any LineItem can have a  maximum of 2 <TrackingCategory> elements.

        :return: The tracking of this LineItem.
        :rtype: List[LineItemTracking]
        """
        return self._tracking

    @tracking.setter
    def tracking(self, tracking):
        """Sets the tracking of this LineItem.

        Optional Tracking Category – see Tracking.  Any LineItem can have a  maximum of 2 <TrackingCategory> elements.

        :param tracking: The tracking of this LineItem.
        :type tracking: List[LineItemTracking]
        """

        self._tracking = tracking

    @property
    def unit_amount(self):
        """Gets the unit_amount of this LineItem.

        LineItem Unit Amount

        :return: The unit_amount of this LineItem.
        :rtype: float
        """
        return self._unit_amount

    @unit_amount.setter
    def unit_amount(self, unit_amount):
        """Sets the unit_amount of this LineItem.

        LineItem Unit Amount

        :param unit_amount: The unit_amount of this LineItem.
        :type unit_amount: float
        """

        self._unit_amount = unit_amount
