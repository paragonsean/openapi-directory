# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_type import AccountType
from openapi_server.models.tracking_category import TrackingCategory
from openapi_server import util


class JournalLine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, account_id: str=None, account_name: str=None, account_type: AccountType=None, description: str=None, gross_amount: float=None, journal_line_id: str=None, net_amount: float=None, tax_amount: float=None, tax_name: str=None, tax_type: str=None, tracking_categories: List[TrackingCategory]=None):
        """JournalLine - a model defined in OpenAPI

        :param account_code: The account_code of this JournalLine.
        :param account_id: The account_id of this JournalLine.
        :param account_name: The account_name of this JournalLine.
        :param account_type: The account_type of this JournalLine.
        :param description: The description of this JournalLine.
        :param gross_amount: The gross_amount of this JournalLine.
        :param journal_line_id: The journal_line_id of this JournalLine.
        :param net_amount: The net_amount of this JournalLine.
        :param tax_amount: The tax_amount of this JournalLine.
        :param tax_name: The tax_name of this JournalLine.
        :param tax_type: The tax_type of this JournalLine.
        :param tracking_categories: The tracking_categories of this JournalLine.
        """
        self.openapi_types = {
            'account_code': str,
            'account_id': str,
            'account_name': str,
            'account_type': AccountType,
            'description': str,
            'gross_amount': float,
            'journal_line_id': str,
            'net_amount': float,
            'tax_amount': float,
            'tax_name': str,
            'tax_type': str,
            'tracking_categories': List[TrackingCategory]
        }

        self.attribute_map = {
            'account_code': 'AccountCode',
            'account_id': 'AccountID',
            'account_name': 'AccountName',
            'account_type': 'AccountType',
            'description': 'Description',
            'gross_amount': 'GrossAmount',
            'journal_line_id': 'JournalLineID',
            'net_amount': 'NetAmount',
            'tax_amount': 'TaxAmount',
            'tax_name': 'TaxName',
            'tax_type': 'TaxType',
            'tracking_categories': 'TrackingCategories'
        }

        self._account_code = account_code
        self._account_id = account_id
        self._account_name = account_name
        self._account_type = account_type
        self._description = description
        self._gross_amount = gross_amount
        self._journal_line_id = journal_line_id
        self._net_amount = net_amount
        self._tax_amount = tax_amount
        self._tax_name = tax_name
        self._tax_type = tax_type
        self._tracking_categories = tracking_categories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JournalLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JournalLine of this JournalLine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this JournalLine.

        See Accounts

        :return: The account_code of this JournalLine.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this JournalLine.

        See Accounts

        :param account_code: The account_code of this JournalLine.
        :type account_code: str
        """

        self._account_code = account_code

    @property
    def account_id(self):
        """Gets the account_id of this JournalLine.

        See Accounts

        :return: The account_id of this JournalLine.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this JournalLine.

        See Accounts

        :param account_id: The account_id of this JournalLine.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this JournalLine.

        See AccountCodes

        :return: The account_name of this JournalLine.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this JournalLine.

        See AccountCodes

        :param account_name: The account_name of this JournalLine.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_type(self):
        """Gets the account_type of this JournalLine.


        :return: The account_type of this JournalLine.
        :rtype: AccountType
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this JournalLine.


        :param account_type: The account_type of this JournalLine.
        :type account_type: AccountType
        """

        self._account_type = account_type

    @property
    def description(self):
        """Gets the description of this JournalLine.

        The description from the source transaction line item. Only returned if populated.

        :return: The description of this JournalLine.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JournalLine.

        The description from the source transaction line item. Only returned if populated.

        :param description: The description of this JournalLine.
        :type description: str
        """

        self._description = description

    @property
    def gross_amount(self):
        """Gets the gross_amount of this JournalLine.

        Gross amount of journal line (NetAmount + TaxAmount).

        :return: The gross_amount of this JournalLine.
        :rtype: float
        """
        return self._gross_amount

    @gross_amount.setter
    def gross_amount(self, gross_amount):
        """Sets the gross_amount of this JournalLine.

        Gross amount of journal line (NetAmount + TaxAmount).

        :param gross_amount: The gross_amount of this JournalLine.
        :type gross_amount: float
        """

        self._gross_amount = gross_amount

    @property
    def journal_line_id(self):
        """Gets the journal_line_id of this JournalLine.

        Xero identifier for Journal

        :return: The journal_line_id of this JournalLine.
        :rtype: str
        """
        return self._journal_line_id

    @journal_line_id.setter
    def journal_line_id(self, journal_line_id):
        """Sets the journal_line_id of this JournalLine.

        Xero identifier for Journal

        :param journal_line_id: The journal_line_id of this JournalLine.
        :type journal_line_id: str
        """

        self._journal_line_id = journal_line_id

    @property
    def net_amount(self):
        """Gets the net_amount of this JournalLine.

        Net amount of journal line. This will be a positive value for a debit and negative for a credit

        :return: The net_amount of this JournalLine.
        :rtype: float
        """
        return self._net_amount

    @net_amount.setter
    def net_amount(self, net_amount):
        """Sets the net_amount of this JournalLine.

        Net amount of journal line. This will be a positive value for a debit and negative for a credit

        :param net_amount: The net_amount of this JournalLine.
        :type net_amount: float
        """

        self._net_amount = net_amount

    @property
    def tax_amount(self):
        """Gets the tax_amount of this JournalLine.

        Total tax on a journal line

        :return: The tax_amount of this JournalLine.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this JournalLine.

        Total tax on a journal line

        :param tax_amount: The tax_amount of this JournalLine.
        :type tax_amount: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_name(self):
        """Gets the tax_name of this JournalLine.

        see TaxRates

        :return: The tax_name of this JournalLine.
        :rtype: str
        """
        return self._tax_name

    @tax_name.setter
    def tax_name(self, tax_name):
        """Sets the tax_name of this JournalLine.

        see TaxRates

        :param tax_name: The tax_name of this JournalLine.
        :type tax_name: str
        """

        self._tax_name = tax_name

    @property
    def tax_type(self):
        """Gets the tax_type of this JournalLine.

        The tax type from TaxRates

        :return: The tax_type of this JournalLine.
        :rtype: str
        """
        return self._tax_type

    @tax_type.setter
    def tax_type(self, tax_type):
        """Sets the tax_type of this JournalLine.

        The tax type from TaxRates

        :param tax_type: The tax_type of this JournalLine.
        :type tax_type: str
        """

        self._tax_type = tax_type

    @property
    def tracking_categories(self):
        """Gets the tracking_categories of this JournalLine.

        Optional Tracking Category â€“ see Tracking. Any JournalLine can have a maximum of 2 <TrackingCategory> elements.

        :return: The tracking_categories of this JournalLine.
        :rtype: List[TrackingCategory]
        """
        return self._tracking_categories

    @tracking_categories.setter
    def tracking_categories(self, tracking_categories):
        """Sets the tracking_categories of this JournalLine.

        Optional Tracking Category â€“ see Tracking. Any JournalLine can have a maximum of 2 <TrackingCategory> elements.

        :param tracking_categories: The tracking_categories of this JournalLine.
        :type tracking_categories: List[TrackingCategory]
        """

        self._tracking_categories = tracking_categories
