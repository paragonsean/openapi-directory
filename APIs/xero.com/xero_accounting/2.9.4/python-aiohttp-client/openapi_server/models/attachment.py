# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachment_id: str=None, content_length: int=None, file_name: str=None, include_online: bool=None, mime_type: str=None, url: str=None):
        """Attachment - a model defined in OpenAPI

        :param attachment_id: The attachment_id of this Attachment.
        :param content_length: The content_length of this Attachment.
        :param file_name: The file_name of this Attachment.
        :param include_online: The include_online of this Attachment.
        :param mime_type: The mime_type of this Attachment.
        :param url: The url of this Attachment.
        """
        self.openapi_types = {
            'attachment_id': str,
            'content_length': int,
            'file_name': str,
            'include_online': bool,
            'mime_type': str,
            'url': str
        }

        self.attribute_map = {
            'attachment_id': 'AttachmentID',
            'content_length': 'ContentLength',
            'file_name': 'FileName',
            'include_online': 'IncludeOnline',
            'mime_type': 'MimeType',
            'url': 'Url'
        }

        self._attachment_id = attachment_id
        self._content_length = content_length
        self._file_name = file_name
        self._include_online = include_online
        self._mime_type = mime_type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attachment of this Attachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachment_id(self):
        """Gets the attachment_id of this Attachment.

        Unique ID for the file

        :return: The attachment_id of this Attachment.
        :rtype: str
        """
        return self._attachment_id

    @attachment_id.setter
    def attachment_id(self, attachment_id):
        """Sets the attachment_id of this Attachment.

        Unique ID for the file

        :param attachment_id: The attachment_id of this Attachment.
        :type attachment_id: str
        """

        self._attachment_id = attachment_id

    @property
    def content_length(self):
        """Gets the content_length of this Attachment.

        Length of the file content

        :return: The content_length of this Attachment.
        :rtype: int
        """
        return self._content_length

    @content_length.setter
    def content_length(self, content_length):
        """Sets the content_length of this Attachment.

        Length of the file content

        :param content_length: The content_length of this Attachment.
        :type content_length: int
        """

        self._content_length = content_length

    @property
    def file_name(self):
        """Gets the file_name of this Attachment.

        Name of the file

        :return: The file_name of this Attachment.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Attachment.

        Name of the file

        :param file_name: The file_name of this Attachment.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def include_online(self):
        """Gets the include_online of this Attachment.

        Include the file with the online invoice

        :return: The include_online of this Attachment.
        :rtype: bool
        """
        return self._include_online

    @include_online.setter
    def include_online(self, include_online):
        """Sets the include_online of this Attachment.

        Include the file with the online invoice

        :param include_online: The include_online of this Attachment.
        :type include_online: bool
        """

        self._include_online = include_online

    @property
    def mime_type(self):
        """Gets the mime_type of this Attachment.

        Type of file

        :return: The mime_type of this Attachment.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Attachment.

        Type of file

        :param mime_type: The mime_type of this Attachment.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def url(self):
        """Gets the url of this Attachment.

        URL to the file on xero.com

        :return: The url of this Attachment.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Attachment.

        URL to the file on xero.com

        :param url: The url of this Attachment.
        :type url: str
        """

        self._url = url
