# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.external_link import ExternalLink
from openapi_server.models.validation_error import ValidationError
from openapi_server import util


class Employee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, employee_id: str=None, external_link: ExternalLink=None, first_name: str=None, last_name: str=None, status: str=None, status_attribute_string: str=None, updated_date_utc: str=None, validation_errors: List[ValidationError]=None):
        """Employee - a model defined in OpenAPI

        :param employee_id: The employee_id of this Employee.
        :param external_link: The external_link of this Employee.
        :param first_name: The first_name of this Employee.
        :param last_name: The last_name of this Employee.
        :param status: The status of this Employee.
        :param status_attribute_string: The status_attribute_string of this Employee.
        :param updated_date_utc: The updated_date_utc of this Employee.
        :param validation_errors: The validation_errors of this Employee.
        """
        self.openapi_types = {
            'employee_id': str,
            'external_link': ExternalLink,
            'first_name': str,
            'last_name': str,
            'status': str,
            'status_attribute_string': str,
            'updated_date_utc': str,
            'validation_errors': List[ValidationError]
        }

        self.attribute_map = {
            'employee_id': 'EmployeeID',
            'external_link': 'ExternalLink',
            'first_name': 'FirstName',
            'last_name': 'LastName',
            'status': 'Status',
            'status_attribute_string': 'StatusAttributeString',
            'updated_date_utc': 'UpdatedDateUTC',
            'validation_errors': 'ValidationErrors'
        }

        self._employee_id = employee_id
        self._external_link = external_link
        self._first_name = first_name
        self._last_name = last_name
        self._status = status
        self._status_attribute_string = status_attribute_string
        self._updated_date_utc = updated_date_utc
        self._validation_errors = validation_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Employee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Employee of this Employee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def employee_id(self):
        """Gets the employee_id of this Employee.

        The Xero identifier for an employee e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9

        :return: The employee_id of this Employee.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this Employee.

        The Xero identifier for an employee e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9

        :param employee_id: The employee_id of this Employee.
        :type employee_id: str
        """

        self._employee_id = employee_id

    @property
    def external_link(self):
        """Gets the external_link of this Employee.


        :return: The external_link of this Employee.
        :rtype: ExternalLink
        """
        return self._external_link

    @external_link.setter
    def external_link(self, external_link):
        """Sets the external_link of this Employee.


        :param external_link: The external_link of this Employee.
        :type external_link: ExternalLink
        """

        self._external_link = external_link

    @property
    def first_name(self):
        """Gets the first_name of this Employee.

        First name of an employee (max length = 255)

        :return: The first_name of this Employee.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Employee.

        First name of an employee (max length = 255)

        :param first_name: The first_name of this Employee.
        :type first_name: str
        """
        if first_name is not None and len(first_name) > 255:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `255`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Employee.

        Last name of an employee (max length = 255)

        :return: The last_name of this Employee.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Employee.

        Last name of an employee (max length = 255)

        :param last_name: The last_name of this Employee.
        :type last_name: str
        """
        if last_name is not None and len(last_name) > 255:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `255`")

        self._last_name = last_name

    @property
    def status(self):
        """Gets the status of this Employee.

        Current status of an employee – see contact status types

        :return: The status of this Employee.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Employee.

        Current status of an employee – see contact status types

        :param status: The status of this Employee.
        :type status: str
        """
        allowed_values = ["ACTIVE", "ARCHIVED", "GDPRREQUEST", "DELETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_attribute_string(self):
        """Gets the status_attribute_string of this Employee.

        A string to indicate if a invoice status

        :return: The status_attribute_string of this Employee.
        :rtype: str
        """
        return self._status_attribute_string

    @status_attribute_string.setter
    def status_attribute_string(self, status_attribute_string):
        """Sets the status_attribute_string of this Employee.

        A string to indicate if a invoice status

        :param status_attribute_string: The status_attribute_string of this Employee.
        :type status_attribute_string: str
        """

        self._status_attribute_string = status_attribute_string

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this Employee.


        :return: The updated_date_utc of this Employee.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this Employee.


        :param updated_date_utc: The updated_date_utc of this Employee.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc

    @property
    def validation_errors(self):
        """Gets the validation_errors of this Employee.

        Displays array of validation error messages from the API

        :return: The validation_errors of this Employee.
        :rtype: List[ValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this Employee.

        Displays array of validation error messages from the API

        :param validation_errors: The validation_errors of this Employee.
        :type validation_errors: List[ValidationError]
        """

        self._validation_errors = validation_errors
