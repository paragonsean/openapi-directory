# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Schedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, due_date: int=None, due_date_type: str=None, end_date: str=None, next_scheduled_date: str=None, period: int=None, start_date: str=None, unit: str=None):
        """Schedule - a model defined in OpenAPI

        :param due_date: The due_date of this Schedule.
        :param due_date_type: The due_date_type of this Schedule.
        :param end_date: The end_date of this Schedule.
        :param next_scheduled_date: The next_scheduled_date of this Schedule.
        :param period: The period of this Schedule.
        :param start_date: The start_date of this Schedule.
        :param unit: The unit of this Schedule.
        """
        self.openapi_types = {
            'due_date': int,
            'due_date_type': str,
            'end_date': str,
            'next_scheduled_date': str,
            'period': int,
            'start_date': str,
            'unit': str
        }

        self.attribute_map = {
            'due_date': 'DueDate',
            'due_date_type': 'DueDateType',
            'end_date': 'EndDate',
            'next_scheduled_date': 'NextScheduledDate',
            'period': 'Period',
            'start_date': 'StartDate',
            'unit': 'Unit'
        }

        self._due_date = due_date
        self._due_date_type = due_date_type
        self._end_date = end_date
        self._next_scheduled_date = next_scheduled_date
        self._period = period
        self._start_date = start_date
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Schedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Schedule of this Schedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def due_date(self):
        """Gets the due_date of this Schedule.

        Integer used with due date type e.g 20 (of following month), 31 (of current month)

        :return: The due_date of this Schedule.
        :rtype: int
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Schedule.

        Integer used with due date type e.g 20 (of following month), 31 (of current month)

        :param due_date: The due_date of this Schedule.
        :type due_date: int
        """

        self._due_date = due_date

    @property
    def due_date_type(self):
        """Gets the due_date_type of this Schedule.

        the payment terms

        :return: The due_date_type of this Schedule.
        :rtype: str
        """
        return self._due_date_type

    @due_date_type.setter
    def due_date_type(self, due_date_type):
        """Sets the due_date_type of this Schedule.

        the payment terms

        :param due_date_type: The due_date_type of this Schedule.
        :type due_date_type: str
        """
        allowed_values = ["DAYSAFTERBILLDATE", "DAYSAFTERBILLMONTH", "DAYSAFTERINVOICEDATE", "DAYSAFTERINVOICEMONTH", "OFCURRENTMONTH", "OFFOLLOWINGMONTH"]  # noqa: E501
        if due_date_type not in allowed_values:
            raise ValueError(
                "Invalid value for `due_date_type` ({0}), must be one of {1}"
                .format(due_date_type, allowed_values)
            )

        self._due_date_type = due_date_type

    @property
    def end_date(self):
        """Gets the end_date of this Schedule.

        Invoice end date – only returned if the template has an end date set

        :return: The end_date of this Schedule.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Schedule.

        Invoice end date – only returned if the template has an end date set

        :param end_date: The end_date of this Schedule.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def next_scheduled_date(self):
        """Gets the next_scheduled_date of this Schedule.

        The calendar date of the next invoice in the schedule to be generated

        :return: The next_scheduled_date of this Schedule.
        :rtype: str
        """
        return self._next_scheduled_date

    @next_scheduled_date.setter
    def next_scheduled_date(self, next_scheduled_date):
        """Sets the next_scheduled_date of this Schedule.

        The calendar date of the next invoice in the schedule to be generated

        :param next_scheduled_date: The next_scheduled_date of this Schedule.
        :type next_scheduled_date: str
        """

        self._next_scheduled_date = next_scheduled_date

    @property
    def period(self):
        """Gets the period of this Schedule.

        Integer used with the unit e.g. 1 (every 1 week), 2 (every 2 months)

        :return: The period of this Schedule.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Schedule.

        Integer used with the unit e.g. 1 (every 1 week), 2 (every 2 months)

        :param period: The period of this Schedule.
        :type period: int
        """

        self._period = period

    @property
    def start_date(self):
        """Gets the start_date of this Schedule.

        Date the first invoice of the current version of the repeating schedule was generated (changes when repeating invoice is edited)

        :return: The start_date of this Schedule.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Schedule.

        Date the first invoice of the current version of the repeating schedule was generated (changes when repeating invoice is edited)

        :param start_date: The start_date of this Schedule.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def unit(self):
        """Gets the unit of this Schedule.

        One of the following - WEEKLY or MONTHLY

        :return: The unit of this Schedule.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Schedule.

        One of the following - WEEKLY or MONTHLY

        :param unit: The unit of this Schedule.
        :type unit: str
        """
        allowed_values = ["WEEKLY", "MONTHLY"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit
