# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Phone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, phone_area_code: str=None, phone_country_code: str=None, phone_number: str=None, phone_type: str=None):
        """Phone - a model defined in OpenAPI

        :param phone_area_code: The phone_area_code of this Phone.
        :param phone_country_code: The phone_country_code of this Phone.
        :param phone_number: The phone_number of this Phone.
        :param phone_type: The phone_type of this Phone.
        """
        self.openapi_types = {
            'phone_area_code': str,
            'phone_country_code': str,
            'phone_number': str,
            'phone_type': str
        }

        self.attribute_map = {
            'phone_area_code': 'PhoneAreaCode',
            'phone_country_code': 'PhoneCountryCode',
            'phone_number': 'PhoneNumber',
            'phone_type': 'PhoneType'
        }

        self._phone_area_code = phone_area_code
        self._phone_country_code = phone_country_code
        self._phone_number = phone_number
        self._phone_type = phone_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Phone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Phone of this Phone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def phone_area_code(self):
        """Gets the phone_area_code of this Phone.

        max length = 10

        :return: The phone_area_code of this Phone.
        :rtype: str
        """
        return self._phone_area_code

    @phone_area_code.setter
    def phone_area_code(self, phone_area_code):
        """Sets the phone_area_code of this Phone.

        max length = 10

        :param phone_area_code: The phone_area_code of this Phone.
        :type phone_area_code: str
        """
        if phone_area_code is not None and len(phone_area_code) > 10:
            raise ValueError("Invalid value for `phone_area_code`, length must be less than or equal to `10`")

        self._phone_area_code = phone_area_code

    @property
    def phone_country_code(self):
        """Gets the phone_country_code of this Phone.

        max length = 20

        :return: The phone_country_code of this Phone.
        :rtype: str
        """
        return self._phone_country_code

    @phone_country_code.setter
    def phone_country_code(self, phone_country_code):
        """Sets the phone_country_code of this Phone.

        max length = 20

        :param phone_country_code: The phone_country_code of this Phone.
        :type phone_country_code: str
        """
        if phone_country_code is not None and len(phone_country_code) > 20:
            raise ValueError("Invalid value for `phone_country_code`, length must be less than or equal to `20`")

        self._phone_country_code = phone_country_code

    @property
    def phone_number(self):
        """Gets the phone_number of this Phone.

        max length = 50

        :return: The phone_number of this Phone.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Phone.

        max length = 50

        :param phone_number: The phone_number of this Phone.
        :type phone_number: str
        """
        if phone_number is not None and len(phone_number) > 50:
            raise ValueError("Invalid value for `phone_number`, length must be less than or equal to `50`")

        self._phone_number = phone_number

    @property
    def phone_type(self):
        """Gets the phone_type of this Phone.


        :return: The phone_type of this Phone.
        :rtype: str
        """
        return self._phone_type

    @phone_type.setter
    def phone_type(self, phone_type):
        """Sets the phone_type of this Phone.


        :param phone_type: The phone_type of this Phone.
        :type phone_type: str
        """
        allowed_values = ["DEFAULT", "DDI", "MOBILE", "FAX", "OFFICE"]  # noqa: E501
        if phone_type not in allowed_values:
            raise ValueError(
                "Invalid value for `phone_type` ({0}), must be one of {1}"
                .format(phone_type, allowed_values)
            )

        self._phone_type = phone_type
