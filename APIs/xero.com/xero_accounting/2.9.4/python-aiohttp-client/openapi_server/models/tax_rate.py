# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tax_component import TaxComponent
from openapi_server import util


class TaxRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_apply_to_assets: bool=None, can_apply_to_equity: bool=None, can_apply_to_expenses: bool=None, can_apply_to_liabilities: bool=None, can_apply_to_revenue: bool=None, display_tax_rate: float=None, effective_rate: float=None, name: str=None, report_tax_type: str=None, status: str=None, tax_components: List[TaxComponent]=None, tax_type: str=None):
        """TaxRate - a model defined in OpenAPI

        :param can_apply_to_assets: The can_apply_to_assets of this TaxRate.
        :param can_apply_to_equity: The can_apply_to_equity of this TaxRate.
        :param can_apply_to_expenses: The can_apply_to_expenses of this TaxRate.
        :param can_apply_to_liabilities: The can_apply_to_liabilities of this TaxRate.
        :param can_apply_to_revenue: The can_apply_to_revenue of this TaxRate.
        :param display_tax_rate: The display_tax_rate of this TaxRate.
        :param effective_rate: The effective_rate of this TaxRate.
        :param name: The name of this TaxRate.
        :param report_tax_type: The report_tax_type of this TaxRate.
        :param status: The status of this TaxRate.
        :param tax_components: The tax_components of this TaxRate.
        :param tax_type: The tax_type of this TaxRate.
        """
        self.openapi_types = {
            'can_apply_to_assets': bool,
            'can_apply_to_equity': bool,
            'can_apply_to_expenses': bool,
            'can_apply_to_liabilities': bool,
            'can_apply_to_revenue': bool,
            'display_tax_rate': float,
            'effective_rate': float,
            'name': str,
            'report_tax_type': str,
            'status': str,
            'tax_components': List[TaxComponent],
            'tax_type': str
        }

        self.attribute_map = {
            'can_apply_to_assets': 'CanApplyToAssets',
            'can_apply_to_equity': 'CanApplyToEquity',
            'can_apply_to_expenses': 'CanApplyToExpenses',
            'can_apply_to_liabilities': 'CanApplyToLiabilities',
            'can_apply_to_revenue': 'CanApplyToRevenue',
            'display_tax_rate': 'DisplayTaxRate',
            'effective_rate': 'EffectiveRate',
            'name': 'Name',
            'report_tax_type': 'ReportTaxType',
            'status': 'Status',
            'tax_components': 'TaxComponents',
            'tax_type': 'TaxType'
        }

        self._can_apply_to_assets = can_apply_to_assets
        self._can_apply_to_equity = can_apply_to_equity
        self._can_apply_to_expenses = can_apply_to_expenses
        self._can_apply_to_liabilities = can_apply_to_liabilities
        self._can_apply_to_revenue = can_apply_to_revenue
        self._display_tax_rate = display_tax_rate
        self._effective_rate = effective_rate
        self._name = name
        self._report_tax_type = report_tax_type
        self._status = status
        self._tax_components = tax_components
        self._tax_type = tax_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaxRate of this TaxRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_apply_to_assets(self):
        """Gets the can_apply_to_assets of this TaxRate.

        Boolean to describe if tax rate can be used for asset accounts i.e.  true,false

        :return: The can_apply_to_assets of this TaxRate.
        :rtype: bool
        """
        return self._can_apply_to_assets

    @can_apply_to_assets.setter
    def can_apply_to_assets(self, can_apply_to_assets):
        """Sets the can_apply_to_assets of this TaxRate.

        Boolean to describe if tax rate can be used for asset accounts i.e.  true,false

        :param can_apply_to_assets: The can_apply_to_assets of this TaxRate.
        :type can_apply_to_assets: bool
        """

        self._can_apply_to_assets = can_apply_to_assets

    @property
    def can_apply_to_equity(self):
        """Gets the can_apply_to_equity of this TaxRate.

        Boolean to describe if tax rate can be used for equity accounts i.e true,false

        :return: The can_apply_to_equity of this TaxRate.
        :rtype: bool
        """
        return self._can_apply_to_equity

    @can_apply_to_equity.setter
    def can_apply_to_equity(self, can_apply_to_equity):
        """Sets the can_apply_to_equity of this TaxRate.

        Boolean to describe if tax rate can be used for equity accounts i.e true,false

        :param can_apply_to_equity: The can_apply_to_equity of this TaxRate.
        :type can_apply_to_equity: bool
        """

        self._can_apply_to_equity = can_apply_to_equity

    @property
    def can_apply_to_expenses(self):
        """Gets the can_apply_to_expenses of this TaxRate.

        Boolean to describe if tax rate can be used for expense accounts  i.e. true,false

        :return: The can_apply_to_expenses of this TaxRate.
        :rtype: bool
        """
        return self._can_apply_to_expenses

    @can_apply_to_expenses.setter
    def can_apply_to_expenses(self, can_apply_to_expenses):
        """Sets the can_apply_to_expenses of this TaxRate.

        Boolean to describe if tax rate can be used for expense accounts  i.e. true,false

        :param can_apply_to_expenses: The can_apply_to_expenses of this TaxRate.
        :type can_apply_to_expenses: bool
        """

        self._can_apply_to_expenses = can_apply_to_expenses

    @property
    def can_apply_to_liabilities(self):
        """Gets the can_apply_to_liabilities of this TaxRate.

        Boolean to describe if tax rate can be used for liability accounts  i.e. true,false

        :return: The can_apply_to_liabilities of this TaxRate.
        :rtype: bool
        """
        return self._can_apply_to_liabilities

    @can_apply_to_liabilities.setter
    def can_apply_to_liabilities(self, can_apply_to_liabilities):
        """Sets the can_apply_to_liabilities of this TaxRate.

        Boolean to describe if tax rate can be used for liability accounts  i.e. true,false

        :param can_apply_to_liabilities: The can_apply_to_liabilities of this TaxRate.
        :type can_apply_to_liabilities: bool
        """

        self._can_apply_to_liabilities = can_apply_to_liabilities

    @property
    def can_apply_to_revenue(self):
        """Gets the can_apply_to_revenue of this TaxRate.

        Boolean to describe if tax rate can be used for revenue accounts i.e. true,false

        :return: The can_apply_to_revenue of this TaxRate.
        :rtype: bool
        """
        return self._can_apply_to_revenue

    @can_apply_to_revenue.setter
    def can_apply_to_revenue(self, can_apply_to_revenue):
        """Sets the can_apply_to_revenue of this TaxRate.

        Boolean to describe if tax rate can be used for revenue accounts i.e. true,false

        :param can_apply_to_revenue: The can_apply_to_revenue of this TaxRate.
        :type can_apply_to_revenue: bool
        """

        self._can_apply_to_revenue = can_apply_to_revenue

    @property
    def display_tax_rate(self):
        """Gets the display_tax_rate of this TaxRate.

        Tax Rate (decimal to 4dp) e.g 12.5000

        :return: The display_tax_rate of this TaxRate.
        :rtype: float
        """
        return self._display_tax_rate

    @display_tax_rate.setter
    def display_tax_rate(self, display_tax_rate):
        """Sets the display_tax_rate of this TaxRate.

        Tax Rate (decimal to 4dp) e.g 12.5000

        :param display_tax_rate: The display_tax_rate of this TaxRate.
        :type display_tax_rate: float
        """

        self._display_tax_rate = display_tax_rate

    @property
    def effective_rate(self):
        """Gets the effective_rate of this TaxRate.

        Effective Tax Rate (decimal to 4dp) e.g 12.5000

        :return: The effective_rate of this TaxRate.
        :rtype: float
        """
        return self._effective_rate

    @effective_rate.setter
    def effective_rate(self, effective_rate):
        """Sets the effective_rate of this TaxRate.

        Effective Tax Rate (decimal to 4dp) e.g 12.5000

        :param effective_rate: The effective_rate of this TaxRate.
        :type effective_rate: float
        """

        self._effective_rate = effective_rate

    @property
    def name(self):
        """Gets the name of this TaxRate.

        Name of tax rate

        :return: The name of this TaxRate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaxRate.

        Name of tax rate

        :param name: The name of this TaxRate.
        :type name: str
        """

        self._name = name

    @property
    def report_tax_type(self):
        """Gets the report_tax_type of this TaxRate.

        See ReportTaxTypes

        :return: The report_tax_type of this TaxRate.
        :rtype: str
        """
        return self._report_tax_type

    @report_tax_type.setter
    def report_tax_type(self, report_tax_type):
        """Sets the report_tax_type of this TaxRate.

        See ReportTaxTypes

        :param report_tax_type: The report_tax_type of this TaxRate.
        :type report_tax_type: str
        """
        allowed_values = ["AVALARA", "BASEXCLUDED", "CAPITALSALESOUTPUT", "CAPITALEXPENSESINPUT", "ECOUTPUT", "ECOUTPUTSERVICES", "ECINPUT", "ECACQUISITIONS", "EXEMPTEXPENSES", "EXEMPTINPUT", "EXEMPTOUTPUT", "GSTONIMPORTS", "INPUT", "INPUTTAXED", "MOSSSALES", "NONE", "NONEOUTPUT", "OUTPUT", "PURCHASESINPUT", "SALESOUTPUT", "EXEMPTCAPITAL", "EXEMPTEXPORT", "CAPITALEXINPUT", "GSTONCAPIMPORTS", "GSTONCAPITALIMPORTS", "REVERSECHARGES", "PAYMENTS", "INVOICE", "CASH", "ACCRUAL", "FLATRATECASH", "FLATRATEACCRUAL", "ACCRUALS", "TXCA", "SRCAS", "DSOUTPUT", "BLINPUT2", "EPINPUT", "IMINPUT2", "MEINPUT", "IGDSINPUT2", "ESN33OUTPUT", "OPINPUT", "OSOUTPUT", "TXN33INPUT", "TXESSINPUT", "TXREINPUT", "TXPETINPUT", "NRINPUT", "ES33OUTPUT", "ZERORATEDINPUT", "ZERORATEDOUTPUT", "DRCHARGESUPPLY", "DRCHARGE", "CAPINPUT", "CAPIMPORTS", "IMINPUT", "INPUT2", "CIUINPUT", "SRINPUT", "OUTPUT2", "SROUTPUT", "CAPOUTPUT", "SROUTPUT2", "CIUOUTPUT", "ZROUTPUT", "ZREXPORT", "ACC28PLUS", "ACCUPTO28", "OTHEROUTPUT", "SHOUTPUT", "ZRINPUT", "BADDEBT", "OTHERINPUT"]  # noqa: E501
        if report_tax_type not in allowed_values:
            raise ValueError(
                "Invalid value for `report_tax_type` ({0}), must be one of {1}"
                .format(report_tax_type, allowed_values)
            )

        self._report_tax_type = report_tax_type

    @property
    def status(self):
        """Gets the status of this TaxRate.

        See Status Codes

        :return: The status of this TaxRate.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaxRate.

        See Status Codes

        :param status: The status of this TaxRate.
        :type status: str
        """
        allowed_values = ["ACTIVE", "DELETED", "ARCHIVED", "PENDING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tax_components(self):
        """Gets the tax_components of this TaxRate.

        See TaxComponents

        :return: The tax_components of this TaxRate.
        :rtype: List[TaxComponent]
        """
        return self._tax_components

    @tax_components.setter
    def tax_components(self, tax_components):
        """Sets the tax_components of this TaxRate.

        See TaxComponents

        :param tax_components: The tax_components of this TaxRate.
        :type tax_components: List[TaxComponent]
        """

        self._tax_components = tax_components

    @property
    def tax_type(self):
        """Gets the tax_type of this TaxRate.

        The tax type

        :return: The tax_type of this TaxRate.
        :rtype: str
        """
        return self._tax_type

    @tax_type.setter
    def tax_type(self, tax_type):
        """Sets the tax_type of this TaxRate.

        The tax type

        :param tax_type: The tax_type of this TaxRate.
        :type tax_type: str
        """

        self._tax_type = tax_type
