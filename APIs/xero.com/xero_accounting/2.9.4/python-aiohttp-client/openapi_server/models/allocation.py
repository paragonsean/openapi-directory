# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.credit_note import CreditNote
from openapi_server.models.invoice import Invoice
from openapi_server.models.overpayment import Overpayment
from openapi_server.models.prepayment import Prepayment
from openapi_server.models.validation_error import ValidationError
from openapi_server import util


class Allocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, credit_note: CreditNote=None, _date: str=None, invoice: Invoice=None, overpayment: Overpayment=None, prepayment: Prepayment=None, status_attribute_string: str=None, validation_errors: List[ValidationError]=None):
        """Allocation - a model defined in OpenAPI

        :param amount: The amount of this Allocation.
        :param credit_note: The credit_note of this Allocation.
        :param _date: The _date of this Allocation.
        :param invoice: The invoice of this Allocation.
        :param overpayment: The overpayment of this Allocation.
        :param prepayment: The prepayment of this Allocation.
        :param status_attribute_string: The status_attribute_string of this Allocation.
        :param validation_errors: The validation_errors of this Allocation.
        """
        self.openapi_types = {
            'amount': float,
            'credit_note': CreditNote,
            '_date': str,
            'invoice': Invoice,
            'overpayment': Overpayment,
            'prepayment': Prepayment,
            'status_attribute_string': str,
            'validation_errors': List[ValidationError]
        }

        self.attribute_map = {
            'amount': 'Amount',
            'credit_note': 'CreditNote',
            '_date': 'Date',
            'invoice': 'Invoice',
            'overpayment': 'Overpayment',
            'prepayment': 'Prepayment',
            'status_attribute_string': 'StatusAttributeString',
            'validation_errors': 'ValidationErrors'
        }

        self._amount = amount
        self._credit_note = credit_note
        self.__date = _date
        self._invoice = invoice
        self._overpayment = overpayment
        self._prepayment = prepayment
        self._status_attribute_string = status_attribute_string
        self._validation_errors = validation_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Allocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Allocation of this Allocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Allocation.

        the amount being applied to the invoice

        :return: The amount of this Allocation.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Allocation.

        the amount being applied to the invoice

        :param amount: The amount of this Allocation.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def credit_note(self):
        """Gets the credit_note of this Allocation.


        :return: The credit_note of this Allocation.
        :rtype: CreditNote
        """
        return self._credit_note

    @credit_note.setter
    def credit_note(self, credit_note):
        """Sets the credit_note of this Allocation.


        :param credit_note: The credit_note of this Allocation.
        :type credit_note: CreditNote
        """

        self._credit_note = credit_note

    @property
    def _date(self):
        """Gets the _date of this Allocation.

        the date the allocation is applied YYYY-MM-DD.

        :return: The _date of this Allocation.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Allocation.

        the date the allocation is applied YYYY-MM-DD.

        :param _date: The _date of this Allocation.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def invoice(self):
        """Gets the invoice of this Allocation.


        :return: The invoice of this Allocation.
        :rtype: Invoice
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this Allocation.


        :param invoice: The invoice of this Allocation.
        :type invoice: Invoice
        """
        if invoice is None:
            raise ValueError("Invalid value for `invoice`, must not be `None`")

        self._invoice = invoice

    @property
    def overpayment(self):
        """Gets the overpayment of this Allocation.


        :return: The overpayment of this Allocation.
        :rtype: Overpayment
        """
        return self._overpayment

    @overpayment.setter
    def overpayment(self, overpayment):
        """Sets the overpayment of this Allocation.


        :param overpayment: The overpayment of this Allocation.
        :type overpayment: Overpayment
        """

        self._overpayment = overpayment

    @property
    def prepayment(self):
        """Gets the prepayment of this Allocation.


        :return: The prepayment of this Allocation.
        :rtype: Prepayment
        """
        return self._prepayment

    @prepayment.setter
    def prepayment(self, prepayment):
        """Sets the prepayment of this Allocation.


        :param prepayment: The prepayment of this Allocation.
        :type prepayment: Prepayment
        """

        self._prepayment = prepayment

    @property
    def status_attribute_string(self):
        """Gets the status_attribute_string of this Allocation.

        A string to indicate if a invoice status

        :return: The status_attribute_string of this Allocation.
        :rtype: str
        """
        return self._status_attribute_string

    @status_attribute_string.setter
    def status_attribute_string(self, status_attribute_string):
        """Sets the status_attribute_string of this Allocation.

        A string to indicate if a invoice status

        :param status_attribute_string: The status_attribute_string of this Allocation.
        :type status_attribute_string: str
        """

        self._status_attribute_string = status_attribute_string

    @property
    def validation_errors(self):
        """Gets the validation_errors of this Allocation.

        Displays array of validation error messages from the API

        :return: The validation_errors of this Allocation.
        :rtype: List[ValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this Allocation.

        Displays array of validation error messages from the API

        :param validation_errors: The validation_errors of this Allocation.
        :type validation_errors: List[ValidationError]
        """

        self._validation_errors = validation_errors
