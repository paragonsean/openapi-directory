# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account import Account
from openapi_server.models.conversion_balances import ConversionBalances
from openapi_server.models.conversion_date import ConversionDate
from openapi_server import util


class Setup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounts: List[Account]=None, conversion_balances: List[ConversionBalances]=None, conversion_date: ConversionDate=None):
        """Setup - a model defined in OpenAPI

        :param accounts: The accounts of this Setup.
        :param conversion_balances: The conversion_balances of this Setup.
        :param conversion_date: The conversion_date of this Setup.
        """
        self.openapi_types = {
            'accounts': List[Account],
            'conversion_balances': List[ConversionBalances],
            'conversion_date': ConversionDate
        }

        self.attribute_map = {
            'accounts': 'Accounts',
            'conversion_balances': 'ConversionBalances',
            'conversion_date': 'ConversionDate'
        }

        self._accounts = accounts
        self._conversion_balances = conversion_balances
        self._conversion_date = conversion_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Setup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Setup of this Setup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounts(self):
        """Gets the accounts of this Setup.


        :return: The accounts of this Setup.
        :rtype: List[Account]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this Setup.


        :param accounts: The accounts of this Setup.
        :type accounts: List[Account]
        """

        self._accounts = accounts

    @property
    def conversion_balances(self):
        """Gets the conversion_balances of this Setup.

        Balance supplied for each account that has a value as at the conversion date.

        :return: The conversion_balances of this Setup.
        :rtype: List[ConversionBalances]
        """
        return self._conversion_balances

    @conversion_balances.setter
    def conversion_balances(self, conversion_balances):
        """Sets the conversion_balances of this Setup.

        Balance supplied for each account that has a value as at the conversion date.

        :param conversion_balances: The conversion_balances of this Setup.
        :type conversion_balances: List[ConversionBalances]
        """

        self._conversion_balances = conversion_balances

    @property
    def conversion_date(self):
        """Gets the conversion_date of this Setup.


        :return: The conversion_date of this Setup.
        :rtype: ConversionDate
        """
        return self._conversion_date

    @conversion_date.setter
    def conversion_date(self, conversion_date):
        """Sets the conversion_date of this Setup.


        :param conversion_date: The conversion_date of this Setup.
        :type conversion_date: ConversionDate
        """

        self._conversion_date = conversion_date
