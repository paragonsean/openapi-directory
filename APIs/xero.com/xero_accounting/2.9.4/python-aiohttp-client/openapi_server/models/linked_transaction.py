# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.validation_error import ValidationError
from openapi_server import util


class LinkedTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_id: str=None, linked_transaction_id: str=None, source_line_item_id: str=None, source_transaction_id: str=None, source_transaction_type_code: str=None, status: str=None, target_line_item_id: str=None, target_transaction_id: str=None, type: str=None, updated_date_utc: str=None, validation_errors: List[ValidationError]=None):
        """LinkedTransaction - a model defined in OpenAPI

        :param contact_id: The contact_id of this LinkedTransaction.
        :param linked_transaction_id: The linked_transaction_id of this LinkedTransaction.
        :param source_line_item_id: The source_line_item_id of this LinkedTransaction.
        :param source_transaction_id: The source_transaction_id of this LinkedTransaction.
        :param source_transaction_type_code: The source_transaction_type_code of this LinkedTransaction.
        :param status: The status of this LinkedTransaction.
        :param target_line_item_id: The target_line_item_id of this LinkedTransaction.
        :param target_transaction_id: The target_transaction_id of this LinkedTransaction.
        :param type: The type of this LinkedTransaction.
        :param updated_date_utc: The updated_date_utc of this LinkedTransaction.
        :param validation_errors: The validation_errors of this LinkedTransaction.
        """
        self.openapi_types = {
            'contact_id': str,
            'linked_transaction_id': str,
            'source_line_item_id': str,
            'source_transaction_id': str,
            'source_transaction_type_code': str,
            'status': str,
            'target_line_item_id': str,
            'target_transaction_id': str,
            'type': str,
            'updated_date_utc': str,
            'validation_errors': List[ValidationError]
        }

        self.attribute_map = {
            'contact_id': 'ContactID',
            'linked_transaction_id': 'LinkedTransactionID',
            'source_line_item_id': 'SourceLineItemID',
            'source_transaction_id': 'SourceTransactionID',
            'source_transaction_type_code': 'SourceTransactionTypeCode',
            'status': 'Status',
            'target_line_item_id': 'TargetLineItemID',
            'target_transaction_id': 'TargetTransactionID',
            'type': 'Type',
            'updated_date_utc': 'UpdatedDateUTC',
            'validation_errors': 'ValidationErrors'
        }

        self._contact_id = contact_id
        self._linked_transaction_id = linked_transaction_id
        self._source_line_item_id = source_line_item_id
        self._source_transaction_id = source_transaction_id
        self._source_transaction_type_code = source_transaction_type_code
        self._status = status
        self._target_line_item_id = target_line_item_id
        self._target_transaction_id = target_transaction_id
        self._type = type
        self._updated_date_utc = updated_date_utc
        self._validation_errors = validation_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinkedTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinkedTransaction of this LinkedTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_id(self):
        """Gets the contact_id of this LinkedTransaction.

        Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID=4bb34b03-3378-4bb2-a0ed-6345abf3224e&Status=APPROVED.

        :return: The contact_id of this LinkedTransaction.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this LinkedTransaction.

        Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID=4bb34b03-3378-4bb2-a0ed-6345abf3224e&Status=APPROVED.

        :param contact_id: The contact_id of this LinkedTransaction.
        :type contact_id: str
        """

        self._contact_id = contact_id

    @property
    def linked_transaction_id(self):
        """Gets the linked_transaction_id of this LinkedTransaction.

        The Xero identifier for an Linked Transaction e.g./LinkedTransactions/297c2dc5-cc47-4afd-8ec8-74990b8761e9

        :return: The linked_transaction_id of this LinkedTransaction.
        :rtype: str
        """
        return self._linked_transaction_id

    @linked_transaction_id.setter
    def linked_transaction_id(self, linked_transaction_id):
        """Sets the linked_transaction_id of this LinkedTransaction.

        The Xero identifier for an Linked Transaction e.g./LinkedTransactions/297c2dc5-cc47-4afd-8ec8-74990b8761e9

        :param linked_transaction_id: The linked_transaction_id of this LinkedTransaction.
        :type linked_transaction_id: str
        """

        self._linked_transaction_id = linked_transaction_id

    @property
    def source_line_item_id(self):
        """Gets the source_line_item_id of this LinkedTransaction.

        The line item identifier from the source transaction.

        :return: The source_line_item_id of this LinkedTransaction.
        :rtype: str
        """
        return self._source_line_item_id

    @source_line_item_id.setter
    def source_line_item_id(self, source_line_item_id):
        """Sets the source_line_item_id of this LinkedTransaction.

        The line item identifier from the source transaction.

        :param source_line_item_id: The source_line_item_id of this LinkedTransaction.
        :type source_line_item_id: str
        """

        self._source_line_item_id = source_line_item_id

    @property
    def source_transaction_id(self):
        """Gets the source_transaction_id of this LinkedTransaction.

        Filter by the SourceTransactionID. Get all the linked transactions created from a particular ACCPAY invoice

        :return: The source_transaction_id of this LinkedTransaction.
        :rtype: str
        """
        return self._source_transaction_id

    @source_transaction_id.setter
    def source_transaction_id(self, source_transaction_id):
        """Sets the source_transaction_id of this LinkedTransaction.

        Filter by the SourceTransactionID. Get all the linked transactions created from a particular ACCPAY invoice

        :param source_transaction_id: The source_transaction_id of this LinkedTransaction.
        :type source_transaction_id: str
        """

        self._source_transaction_id = source_transaction_id

    @property
    def source_transaction_type_code(self):
        """Gets the source_transaction_type_code of this LinkedTransaction.

        The Type of the source tranasction. This will be ACCPAY if the linked transaction was created from an invoice and SPEND if it was created from a bank transaction.

        :return: The source_transaction_type_code of this LinkedTransaction.
        :rtype: str
        """
        return self._source_transaction_type_code

    @source_transaction_type_code.setter
    def source_transaction_type_code(self, source_transaction_type_code):
        """Sets the source_transaction_type_code of this LinkedTransaction.

        The Type of the source tranasction. This will be ACCPAY if the linked transaction was created from an invoice and SPEND if it was created from a bank transaction.

        :param source_transaction_type_code: The source_transaction_type_code of this LinkedTransaction.
        :type source_transaction_type_code: str
        """
        allowed_values = ["ACCPAY", "SPEND"]  # noqa: E501
        if source_transaction_type_code not in allowed_values:
            raise ValueError(
                "Invalid value for `source_transaction_type_code` ({0}), must be one of {1}"
                .format(source_transaction_type_code, allowed_values)
            )

        self._source_transaction_type_code = source_transaction_type_code

    @property
    def status(self):
        """Gets the status of this LinkedTransaction.

        Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID=4bb34b03-3378-4bb2-a0ed-6345abf3224e&Status=APPROVED.

        :return: The status of this LinkedTransaction.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LinkedTransaction.

        Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID=4bb34b03-3378-4bb2-a0ed-6345abf3224e&Status=APPROVED.

        :param status: The status of this LinkedTransaction.
        :type status: str
        """
        allowed_values = ["APPROVED", "DRAFT", "ONDRAFT", "BILLED", "VOIDED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def target_line_item_id(self):
        """Gets the target_line_item_id of this LinkedTransaction.

        The line item identifier from the target transaction. It is possible  to link multiple billable expenses to the same TargetLineItemID.

        :return: The target_line_item_id of this LinkedTransaction.
        :rtype: str
        """
        return self._target_line_item_id

    @target_line_item_id.setter
    def target_line_item_id(self, target_line_item_id):
        """Sets the target_line_item_id of this LinkedTransaction.

        The line item identifier from the target transaction. It is possible  to link multiple billable expenses to the same TargetLineItemID.

        :param target_line_item_id: The target_line_item_id of this LinkedTransaction.
        :type target_line_item_id: str
        """

        self._target_line_item_id = target_line_item_id

    @property
    def target_transaction_id(self):
        """Gets the target_transaction_id of this LinkedTransaction.

        Filter by the TargetTransactionID. Get all the linked transactions  allocated to a particular ACCREC invoice

        :return: The target_transaction_id of this LinkedTransaction.
        :rtype: str
        """
        return self._target_transaction_id

    @target_transaction_id.setter
    def target_transaction_id(self, target_transaction_id):
        """Sets the target_transaction_id of this LinkedTransaction.

        Filter by the TargetTransactionID. Get all the linked transactions  allocated to a particular ACCREC invoice

        :param target_transaction_id: The target_transaction_id of this LinkedTransaction.
        :type target_transaction_id: str
        """

        self._target_transaction_id = target_transaction_id

    @property
    def type(self):
        """Gets the type of this LinkedTransaction.

        This will always be BILLABLEEXPENSE. More types may be added in future.

        :return: The type of this LinkedTransaction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LinkedTransaction.

        This will always be BILLABLEEXPENSE. More types may be added in future.

        :param type: The type of this LinkedTransaction.
        :type type: str
        """
        allowed_values = ["BILLABLEEXPENSE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this LinkedTransaction.

        The last modified date in UTC format

        :return: The updated_date_utc of this LinkedTransaction.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this LinkedTransaction.

        The last modified date in UTC format

        :param updated_date_utc: The updated_date_utc of this LinkedTransaction.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc

    @property
    def validation_errors(self):
        """Gets the validation_errors of this LinkedTransaction.

        Displays array of validation error messages from the API

        :return: The validation_errors of this LinkedTransaction.
        :rtype: List[ValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this LinkedTransaction.

        Displays array of validation error messages from the API

        :param validation_errors: The validation_errors of this LinkedTransaction.
        :type validation_errors: List[ValidationError]
        """

        self._validation_errors = validation_errors
