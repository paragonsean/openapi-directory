# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_cell import ReportCell
from openapi_server.models.row_type import RowType
from openapi_server import util


class ReportRow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cells: List[ReportCell]=None, row_type: RowType=None, title: str=None):
        """ReportRow - a model defined in OpenAPI

        :param cells: The cells of this ReportRow.
        :param row_type: The row_type of this ReportRow.
        :param title: The title of this ReportRow.
        """
        self.openapi_types = {
            'cells': List[ReportCell],
            'row_type': RowType,
            'title': str
        }

        self.attribute_map = {
            'cells': 'Cells',
            'row_type': 'RowType',
            'title': 'Title'
        }

        self._cells = cells
        self._row_type = row_type
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportRow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportRow of this ReportRow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cells(self):
        """Gets the cells of this ReportRow.


        :return: The cells of this ReportRow.
        :rtype: List[ReportCell]
        """
        return self._cells

    @cells.setter
    def cells(self, cells):
        """Sets the cells of this ReportRow.


        :param cells: The cells of this ReportRow.
        :type cells: List[ReportCell]
        """

        self._cells = cells

    @property
    def row_type(self):
        """Gets the row_type of this ReportRow.


        :return: The row_type of this ReportRow.
        :rtype: RowType
        """
        return self._row_type

    @row_type.setter
    def row_type(self, row_type):
        """Sets the row_type of this ReportRow.


        :param row_type: The row_type of this ReportRow.
        :type row_type: RowType
        """

        self._row_type = row_type

    @property
    def title(self):
        """Gets the title of this ReportRow.


        :return: The title of this ReportRow.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ReportRow.


        :param title: The title of this ReportRow.
        :type title: str
        """

        self._title = title
