# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.journal_line import JournalLine
from openapi_server import util


class Journal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_date_utc: str=None, journal_date: str=None, journal_id: str=None, journal_lines: List[JournalLine]=None, journal_number: int=None, reference: str=None, source_id: str=None, source_type: str=None):
        """Journal - a model defined in OpenAPI

        :param created_date_utc: The created_date_utc of this Journal.
        :param journal_date: The journal_date of this Journal.
        :param journal_id: The journal_id of this Journal.
        :param journal_lines: The journal_lines of this Journal.
        :param journal_number: The journal_number of this Journal.
        :param reference: The reference of this Journal.
        :param source_id: The source_id of this Journal.
        :param source_type: The source_type of this Journal.
        """
        self.openapi_types = {
            'created_date_utc': str,
            'journal_date': str,
            'journal_id': str,
            'journal_lines': List[JournalLine],
            'journal_number': int,
            'reference': str,
            'source_id': str,
            'source_type': str
        }

        self.attribute_map = {
            'created_date_utc': 'CreatedDateUTC',
            'journal_date': 'JournalDate',
            'journal_id': 'JournalID',
            'journal_lines': 'JournalLines',
            'journal_number': 'JournalNumber',
            'reference': 'Reference',
            'source_id': 'SourceID',
            'source_type': 'SourceType'
        }

        self._created_date_utc = created_date_utc
        self._journal_date = journal_date
        self._journal_id = journal_id
        self._journal_lines = journal_lines
        self._journal_number = journal_number
        self._reference = reference
        self._source_id = source_id
        self._source_type = source_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Journal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Journal of this Journal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_date_utc(self):
        """Gets the created_date_utc of this Journal.

        Created date UTC format

        :return: The created_date_utc of this Journal.
        :rtype: str
        """
        return self._created_date_utc

    @created_date_utc.setter
    def created_date_utc(self, created_date_utc):
        """Sets the created_date_utc of this Journal.

        Created date UTC format

        :param created_date_utc: The created_date_utc of this Journal.
        :type created_date_utc: str
        """

        self._created_date_utc = created_date_utc

    @property
    def journal_date(self):
        """Gets the journal_date of this Journal.

        Date the journal was posted

        :return: The journal_date of this Journal.
        :rtype: str
        """
        return self._journal_date

    @journal_date.setter
    def journal_date(self, journal_date):
        """Sets the journal_date of this Journal.

        Date the journal was posted

        :param journal_date: The journal_date of this Journal.
        :type journal_date: str
        """

        self._journal_date = journal_date

    @property
    def journal_id(self):
        """Gets the journal_id of this Journal.

        Xero identifier

        :return: The journal_id of this Journal.
        :rtype: str
        """
        return self._journal_id

    @journal_id.setter
    def journal_id(self, journal_id):
        """Sets the journal_id of this Journal.

        Xero identifier

        :param journal_id: The journal_id of this Journal.
        :type journal_id: str
        """

        self._journal_id = journal_id

    @property
    def journal_lines(self):
        """Gets the journal_lines of this Journal.

        See JournalLines

        :return: The journal_lines of this Journal.
        :rtype: List[JournalLine]
        """
        return self._journal_lines

    @journal_lines.setter
    def journal_lines(self, journal_lines):
        """Sets the journal_lines of this Journal.

        See JournalLines

        :param journal_lines: The journal_lines of this Journal.
        :type journal_lines: List[JournalLine]
        """

        self._journal_lines = journal_lines

    @property
    def journal_number(self):
        """Gets the journal_number of this Journal.

        Xero generated journal number

        :return: The journal_number of this Journal.
        :rtype: int
        """
        return self._journal_number

    @journal_number.setter
    def journal_number(self, journal_number):
        """Sets the journal_number of this Journal.

        Xero generated journal number

        :param journal_number: The journal_number of this Journal.
        :type journal_number: int
        """

        self._journal_number = journal_number

    @property
    def reference(self):
        """Gets the reference of this Journal.

        reference field for additional indetifying information

        :return: The reference of this Journal.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Journal.

        reference field for additional indetifying information

        :param reference: The reference of this Journal.
        :type reference: str
        """

        self._reference = reference

    @property
    def source_id(self):
        """Gets the source_id of this Journal.

        The identifier for the source transaction (e.g. InvoiceID)

        :return: The source_id of this Journal.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Journal.

        The identifier for the source transaction (e.g. InvoiceID)

        :param source_id: The source_id of this Journal.
        :type source_id: str
        """

        self._source_id = source_id

    @property
    def source_type(self):
        """Gets the source_type of this Journal.

        The journal source type. The type of transaction that created the journal

        :return: The source_type of this Journal.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this Journal.

        The journal source type. The type of transaction that created the journal

        :param source_type: The source_type of this Journal.
        :type source_type: str
        """
        allowed_values = ["ACCREC", "ACCPAY", "ACCRECCREDIT", "ACCPAYCREDIT", "ACCRECPAYMENT", "ACCPAYPAYMENT", "ARCREDITPAYMENT", "APCREDITPAYMENT", "CASHREC", "CASHPAID", "TRANSFER", "ARPREPAYMENT", "APPREPAYMENT", "AROVERPAYMENT", "APOVERPAYMENT", "EXPCLAIM", "EXPPAYMENT", "MANJOURNAL", "PAYSLIP", "WAGEPAYABLE", "INTEGRATEDPAYROLLPE", "INTEGRATEDPAYROLLPT", "EXTERNALSPENDMONEY", "INTEGRATEDPAYROLLPTPAYMENT", "INTEGRATEDPAYROLLCN"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type
