# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_fields import ReportFields
from openapi_server.models.report_rows import ReportRows
from openapi_server import util


class ReportWithRow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: List[ReportFields]=None, report_date: str=None, report_id: str=None, report_name: str=None, report_title: str=None, report_titles: List[str]=None, report_type: str=None, rows: List[ReportRows]=None, updated_date_utc: str=None):
        """ReportWithRow - a model defined in OpenAPI

        :param fields: The fields of this ReportWithRow.
        :param report_date: The report_date of this ReportWithRow.
        :param report_id: The report_id of this ReportWithRow.
        :param report_name: The report_name of this ReportWithRow.
        :param report_title: The report_title of this ReportWithRow.
        :param report_titles: The report_titles of this ReportWithRow.
        :param report_type: The report_type of this ReportWithRow.
        :param rows: The rows of this ReportWithRow.
        :param updated_date_utc: The updated_date_utc of this ReportWithRow.
        """
        self.openapi_types = {
            'fields': List[ReportFields],
            'report_date': str,
            'report_id': str,
            'report_name': str,
            'report_title': str,
            'report_titles': List[str],
            'report_type': str,
            'rows': List[ReportRows],
            'updated_date_utc': str
        }

        self.attribute_map = {
            'fields': 'Fields',
            'report_date': 'ReportDate',
            'report_id': 'ReportID',
            'report_name': 'ReportName',
            'report_title': 'ReportTitle',
            'report_titles': 'ReportTitles',
            'report_type': 'ReportType',
            'rows': 'Rows',
            'updated_date_utc': 'UpdatedDateUTC'
        }

        self._fields = fields
        self._report_date = report_date
        self._report_id = report_id
        self._report_name = report_name
        self._report_title = report_title
        self._report_titles = report_titles
        self._report_type = report_type
        self._rows = rows
        self._updated_date_utc = updated_date_utc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportWithRow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportWithRow of this ReportWithRow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this ReportWithRow.


        :return: The fields of this ReportWithRow.
        :rtype: List[ReportFields]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this ReportWithRow.


        :param fields: The fields of this ReportWithRow.
        :type fields: List[ReportFields]
        """

        self._fields = fields

    @property
    def report_date(self):
        """Gets the report_date of this ReportWithRow.

        Date of report

        :return: The report_date of this ReportWithRow.
        :rtype: str
        """
        return self._report_date

    @report_date.setter
    def report_date(self, report_date):
        """Sets the report_date of this ReportWithRow.

        Date of report

        :param report_date: The report_date of this ReportWithRow.
        :type report_date: str
        """

        self._report_date = report_date

    @property
    def report_id(self):
        """Gets the report_id of this ReportWithRow.

        Report id

        :return: The report_id of this ReportWithRow.
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this ReportWithRow.

        Report id

        :param report_id: The report_id of this ReportWithRow.
        :type report_id: str
        """

        self._report_id = report_id

    @property
    def report_name(self):
        """Gets the report_name of this ReportWithRow.

        Name of the report

        :return: The report_name of this ReportWithRow.
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """Sets the report_name of this ReportWithRow.

        Name of the report

        :param report_name: The report_name of this ReportWithRow.
        :type report_name: str
        """

        self._report_name = report_name

    @property
    def report_title(self):
        """Gets the report_title of this ReportWithRow.

        Title of the report

        :return: The report_title of this ReportWithRow.
        :rtype: str
        """
        return self._report_title

    @report_title.setter
    def report_title(self, report_title):
        """Sets the report_title of this ReportWithRow.

        Title of the report

        :param report_title: The report_title of this ReportWithRow.
        :type report_title: str
        """

        self._report_title = report_title

    @property
    def report_titles(self):
        """Gets the report_titles of this ReportWithRow.

        Report titles array (3 to 4 strings with the report name, orgnisation name and time frame of report)

        :return: The report_titles of this ReportWithRow.
        :rtype: List[str]
        """
        return self._report_titles

    @report_titles.setter
    def report_titles(self, report_titles):
        """Sets the report_titles of this ReportWithRow.

        Report titles array (3 to 4 strings with the report name, orgnisation name and time frame of report)

        :param report_titles: The report_titles of this ReportWithRow.
        :type report_titles: List[str]
        """

        self._report_titles = report_titles

    @property
    def report_type(self):
        """Gets the report_type of this ReportWithRow.

        The type of report (BalanceSheet,ProfitLoss, etc)

        :return: The report_type of this ReportWithRow.
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this ReportWithRow.

        The type of report (BalanceSheet,ProfitLoss, etc)

        :param report_type: The report_type of this ReportWithRow.
        :type report_type: str
        """

        self._report_type = report_type

    @property
    def rows(self):
        """Gets the rows of this ReportWithRow.


        :return: The rows of this ReportWithRow.
        :rtype: List[ReportRows]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this ReportWithRow.


        :param rows: The rows of this ReportWithRow.
        :type rows: List[ReportRows]
        """

        self._rows = rows

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this ReportWithRow.

        Updated Date

        :return: The updated_date_utc of this ReportWithRow.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this ReportWithRow.

        Updated Date

        :param updated_date_utc: The updated_date_utc of this ReportWithRow.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc
