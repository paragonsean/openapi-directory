# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.purchase import Purchase
from openapi_server.models.validation_error import ValidationError
from openapi_server import util


class Item(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, description: str=None, inventory_asset_account_code: str=None, is_purchased: bool=None, is_sold: bool=None, is_tracked_as_inventory: bool=None, item_id: str=None, name: str=None, purchase_description: str=None, purchase_details: Purchase=None, quantity_on_hand: float=None, sales_details: Purchase=None, status_attribute_string: str=None, total_cost_pool: float=None, updated_date_utc: str=None, validation_errors: List[ValidationError]=None):
        """Item - a model defined in OpenAPI

        :param code: The code of this Item.
        :param description: The description of this Item.
        :param inventory_asset_account_code: The inventory_asset_account_code of this Item.
        :param is_purchased: The is_purchased of this Item.
        :param is_sold: The is_sold of this Item.
        :param is_tracked_as_inventory: The is_tracked_as_inventory of this Item.
        :param item_id: The item_id of this Item.
        :param name: The name of this Item.
        :param purchase_description: The purchase_description of this Item.
        :param purchase_details: The purchase_details of this Item.
        :param quantity_on_hand: The quantity_on_hand of this Item.
        :param sales_details: The sales_details of this Item.
        :param status_attribute_string: The status_attribute_string of this Item.
        :param total_cost_pool: The total_cost_pool of this Item.
        :param updated_date_utc: The updated_date_utc of this Item.
        :param validation_errors: The validation_errors of this Item.
        """
        self.openapi_types = {
            'code': str,
            'description': str,
            'inventory_asset_account_code': str,
            'is_purchased': bool,
            'is_sold': bool,
            'is_tracked_as_inventory': bool,
            'item_id': str,
            'name': str,
            'purchase_description': str,
            'purchase_details': Purchase,
            'quantity_on_hand': float,
            'sales_details': Purchase,
            'status_attribute_string': str,
            'total_cost_pool': float,
            'updated_date_utc': str,
            'validation_errors': List[ValidationError]
        }

        self.attribute_map = {
            'code': 'Code',
            'description': 'Description',
            'inventory_asset_account_code': 'InventoryAssetAccountCode',
            'is_purchased': 'IsPurchased',
            'is_sold': 'IsSold',
            'is_tracked_as_inventory': 'IsTrackedAsInventory',
            'item_id': 'ItemID',
            'name': 'Name',
            'purchase_description': 'PurchaseDescription',
            'purchase_details': 'PurchaseDetails',
            'quantity_on_hand': 'QuantityOnHand',
            'sales_details': 'SalesDetails',
            'status_attribute_string': 'StatusAttributeString',
            'total_cost_pool': 'TotalCostPool',
            'updated_date_utc': 'UpdatedDateUTC',
            'validation_errors': 'ValidationErrors'
        }

        self._code = code
        self._description = description
        self._inventory_asset_account_code = inventory_asset_account_code
        self._is_purchased = is_purchased
        self._is_sold = is_sold
        self._is_tracked_as_inventory = is_tracked_as_inventory
        self._item_id = item_id
        self._name = name
        self._purchase_description = purchase_description
        self._purchase_details = purchase_details
        self._quantity_on_hand = quantity_on_hand
        self._sales_details = sales_details
        self._status_attribute_string = status_attribute_string
        self._total_cost_pool = total_cost_pool
        self._updated_date_utc = updated_date_utc
        self._validation_errors = validation_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item of this Item.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Item.

        User defined item code (max length = 30)

        :return: The code of this Item.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Item.

        User defined item code (max length = 30)

        :param code: The code of this Item.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")
        if code is not None and len(code) > 30:
            raise ValueError("Invalid value for `code`, length must be less than or equal to `30`")

        self._code = code

    @property
    def description(self):
        """Gets the description of this Item.

        The sales description of the item (max length = 4000)

        :return: The description of this Item.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Item.

        The sales description of the item (max length = 4000)

        :param description: The description of this Item.
        :type description: str
        """
        if description is not None and len(description) > 4000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4000`")

        self._description = description

    @property
    def inventory_asset_account_code(self):
        """Gets the inventory_asset_account_code of this Item.

        The inventory asset account for the item. The account must be of type INVENTORY. The  COGSAccountCode in PurchaseDetails is also required to create a tracked item

        :return: The inventory_asset_account_code of this Item.
        :rtype: str
        """
        return self._inventory_asset_account_code

    @inventory_asset_account_code.setter
    def inventory_asset_account_code(self, inventory_asset_account_code):
        """Sets the inventory_asset_account_code of this Item.

        The inventory asset account for the item. The account must be of type INVENTORY. The  COGSAccountCode in PurchaseDetails is also required to create a tracked item

        :param inventory_asset_account_code: The inventory_asset_account_code of this Item.
        :type inventory_asset_account_code: str
        """

        self._inventory_asset_account_code = inventory_asset_account_code

    @property
    def is_purchased(self):
        """Gets the is_purchased of this Item.

        Boolean value, defaults to true. When IsPurchased is true the item is available for purchase transactions in the Xero UI. If IsPurchased is updated to false then PurchaseDescription and PurchaseDetails values will be nulled.

        :return: The is_purchased of this Item.
        :rtype: bool
        """
        return self._is_purchased

    @is_purchased.setter
    def is_purchased(self, is_purchased):
        """Sets the is_purchased of this Item.

        Boolean value, defaults to true. When IsPurchased is true the item is available for purchase transactions in the Xero UI. If IsPurchased is updated to false then PurchaseDescription and PurchaseDetails values will be nulled.

        :param is_purchased: The is_purchased of this Item.
        :type is_purchased: bool
        """

        self._is_purchased = is_purchased

    @property
    def is_sold(self):
        """Gets the is_sold of this Item.

        Boolean value, defaults to true. When IsSold is true the item will be available on sales transactions in the Xero UI. If IsSold is updated to false then Description and SalesDetails values will be nulled.

        :return: The is_sold of this Item.
        :rtype: bool
        """
        return self._is_sold

    @is_sold.setter
    def is_sold(self, is_sold):
        """Sets the is_sold of this Item.

        Boolean value, defaults to true. When IsSold is true the item will be available on sales transactions in the Xero UI. If IsSold is updated to false then Description and SalesDetails values will be nulled.

        :param is_sold: The is_sold of this Item.
        :type is_sold: bool
        """

        self._is_sold = is_sold

    @property
    def is_tracked_as_inventory(self):
        """Gets the is_tracked_as_inventory of this Item.

        True for items that are tracked as inventory. An item will be tracked as inventory if the InventoryAssetAccountCode and COGSAccountCode are set.

        :return: The is_tracked_as_inventory of this Item.
        :rtype: bool
        """
        return self._is_tracked_as_inventory

    @is_tracked_as_inventory.setter
    def is_tracked_as_inventory(self, is_tracked_as_inventory):
        """Sets the is_tracked_as_inventory of this Item.

        True for items that are tracked as inventory. An item will be tracked as inventory if the InventoryAssetAccountCode and COGSAccountCode are set.

        :param is_tracked_as_inventory: The is_tracked_as_inventory of this Item.
        :type is_tracked_as_inventory: bool
        """

        self._is_tracked_as_inventory = is_tracked_as_inventory

    @property
    def item_id(self):
        """Gets the item_id of this Item.

        The Xero identifier for an Item

        :return: The item_id of this Item.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Item.

        The Xero identifier for an Item

        :param item_id: The item_id of this Item.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def name(self):
        """Gets the name of this Item.

        The name of the item (max length = 50)

        :return: The name of this Item.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Item.

        The name of the item (max length = 50)

        :param name: The name of this Item.
        :type name: str
        """
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")

        self._name = name

    @property
    def purchase_description(self):
        """Gets the purchase_description of this Item.

        The purchase description of the item (max length = 4000)

        :return: The purchase_description of this Item.
        :rtype: str
        """
        return self._purchase_description

    @purchase_description.setter
    def purchase_description(self, purchase_description):
        """Sets the purchase_description of this Item.

        The purchase description of the item (max length = 4000)

        :param purchase_description: The purchase_description of this Item.
        :type purchase_description: str
        """
        if purchase_description is not None and len(purchase_description) > 4000:
            raise ValueError("Invalid value for `purchase_description`, length must be less than or equal to `4000`")

        self._purchase_description = purchase_description

    @property
    def purchase_details(self):
        """Gets the purchase_details of this Item.


        :return: The purchase_details of this Item.
        :rtype: Purchase
        """
        return self._purchase_details

    @purchase_details.setter
    def purchase_details(self, purchase_details):
        """Sets the purchase_details of this Item.


        :param purchase_details: The purchase_details of this Item.
        :type purchase_details: Purchase
        """

        self._purchase_details = purchase_details

    @property
    def quantity_on_hand(self):
        """Gets the quantity_on_hand of this Item.

        The quantity of the item on hand

        :return: The quantity_on_hand of this Item.
        :rtype: float
        """
        return self._quantity_on_hand

    @quantity_on_hand.setter
    def quantity_on_hand(self, quantity_on_hand):
        """Sets the quantity_on_hand of this Item.

        The quantity of the item on hand

        :param quantity_on_hand: The quantity_on_hand of this Item.
        :type quantity_on_hand: float
        """

        self._quantity_on_hand = quantity_on_hand

    @property
    def sales_details(self):
        """Gets the sales_details of this Item.


        :return: The sales_details of this Item.
        :rtype: Purchase
        """
        return self._sales_details

    @sales_details.setter
    def sales_details(self, sales_details):
        """Sets the sales_details of this Item.


        :param sales_details: The sales_details of this Item.
        :type sales_details: Purchase
        """

        self._sales_details = sales_details

    @property
    def status_attribute_string(self):
        """Gets the status_attribute_string of this Item.

        Status of object

        :return: The status_attribute_string of this Item.
        :rtype: str
        """
        return self._status_attribute_string

    @status_attribute_string.setter
    def status_attribute_string(self, status_attribute_string):
        """Sets the status_attribute_string of this Item.

        Status of object

        :param status_attribute_string: The status_attribute_string of this Item.
        :type status_attribute_string: str
        """

        self._status_attribute_string = status_attribute_string

    @property
    def total_cost_pool(self):
        """Gets the total_cost_pool of this Item.

        The value of the item on hand. Calculated using average cost accounting.

        :return: The total_cost_pool of this Item.
        :rtype: float
        """
        return self._total_cost_pool

    @total_cost_pool.setter
    def total_cost_pool(self, total_cost_pool):
        """Sets the total_cost_pool of this Item.

        The value of the item on hand. Calculated using average cost accounting.

        :param total_cost_pool: The total_cost_pool of this Item.
        :type total_cost_pool: float
        """

        self._total_cost_pool = total_cost_pool

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this Item.

        Last modified date in UTC format

        :return: The updated_date_utc of this Item.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this Item.

        Last modified date in UTC format

        :param updated_date_utc: The updated_date_utc of this Item.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc

    @property
    def validation_errors(self):
        """Gets the validation_errors of this Item.

        Displays array of validation error messages from the API

        :return: The validation_errors of this Item.
        :rtype: List[ValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this Item.

        Displays array of validation error messages from the API

        :param validation_errors: The validation_errors of this Item.
        :type validation_errors: List[ValidationError]
        """

        self._validation_errors = validation_errors
