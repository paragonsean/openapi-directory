/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpenseClaim.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpenseClaim::OAIExpenseClaim(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpenseClaim::OAIExpenseClaim() {
    this->initializeModel();
}

OAIExpenseClaim::~OAIExpenseClaim() {}

void OAIExpenseClaim::initializeModel() {

    m_amount_due_isSet = false;
    m_amount_due_isValid = false;

    m_amount_paid_isSet = false;
    m_amount_paid_isValid = false;

    m_expense_claim_id_isSet = false;
    m_expense_claim_id_isValid = false;

    m_payment_due_date_isSet = false;
    m_payment_due_date_isValid = false;

    m_payments_isSet = false;
    m_payments_isValid = false;

    m_receipt_id_isSet = false;
    m_receipt_id_isValid = false;

    m_receipts_isSet = false;
    m_receipts_isValid = false;

    m_reporting_date_isSet = false;
    m_reporting_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIExpenseClaim::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpenseClaim::fromJsonObject(QJsonObject json) {

    m_amount_due_isValid = ::OpenAPI::fromJsonValue(m_amount_due, json[QString("AmountDue")]);
    m_amount_due_isSet = !json[QString("AmountDue")].isNull() && m_amount_due_isValid;

    m_amount_paid_isValid = ::OpenAPI::fromJsonValue(m_amount_paid, json[QString("AmountPaid")]);
    m_amount_paid_isSet = !json[QString("AmountPaid")].isNull() && m_amount_paid_isValid;

    m_expense_claim_id_isValid = ::OpenAPI::fromJsonValue(m_expense_claim_id, json[QString("ExpenseClaimID")]);
    m_expense_claim_id_isSet = !json[QString("ExpenseClaimID")].isNull() && m_expense_claim_id_isValid;

    m_payment_due_date_isValid = ::OpenAPI::fromJsonValue(m_payment_due_date, json[QString("PaymentDueDate")]);
    m_payment_due_date_isSet = !json[QString("PaymentDueDate")].isNull() && m_payment_due_date_isValid;

    m_payments_isValid = ::OpenAPI::fromJsonValue(m_payments, json[QString("Payments")]);
    m_payments_isSet = !json[QString("Payments")].isNull() && m_payments_isValid;

    m_receipt_id_isValid = ::OpenAPI::fromJsonValue(m_receipt_id, json[QString("ReceiptID")]);
    m_receipt_id_isSet = !json[QString("ReceiptID")].isNull() && m_receipt_id_isValid;

    m_receipts_isValid = ::OpenAPI::fromJsonValue(m_receipts, json[QString("Receipts")]);
    m_receipts_isSet = !json[QString("Receipts")].isNull() && m_receipts_isValid;

    m_reporting_date_isValid = ::OpenAPI::fromJsonValue(m_reporting_date, json[QString("ReportingDate")]);
    m_reporting_date_isSet = !json[QString("ReportingDate")].isNull() && m_reporting_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;
}

QString OAIExpenseClaim::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpenseClaim::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_due_isSet) {
        obj.insert(QString("AmountDue"), ::OpenAPI::toJsonValue(m_amount_due));
    }
    if (m_amount_paid_isSet) {
        obj.insert(QString("AmountPaid"), ::OpenAPI::toJsonValue(m_amount_paid));
    }
    if (m_expense_claim_id_isSet) {
        obj.insert(QString("ExpenseClaimID"), ::OpenAPI::toJsonValue(m_expense_claim_id));
    }
    if (m_payment_due_date_isSet) {
        obj.insert(QString("PaymentDueDate"), ::OpenAPI::toJsonValue(m_payment_due_date));
    }
    if (m_payments.size() > 0) {
        obj.insert(QString("Payments"), ::OpenAPI::toJsonValue(m_payments));
    }
    if (m_receipt_id_isSet) {
        obj.insert(QString("ReceiptID"), ::OpenAPI::toJsonValue(m_receipt_id));
    }
    if (m_receipts.size() > 0) {
        obj.insert(QString("Receipts"), ::OpenAPI::toJsonValue(m_receipts));
    }
    if (m_reporting_date_isSet) {
        obj.insert(QString("ReportingDate"), ::OpenAPI::toJsonValue(m_reporting_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_isSet) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_user.isSet()) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

double OAIExpenseClaim::getAmountDue() const {
    return m_amount_due;
}
void OAIExpenseClaim::setAmountDue(const double &amount_due) {
    m_amount_due = amount_due;
    m_amount_due_isSet = true;
}

bool OAIExpenseClaim::is_amount_due_Set() const{
    return m_amount_due_isSet;
}

bool OAIExpenseClaim::is_amount_due_Valid() const{
    return m_amount_due_isValid;
}

double OAIExpenseClaim::getAmountPaid() const {
    return m_amount_paid;
}
void OAIExpenseClaim::setAmountPaid(const double &amount_paid) {
    m_amount_paid = amount_paid;
    m_amount_paid_isSet = true;
}

bool OAIExpenseClaim::is_amount_paid_Set() const{
    return m_amount_paid_isSet;
}

bool OAIExpenseClaim::is_amount_paid_Valid() const{
    return m_amount_paid_isValid;
}

QString OAIExpenseClaim::getExpenseClaimId() const {
    return m_expense_claim_id;
}
void OAIExpenseClaim::setExpenseClaimId(const QString &expense_claim_id) {
    m_expense_claim_id = expense_claim_id;
    m_expense_claim_id_isSet = true;
}

bool OAIExpenseClaim::is_expense_claim_id_Set() const{
    return m_expense_claim_id_isSet;
}

bool OAIExpenseClaim::is_expense_claim_id_Valid() const{
    return m_expense_claim_id_isValid;
}

QString OAIExpenseClaim::getPaymentDueDate() const {
    return m_payment_due_date;
}
void OAIExpenseClaim::setPaymentDueDate(const QString &payment_due_date) {
    m_payment_due_date = payment_due_date;
    m_payment_due_date_isSet = true;
}

bool OAIExpenseClaim::is_payment_due_date_Set() const{
    return m_payment_due_date_isSet;
}

bool OAIExpenseClaim::is_payment_due_date_Valid() const{
    return m_payment_due_date_isValid;
}

QList<OAIPayment> OAIExpenseClaim::getPayments() const {
    return m_payments;
}
void OAIExpenseClaim::setPayments(const QList<OAIPayment> &payments) {
    m_payments = payments;
    m_payments_isSet = true;
}

bool OAIExpenseClaim::is_payments_Set() const{
    return m_payments_isSet;
}

bool OAIExpenseClaim::is_payments_Valid() const{
    return m_payments_isValid;
}

QString OAIExpenseClaim::getReceiptId() const {
    return m_receipt_id;
}
void OAIExpenseClaim::setReceiptId(const QString &receipt_id) {
    m_receipt_id = receipt_id;
    m_receipt_id_isSet = true;
}

bool OAIExpenseClaim::is_receipt_id_Set() const{
    return m_receipt_id_isSet;
}

bool OAIExpenseClaim::is_receipt_id_Valid() const{
    return m_receipt_id_isValid;
}

QList<OAIReceipt> OAIExpenseClaim::getReceipts() const {
    return m_receipts;
}
void OAIExpenseClaim::setReceipts(const QList<OAIReceipt> &receipts) {
    m_receipts = receipts;
    m_receipts_isSet = true;
}

bool OAIExpenseClaim::is_receipts_Set() const{
    return m_receipts_isSet;
}

bool OAIExpenseClaim::is_receipts_Valid() const{
    return m_receipts_isValid;
}

QString OAIExpenseClaim::getReportingDate() const {
    return m_reporting_date;
}
void OAIExpenseClaim::setReportingDate(const QString &reporting_date) {
    m_reporting_date = reporting_date;
    m_reporting_date_isSet = true;
}

bool OAIExpenseClaim::is_reporting_date_Set() const{
    return m_reporting_date_isSet;
}

bool OAIExpenseClaim::is_reporting_date_Valid() const{
    return m_reporting_date_isValid;
}

QString OAIExpenseClaim::getStatus() const {
    return m_status;
}
void OAIExpenseClaim::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIExpenseClaim::is_status_Set() const{
    return m_status_isSet;
}

bool OAIExpenseClaim::is_status_Valid() const{
    return m_status_isValid;
}

double OAIExpenseClaim::getTotal() const {
    return m_total;
}
void OAIExpenseClaim::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIExpenseClaim::is_total_Set() const{
    return m_total_isSet;
}

bool OAIExpenseClaim::is_total_Valid() const{
    return m_total_isValid;
}

QString OAIExpenseClaim::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIExpenseClaim::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIExpenseClaim::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIExpenseClaim::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

OAIUser OAIExpenseClaim::getUser() const {
    return m_user;
}
void OAIExpenseClaim::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIExpenseClaim::is_user_Set() const{
    return m_user_isSet;
}

bool OAIExpenseClaim::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIExpenseClaim::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_due_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_claim_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpenseClaim::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
