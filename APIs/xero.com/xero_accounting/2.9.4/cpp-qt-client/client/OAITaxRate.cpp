/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaxRate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaxRate::OAITaxRate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaxRate::OAITaxRate() {
    this->initializeModel();
}

OAITaxRate::~OAITaxRate() {}

void OAITaxRate::initializeModel() {

    m_can_apply_to_assets_isSet = false;
    m_can_apply_to_assets_isValid = false;

    m_can_apply_to_equity_isSet = false;
    m_can_apply_to_equity_isValid = false;

    m_can_apply_to_expenses_isSet = false;
    m_can_apply_to_expenses_isValid = false;

    m_can_apply_to_liabilities_isSet = false;
    m_can_apply_to_liabilities_isValid = false;

    m_can_apply_to_revenue_isSet = false;
    m_can_apply_to_revenue_isValid = false;

    m_display_tax_rate_isSet = false;
    m_display_tax_rate_isValid = false;

    m_effective_rate_isSet = false;
    m_effective_rate_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_report_tax_type_isSet = false;
    m_report_tax_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tax_components_isSet = false;
    m_tax_components_isValid = false;

    m_tax_type_isSet = false;
    m_tax_type_isValid = false;
}

void OAITaxRate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaxRate::fromJsonObject(QJsonObject json) {

    m_can_apply_to_assets_isValid = ::OpenAPI::fromJsonValue(m_can_apply_to_assets, json[QString("CanApplyToAssets")]);
    m_can_apply_to_assets_isSet = !json[QString("CanApplyToAssets")].isNull() && m_can_apply_to_assets_isValid;

    m_can_apply_to_equity_isValid = ::OpenAPI::fromJsonValue(m_can_apply_to_equity, json[QString("CanApplyToEquity")]);
    m_can_apply_to_equity_isSet = !json[QString("CanApplyToEquity")].isNull() && m_can_apply_to_equity_isValid;

    m_can_apply_to_expenses_isValid = ::OpenAPI::fromJsonValue(m_can_apply_to_expenses, json[QString("CanApplyToExpenses")]);
    m_can_apply_to_expenses_isSet = !json[QString("CanApplyToExpenses")].isNull() && m_can_apply_to_expenses_isValid;

    m_can_apply_to_liabilities_isValid = ::OpenAPI::fromJsonValue(m_can_apply_to_liabilities, json[QString("CanApplyToLiabilities")]);
    m_can_apply_to_liabilities_isSet = !json[QString("CanApplyToLiabilities")].isNull() && m_can_apply_to_liabilities_isValid;

    m_can_apply_to_revenue_isValid = ::OpenAPI::fromJsonValue(m_can_apply_to_revenue, json[QString("CanApplyToRevenue")]);
    m_can_apply_to_revenue_isSet = !json[QString("CanApplyToRevenue")].isNull() && m_can_apply_to_revenue_isValid;

    m_display_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_display_tax_rate, json[QString("DisplayTaxRate")]);
    m_display_tax_rate_isSet = !json[QString("DisplayTaxRate")].isNull() && m_display_tax_rate_isValid;

    m_effective_rate_isValid = ::OpenAPI::fromJsonValue(m_effective_rate, json[QString("EffectiveRate")]);
    m_effective_rate_isSet = !json[QString("EffectiveRate")].isNull() && m_effective_rate_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_report_tax_type_isValid = ::OpenAPI::fromJsonValue(m_report_tax_type, json[QString("ReportTaxType")]);
    m_report_tax_type_isSet = !json[QString("ReportTaxType")].isNull() && m_report_tax_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_tax_components_isValid = ::OpenAPI::fromJsonValue(m_tax_components, json[QString("TaxComponents")]);
    m_tax_components_isSet = !json[QString("TaxComponents")].isNull() && m_tax_components_isValid;

    m_tax_type_isValid = ::OpenAPI::fromJsonValue(m_tax_type, json[QString("TaxType")]);
    m_tax_type_isSet = !json[QString("TaxType")].isNull() && m_tax_type_isValid;
}

QString OAITaxRate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaxRate::asJsonObject() const {
    QJsonObject obj;
    if (m_can_apply_to_assets_isSet) {
        obj.insert(QString("CanApplyToAssets"), ::OpenAPI::toJsonValue(m_can_apply_to_assets));
    }
    if (m_can_apply_to_equity_isSet) {
        obj.insert(QString("CanApplyToEquity"), ::OpenAPI::toJsonValue(m_can_apply_to_equity));
    }
    if (m_can_apply_to_expenses_isSet) {
        obj.insert(QString("CanApplyToExpenses"), ::OpenAPI::toJsonValue(m_can_apply_to_expenses));
    }
    if (m_can_apply_to_liabilities_isSet) {
        obj.insert(QString("CanApplyToLiabilities"), ::OpenAPI::toJsonValue(m_can_apply_to_liabilities));
    }
    if (m_can_apply_to_revenue_isSet) {
        obj.insert(QString("CanApplyToRevenue"), ::OpenAPI::toJsonValue(m_can_apply_to_revenue));
    }
    if (m_display_tax_rate_isSet) {
        obj.insert(QString("DisplayTaxRate"), ::OpenAPI::toJsonValue(m_display_tax_rate));
    }
    if (m_effective_rate_isSet) {
        obj.insert(QString("EffectiveRate"), ::OpenAPI::toJsonValue(m_effective_rate));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_report_tax_type_isSet) {
        obj.insert(QString("ReportTaxType"), ::OpenAPI::toJsonValue(m_report_tax_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tax_components.size() > 0) {
        obj.insert(QString("TaxComponents"), ::OpenAPI::toJsonValue(m_tax_components));
    }
    if (m_tax_type_isSet) {
        obj.insert(QString("TaxType"), ::OpenAPI::toJsonValue(m_tax_type));
    }
    return obj;
}

bool OAITaxRate::isCanApplyToAssets() const {
    return m_can_apply_to_assets;
}
void OAITaxRate::setCanApplyToAssets(const bool &can_apply_to_assets) {
    m_can_apply_to_assets = can_apply_to_assets;
    m_can_apply_to_assets_isSet = true;
}

bool OAITaxRate::is_can_apply_to_assets_Set() const{
    return m_can_apply_to_assets_isSet;
}

bool OAITaxRate::is_can_apply_to_assets_Valid() const{
    return m_can_apply_to_assets_isValid;
}

bool OAITaxRate::isCanApplyToEquity() const {
    return m_can_apply_to_equity;
}
void OAITaxRate::setCanApplyToEquity(const bool &can_apply_to_equity) {
    m_can_apply_to_equity = can_apply_to_equity;
    m_can_apply_to_equity_isSet = true;
}

bool OAITaxRate::is_can_apply_to_equity_Set() const{
    return m_can_apply_to_equity_isSet;
}

bool OAITaxRate::is_can_apply_to_equity_Valid() const{
    return m_can_apply_to_equity_isValid;
}

bool OAITaxRate::isCanApplyToExpenses() const {
    return m_can_apply_to_expenses;
}
void OAITaxRate::setCanApplyToExpenses(const bool &can_apply_to_expenses) {
    m_can_apply_to_expenses = can_apply_to_expenses;
    m_can_apply_to_expenses_isSet = true;
}

bool OAITaxRate::is_can_apply_to_expenses_Set() const{
    return m_can_apply_to_expenses_isSet;
}

bool OAITaxRate::is_can_apply_to_expenses_Valid() const{
    return m_can_apply_to_expenses_isValid;
}

bool OAITaxRate::isCanApplyToLiabilities() const {
    return m_can_apply_to_liabilities;
}
void OAITaxRate::setCanApplyToLiabilities(const bool &can_apply_to_liabilities) {
    m_can_apply_to_liabilities = can_apply_to_liabilities;
    m_can_apply_to_liabilities_isSet = true;
}

bool OAITaxRate::is_can_apply_to_liabilities_Set() const{
    return m_can_apply_to_liabilities_isSet;
}

bool OAITaxRate::is_can_apply_to_liabilities_Valid() const{
    return m_can_apply_to_liabilities_isValid;
}

bool OAITaxRate::isCanApplyToRevenue() const {
    return m_can_apply_to_revenue;
}
void OAITaxRate::setCanApplyToRevenue(const bool &can_apply_to_revenue) {
    m_can_apply_to_revenue = can_apply_to_revenue;
    m_can_apply_to_revenue_isSet = true;
}

bool OAITaxRate::is_can_apply_to_revenue_Set() const{
    return m_can_apply_to_revenue_isSet;
}

bool OAITaxRate::is_can_apply_to_revenue_Valid() const{
    return m_can_apply_to_revenue_isValid;
}

double OAITaxRate::getDisplayTaxRate() const {
    return m_display_tax_rate;
}
void OAITaxRate::setDisplayTaxRate(const double &display_tax_rate) {
    m_display_tax_rate = display_tax_rate;
    m_display_tax_rate_isSet = true;
}

bool OAITaxRate::is_display_tax_rate_Set() const{
    return m_display_tax_rate_isSet;
}

bool OAITaxRate::is_display_tax_rate_Valid() const{
    return m_display_tax_rate_isValid;
}

double OAITaxRate::getEffectiveRate() const {
    return m_effective_rate;
}
void OAITaxRate::setEffectiveRate(const double &effective_rate) {
    m_effective_rate = effective_rate;
    m_effective_rate_isSet = true;
}

bool OAITaxRate::is_effective_rate_Set() const{
    return m_effective_rate_isSet;
}

bool OAITaxRate::is_effective_rate_Valid() const{
    return m_effective_rate_isValid;
}

QString OAITaxRate::getName() const {
    return m_name;
}
void OAITaxRate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITaxRate::is_name_Set() const{
    return m_name_isSet;
}

bool OAITaxRate::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITaxRate::getReportTaxType() const {
    return m_report_tax_type;
}
void OAITaxRate::setReportTaxType(const QString &report_tax_type) {
    m_report_tax_type = report_tax_type;
    m_report_tax_type_isSet = true;
}

bool OAITaxRate::is_report_tax_type_Set() const{
    return m_report_tax_type_isSet;
}

bool OAITaxRate::is_report_tax_type_Valid() const{
    return m_report_tax_type_isValid;
}

QString OAITaxRate::getStatus() const {
    return m_status;
}
void OAITaxRate::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITaxRate::is_status_Set() const{
    return m_status_isSet;
}

bool OAITaxRate::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAITaxComponent> OAITaxRate::getTaxComponents() const {
    return m_tax_components;
}
void OAITaxRate::setTaxComponents(const QList<OAITaxComponent> &tax_components) {
    m_tax_components = tax_components;
    m_tax_components_isSet = true;
}

bool OAITaxRate::is_tax_components_Set() const{
    return m_tax_components_isSet;
}

bool OAITaxRate::is_tax_components_Valid() const{
    return m_tax_components_isValid;
}

QString OAITaxRate::getTaxType() const {
    return m_tax_type;
}
void OAITaxRate::setTaxType(const QString &tax_type) {
    m_tax_type = tax_type;
    m_tax_type_isSet = true;
}

bool OAITaxRate::is_tax_type_Set() const{
    return m_tax_type_isSet;
}

bool OAITaxRate::is_tax_type_Valid() const{
    return m_tax_type_isValid;
}

bool OAITaxRate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_apply_to_assets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_apply_to_equity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_apply_to_expenses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_apply_to_liabilities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_apply_to_revenue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_tax_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_tax_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_components.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaxRate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
