/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaxComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaxComponent::OAITaxComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaxComponent::OAITaxComponent() {
    this->initializeModel();
}

OAITaxComponent::~OAITaxComponent() {}

void OAITaxComponent::initializeModel() {

    m_is_compound_isSet = false;
    m_is_compound_isValid = false;

    m_is_non_recoverable_isSet = false;
    m_is_non_recoverable_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;
}

void OAITaxComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaxComponent::fromJsonObject(QJsonObject json) {

    m_is_compound_isValid = ::OpenAPI::fromJsonValue(m_is_compound, json[QString("IsCompound")]);
    m_is_compound_isSet = !json[QString("IsCompound")].isNull() && m_is_compound_isValid;

    m_is_non_recoverable_isValid = ::OpenAPI::fromJsonValue(m_is_non_recoverable, json[QString("IsNonRecoverable")]);
    m_is_non_recoverable_isSet = !json[QString("IsNonRecoverable")].isNull() && m_is_non_recoverable_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("Rate")]);
    m_rate_isSet = !json[QString("Rate")].isNull() && m_rate_isValid;
}

QString OAITaxComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaxComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_is_compound_isSet) {
        obj.insert(QString("IsCompound"), ::OpenAPI::toJsonValue(m_is_compound));
    }
    if (m_is_non_recoverable_isSet) {
        obj.insert(QString("IsNonRecoverable"), ::OpenAPI::toJsonValue(m_is_non_recoverable));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rate_isSet) {
        obj.insert(QString("Rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    return obj;
}

bool OAITaxComponent::isIsCompound() const {
    return m_is_compound;
}
void OAITaxComponent::setIsCompound(const bool &is_compound) {
    m_is_compound = is_compound;
    m_is_compound_isSet = true;
}

bool OAITaxComponent::is_is_compound_Set() const{
    return m_is_compound_isSet;
}

bool OAITaxComponent::is_is_compound_Valid() const{
    return m_is_compound_isValid;
}

bool OAITaxComponent::isIsNonRecoverable() const {
    return m_is_non_recoverable;
}
void OAITaxComponent::setIsNonRecoverable(const bool &is_non_recoverable) {
    m_is_non_recoverable = is_non_recoverable;
    m_is_non_recoverable_isSet = true;
}

bool OAITaxComponent::is_is_non_recoverable_Set() const{
    return m_is_non_recoverable_isSet;
}

bool OAITaxComponent::is_is_non_recoverable_Valid() const{
    return m_is_non_recoverable_isValid;
}

QString OAITaxComponent::getName() const {
    return m_name;
}
void OAITaxComponent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITaxComponent::is_name_Set() const{
    return m_name_isSet;
}

bool OAITaxComponent::is_name_Valid() const{
    return m_name_isValid;
}

double OAITaxComponent::getRate() const {
    return m_rate;
}
void OAITaxComponent::setRate(const double &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAITaxComponent::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAITaxComponent::is_rate_Valid() const{
    return m_rate_isValid;
}

bool OAITaxComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_compound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_non_recoverable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaxComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
