/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrackingCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrackingCategory::OAITrackingCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrackingCategory::OAITrackingCategory() {
    this->initializeModel();
}

OAITrackingCategory::~OAITrackingCategory() {}

void OAITrackingCategory::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_option_isSet = false;
    m_option_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tracking_category_id_isSet = false;
    m_tracking_category_id_isValid = false;

    m_tracking_option_id_isSet = false;
    m_tracking_option_id_isValid = false;
}

void OAITrackingCategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrackingCategory::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_option_isValid = ::OpenAPI::fromJsonValue(m_option, json[QString("Option")]);
    m_option_isSet = !json[QString("Option")].isNull() && m_option_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("Options")]);
    m_options_isSet = !json[QString("Options")].isNull() && m_options_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_tracking_category_id_isValid = ::OpenAPI::fromJsonValue(m_tracking_category_id, json[QString("TrackingCategoryID")]);
    m_tracking_category_id_isSet = !json[QString("TrackingCategoryID")].isNull() && m_tracking_category_id_isValid;

    m_tracking_option_id_isValid = ::OpenAPI::fromJsonValue(m_tracking_option_id, json[QString("TrackingOptionID")]);
    m_tracking_option_id_isSet = !json[QString("TrackingOptionID")].isNull() && m_tracking_option_id_isValid;
}

QString OAITrackingCategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrackingCategory::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_option_isSet) {
        obj.insert(QString("Option"), ::OpenAPI::toJsonValue(m_option));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("Options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tracking_category_id_isSet) {
        obj.insert(QString("TrackingCategoryID"), ::OpenAPI::toJsonValue(m_tracking_category_id));
    }
    if (m_tracking_option_id_isSet) {
        obj.insert(QString("TrackingOptionID"), ::OpenAPI::toJsonValue(m_tracking_option_id));
    }
    return obj;
}

QString OAITrackingCategory::getName() const {
    return m_name;
}
void OAITrackingCategory::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITrackingCategory::is_name_Set() const{
    return m_name_isSet;
}

bool OAITrackingCategory::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITrackingCategory::getOption() const {
    return m_option;
}
void OAITrackingCategory::setOption(const QString &option) {
    m_option = option;
    m_option_isSet = true;
}

bool OAITrackingCategory::is_option_Set() const{
    return m_option_isSet;
}

bool OAITrackingCategory::is_option_Valid() const{
    return m_option_isValid;
}

QList<OAITrackingOption> OAITrackingCategory::getOptions() const {
    return m_options;
}
void OAITrackingCategory::setOptions(const QList<OAITrackingOption> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAITrackingCategory::is_options_Set() const{
    return m_options_isSet;
}

bool OAITrackingCategory::is_options_Valid() const{
    return m_options_isValid;
}

QString OAITrackingCategory::getStatus() const {
    return m_status;
}
void OAITrackingCategory::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITrackingCategory::is_status_Set() const{
    return m_status_isSet;
}

bool OAITrackingCategory::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITrackingCategory::getTrackingCategoryId() const {
    return m_tracking_category_id;
}
void OAITrackingCategory::setTrackingCategoryId(const QString &tracking_category_id) {
    m_tracking_category_id = tracking_category_id;
    m_tracking_category_id_isSet = true;
}

bool OAITrackingCategory::is_tracking_category_id_Set() const{
    return m_tracking_category_id_isSet;
}

bool OAITrackingCategory::is_tracking_category_id_Valid() const{
    return m_tracking_category_id_isValid;
}

QString OAITrackingCategory::getTrackingOptionId() const {
    return m_tracking_option_id;
}
void OAITrackingCategory::setTrackingOptionId(const QString &tracking_option_id) {
    m_tracking_option_id = tracking_option_id;
    m_tracking_option_id_isSet = true;
}

bool OAITrackingCategory::is_tracking_option_id_Set() const{
    return m_tracking_option_id_isSet;
}

bool OAITrackingCategory::is_tracking_option_id_Valid() const{
    return m_tracking_option_id_isValid;
}

bool OAITrackingCategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_option_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrackingCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
