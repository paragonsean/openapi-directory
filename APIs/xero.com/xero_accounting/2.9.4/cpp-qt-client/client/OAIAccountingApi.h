/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountingApi_H
#define OAI_OAIAccountingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccount.h"
#include "OAIAccounts.h"
#include "OAIActions.h"
#include "OAIAllocations.h"
#include "OAIAttachments.h"
#include "OAIBankTransactions.h"
#include "OAIBankTransfers.h"
#include "OAIBatchPayments.h"
#include "OAIBrandingThemes.h"
#include "OAICISOrgSettings.h"
#include "OAICISSettings.h"
#include "OAIContactGroups.h"
#include "OAIContacts.h"
#include "OAICreditNotes.h"
#include "OAICurrencies.h"
#include "OAICurrency.h"
#include "OAIEmployees.h"
#include "OAIError.h"
#include "OAIExpenseClaims.h"
#include "OAIHistoryRecords.h"
#include "OAIHttpFileElement.h"
#include "OAIImportSummaryObject.h"
#include "OAIInvoiceReminders.h"
#include "OAIInvoices.h"
#include "OAIItems.h"
#include "OAIJournals.h"
#include "OAILinkedTransaction.h"
#include "OAILinkedTransactions.h"
#include "OAIManualJournals.h"
#include "OAIOnlineInvoices.h"
#include "OAIOrganisations.h"
#include "OAIOverpayments.h"
#include "OAIPayment.h"
#include "OAIPaymentDelete.h"
#include "OAIPaymentService.h"
#include "OAIPaymentServices.h"
#include "OAIPayments.h"
#include "OAIPrepayments.h"
#include "OAIPurchaseOrders.h"
#include "OAIQuotes.h"
#include "OAIReceipts.h"
#include "OAIRepeatingInvoices.h"
#include "OAIReportWithRows.h"
#include "OAIReports.h"
#include "OAIRequestEmpty.h"
#include "OAISetup.h"
#include "OAITaxRates.h"
#include "OAITrackingCategories.h"
#include "OAITrackingCategory.h"
#include "OAITrackingOption.h"
#include "OAITrackingOptions.h"
#include "OAIUsers.h"
#include <QByteArray>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountingApi : public QObject {
    Q_OBJECT

public:
    OAIAccountingApi(const int timeOut = 0);
    ~OAIAccountingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_account OAIAccount [required]
    */
    virtual void createAccount(const QString &xero_tenant_id, const OAIAccount &oai_account);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  account_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void createAccountAttachmentByFileName(const QString &xero_tenant_id, const QString &account_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  bank_transaction_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void createBankTransactionAttachmentByFileName(const QString &xero_tenant_id, const QString &bank_transaction_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  bank_transaction_id QString [required]
    * @param[in]  oai_history_records OAIHistoryRecords [required]
    */
    virtual void createBankTransactionHistoryRecord(const QString &xero_tenant_id, const QString &bank_transaction_id, const OAIHistoryRecords &oai_history_records);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_bank_transactions OAIBankTransactions [required]
    * @param[in]  summarize_errors bool [optional]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void createBankTransactions(const QString &xero_tenant_id, const OAIBankTransactions &oai_bank_transactions, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_bank_transfers OAIBankTransfers [required]
    */
    virtual void createBankTransfer(const QString &xero_tenant_id, const OAIBankTransfers &oai_bank_transfers);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  bank_transfer_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void createBankTransferAttachmentByFileName(const QString &xero_tenant_id, const QString &bank_transfer_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  bank_transfer_id QString [required]
    * @param[in]  oai_history_records OAIHistoryRecords [required]
    */
    virtual void createBankTransferHistoryRecord(const QString &xero_tenant_id, const QString &bank_transfer_id, const OAIHistoryRecords &oai_history_records);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_batch_payments OAIBatchPayments [required]
    * @param[in]  summarize_errors bool [optional]
    */
    virtual void createBatchPayment(const QString &xero_tenant_id, const OAIBatchPayments &oai_batch_payments, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  batch_payment_id QString [required]
    * @param[in]  oai_history_records OAIHistoryRecords [required]
    */
    virtual void createBatchPaymentHistoryRecord(const QString &xero_tenant_id, const QString &batch_payment_id, const OAIHistoryRecords &oai_history_records);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  branding_theme_id QString [required]
    * @param[in]  oai_payment_service OAIPaymentService [required]
    */
    virtual void createBrandingThemePaymentServices(const QString &xero_tenant_id, const QString &branding_theme_id, const OAIPaymentService &oai_payment_service);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  contact_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void createContactAttachmentByFileName(const QString &xero_tenant_id, const QString &contact_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_contact_groups OAIContactGroups [required]
    */
    virtual void createContactGroup(const QString &xero_tenant_id, const OAIContactGroups &oai_contact_groups);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  contact_group_id QString [required]
    * @param[in]  oai_contacts OAIContacts [required]
    */
    virtual void createContactGroupContacts(const QString &xero_tenant_id, const QString &contact_group_id, const OAIContacts &oai_contacts);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  contact_id QString [required]
    * @param[in]  oai_history_records OAIHistoryRecords [required]
    */
    virtual void createContactHistory(const QString &xero_tenant_id, const QString &contact_id, const OAIHistoryRecords &oai_history_records);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_contacts OAIContacts [required]
    * @param[in]  summarize_errors bool [optional]
    */
    virtual void createContacts(const QString &xero_tenant_id, const OAIContacts &oai_contacts, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  credit_note_id QString [required]
    * @param[in]  oai_allocations OAIAllocations [required]
    * @param[in]  summarize_errors bool [optional]
    */
    virtual void createCreditNoteAllocation(const QString &xero_tenant_id, const QString &credit_note_id, const OAIAllocations &oai_allocations, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  credit_note_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    * @param[in]  include_online bool [optional]
    */
    virtual void createCreditNoteAttachmentByFileName(const QString &xero_tenant_id, const QString &credit_note_id, const QString &file_name, const QByteArray &body, const ::OpenAPI::OptionalParam<bool> &include_online = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  credit_note_id QString [required]
    * @param[in]  oai_history_records OAIHistoryRecords [required]
    */
    virtual void createCreditNoteHistory(const QString &xero_tenant_id, const QString &credit_note_id, const OAIHistoryRecords &oai_history_records);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_credit_notes OAICreditNotes [required]
    * @param[in]  summarize_errors bool [optional]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void createCreditNotes(const QString &xero_tenant_id, const OAICreditNotes &oai_credit_notes, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_currency OAICurrency [required]
    */
    virtual void createCurrency(const QString &xero_tenant_id, const OAICurrency &oai_currency);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_employees OAIEmployees [required]
    * @param[in]  summarize_errors bool [optional]
    */
    virtual void createEmployees(const QString &xero_tenant_id, const OAIEmployees &oai_employees, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  expense_claim_id QString [required]
    * @param[in]  oai_history_records OAIHistoryRecords [required]
    */
    virtual void createExpenseClaimHistory(const QString &xero_tenant_id, const QString &expense_claim_id, const OAIHistoryRecords &oai_history_records);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_expense_claims OAIExpenseClaims [required]
    */
    virtual void createExpenseClaims(const QString &xero_tenant_id, const OAIExpenseClaims &oai_expense_claims);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  invoice_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    * @param[in]  include_online bool [optional]
    */
    virtual void createInvoiceAttachmentByFileName(const QString &xero_tenant_id, const QString &invoice_id, const QString &file_name, const QByteArray &body, const ::OpenAPI::OptionalParam<bool> &include_online = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  invoice_id QString [required]
    * @param[in]  oai_history_records OAIHistoryRecords [required]
    */
    virtual void createInvoiceHistory(const QString &xero_tenant_id, const QString &invoice_id, const OAIHistoryRecords &oai_history_records);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_invoices OAIInvoices [required]
    * @param[in]  summarize_errors bool [optional]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void createInvoices(const QString &xero_tenant_id, const OAIInvoices &oai_invoices, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  oai_history_records OAIHistoryRecords [required]
    */
    virtual void createItemHistory(const QString &xero_tenant_id, const QString &item_id, const OAIHistoryRecords &oai_history_records);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_items OAIItems [required]
    * @param[in]  summarize_errors bool [optional]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void createItems(const QString &xero_tenant_id, const OAIItems &oai_items, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_linked_transaction OAILinkedTransaction [required]
    */
    virtual void createLinkedTransaction(const QString &xero_tenant_id, const OAILinkedTransaction &oai_linked_transaction);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  manual_journal_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void createManualJournalAttachmentByFileName(const QString &xero_tenant_id, const QString &manual_journal_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  manual_journal_id QString [required]
    * @param[in]  oai_history_records OAIHistoryRecords [required]
    */
    virtual void createManualJournalHistoryRecord(const QString &xero_tenant_id, const QString &manual_journal_id, const OAIHistoryRecords &oai_history_records);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_manual_journals OAIManualJournals [required]
    * @param[in]  summarize_errors bool [optional]
    */
    virtual void createManualJournals(const QString &xero_tenant_id, const OAIManualJournals &oai_manual_journals, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  overpayment_id QString [required]
    * @param[in]  oai_allocations OAIAllocations [required]
    * @param[in]  summarize_errors bool [optional]
    */
    virtual void createOverpaymentAllocations(const QString &xero_tenant_id, const QString &overpayment_id, const OAIAllocations &oai_allocations, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  overpayment_id QString [required]
    * @param[in]  oai_history_records OAIHistoryRecords [required]
    */
    virtual void createOverpaymentHistory(const QString &xero_tenant_id, const QString &overpayment_id, const OAIHistoryRecords &oai_history_records);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_payment OAIPayment [required]
    */
    virtual void createPayment(const QString &xero_tenant_id, const OAIPayment &oai_payment);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  payment_id QString [required]
    * @param[in]  oai_history_records OAIHistoryRecords [required]
    */
    virtual void createPaymentHistory(const QString &xero_tenant_id, const QString &payment_id, const OAIHistoryRecords &oai_history_records);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_payment_services OAIPaymentServices [required]
    */
    virtual void createPaymentService(const QString &xero_tenant_id, const OAIPaymentServices &oai_payment_services);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_payments OAIPayments [required]
    * @param[in]  summarize_errors bool [optional]
    */
    virtual void createPayments(const QString &xero_tenant_id, const OAIPayments &oai_payments, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  prepayment_id QString [required]
    * @param[in]  oai_allocations OAIAllocations [required]
    * @param[in]  summarize_errors bool [optional]
    */
    virtual void createPrepaymentAllocations(const QString &xero_tenant_id, const QString &prepayment_id, const OAIAllocations &oai_allocations, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  prepayment_id QString [required]
    * @param[in]  oai_history_records OAIHistoryRecords [required]
    */
    virtual void createPrepaymentHistory(const QString &xero_tenant_id, const QString &prepayment_id, const OAIHistoryRecords &oai_history_records);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  purchase_order_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void createPurchaseOrderAttachmentByFileName(const QString &xero_tenant_id, const QString &purchase_order_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  purchase_order_id QString [required]
    * @param[in]  oai_history_records OAIHistoryRecords [required]
    */
    virtual void createPurchaseOrderHistory(const QString &xero_tenant_id, const QString &purchase_order_id, const OAIHistoryRecords &oai_history_records);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_purchase_orders OAIPurchaseOrders [required]
    * @param[in]  summarize_errors bool [optional]
    */
    virtual void createPurchaseOrders(const QString &xero_tenant_id, const OAIPurchaseOrders &oai_purchase_orders, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  quote_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void createQuoteAttachmentByFileName(const QString &xero_tenant_id, const QString &quote_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_history_records OAIHistoryRecords [required]
    */
    virtual void createQuoteHistory(const QString &xero_tenant_id, const QString &quote_id, const OAIHistoryRecords &oai_history_records);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_quotes OAIQuotes [required]
    * @param[in]  summarize_errors bool [optional]
    */
    virtual void createQuotes(const QString &xero_tenant_id, const OAIQuotes &oai_quotes, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_receipts OAIReceipts [required]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void createReceipt(const QString &xero_tenant_id, const OAIReceipts &oai_receipts, const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  receipt_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void createReceiptAttachmentByFileName(const QString &xero_tenant_id, const QString &receipt_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  receipt_id QString [required]
    * @param[in]  oai_history_records OAIHistoryRecords [required]
    */
    virtual void createReceiptHistory(const QString &xero_tenant_id, const QString &receipt_id, const OAIHistoryRecords &oai_history_records);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  repeating_invoice_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void createRepeatingInvoiceAttachmentByFileName(const QString &xero_tenant_id, const QString &repeating_invoice_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  repeating_invoice_id QString [required]
    * @param[in]  oai_history_records OAIHistoryRecords [required]
    */
    virtual void createRepeatingInvoiceHistory(const QString &xero_tenant_id, const QString &repeating_invoice_id, const OAIHistoryRecords &oai_history_records);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_tax_rates OAITaxRates [required]
    */
    virtual void createTaxRates(const QString &xero_tenant_id, const OAITaxRates &oai_tax_rates);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_tracking_category OAITrackingCategory [required]
    */
    virtual void createTrackingCategory(const QString &xero_tenant_id, const OAITrackingCategory &oai_tracking_category);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  tracking_category_id QString [required]
    * @param[in]  oai_tracking_option OAITrackingOption [required]
    */
    virtual void createTrackingOptions(const QString &xero_tenant_id, const QString &tracking_category_id, const OAITrackingOption &oai_tracking_option);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  account_id QString [required]
    */
    virtual void deleteAccount(const QString &xero_tenant_id, const QString &account_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  contact_group_id QString [required]
    * @param[in]  contact_id QString [required]
    */
    virtual void deleteContactGroupContact(const QString &xero_tenant_id, const QString &contact_group_id, const QString &contact_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  contact_group_id QString [required]
    */
    virtual void deleteContactGroupContacts(const QString &xero_tenant_id, const QString &contact_group_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  item_id QString [required]
    */
    virtual void deleteItem(const QString &xero_tenant_id, const QString &item_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  linked_transaction_id QString [required]
    */
    virtual void deleteLinkedTransaction(const QString &xero_tenant_id, const QString &linked_transaction_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  payment_id QString [required]
    * @param[in]  oai_payment_delete OAIPaymentDelete [required]
    */
    virtual void deletePayment(const QString &xero_tenant_id, const QString &payment_id, const OAIPaymentDelete &oai_payment_delete);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  tracking_category_id QString [required]
    */
    virtual void deleteTrackingCategory(const QString &xero_tenant_id, const QString &tracking_category_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  tracking_category_id QString [required]
    * @param[in]  tracking_option_id QString [required]
    */
    virtual void deleteTrackingOptions(const QString &xero_tenant_id, const QString &tracking_category_id, const QString &tracking_option_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  invoice_id QString [required]
    * @param[in]  oai_request_empty OAIRequestEmpty [required]
    */
    virtual void emailInvoice(const QString &xero_tenant_id, const QString &invoice_id, const OAIRequestEmpty &oai_request_empty);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  account_id QString [required]
    */
    virtual void getAccount(const QString &xero_tenant_id, const QString &account_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  account_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getAccountAttachmentByFileName(const QString &xero_tenant_id, const QString &account_id, const QString &file_name, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  account_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getAccountAttachmentById(const QString &xero_tenant_id, const QString &account_id, const QString &attachment_id, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  account_id QString [required]
    */
    virtual void getAccountAttachments(const QString &xero_tenant_id, const QString &account_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void getAccounts(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  bank_transaction_id QString [required]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void getBankTransaction(const QString &xero_tenant_id, const QString &bank_transaction_id, const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  bank_transaction_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getBankTransactionAttachmentByFileName(const QString &xero_tenant_id, const QString &bank_transaction_id, const QString &file_name, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  bank_transaction_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getBankTransactionAttachmentById(const QString &xero_tenant_id, const QString &bank_transaction_id, const QString &attachment_id, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  bank_transaction_id QString [required]
    */
    virtual void getBankTransactionAttachments(const QString &xero_tenant_id, const QString &bank_transaction_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void getBankTransactions(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  bank_transaction_id QString [required]
    */
    virtual void getBankTransactionsHistory(const QString &xero_tenant_id, const QString &bank_transaction_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  bank_transfer_id QString [required]
    */
    virtual void getBankTransfer(const QString &xero_tenant_id, const QString &bank_transfer_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  bank_transfer_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getBankTransferAttachmentByFileName(const QString &xero_tenant_id, const QString &bank_transfer_id, const QString &file_name, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  bank_transfer_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getBankTransferAttachmentById(const QString &xero_tenant_id, const QString &bank_transfer_id, const QString &attachment_id, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  bank_transfer_id QString [required]
    */
    virtual void getBankTransferAttachments(const QString &xero_tenant_id, const QString &bank_transfer_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  bank_transfer_id QString [required]
    */
    virtual void getBankTransferHistory(const QString &xero_tenant_id, const QString &bank_transfer_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void getBankTransfers(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  batch_payment_id QString [required]
    */
    virtual void getBatchPaymentHistory(const QString &xero_tenant_id, const QString &batch_payment_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void getBatchPayments(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  branding_theme_id QString [required]
    */
    virtual void getBrandingTheme(const QString &xero_tenant_id, const QString &branding_theme_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  branding_theme_id QString [required]
    */
    virtual void getBrandingThemePaymentServices(const QString &xero_tenant_id, const QString &branding_theme_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    */
    virtual void getBrandingThemes(const QString &xero_tenant_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  contact_id QString [required]
    */
    virtual void getContact(const QString &xero_tenant_id, const QString &contact_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  contact_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getContactAttachmentByFileName(const QString &xero_tenant_id, const QString &contact_id, const QString &file_name, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  contact_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getContactAttachmentById(const QString &xero_tenant_id, const QString &contact_id, const QString &attachment_id, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  contact_id QString [required]
    */
    virtual void getContactAttachments(const QString &xero_tenant_id, const QString &contact_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  contact_number QString [required]
    */
    virtual void getContactByContactNumber(const QString &xero_tenant_id, const QString &contact_number);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  contact_id QString [required]
    */
    virtual void getContactCISSettings(const QString &xero_tenant_id, const QString &contact_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  contact_group_id QString [required]
    */
    virtual void getContactGroup(const QString &xero_tenant_id, const QString &contact_group_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void getContactGroups(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  contact_id QString [required]
    */
    virtual void getContactHistory(const QString &xero_tenant_id, const QString &contact_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  ids QList<QString> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  include_archived bool [optional]
    */
    virtual void getContacts(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_archived = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  credit_note_id QString [required]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void getCreditNote(const QString &xero_tenant_id, const QString &credit_note_id, const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  credit_note_id QString [required]
    */
    virtual void getCreditNoteAsPdf(const QString &xero_tenant_id, const QString &credit_note_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  credit_note_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getCreditNoteAttachmentByFileName(const QString &xero_tenant_id, const QString &credit_note_id, const QString &file_name, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  credit_note_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getCreditNoteAttachmentById(const QString &xero_tenant_id, const QString &credit_note_id, const QString &attachment_id, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  credit_note_id QString [required]
    */
    virtual void getCreditNoteAttachments(const QString &xero_tenant_id, const QString &credit_note_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  credit_note_id QString [required]
    */
    virtual void getCreditNoteHistory(const QString &xero_tenant_id, const QString &credit_note_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void getCreditNotes(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void getCurrencies(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  employee_id QString [required]
    */
    virtual void getEmployee(const QString &xero_tenant_id, const QString &employee_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void getEmployees(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  expense_claim_id QString [required]
    */
    virtual void getExpenseClaim(const QString &xero_tenant_id, const QString &expense_claim_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  expense_claim_id QString [required]
    */
    virtual void getExpenseClaimHistory(const QString &xero_tenant_id, const QString &expense_claim_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void getExpenseClaims(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  invoice_id QString [required]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void getInvoice(const QString &xero_tenant_id, const QString &invoice_id, const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  invoice_id QString [required]
    */
    virtual void getInvoiceAsPdf(const QString &xero_tenant_id, const QString &invoice_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  invoice_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getInvoiceAttachmentByFileName(const QString &xero_tenant_id, const QString &invoice_id, const QString &file_name, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  invoice_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getInvoiceAttachmentById(const QString &xero_tenant_id, const QString &invoice_id, const QString &attachment_id, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  invoice_id QString [required]
    */
    virtual void getInvoiceAttachments(const QString &xero_tenant_id, const QString &invoice_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  invoice_id QString [required]
    */
    virtual void getInvoiceHistory(const QString &xero_tenant_id, const QString &invoice_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    */
    virtual void getInvoiceReminders(const QString &xero_tenant_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  ids QList<QString> [optional]
    * @param[in]  invoice_numbers QList<QString> [optional]
    * @param[in]  contact_ids QList<QString> [optional]
    * @param[in]  statuses QList<QString> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  include_archived bool [optional]
    * @param[in]  created_by_my_app bool [optional]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void getInvoices(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &invoice_numbers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &contact_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &statuses = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_archived = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &created_by_my_app = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void getItem(const QString &xero_tenant_id, const QString &item_id, const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  item_id QString [required]
    */
    virtual void getItemHistory(const QString &xero_tenant_id, const QString &item_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void getItems(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  journal_id QString [required]
    */
    virtual void getJournal(const QString &xero_tenant_id, const QString &journal_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  payments_only bool [optional]
    */
    virtual void getJournals(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &payments_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  linked_transaction_id QString [required]
    */
    virtual void getLinkedTransaction(const QString &xero_tenant_id, const QString &linked_transaction_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  linked_transaction_id QString [optional]
    * @param[in]  source_transaction_id QString [optional]
    * @param[in]  contact_id QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  target_transaction_id QString [optional]
    */
    virtual void getLinkedTransactions(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &linked_transaction_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_transaction_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_transaction_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  manual_journal_id QString [required]
    */
    virtual void getManualJournal(const QString &xero_tenant_id, const QString &manual_journal_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  manual_journal_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getManualJournalAttachmentByFileName(const QString &xero_tenant_id, const QString &manual_journal_id, const QString &file_name, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  manual_journal_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getManualJournalAttachmentById(const QString &xero_tenant_id, const QString &manual_journal_id, const QString &attachment_id, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  manual_journal_id QString [required]
    */
    virtual void getManualJournalAttachments(const QString &xero_tenant_id, const QString &manual_journal_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getManualJournals(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  manual_journal_id QString [required]
    */
    virtual void getManualJournalsHistory(const QString &xero_tenant_id, const QString &manual_journal_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  invoice_id QString [required]
    */
    virtual void getOnlineInvoice(const QString &xero_tenant_id, const QString &invoice_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    */
    virtual void getOrganisationActions(const QString &xero_tenant_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  organisation_id QString [required]
    */
    virtual void getOrganisationCISSettings(const QString &xero_tenant_id, const QString &organisation_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    */
    virtual void getOrganisations(const QString &xero_tenant_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  overpayment_id QString [required]
    */
    virtual void getOverpayment(const QString &xero_tenant_id, const QString &overpayment_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  overpayment_id QString [required]
    */
    virtual void getOverpaymentHistory(const QString &xero_tenant_id, const QString &overpayment_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void getOverpayments(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  payment_id QString [required]
    */
    virtual void getPayment(const QString &xero_tenant_id, const QString &payment_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  payment_id QString [required]
    */
    virtual void getPaymentHistory(const QString &xero_tenant_id, const QString &payment_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    */
    virtual void getPaymentServices(const QString &xero_tenant_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getPayments(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  prepayment_id QString [required]
    */
    virtual void getPrepayment(const QString &xero_tenant_id, const QString &prepayment_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  prepayment_id QString [required]
    */
    virtual void getPrepaymentHistory(const QString &xero_tenant_id, const QString &prepayment_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void getPrepayments(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  purchase_order_id QString [required]
    */
    virtual void getPurchaseOrder(const QString &xero_tenant_id, const QString &purchase_order_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  purchase_order_id QString [required]
    */
    virtual void getPurchaseOrderAsPdf(const QString &xero_tenant_id, const QString &purchase_order_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  purchase_order_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getPurchaseOrderAttachmentByFileName(const QString &xero_tenant_id, const QString &purchase_order_id, const QString &file_name, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  purchase_order_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getPurchaseOrderAttachmentById(const QString &xero_tenant_id, const QString &purchase_order_id, const QString &attachment_id, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  purchase_order_id QString [required]
    */
    virtual void getPurchaseOrderAttachments(const QString &xero_tenant_id, const QString &purchase_order_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  purchase_order_number QString [required]
    */
    virtual void getPurchaseOrderByNumber(const QString &xero_tenant_id, const QString &purchase_order_number);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  purchase_order_id QString [required]
    */
    virtual void getPurchaseOrderHistory(const QString &xero_tenant_id, const QString &purchase_order_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  status QString [optional]
    * @param[in]  date_from QString [optional]
    * @param[in]  date_to QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getPurchaseOrders(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  quote_id QString [required]
    */
    virtual void getQuote(const QString &xero_tenant_id, const QString &quote_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  quote_id QString [required]
    */
    virtual void getQuoteAsPdf(const QString &xero_tenant_id, const QString &quote_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  quote_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getQuoteAttachmentByFileName(const QString &xero_tenant_id, const QString &quote_id, const QString &file_name, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  quote_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getQuoteAttachmentById(const QString &xero_tenant_id, const QString &quote_id, const QString &attachment_id, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  quote_id QString [required]
    */
    virtual void getQuoteAttachments(const QString &xero_tenant_id, const QString &quote_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  quote_id QString [required]
    */
    virtual void getQuoteHistory(const QString &xero_tenant_id, const QString &quote_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  date_from QDate [optional]
    * @param[in]  date_to QDate [optional]
    * @param[in]  expiry_date_from QDate [optional]
    * @param[in]  expiry_date_to QDate [optional]
    * @param[in]  contact_id QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  order QString [optional]
    * @param[in]  quote_number QString [optional]
    */
    virtual void getQuotes(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDate> &date_from = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_to = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &expiry_date_from = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &expiry_date_to = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &contact_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &quote_number = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  receipt_id QString [required]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void getReceipt(const QString &xero_tenant_id, const QString &receipt_id, const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  receipt_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getReceiptAttachmentByFileName(const QString &xero_tenant_id, const QString &receipt_id, const QString &file_name, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  receipt_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getReceiptAttachmentById(const QString &xero_tenant_id, const QString &receipt_id, const QString &attachment_id, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  receipt_id QString [required]
    */
    virtual void getReceiptAttachments(const QString &xero_tenant_id, const QString &receipt_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  receipt_id QString [required]
    */
    virtual void getReceiptHistory(const QString &xero_tenant_id, const QString &receipt_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void getReceipts(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  repeating_invoice_id QString [required]
    */
    virtual void getRepeatingInvoice(const QString &xero_tenant_id, const QString &repeating_invoice_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  repeating_invoice_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getRepeatingInvoiceAttachmentByFileName(const QString &xero_tenant_id, const QString &repeating_invoice_id, const QString &file_name, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  repeating_invoice_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getRepeatingInvoiceAttachmentById(const QString &xero_tenant_id, const QString &repeating_invoice_id, const QString &attachment_id, const QString &content_type);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  repeating_invoice_id QString [required]
    */
    virtual void getRepeatingInvoiceAttachments(const QString &xero_tenant_id, const QString &repeating_invoice_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  repeating_invoice_id QString [required]
    */
    virtual void getRepeatingInvoiceHistory(const QString &xero_tenant_id, const QString &repeating_invoice_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void getRepeatingInvoices(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  contact_id QString [required]
    * @param[in]  date QDate [optional]
    * @param[in]  from_date QDate [optional]
    * @param[in]  to_date QDate [optional]
    */
    virtual void getReportAgedPayablesByContact(const QString &xero_tenant_id, const QString &contact_id, const ::OpenAPI::OptionalParam<QDate> &date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &from_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &to_date = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  contact_id QString [required]
    * @param[in]  date QDate [optional]
    * @param[in]  from_date QDate [optional]
    * @param[in]  to_date QDate [optional]
    */
    virtual void getReportAgedReceivablesByContact(const QString &xero_tenant_id, const QString &contact_id, const ::OpenAPI::OptionalParam<QDate> &date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &from_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &to_date = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  report_id QString [required]
    */
    virtual void getReportBASorGST(const QString &xero_tenant_id, const QString &report_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    */
    virtual void getReportBASorGSTList(const QString &xero_tenant_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  date QDate [optional]
    * @param[in]  periods qint32 [optional]
    * @param[in]  timeframe QString [optional]
    * @param[in]  tracking_option_id1 QString [optional]
    * @param[in]  tracking_option_id2 QString [optional]
    * @param[in]  standard_layout bool [optional]
    * @param[in]  payments_only bool [optional]
    */
    virtual void getReportBalanceSheet(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDate> &date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &periods = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &timeframe = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tracking_option_id1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tracking_option_id2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &standard_layout = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &payments_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  from_date QDate [optional]
    * @param[in]  to_date QDate [optional]
    */
    virtual void getReportBankSummary(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDate> &from_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &to_date = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  date QDate [optional]
    * @param[in]  period qint32 [optional]
    * @param[in]  timeframe qint32 [optional]
    */
    virtual void getReportBudgetSummary(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDate> &date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &timeframe = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  date QDate [optional]
    */
    virtual void getReportExecutiveSummary(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDate> &date = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  from_date QDate [optional]
    * @param[in]  to_date QDate [optional]
    * @param[in]  periods qint32 [optional]
    * @param[in]  timeframe QString [optional]
    * @param[in]  tracking_category_id QString [optional]
    * @param[in]  tracking_category_id2 QString [optional]
    * @param[in]  tracking_option_id QString [optional]
    * @param[in]  tracking_option_id2 QString [optional]
    * @param[in]  standard_layout bool [optional]
    * @param[in]  payments_only bool [optional]
    */
    virtual void getReportProfitAndLoss(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDate> &from_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &to_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &periods = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &timeframe = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tracking_category_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tracking_category_id2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tracking_option_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tracking_option_id2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &standard_layout = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &payments_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  report_year QString [optional]
    */
    virtual void getReportTenNinetyNine(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QString> &report_year = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  date QDate [optional]
    * @param[in]  payments_only bool [optional]
    */
    virtual void getReportTrialBalance(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDate> &date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<bool> &payments_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  tax_type QString [optional]
    */
    virtual void getTaxRates(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tax_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  include_archived bool [optional]
    */
    virtual void getTrackingCategories(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_archived = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  tracking_category_id QString [required]
    */
    virtual void getTrackingCategory(const QString &xero_tenant_id, const QString &tracking_category_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void getUser(const QString &xero_tenant_id, const QString &user_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QDateTime [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void getUsers(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QDateTime> &if_modified_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_setup OAISetup [required]
    */
    virtual void postSetup(const QString &xero_tenant_id, const OAISetup &oai_setup);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  account_id QString [required]
    * @param[in]  oai_accounts OAIAccounts [required]
    */
    virtual void updateAccount(const QString &xero_tenant_id, const QString &account_id, const OAIAccounts &oai_accounts);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  account_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void updateAccountAttachmentByFileName(const QString &xero_tenant_id, const QString &account_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  bank_transaction_id QString [required]
    * @param[in]  oai_bank_transactions OAIBankTransactions [required]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void updateBankTransaction(const QString &xero_tenant_id, const QString &bank_transaction_id, const OAIBankTransactions &oai_bank_transactions, const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  bank_transaction_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void updateBankTransactionAttachmentByFileName(const QString &xero_tenant_id, const QString &bank_transaction_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  bank_transfer_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void updateBankTransferAttachmentByFileName(const QString &xero_tenant_id, const QString &bank_transfer_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  contact_id QString [required]
    * @param[in]  oai_contacts OAIContacts [required]
    */
    virtual void updateContact(const QString &xero_tenant_id, const QString &contact_id, const OAIContacts &oai_contacts);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  contact_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void updateContactAttachmentByFileName(const QString &xero_tenant_id, const QString &contact_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  contact_group_id QString [required]
    * @param[in]  oai_contact_groups OAIContactGroups [required]
    */
    virtual void updateContactGroup(const QString &xero_tenant_id, const QString &contact_group_id, const OAIContactGroups &oai_contact_groups);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  credit_note_id QString [required]
    * @param[in]  oai_credit_notes OAICreditNotes [required]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void updateCreditNote(const QString &xero_tenant_id, const QString &credit_note_id, const OAICreditNotes &oai_credit_notes, const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  credit_note_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void updateCreditNoteAttachmentByFileName(const QString &xero_tenant_id, const QString &credit_note_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  expense_claim_id QString [required]
    * @param[in]  oai_expense_claims OAIExpenseClaims [required]
    */
    virtual void updateExpenseClaim(const QString &xero_tenant_id, const QString &expense_claim_id, const OAIExpenseClaims &oai_expense_claims);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  invoice_id QString [required]
    * @param[in]  oai_invoices OAIInvoices [required]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void updateInvoice(const QString &xero_tenant_id, const QString &invoice_id, const OAIInvoices &oai_invoices, const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  invoice_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void updateInvoiceAttachmentByFileName(const QString &xero_tenant_id, const QString &invoice_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  oai_items OAIItems [required]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void updateItem(const QString &xero_tenant_id, const QString &item_id, const OAIItems &oai_items, const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  linked_transaction_id QString [required]
    * @param[in]  oai_linked_transactions OAILinkedTransactions [required]
    */
    virtual void updateLinkedTransaction(const QString &xero_tenant_id, const QString &linked_transaction_id, const OAILinkedTransactions &oai_linked_transactions);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  manual_journal_id QString [required]
    * @param[in]  oai_manual_journals OAIManualJournals [required]
    */
    virtual void updateManualJournal(const QString &xero_tenant_id, const QString &manual_journal_id, const OAIManualJournals &oai_manual_journals);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  manual_journal_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void updateManualJournalAttachmentByFileName(const QString &xero_tenant_id, const QString &manual_journal_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_bank_transactions OAIBankTransactions [required]
    * @param[in]  summarize_errors bool [optional]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void updateOrCreateBankTransactions(const QString &xero_tenant_id, const OAIBankTransactions &oai_bank_transactions, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_contacts OAIContacts [required]
    * @param[in]  summarize_errors bool [optional]
    */
    virtual void updateOrCreateContacts(const QString &xero_tenant_id, const OAIContacts &oai_contacts, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_credit_notes OAICreditNotes [required]
    * @param[in]  summarize_errors bool [optional]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void updateOrCreateCreditNotes(const QString &xero_tenant_id, const OAICreditNotes &oai_credit_notes, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_employees OAIEmployees [required]
    * @param[in]  summarize_errors bool [optional]
    */
    virtual void updateOrCreateEmployees(const QString &xero_tenant_id, const OAIEmployees &oai_employees, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_invoices OAIInvoices [required]
    * @param[in]  summarize_errors bool [optional]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void updateOrCreateInvoices(const QString &xero_tenant_id, const OAIInvoices &oai_invoices, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_items OAIItems [required]
    * @param[in]  summarize_errors bool [optional]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void updateOrCreateItems(const QString &xero_tenant_id, const OAIItems &oai_items, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_manual_journals OAIManualJournals [required]
    * @param[in]  summarize_errors bool [optional]
    */
    virtual void updateOrCreateManualJournals(const QString &xero_tenant_id, const OAIManualJournals &oai_manual_journals, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_purchase_orders OAIPurchaseOrders [required]
    * @param[in]  summarize_errors bool [optional]
    */
    virtual void updateOrCreatePurchaseOrders(const QString &xero_tenant_id, const OAIPurchaseOrders &oai_purchase_orders, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_quotes OAIQuotes [required]
    * @param[in]  summarize_errors bool [optional]
    */
    virtual void updateOrCreateQuotes(const QString &xero_tenant_id, const OAIQuotes &oai_quotes, const ::OpenAPI::OptionalParam<bool> &summarize_errors = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  purchase_order_id QString [required]
    * @param[in]  oai_purchase_orders OAIPurchaseOrders [required]
    */
    virtual void updatePurchaseOrder(const QString &xero_tenant_id, const QString &purchase_order_id, const OAIPurchaseOrders &oai_purchase_orders);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  purchase_order_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void updatePurchaseOrderAttachmentByFileName(const QString &xero_tenant_id, const QString &purchase_order_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_quotes OAIQuotes [required]
    */
    virtual void updateQuote(const QString &xero_tenant_id, const QString &quote_id, const OAIQuotes &oai_quotes);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  quote_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void updateQuoteAttachmentByFileName(const QString &xero_tenant_id, const QString &quote_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  receipt_id QString [required]
    * @param[in]  oai_receipts OAIReceipts [required]
    * @param[in]  unitdp qint32 [optional]
    */
    virtual void updateReceipt(const QString &xero_tenant_id, const QString &receipt_id, const OAIReceipts &oai_receipts, const ::OpenAPI::OptionalParam<qint32> &unitdp = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  receipt_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void updateReceiptAttachmentByFileName(const QString &xero_tenant_id, const QString &receipt_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  repeating_invoice_id QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  body QByteArray [required]
    */
    virtual void updateRepeatingInvoiceAttachmentByFileName(const QString &xero_tenant_id, const QString &repeating_invoice_id, const QString &file_name, const QByteArray &body);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_tax_rates OAITaxRates [required]
    */
    virtual void updateTaxRate(const QString &xero_tenant_id, const OAITaxRates &oai_tax_rates);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  tracking_category_id QString [required]
    * @param[in]  oai_tracking_category OAITrackingCategory [required]
    */
    virtual void updateTrackingCategory(const QString &xero_tenant_id, const QString &tracking_category_id, const OAITrackingCategory &oai_tracking_category);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  tracking_category_id QString [required]
    * @param[in]  tracking_option_id QString [required]
    * @param[in]  oai_tracking_option OAITrackingOption [required]
    */
    virtual void updateTrackingOptions(const QString &xero_tenant_id, const QString &tracking_category_id, const QString &tracking_option_id, const OAITrackingOption &oai_tracking_option);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAccountCallback(OAIHttpRequestWorker *worker);
    void createAccountAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void createBankTransactionAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void createBankTransactionHistoryRecordCallback(OAIHttpRequestWorker *worker);
    void createBankTransactionsCallback(OAIHttpRequestWorker *worker);
    void createBankTransferCallback(OAIHttpRequestWorker *worker);
    void createBankTransferAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void createBankTransferHistoryRecordCallback(OAIHttpRequestWorker *worker);
    void createBatchPaymentCallback(OAIHttpRequestWorker *worker);
    void createBatchPaymentHistoryRecordCallback(OAIHttpRequestWorker *worker);
    void createBrandingThemePaymentServicesCallback(OAIHttpRequestWorker *worker);
    void createContactAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void createContactGroupCallback(OAIHttpRequestWorker *worker);
    void createContactGroupContactsCallback(OAIHttpRequestWorker *worker);
    void createContactHistoryCallback(OAIHttpRequestWorker *worker);
    void createContactsCallback(OAIHttpRequestWorker *worker);
    void createCreditNoteAllocationCallback(OAIHttpRequestWorker *worker);
    void createCreditNoteAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void createCreditNoteHistoryCallback(OAIHttpRequestWorker *worker);
    void createCreditNotesCallback(OAIHttpRequestWorker *worker);
    void createCurrencyCallback(OAIHttpRequestWorker *worker);
    void createEmployeesCallback(OAIHttpRequestWorker *worker);
    void createExpenseClaimHistoryCallback(OAIHttpRequestWorker *worker);
    void createExpenseClaimsCallback(OAIHttpRequestWorker *worker);
    void createInvoiceAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void createInvoiceHistoryCallback(OAIHttpRequestWorker *worker);
    void createInvoicesCallback(OAIHttpRequestWorker *worker);
    void createItemHistoryCallback(OAIHttpRequestWorker *worker);
    void createItemsCallback(OAIHttpRequestWorker *worker);
    void createLinkedTransactionCallback(OAIHttpRequestWorker *worker);
    void createManualJournalAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void createManualJournalHistoryRecordCallback(OAIHttpRequestWorker *worker);
    void createManualJournalsCallback(OAIHttpRequestWorker *worker);
    void createOverpaymentAllocationsCallback(OAIHttpRequestWorker *worker);
    void createOverpaymentHistoryCallback(OAIHttpRequestWorker *worker);
    void createPaymentCallback(OAIHttpRequestWorker *worker);
    void createPaymentHistoryCallback(OAIHttpRequestWorker *worker);
    void createPaymentServiceCallback(OAIHttpRequestWorker *worker);
    void createPaymentsCallback(OAIHttpRequestWorker *worker);
    void createPrepaymentAllocationsCallback(OAIHttpRequestWorker *worker);
    void createPrepaymentHistoryCallback(OAIHttpRequestWorker *worker);
    void createPurchaseOrderAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void createPurchaseOrderHistoryCallback(OAIHttpRequestWorker *worker);
    void createPurchaseOrdersCallback(OAIHttpRequestWorker *worker);
    void createQuoteAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void createQuoteHistoryCallback(OAIHttpRequestWorker *worker);
    void createQuotesCallback(OAIHttpRequestWorker *worker);
    void createReceiptCallback(OAIHttpRequestWorker *worker);
    void createReceiptAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void createReceiptHistoryCallback(OAIHttpRequestWorker *worker);
    void createRepeatingInvoiceAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void createRepeatingInvoiceHistoryCallback(OAIHttpRequestWorker *worker);
    void createTaxRatesCallback(OAIHttpRequestWorker *worker);
    void createTrackingCategoryCallback(OAIHttpRequestWorker *worker);
    void createTrackingOptionsCallback(OAIHttpRequestWorker *worker);
    void deleteAccountCallback(OAIHttpRequestWorker *worker);
    void deleteContactGroupContactCallback(OAIHttpRequestWorker *worker);
    void deleteContactGroupContactsCallback(OAIHttpRequestWorker *worker);
    void deleteItemCallback(OAIHttpRequestWorker *worker);
    void deleteLinkedTransactionCallback(OAIHttpRequestWorker *worker);
    void deletePaymentCallback(OAIHttpRequestWorker *worker);
    void deleteTrackingCategoryCallback(OAIHttpRequestWorker *worker);
    void deleteTrackingOptionsCallback(OAIHttpRequestWorker *worker);
    void emailInvoiceCallback(OAIHttpRequestWorker *worker);
    void getAccountCallback(OAIHttpRequestWorker *worker);
    void getAccountAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void getAccountAttachmentByIdCallback(OAIHttpRequestWorker *worker);
    void getAccountAttachmentsCallback(OAIHttpRequestWorker *worker);
    void getAccountsCallback(OAIHttpRequestWorker *worker);
    void getBankTransactionCallback(OAIHttpRequestWorker *worker);
    void getBankTransactionAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void getBankTransactionAttachmentByIdCallback(OAIHttpRequestWorker *worker);
    void getBankTransactionAttachmentsCallback(OAIHttpRequestWorker *worker);
    void getBankTransactionsCallback(OAIHttpRequestWorker *worker);
    void getBankTransactionsHistoryCallback(OAIHttpRequestWorker *worker);
    void getBankTransferCallback(OAIHttpRequestWorker *worker);
    void getBankTransferAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void getBankTransferAttachmentByIdCallback(OAIHttpRequestWorker *worker);
    void getBankTransferAttachmentsCallback(OAIHttpRequestWorker *worker);
    void getBankTransferHistoryCallback(OAIHttpRequestWorker *worker);
    void getBankTransfersCallback(OAIHttpRequestWorker *worker);
    void getBatchPaymentHistoryCallback(OAIHttpRequestWorker *worker);
    void getBatchPaymentsCallback(OAIHttpRequestWorker *worker);
    void getBrandingThemeCallback(OAIHttpRequestWorker *worker);
    void getBrandingThemePaymentServicesCallback(OAIHttpRequestWorker *worker);
    void getBrandingThemesCallback(OAIHttpRequestWorker *worker);
    void getContactCallback(OAIHttpRequestWorker *worker);
    void getContactAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void getContactAttachmentByIdCallback(OAIHttpRequestWorker *worker);
    void getContactAttachmentsCallback(OAIHttpRequestWorker *worker);
    void getContactByContactNumberCallback(OAIHttpRequestWorker *worker);
    void getContactCISSettingsCallback(OAIHttpRequestWorker *worker);
    void getContactGroupCallback(OAIHttpRequestWorker *worker);
    void getContactGroupsCallback(OAIHttpRequestWorker *worker);
    void getContactHistoryCallback(OAIHttpRequestWorker *worker);
    void getContactsCallback(OAIHttpRequestWorker *worker);
    void getCreditNoteCallback(OAIHttpRequestWorker *worker);
    void getCreditNoteAsPdfCallback(OAIHttpRequestWorker *worker);
    void getCreditNoteAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void getCreditNoteAttachmentByIdCallback(OAIHttpRequestWorker *worker);
    void getCreditNoteAttachmentsCallback(OAIHttpRequestWorker *worker);
    void getCreditNoteHistoryCallback(OAIHttpRequestWorker *worker);
    void getCreditNotesCallback(OAIHttpRequestWorker *worker);
    void getCurrenciesCallback(OAIHttpRequestWorker *worker);
    void getEmployeeCallback(OAIHttpRequestWorker *worker);
    void getEmployeesCallback(OAIHttpRequestWorker *worker);
    void getExpenseClaimCallback(OAIHttpRequestWorker *worker);
    void getExpenseClaimHistoryCallback(OAIHttpRequestWorker *worker);
    void getExpenseClaimsCallback(OAIHttpRequestWorker *worker);
    void getInvoiceCallback(OAIHttpRequestWorker *worker);
    void getInvoiceAsPdfCallback(OAIHttpRequestWorker *worker);
    void getInvoiceAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void getInvoiceAttachmentByIdCallback(OAIHttpRequestWorker *worker);
    void getInvoiceAttachmentsCallback(OAIHttpRequestWorker *worker);
    void getInvoiceHistoryCallback(OAIHttpRequestWorker *worker);
    void getInvoiceRemindersCallback(OAIHttpRequestWorker *worker);
    void getInvoicesCallback(OAIHttpRequestWorker *worker);
    void getItemCallback(OAIHttpRequestWorker *worker);
    void getItemHistoryCallback(OAIHttpRequestWorker *worker);
    void getItemsCallback(OAIHttpRequestWorker *worker);
    void getJournalCallback(OAIHttpRequestWorker *worker);
    void getJournalsCallback(OAIHttpRequestWorker *worker);
    void getLinkedTransactionCallback(OAIHttpRequestWorker *worker);
    void getLinkedTransactionsCallback(OAIHttpRequestWorker *worker);
    void getManualJournalCallback(OAIHttpRequestWorker *worker);
    void getManualJournalAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void getManualJournalAttachmentByIdCallback(OAIHttpRequestWorker *worker);
    void getManualJournalAttachmentsCallback(OAIHttpRequestWorker *worker);
    void getManualJournalsCallback(OAIHttpRequestWorker *worker);
    void getManualJournalsHistoryCallback(OAIHttpRequestWorker *worker);
    void getOnlineInvoiceCallback(OAIHttpRequestWorker *worker);
    void getOrganisationActionsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationCISSettingsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsCallback(OAIHttpRequestWorker *worker);
    void getOverpaymentCallback(OAIHttpRequestWorker *worker);
    void getOverpaymentHistoryCallback(OAIHttpRequestWorker *worker);
    void getOverpaymentsCallback(OAIHttpRequestWorker *worker);
    void getPaymentCallback(OAIHttpRequestWorker *worker);
    void getPaymentHistoryCallback(OAIHttpRequestWorker *worker);
    void getPaymentServicesCallback(OAIHttpRequestWorker *worker);
    void getPaymentsCallback(OAIHttpRequestWorker *worker);
    void getPrepaymentCallback(OAIHttpRequestWorker *worker);
    void getPrepaymentHistoryCallback(OAIHttpRequestWorker *worker);
    void getPrepaymentsCallback(OAIHttpRequestWorker *worker);
    void getPurchaseOrderCallback(OAIHttpRequestWorker *worker);
    void getPurchaseOrderAsPdfCallback(OAIHttpRequestWorker *worker);
    void getPurchaseOrderAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void getPurchaseOrderAttachmentByIdCallback(OAIHttpRequestWorker *worker);
    void getPurchaseOrderAttachmentsCallback(OAIHttpRequestWorker *worker);
    void getPurchaseOrderByNumberCallback(OAIHttpRequestWorker *worker);
    void getPurchaseOrderHistoryCallback(OAIHttpRequestWorker *worker);
    void getPurchaseOrdersCallback(OAIHttpRequestWorker *worker);
    void getQuoteCallback(OAIHttpRequestWorker *worker);
    void getQuoteAsPdfCallback(OAIHttpRequestWorker *worker);
    void getQuoteAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void getQuoteAttachmentByIdCallback(OAIHttpRequestWorker *worker);
    void getQuoteAttachmentsCallback(OAIHttpRequestWorker *worker);
    void getQuoteHistoryCallback(OAIHttpRequestWorker *worker);
    void getQuotesCallback(OAIHttpRequestWorker *worker);
    void getReceiptCallback(OAIHttpRequestWorker *worker);
    void getReceiptAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void getReceiptAttachmentByIdCallback(OAIHttpRequestWorker *worker);
    void getReceiptAttachmentsCallback(OAIHttpRequestWorker *worker);
    void getReceiptHistoryCallback(OAIHttpRequestWorker *worker);
    void getReceiptsCallback(OAIHttpRequestWorker *worker);
    void getRepeatingInvoiceCallback(OAIHttpRequestWorker *worker);
    void getRepeatingInvoiceAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void getRepeatingInvoiceAttachmentByIdCallback(OAIHttpRequestWorker *worker);
    void getRepeatingInvoiceAttachmentsCallback(OAIHttpRequestWorker *worker);
    void getRepeatingInvoiceHistoryCallback(OAIHttpRequestWorker *worker);
    void getRepeatingInvoicesCallback(OAIHttpRequestWorker *worker);
    void getReportAgedPayablesByContactCallback(OAIHttpRequestWorker *worker);
    void getReportAgedReceivablesByContactCallback(OAIHttpRequestWorker *worker);
    void getReportBASorGSTCallback(OAIHttpRequestWorker *worker);
    void getReportBASorGSTListCallback(OAIHttpRequestWorker *worker);
    void getReportBalanceSheetCallback(OAIHttpRequestWorker *worker);
    void getReportBankSummaryCallback(OAIHttpRequestWorker *worker);
    void getReportBudgetSummaryCallback(OAIHttpRequestWorker *worker);
    void getReportExecutiveSummaryCallback(OAIHttpRequestWorker *worker);
    void getReportProfitAndLossCallback(OAIHttpRequestWorker *worker);
    void getReportTenNinetyNineCallback(OAIHttpRequestWorker *worker);
    void getReportTrialBalanceCallback(OAIHttpRequestWorker *worker);
    void getTaxRatesCallback(OAIHttpRequestWorker *worker);
    void getTrackingCategoriesCallback(OAIHttpRequestWorker *worker);
    void getTrackingCategoryCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void getUsersCallback(OAIHttpRequestWorker *worker);
    void postSetupCallback(OAIHttpRequestWorker *worker);
    void updateAccountCallback(OAIHttpRequestWorker *worker);
    void updateAccountAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void updateBankTransactionCallback(OAIHttpRequestWorker *worker);
    void updateBankTransactionAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void updateBankTransferAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void updateContactCallback(OAIHttpRequestWorker *worker);
    void updateContactAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void updateContactGroupCallback(OAIHttpRequestWorker *worker);
    void updateCreditNoteCallback(OAIHttpRequestWorker *worker);
    void updateCreditNoteAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void updateExpenseClaimCallback(OAIHttpRequestWorker *worker);
    void updateInvoiceCallback(OAIHttpRequestWorker *worker);
    void updateInvoiceAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void updateItemCallback(OAIHttpRequestWorker *worker);
    void updateLinkedTransactionCallback(OAIHttpRequestWorker *worker);
    void updateManualJournalCallback(OAIHttpRequestWorker *worker);
    void updateManualJournalAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void updateOrCreateBankTransactionsCallback(OAIHttpRequestWorker *worker);
    void updateOrCreateContactsCallback(OAIHttpRequestWorker *worker);
    void updateOrCreateCreditNotesCallback(OAIHttpRequestWorker *worker);
    void updateOrCreateEmployeesCallback(OAIHttpRequestWorker *worker);
    void updateOrCreateInvoicesCallback(OAIHttpRequestWorker *worker);
    void updateOrCreateItemsCallback(OAIHttpRequestWorker *worker);
    void updateOrCreateManualJournalsCallback(OAIHttpRequestWorker *worker);
    void updateOrCreatePurchaseOrdersCallback(OAIHttpRequestWorker *worker);
    void updateOrCreateQuotesCallback(OAIHttpRequestWorker *worker);
    void updatePurchaseOrderCallback(OAIHttpRequestWorker *worker);
    void updatePurchaseOrderAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void updateQuoteCallback(OAIHttpRequestWorker *worker);
    void updateQuoteAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void updateReceiptCallback(OAIHttpRequestWorker *worker);
    void updateReceiptAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void updateRepeatingInvoiceAttachmentByFileNameCallback(OAIHttpRequestWorker *worker);
    void updateTaxRateCallback(OAIHttpRequestWorker *worker);
    void updateTrackingCategoryCallback(OAIHttpRequestWorker *worker);
    void updateTrackingOptionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAccountSignal(OAIAccounts summary);
    void createAccountAttachmentByFileNameSignal(OAIAttachments summary);
    void createBankTransactionAttachmentByFileNameSignal(OAIAttachments summary);
    void createBankTransactionHistoryRecordSignal(OAIHistoryRecords summary);
    void createBankTransactionsSignal(OAIBankTransactions summary);
    void createBankTransferSignal(OAIBankTransfers summary);
    void createBankTransferAttachmentByFileNameSignal(OAIAttachments summary);
    void createBankTransferHistoryRecordSignal(OAIHistoryRecords summary);
    void createBatchPaymentSignal(OAIBatchPayments summary);
    void createBatchPaymentHistoryRecordSignal(OAIHistoryRecords summary);
    void createBrandingThemePaymentServicesSignal(OAIPaymentServices summary);
    void createContactAttachmentByFileNameSignal(OAIAttachments summary);
    void createContactGroupSignal(OAIContactGroups summary);
    void createContactGroupContactsSignal(OAIContacts summary);
    void createContactHistorySignal(OAIHistoryRecords summary);
    void createContactsSignal(OAIContacts summary);
    void createCreditNoteAllocationSignal(OAIAllocations summary);
    void createCreditNoteAttachmentByFileNameSignal(OAIAttachments summary);
    void createCreditNoteHistorySignal(OAIHistoryRecords summary);
    void createCreditNotesSignal(OAICreditNotes summary);
    void createCurrencySignal(OAICurrencies summary);
    void createEmployeesSignal(OAIEmployees summary);
    void createExpenseClaimHistorySignal(OAIHistoryRecords summary);
    void createExpenseClaimsSignal(OAIExpenseClaims summary);
    void createInvoiceAttachmentByFileNameSignal(OAIAttachments summary);
    void createInvoiceHistorySignal(OAIHistoryRecords summary);
    void createInvoicesSignal(OAIInvoices summary);
    void createItemHistorySignal(OAIHistoryRecords summary);
    void createItemsSignal(OAIItems summary);
    void createLinkedTransactionSignal(OAILinkedTransactions summary);
    void createManualJournalAttachmentByFileNameSignal(OAIAttachments summary);
    void createManualJournalHistoryRecordSignal(OAIHistoryRecords summary);
    void createManualJournalsSignal(OAIManualJournals summary);
    void createOverpaymentAllocationsSignal(OAIAllocations summary);
    void createOverpaymentHistorySignal(OAIHistoryRecords summary);
    void createPaymentSignal(OAIPayments summary);
    void createPaymentHistorySignal(OAIHistoryRecords summary);
    void createPaymentServiceSignal(OAIPaymentServices summary);
    void createPaymentsSignal(OAIPayments summary);
    void createPrepaymentAllocationsSignal(OAIAllocations summary);
    void createPrepaymentHistorySignal(OAIHistoryRecords summary);
    void createPurchaseOrderAttachmentByFileNameSignal(OAIAttachments summary);
    void createPurchaseOrderHistorySignal(OAIHistoryRecords summary);
    void createPurchaseOrdersSignal(OAIPurchaseOrders summary);
    void createQuoteAttachmentByFileNameSignal(OAIAttachments summary);
    void createQuoteHistorySignal(OAIHistoryRecords summary);
    void createQuotesSignal(OAIQuotes summary);
    void createReceiptSignal(OAIReceipts summary);
    void createReceiptAttachmentByFileNameSignal(OAIAttachments summary);
    void createReceiptHistorySignal(OAIHistoryRecords summary);
    void createRepeatingInvoiceAttachmentByFileNameSignal(OAIAttachments summary);
    void createRepeatingInvoiceHistorySignal(OAIHistoryRecords summary);
    void createTaxRatesSignal(OAITaxRates summary);
    void createTrackingCategorySignal(OAITrackingCategories summary);
    void createTrackingOptionsSignal(OAITrackingOptions summary);
    void deleteAccountSignal(OAIAccounts summary);
    void deleteContactGroupContactSignal();
    void deleteContactGroupContactsSignal();
    void deleteItemSignal();
    void deleteLinkedTransactionSignal();
    void deletePaymentSignal(OAIPayments summary);
    void deleteTrackingCategorySignal(OAITrackingCategories summary);
    void deleteTrackingOptionsSignal(OAITrackingOptions summary);
    void emailInvoiceSignal();
    void getAccountSignal(OAIAccounts summary);
    void getAccountAttachmentByFileNameSignal(OAIHttpFileElement summary);
    void getAccountAttachmentByIdSignal(OAIHttpFileElement summary);
    void getAccountAttachmentsSignal(OAIAttachments summary);
    void getAccountsSignal(OAIAccounts summary);
    void getBankTransactionSignal(OAIBankTransactions summary);
    void getBankTransactionAttachmentByFileNameSignal(OAIHttpFileElement summary);
    void getBankTransactionAttachmentByIdSignal(OAIHttpFileElement summary);
    void getBankTransactionAttachmentsSignal(OAIAttachments summary);
    void getBankTransactionsSignal(OAIBankTransactions summary);
    void getBankTransactionsHistorySignal(OAIHistoryRecords summary);
    void getBankTransferSignal(OAIBankTransfers summary);
    void getBankTransferAttachmentByFileNameSignal(OAIHttpFileElement summary);
    void getBankTransferAttachmentByIdSignal(OAIHttpFileElement summary);
    void getBankTransferAttachmentsSignal(OAIAttachments summary);
    void getBankTransferHistorySignal(OAIHistoryRecords summary);
    void getBankTransfersSignal(OAIBankTransfers summary);
    void getBatchPaymentHistorySignal(OAIHistoryRecords summary);
    void getBatchPaymentsSignal(OAIBatchPayments summary);
    void getBrandingThemeSignal(OAIBrandingThemes summary);
    void getBrandingThemePaymentServicesSignal(OAIPaymentServices summary);
    void getBrandingThemesSignal(OAIBrandingThemes summary);
    void getContactSignal(OAIContacts summary);
    void getContactAttachmentByFileNameSignal(OAIHttpFileElement summary);
    void getContactAttachmentByIdSignal(OAIHttpFileElement summary);
    void getContactAttachmentsSignal(OAIAttachments summary);
    void getContactByContactNumberSignal(OAIContacts summary);
    void getContactCISSettingsSignal(OAICISSettings summary);
    void getContactGroupSignal(OAIContactGroups summary);
    void getContactGroupsSignal(OAIContactGroups summary);
    void getContactHistorySignal(OAIHistoryRecords summary);
    void getContactsSignal(OAIContacts summary);
    void getCreditNoteSignal(OAICreditNotes summary);
    void getCreditNoteAsPdfSignal(OAIHttpFileElement summary);
    void getCreditNoteAttachmentByFileNameSignal(OAIHttpFileElement summary);
    void getCreditNoteAttachmentByIdSignal(OAIHttpFileElement summary);
    void getCreditNoteAttachmentsSignal(OAIAttachments summary);
    void getCreditNoteHistorySignal(OAIHistoryRecords summary);
    void getCreditNotesSignal(OAICreditNotes summary);
    void getCurrenciesSignal(OAICurrencies summary);
    void getEmployeeSignal(OAIEmployees summary);
    void getEmployeesSignal(OAIEmployees summary);
    void getExpenseClaimSignal(OAIExpenseClaims summary);
    void getExpenseClaimHistorySignal(OAIHistoryRecords summary);
    void getExpenseClaimsSignal(OAIExpenseClaims summary);
    void getInvoiceSignal(OAIInvoices summary);
    void getInvoiceAsPdfSignal(OAIHttpFileElement summary);
    void getInvoiceAttachmentByFileNameSignal(OAIHttpFileElement summary);
    void getInvoiceAttachmentByIdSignal(OAIHttpFileElement summary);
    void getInvoiceAttachmentsSignal(OAIAttachments summary);
    void getInvoiceHistorySignal(OAIHistoryRecords summary);
    void getInvoiceRemindersSignal(OAIInvoiceReminders summary);
    void getInvoicesSignal(OAIInvoices summary);
    void getItemSignal(OAIItems summary);
    void getItemHistorySignal(OAIHistoryRecords summary);
    void getItemsSignal(OAIItems summary);
    void getJournalSignal(OAIJournals summary);
    void getJournalsSignal(OAIJournals summary);
    void getLinkedTransactionSignal(OAILinkedTransactions summary);
    void getLinkedTransactionsSignal(OAILinkedTransactions summary);
    void getManualJournalSignal(OAIManualJournals summary);
    void getManualJournalAttachmentByFileNameSignal(OAIHttpFileElement summary);
    void getManualJournalAttachmentByIdSignal(OAIHttpFileElement summary);
    void getManualJournalAttachmentsSignal(OAIAttachments summary);
    void getManualJournalsSignal(OAIManualJournals summary);
    void getManualJournalsHistorySignal(OAIHistoryRecords summary);
    void getOnlineInvoiceSignal(OAIOnlineInvoices summary);
    void getOrganisationActionsSignal(OAIActions summary);
    void getOrganisationCISSettingsSignal(OAICISOrgSettings summary);
    void getOrganisationsSignal(OAIOrganisations summary);
    void getOverpaymentSignal(OAIOverpayments summary);
    void getOverpaymentHistorySignal(OAIHistoryRecords summary);
    void getOverpaymentsSignal(OAIOverpayments summary);
    void getPaymentSignal(OAIPayments summary);
    void getPaymentHistorySignal(OAIHistoryRecords summary);
    void getPaymentServicesSignal(OAIPaymentServices summary);
    void getPaymentsSignal(OAIPayments summary);
    void getPrepaymentSignal(OAIPrepayments summary);
    void getPrepaymentHistorySignal(OAIHistoryRecords summary);
    void getPrepaymentsSignal(OAIPrepayments summary);
    void getPurchaseOrderSignal(OAIPurchaseOrders summary);
    void getPurchaseOrderAsPdfSignal(OAIHttpFileElement summary);
    void getPurchaseOrderAttachmentByFileNameSignal(OAIHttpFileElement summary);
    void getPurchaseOrderAttachmentByIdSignal(OAIHttpFileElement summary);
    void getPurchaseOrderAttachmentsSignal(OAIAttachments summary);
    void getPurchaseOrderByNumberSignal(OAIPurchaseOrders summary);
    void getPurchaseOrderHistorySignal(OAIHistoryRecords summary);
    void getPurchaseOrdersSignal(OAIPurchaseOrders summary);
    void getQuoteSignal(OAIQuotes summary);
    void getQuoteAsPdfSignal(OAIHttpFileElement summary);
    void getQuoteAttachmentByFileNameSignal(OAIHttpFileElement summary);
    void getQuoteAttachmentByIdSignal(OAIHttpFileElement summary);
    void getQuoteAttachmentsSignal(OAIAttachments summary);
    void getQuoteHistorySignal(OAIHistoryRecords summary);
    void getQuotesSignal(OAIQuotes summary);
    void getReceiptSignal(OAIReceipts summary);
    void getReceiptAttachmentByFileNameSignal(OAIHttpFileElement summary);
    void getReceiptAttachmentByIdSignal(OAIHttpFileElement summary);
    void getReceiptAttachmentsSignal(OAIAttachments summary);
    void getReceiptHistorySignal(OAIHistoryRecords summary);
    void getReceiptsSignal(OAIReceipts summary);
    void getRepeatingInvoiceSignal(OAIRepeatingInvoices summary);
    void getRepeatingInvoiceAttachmentByFileNameSignal(OAIHttpFileElement summary);
    void getRepeatingInvoiceAttachmentByIdSignal(OAIHttpFileElement summary);
    void getRepeatingInvoiceAttachmentsSignal(OAIAttachments summary);
    void getRepeatingInvoiceHistorySignal(OAIHistoryRecords summary);
    void getRepeatingInvoicesSignal(OAIRepeatingInvoices summary);
    void getReportAgedPayablesByContactSignal(OAIReportWithRows summary);
    void getReportAgedReceivablesByContactSignal(OAIReportWithRows summary);
    void getReportBASorGSTSignal(OAIReportWithRows summary);
    void getReportBASorGSTListSignal(OAIReportWithRows summary);
    void getReportBalanceSheetSignal(OAIReportWithRows summary);
    void getReportBankSummarySignal(OAIReportWithRows summary);
    void getReportBudgetSummarySignal(OAIReportWithRows summary);
    void getReportExecutiveSummarySignal(OAIReportWithRows summary);
    void getReportProfitAndLossSignal(OAIReportWithRows summary);
    void getReportTenNinetyNineSignal(OAIReports summary);
    void getReportTrialBalanceSignal(OAIReportWithRows summary);
    void getTaxRatesSignal(OAITaxRates summary);
    void getTrackingCategoriesSignal(OAITrackingCategories summary);
    void getTrackingCategorySignal(OAITrackingCategories summary);
    void getUserSignal(OAIUsers summary);
    void getUsersSignal(OAIUsers summary);
    void postSetupSignal(OAIImportSummaryObject summary);
    void updateAccountSignal(OAIAccounts summary);
    void updateAccountAttachmentByFileNameSignal(OAIAttachments summary);
    void updateBankTransactionSignal(OAIBankTransactions summary);
    void updateBankTransactionAttachmentByFileNameSignal(OAIAttachments summary);
    void updateBankTransferAttachmentByFileNameSignal(OAIAttachments summary);
    void updateContactSignal(OAIContacts summary);
    void updateContactAttachmentByFileNameSignal(OAIAttachments summary);
    void updateContactGroupSignal(OAIContactGroups summary);
    void updateCreditNoteSignal(OAICreditNotes summary);
    void updateCreditNoteAttachmentByFileNameSignal(OAIAttachments summary);
    void updateExpenseClaimSignal(OAIExpenseClaims summary);
    void updateInvoiceSignal(OAIInvoices summary);
    void updateInvoiceAttachmentByFileNameSignal(OAIAttachments summary);
    void updateItemSignal(OAIItems summary);
    void updateLinkedTransactionSignal(OAILinkedTransactions summary);
    void updateManualJournalSignal(OAIManualJournals summary);
    void updateManualJournalAttachmentByFileNameSignal(OAIAttachments summary);
    void updateOrCreateBankTransactionsSignal(OAIBankTransactions summary);
    void updateOrCreateContactsSignal(OAIContacts summary);
    void updateOrCreateCreditNotesSignal(OAICreditNotes summary);
    void updateOrCreateEmployeesSignal(OAIEmployees summary);
    void updateOrCreateInvoicesSignal(OAIInvoices summary);
    void updateOrCreateItemsSignal(OAIItems summary);
    void updateOrCreateManualJournalsSignal(OAIManualJournals summary);
    void updateOrCreatePurchaseOrdersSignal(OAIPurchaseOrders summary);
    void updateOrCreateQuotesSignal(OAIQuotes summary);
    void updatePurchaseOrderSignal(OAIPurchaseOrders summary);
    void updatePurchaseOrderAttachmentByFileNameSignal(OAIAttachments summary);
    void updateQuoteSignal(OAIQuotes summary);
    void updateQuoteAttachmentByFileNameSignal(OAIAttachments summary);
    void updateReceiptSignal(OAIReceipts summary);
    void updateReceiptAttachmentByFileNameSignal(OAIAttachments summary);
    void updateRepeatingInvoiceAttachmentByFileNameSignal(OAIAttachments summary);
    void updateTaxRateSignal(OAITaxRates summary);
    void updateTrackingCategorySignal(OAITrackingCategories summary);
    void updateTrackingOptionsSignal(OAITrackingOptions summary);


    void createAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccounts summary);
    void createAccountAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void createBankTransactionAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void createBankTransactionHistoryRecordSignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void createBankTransactionsSignalFull(OAIHttpRequestWorker *worker, OAIBankTransactions summary);
    void createBankTransferSignalFull(OAIHttpRequestWorker *worker, OAIBankTransfers summary);
    void createBankTransferAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void createBankTransferHistoryRecordSignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void createBatchPaymentSignalFull(OAIHttpRequestWorker *worker, OAIBatchPayments summary);
    void createBatchPaymentHistoryRecordSignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void createBrandingThemePaymentServicesSignalFull(OAIHttpRequestWorker *worker, OAIPaymentServices summary);
    void createContactAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void createContactGroupSignalFull(OAIHttpRequestWorker *worker, OAIContactGroups summary);
    void createContactGroupContactsSignalFull(OAIHttpRequestWorker *worker, OAIContacts summary);
    void createContactHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void createContactsSignalFull(OAIHttpRequestWorker *worker, OAIContacts summary);
    void createCreditNoteAllocationSignalFull(OAIHttpRequestWorker *worker, OAIAllocations summary);
    void createCreditNoteAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void createCreditNoteHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void createCreditNotesSignalFull(OAIHttpRequestWorker *worker, OAICreditNotes summary);
    void createCurrencySignalFull(OAIHttpRequestWorker *worker, OAICurrencies summary);
    void createEmployeesSignalFull(OAIHttpRequestWorker *worker, OAIEmployees summary);
    void createExpenseClaimHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void createExpenseClaimsSignalFull(OAIHttpRequestWorker *worker, OAIExpenseClaims summary);
    void createInvoiceAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void createInvoiceHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void createInvoicesSignalFull(OAIHttpRequestWorker *worker, OAIInvoices summary);
    void createItemHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void createItemsSignalFull(OAIHttpRequestWorker *worker, OAIItems summary);
    void createLinkedTransactionSignalFull(OAIHttpRequestWorker *worker, OAILinkedTransactions summary);
    void createManualJournalAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void createManualJournalHistoryRecordSignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void createManualJournalsSignalFull(OAIHttpRequestWorker *worker, OAIManualJournals summary);
    void createOverpaymentAllocationsSignalFull(OAIHttpRequestWorker *worker, OAIAllocations summary);
    void createOverpaymentHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void createPaymentSignalFull(OAIHttpRequestWorker *worker, OAIPayments summary);
    void createPaymentHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void createPaymentServiceSignalFull(OAIHttpRequestWorker *worker, OAIPaymentServices summary);
    void createPaymentsSignalFull(OAIHttpRequestWorker *worker, OAIPayments summary);
    void createPrepaymentAllocationsSignalFull(OAIHttpRequestWorker *worker, OAIAllocations summary);
    void createPrepaymentHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void createPurchaseOrderAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void createPurchaseOrderHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void createPurchaseOrdersSignalFull(OAIHttpRequestWorker *worker, OAIPurchaseOrders summary);
    void createQuoteAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void createQuoteHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void createQuotesSignalFull(OAIHttpRequestWorker *worker, OAIQuotes summary);
    void createReceiptSignalFull(OAIHttpRequestWorker *worker, OAIReceipts summary);
    void createReceiptAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void createReceiptHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void createRepeatingInvoiceAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void createRepeatingInvoiceHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void createTaxRatesSignalFull(OAIHttpRequestWorker *worker, OAITaxRates summary);
    void createTrackingCategorySignalFull(OAIHttpRequestWorker *worker, OAITrackingCategories summary);
    void createTrackingOptionsSignalFull(OAIHttpRequestWorker *worker, OAITrackingOptions summary);
    void deleteAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccounts summary);
    void deleteContactGroupContactSignalFull(OAIHttpRequestWorker *worker);
    void deleteContactGroupContactsSignalFull(OAIHttpRequestWorker *worker);
    void deleteItemSignalFull(OAIHttpRequestWorker *worker);
    void deleteLinkedTransactionSignalFull(OAIHttpRequestWorker *worker);
    void deletePaymentSignalFull(OAIHttpRequestWorker *worker, OAIPayments summary);
    void deleteTrackingCategorySignalFull(OAIHttpRequestWorker *worker, OAITrackingCategories summary);
    void deleteTrackingOptionsSignalFull(OAIHttpRequestWorker *worker, OAITrackingOptions summary);
    void emailInvoiceSignalFull(OAIHttpRequestWorker *worker);
    void getAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccounts summary);
    void getAccountAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getAccountAttachmentByIdSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getAccountAttachmentsSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void getAccountsSignalFull(OAIHttpRequestWorker *worker, OAIAccounts summary);
    void getBankTransactionSignalFull(OAIHttpRequestWorker *worker, OAIBankTransactions summary);
    void getBankTransactionAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getBankTransactionAttachmentByIdSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getBankTransactionAttachmentsSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void getBankTransactionsSignalFull(OAIHttpRequestWorker *worker, OAIBankTransactions summary);
    void getBankTransactionsHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void getBankTransferSignalFull(OAIHttpRequestWorker *worker, OAIBankTransfers summary);
    void getBankTransferAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getBankTransferAttachmentByIdSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getBankTransferAttachmentsSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void getBankTransferHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void getBankTransfersSignalFull(OAIHttpRequestWorker *worker, OAIBankTransfers summary);
    void getBatchPaymentHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void getBatchPaymentsSignalFull(OAIHttpRequestWorker *worker, OAIBatchPayments summary);
    void getBrandingThemeSignalFull(OAIHttpRequestWorker *worker, OAIBrandingThemes summary);
    void getBrandingThemePaymentServicesSignalFull(OAIHttpRequestWorker *worker, OAIPaymentServices summary);
    void getBrandingThemesSignalFull(OAIHttpRequestWorker *worker, OAIBrandingThemes summary);
    void getContactSignalFull(OAIHttpRequestWorker *worker, OAIContacts summary);
    void getContactAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getContactAttachmentByIdSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getContactAttachmentsSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void getContactByContactNumberSignalFull(OAIHttpRequestWorker *worker, OAIContacts summary);
    void getContactCISSettingsSignalFull(OAIHttpRequestWorker *worker, OAICISSettings summary);
    void getContactGroupSignalFull(OAIHttpRequestWorker *worker, OAIContactGroups summary);
    void getContactGroupsSignalFull(OAIHttpRequestWorker *worker, OAIContactGroups summary);
    void getContactHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void getContactsSignalFull(OAIHttpRequestWorker *worker, OAIContacts summary);
    void getCreditNoteSignalFull(OAIHttpRequestWorker *worker, OAICreditNotes summary);
    void getCreditNoteAsPdfSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getCreditNoteAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getCreditNoteAttachmentByIdSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getCreditNoteAttachmentsSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void getCreditNoteHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void getCreditNotesSignalFull(OAIHttpRequestWorker *worker, OAICreditNotes summary);
    void getCurrenciesSignalFull(OAIHttpRequestWorker *worker, OAICurrencies summary);
    void getEmployeeSignalFull(OAIHttpRequestWorker *worker, OAIEmployees summary);
    void getEmployeesSignalFull(OAIHttpRequestWorker *worker, OAIEmployees summary);
    void getExpenseClaimSignalFull(OAIHttpRequestWorker *worker, OAIExpenseClaims summary);
    void getExpenseClaimHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void getExpenseClaimsSignalFull(OAIHttpRequestWorker *worker, OAIExpenseClaims summary);
    void getInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIInvoices summary);
    void getInvoiceAsPdfSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getInvoiceAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getInvoiceAttachmentByIdSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getInvoiceAttachmentsSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void getInvoiceHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void getInvoiceRemindersSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceReminders summary);
    void getInvoicesSignalFull(OAIHttpRequestWorker *worker, OAIInvoices summary);
    void getItemSignalFull(OAIHttpRequestWorker *worker, OAIItems summary);
    void getItemHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void getItemsSignalFull(OAIHttpRequestWorker *worker, OAIItems summary);
    void getJournalSignalFull(OAIHttpRequestWorker *worker, OAIJournals summary);
    void getJournalsSignalFull(OAIHttpRequestWorker *worker, OAIJournals summary);
    void getLinkedTransactionSignalFull(OAIHttpRequestWorker *worker, OAILinkedTransactions summary);
    void getLinkedTransactionsSignalFull(OAIHttpRequestWorker *worker, OAILinkedTransactions summary);
    void getManualJournalSignalFull(OAIHttpRequestWorker *worker, OAIManualJournals summary);
    void getManualJournalAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getManualJournalAttachmentByIdSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getManualJournalAttachmentsSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void getManualJournalsSignalFull(OAIHttpRequestWorker *worker, OAIManualJournals summary);
    void getManualJournalsHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void getOnlineInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIOnlineInvoices summary);
    void getOrganisationActionsSignalFull(OAIHttpRequestWorker *worker, OAIActions summary);
    void getOrganisationCISSettingsSignalFull(OAIHttpRequestWorker *worker, OAICISOrgSettings summary);
    void getOrganisationsSignalFull(OAIHttpRequestWorker *worker, OAIOrganisations summary);
    void getOverpaymentSignalFull(OAIHttpRequestWorker *worker, OAIOverpayments summary);
    void getOverpaymentHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void getOverpaymentsSignalFull(OAIHttpRequestWorker *worker, OAIOverpayments summary);
    void getPaymentSignalFull(OAIHttpRequestWorker *worker, OAIPayments summary);
    void getPaymentHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void getPaymentServicesSignalFull(OAIHttpRequestWorker *worker, OAIPaymentServices summary);
    void getPaymentsSignalFull(OAIHttpRequestWorker *worker, OAIPayments summary);
    void getPrepaymentSignalFull(OAIHttpRequestWorker *worker, OAIPrepayments summary);
    void getPrepaymentHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void getPrepaymentsSignalFull(OAIHttpRequestWorker *worker, OAIPrepayments summary);
    void getPurchaseOrderSignalFull(OAIHttpRequestWorker *worker, OAIPurchaseOrders summary);
    void getPurchaseOrderAsPdfSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getPurchaseOrderAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getPurchaseOrderAttachmentByIdSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getPurchaseOrderAttachmentsSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void getPurchaseOrderByNumberSignalFull(OAIHttpRequestWorker *worker, OAIPurchaseOrders summary);
    void getPurchaseOrderHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void getPurchaseOrdersSignalFull(OAIHttpRequestWorker *worker, OAIPurchaseOrders summary);
    void getQuoteSignalFull(OAIHttpRequestWorker *worker, OAIQuotes summary);
    void getQuoteAsPdfSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getQuoteAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getQuoteAttachmentByIdSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getQuoteAttachmentsSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void getQuoteHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void getQuotesSignalFull(OAIHttpRequestWorker *worker, OAIQuotes summary);
    void getReceiptSignalFull(OAIHttpRequestWorker *worker, OAIReceipts summary);
    void getReceiptAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getReceiptAttachmentByIdSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getReceiptAttachmentsSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void getReceiptHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void getReceiptsSignalFull(OAIHttpRequestWorker *worker, OAIReceipts summary);
    void getRepeatingInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIRepeatingInvoices summary);
    void getRepeatingInvoiceAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getRepeatingInvoiceAttachmentByIdSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getRepeatingInvoiceAttachmentsSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void getRepeatingInvoiceHistorySignalFull(OAIHttpRequestWorker *worker, OAIHistoryRecords summary);
    void getRepeatingInvoicesSignalFull(OAIHttpRequestWorker *worker, OAIRepeatingInvoices summary);
    void getReportAgedPayablesByContactSignalFull(OAIHttpRequestWorker *worker, OAIReportWithRows summary);
    void getReportAgedReceivablesByContactSignalFull(OAIHttpRequestWorker *worker, OAIReportWithRows summary);
    void getReportBASorGSTSignalFull(OAIHttpRequestWorker *worker, OAIReportWithRows summary);
    void getReportBASorGSTListSignalFull(OAIHttpRequestWorker *worker, OAIReportWithRows summary);
    void getReportBalanceSheetSignalFull(OAIHttpRequestWorker *worker, OAIReportWithRows summary);
    void getReportBankSummarySignalFull(OAIHttpRequestWorker *worker, OAIReportWithRows summary);
    void getReportBudgetSummarySignalFull(OAIHttpRequestWorker *worker, OAIReportWithRows summary);
    void getReportExecutiveSummarySignalFull(OAIHttpRequestWorker *worker, OAIReportWithRows summary);
    void getReportProfitAndLossSignalFull(OAIHttpRequestWorker *worker, OAIReportWithRows summary);
    void getReportTenNinetyNineSignalFull(OAIHttpRequestWorker *worker, OAIReports summary);
    void getReportTrialBalanceSignalFull(OAIHttpRequestWorker *worker, OAIReportWithRows summary);
    void getTaxRatesSignalFull(OAIHttpRequestWorker *worker, OAITaxRates summary);
    void getTrackingCategoriesSignalFull(OAIHttpRequestWorker *worker, OAITrackingCategories summary);
    void getTrackingCategorySignalFull(OAIHttpRequestWorker *worker, OAITrackingCategories summary);
    void getUserSignalFull(OAIHttpRequestWorker *worker, OAIUsers summary);
    void getUsersSignalFull(OAIHttpRequestWorker *worker, OAIUsers summary);
    void postSetupSignalFull(OAIHttpRequestWorker *worker, OAIImportSummaryObject summary);
    void updateAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccounts summary);
    void updateAccountAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void updateBankTransactionSignalFull(OAIHttpRequestWorker *worker, OAIBankTransactions summary);
    void updateBankTransactionAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void updateBankTransferAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void updateContactSignalFull(OAIHttpRequestWorker *worker, OAIContacts summary);
    void updateContactAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void updateContactGroupSignalFull(OAIHttpRequestWorker *worker, OAIContactGroups summary);
    void updateCreditNoteSignalFull(OAIHttpRequestWorker *worker, OAICreditNotes summary);
    void updateCreditNoteAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void updateExpenseClaimSignalFull(OAIHttpRequestWorker *worker, OAIExpenseClaims summary);
    void updateInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIInvoices summary);
    void updateInvoiceAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void updateItemSignalFull(OAIHttpRequestWorker *worker, OAIItems summary);
    void updateLinkedTransactionSignalFull(OAIHttpRequestWorker *worker, OAILinkedTransactions summary);
    void updateManualJournalSignalFull(OAIHttpRequestWorker *worker, OAIManualJournals summary);
    void updateManualJournalAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void updateOrCreateBankTransactionsSignalFull(OAIHttpRequestWorker *worker, OAIBankTransactions summary);
    void updateOrCreateContactsSignalFull(OAIHttpRequestWorker *worker, OAIContacts summary);
    void updateOrCreateCreditNotesSignalFull(OAIHttpRequestWorker *worker, OAICreditNotes summary);
    void updateOrCreateEmployeesSignalFull(OAIHttpRequestWorker *worker, OAIEmployees summary);
    void updateOrCreateInvoicesSignalFull(OAIHttpRequestWorker *worker, OAIInvoices summary);
    void updateOrCreateItemsSignalFull(OAIHttpRequestWorker *worker, OAIItems summary);
    void updateOrCreateManualJournalsSignalFull(OAIHttpRequestWorker *worker, OAIManualJournals summary);
    void updateOrCreatePurchaseOrdersSignalFull(OAIHttpRequestWorker *worker, OAIPurchaseOrders summary);
    void updateOrCreateQuotesSignalFull(OAIHttpRequestWorker *worker, OAIQuotes summary);
    void updatePurchaseOrderSignalFull(OAIHttpRequestWorker *worker, OAIPurchaseOrders summary);
    void updatePurchaseOrderAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void updateQuoteSignalFull(OAIHttpRequestWorker *worker, OAIQuotes summary);
    void updateQuoteAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void updateReceiptSignalFull(OAIHttpRequestWorker *worker, OAIReceipts summary);
    void updateReceiptAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void updateRepeatingInvoiceAttachmentByFileNameSignalFull(OAIHttpRequestWorker *worker, OAIAttachments summary);
    void updateTaxRateSignalFull(OAIHttpRequestWorker *worker, OAITaxRates summary);
    void updateTrackingCategorySignalFull(OAIHttpRequestWorker *worker, OAITrackingCategories summary);
    void updateTrackingOptionsSignalFull(OAIHttpRequestWorker *worker, OAITrackingOptions summary);

    Q_DECL_DEPRECATED_X("Use createAccountSignalError() instead")
    void createAccountSignalE(OAIAccounts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountSignalError(OAIAccounts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAccountAttachmentByFileNameSignalError() instead")
    void createAccountAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBankTransactionAttachmentByFileNameSignalError() instead")
    void createBankTransactionAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBankTransactionAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBankTransactionHistoryRecordSignalError() instead")
    void createBankTransactionHistoryRecordSignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBankTransactionHistoryRecordSignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBankTransactionsSignalError() instead")
    void createBankTransactionsSignalE(OAIBankTransactions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBankTransactionsSignalError(OAIBankTransactions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBankTransferSignalError() instead")
    void createBankTransferSignalE(OAIBankTransfers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBankTransferSignalError(OAIBankTransfers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBankTransferAttachmentByFileNameSignalError() instead")
    void createBankTransferAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBankTransferAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBankTransferHistoryRecordSignalError() instead")
    void createBankTransferHistoryRecordSignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBankTransferHistoryRecordSignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBatchPaymentSignalError() instead")
    void createBatchPaymentSignalE(OAIBatchPayments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBatchPaymentSignalError(OAIBatchPayments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBatchPaymentHistoryRecordSignalError() instead")
    void createBatchPaymentHistoryRecordSignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBatchPaymentHistoryRecordSignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBrandingThemePaymentServicesSignalError() instead")
    void createBrandingThemePaymentServicesSignalE(OAIPaymentServices summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBrandingThemePaymentServicesSignalError(OAIPaymentServices summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createContactAttachmentByFileNameSignalError() instead")
    void createContactAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createContactAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createContactGroupSignalError() instead")
    void createContactGroupSignalE(OAIContactGroups summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createContactGroupSignalError(OAIContactGroups summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createContactGroupContactsSignalError() instead")
    void createContactGroupContactsSignalE(OAIContacts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createContactGroupContactsSignalError(OAIContacts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createContactHistorySignalError() instead")
    void createContactHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createContactHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createContactsSignalError() instead")
    void createContactsSignalE(OAIContacts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createContactsSignalError(OAIContacts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCreditNoteAllocationSignalError() instead")
    void createCreditNoteAllocationSignalE(OAIAllocations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCreditNoteAllocationSignalError(OAIAllocations summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCreditNoteAttachmentByFileNameSignalError() instead")
    void createCreditNoteAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCreditNoteAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCreditNoteHistorySignalError() instead")
    void createCreditNoteHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCreditNoteHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCreditNotesSignalError() instead")
    void createCreditNotesSignalE(OAICreditNotes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCreditNotesSignalError(OAICreditNotes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCurrencySignalError() instead")
    void createCurrencySignalE(OAICurrencies summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCurrencySignalError(OAICurrencies summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createEmployeesSignalError() instead")
    void createEmployeesSignalE(OAIEmployees summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createEmployeesSignalError(OAIEmployees summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createExpenseClaimHistorySignalError() instead")
    void createExpenseClaimHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createExpenseClaimHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createExpenseClaimsSignalError() instead")
    void createExpenseClaimsSignalE(OAIExpenseClaims summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createExpenseClaimsSignalError(OAIExpenseClaims summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvoiceAttachmentByFileNameSignalError() instead")
    void createInvoiceAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvoiceAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvoiceHistorySignalError() instead")
    void createInvoiceHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvoiceHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvoicesSignalError() instead")
    void createInvoicesSignalE(OAIInvoices summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvoicesSignalError(OAIInvoices summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createItemHistorySignalError() instead")
    void createItemHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createItemHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createItemsSignalError() instead")
    void createItemsSignalE(OAIItems summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createItemsSignalError(OAIItems summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLinkedTransactionSignalError() instead")
    void createLinkedTransactionSignalE(OAILinkedTransactions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLinkedTransactionSignalError(OAILinkedTransactions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createManualJournalAttachmentByFileNameSignalError() instead")
    void createManualJournalAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createManualJournalAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createManualJournalHistoryRecordSignalError() instead")
    void createManualJournalHistoryRecordSignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createManualJournalHistoryRecordSignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createManualJournalsSignalError() instead")
    void createManualJournalsSignalE(OAIManualJournals summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createManualJournalsSignalError(OAIManualJournals summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOverpaymentAllocationsSignalError() instead")
    void createOverpaymentAllocationsSignalE(OAIAllocations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOverpaymentAllocationsSignalError(OAIAllocations summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOverpaymentHistorySignalError() instead")
    void createOverpaymentHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOverpaymentHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPaymentSignalError() instead")
    void createPaymentSignalE(OAIPayments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentSignalError(OAIPayments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPaymentHistorySignalError() instead")
    void createPaymentHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPaymentServiceSignalError() instead")
    void createPaymentServiceSignalE(OAIPaymentServices summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentServiceSignalError(OAIPaymentServices summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPaymentsSignalError() instead")
    void createPaymentsSignalE(OAIPayments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentsSignalError(OAIPayments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPrepaymentAllocationsSignalError() instead")
    void createPrepaymentAllocationsSignalE(OAIAllocations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPrepaymentAllocationsSignalError(OAIAllocations summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPrepaymentHistorySignalError() instead")
    void createPrepaymentHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPrepaymentHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPurchaseOrderAttachmentByFileNameSignalError() instead")
    void createPurchaseOrderAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPurchaseOrderAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPurchaseOrderHistorySignalError() instead")
    void createPurchaseOrderHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPurchaseOrderHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPurchaseOrdersSignalError() instead")
    void createPurchaseOrdersSignalE(OAIPurchaseOrders summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPurchaseOrdersSignalError(OAIPurchaseOrders summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createQuoteAttachmentByFileNameSignalError() instead")
    void createQuoteAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createQuoteAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createQuoteHistorySignalError() instead")
    void createQuoteHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createQuoteHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createQuotesSignalError() instead")
    void createQuotesSignalE(OAIQuotes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createQuotesSignalError(OAIQuotes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReceiptSignalError() instead")
    void createReceiptSignalE(OAIReceipts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createReceiptSignalError(OAIReceipts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReceiptAttachmentByFileNameSignalError() instead")
    void createReceiptAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createReceiptAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReceiptHistorySignalError() instead")
    void createReceiptHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createReceiptHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRepeatingInvoiceAttachmentByFileNameSignalError() instead")
    void createRepeatingInvoiceAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRepeatingInvoiceAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRepeatingInvoiceHistorySignalError() instead")
    void createRepeatingInvoiceHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRepeatingInvoiceHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTaxRatesSignalError() instead")
    void createTaxRatesSignalE(OAITaxRates summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTaxRatesSignalError(OAITaxRates summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTrackingCategorySignalError() instead")
    void createTrackingCategorySignalE(OAITrackingCategories summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrackingCategorySignalError(OAITrackingCategories summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTrackingOptionsSignalError() instead")
    void createTrackingOptionsSignalE(OAITrackingOptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrackingOptionsSignalError(OAITrackingOptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountSignalError() instead")
    void deleteAccountSignalE(OAIAccounts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountSignalError(OAIAccounts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteContactGroupContactSignalError() instead")
    void deleteContactGroupContactSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteContactGroupContactSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteContactGroupContactsSignalError() instead")
    void deleteContactGroupContactsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteContactGroupContactsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteItemSignalError() instead")
    void deleteItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLinkedTransactionSignalError() instead")
    void deleteLinkedTransactionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLinkedTransactionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePaymentSignalError() instead")
    void deletePaymentSignalE(OAIPayments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePaymentSignalError(OAIPayments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTrackingCategorySignalError() instead")
    void deleteTrackingCategorySignalE(OAITrackingCategories summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTrackingCategorySignalError(OAITrackingCategories summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTrackingOptionsSignalError() instead")
    void deleteTrackingOptionsSignalE(OAITrackingOptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTrackingOptionsSignalError(OAITrackingOptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailInvoiceSignalError() instead")
    void emailInvoiceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void emailInvoiceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSignalError() instead")
    void getAccountSignalE(OAIAccounts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSignalError(OAIAccounts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountAttachmentByFileNameSignalError() instead")
    void getAccountAttachmentByFileNameSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountAttachmentByFileNameSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountAttachmentByIdSignalError() instead")
    void getAccountAttachmentByIdSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountAttachmentByIdSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountAttachmentsSignalError() instead")
    void getAccountAttachmentsSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountAttachmentsSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountsSignalError() instead")
    void getAccountsSignalE(OAIAccounts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountsSignalError(OAIAccounts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransactionSignalError() instead")
    void getBankTransactionSignalE(OAIBankTransactions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransactionSignalError(OAIBankTransactions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransactionAttachmentByFileNameSignalError() instead")
    void getBankTransactionAttachmentByFileNameSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransactionAttachmentByFileNameSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransactionAttachmentByIdSignalError() instead")
    void getBankTransactionAttachmentByIdSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransactionAttachmentByIdSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransactionAttachmentsSignalError() instead")
    void getBankTransactionAttachmentsSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransactionAttachmentsSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransactionsSignalError() instead")
    void getBankTransactionsSignalE(OAIBankTransactions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransactionsSignalError(OAIBankTransactions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransactionsHistorySignalError() instead")
    void getBankTransactionsHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransactionsHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransferSignalError() instead")
    void getBankTransferSignalE(OAIBankTransfers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransferSignalError(OAIBankTransfers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransferAttachmentByFileNameSignalError() instead")
    void getBankTransferAttachmentByFileNameSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransferAttachmentByFileNameSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransferAttachmentByIdSignalError() instead")
    void getBankTransferAttachmentByIdSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransferAttachmentByIdSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransferAttachmentsSignalError() instead")
    void getBankTransferAttachmentsSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransferAttachmentsSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransferHistorySignalError() instead")
    void getBankTransferHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransferHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransfersSignalError() instead")
    void getBankTransfersSignalE(OAIBankTransfers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransfersSignalError(OAIBankTransfers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchPaymentHistorySignalError() instead")
    void getBatchPaymentHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchPaymentHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchPaymentsSignalError() instead")
    void getBatchPaymentsSignalE(OAIBatchPayments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchPaymentsSignalError(OAIBatchPayments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBrandingThemeSignalError() instead")
    void getBrandingThemeSignalE(OAIBrandingThemes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBrandingThemeSignalError(OAIBrandingThemes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBrandingThemePaymentServicesSignalError() instead")
    void getBrandingThemePaymentServicesSignalE(OAIPaymentServices summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBrandingThemePaymentServicesSignalError(OAIPaymentServices summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBrandingThemesSignalError() instead")
    void getBrandingThemesSignalE(OAIBrandingThemes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBrandingThemesSignalError(OAIBrandingThemes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactSignalError() instead")
    void getContactSignalE(OAIContacts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactSignalError(OAIContacts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactAttachmentByFileNameSignalError() instead")
    void getContactAttachmentByFileNameSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactAttachmentByFileNameSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactAttachmentByIdSignalError() instead")
    void getContactAttachmentByIdSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactAttachmentByIdSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactAttachmentsSignalError() instead")
    void getContactAttachmentsSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactAttachmentsSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactByContactNumberSignalError() instead")
    void getContactByContactNumberSignalE(OAIContacts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactByContactNumberSignalError(OAIContacts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactCISSettingsSignalError() instead")
    void getContactCISSettingsSignalE(OAICISSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactCISSettingsSignalError(OAICISSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactGroupSignalError() instead")
    void getContactGroupSignalE(OAIContactGroups summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactGroupSignalError(OAIContactGroups summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactGroupsSignalError() instead")
    void getContactGroupsSignalE(OAIContactGroups summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactGroupsSignalError(OAIContactGroups summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactHistorySignalError() instead")
    void getContactHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactsSignalError() instead")
    void getContactsSignalE(OAIContacts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactsSignalError(OAIContacts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreditNoteSignalError() instead")
    void getCreditNoteSignalE(OAICreditNotes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreditNoteSignalError(OAICreditNotes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreditNoteAsPdfSignalError() instead")
    void getCreditNoteAsPdfSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreditNoteAsPdfSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreditNoteAttachmentByFileNameSignalError() instead")
    void getCreditNoteAttachmentByFileNameSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreditNoteAttachmentByFileNameSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreditNoteAttachmentByIdSignalError() instead")
    void getCreditNoteAttachmentByIdSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreditNoteAttachmentByIdSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreditNoteAttachmentsSignalError() instead")
    void getCreditNoteAttachmentsSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreditNoteAttachmentsSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreditNoteHistorySignalError() instead")
    void getCreditNoteHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreditNoteHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreditNotesSignalError() instead")
    void getCreditNotesSignalE(OAICreditNotes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreditNotesSignalError(OAICreditNotes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrenciesSignalError() instead")
    void getCurrenciesSignalE(OAICurrencies summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrenciesSignalError(OAICurrencies summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeSignalError() instead")
    void getEmployeeSignalE(OAIEmployees summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeSignalError(OAIEmployees summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesSignalError() instead")
    void getEmployeesSignalE(OAIEmployees summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesSignalError(OAIEmployees summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExpenseClaimSignalError() instead")
    void getExpenseClaimSignalE(OAIExpenseClaims summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExpenseClaimSignalError(OAIExpenseClaims summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExpenseClaimHistorySignalError() instead")
    void getExpenseClaimHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExpenseClaimHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExpenseClaimsSignalError() instead")
    void getExpenseClaimsSignalE(OAIExpenseClaims summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExpenseClaimsSignalError(OAIExpenseClaims summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceSignalError() instead")
    void getInvoiceSignalE(OAIInvoices summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceSignalError(OAIInvoices summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceAsPdfSignalError() instead")
    void getInvoiceAsPdfSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceAsPdfSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceAttachmentByFileNameSignalError() instead")
    void getInvoiceAttachmentByFileNameSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceAttachmentByFileNameSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceAttachmentByIdSignalError() instead")
    void getInvoiceAttachmentByIdSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceAttachmentByIdSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceAttachmentsSignalError() instead")
    void getInvoiceAttachmentsSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceAttachmentsSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceHistorySignalError() instead")
    void getInvoiceHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceRemindersSignalError() instead")
    void getInvoiceRemindersSignalE(OAIInvoiceReminders summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceRemindersSignalError(OAIInvoiceReminders summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoicesSignalError() instead")
    void getInvoicesSignalE(OAIInvoices summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoicesSignalError(OAIInvoices summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemSignalError() instead")
    void getItemSignalE(OAIItems summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemSignalError(OAIItems summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemHistorySignalError() instead")
    void getItemHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemsSignalError() instead")
    void getItemsSignalE(OAIItems summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemsSignalError(OAIItems summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalSignalError() instead")
    void getJournalSignalE(OAIJournals summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalSignalError(OAIJournals summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalsSignalError() instead")
    void getJournalsSignalE(OAIJournals summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalsSignalError(OAIJournals summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLinkedTransactionSignalError() instead")
    void getLinkedTransactionSignalE(OAILinkedTransactions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLinkedTransactionSignalError(OAILinkedTransactions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLinkedTransactionsSignalError() instead")
    void getLinkedTransactionsSignalE(OAILinkedTransactions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLinkedTransactionsSignalError(OAILinkedTransactions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getManualJournalSignalError() instead")
    void getManualJournalSignalE(OAIManualJournals summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getManualJournalSignalError(OAIManualJournals summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getManualJournalAttachmentByFileNameSignalError() instead")
    void getManualJournalAttachmentByFileNameSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getManualJournalAttachmentByFileNameSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getManualJournalAttachmentByIdSignalError() instead")
    void getManualJournalAttachmentByIdSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getManualJournalAttachmentByIdSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getManualJournalAttachmentsSignalError() instead")
    void getManualJournalAttachmentsSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getManualJournalAttachmentsSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getManualJournalsSignalError() instead")
    void getManualJournalsSignalE(OAIManualJournals summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getManualJournalsSignalError(OAIManualJournals summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getManualJournalsHistorySignalError() instead")
    void getManualJournalsHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getManualJournalsHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOnlineInvoiceSignalError() instead")
    void getOnlineInvoiceSignalE(OAIOnlineInvoices summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOnlineInvoiceSignalError(OAIOnlineInvoices summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationActionsSignalError() instead")
    void getOrganisationActionsSignalE(OAIActions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationActionsSignalError(OAIActions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationCISSettingsSignalError() instead")
    void getOrganisationCISSettingsSignalE(OAICISOrgSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationCISSettingsSignalError(OAICISOrgSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsSignalError() instead")
    void getOrganisationsSignalE(OAIOrganisations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsSignalError(OAIOrganisations summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOverpaymentSignalError() instead")
    void getOverpaymentSignalE(OAIOverpayments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOverpaymentSignalError(OAIOverpayments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOverpaymentHistorySignalError() instead")
    void getOverpaymentHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOverpaymentHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOverpaymentsSignalError() instead")
    void getOverpaymentsSignalE(OAIOverpayments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOverpaymentsSignalError(OAIOverpayments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentSignalError() instead")
    void getPaymentSignalE(OAIPayments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentSignalError(OAIPayments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentHistorySignalError() instead")
    void getPaymentHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentServicesSignalError() instead")
    void getPaymentServicesSignalE(OAIPaymentServices summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentServicesSignalError(OAIPaymentServices summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsSignalError() instead")
    void getPaymentsSignalE(OAIPayments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsSignalError(OAIPayments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrepaymentSignalError() instead")
    void getPrepaymentSignalE(OAIPrepayments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPrepaymentSignalError(OAIPrepayments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrepaymentHistorySignalError() instead")
    void getPrepaymentHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPrepaymentHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrepaymentsSignalError() instead")
    void getPrepaymentsSignalE(OAIPrepayments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPrepaymentsSignalError(OAIPrepayments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPurchaseOrderSignalError() instead")
    void getPurchaseOrderSignalE(OAIPurchaseOrders summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPurchaseOrderSignalError(OAIPurchaseOrders summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPurchaseOrderAsPdfSignalError() instead")
    void getPurchaseOrderAsPdfSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPurchaseOrderAsPdfSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPurchaseOrderAttachmentByFileNameSignalError() instead")
    void getPurchaseOrderAttachmentByFileNameSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPurchaseOrderAttachmentByFileNameSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPurchaseOrderAttachmentByIdSignalError() instead")
    void getPurchaseOrderAttachmentByIdSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPurchaseOrderAttachmentByIdSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPurchaseOrderAttachmentsSignalError() instead")
    void getPurchaseOrderAttachmentsSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPurchaseOrderAttachmentsSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPurchaseOrderByNumberSignalError() instead")
    void getPurchaseOrderByNumberSignalE(OAIPurchaseOrders summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPurchaseOrderByNumberSignalError(OAIPurchaseOrders summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPurchaseOrderHistorySignalError() instead")
    void getPurchaseOrderHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPurchaseOrderHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPurchaseOrdersSignalError() instead")
    void getPurchaseOrdersSignalE(OAIPurchaseOrders summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPurchaseOrdersSignalError(OAIPurchaseOrders summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteSignalError() instead")
    void getQuoteSignalE(OAIQuotes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteSignalError(OAIQuotes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteAsPdfSignalError() instead")
    void getQuoteAsPdfSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteAsPdfSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteAttachmentByFileNameSignalError() instead")
    void getQuoteAttachmentByFileNameSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteAttachmentByFileNameSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteAttachmentByIdSignalError() instead")
    void getQuoteAttachmentByIdSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteAttachmentByIdSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteAttachmentsSignalError() instead")
    void getQuoteAttachmentsSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteAttachmentsSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteHistorySignalError() instead")
    void getQuoteHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuotesSignalError() instead")
    void getQuotesSignalE(OAIQuotes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuotesSignalError(OAIQuotes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReceiptSignalError() instead")
    void getReceiptSignalE(OAIReceipts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReceiptSignalError(OAIReceipts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReceiptAttachmentByFileNameSignalError() instead")
    void getReceiptAttachmentByFileNameSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReceiptAttachmentByFileNameSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReceiptAttachmentByIdSignalError() instead")
    void getReceiptAttachmentByIdSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReceiptAttachmentByIdSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReceiptAttachmentsSignalError() instead")
    void getReceiptAttachmentsSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReceiptAttachmentsSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReceiptHistorySignalError() instead")
    void getReceiptHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReceiptHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReceiptsSignalError() instead")
    void getReceiptsSignalE(OAIReceipts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReceiptsSignalError(OAIReceipts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepeatingInvoiceSignalError() instead")
    void getRepeatingInvoiceSignalE(OAIRepeatingInvoices summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepeatingInvoiceSignalError(OAIRepeatingInvoices summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepeatingInvoiceAttachmentByFileNameSignalError() instead")
    void getRepeatingInvoiceAttachmentByFileNameSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepeatingInvoiceAttachmentByFileNameSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepeatingInvoiceAttachmentByIdSignalError() instead")
    void getRepeatingInvoiceAttachmentByIdSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepeatingInvoiceAttachmentByIdSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepeatingInvoiceAttachmentsSignalError() instead")
    void getRepeatingInvoiceAttachmentsSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepeatingInvoiceAttachmentsSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepeatingInvoiceHistorySignalError() instead")
    void getRepeatingInvoiceHistorySignalE(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepeatingInvoiceHistorySignalError(OAIHistoryRecords summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepeatingInvoicesSignalError() instead")
    void getRepeatingInvoicesSignalE(OAIRepeatingInvoices summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepeatingInvoicesSignalError(OAIRepeatingInvoices summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportAgedPayablesByContactSignalError() instead")
    void getReportAgedPayablesByContactSignalE(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportAgedPayablesByContactSignalError(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportAgedReceivablesByContactSignalError() instead")
    void getReportAgedReceivablesByContactSignalE(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportAgedReceivablesByContactSignalError(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportBASorGSTSignalError() instead")
    void getReportBASorGSTSignalE(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportBASorGSTSignalError(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportBASorGSTListSignalError() instead")
    void getReportBASorGSTListSignalE(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportBASorGSTListSignalError(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportBalanceSheetSignalError() instead")
    void getReportBalanceSheetSignalE(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportBalanceSheetSignalError(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportBankSummarySignalError() instead")
    void getReportBankSummarySignalE(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportBankSummarySignalError(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportBudgetSummarySignalError() instead")
    void getReportBudgetSummarySignalE(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportBudgetSummarySignalError(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportExecutiveSummarySignalError() instead")
    void getReportExecutiveSummarySignalE(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportExecutiveSummarySignalError(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportProfitAndLossSignalError() instead")
    void getReportProfitAndLossSignalE(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportProfitAndLossSignalError(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportTenNinetyNineSignalError() instead")
    void getReportTenNinetyNineSignalE(OAIReports summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportTenNinetyNineSignalError(OAIReports summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportTrialBalanceSignalError() instead")
    void getReportTrialBalanceSignalE(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportTrialBalanceSignalError(OAIReportWithRows summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaxRatesSignalError() instead")
    void getTaxRatesSignalE(OAITaxRates summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaxRatesSignalError(OAITaxRates summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackingCategoriesSignalError() instead")
    void getTrackingCategoriesSignalE(OAITrackingCategories summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackingCategoriesSignalError(OAITrackingCategories summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackingCategorySignalError() instead")
    void getTrackingCategorySignalE(OAITrackingCategories summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackingCategorySignalError(OAITrackingCategories summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalError() instead")
    void getUserSignalE(OAIUsers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalError(OAIUsers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalError() instead")
    void getUsersSignalE(OAIUsers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalError(OAIUsers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSetupSignalError() instead")
    void postSetupSignalE(OAIImportSummaryObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSetupSignalError(OAIImportSummaryObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSignalError() instead")
    void updateAccountSignalE(OAIAccounts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSignalError(OAIAccounts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountAttachmentByFileNameSignalError() instead")
    void updateAccountAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBankTransactionSignalError() instead")
    void updateBankTransactionSignalE(OAIBankTransactions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBankTransactionSignalError(OAIBankTransactions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBankTransactionAttachmentByFileNameSignalError() instead")
    void updateBankTransactionAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBankTransactionAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBankTransferAttachmentByFileNameSignalError() instead")
    void updateBankTransferAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBankTransferAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContactSignalError() instead")
    void updateContactSignalE(OAIContacts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContactSignalError(OAIContacts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContactAttachmentByFileNameSignalError() instead")
    void updateContactAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContactAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContactGroupSignalError() instead")
    void updateContactGroupSignalE(OAIContactGroups summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContactGroupSignalError(OAIContactGroups summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCreditNoteSignalError() instead")
    void updateCreditNoteSignalE(OAICreditNotes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCreditNoteSignalError(OAICreditNotes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCreditNoteAttachmentByFileNameSignalError() instead")
    void updateCreditNoteAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCreditNoteAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateExpenseClaimSignalError() instead")
    void updateExpenseClaimSignalE(OAIExpenseClaims summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateExpenseClaimSignalError(OAIExpenseClaims summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInvoiceSignalError() instead")
    void updateInvoiceSignalE(OAIInvoices summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInvoiceSignalError(OAIInvoices summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInvoiceAttachmentByFileNameSignalError() instead")
    void updateInvoiceAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInvoiceAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateItemSignalError() instead")
    void updateItemSignalE(OAIItems summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateItemSignalError(OAIItems summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLinkedTransactionSignalError() instead")
    void updateLinkedTransactionSignalE(OAILinkedTransactions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLinkedTransactionSignalError(OAILinkedTransactions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateManualJournalSignalError() instead")
    void updateManualJournalSignalE(OAIManualJournals summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateManualJournalSignalError(OAIManualJournals summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateManualJournalAttachmentByFileNameSignalError() instead")
    void updateManualJournalAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateManualJournalAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrCreateBankTransactionsSignalError() instead")
    void updateOrCreateBankTransactionsSignalE(OAIBankTransactions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrCreateBankTransactionsSignalError(OAIBankTransactions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrCreateContactsSignalError() instead")
    void updateOrCreateContactsSignalE(OAIContacts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrCreateContactsSignalError(OAIContacts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrCreateCreditNotesSignalError() instead")
    void updateOrCreateCreditNotesSignalE(OAICreditNotes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrCreateCreditNotesSignalError(OAICreditNotes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrCreateEmployeesSignalError() instead")
    void updateOrCreateEmployeesSignalE(OAIEmployees summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrCreateEmployeesSignalError(OAIEmployees summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrCreateInvoicesSignalError() instead")
    void updateOrCreateInvoicesSignalE(OAIInvoices summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrCreateInvoicesSignalError(OAIInvoices summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrCreateItemsSignalError() instead")
    void updateOrCreateItemsSignalE(OAIItems summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrCreateItemsSignalError(OAIItems summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrCreateManualJournalsSignalError() instead")
    void updateOrCreateManualJournalsSignalE(OAIManualJournals summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrCreateManualJournalsSignalError(OAIManualJournals summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrCreatePurchaseOrdersSignalError() instead")
    void updateOrCreatePurchaseOrdersSignalE(OAIPurchaseOrders summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrCreatePurchaseOrdersSignalError(OAIPurchaseOrders summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrCreateQuotesSignalError() instead")
    void updateOrCreateQuotesSignalE(OAIQuotes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrCreateQuotesSignalError(OAIQuotes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePurchaseOrderSignalError() instead")
    void updatePurchaseOrderSignalE(OAIPurchaseOrders summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePurchaseOrderSignalError(OAIPurchaseOrders summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePurchaseOrderAttachmentByFileNameSignalError() instead")
    void updatePurchaseOrderAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePurchaseOrderAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateQuoteSignalError() instead")
    void updateQuoteSignalE(OAIQuotes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateQuoteSignalError(OAIQuotes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateQuoteAttachmentByFileNameSignalError() instead")
    void updateQuoteAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateQuoteAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateReceiptSignalError() instead")
    void updateReceiptSignalE(OAIReceipts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateReceiptSignalError(OAIReceipts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateReceiptAttachmentByFileNameSignalError() instead")
    void updateReceiptAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateReceiptAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepeatingInvoiceAttachmentByFileNameSignalError() instead")
    void updateRepeatingInvoiceAttachmentByFileNameSignalE(OAIAttachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepeatingInvoiceAttachmentByFileNameSignalError(OAIAttachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTaxRateSignalError() instead")
    void updateTaxRateSignalE(OAITaxRates summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTaxRateSignalError(OAITaxRates summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTrackingCategorySignalError() instead")
    void updateTrackingCategorySignalE(OAITrackingCategories summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTrackingCategorySignalError(OAITrackingCategories summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTrackingOptionsSignalError() instead")
    void updateTrackingOptionsSignalE(OAITrackingOptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTrackingOptionsSignalError(OAITrackingOptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAccountSignalErrorFull() instead")
    void createAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAccountAttachmentByFileNameSignalErrorFull() instead")
    void createAccountAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBankTransactionAttachmentByFileNameSignalErrorFull() instead")
    void createBankTransactionAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBankTransactionAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBankTransactionHistoryRecordSignalErrorFull() instead")
    void createBankTransactionHistoryRecordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBankTransactionHistoryRecordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBankTransactionsSignalErrorFull() instead")
    void createBankTransactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBankTransactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBankTransferSignalErrorFull() instead")
    void createBankTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBankTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBankTransferAttachmentByFileNameSignalErrorFull() instead")
    void createBankTransferAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBankTransferAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBankTransferHistoryRecordSignalErrorFull() instead")
    void createBankTransferHistoryRecordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBankTransferHistoryRecordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBatchPaymentSignalErrorFull() instead")
    void createBatchPaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBatchPaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBatchPaymentHistoryRecordSignalErrorFull() instead")
    void createBatchPaymentHistoryRecordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBatchPaymentHistoryRecordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBrandingThemePaymentServicesSignalErrorFull() instead")
    void createBrandingThemePaymentServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBrandingThemePaymentServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createContactAttachmentByFileNameSignalErrorFull() instead")
    void createContactAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createContactAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createContactGroupSignalErrorFull() instead")
    void createContactGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createContactGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createContactGroupContactsSignalErrorFull() instead")
    void createContactGroupContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createContactGroupContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createContactHistorySignalErrorFull() instead")
    void createContactHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createContactHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createContactsSignalErrorFull() instead")
    void createContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCreditNoteAllocationSignalErrorFull() instead")
    void createCreditNoteAllocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCreditNoteAllocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCreditNoteAttachmentByFileNameSignalErrorFull() instead")
    void createCreditNoteAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCreditNoteAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCreditNoteHistorySignalErrorFull() instead")
    void createCreditNoteHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCreditNoteHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCreditNotesSignalErrorFull() instead")
    void createCreditNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCreditNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCurrencySignalErrorFull() instead")
    void createCurrencySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCurrencySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createEmployeesSignalErrorFull() instead")
    void createEmployeesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createEmployeesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createExpenseClaimHistorySignalErrorFull() instead")
    void createExpenseClaimHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createExpenseClaimHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createExpenseClaimsSignalErrorFull() instead")
    void createExpenseClaimsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createExpenseClaimsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvoiceAttachmentByFileNameSignalErrorFull() instead")
    void createInvoiceAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvoiceAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvoiceHistorySignalErrorFull() instead")
    void createInvoiceHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvoiceHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvoicesSignalErrorFull() instead")
    void createInvoicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvoicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createItemHistorySignalErrorFull() instead")
    void createItemHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createItemHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createItemsSignalErrorFull() instead")
    void createItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLinkedTransactionSignalErrorFull() instead")
    void createLinkedTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLinkedTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createManualJournalAttachmentByFileNameSignalErrorFull() instead")
    void createManualJournalAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createManualJournalAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createManualJournalHistoryRecordSignalErrorFull() instead")
    void createManualJournalHistoryRecordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createManualJournalHistoryRecordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createManualJournalsSignalErrorFull() instead")
    void createManualJournalsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createManualJournalsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOverpaymentAllocationsSignalErrorFull() instead")
    void createOverpaymentAllocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOverpaymentAllocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOverpaymentHistorySignalErrorFull() instead")
    void createOverpaymentHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOverpaymentHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPaymentSignalErrorFull() instead")
    void createPaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPaymentHistorySignalErrorFull() instead")
    void createPaymentHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPaymentServiceSignalErrorFull() instead")
    void createPaymentServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPaymentsSignalErrorFull() instead")
    void createPaymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPrepaymentAllocationsSignalErrorFull() instead")
    void createPrepaymentAllocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPrepaymentAllocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPrepaymentHistorySignalErrorFull() instead")
    void createPrepaymentHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPrepaymentHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPurchaseOrderAttachmentByFileNameSignalErrorFull() instead")
    void createPurchaseOrderAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPurchaseOrderAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPurchaseOrderHistorySignalErrorFull() instead")
    void createPurchaseOrderHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPurchaseOrderHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPurchaseOrdersSignalErrorFull() instead")
    void createPurchaseOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPurchaseOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createQuoteAttachmentByFileNameSignalErrorFull() instead")
    void createQuoteAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createQuoteAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createQuoteHistorySignalErrorFull() instead")
    void createQuoteHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createQuoteHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createQuotesSignalErrorFull() instead")
    void createQuotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createQuotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReceiptSignalErrorFull() instead")
    void createReceiptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createReceiptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReceiptAttachmentByFileNameSignalErrorFull() instead")
    void createReceiptAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createReceiptAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReceiptHistorySignalErrorFull() instead")
    void createReceiptHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createReceiptHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRepeatingInvoiceAttachmentByFileNameSignalErrorFull() instead")
    void createRepeatingInvoiceAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRepeatingInvoiceAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRepeatingInvoiceHistorySignalErrorFull() instead")
    void createRepeatingInvoiceHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRepeatingInvoiceHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTaxRatesSignalErrorFull() instead")
    void createTaxRatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTaxRatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTrackingCategorySignalErrorFull() instead")
    void createTrackingCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrackingCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTrackingOptionsSignalErrorFull() instead")
    void createTrackingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrackingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountSignalErrorFull() instead")
    void deleteAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteContactGroupContactSignalErrorFull() instead")
    void deleteContactGroupContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteContactGroupContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteContactGroupContactsSignalErrorFull() instead")
    void deleteContactGroupContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteContactGroupContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteItemSignalErrorFull() instead")
    void deleteItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLinkedTransactionSignalErrorFull() instead")
    void deleteLinkedTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLinkedTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePaymentSignalErrorFull() instead")
    void deletePaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTrackingCategorySignalErrorFull() instead")
    void deleteTrackingCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTrackingCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTrackingOptionsSignalErrorFull() instead")
    void deleteTrackingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTrackingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailInvoiceSignalErrorFull() instead")
    void emailInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void emailInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSignalErrorFull() instead")
    void getAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountAttachmentByFileNameSignalErrorFull() instead")
    void getAccountAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountAttachmentByIdSignalErrorFull() instead")
    void getAccountAttachmentByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountAttachmentByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountAttachmentsSignalErrorFull() instead")
    void getAccountAttachmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountAttachmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountsSignalErrorFull() instead")
    void getAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransactionSignalErrorFull() instead")
    void getBankTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransactionAttachmentByFileNameSignalErrorFull() instead")
    void getBankTransactionAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransactionAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransactionAttachmentByIdSignalErrorFull() instead")
    void getBankTransactionAttachmentByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransactionAttachmentByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransactionAttachmentsSignalErrorFull() instead")
    void getBankTransactionAttachmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransactionAttachmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransactionsSignalErrorFull() instead")
    void getBankTransactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransactionsHistorySignalErrorFull() instead")
    void getBankTransactionsHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransactionsHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransferSignalErrorFull() instead")
    void getBankTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransferAttachmentByFileNameSignalErrorFull() instead")
    void getBankTransferAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransferAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransferAttachmentByIdSignalErrorFull() instead")
    void getBankTransferAttachmentByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransferAttachmentByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransferAttachmentsSignalErrorFull() instead")
    void getBankTransferAttachmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransferAttachmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransferHistorySignalErrorFull() instead")
    void getBankTransferHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransferHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankTransfersSignalErrorFull() instead")
    void getBankTransfersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankTransfersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchPaymentHistorySignalErrorFull() instead")
    void getBatchPaymentHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchPaymentHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchPaymentsSignalErrorFull() instead")
    void getBatchPaymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchPaymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBrandingThemeSignalErrorFull() instead")
    void getBrandingThemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBrandingThemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBrandingThemePaymentServicesSignalErrorFull() instead")
    void getBrandingThemePaymentServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBrandingThemePaymentServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBrandingThemesSignalErrorFull() instead")
    void getBrandingThemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBrandingThemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactSignalErrorFull() instead")
    void getContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactAttachmentByFileNameSignalErrorFull() instead")
    void getContactAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactAttachmentByIdSignalErrorFull() instead")
    void getContactAttachmentByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactAttachmentByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactAttachmentsSignalErrorFull() instead")
    void getContactAttachmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactAttachmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactByContactNumberSignalErrorFull() instead")
    void getContactByContactNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactByContactNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactCISSettingsSignalErrorFull() instead")
    void getContactCISSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactCISSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactGroupSignalErrorFull() instead")
    void getContactGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactGroupsSignalErrorFull() instead")
    void getContactGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactHistorySignalErrorFull() instead")
    void getContactHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactsSignalErrorFull() instead")
    void getContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreditNoteSignalErrorFull() instead")
    void getCreditNoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreditNoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreditNoteAsPdfSignalErrorFull() instead")
    void getCreditNoteAsPdfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreditNoteAsPdfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreditNoteAttachmentByFileNameSignalErrorFull() instead")
    void getCreditNoteAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreditNoteAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreditNoteAttachmentByIdSignalErrorFull() instead")
    void getCreditNoteAttachmentByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreditNoteAttachmentByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreditNoteAttachmentsSignalErrorFull() instead")
    void getCreditNoteAttachmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreditNoteAttachmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreditNoteHistorySignalErrorFull() instead")
    void getCreditNoteHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreditNoteHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreditNotesSignalErrorFull() instead")
    void getCreditNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreditNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrenciesSignalErrorFull() instead")
    void getCurrenciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrenciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeSignalErrorFull() instead")
    void getEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesSignalErrorFull() instead")
    void getEmployeesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExpenseClaimSignalErrorFull() instead")
    void getExpenseClaimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExpenseClaimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExpenseClaimHistorySignalErrorFull() instead")
    void getExpenseClaimHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExpenseClaimHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExpenseClaimsSignalErrorFull() instead")
    void getExpenseClaimsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExpenseClaimsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceSignalErrorFull() instead")
    void getInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceAsPdfSignalErrorFull() instead")
    void getInvoiceAsPdfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceAsPdfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceAttachmentByFileNameSignalErrorFull() instead")
    void getInvoiceAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceAttachmentByIdSignalErrorFull() instead")
    void getInvoiceAttachmentByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceAttachmentByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceAttachmentsSignalErrorFull() instead")
    void getInvoiceAttachmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceAttachmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceHistorySignalErrorFull() instead")
    void getInvoiceHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceRemindersSignalErrorFull() instead")
    void getInvoiceRemindersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceRemindersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoicesSignalErrorFull() instead")
    void getInvoicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemSignalErrorFull() instead")
    void getItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemHistorySignalErrorFull() instead")
    void getItemHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemsSignalErrorFull() instead")
    void getItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalSignalErrorFull() instead")
    void getJournalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalsSignalErrorFull() instead")
    void getJournalsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLinkedTransactionSignalErrorFull() instead")
    void getLinkedTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLinkedTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLinkedTransactionsSignalErrorFull() instead")
    void getLinkedTransactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLinkedTransactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getManualJournalSignalErrorFull() instead")
    void getManualJournalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getManualJournalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getManualJournalAttachmentByFileNameSignalErrorFull() instead")
    void getManualJournalAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getManualJournalAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getManualJournalAttachmentByIdSignalErrorFull() instead")
    void getManualJournalAttachmentByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getManualJournalAttachmentByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getManualJournalAttachmentsSignalErrorFull() instead")
    void getManualJournalAttachmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getManualJournalAttachmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getManualJournalsSignalErrorFull() instead")
    void getManualJournalsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getManualJournalsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getManualJournalsHistorySignalErrorFull() instead")
    void getManualJournalsHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getManualJournalsHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOnlineInvoiceSignalErrorFull() instead")
    void getOnlineInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOnlineInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationActionsSignalErrorFull() instead")
    void getOrganisationActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationCISSettingsSignalErrorFull() instead")
    void getOrganisationCISSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationCISSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsSignalErrorFull() instead")
    void getOrganisationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOverpaymentSignalErrorFull() instead")
    void getOverpaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOverpaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOverpaymentHistorySignalErrorFull() instead")
    void getOverpaymentHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOverpaymentHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOverpaymentsSignalErrorFull() instead")
    void getOverpaymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOverpaymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentSignalErrorFull() instead")
    void getPaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentHistorySignalErrorFull() instead")
    void getPaymentHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentServicesSignalErrorFull() instead")
    void getPaymentServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsSignalErrorFull() instead")
    void getPaymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrepaymentSignalErrorFull() instead")
    void getPrepaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPrepaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrepaymentHistorySignalErrorFull() instead")
    void getPrepaymentHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPrepaymentHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrepaymentsSignalErrorFull() instead")
    void getPrepaymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPrepaymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPurchaseOrderSignalErrorFull() instead")
    void getPurchaseOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPurchaseOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPurchaseOrderAsPdfSignalErrorFull() instead")
    void getPurchaseOrderAsPdfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPurchaseOrderAsPdfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPurchaseOrderAttachmentByFileNameSignalErrorFull() instead")
    void getPurchaseOrderAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPurchaseOrderAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPurchaseOrderAttachmentByIdSignalErrorFull() instead")
    void getPurchaseOrderAttachmentByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPurchaseOrderAttachmentByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPurchaseOrderAttachmentsSignalErrorFull() instead")
    void getPurchaseOrderAttachmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPurchaseOrderAttachmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPurchaseOrderByNumberSignalErrorFull() instead")
    void getPurchaseOrderByNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPurchaseOrderByNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPurchaseOrderHistorySignalErrorFull() instead")
    void getPurchaseOrderHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPurchaseOrderHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPurchaseOrdersSignalErrorFull() instead")
    void getPurchaseOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPurchaseOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteSignalErrorFull() instead")
    void getQuoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteAsPdfSignalErrorFull() instead")
    void getQuoteAsPdfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteAsPdfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteAttachmentByFileNameSignalErrorFull() instead")
    void getQuoteAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteAttachmentByIdSignalErrorFull() instead")
    void getQuoteAttachmentByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteAttachmentByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteAttachmentsSignalErrorFull() instead")
    void getQuoteAttachmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteAttachmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteHistorySignalErrorFull() instead")
    void getQuoteHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuotesSignalErrorFull() instead")
    void getQuotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReceiptSignalErrorFull() instead")
    void getReceiptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReceiptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReceiptAttachmentByFileNameSignalErrorFull() instead")
    void getReceiptAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReceiptAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReceiptAttachmentByIdSignalErrorFull() instead")
    void getReceiptAttachmentByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReceiptAttachmentByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReceiptAttachmentsSignalErrorFull() instead")
    void getReceiptAttachmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReceiptAttachmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReceiptHistorySignalErrorFull() instead")
    void getReceiptHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReceiptHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReceiptsSignalErrorFull() instead")
    void getReceiptsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReceiptsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepeatingInvoiceSignalErrorFull() instead")
    void getRepeatingInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepeatingInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepeatingInvoiceAttachmentByFileNameSignalErrorFull() instead")
    void getRepeatingInvoiceAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepeatingInvoiceAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepeatingInvoiceAttachmentByIdSignalErrorFull() instead")
    void getRepeatingInvoiceAttachmentByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepeatingInvoiceAttachmentByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepeatingInvoiceAttachmentsSignalErrorFull() instead")
    void getRepeatingInvoiceAttachmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepeatingInvoiceAttachmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepeatingInvoiceHistorySignalErrorFull() instead")
    void getRepeatingInvoiceHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepeatingInvoiceHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepeatingInvoicesSignalErrorFull() instead")
    void getRepeatingInvoicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepeatingInvoicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportAgedPayablesByContactSignalErrorFull() instead")
    void getReportAgedPayablesByContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportAgedPayablesByContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportAgedReceivablesByContactSignalErrorFull() instead")
    void getReportAgedReceivablesByContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportAgedReceivablesByContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportBASorGSTSignalErrorFull() instead")
    void getReportBASorGSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportBASorGSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportBASorGSTListSignalErrorFull() instead")
    void getReportBASorGSTListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportBASorGSTListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportBalanceSheetSignalErrorFull() instead")
    void getReportBalanceSheetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportBalanceSheetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportBankSummarySignalErrorFull() instead")
    void getReportBankSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportBankSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportBudgetSummarySignalErrorFull() instead")
    void getReportBudgetSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportBudgetSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportExecutiveSummarySignalErrorFull() instead")
    void getReportExecutiveSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportExecutiveSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportProfitAndLossSignalErrorFull() instead")
    void getReportProfitAndLossSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportProfitAndLossSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportTenNinetyNineSignalErrorFull() instead")
    void getReportTenNinetyNineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportTenNinetyNineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportTrialBalanceSignalErrorFull() instead")
    void getReportTrialBalanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportTrialBalanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaxRatesSignalErrorFull() instead")
    void getTaxRatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaxRatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackingCategoriesSignalErrorFull() instead")
    void getTrackingCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackingCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackingCategorySignalErrorFull() instead")
    void getTrackingCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackingCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalErrorFull() instead")
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalErrorFull() instead")
    void getUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSetupSignalErrorFull() instead")
    void postSetupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSetupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSignalErrorFull() instead")
    void updateAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountAttachmentByFileNameSignalErrorFull() instead")
    void updateAccountAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBankTransactionSignalErrorFull() instead")
    void updateBankTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBankTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBankTransactionAttachmentByFileNameSignalErrorFull() instead")
    void updateBankTransactionAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBankTransactionAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBankTransferAttachmentByFileNameSignalErrorFull() instead")
    void updateBankTransferAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBankTransferAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContactSignalErrorFull() instead")
    void updateContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContactAttachmentByFileNameSignalErrorFull() instead")
    void updateContactAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContactAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContactGroupSignalErrorFull() instead")
    void updateContactGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContactGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCreditNoteSignalErrorFull() instead")
    void updateCreditNoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCreditNoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCreditNoteAttachmentByFileNameSignalErrorFull() instead")
    void updateCreditNoteAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCreditNoteAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateExpenseClaimSignalErrorFull() instead")
    void updateExpenseClaimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateExpenseClaimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInvoiceSignalErrorFull() instead")
    void updateInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInvoiceAttachmentByFileNameSignalErrorFull() instead")
    void updateInvoiceAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInvoiceAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateItemSignalErrorFull() instead")
    void updateItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLinkedTransactionSignalErrorFull() instead")
    void updateLinkedTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLinkedTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateManualJournalSignalErrorFull() instead")
    void updateManualJournalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateManualJournalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateManualJournalAttachmentByFileNameSignalErrorFull() instead")
    void updateManualJournalAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateManualJournalAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrCreateBankTransactionsSignalErrorFull() instead")
    void updateOrCreateBankTransactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrCreateBankTransactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrCreateContactsSignalErrorFull() instead")
    void updateOrCreateContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrCreateContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrCreateCreditNotesSignalErrorFull() instead")
    void updateOrCreateCreditNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrCreateCreditNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrCreateEmployeesSignalErrorFull() instead")
    void updateOrCreateEmployeesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrCreateEmployeesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrCreateInvoicesSignalErrorFull() instead")
    void updateOrCreateInvoicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrCreateInvoicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrCreateItemsSignalErrorFull() instead")
    void updateOrCreateItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrCreateItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrCreateManualJournalsSignalErrorFull() instead")
    void updateOrCreateManualJournalsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrCreateManualJournalsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrCreatePurchaseOrdersSignalErrorFull() instead")
    void updateOrCreatePurchaseOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrCreatePurchaseOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrCreateQuotesSignalErrorFull() instead")
    void updateOrCreateQuotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrCreateQuotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePurchaseOrderSignalErrorFull() instead")
    void updatePurchaseOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePurchaseOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePurchaseOrderAttachmentByFileNameSignalErrorFull() instead")
    void updatePurchaseOrderAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePurchaseOrderAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateQuoteSignalErrorFull() instead")
    void updateQuoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateQuoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateQuoteAttachmentByFileNameSignalErrorFull() instead")
    void updateQuoteAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateQuoteAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateReceiptSignalErrorFull() instead")
    void updateReceiptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateReceiptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateReceiptAttachmentByFileNameSignalErrorFull() instead")
    void updateReceiptAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateReceiptAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepeatingInvoiceAttachmentByFileNameSignalErrorFull() instead")
    void updateRepeatingInvoiceAttachmentByFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepeatingInvoiceAttachmentByFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTaxRateSignalErrorFull() instead")
    void updateTaxRateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTaxRateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTrackingCategorySignalErrorFull() instead")
    void updateTrackingCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTrackingCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTrackingOptionsSignalErrorFull() instead")
    void updateTrackingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTrackingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
