/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITenNinetyNineContact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITenNinetyNineContact::OAITenNinetyNineContact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITenNinetyNineContact::OAITenNinetyNineContact() {
    this->initializeModel();
}

OAITenNinetyNineContact::~OAITenNinetyNineContact() {}

void OAITenNinetyNineContact::initializeModel() {

    m_box1_isSet = false;
    m_box1_isValid = false;

    m_box10_isSet = false;
    m_box10_isValid = false;

    m_box11_isSet = false;
    m_box11_isValid = false;

    m_box13_isSet = false;
    m_box13_isValid = false;

    m_box14_isSet = false;
    m_box14_isValid = false;

    m_box2_isSet = false;
    m_box2_isValid = false;

    m_box3_isSet = false;
    m_box3_isValid = false;

    m_box4_isSet = false;
    m_box4_isValid = false;

    m_box5_isSet = false;
    m_box5_isValid = false;

    m_box6_isSet = false;
    m_box6_isValid = false;

    m_box7_isSet = false;
    m_box7_isValid = false;

    m_box8_isSet = false;
    m_box8_isValid = false;

    m_box9_isSet = false;
    m_box9_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_federal_tax_id_type_isSet = false;
    m_federal_tax_id_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_street_address_isSet = false;
    m_street_address_isValid = false;

    m_tax_id_isSet = false;
    m_tax_id_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAITenNinetyNineContact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITenNinetyNineContact::fromJsonObject(QJsonObject json) {

    m_box1_isValid = ::OpenAPI::fromJsonValue(m_box1, json[QString("Box1")]);
    m_box1_isSet = !json[QString("Box1")].isNull() && m_box1_isValid;

    m_box10_isValid = ::OpenAPI::fromJsonValue(m_box10, json[QString("Box10")]);
    m_box10_isSet = !json[QString("Box10")].isNull() && m_box10_isValid;

    m_box11_isValid = ::OpenAPI::fromJsonValue(m_box11, json[QString("Box11")]);
    m_box11_isSet = !json[QString("Box11")].isNull() && m_box11_isValid;

    m_box13_isValid = ::OpenAPI::fromJsonValue(m_box13, json[QString("Box13")]);
    m_box13_isSet = !json[QString("Box13")].isNull() && m_box13_isValid;

    m_box14_isValid = ::OpenAPI::fromJsonValue(m_box14, json[QString("Box14")]);
    m_box14_isSet = !json[QString("Box14")].isNull() && m_box14_isValid;

    m_box2_isValid = ::OpenAPI::fromJsonValue(m_box2, json[QString("Box2")]);
    m_box2_isSet = !json[QString("Box2")].isNull() && m_box2_isValid;

    m_box3_isValid = ::OpenAPI::fromJsonValue(m_box3, json[QString("Box3")]);
    m_box3_isSet = !json[QString("Box3")].isNull() && m_box3_isValid;

    m_box4_isValid = ::OpenAPI::fromJsonValue(m_box4, json[QString("Box4")]);
    m_box4_isSet = !json[QString("Box4")].isNull() && m_box4_isValid;

    m_box5_isValid = ::OpenAPI::fromJsonValue(m_box5, json[QString("Box5")]);
    m_box5_isSet = !json[QString("Box5")].isNull() && m_box5_isValid;

    m_box6_isValid = ::OpenAPI::fromJsonValue(m_box6, json[QString("Box6")]);
    m_box6_isSet = !json[QString("Box6")].isNull() && m_box6_isValid;

    m_box7_isValid = ::OpenAPI::fromJsonValue(m_box7, json[QString("Box7")]);
    m_box7_isSet = !json[QString("Box7")].isNull() && m_box7_isValid;

    m_box8_isValid = ::OpenAPI::fromJsonValue(m_box8, json[QString("Box8")]);
    m_box8_isSet = !json[QString("Box8")].isNull() && m_box8_isValid;

    m_box9_isValid = ::OpenAPI::fromJsonValue(m_box9, json[QString("Box9")]);
    m_box9_isSet = !json[QString("Box9")].isNull() && m_box9_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("City")]);
    m_city_isSet = !json[QString("City")].isNull() && m_city_isValid;

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("ContactId")]);
    m_contact_id_isSet = !json[QString("ContactId")].isNull() && m_contact_id_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_federal_tax_id_type_isValid = ::OpenAPI::fromJsonValue(m_federal_tax_id_type, json[QString("FederalTaxIDType")]);
    m_federal_tax_id_type_isSet = !json[QString("FederalTaxIDType")].isNull() && m_federal_tax_id_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_street_address_isValid = ::OpenAPI::fromJsonValue(m_street_address, json[QString("StreetAddress")]);
    m_street_address_isSet = !json[QString("StreetAddress")].isNull() && m_street_address_isValid;

    m_tax_id_isValid = ::OpenAPI::fromJsonValue(m_tax_id, json[QString("TaxID")]);
    m_tax_id_isSet = !json[QString("TaxID")].isNull() && m_tax_id_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("Zip")]);
    m_zip_isSet = !json[QString("Zip")].isNull() && m_zip_isValid;
}

QString OAITenNinetyNineContact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITenNinetyNineContact::asJsonObject() const {
    QJsonObject obj;
    if (m_box1_isSet) {
        obj.insert(QString("Box1"), ::OpenAPI::toJsonValue(m_box1));
    }
    if (m_box10_isSet) {
        obj.insert(QString("Box10"), ::OpenAPI::toJsonValue(m_box10));
    }
    if (m_box11_isSet) {
        obj.insert(QString("Box11"), ::OpenAPI::toJsonValue(m_box11));
    }
    if (m_box13_isSet) {
        obj.insert(QString("Box13"), ::OpenAPI::toJsonValue(m_box13));
    }
    if (m_box14_isSet) {
        obj.insert(QString("Box14"), ::OpenAPI::toJsonValue(m_box14));
    }
    if (m_box2_isSet) {
        obj.insert(QString("Box2"), ::OpenAPI::toJsonValue(m_box2));
    }
    if (m_box3_isSet) {
        obj.insert(QString("Box3"), ::OpenAPI::toJsonValue(m_box3));
    }
    if (m_box4_isSet) {
        obj.insert(QString("Box4"), ::OpenAPI::toJsonValue(m_box4));
    }
    if (m_box5_isSet) {
        obj.insert(QString("Box5"), ::OpenAPI::toJsonValue(m_box5));
    }
    if (m_box6_isSet) {
        obj.insert(QString("Box6"), ::OpenAPI::toJsonValue(m_box6));
    }
    if (m_box7_isSet) {
        obj.insert(QString("Box7"), ::OpenAPI::toJsonValue(m_box7));
    }
    if (m_box8_isSet) {
        obj.insert(QString("Box8"), ::OpenAPI::toJsonValue(m_box8));
    }
    if (m_box9_isSet) {
        obj.insert(QString("Box9"), ::OpenAPI::toJsonValue(m_box9));
    }
    if (m_city_isSet) {
        obj.insert(QString("City"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_contact_id_isSet) {
        obj.insert(QString("ContactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_federal_tax_id_type_isSet) {
        obj.insert(QString("FederalTaxIDType"), ::OpenAPI::toJsonValue(m_federal_tax_id_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_street_address_isSet) {
        obj.insert(QString("StreetAddress"), ::OpenAPI::toJsonValue(m_street_address));
    }
    if (m_tax_id_isSet) {
        obj.insert(QString("TaxID"), ::OpenAPI::toJsonValue(m_tax_id));
    }
    if (m_zip_isSet) {
        obj.insert(QString("Zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

double OAITenNinetyNineContact::getBox1() const {
    return m_box1;
}
void OAITenNinetyNineContact::setBox1(const double &box1) {
    m_box1 = box1;
    m_box1_isSet = true;
}

bool OAITenNinetyNineContact::is_box1_Set() const{
    return m_box1_isSet;
}

bool OAITenNinetyNineContact::is_box1_Valid() const{
    return m_box1_isValid;
}

double OAITenNinetyNineContact::getBox10() const {
    return m_box10;
}
void OAITenNinetyNineContact::setBox10(const double &box10) {
    m_box10 = box10;
    m_box10_isSet = true;
}

bool OAITenNinetyNineContact::is_box10_Set() const{
    return m_box10_isSet;
}

bool OAITenNinetyNineContact::is_box10_Valid() const{
    return m_box10_isValid;
}

double OAITenNinetyNineContact::getBox11() const {
    return m_box11;
}
void OAITenNinetyNineContact::setBox11(const double &box11) {
    m_box11 = box11;
    m_box11_isSet = true;
}

bool OAITenNinetyNineContact::is_box11_Set() const{
    return m_box11_isSet;
}

bool OAITenNinetyNineContact::is_box11_Valid() const{
    return m_box11_isValid;
}

double OAITenNinetyNineContact::getBox13() const {
    return m_box13;
}
void OAITenNinetyNineContact::setBox13(const double &box13) {
    m_box13 = box13;
    m_box13_isSet = true;
}

bool OAITenNinetyNineContact::is_box13_Set() const{
    return m_box13_isSet;
}

bool OAITenNinetyNineContact::is_box13_Valid() const{
    return m_box13_isValid;
}

double OAITenNinetyNineContact::getBox14() const {
    return m_box14;
}
void OAITenNinetyNineContact::setBox14(const double &box14) {
    m_box14 = box14;
    m_box14_isSet = true;
}

bool OAITenNinetyNineContact::is_box14_Set() const{
    return m_box14_isSet;
}

bool OAITenNinetyNineContact::is_box14_Valid() const{
    return m_box14_isValid;
}

double OAITenNinetyNineContact::getBox2() const {
    return m_box2;
}
void OAITenNinetyNineContact::setBox2(const double &box2) {
    m_box2 = box2;
    m_box2_isSet = true;
}

bool OAITenNinetyNineContact::is_box2_Set() const{
    return m_box2_isSet;
}

bool OAITenNinetyNineContact::is_box2_Valid() const{
    return m_box2_isValid;
}

double OAITenNinetyNineContact::getBox3() const {
    return m_box3;
}
void OAITenNinetyNineContact::setBox3(const double &box3) {
    m_box3 = box3;
    m_box3_isSet = true;
}

bool OAITenNinetyNineContact::is_box3_Set() const{
    return m_box3_isSet;
}

bool OAITenNinetyNineContact::is_box3_Valid() const{
    return m_box3_isValid;
}

double OAITenNinetyNineContact::getBox4() const {
    return m_box4;
}
void OAITenNinetyNineContact::setBox4(const double &box4) {
    m_box4 = box4;
    m_box4_isSet = true;
}

bool OAITenNinetyNineContact::is_box4_Set() const{
    return m_box4_isSet;
}

bool OAITenNinetyNineContact::is_box4_Valid() const{
    return m_box4_isValid;
}

double OAITenNinetyNineContact::getBox5() const {
    return m_box5;
}
void OAITenNinetyNineContact::setBox5(const double &box5) {
    m_box5 = box5;
    m_box5_isSet = true;
}

bool OAITenNinetyNineContact::is_box5_Set() const{
    return m_box5_isSet;
}

bool OAITenNinetyNineContact::is_box5_Valid() const{
    return m_box5_isValid;
}

double OAITenNinetyNineContact::getBox6() const {
    return m_box6;
}
void OAITenNinetyNineContact::setBox6(const double &box6) {
    m_box6 = box6;
    m_box6_isSet = true;
}

bool OAITenNinetyNineContact::is_box6_Set() const{
    return m_box6_isSet;
}

bool OAITenNinetyNineContact::is_box6_Valid() const{
    return m_box6_isValid;
}

double OAITenNinetyNineContact::getBox7() const {
    return m_box7;
}
void OAITenNinetyNineContact::setBox7(const double &box7) {
    m_box7 = box7;
    m_box7_isSet = true;
}

bool OAITenNinetyNineContact::is_box7_Set() const{
    return m_box7_isSet;
}

bool OAITenNinetyNineContact::is_box7_Valid() const{
    return m_box7_isValid;
}

double OAITenNinetyNineContact::getBox8() const {
    return m_box8;
}
void OAITenNinetyNineContact::setBox8(const double &box8) {
    m_box8 = box8;
    m_box8_isSet = true;
}

bool OAITenNinetyNineContact::is_box8_Set() const{
    return m_box8_isSet;
}

bool OAITenNinetyNineContact::is_box8_Valid() const{
    return m_box8_isValid;
}

double OAITenNinetyNineContact::getBox9() const {
    return m_box9;
}
void OAITenNinetyNineContact::setBox9(const double &box9) {
    m_box9 = box9;
    m_box9_isSet = true;
}

bool OAITenNinetyNineContact::is_box9_Set() const{
    return m_box9_isSet;
}

bool OAITenNinetyNineContact::is_box9_Valid() const{
    return m_box9_isValid;
}

QString OAITenNinetyNineContact::getCity() const {
    return m_city;
}
void OAITenNinetyNineContact::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAITenNinetyNineContact::is_city_Set() const{
    return m_city_isSet;
}

bool OAITenNinetyNineContact::is_city_Valid() const{
    return m_city_isValid;
}

QString OAITenNinetyNineContact::getContactId() const {
    return m_contact_id;
}
void OAITenNinetyNineContact::setContactId(const QString &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAITenNinetyNineContact::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAITenNinetyNineContact::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

QString OAITenNinetyNineContact::getEmail() const {
    return m_email;
}
void OAITenNinetyNineContact::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAITenNinetyNineContact::is_email_Set() const{
    return m_email_isSet;
}

bool OAITenNinetyNineContact::is_email_Valid() const{
    return m_email_isValid;
}

QString OAITenNinetyNineContact::getFederalTaxIdType() const {
    return m_federal_tax_id_type;
}
void OAITenNinetyNineContact::setFederalTaxIdType(const QString &federal_tax_id_type) {
    m_federal_tax_id_type = federal_tax_id_type;
    m_federal_tax_id_type_isSet = true;
}

bool OAITenNinetyNineContact::is_federal_tax_id_type_Set() const{
    return m_federal_tax_id_type_isSet;
}

bool OAITenNinetyNineContact::is_federal_tax_id_type_Valid() const{
    return m_federal_tax_id_type_isValid;
}

QString OAITenNinetyNineContact::getName() const {
    return m_name;
}
void OAITenNinetyNineContact::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITenNinetyNineContact::is_name_Set() const{
    return m_name_isSet;
}

bool OAITenNinetyNineContact::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITenNinetyNineContact::getState() const {
    return m_state;
}
void OAITenNinetyNineContact::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITenNinetyNineContact::is_state_Set() const{
    return m_state_isSet;
}

bool OAITenNinetyNineContact::is_state_Valid() const{
    return m_state_isValid;
}

QString OAITenNinetyNineContact::getStreetAddress() const {
    return m_street_address;
}
void OAITenNinetyNineContact::setStreetAddress(const QString &street_address) {
    m_street_address = street_address;
    m_street_address_isSet = true;
}

bool OAITenNinetyNineContact::is_street_address_Set() const{
    return m_street_address_isSet;
}

bool OAITenNinetyNineContact::is_street_address_Valid() const{
    return m_street_address_isValid;
}

QString OAITenNinetyNineContact::getTaxId() const {
    return m_tax_id;
}
void OAITenNinetyNineContact::setTaxId(const QString &tax_id) {
    m_tax_id = tax_id;
    m_tax_id_isSet = true;
}

bool OAITenNinetyNineContact::is_tax_id_Set() const{
    return m_tax_id_isSet;
}

bool OAITenNinetyNineContact::is_tax_id_Valid() const{
    return m_tax_id_isValid;
}

QString OAITenNinetyNineContact::getZip() const {
    return m_zip;
}
void OAITenNinetyNineContact::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAITenNinetyNineContact::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAITenNinetyNineContact::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAITenNinetyNineContact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_box1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_box10_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_box11_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_box13_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_box14_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_box2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_box3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_box4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_box5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_box6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_box7_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_box8_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_box9_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_tax_id_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITenNinetyNineContact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
