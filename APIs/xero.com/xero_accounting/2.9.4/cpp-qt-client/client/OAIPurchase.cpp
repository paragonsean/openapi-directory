/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchase::OAIPurchase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchase::OAIPurchase() {
    this->initializeModel();
}

OAIPurchase::~OAIPurchase() {}

void OAIPurchase::initializeModel() {

    m_account_code_isSet = false;
    m_account_code_isValid = false;

    m_cogs_account_code_isSet = false;
    m_cogs_account_code_isValid = false;

    m_tax_type_isSet = false;
    m_tax_type_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;
}

void OAIPurchase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchase::fromJsonObject(QJsonObject json) {

    m_account_code_isValid = ::OpenAPI::fromJsonValue(m_account_code, json[QString("AccountCode")]);
    m_account_code_isSet = !json[QString("AccountCode")].isNull() && m_account_code_isValid;

    m_cogs_account_code_isValid = ::OpenAPI::fromJsonValue(m_cogs_account_code, json[QString("COGSAccountCode")]);
    m_cogs_account_code_isSet = !json[QString("COGSAccountCode")].isNull() && m_cogs_account_code_isValid;

    m_tax_type_isValid = ::OpenAPI::fromJsonValue(m_tax_type, json[QString("TaxType")]);
    m_tax_type_isSet = !json[QString("TaxType")].isNull() && m_tax_type_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("UnitPrice")]);
    m_unit_price_isSet = !json[QString("UnitPrice")].isNull() && m_unit_price_isValid;
}

QString OAIPurchase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchase::asJsonObject() const {
    QJsonObject obj;
    if (m_account_code_isSet) {
        obj.insert(QString("AccountCode"), ::OpenAPI::toJsonValue(m_account_code));
    }
    if (m_cogs_account_code_isSet) {
        obj.insert(QString("COGSAccountCode"), ::OpenAPI::toJsonValue(m_cogs_account_code));
    }
    if (m_tax_type_isSet) {
        obj.insert(QString("TaxType"), ::OpenAPI::toJsonValue(m_tax_type));
    }
    if (m_unit_price_isSet) {
        obj.insert(QString("UnitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    return obj;
}

QString OAIPurchase::getAccountCode() const {
    return m_account_code;
}
void OAIPurchase::setAccountCode(const QString &account_code) {
    m_account_code = account_code;
    m_account_code_isSet = true;
}

bool OAIPurchase::is_account_code_Set() const{
    return m_account_code_isSet;
}

bool OAIPurchase::is_account_code_Valid() const{
    return m_account_code_isValid;
}

QString OAIPurchase::getCogsAccountCode() const {
    return m_cogs_account_code;
}
void OAIPurchase::setCogsAccountCode(const QString &cogs_account_code) {
    m_cogs_account_code = cogs_account_code;
    m_cogs_account_code_isSet = true;
}

bool OAIPurchase::is_cogs_account_code_Set() const{
    return m_cogs_account_code_isSet;
}

bool OAIPurchase::is_cogs_account_code_Valid() const{
    return m_cogs_account_code_isValid;
}

QString OAIPurchase::getTaxType() const {
    return m_tax_type;
}
void OAIPurchase::setTaxType(const QString &tax_type) {
    m_tax_type = tax_type;
    m_tax_type_isSet = true;
}

bool OAIPurchase::is_tax_type_Set() const{
    return m_tax_type_isSet;
}

bool OAIPurchase::is_tax_type_Valid() const{
    return m_tax_type_isValid;
}

double OAIPurchase::getUnitPrice() const {
    return m_unit_price;
}
void OAIPurchase::setUnitPrice(const double &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIPurchase::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIPurchase::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

bool OAIPurchase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cogs_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
