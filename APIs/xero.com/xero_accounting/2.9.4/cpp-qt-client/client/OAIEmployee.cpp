/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmployee.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmployee::OAIEmployee(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmployee::OAIEmployee() {
    this->initializeModel();
}

OAIEmployee::~OAIEmployee() {}

void OAIEmployee::initializeModel() {

    m_employee_id_isSet = false;
    m_employee_id_isValid = false;

    m_external_link_isSet = false;
    m_external_link_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_attribute_string_isSet = false;
    m_status_attribute_string_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAIEmployee::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmployee::fromJsonObject(QJsonObject json) {

    m_employee_id_isValid = ::OpenAPI::fromJsonValue(m_employee_id, json[QString("EmployeeID")]);
    m_employee_id_isSet = !json[QString("EmployeeID")].isNull() && m_employee_id_isValid;

    m_external_link_isValid = ::OpenAPI::fromJsonValue(m_external_link, json[QString("ExternalLink")]);
    m_external_link_isSet = !json[QString("ExternalLink")].isNull() && m_external_link_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("FirstName")]);
    m_first_name_isSet = !json[QString("FirstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("LastName")]);
    m_last_name_isSet = !json[QString("LastName")].isNull() && m_last_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_attribute_string_isValid = ::OpenAPI::fromJsonValue(m_status_attribute_string, json[QString("StatusAttributeString")]);
    m_status_attribute_string_isSet = !json[QString("StatusAttributeString")].isNull() && m_status_attribute_string_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;
}

QString OAIEmployee::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmployee::asJsonObject() const {
    QJsonObject obj;
    if (m_employee_id_isSet) {
        obj.insert(QString("EmployeeID"), ::OpenAPI::toJsonValue(m_employee_id));
    }
    if (m_external_link.isSet()) {
        obj.insert(QString("ExternalLink"), ::OpenAPI::toJsonValue(m_external_link));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("FirstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("LastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_attribute_string_isSet) {
        obj.insert(QString("StatusAttributeString"), ::OpenAPI::toJsonValue(m_status_attribute_string));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

QString OAIEmployee::getEmployeeId() const {
    return m_employee_id;
}
void OAIEmployee::setEmployeeId(const QString &employee_id) {
    m_employee_id = employee_id;
    m_employee_id_isSet = true;
}

bool OAIEmployee::is_employee_id_Set() const{
    return m_employee_id_isSet;
}

bool OAIEmployee::is_employee_id_Valid() const{
    return m_employee_id_isValid;
}

OAIExternalLink OAIEmployee::getExternalLink() const {
    return m_external_link;
}
void OAIEmployee::setExternalLink(const OAIExternalLink &external_link) {
    m_external_link = external_link;
    m_external_link_isSet = true;
}

bool OAIEmployee::is_external_link_Set() const{
    return m_external_link_isSet;
}

bool OAIEmployee::is_external_link_Valid() const{
    return m_external_link_isValid;
}

QString OAIEmployee::getFirstName() const {
    return m_first_name;
}
void OAIEmployee::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIEmployee::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIEmployee::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIEmployee::getLastName() const {
    return m_last_name;
}
void OAIEmployee::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIEmployee::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIEmployee::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIEmployee::getStatus() const {
    return m_status;
}
void OAIEmployee::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEmployee::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEmployee::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIEmployee::getStatusAttributeString() const {
    return m_status_attribute_string;
}
void OAIEmployee::setStatusAttributeString(const QString &status_attribute_string) {
    m_status_attribute_string = status_attribute_string;
    m_status_attribute_string_isSet = true;
}

bool OAIEmployee::is_status_attribute_string_Set() const{
    return m_status_attribute_string_isSet;
}

bool OAIEmployee::is_status_attribute_string_Valid() const{
    return m_status_attribute_string_isValid;
}

QString OAIEmployee::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIEmployee::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIEmployee::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIEmployee::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

QList<OAIValidationError> OAIEmployee::getValidationErrors() const {
    return m_validation_errors;
}
void OAIEmployee::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIEmployee::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIEmployee::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAIEmployee::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_employee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_attribute_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmployee::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
