/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountType::OAIAccountType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountType::OAIAccountType() {
    this->initializeModel();
}

OAIAccountType::~OAIAccountType() {}

void OAIAccountType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAccountType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAccountType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BANK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::BANK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CURRENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::CURRENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CURRLIAB", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::CURRLIAB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEPRECIATN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::DEPRECIATN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIRECTCOSTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::DIRECTCOSTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EQUITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::EQUITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPENSE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::EXPENSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FIXED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::FIXED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVENTORY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::INVENTORY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LIABILITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::LIABILITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NONCURRENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::NONCURRENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OTHERINCOME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::OTHERINCOME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OVERHEADS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::OVERHEADS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PREPAYMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::PREPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REVENUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::REVENUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SALES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::SALES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TERMLIAB", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::TERMLIAB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAYGLIABILITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::PAYGLIABILITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAYG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::PAYG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUPERANNUATIONEXPENSE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::SUPERANNUATIONEXPENSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUPERANNUATIONLIABILITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::SUPERANNUATIONLIABILITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WAGESEXPENSE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::WAGESEXPENSE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAccountType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAccountType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAccountType::BANK:
            val = "BANK";
            break;
        case eOAIAccountType::CURRENT:
            val = "CURRENT";
            break;
        case eOAIAccountType::CURRLIAB:
            val = "CURRLIAB";
            break;
        case eOAIAccountType::DEPRECIATN:
            val = "DEPRECIATN";
            break;
        case eOAIAccountType::DIRECTCOSTS:
            val = "DIRECTCOSTS";
            break;
        case eOAIAccountType::EQUITY:
            val = "EQUITY";
            break;
        case eOAIAccountType::EXPENSE:
            val = "EXPENSE";
            break;
        case eOAIAccountType::FIXED:
            val = "FIXED";
            break;
        case eOAIAccountType::INVENTORY:
            val = "INVENTORY";
            break;
        case eOAIAccountType::LIABILITY:
            val = "LIABILITY";
            break;
        case eOAIAccountType::NONCURRENT:
            val = "NONCURRENT";
            break;
        case eOAIAccountType::OTHERINCOME:
            val = "OTHERINCOME";
            break;
        case eOAIAccountType::OVERHEADS:
            val = "OVERHEADS";
            break;
        case eOAIAccountType::PREPAYMENT:
            val = "PREPAYMENT";
            break;
        case eOAIAccountType::REVENUE:
            val = "REVENUE";
            break;
        case eOAIAccountType::SALES:
            val = "SALES";
            break;
        case eOAIAccountType::TERMLIAB:
            val = "TERMLIAB";
            break;
        case eOAIAccountType::PAYGLIABILITY:
            val = "PAYGLIABILITY";
            break;
        case eOAIAccountType::PAYG:
            val = "PAYG";
            break;
        case eOAIAccountType::SUPERANNUATIONEXPENSE:
            val = "SUPERANNUATIONEXPENSE";
            break;
        case eOAIAccountType::SUPERANNUATIONLIABILITY:
            val = "SUPERANNUATIONLIABILITY";
            break;
        case eOAIAccountType::WAGESEXPENSE:
            val = "WAGESEXPENSE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAccountType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAccountType::eOAIAccountType OAIAccountType::getValue() const {
    return m_value;
}

void OAIAccountType::setValue(const OAIAccountType::eOAIAccountType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAccountType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAccountType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
