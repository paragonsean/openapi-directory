/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem::OAIItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem::OAIItem() {
    this->initializeModel();
}

OAIItem::~OAIItem() {}

void OAIItem::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_inventory_asset_account_code_isSet = false;
    m_inventory_asset_account_code_isValid = false;

    m_is_purchased_isSet = false;
    m_is_purchased_isValid = false;

    m_is_sold_isSet = false;
    m_is_sold_isValid = false;

    m_is_tracked_as_inventory_isSet = false;
    m_is_tracked_as_inventory_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_purchase_description_isSet = false;
    m_purchase_description_isValid = false;

    m_purchase_details_isSet = false;
    m_purchase_details_isValid = false;

    m_quantity_on_hand_isSet = false;
    m_quantity_on_hand_isValid = false;

    m_sales_details_isSet = false;
    m_sales_details_isValid = false;

    m_status_attribute_string_isSet = false;
    m_status_attribute_string_isValid = false;

    m_total_cost_pool_isSet = false;
    m_total_cost_pool_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAIItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_inventory_asset_account_code_isValid = ::OpenAPI::fromJsonValue(m_inventory_asset_account_code, json[QString("InventoryAssetAccountCode")]);
    m_inventory_asset_account_code_isSet = !json[QString("InventoryAssetAccountCode")].isNull() && m_inventory_asset_account_code_isValid;

    m_is_purchased_isValid = ::OpenAPI::fromJsonValue(m_is_purchased, json[QString("IsPurchased")]);
    m_is_purchased_isSet = !json[QString("IsPurchased")].isNull() && m_is_purchased_isValid;

    m_is_sold_isValid = ::OpenAPI::fromJsonValue(m_is_sold, json[QString("IsSold")]);
    m_is_sold_isSet = !json[QString("IsSold")].isNull() && m_is_sold_isValid;

    m_is_tracked_as_inventory_isValid = ::OpenAPI::fromJsonValue(m_is_tracked_as_inventory, json[QString("IsTrackedAsInventory")]);
    m_is_tracked_as_inventory_isSet = !json[QString("IsTrackedAsInventory")].isNull() && m_is_tracked_as_inventory_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("ItemID")]);
    m_item_id_isSet = !json[QString("ItemID")].isNull() && m_item_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_purchase_description_isValid = ::OpenAPI::fromJsonValue(m_purchase_description, json[QString("PurchaseDescription")]);
    m_purchase_description_isSet = !json[QString("PurchaseDescription")].isNull() && m_purchase_description_isValid;

    m_purchase_details_isValid = ::OpenAPI::fromJsonValue(m_purchase_details, json[QString("PurchaseDetails")]);
    m_purchase_details_isSet = !json[QString("PurchaseDetails")].isNull() && m_purchase_details_isValid;

    m_quantity_on_hand_isValid = ::OpenAPI::fromJsonValue(m_quantity_on_hand, json[QString("QuantityOnHand")]);
    m_quantity_on_hand_isSet = !json[QString("QuantityOnHand")].isNull() && m_quantity_on_hand_isValid;

    m_sales_details_isValid = ::OpenAPI::fromJsonValue(m_sales_details, json[QString("SalesDetails")]);
    m_sales_details_isSet = !json[QString("SalesDetails")].isNull() && m_sales_details_isValid;

    m_status_attribute_string_isValid = ::OpenAPI::fromJsonValue(m_status_attribute_string, json[QString("StatusAttributeString")]);
    m_status_attribute_string_isSet = !json[QString("StatusAttributeString")].isNull() && m_status_attribute_string_isValid;

    m_total_cost_pool_isValid = ::OpenAPI::fromJsonValue(m_total_cost_pool, json[QString("TotalCostPool")]);
    m_total_cost_pool_isSet = !json[QString("TotalCostPool")].isNull() && m_total_cost_pool_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;
}

QString OAIItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_inventory_asset_account_code_isSet) {
        obj.insert(QString("InventoryAssetAccountCode"), ::OpenAPI::toJsonValue(m_inventory_asset_account_code));
    }
    if (m_is_purchased_isSet) {
        obj.insert(QString("IsPurchased"), ::OpenAPI::toJsonValue(m_is_purchased));
    }
    if (m_is_sold_isSet) {
        obj.insert(QString("IsSold"), ::OpenAPI::toJsonValue(m_is_sold));
    }
    if (m_is_tracked_as_inventory_isSet) {
        obj.insert(QString("IsTrackedAsInventory"), ::OpenAPI::toJsonValue(m_is_tracked_as_inventory));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("ItemID"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_purchase_description_isSet) {
        obj.insert(QString("PurchaseDescription"), ::OpenAPI::toJsonValue(m_purchase_description));
    }
    if (m_purchase_details.isSet()) {
        obj.insert(QString("PurchaseDetails"), ::OpenAPI::toJsonValue(m_purchase_details));
    }
    if (m_quantity_on_hand_isSet) {
        obj.insert(QString("QuantityOnHand"), ::OpenAPI::toJsonValue(m_quantity_on_hand));
    }
    if (m_sales_details.isSet()) {
        obj.insert(QString("SalesDetails"), ::OpenAPI::toJsonValue(m_sales_details));
    }
    if (m_status_attribute_string_isSet) {
        obj.insert(QString("StatusAttributeString"), ::OpenAPI::toJsonValue(m_status_attribute_string));
    }
    if (m_total_cost_pool_isSet) {
        obj.insert(QString("TotalCostPool"), ::OpenAPI::toJsonValue(m_total_cost_pool));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

QString OAIItem::getCode() const {
    return m_code;
}
void OAIItem::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIItem::is_code_Set() const{
    return m_code_isSet;
}

bool OAIItem::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIItem::getDescription() const {
    return m_description;
}
void OAIItem::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIItem::is_description_Set() const{
    return m_description_isSet;
}

bool OAIItem::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIItem::getInventoryAssetAccountCode() const {
    return m_inventory_asset_account_code;
}
void OAIItem::setInventoryAssetAccountCode(const QString &inventory_asset_account_code) {
    m_inventory_asset_account_code = inventory_asset_account_code;
    m_inventory_asset_account_code_isSet = true;
}

bool OAIItem::is_inventory_asset_account_code_Set() const{
    return m_inventory_asset_account_code_isSet;
}

bool OAIItem::is_inventory_asset_account_code_Valid() const{
    return m_inventory_asset_account_code_isValid;
}

bool OAIItem::isIsPurchased() const {
    return m_is_purchased;
}
void OAIItem::setIsPurchased(const bool &is_purchased) {
    m_is_purchased = is_purchased;
    m_is_purchased_isSet = true;
}

bool OAIItem::is_is_purchased_Set() const{
    return m_is_purchased_isSet;
}

bool OAIItem::is_is_purchased_Valid() const{
    return m_is_purchased_isValid;
}

bool OAIItem::isIsSold() const {
    return m_is_sold;
}
void OAIItem::setIsSold(const bool &is_sold) {
    m_is_sold = is_sold;
    m_is_sold_isSet = true;
}

bool OAIItem::is_is_sold_Set() const{
    return m_is_sold_isSet;
}

bool OAIItem::is_is_sold_Valid() const{
    return m_is_sold_isValid;
}

bool OAIItem::isIsTrackedAsInventory() const {
    return m_is_tracked_as_inventory;
}
void OAIItem::setIsTrackedAsInventory(const bool &is_tracked_as_inventory) {
    m_is_tracked_as_inventory = is_tracked_as_inventory;
    m_is_tracked_as_inventory_isSet = true;
}

bool OAIItem::is_is_tracked_as_inventory_Set() const{
    return m_is_tracked_as_inventory_isSet;
}

bool OAIItem::is_is_tracked_as_inventory_Valid() const{
    return m_is_tracked_as_inventory_isValid;
}

QString OAIItem::getItemId() const {
    return m_item_id;
}
void OAIItem::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIItem::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIItem::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAIItem::getName() const {
    return m_name;
}
void OAIItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIItem::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIItem::getPurchaseDescription() const {
    return m_purchase_description;
}
void OAIItem::setPurchaseDescription(const QString &purchase_description) {
    m_purchase_description = purchase_description;
    m_purchase_description_isSet = true;
}

bool OAIItem::is_purchase_description_Set() const{
    return m_purchase_description_isSet;
}

bool OAIItem::is_purchase_description_Valid() const{
    return m_purchase_description_isValid;
}

OAIPurchase OAIItem::getPurchaseDetails() const {
    return m_purchase_details;
}
void OAIItem::setPurchaseDetails(const OAIPurchase &purchase_details) {
    m_purchase_details = purchase_details;
    m_purchase_details_isSet = true;
}

bool OAIItem::is_purchase_details_Set() const{
    return m_purchase_details_isSet;
}

bool OAIItem::is_purchase_details_Valid() const{
    return m_purchase_details_isValid;
}

double OAIItem::getQuantityOnHand() const {
    return m_quantity_on_hand;
}
void OAIItem::setQuantityOnHand(const double &quantity_on_hand) {
    m_quantity_on_hand = quantity_on_hand;
    m_quantity_on_hand_isSet = true;
}

bool OAIItem::is_quantity_on_hand_Set() const{
    return m_quantity_on_hand_isSet;
}

bool OAIItem::is_quantity_on_hand_Valid() const{
    return m_quantity_on_hand_isValid;
}

OAIPurchase OAIItem::getSalesDetails() const {
    return m_sales_details;
}
void OAIItem::setSalesDetails(const OAIPurchase &sales_details) {
    m_sales_details = sales_details;
    m_sales_details_isSet = true;
}

bool OAIItem::is_sales_details_Set() const{
    return m_sales_details_isSet;
}

bool OAIItem::is_sales_details_Valid() const{
    return m_sales_details_isValid;
}

QString OAIItem::getStatusAttributeString() const {
    return m_status_attribute_string;
}
void OAIItem::setStatusAttributeString(const QString &status_attribute_string) {
    m_status_attribute_string = status_attribute_string;
    m_status_attribute_string_isSet = true;
}

bool OAIItem::is_status_attribute_string_Set() const{
    return m_status_attribute_string_isSet;
}

bool OAIItem::is_status_attribute_string_Valid() const{
    return m_status_attribute_string_isValid;
}

double OAIItem::getTotalCostPool() const {
    return m_total_cost_pool;
}
void OAIItem::setTotalCostPool(const double &total_cost_pool) {
    m_total_cost_pool = total_cost_pool;
    m_total_cost_pool_isSet = true;
}

bool OAIItem::is_total_cost_pool_Set() const{
    return m_total_cost_pool_isSet;
}

bool OAIItem::is_total_cost_pool_Valid() const{
    return m_total_cost_pool_isValid;
}

QString OAIItem::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIItem::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIItem::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIItem::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

QList<OAIValidationError> OAIItem::getValidationErrors() const {
    return m_validation_errors;
}
void OAIItem::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIItem::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIItem::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAIItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_asset_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_purchased_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tracked_as_inventory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_on_hand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_attribute_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cost_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && true;
}

} // namespace OpenAPI
