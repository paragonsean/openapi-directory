/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManualJournal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManualJournal::OAIManualJournal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManualJournal::OAIManualJournal() {
    this->initializeModel();
}

OAIManualJournal::~OAIManualJournal() {}

void OAIManualJournal::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_has_attachments_isSet = false;
    m_has_attachments_isValid = false;

    m_journal_lines_isSet = false;
    m_journal_lines_isValid = false;

    m_line_amount_types_isSet = false;
    m_line_amount_types_isValid = false;

    m_manual_journal_id_isSet = false;
    m_manual_journal_id_isValid = false;

    m_narration_isSet = false;
    m_narration_isValid = false;

    m_show_on_cash_basis_reports_isSet = false;
    m_show_on_cash_basis_reports_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_attribute_string_isSet = false;
    m_status_attribute_string_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIManualJournal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManualJournal::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("Attachments")]);
    m_attachments_isSet = !json[QString("Attachments")].isNull() && m_attachments_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_has_attachments_isValid = ::OpenAPI::fromJsonValue(m_has_attachments, json[QString("HasAttachments")]);
    m_has_attachments_isSet = !json[QString("HasAttachments")].isNull() && m_has_attachments_isValid;

    m_journal_lines_isValid = ::OpenAPI::fromJsonValue(m_journal_lines, json[QString("JournalLines")]);
    m_journal_lines_isSet = !json[QString("JournalLines")].isNull() && m_journal_lines_isValid;

    m_line_amount_types_isValid = ::OpenAPI::fromJsonValue(m_line_amount_types, json[QString("LineAmountTypes")]);
    m_line_amount_types_isSet = !json[QString("LineAmountTypes")].isNull() && m_line_amount_types_isValid;

    m_manual_journal_id_isValid = ::OpenAPI::fromJsonValue(m_manual_journal_id, json[QString("ManualJournalID")]);
    m_manual_journal_id_isSet = !json[QString("ManualJournalID")].isNull() && m_manual_journal_id_isValid;

    m_narration_isValid = ::OpenAPI::fromJsonValue(m_narration, json[QString("Narration")]);
    m_narration_isSet = !json[QString("Narration")].isNull() && m_narration_isValid;

    m_show_on_cash_basis_reports_isValid = ::OpenAPI::fromJsonValue(m_show_on_cash_basis_reports, json[QString("ShowOnCashBasisReports")]);
    m_show_on_cash_basis_reports_isSet = !json[QString("ShowOnCashBasisReports")].isNull() && m_show_on_cash_basis_reports_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_attribute_string_isValid = ::OpenAPI::fromJsonValue(m_status_attribute_string, json[QString("StatusAttributeString")]);
    m_status_attribute_string_isSet = !json[QString("StatusAttributeString")].isNull() && m_status_attribute_string_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("Warnings")]);
    m_warnings_isSet = !json[QString("Warnings")].isNull() && m_warnings_isValid;
}

QString OAIManualJournal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManualJournal::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("Attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_has_attachments_isSet) {
        obj.insert(QString("HasAttachments"), ::OpenAPI::toJsonValue(m_has_attachments));
    }
    if (m_journal_lines.size() > 0) {
        obj.insert(QString("JournalLines"), ::OpenAPI::toJsonValue(m_journal_lines));
    }
    if (m_line_amount_types.isSet()) {
        obj.insert(QString("LineAmountTypes"), ::OpenAPI::toJsonValue(m_line_amount_types));
    }
    if (m_manual_journal_id_isSet) {
        obj.insert(QString("ManualJournalID"), ::OpenAPI::toJsonValue(m_manual_journal_id));
    }
    if (m_narration_isSet) {
        obj.insert(QString("Narration"), ::OpenAPI::toJsonValue(m_narration));
    }
    if (m_show_on_cash_basis_reports_isSet) {
        obj.insert(QString("ShowOnCashBasisReports"), ::OpenAPI::toJsonValue(m_show_on_cash_basis_reports));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_attribute_string_isSet) {
        obj.insert(QString("StatusAttributeString"), ::OpenAPI::toJsonValue(m_status_attribute_string));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("Warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QList<OAIAttachment> OAIManualJournal::getAttachments() const {
    return m_attachments;
}
void OAIManualJournal::setAttachments(const QList<OAIAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIManualJournal::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIManualJournal::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIManualJournal::getDate() const {
    return m_date;
}
void OAIManualJournal::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIManualJournal::is_date_Set() const{
    return m_date_isSet;
}

bool OAIManualJournal::is_date_Valid() const{
    return m_date_isValid;
}

bool OAIManualJournal::isHasAttachments() const {
    return m_has_attachments;
}
void OAIManualJournal::setHasAttachments(const bool &has_attachments) {
    m_has_attachments = has_attachments;
    m_has_attachments_isSet = true;
}

bool OAIManualJournal::is_has_attachments_Set() const{
    return m_has_attachments_isSet;
}

bool OAIManualJournal::is_has_attachments_Valid() const{
    return m_has_attachments_isValid;
}

QList<OAIManualJournalLine> OAIManualJournal::getJournalLines() const {
    return m_journal_lines;
}
void OAIManualJournal::setJournalLines(const QList<OAIManualJournalLine> &journal_lines) {
    m_journal_lines = journal_lines;
    m_journal_lines_isSet = true;
}

bool OAIManualJournal::is_journal_lines_Set() const{
    return m_journal_lines_isSet;
}

bool OAIManualJournal::is_journal_lines_Valid() const{
    return m_journal_lines_isValid;
}

OAILineAmountTypes OAIManualJournal::getLineAmountTypes() const {
    return m_line_amount_types;
}
void OAIManualJournal::setLineAmountTypes(const OAILineAmountTypes &line_amount_types) {
    m_line_amount_types = line_amount_types;
    m_line_amount_types_isSet = true;
}

bool OAIManualJournal::is_line_amount_types_Set() const{
    return m_line_amount_types_isSet;
}

bool OAIManualJournal::is_line_amount_types_Valid() const{
    return m_line_amount_types_isValid;
}

QString OAIManualJournal::getManualJournalId() const {
    return m_manual_journal_id;
}
void OAIManualJournal::setManualJournalId(const QString &manual_journal_id) {
    m_manual_journal_id = manual_journal_id;
    m_manual_journal_id_isSet = true;
}

bool OAIManualJournal::is_manual_journal_id_Set() const{
    return m_manual_journal_id_isSet;
}

bool OAIManualJournal::is_manual_journal_id_Valid() const{
    return m_manual_journal_id_isValid;
}

QString OAIManualJournal::getNarration() const {
    return m_narration;
}
void OAIManualJournal::setNarration(const QString &narration) {
    m_narration = narration;
    m_narration_isSet = true;
}

bool OAIManualJournal::is_narration_Set() const{
    return m_narration_isSet;
}

bool OAIManualJournal::is_narration_Valid() const{
    return m_narration_isValid;
}

bool OAIManualJournal::isShowOnCashBasisReports() const {
    return m_show_on_cash_basis_reports;
}
void OAIManualJournal::setShowOnCashBasisReports(const bool &show_on_cash_basis_reports) {
    m_show_on_cash_basis_reports = show_on_cash_basis_reports;
    m_show_on_cash_basis_reports_isSet = true;
}

bool OAIManualJournal::is_show_on_cash_basis_reports_Set() const{
    return m_show_on_cash_basis_reports_isSet;
}

bool OAIManualJournal::is_show_on_cash_basis_reports_Valid() const{
    return m_show_on_cash_basis_reports_isValid;
}

QString OAIManualJournal::getStatus() const {
    return m_status;
}
void OAIManualJournal::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIManualJournal::is_status_Set() const{
    return m_status_isSet;
}

bool OAIManualJournal::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIManualJournal::getStatusAttributeString() const {
    return m_status_attribute_string;
}
void OAIManualJournal::setStatusAttributeString(const QString &status_attribute_string) {
    m_status_attribute_string = status_attribute_string;
    m_status_attribute_string_isSet = true;
}

bool OAIManualJournal::is_status_attribute_string_Set() const{
    return m_status_attribute_string_isSet;
}

bool OAIManualJournal::is_status_attribute_string_Valid() const{
    return m_status_attribute_string_isValid;
}

QString OAIManualJournal::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIManualJournal::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIManualJournal::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIManualJournal::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

QString OAIManualJournal::getUrl() const {
    return m_url;
}
void OAIManualJournal::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIManualJournal::is_url_Set() const{
    return m_url_isSet;
}

bool OAIManualJournal::is_url_Valid() const{
    return m_url_isValid;
}

QList<OAIValidationError> OAIManualJournal::getValidationErrors() const {
    return m_validation_errors;
}
void OAIManualJournal::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIManualJournal::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIManualJournal::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

QList<OAIValidationError> OAIManualJournal::getWarnings() const {
    return m_warnings;
}
void OAIManualJournal::setWarnings(const QList<OAIValidationError> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIManualJournal::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIManualJournal::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIManualJournal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_journal_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_amount_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_journal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_narration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_on_cash_basis_reports_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_attribute_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManualJournal::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_narration_isValid && true;
}

} // namespace OpenAPI
