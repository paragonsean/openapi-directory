/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJournal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJournal::OAIJournal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJournal::OAIJournal() {
    this->initializeModel();
}

OAIJournal::~OAIJournal() {}

void OAIJournal::initializeModel() {

    m_created_date_utc_isSet = false;
    m_created_date_utc_isValid = false;

    m_journal_date_isSet = false;
    m_journal_date_isValid = false;

    m_journal_id_isSet = false;
    m_journal_id_isValid = false;

    m_journal_lines_isSet = false;
    m_journal_lines_isValid = false;

    m_journal_number_isSet = false;
    m_journal_number_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;
}

void OAIJournal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJournal::fromJsonObject(QJsonObject json) {

    m_created_date_utc_isValid = ::OpenAPI::fromJsonValue(m_created_date_utc, json[QString("CreatedDateUTC")]);
    m_created_date_utc_isSet = !json[QString("CreatedDateUTC")].isNull() && m_created_date_utc_isValid;

    m_journal_date_isValid = ::OpenAPI::fromJsonValue(m_journal_date, json[QString("JournalDate")]);
    m_journal_date_isSet = !json[QString("JournalDate")].isNull() && m_journal_date_isValid;

    m_journal_id_isValid = ::OpenAPI::fromJsonValue(m_journal_id, json[QString("JournalID")]);
    m_journal_id_isSet = !json[QString("JournalID")].isNull() && m_journal_id_isValid;

    m_journal_lines_isValid = ::OpenAPI::fromJsonValue(m_journal_lines, json[QString("JournalLines")]);
    m_journal_lines_isSet = !json[QString("JournalLines")].isNull() && m_journal_lines_isValid;

    m_journal_number_isValid = ::OpenAPI::fromJsonValue(m_journal_number, json[QString("JournalNumber")]);
    m_journal_number_isSet = !json[QString("JournalNumber")].isNull() && m_journal_number_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("Reference")]);
    m_reference_isSet = !json[QString("Reference")].isNull() && m_reference_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceID")]);
    m_source_id_isSet = !json[QString("SourceID")].isNull() && m_source_id_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;
}

QString OAIJournal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJournal::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_utc_isSet) {
        obj.insert(QString("CreatedDateUTC"), ::OpenAPI::toJsonValue(m_created_date_utc));
    }
    if (m_journal_date_isSet) {
        obj.insert(QString("JournalDate"), ::OpenAPI::toJsonValue(m_journal_date));
    }
    if (m_journal_id_isSet) {
        obj.insert(QString("JournalID"), ::OpenAPI::toJsonValue(m_journal_id));
    }
    if (m_journal_lines.size() > 0) {
        obj.insert(QString("JournalLines"), ::OpenAPI::toJsonValue(m_journal_lines));
    }
    if (m_journal_number_isSet) {
        obj.insert(QString("JournalNumber"), ::OpenAPI::toJsonValue(m_journal_number));
    }
    if (m_reference_isSet) {
        obj.insert(QString("Reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceID"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    return obj;
}

QString OAIJournal::getCreatedDateUtc() const {
    return m_created_date_utc;
}
void OAIJournal::setCreatedDateUtc(const QString &created_date_utc) {
    m_created_date_utc = created_date_utc;
    m_created_date_utc_isSet = true;
}

bool OAIJournal::is_created_date_utc_Set() const{
    return m_created_date_utc_isSet;
}

bool OAIJournal::is_created_date_utc_Valid() const{
    return m_created_date_utc_isValid;
}

QString OAIJournal::getJournalDate() const {
    return m_journal_date;
}
void OAIJournal::setJournalDate(const QString &journal_date) {
    m_journal_date = journal_date;
    m_journal_date_isSet = true;
}

bool OAIJournal::is_journal_date_Set() const{
    return m_journal_date_isSet;
}

bool OAIJournal::is_journal_date_Valid() const{
    return m_journal_date_isValid;
}

QString OAIJournal::getJournalId() const {
    return m_journal_id;
}
void OAIJournal::setJournalId(const QString &journal_id) {
    m_journal_id = journal_id;
    m_journal_id_isSet = true;
}

bool OAIJournal::is_journal_id_Set() const{
    return m_journal_id_isSet;
}

bool OAIJournal::is_journal_id_Valid() const{
    return m_journal_id_isValid;
}

QList<OAIJournalLine> OAIJournal::getJournalLines() const {
    return m_journal_lines;
}
void OAIJournal::setJournalLines(const QList<OAIJournalLine> &journal_lines) {
    m_journal_lines = journal_lines;
    m_journal_lines_isSet = true;
}

bool OAIJournal::is_journal_lines_Set() const{
    return m_journal_lines_isSet;
}

bool OAIJournal::is_journal_lines_Valid() const{
    return m_journal_lines_isValid;
}

qint32 OAIJournal::getJournalNumber() const {
    return m_journal_number;
}
void OAIJournal::setJournalNumber(const qint32 &journal_number) {
    m_journal_number = journal_number;
    m_journal_number_isSet = true;
}

bool OAIJournal::is_journal_number_Set() const{
    return m_journal_number_isSet;
}

bool OAIJournal::is_journal_number_Valid() const{
    return m_journal_number_isValid;
}

QString OAIJournal::getReference() const {
    return m_reference;
}
void OAIJournal::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIJournal::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIJournal::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIJournal::getSourceId() const {
    return m_source_id;
}
void OAIJournal::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIJournal::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIJournal::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIJournal::getSourceType() const {
    return m_source_type;
}
void OAIJournal::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIJournal::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIJournal::is_source_type_Valid() const{
    return m_source_type_isValid;
}

bool OAIJournal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_journal_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_journal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_journal_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_journal_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJournal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
