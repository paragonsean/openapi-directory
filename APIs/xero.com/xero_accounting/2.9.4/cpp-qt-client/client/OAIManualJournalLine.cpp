/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManualJournalLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManualJournalLine::OAIManualJournalLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManualJournalLine::OAIManualJournalLine() {
    this->initializeModel();
}

OAIManualJournalLine::~OAIManualJournalLine() {}

void OAIManualJournalLine::initializeModel() {

    m_account_code_isSet = false;
    m_account_code_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_blank_isSet = false;
    m_is_blank_isValid = false;

    m_line_amount_isSet = false;
    m_line_amount_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_tax_type_isSet = false;
    m_tax_type_isValid = false;

    m_tracking_isSet = false;
    m_tracking_isValid = false;
}

void OAIManualJournalLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManualJournalLine::fromJsonObject(QJsonObject json) {

    m_account_code_isValid = ::OpenAPI::fromJsonValue(m_account_code, json[QString("AccountCode")]);
    m_account_code_isSet = !json[QString("AccountCode")].isNull() && m_account_code_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountID")]);
    m_account_id_isSet = !json[QString("AccountID")].isNull() && m_account_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_is_blank_isValid = ::OpenAPI::fromJsonValue(m_is_blank, json[QString("IsBlank")]);
    m_is_blank_isSet = !json[QString("IsBlank")].isNull() && m_is_blank_isValid;

    m_line_amount_isValid = ::OpenAPI::fromJsonValue(m_line_amount, json[QString("LineAmount")]);
    m_line_amount_isSet = !json[QString("LineAmount")].isNull() && m_line_amount_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("TaxAmount")]);
    m_tax_amount_isSet = !json[QString("TaxAmount")].isNull() && m_tax_amount_isValid;

    m_tax_type_isValid = ::OpenAPI::fromJsonValue(m_tax_type, json[QString("TaxType")]);
    m_tax_type_isSet = !json[QString("TaxType")].isNull() && m_tax_type_isValid;

    m_tracking_isValid = ::OpenAPI::fromJsonValue(m_tracking, json[QString("Tracking")]);
    m_tracking_isSet = !json[QString("Tracking")].isNull() && m_tracking_isValid;
}

QString OAIManualJournalLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManualJournalLine::asJsonObject() const {
    QJsonObject obj;
    if (m_account_code_isSet) {
        obj.insert(QString("AccountCode"), ::OpenAPI::toJsonValue(m_account_code));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("AccountID"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_blank_isSet) {
        obj.insert(QString("IsBlank"), ::OpenAPI::toJsonValue(m_is_blank));
    }
    if (m_line_amount_isSet) {
        obj.insert(QString("LineAmount"), ::OpenAPI::toJsonValue(m_line_amount));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("TaxAmount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_tax_type_isSet) {
        obj.insert(QString("TaxType"), ::OpenAPI::toJsonValue(m_tax_type));
    }
    if (m_tracking.size() > 0) {
        obj.insert(QString("Tracking"), ::OpenAPI::toJsonValue(m_tracking));
    }
    return obj;
}

QString OAIManualJournalLine::getAccountCode() const {
    return m_account_code;
}
void OAIManualJournalLine::setAccountCode(const QString &account_code) {
    m_account_code = account_code;
    m_account_code_isSet = true;
}

bool OAIManualJournalLine::is_account_code_Set() const{
    return m_account_code_isSet;
}

bool OAIManualJournalLine::is_account_code_Valid() const{
    return m_account_code_isValid;
}

QString OAIManualJournalLine::getAccountId() const {
    return m_account_id;
}
void OAIManualJournalLine::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIManualJournalLine::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIManualJournalLine::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIManualJournalLine::getDescription() const {
    return m_description;
}
void OAIManualJournalLine::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIManualJournalLine::is_description_Set() const{
    return m_description_isSet;
}

bool OAIManualJournalLine::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIManualJournalLine::isIsBlank() const {
    return m_is_blank;
}
void OAIManualJournalLine::setIsBlank(const bool &is_blank) {
    m_is_blank = is_blank;
    m_is_blank_isSet = true;
}

bool OAIManualJournalLine::is_is_blank_Set() const{
    return m_is_blank_isSet;
}

bool OAIManualJournalLine::is_is_blank_Valid() const{
    return m_is_blank_isValid;
}

double OAIManualJournalLine::getLineAmount() const {
    return m_line_amount;
}
void OAIManualJournalLine::setLineAmount(const double &line_amount) {
    m_line_amount = line_amount;
    m_line_amount_isSet = true;
}

bool OAIManualJournalLine::is_line_amount_Set() const{
    return m_line_amount_isSet;
}

bool OAIManualJournalLine::is_line_amount_Valid() const{
    return m_line_amount_isValid;
}

double OAIManualJournalLine::getTaxAmount() const {
    return m_tax_amount;
}
void OAIManualJournalLine::setTaxAmount(const double &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAIManualJournalLine::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAIManualJournalLine::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

QString OAIManualJournalLine::getTaxType() const {
    return m_tax_type;
}
void OAIManualJournalLine::setTaxType(const QString &tax_type) {
    m_tax_type = tax_type;
    m_tax_type_isSet = true;
}

bool OAIManualJournalLine::is_tax_type_Set() const{
    return m_tax_type_isSet;
}

bool OAIManualJournalLine::is_tax_type_Valid() const{
    return m_tax_type_isValid;
}

QList<OAITrackingCategory> OAIManualJournalLine::getTracking() const {
    return m_tracking;
}
void OAIManualJournalLine::setTracking(const QList<OAITrackingCategory> &tracking) {
    m_tracking = tracking;
    m_tracking_isSet = true;
}

bool OAIManualJournalLine::is_tracking_Set() const{
    return m_tracking_isSet;
}

bool OAIManualJournalLine::is_tracking_Valid() const{
    return m_tracking_isValid;
}

bool OAIManualJournalLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_blank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManualJournalLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
