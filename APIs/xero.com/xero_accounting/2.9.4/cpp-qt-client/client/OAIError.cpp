/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError::OAIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError::OAIError() {
    this->initializeModel();
}

OAIError::~OAIError() {}

void OAIError::initializeModel() {

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_error_number_isSet = false;
    m_error_number_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError::fromJsonObject(QJsonObject json) {

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("Elements")]);
    m_elements_isSet = !json[QString("Elements")].isNull() && m_elements_isValid;

    m_error_number_isValid = ::OpenAPI::fromJsonValue(m_error_number, json[QString("ErrorNumber")]);
    m_error_number_isSet = !json[QString("ErrorNumber")].isNull() && m_error_number_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError::asJsonObject() const {
    QJsonObject obj;
    if (m_elements.size() > 0) {
        obj.insert(QString("Elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_error_number_isSet) {
        obj.insert(QString("ErrorNumber"), ::OpenAPI::toJsonValue(m_error_number));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIElement> OAIError::getElements() const {
    return m_elements;
}
void OAIError::setElements(const QList<OAIElement> &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIError::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIError::is_elements_Valid() const{
    return m_elements_isValid;
}

qint32 OAIError::getErrorNumber() const {
    return m_error_number;
}
void OAIError::setErrorNumber(const qint32 &error_number) {
    m_error_number = error_number;
    m_error_number_isSet = true;
}

bool OAIError::is_error_number_Set() const{
    return m_error_number_isSet;
}

bool OAIError::is_error_number_Valid() const{
    return m_error_number_isValid;
}

QString OAIError::getMessage() const {
    return m_message;
}
void OAIError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIError::getType() const {
    return m_type;
}
void OAIError::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIError::is_type_Set() const{
    return m_type_isSet;
}

bool OAIError::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
