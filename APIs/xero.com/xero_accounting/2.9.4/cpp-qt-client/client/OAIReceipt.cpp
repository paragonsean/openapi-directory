/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceipt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceipt::OAIReceipt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceipt::OAIReceipt() {
    this->initializeModel();
}

OAIReceipt::~OAIReceipt() {}

void OAIReceipt::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_has_attachments_isSet = false;
    m_has_attachments_isValid = false;

    m_line_amount_types_isSet = false;
    m_line_amount_types_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_receipt_id_isSet = false;
    m_receipt_id_isValid = false;

    m_receipt_number_isSet = false;
    m_receipt_number_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sub_total_isSet = false;
    m_sub_total_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_total_tax_isSet = false;
    m_total_tax_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIReceipt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReceipt::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("Attachments")]);
    m_attachments_isSet = !json[QString("Attachments")].isNull() && m_attachments_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("Contact")]);
    m_contact_isSet = !json[QString("Contact")].isNull() && m_contact_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_has_attachments_isValid = ::OpenAPI::fromJsonValue(m_has_attachments, json[QString("HasAttachments")]);
    m_has_attachments_isSet = !json[QString("HasAttachments")].isNull() && m_has_attachments_isValid;

    m_line_amount_types_isValid = ::OpenAPI::fromJsonValue(m_line_amount_types, json[QString("LineAmountTypes")]);
    m_line_amount_types_isSet = !json[QString("LineAmountTypes")].isNull() && m_line_amount_types_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("LineItems")]);
    m_line_items_isSet = !json[QString("LineItems")].isNull() && m_line_items_isValid;

    m_receipt_id_isValid = ::OpenAPI::fromJsonValue(m_receipt_id, json[QString("ReceiptID")]);
    m_receipt_id_isSet = !json[QString("ReceiptID")].isNull() && m_receipt_id_isValid;

    m_receipt_number_isValid = ::OpenAPI::fromJsonValue(m_receipt_number, json[QString("ReceiptNumber")]);
    m_receipt_number_isSet = !json[QString("ReceiptNumber")].isNull() && m_receipt_number_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("Reference")]);
    m_reference_isSet = !json[QString("Reference")].isNull() && m_reference_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_sub_total_isValid = ::OpenAPI::fromJsonValue(m_sub_total, json[QString("SubTotal")]);
    m_sub_total_isSet = !json[QString("SubTotal")].isNull() && m_sub_total_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;

    m_total_tax_isValid = ::OpenAPI::fromJsonValue(m_total_tax, json[QString("TotalTax")]);
    m_total_tax_isSet = !json[QString("TotalTax")].isNull() && m_total_tax_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("Warnings")]);
    m_warnings_isSet = !json[QString("Warnings")].isNull() && m_warnings_isValid;
}

QString OAIReceipt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReceipt::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("Attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("Contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_has_attachments_isSet) {
        obj.insert(QString("HasAttachments"), ::OpenAPI::toJsonValue(m_has_attachments));
    }
    if (m_line_amount_types.isSet()) {
        obj.insert(QString("LineAmountTypes"), ::OpenAPI::toJsonValue(m_line_amount_types));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("LineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_receipt_id_isSet) {
        obj.insert(QString("ReceiptID"), ::OpenAPI::toJsonValue(m_receipt_id));
    }
    if (m_receipt_number_isSet) {
        obj.insert(QString("ReceiptNumber"), ::OpenAPI::toJsonValue(m_receipt_number));
    }
    if (m_reference_isSet) {
        obj.insert(QString("Reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sub_total_isSet) {
        obj.insert(QString("SubTotal"), ::OpenAPI::toJsonValue(m_sub_total));
    }
    if (m_total_isSet) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_total_tax_isSet) {
        obj.insert(QString("TotalTax"), ::OpenAPI::toJsonValue(m_total_tax));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("Warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QList<OAIAttachment> OAIReceipt::getAttachments() const {
    return m_attachments;
}
void OAIReceipt::setAttachments(const QList<OAIAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIReceipt::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIReceipt::is_attachments_Valid() const{
    return m_attachments_isValid;
}

OAIContact OAIReceipt::getContact() const {
    return m_contact;
}
void OAIReceipt::setContact(const OAIContact &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIReceipt::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIReceipt::is_contact_Valid() const{
    return m_contact_isValid;
}

QString OAIReceipt::getDate() const {
    return m_date;
}
void OAIReceipt::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIReceipt::is_date_Set() const{
    return m_date_isSet;
}

bool OAIReceipt::is_date_Valid() const{
    return m_date_isValid;
}

bool OAIReceipt::isHasAttachments() const {
    return m_has_attachments;
}
void OAIReceipt::setHasAttachments(const bool &has_attachments) {
    m_has_attachments = has_attachments;
    m_has_attachments_isSet = true;
}

bool OAIReceipt::is_has_attachments_Set() const{
    return m_has_attachments_isSet;
}

bool OAIReceipt::is_has_attachments_Valid() const{
    return m_has_attachments_isValid;
}

OAILineAmountTypes OAIReceipt::getLineAmountTypes() const {
    return m_line_amount_types;
}
void OAIReceipt::setLineAmountTypes(const OAILineAmountTypes &line_amount_types) {
    m_line_amount_types = line_amount_types;
    m_line_amount_types_isSet = true;
}

bool OAIReceipt::is_line_amount_types_Set() const{
    return m_line_amount_types_isSet;
}

bool OAIReceipt::is_line_amount_types_Valid() const{
    return m_line_amount_types_isValid;
}

QList<OAILineItem> OAIReceipt::getLineItems() const {
    return m_line_items;
}
void OAIReceipt::setLineItems(const QList<OAILineItem> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIReceipt::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIReceipt::is_line_items_Valid() const{
    return m_line_items_isValid;
}

QString OAIReceipt::getReceiptId() const {
    return m_receipt_id;
}
void OAIReceipt::setReceiptId(const QString &receipt_id) {
    m_receipt_id = receipt_id;
    m_receipt_id_isSet = true;
}

bool OAIReceipt::is_receipt_id_Set() const{
    return m_receipt_id_isSet;
}

bool OAIReceipt::is_receipt_id_Valid() const{
    return m_receipt_id_isValid;
}

QString OAIReceipt::getReceiptNumber() const {
    return m_receipt_number;
}
void OAIReceipt::setReceiptNumber(const QString &receipt_number) {
    m_receipt_number = receipt_number;
    m_receipt_number_isSet = true;
}

bool OAIReceipt::is_receipt_number_Set() const{
    return m_receipt_number_isSet;
}

bool OAIReceipt::is_receipt_number_Valid() const{
    return m_receipt_number_isValid;
}

QString OAIReceipt::getReference() const {
    return m_reference;
}
void OAIReceipt::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIReceipt::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIReceipt::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIReceipt::getStatus() const {
    return m_status;
}
void OAIReceipt::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReceipt::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReceipt::is_status_Valid() const{
    return m_status_isValid;
}

double OAIReceipt::getSubTotal() const {
    return m_sub_total;
}
void OAIReceipt::setSubTotal(const double &sub_total) {
    m_sub_total = sub_total;
    m_sub_total_isSet = true;
}

bool OAIReceipt::is_sub_total_Set() const{
    return m_sub_total_isSet;
}

bool OAIReceipt::is_sub_total_Valid() const{
    return m_sub_total_isValid;
}

double OAIReceipt::getTotal() const {
    return m_total;
}
void OAIReceipt::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIReceipt::is_total_Set() const{
    return m_total_isSet;
}

bool OAIReceipt::is_total_Valid() const{
    return m_total_isValid;
}

double OAIReceipt::getTotalTax() const {
    return m_total_tax;
}
void OAIReceipt::setTotalTax(const double &total_tax) {
    m_total_tax = total_tax;
    m_total_tax_isSet = true;
}

bool OAIReceipt::is_total_tax_Set() const{
    return m_total_tax_isSet;
}

bool OAIReceipt::is_total_tax_Valid() const{
    return m_total_tax_isValid;
}

QString OAIReceipt::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIReceipt::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIReceipt::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIReceipt::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

QString OAIReceipt::getUrl() const {
    return m_url;
}
void OAIReceipt::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIReceipt::is_url_Set() const{
    return m_url_isSet;
}

bool OAIReceipt::is_url_Valid() const{
    return m_url_isValid;
}

OAIUser OAIReceipt::getUser() const {
    return m_user;
}
void OAIReceipt::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIReceipt::is_user_Set() const{
    return m_user_isSet;
}

bool OAIReceipt::is_user_Valid() const{
    return m_user_isValid;
}

QList<OAIValidationError> OAIReceipt::getValidationErrors() const {
    return m_validation_errors;
}
void OAIReceipt::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIReceipt::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIReceipt::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

QList<OAIValidationError> OAIReceipt::getWarnings() const {
    return m_warnings;
}
void OAIReceipt::setWarnings(const QList<OAIValidationError> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIReceipt::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIReceipt::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIReceipt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_amount_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReceipt::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
