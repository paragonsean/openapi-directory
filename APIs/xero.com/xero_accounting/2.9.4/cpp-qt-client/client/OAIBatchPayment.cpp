/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchPayment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchPayment::OAIBatchPayment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchPayment::OAIBatchPayment() {
    this->initializeModel();
}

OAIBatchPayment::~OAIBatchPayment() {}

void OAIBatchPayment::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_batch_payment_id_isSet = false;
    m_batch_payment_id_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_date_string_isSet = false;
    m_date_string_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_is_reconciled_isSet = false;
    m_is_reconciled_isValid = false;

    m_narrative_isSet = false;
    m_narrative_isValid = false;

    m_particulars_isSet = false;
    m_particulars_isValid = false;

    m_payments_isSet = false;
    m_payments_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;
}

void OAIBatchPayment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchPayment::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("Account")]);
    m_account_isSet = !json[QString("Account")].isNull() && m_account_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("Amount")]);
    m_amount_isSet = !json[QString("Amount")].isNull() && m_amount_isValid;

    m_batch_payment_id_isValid = ::OpenAPI::fromJsonValue(m_batch_payment_id, json[QString("BatchPaymentID")]);
    m_batch_payment_id_isSet = !json[QString("BatchPaymentID")].isNull() && m_batch_payment_id_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_date_string_isValid = ::OpenAPI::fromJsonValue(m_date_string, json[QString("DateString")]);
    m_date_string_isSet = !json[QString("DateString")].isNull() && m_date_string_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("Details")]);
    m_details_isSet = !json[QString("Details")].isNull() && m_details_isValid;

    m_is_reconciled_isValid = ::OpenAPI::fromJsonValue(m_is_reconciled, json[QString("IsReconciled")]);
    m_is_reconciled_isSet = !json[QString("IsReconciled")].isNull() && m_is_reconciled_isValid;

    m_narrative_isValid = ::OpenAPI::fromJsonValue(m_narrative, json[QString("Narrative")]);
    m_narrative_isSet = !json[QString("Narrative")].isNull() && m_narrative_isValid;

    m_particulars_isValid = ::OpenAPI::fromJsonValue(m_particulars, json[QString("Particulars")]);
    m_particulars_isSet = !json[QString("Particulars")].isNull() && m_particulars_isValid;

    m_payments_isValid = ::OpenAPI::fromJsonValue(m_payments, json[QString("Payments")]);
    m_payments_isSet = !json[QString("Payments")].isNull() && m_payments_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("Reference")]);
    m_reference_isSet = !json[QString("Reference")].isNull() && m_reference_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("TotalAmount")]);
    m_total_amount_isSet = !json[QString("TotalAmount")].isNull() && m_total_amount_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;
}

QString OAIBatchPayment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchPayment::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("Account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_amount_isSet) {
        obj.insert(QString("Amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_batch_payment_id_isSet) {
        obj.insert(QString("BatchPaymentID"), ::OpenAPI::toJsonValue(m_batch_payment_id));
    }
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_date_string_isSet) {
        obj.insert(QString("DateString"), ::OpenAPI::toJsonValue(m_date_string));
    }
    if (m_details_isSet) {
        obj.insert(QString("Details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_is_reconciled_isSet) {
        obj.insert(QString("IsReconciled"), ::OpenAPI::toJsonValue(m_is_reconciled));
    }
    if (m_narrative_isSet) {
        obj.insert(QString("Narrative"), ::OpenAPI::toJsonValue(m_narrative));
    }
    if (m_particulars_isSet) {
        obj.insert(QString("Particulars"), ::OpenAPI::toJsonValue(m_particulars));
    }
    if (m_payments.size() > 0) {
        obj.insert(QString("Payments"), ::OpenAPI::toJsonValue(m_payments));
    }
    if (m_reference_isSet) {
        obj.insert(QString("Reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("TotalAmount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    return obj;
}

OAIAccount OAIBatchPayment::getAccount() const {
    return m_account;
}
void OAIBatchPayment::setAccount(const OAIAccount &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIBatchPayment::is_account_Set() const{
    return m_account_isSet;
}

bool OAIBatchPayment::is_account_Valid() const{
    return m_account_isValid;
}

double OAIBatchPayment::getAmount() const {
    return m_amount;
}
void OAIBatchPayment::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIBatchPayment::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIBatchPayment::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIBatchPayment::getBatchPaymentId() const {
    return m_batch_payment_id;
}
void OAIBatchPayment::setBatchPaymentId(const QString &batch_payment_id) {
    m_batch_payment_id = batch_payment_id;
    m_batch_payment_id_isSet = true;
}

bool OAIBatchPayment::is_batch_payment_id_Set() const{
    return m_batch_payment_id_isSet;
}

bool OAIBatchPayment::is_batch_payment_id_Valid() const{
    return m_batch_payment_id_isValid;
}

QString OAIBatchPayment::getCode() const {
    return m_code;
}
void OAIBatchPayment::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIBatchPayment::is_code_Set() const{
    return m_code_isSet;
}

bool OAIBatchPayment::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIBatchPayment::getDate() const {
    return m_date;
}
void OAIBatchPayment::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIBatchPayment::is_date_Set() const{
    return m_date_isSet;
}

bool OAIBatchPayment::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIBatchPayment::getDateString() const {
    return m_date_string;
}
void OAIBatchPayment::setDateString(const QString &date_string) {
    m_date_string = date_string;
    m_date_string_isSet = true;
}

bool OAIBatchPayment::is_date_string_Set() const{
    return m_date_string_isSet;
}

bool OAIBatchPayment::is_date_string_Valid() const{
    return m_date_string_isValid;
}

QString OAIBatchPayment::getDetails() const {
    return m_details;
}
void OAIBatchPayment::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIBatchPayment::is_details_Set() const{
    return m_details_isSet;
}

bool OAIBatchPayment::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIBatchPayment::getIsReconciled() const {
    return m_is_reconciled;
}
void OAIBatchPayment::setIsReconciled(const QString &is_reconciled) {
    m_is_reconciled = is_reconciled;
    m_is_reconciled_isSet = true;
}

bool OAIBatchPayment::is_is_reconciled_Set() const{
    return m_is_reconciled_isSet;
}

bool OAIBatchPayment::is_is_reconciled_Valid() const{
    return m_is_reconciled_isValid;
}

QString OAIBatchPayment::getNarrative() const {
    return m_narrative;
}
void OAIBatchPayment::setNarrative(const QString &narrative) {
    m_narrative = narrative;
    m_narrative_isSet = true;
}

bool OAIBatchPayment::is_narrative_Set() const{
    return m_narrative_isSet;
}

bool OAIBatchPayment::is_narrative_Valid() const{
    return m_narrative_isValid;
}

QString OAIBatchPayment::getParticulars() const {
    return m_particulars;
}
void OAIBatchPayment::setParticulars(const QString &particulars) {
    m_particulars = particulars;
    m_particulars_isSet = true;
}

bool OAIBatchPayment::is_particulars_Set() const{
    return m_particulars_isSet;
}

bool OAIBatchPayment::is_particulars_Valid() const{
    return m_particulars_isValid;
}

QList<OAIPayment> OAIBatchPayment::getPayments() const {
    return m_payments;
}
void OAIBatchPayment::setPayments(const QList<OAIPayment> &payments) {
    m_payments = payments;
    m_payments_isSet = true;
}

bool OAIBatchPayment::is_payments_Set() const{
    return m_payments_isSet;
}

bool OAIBatchPayment::is_payments_Valid() const{
    return m_payments_isValid;
}

QString OAIBatchPayment::getReference() const {
    return m_reference;
}
void OAIBatchPayment::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIBatchPayment::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIBatchPayment::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIBatchPayment::getStatus() const {
    return m_status;
}
void OAIBatchPayment::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBatchPayment::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBatchPayment::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIBatchPayment::getTotalAmount() const {
    return m_total_amount;
}
void OAIBatchPayment::setTotalAmount(const QString &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIBatchPayment::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIBatchPayment::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

QString OAIBatchPayment::getType() const {
    return m_type;
}
void OAIBatchPayment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBatchPayment::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBatchPayment::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIBatchPayment::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIBatchPayment::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIBatchPayment::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIBatchPayment::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

bool OAIBatchPayment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_reconciled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_narrative_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_particulars_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchPayment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
