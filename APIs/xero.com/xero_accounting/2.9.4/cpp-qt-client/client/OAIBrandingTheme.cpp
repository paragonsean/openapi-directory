/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrandingTheme.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrandingTheme::OAIBrandingTheme(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrandingTheme::OAIBrandingTheme() {
    this->initializeModel();
}

OAIBrandingTheme::~OAIBrandingTheme() {}

void OAIBrandingTheme::initializeModel() {

    m_branding_theme_id_isSet = false;
    m_branding_theme_id_isValid = false;

    m_created_date_utc_isSet = false;
    m_created_date_utc_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIBrandingTheme::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrandingTheme::fromJsonObject(QJsonObject json) {

    m_branding_theme_id_isValid = ::OpenAPI::fromJsonValue(m_branding_theme_id, json[QString("BrandingThemeID")]);
    m_branding_theme_id_isSet = !json[QString("BrandingThemeID")].isNull() && m_branding_theme_id_isValid;

    m_created_date_utc_isValid = ::OpenAPI::fromJsonValue(m_created_date_utc, json[QString("CreatedDateUTC")]);
    m_created_date_utc_isSet = !json[QString("CreatedDateUTC")].isNull() && m_created_date_utc_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("LogoUrl")]);
    m_logo_url_isSet = !json[QString("LogoUrl")].isNull() && m_logo_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("SortOrder")]);
    m_sort_order_isSet = !json[QString("SortOrder")].isNull() && m_sort_order_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIBrandingTheme::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrandingTheme::asJsonObject() const {
    QJsonObject obj;
    if (m_branding_theme_id_isSet) {
        obj.insert(QString("BrandingThemeID"), ::OpenAPI::toJsonValue(m_branding_theme_id));
    }
    if (m_created_date_utc_isSet) {
        obj.insert(QString("CreatedDateUTC"), ::OpenAPI::toJsonValue(m_created_date_utc));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("LogoUrl"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("SortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIBrandingTheme::getBrandingThemeId() const {
    return m_branding_theme_id;
}
void OAIBrandingTheme::setBrandingThemeId(const QString &branding_theme_id) {
    m_branding_theme_id = branding_theme_id;
    m_branding_theme_id_isSet = true;
}

bool OAIBrandingTheme::is_branding_theme_id_Set() const{
    return m_branding_theme_id_isSet;
}

bool OAIBrandingTheme::is_branding_theme_id_Valid() const{
    return m_branding_theme_id_isValid;
}

QString OAIBrandingTheme::getCreatedDateUtc() const {
    return m_created_date_utc;
}
void OAIBrandingTheme::setCreatedDateUtc(const QString &created_date_utc) {
    m_created_date_utc = created_date_utc;
    m_created_date_utc_isSet = true;
}

bool OAIBrandingTheme::is_created_date_utc_Set() const{
    return m_created_date_utc_isSet;
}

bool OAIBrandingTheme::is_created_date_utc_Valid() const{
    return m_created_date_utc_isValid;
}

QString OAIBrandingTheme::getLogoUrl() const {
    return m_logo_url;
}
void OAIBrandingTheme::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAIBrandingTheme::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAIBrandingTheme::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QString OAIBrandingTheme::getName() const {
    return m_name;
}
void OAIBrandingTheme::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBrandingTheme::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBrandingTheme::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIBrandingTheme::getSortOrder() const {
    return m_sort_order;
}
void OAIBrandingTheme::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIBrandingTheme::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIBrandingTheme::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QString OAIBrandingTheme::getType() const {
    return m_type;
}
void OAIBrandingTheme::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBrandingTheme::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBrandingTheme::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIBrandingTheme::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branding_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrandingTheme::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
