/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBankTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBankTransaction::OAIBankTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBankTransaction::OAIBankTransaction() {
    this->initializeModel();
}

OAIBankTransaction::~OAIBankTransaction() {}

void OAIBankTransaction::initializeModel() {

    m_bank_account_isSet = false;
    m_bank_account_isValid = false;

    m_bank_transaction_id_isSet = false;
    m_bank_transaction_id_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_currency_rate_isSet = false;
    m_currency_rate_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_has_attachments_isSet = false;
    m_has_attachments_isValid = false;

    m_is_reconciled_isSet = false;
    m_is_reconciled_isValid = false;

    m_line_amount_types_isSet = false;
    m_line_amount_types_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_overpayment_id_isSet = false;
    m_overpayment_id_isValid = false;

    m_prepayment_id_isSet = false;
    m_prepayment_id_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_attribute_string_isSet = false;
    m_status_attribute_string_isValid = false;

    m_sub_total_isSet = false;
    m_sub_total_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_total_tax_isSet = false;
    m_total_tax_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAIBankTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBankTransaction::fromJsonObject(QJsonObject json) {

    m_bank_account_isValid = ::OpenAPI::fromJsonValue(m_bank_account, json[QString("BankAccount")]);
    m_bank_account_isSet = !json[QString("BankAccount")].isNull() && m_bank_account_isValid;

    m_bank_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_bank_transaction_id, json[QString("BankTransactionID")]);
    m_bank_transaction_id_isSet = !json[QString("BankTransactionID")].isNull() && m_bank_transaction_id_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("Contact")]);
    m_contact_isSet = !json[QString("Contact")].isNull() && m_contact_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_currency_rate_isValid = ::OpenAPI::fromJsonValue(m_currency_rate, json[QString("CurrencyRate")]);
    m_currency_rate_isSet = !json[QString("CurrencyRate")].isNull() && m_currency_rate_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_has_attachments_isValid = ::OpenAPI::fromJsonValue(m_has_attachments, json[QString("HasAttachments")]);
    m_has_attachments_isSet = !json[QString("HasAttachments")].isNull() && m_has_attachments_isValid;

    m_is_reconciled_isValid = ::OpenAPI::fromJsonValue(m_is_reconciled, json[QString("IsReconciled")]);
    m_is_reconciled_isSet = !json[QString("IsReconciled")].isNull() && m_is_reconciled_isValid;

    m_line_amount_types_isValid = ::OpenAPI::fromJsonValue(m_line_amount_types, json[QString("LineAmountTypes")]);
    m_line_amount_types_isSet = !json[QString("LineAmountTypes")].isNull() && m_line_amount_types_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("LineItems")]);
    m_line_items_isSet = !json[QString("LineItems")].isNull() && m_line_items_isValid;

    m_overpayment_id_isValid = ::OpenAPI::fromJsonValue(m_overpayment_id, json[QString("OverpaymentID")]);
    m_overpayment_id_isSet = !json[QString("OverpaymentID")].isNull() && m_overpayment_id_isValid;

    m_prepayment_id_isValid = ::OpenAPI::fromJsonValue(m_prepayment_id, json[QString("PrepaymentID")]);
    m_prepayment_id_isSet = !json[QString("PrepaymentID")].isNull() && m_prepayment_id_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("Reference")]);
    m_reference_isSet = !json[QString("Reference")].isNull() && m_reference_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_attribute_string_isValid = ::OpenAPI::fromJsonValue(m_status_attribute_string, json[QString("StatusAttributeString")]);
    m_status_attribute_string_isSet = !json[QString("StatusAttributeString")].isNull() && m_status_attribute_string_isValid;

    m_sub_total_isValid = ::OpenAPI::fromJsonValue(m_sub_total, json[QString("SubTotal")]);
    m_sub_total_isSet = !json[QString("SubTotal")].isNull() && m_sub_total_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;

    m_total_tax_isValid = ::OpenAPI::fromJsonValue(m_total_tax, json[QString("TotalTax")]);
    m_total_tax_isSet = !json[QString("TotalTax")].isNull() && m_total_tax_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;
}

QString OAIBankTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBankTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_bank_account.isSet()) {
        obj.insert(QString("BankAccount"), ::OpenAPI::toJsonValue(m_bank_account));
    }
    if (m_bank_transaction_id_isSet) {
        obj.insert(QString("BankTransactionID"), ::OpenAPI::toJsonValue(m_bank_transaction_id));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("Contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_currency_code.isSet()) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_currency_rate_isSet) {
        obj.insert(QString("CurrencyRate"), ::OpenAPI::toJsonValue(m_currency_rate));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_has_attachments_isSet) {
        obj.insert(QString("HasAttachments"), ::OpenAPI::toJsonValue(m_has_attachments));
    }
    if (m_is_reconciled_isSet) {
        obj.insert(QString("IsReconciled"), ::OpenAPI::toJsonValue(m_is_reconciled));
    }
    if (m_line_amount_types.isSet()) {
        obj.insert(QString("LineAmountTypes"), ::OpenAPI::toJsonValue(m_line_amount_types));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("LineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_overpayment_id_isSet) {
        obj.insert(QString("OverpaymentID"), ::OpenAPI::toJsonValue(m_overpayment_id));
    }
    if (m_prepayment_id_isSet) {
        obj.insert(QString("PrepaymentID"), ::OpenAPI::toJsonValue(m_prepayment_id));
    }
    if (m_reference_isSet) {
        obj.insert(QString("Reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_attribute_string_isSet) {
        obj.insert(QString("StatusAttributeString"), ::OpenAPI::toJsonValue(m_status_attribute_string));
    }
    if (m_sub_total_isSet) {
        obj.insert(QString("SubTotal"), ::OpenAPI::toJsonValue(m_sub_total));
    }
    if (m_total_isSet) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_total_tax_isSet) {
        obj.insert(QString("TotalTax"), ::OpenAPI::toJsonValue(m_total_tax));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

OAIAccount OAIBankTransaction::getBankAccount() const {
    return m_bank_account;
}
void OAIBankTransaction::setBankAccount(const OAIAccount &bank_account) {
    m_bank_account = bank_account;
    m_bank_account_isSet = true;
}

bool OAIBankTransaction::is_bank_account_Set() const{
    return m_bank_account_isSet;
}

bool OAIBankTransaction::is_bank_account_Valid() const{
    return m_bank_account_isValid;
}

QString OAIBankTransaction::getBankTransactionId() const {
    return m_bank_transaction_id;
}
void OAIBankTransaction::setBankTransactionId(const QString &bank_transaction_id) {
    m_bank_transaction_id = bank_transaction_id;
    m_bank_transaction_id_isSet = true;
}

bool OAIBankTransaction::is_bank_transaction_id_Set() const{
    return m_bank_transaction_id_isSet;
}

bool OAIBankTransaction::is_bank_transaction_id_Valid() const{
    return m_bank_transaction_id_isValid;
}

OAIContact OAIBankTransaction::getContact() const {
    return m_contact;
}
void OAIBankTransaction::setContact(const OAIContact &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIBankTransaction::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIBankTransaction::is_contact_Valid() const{
    return m_contact_isValid;
}

OAICurrencyCode OAIBankTransaction::getCurrencyCode() const {
    return m_currency_code;
}
void OAIBankTransaction::setCurrencyCode(const OAICurrencyCode &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIBankTransaction::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIBankTransaction::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

double OAIBankTransaction::getCurrencyRate() const {
    return m_currency_rate;
}
void OAIBankTransaction::setCurrencyRate(const double &currency_rate) {
    m_currency_rate = currency_rate;
    m_currency_rate_isSet = true;
}

bool OAIBankTransaction::is_currency_rate_Set() const{
    return m_currency_rate_isSet;
}

bool OAIBankTransaction::is_currency_rate_Valid() const{
    return m_currency_rate_isValid;
}

QString OAIBankTransaction::getDate() const {
    return m_date;
}
void OAIBankTransaction::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIBankTransaction::is_date_Set() const{
    return m_date_isSet;
}

bool OAIBankTransaction::is_date_Valid() const{
    return m_date_isValid;
}

bool OAIBankTransaction::isHasAttachments() const {
    return m_has_attachments;
}
void OAIBankTransaction::setHasAttachments(const bool &has_attachments) {
    m_has_attachments = has_attachments;
    m_has_attachments_isSet = true;
}

bool OAIBankTransaction::is_has_attachments_Set() const{
    return m_has_attachments_isSet;
}

bool OAIBankTransaction::is_has_attachments_Valid() const{
    return m_has_attachments_isValid;
}

bool OAIBankTransaction::isIsReconciled() const {
    return m_is_reconciled;
}
void OAIBankTransaction::setIsReconciled(const bool &is_reconciled) {
    m_is_reconciled = is_reconciled;
    m_is_reconciled_isSet = true;
}

bool OAIBankTransaction::is_is_reconciled_Set() const{
    return m_is_reconciled_isSet;
}

bool OAIBankTransaction::is_is_reconciled_Valid() const{
    return m_is_reconciled_isValid;
}

OAILineAmountTypes OAIBankTransaction::getLineAmountTypes() const {
    return m_line_amount_types;
}
void OAIBankTransaction::setLineAmountTypes(const OAILineAmountTypes &line_amount_types) {
    m_line_amount_types = line_amount_types;
    m_line_amount_types_isSet = true;
}

bool OAIBankTransaction::is_line_amount_types_Set() const{
    return m_line_amount_types_isSet;
}

bool OAIBankTransaction::is_line_amount_types_Valid() const{
    return m_line_amount_types_isValid;
}

QList<OAILineItem> OAIBankTransaction::getLineItems() const {
    return m_line_items;
}
void OAIBankTransaction::setLineItems(const QList<OAILineItem> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIBankTransaction::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIBankTransaction::is_line_items_Valid() const{
    return m_line_items_isValid;
}

QString OAIBankTransaction::getOverpaymentId() const {
    return m_overpayment_id;
}
void OAIBankTransaction::setOverpaymentId(const QString &overpayment_id) {
    m_overpayment_id = overpayment_id;
    m_overpayment_id_isSet = true;
}

bool OAIBankTransaction::is_overpayment_id_Set() const{
    return m_overpayment_id_isSet;
}

bool OAIBankTransaction::is_overpayment_id_Valid() const{
    return m_overpayment_id_isValid;
}

QString OAIBankTransaction::getPrepaymentId() const {
    return m_prepayment_id;
}
void OAIBankTransaction::setPrepaymentId(const QString &prepayment_id) {
    m_prepayment_id = prepayment_id;
    m_prepayment_id_isSet = true;
}

bool OAIBankTransaction::is_prepayment_id_Set() const{
    return m_prepayment_id_isSet;
}

bool OAIBankTransaction::is_prepayment_id_Valid() const{
    return m_prepayment_id_isValid;
}

QString OAIBankTransaction::getReference() const {
    return m_reference;
}
void OAIBankTransaction::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIBankTransaction::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIBankTransaction::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIBankTransaction::getStatus() const {
    return m_status;
}
void OAIBankTransaction::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBankTransaction::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBankTransaction::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIBankTransaction::getStatusAttributeString() const {
    return m_status_attribute_string;
}
void OAIBankTransaction::setStatusAttributeString(const QString &status_attribute_string) {
    m_status_attribute_string = status_attribute_string;
    m_status_attribute_string_isSet = true;
}

bool OAIBankTransaction::is_status_attribute_string_Set() const{
    return m_status_attribute_string_isSet;
}

bool OAIBankTransaction::is_status_attribute_string_Valid() const{
    return m_status_attribute_string_isValid;
}

double OAIBankTransaction::getSubTotal() const {
    return m_sub_total;
}
void OAIBankTransaction::setSubTotal(const double &sub_total) {
    m_sub_total = sub_total;
    m_sub_total_isSet = true;
}

bool OAIBankTransaction::is_sub_total_Set() const{
    return m_sub_total_isSet;
}

bool OAIBankTransaction::is_sub_total_Valid() const{
    return m_sub_total_isValid;
}

double OAIBankTransaction::getTotal() const {
    return m_total;
}
void OAIBankTransaction::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIBankTransaction::is_total_Set() const{
    return m_total_isSet;
}

bool OAIBankTransaction::is_total_Valid() const{
    return m_total_isValid;
}

double OAIBankTransaction::getTotalTax() const {
    return m_total_tax;
}
void OAIBankTransaction::setTotalTax(const double &total_tax) {
    m_total_tax = total_tax;
    m_total_tax_isSet = true;
}

bool OAIBankTransaction::is_total_tax_Set() const{
    return m_total_tax_isSet;
}

bool OAIBankTransaction::is_total_tax_Valid() const{
    return m_total_tax_isValid;
}

QString OAIBankTransaction::getType() const {
    return m_type;
}
void OAIBankTransaction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBankTransaction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBankTransaction::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIBankTransaction::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIBankTransaction::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIBankTransaction::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIBankTransaction::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

QString OAIBankTransaction::getUrl() const {
    return m_url;
}
void OAIBankTransaction::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIBankTransaction::is_url_Set() const{
    return m_url_isSet;
}

bool OAIBankTransaction::is_url_Valid() const{
    return m_url_isValid;
}

QList<OAIValidationError> OAIBankTransaction::getValidationErrors() const {
    return m_validation_errors;
}
void OAIBankTransaction::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIBankTransaction::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIBankTransaction::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAIBankTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bank_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_reconciled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_amount_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_overpayment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepayment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_attribute_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBankTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bank_account_isValid && m_line_items_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
