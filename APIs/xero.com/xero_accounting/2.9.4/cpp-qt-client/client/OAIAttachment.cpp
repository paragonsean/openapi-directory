/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachment::OAIAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachment::OAIAttachment() {
    this->initializeModel();
}

OAIAttachment::~OAIAttachment() {}

void OAIAttachment::initializeModel() {

    m_attachment_id_isSet = false;
    m_attachment_id_isValid = false;

    m_content_length_isSet = false;
    m_content_length_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_include_online_isSet = false;
    m_include_online_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachment::fromJsonObject(QJsonObject json) {

    m_attachment_id_isValid = ::OpenAPI::fromJsonValue(m_attachment_id, json[QString("AttachmentID")]);
    m_attachment_id_isSet = !json[QString("AttachmentID")].isNull() && m_attachment_id_isValid;

    m_content_length_isValid = ::OpenAPI::fromJsonValue(m_content_length, json[QString("ContentLength")]);
    m_content_length_isSet = !json[QString("ContentLength")].isNull() && m_content_length_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("FileName")]);
    m_file_name_isSet = !json[QString("FileName")].isNull() && m_file_name_isValid;

    m_include_online_isValid = ::OpenAPI::fromJsonValue(m_include_online, json[QString("IncludeOnline")]);
    m_include_online_isSet = !json[QString("IncludeOnline")].isNull() && m_include_online_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("MimeType")]);
    m_mime_type_isSet = !json[QString("MimeType")].isNull() && m_mime_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;
}

QString OAIAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_attachment_id_isSet) {
        obj.insert(QString("AttachmentID"), ::OpenAPI::toJsonValue(m_attachment_id));
    }
    if (m_content_length_isSet) {
        obj.insert(QString("ContentLength"), ::OpenAPI::toJsonValue(m_content_length));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("FileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_include_online_isSet) {
        obj.insert(QString("IncludeOnline"), ::OpenAPI::toJsonValue(m_include_online));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("MimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIAttachment::getAttachmentId() const {
    return m_attachment_id;
}
void OAIAttachment::setAttachmentId(const QString &attachment_id) {
    m_attachment_id = attachment_id;
    m_attachment_id_isSet = true;
}

bool OAIAttachment::is_attachment_id_Set() const{
    return m_attachment_id_isSet;
}

bool OAIAttachment::is_attachment_id_Valid() const{
    return m_attachment_id_isValid;
}

qint32 OAIAttachment::getContentLength() const {
    return m_content_length;
}
void OAIAttachment::setContentLength(const qint32 &content_length) {
    m_content_length = content_length;
    m_content_length_isSet = true;
}

bool OAIAttachment::is_content_length_Set() const{
    return m_content_length_isSet;
}

bool OAIAttachment::is_content_length_Valid() const{
    return m_content_length_isValid;
}

QString OAIAttachment::getFileName() const {
    return m_file_name;
}
void OAIAttachment::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIAttachment::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIAttachment::is_file_name_Valid() const{
    return m_file_name_isValid;
}

bool OAIAttachment::isIncludeOnline() const {
    return m_include_online;
}
void OAIAttachment::setIncludeOnline(const bool &include_online) {
    m_include_online = include_online;
    m_include_online_isSet = true;
}

bool OAIAttachment::is_include_online_Set() const{
    return m_include_online_isSet;
}

bool OAIAttachment::is_include_online_Valid() const{
    return m_include_online_isValid;
}

QString OAIAttachment::getMimeType() const {
    return m_mime_type;
}
void OAIAttachment::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIAttachment::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIAttachment::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIAttachment::getUrl() const {
    return m_url;
}
void OAIAttachment::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAttachment::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAttachment::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_online_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
