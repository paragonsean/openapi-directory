/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuote::OAIQuote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuote::OAIQuote() {
    this->initializeModel();
}

OAIQuote::~OAIQuote() {}

void OAIQuote::initializeModel() {

    m_branding_theme_id_isSet = false;
    m_branding_theme_id_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_currency_rate_isSet = false;
    m_currency_rate_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_date_string_isSet = false;
    m_date_string_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_expiry_date_string_isSet = false;
    m_expiry_date_string_isValid = false;

    m_line_amount_types_isSet = false;
    m_line_amount_types_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_quote_id_isSet = false;
    m_quote_id_isValid = false;

    m_quote_number_isSet = false;
    m_quote_number_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_attribute_string_isSet = false;
    m_status_attribute_string_isValid = false;

    m_sub_total_isSet = false;
    m_sub_total_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_total_discount_isSet = false;
    m_total_discount_isValid = false;

    m_total_tax_isSet = false;
    m_total_tax_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAIQuote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuote::fromJsonObject(QJsonObject json) {

    m_branding_theme_id_isValid = ::OpenAPI::fromJsonValue(m_branding_theme_id, json[QString("BrandingThemeID")]);
    m_branding_theme_id_isSet = !json[QString("BrandingThemeID")].isNull() && m_branding_theme_id_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("Contact")]);
    m_contact_isSet = !json[QString("Contact")].isNull() && m_contact_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_currency_rate_isValid = ::OpenAPI::fromJsonValue(m_currency_rate, json[QString("CurrencyRate")]);
    m_currency_rate_isSet = !json[QString("CurrencyRate")].isNull() && m_currency_rate_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_date_string_isValid = ::OpenAPI::fromJsonValue(m_date_string, json[QString("DateString")]);
    m_date_string_isSet = !json[QString("DateString")].isNull() && m_date_string_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("ExpiryDate")]);
    m_expiry_date_isSet = !json[QString("ExpiryDate")].isNull() && m_expiry_date_isValid;

    m_expiry_date_string_isValid = ::OpenAPI::fromJsonValue(m_expiry_date_string, json[QString("ExpiryDateString")]);
    m_expiry_date_string_isSet = !json[QString("ExpiryDateString")].isNull() && m_expiry_date_string_isValid;

    m_line_amount_types_isValid = ::OpenAPI::fromJsonValue(m_line_amount_types, json[QString("LineAmountTypes")]);
    m_line_amount_types_isSet = !json[QString("LineAmountTypes")].isNull() && m_line_amount_types_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("LineItems")]);
    m_line_items_isSet = !json[QString("LineItems")].isNull() && m_line_items_isValid;

    m_quote_id_isValid = ::OpenAPI::fromJsonValue(m_quote_id, json[QString("QuoteID")]);
    m_quote_id_isSet = !json[QString("QuoteID")].isNull() && m_quote_id_isValid;

    m_quote_number_isValid = ::OpenAPI::fromJsonValue(m_quote_number, json[QString("QuoteNumber")]);
    m_quote_number_isSet = !json[QString("QuoteNumber")].isNull() && m_quote_number_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("Reference")]);
    m_reference_isSet = !json[QString("Reference")].isNull() && m_reference_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_attribute_string_isValid = ::OpenAPI::fromJsonValue(m_status_attribute_string, json[QString("StatusAttributeString")]);
    m_status_attribute_string_isSet = !json[QString("StatusAttributeString")].isNull() && m_status_attribute_string_isValid;

    m_sub_total_isValid = ::OpenAPI::fromJsonValue(m_sub_total, json[QString("SubTotal")]);
    m_sub_total_isSet = !json[QString("SubTotal")].isNull() && m_sub_total_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("Summary")]);
    m_summary_isSet = !json[QString("Summary")].isNull() && m_summary_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("Terms")]);
    m_terms_isSet = !json[QString("Terms")].isNull() && m_terms_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;

    m_total_discount_isValid = ::OpenAPI::fromJsonValue(m_total_discount, json[QString("TotalDiscount")]);
    m_total_discount_isSet = !json[QString("TotalDiscount")].isNull() && m_total_discount_isValid;

    m_total_tax_isValid = ::OpenAPI::fromJsonValue(m_total_tax, json[QString("TotalTax")]);
    m_total_tax_isSet = !json[QString("TotalTax")].isNull() && m_total_tax_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;
}

QString OAIQuote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuote::asJsonObject() const {
    QJsonObject obj;
    if (m_branding_theme_id_isSet) {
        obj.insert(QString("BrandingThemeID"), ::OpenAPI::toJsonValue(m_branding_theme_id));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("Contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_currency_code.isSet()) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_currency_rate_isSet) {
        obj.insert(QString("CurrencyRate"), ::OpenAPI::toJsonValue(m_currency_rate));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_date_string_isSet) {
        obj.insert(QString("DateString"), ::OpenAPI::toJsonValue(m_date_string));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("ExpiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_expiry_date_string_isSet) {
        obj.insert(QString("ExpiryDateString"), ::OpenAPI::toJsonValue(m_expiry_date_string));
    }
    if (m_line_amount_types.isSet()) {
        obj.insert(QString("LineAmountTypes"), ::OpenAPI::toJsonValue(m_line_amount_types));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("LineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_quote_id_isSet) {
        obj.insert(QString("QuoteID"), ::OpenAPI::toJsonValue(m_quote_id));
    }
    if (m_quote_number_isSet) {
        obj.insert(QString("QuoteNumber"), ::OpenAPI::toJsonValue(m_quote_number));
    }
    if (m_reference_isSet) {
        obj.insert(QString("Reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_attribute_string_isSet) {
        obj.insert(QString("StatusAttributeString"), ::OpenAPI::toJsonValue(m_status_attribute_string));
    }
    if (m_sub_total_isSet) {
        obj.insert(QString("SubTotal"), ::OpenAPI::toJsonValue(m_sub_total));
    }
    if (m_summary_isSet) {
        obj.insert(QString("Summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_terms_isSet) {
        obj.insert(QString("Terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_total_isSet) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_total_discount_isSet) {
        obj.insert(QString("TotalDiscount"), ::OpenAPI::toJsonValue(m_total_discount));
    }
    if (m_total_tax_isSet) {
        obj.insert(QString("TotalTax"), ::OpenAPI::toJsonValue(m_total_tax));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

QString OAIQuote::getBrandingThemeId() const {
    return m_branding_theme_id;
}
void OAIQuote::setBrandingThemeId(const QString &branding_theme_id) {
    m_branding_theme_id = branding_theme_id;
    m_branding_theme_id_isSet = true;
}

bool OAIQuote::is_branding_theme_id_Set() const{
    return m_branding_theme_id_isSet;
}

bool OAIQuote::is_branding_theme_id_Valid() const{
    return m_branding_theme_id_isValid;
}

OAIContact OAIQuote::getContact() const {
    return m_contact;
}
void OAIQuote::setContact(const OAIContact &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIQuote::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIQuote::is_contact_Valid() const{
    return m_contact_isValid;
}

OAICurrencyCode OAIQuote::getCurrencyCode() const {
    return m_currency_code;
}
void OAIQuote::setCurrencyCode(const OAICurrencyCode &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIQuote::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIQuote::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

double OAIQuote::getCurrencyRate() const {
    return m_currency_rate;
}
void OAIQuote::setCurrencyRate(const double &currency_rate) {
    m_currency_rate = currency_rate;
    m_currency_rate_isSet = true;
}

bool OAIQuote::is_currency_rate_Set() const{
    return m_currency_rate_isSet;
}

bool OAIQuote::is_currency_rate_Valid() const{
    return m_currency_rate_isValid;
}

QString OAIQuote::getDate() const {
    return m_date;
}
void OAIQuote::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIQuote::is_date_Set() const{
    return m_date_isSet;
}

bool OAIQuote::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIQuote::getDateString() const {
    return m_date_string;
}
void OAIQuote::setDateString(const QString &date_string) {
    m_date_string = date_string;
    m_date_string_isSet = true;
}

bool OAIQuote::is_date_string_Set() const{
    return m_date_string_isSet;
}

bool OAIQuote::is_date_string_Valid() const{
    return m_date_string_isValid;
}

QString OAIQuote::getExpiryDate() const {
    return m_expiry_date;
}
void OAIQuote::setExpiryDate(const QString &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAIQuote::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAIQuote::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

QString OAIQuote::getExpiryDateString() const {
    return m_expiry_date_string;
}
void OAIQuote::setExpiryDateString(const QString &expiry_date_string) {
    m_expiry_date_string = expiry_date_string;
    m_expiry_date_string_isSet = true;
}

bool OAIQuote::is_expiry_date_string_Set() const{
    return m_expiry_date_string_isSet;
}

bool OAIQuote::is_expiry_date_string_Valid() const{
    return m_expiry_date_string_isValid;
}

OAIQuoteLineAmountTypes OAIQuote::getLineAmountTypes() const {
    return m_line_amount_types;
}
void OAIQuote::setLineAmountTypes(const OAIQuoteLineAmountTypes &line_amount_types) {
    m_line_amount_types = line_amount_types;
    m_line_amount_types_isSet = true;
}

bool OAIQuote::is_line_amount_types_Set() const{
    return m_line_amount_types_isSet;
}

bool OAIQuote::is_line_amount_types_Valid() const{
    return m_line_amount_types_isValid;
}

QList<OAILineItem> OAIQuote::getLineItems() const {
    return m_line_items;
}
void OAIQuote::setLineItems(const QList<OAILineItem> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIQuote::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIQuote::is_line_items_Valid() const{
    return m_line_items_isValid;
}

QString OAIQuote::getQuoteId() const {
    return m_quote_id;
}
void OAIQuote::setQuoteId(const QString &quote_id) {
    m_quote_id = quote_id;
    m_quote_id_isSet = true;
}

bool OAIQuote::is_quote_id_Set() const{
    return m_quote_id_isSet;
}

bool OAIQuote::is_quote_id_Valid() const{
    return m_quote_id_isValid;
}

QString OAIQuote::getQuoteNumber() const {
    return m_quote_number;
}
void OAIQuote::setQuoteNumber(const QString &quote_number) {
    m_quote_number = quote_number;
    m_quote_number_isSet = true;
}

bool OAIQuote::is_quote_number_Set() const{
    return m_quote_number_isSet;
}

bool OAIQuote::is_quote_number_Valid() const{
    return m_quote_number_isValid;
}

QString OAIQuote::getReference() const {
    return m_reference;
}
void OAIQuote::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIQuote::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIQuote::is_reference_Valid() const{
    return m_reference_isValid;
}

OAIQuoteStatusCodes OAIQuote::getStatus() const {
    return m_status;
}
void OAIQuote::setStatus(const OAIQuoteStatusCodes &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIQuote::is_status_Set() const{
    return m_status_isSet;
}

bool OAIQuote::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIQuote::getStatusAttributeString() const {
    return m_status_attribute_string;
}
void OAIQuote::setStatusAttributeString(const QString &status_attribute_string) {
    m_status_attribute_string = status_attribute_string;
    m_status_attribute_string_isSet = true;
}

bool OAIQuote::is_status_attribute_string_Set() const{
    return m_status_attribute_string_isSet;
}

bool OAIQuote::is_status_attribute_string_Valid() const{
    return m_status_attribute_string_isValid;
}

double OAIQuote::getSubTotal() const {
    return m_sub_total;
}
void OAIQuote::setSubTotal(const double &sub_total) {
    m_sub_total = sub_total;
    m_sub_total_isSet = true;
}

bool OAIQuote::is_sub_total_Set() const{
    return m_sub_total_isSet;
}

bool OAIQuote::is_sub_total_Valid() const{
    return m_sub_total_isValid;
}

QString OAIQuote::getSummary() const {
    return m_summary;
}
void OAIQuote::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIQuote::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIQuote::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAIQuote::getTerms() const {
    return m_terms;
}
void OAIQuote::setTerms(const QString &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAIQuote::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAIQuote::is_terms_Valid() const{
    return m_terms_isValid;
}

QString OAIQuote::getTitle() const {
    return m_title;
}
void OAIQuote::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIQuote::is_title_Set() const{
    return m_title_isSet;
}

bool OAIQuote::is_title_Valid() const{
    return m_title_isValid;
}

double OAIQuote::getTotal() const {
    return m_total;
}
void OAIQuote::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIQuote::is_total_Set() const{
    return m_total_isSet;
}

bool OAIQuote::is_total_Valid() const{
    return m_total_isValid;
}

double OAIQuote::getTotalDiscount() const {
    return m_total_discount;
}
void OAIQuote::setTotalDiscount(const double &total_discount) {
    m_total_discount = total_discount;
    m_total_discount_isSet = true;
}

bool OAIQuote::is_total_discount_Set() const{
    return m_total_discount_isSet;
}

bool OAIQuote::is_total_discount_Valid() const{
    return m_total_discount_isValid;
}

double OAIQuote::getTotalTax() const {
    return m_total_tax;
}
void OAIQuote::setTotalTax(const double &total_tax) {
    m_total_tax = total_tax;
    m_total_tax_isSet = true;
}

bool OAIQuote::is_total_tax_Set() const{
    return m_total_tax_isSet;
}

bool OAIQuote::is_total_tax_Valid() const{
    return m_total_tax_isValid;
}

QString OAIQuote::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIQuote::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIQuote::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIQuote::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

QList<OAIValidationError> OAIQuote::getValidationErrors() const {
    return m_validation_errors;
}
void OAIQuote::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIQuote::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIQuote::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAIQuote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branding_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_amount_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_attribute_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
