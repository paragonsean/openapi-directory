/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvoice::OAIInvoice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvoice::OAIInvoice() {
    this->initializeModel();
}

OAIInvoice::~OAIInvoice() {}

void OAIInvoice::initializeModel() {

    m_amount_credited_isSet = false;
    m_amount_credited_isValid = false;

    m_amount_due_isSet = false;
    m_amount_due_isValid = false;

    m_amount_paid_isSet = false;
    m_amount_paid_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_branding_theme_id_isSet = false;
    m_branding_theme_id_isValid = false;

    m_cis_deduction_isSet = false;
    m_cis_deduction_isValid = false;

    m_cis_rate_isSet = false;
    m_cis_rate_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_credit_notes_isSet = false;
    m_credit_notes_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_currency_rate_isSet = false;
    m_currency_rate_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_expected_payment_date_isSet = false;
    m_expected_payment_date_isValid = false;

    m_fully_paid_on_date_isSet = false;
    m_fully_paid_on_date_isValid = false;

    m_has_attachments_isSet = false;
    m_has_attachments_isValid = false;

    m_has_errors_isSet = false;
    m_has_errors_isValid = false;

    m_invoice_id_isSet = false;
    m_invoice_id_isValid = false;

    m_invoice_number_isSet = false;
    m_invoice_number_isValid = false;

    m_is_discounted_isSet = false;
    m_is_discounted_isValid = false;

    m_line_amount_types_isSet = false;
    m_line_amount_types_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_overpayments_isSet = false;
    m_overpayments_isValid = false;

    m_payments_isSet = false;
    m_payments_isValid = false;

    m_planned_payment_date_isSet = false;
    m_planned_payment_date_isValid = false;

    m_prepayments_isSet = false;
    m_prepayments_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_repeating_invoice_id_isSet = false;
    m_repeating_invoice_id_isValid = false;

    m_sent_to_contact_isSet = false;
    m_sent_to_contact_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_attribute_string_isSet = false;
    m_status_attribute_string_isValid = false;

    m_sub_total_isSet = false;
    m_sub_total_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_total_discount_isSet = false;
    m_total_discount_isValid = false;

    m_total_tax_isSet = false;
    m_total_tax_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIInvoice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvoice::fromJsonObject(QJsonObject json) {

    m_amount_credited_isValid = ::OpenAPI::fromJsonValue(m_amount_credited, json[QString("AmountCredited")]);
    m_amount_credited_isSet = !json[QString("AmountCredited")].isNull() && m_amount_credited_isValid;

    m_amount_due_isValid = ::OpenAPI::fromJsonValue(m_amount_due, json[QString("AmountDue")]);
    m_amount_due_isSet = !json[QString("AmountDue")].isNull() && m_amount_due_isValid;

    m_amount_paid_isValid = ::OpenAPI::fromJsonValue(m_amount_paid, json[QString("AmountPaid")]);
    m_amount_paid_isSet = !json[QString("AmountPaid")].isNull() && m_amount_paid_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("Attachments")]);
    m_attachments_isSet = !json[QString("Attachments")].isNull() && m_attachments_isValid;

    m_branding_theme_id_isValid = ::OpenAPI::fromJsonValue(m_branding_theme_id, json[QString("BrandingThemeID")]);
    m_branding_theme_id_isSet = !json[QString("BrandingThemeID")].isNull() && m_branding_theme_id_isValid;

    m_cis_deduction_isValid = ::OpenAPI::fromJsonValue(m_cis_deduction, json[QString("CISDeduction")]);
    m_cis_deduction_isSet = !json[QString("CISDeduction")].isNull() && m_cis_deduction_isValid;

    m_cis_rate_isValid = ::OpenAPI::fromJsonValue(m_cis_rate, json[QString("CISRate")]);
    m_cis_rate_isSet = !json[QString("CISRate")].isNull() && m_cis_rate_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("Contact")]);
    m_contact_isSet = !json[QString("Contact")].isNull() && m_contact_isValid;

    m_credit_notes_isValid = ::OpenAPI::fromJsonValue(m_credit_notes, json[QString("CreditNotes")]);
    m_credit_notes_isSet = !json[QString("CreditNotes")].isNull() && m_credit_notes_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_currency_rate_isValid = ::OpenAPI::fromJsonValue(m_currency_rate, json[QString("CurrencyRate")]);
    m_currency_rate_isSet = !json[QString("CurrencyRate")].isNull() && m_currency_rate_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("DueDate")]);
    m_due_date_isSet = !json[QString("DueDate")].isNull() && m_due_date_isValid;

    m_expected_payment_date_isValid = ::OpenAPI::fromJsonValue(m_expected_payment_date, json[QString("ExpectedPaymentDate")]);
    m_expected_payment_date_isSet = !json[QString("ExpectedPaymentDate")].isNull() && m_expected_payment_date_isValid;

    m_fully_paid_on_date_isValid = ::OpenAPI::fromJsonValue(m_fully_paid_on_date, json[QString("FullyPaidOnDate")]);
    m_fully_paid_on_date_isSet = !json[QString("FullyPaidOnDate")].isNull() && m_fully_paid_on_date_isValid;

    m_has_attachments_isValid = ::OpenAPI::fromJsonValue(m_has_attachments, json[QString("HasAttachments")]);
    m_has_attachments_isSet = !json[QString("HasAttachments")].isNull() && m_has_attachments_isValid;

    m_has_errors_isValid = ::OpenAPI::fromJsonValue(m_has_errors, json[QString("HasErrors")]);
    m_has_errors_isSet = !json[QString("HasErrors")].isNull() && m_has_errors_isValid;

    m_invoice_id_isValid = ::OpenAPI::fromJsonValue(m_invoice_id, json[QString("InvoiceID")]);
    m_invoice_id_isSet = !json[QString("InvoiceID")].isNull() && m_invoice_id_isValid;

    m_invoice_number_isValid = ::OpenAPI::fromJsonValue(m_invoice_number, json[QString("InvoiceNumber")]);
    m_invoice_number_isSet = !json[QString("InvoiceNumber")].isNull() && m_invoice_number_isValid;

    m_is_discounted_isValid = ::OpenAPI::fromJsonValue(m_is_discounted, json[QString("IsDiscounted")]);
    m_is_discounted_isSet = !json[QString("IsDiscounted")].isNull() && m_is_discounted_isValid;

    m_line_amount_types_isValid = ::OpenAPI::fromJsonValue(m_line_amount_types, json[QString("LineAmountTypes")]);
    m_line_amount_types_isSet = !json[QString("LineAmountTypes")].isNull() && m_line_amount_types_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("LineItems")]);
    m_line_items_isSet = !json[QString("LineItems")].isNull() && m_line_items_isValid;

    m_overpayments_isValid = ::OpenAPI::fromJsonValue(m_overpayments, json[QString("Overpayments")]);
    m_overpayments_isSet = !json[QString("Overpayments")].isNull() && m_overpayments_isValid;

    m_payments_isValid = ::OpenAPI::fromJsonValue(m_payments, json[QString("Payments")]);
    m_payments_isSet = !json[QString("Payments")].isNull() && m_payments_isValid;

    m_planned_payment_date_isValid = ::OpenAPI::fromJsonValue(m_planned_payment_date, json[QString("PlannedPaymentDate")]);
    m_planned_payment_date_isSet = !json[QString("PlannedPaymentDate")].isNull() && m_planned_payment_date_isValid;

    m_prepayments_isValid = ::OpenAPI::fromJsonValue(m_prepayments, json[QString("Prepayments")]);
    m_prepayments_isSet = !json[QString("Prepayments")].isNull() && m_prepayments_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("Reference")]);
    m_reference_isSet = !json[QString("Reference")].isNull() && m_reference_isValid;

    m_repeating_invoice_id_isValid = ::OpenAPI::fromJsonValue(m_repeating_invoice_id, json[QString("RepeatingInvoiceID")]);
    m_repeating_invoice_id_isSet = !json[QString("RepeatingInvoiceID")].isNull() && m_repeating_invoice_id_isValid;

    m_sent_to_contact_isValid = ::OpenAPI::fromJsonValue(m_sent_to_contact, json[QString("SentToContact")]);
    m_sent_to_contact_isSet = !json[QString("SentToContact")].isNull() && m_sent_to_contact_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_attribute_string_isValid = ::OpenAPI::fromJsonValue(m_status_attribute_string, json[QString("StatusAttributeString")]);
    m_status_attribute_string_isSet = !json[QString("StatusAttributeString")].isNull() && m_status_attribute_string_isValid;

    m_sub_total_isValid = ::OpenAPI::fromJsonValue(m_sub_total, json[QString("SubTotal")]);
    m_sub_total_isSet = !json[QString("SubTotal")].isNull() && m_sub_total_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;

    m_total_discount_isValid = ::OpenAPI::fromJsonValue(m_total_discount, json[QString("TotalDiscount")]);
    m_total_discount_isSet = !json[QString("TotalDiscount")].isNull() && m_total_discount_isValid;

    m_total_tax_isValid = ::OpenAPI::fromJsonValue(m_total_tax, json[QString("TotalTax")]);
    m_total_tax_isSet = !json[QString("TotalTax")].isNull() && m_total_tax_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("Warnings")]);
    m_warnings_isSet = !json[QString("Warnings")].isNull() && m_warnings_isValid;
}

QString OAIInvoice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvoice::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_credited_isSet) {
        obj.insert(QString("AmountCredited"), ::OpenAPI::toJsonValue(m_amount_credited));
    }
    if (m_amount_due_isSet) {
        obj.insert(QString("AmountDue"), ::OpenAPI::toJsonValue(m_amount_due));
    }
    if (m_amount_paid_isSet) {
        obj.insert(QString("AmountPaid"), ::OpenAPI::toJsonValue(m_amount_paid));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("Attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_branding_theme_id_isSet) {
        obj.insert(QString("BrandingThemeID"), ::OpenAPI::toJsonValue(m_branding_theme_id));
    }
    if (m_cis_deduction_isSet) {
        obj.insert(QString("CISDeduction"), ::OpenAPI::toJsonValue(m_cis_deduction));
    }
    if (m_cis_rate_isSet) {
        obj.insert(QString("CISRate"), ::OpenAPI::toJsonValue(m_cis_rate));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("Contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_credit_notes.size() > 0) {
        obj.insert(QString("CreditNotes"), ::OpenAPI::toJsonValue(m_credit_notes));
    }
    if (m_currency_code.isSet()) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_currency_rate_isSet) {
        obj.insert(QString("CurrencyRate"), ::OpenAPI::toJsonValue(m_currency_rate));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("DueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_expected_payment_date_isSet) {
        obj.insert(QString("ExpectedPaymentDate"), ::OpenAPI::toJsonValue(m_expected_payment_date));
    }
    if (m_fully_paid_on_date_isSet) {
        obj.insert(QString("FullyPaidOnDate"), ::OpenAPI::toJsonValue(m_fully_paid_on_date));
    }
    if (m_has_attachments_isSet) {
        obj.insert(QString("HasAttachments"), ::OpenAPI::toJsonValue(m_has_attachments));
    }
    if (m_has_errors_isSet) {
        obj.insert(QString("HasErrors"), ::OpenAPI::toJsonValue(m_has_errors));
    }
    if (m_invoice_id_isSet) {
        obj.insert(QString("InvoiceID"), ::OpenAPI::toJsonValue(m_invoice_id));
    }
    if (m_invoice_number_isSet) {
        obj.insert(QString("InvoiceNumber"), ::OpenAPI::toJsonValue(m_invoice_number));
    }
    if (m_is_discounted_isSet) {
        obj.insert(QString("IsDiscounted"), ::OpenAPI::toJsonValue(m_is_discounted));
    }
    if (m_line_amount_types.isSet()) {
        obj.insert(QString("LineAmountTypes"), ::OpenAPI::toJsonValue(m_line_amount_types));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("LineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_overpayments.size() > 0) {
        obj.insert(QString("Overpayments"), ::OpenAPI::toJsonValue(m_overpayments));
    }
    if (m_payments.size() > 0) {
        obj.insert(QString("Payments"), ::OpenAPI::toJsonValue(m_payments));
    }
    if (m_planned_payment_date_isSet) {
        obj.insert(QString("PlannedPaymentDate"), ::OpenAPI::toJsonValue(m_planned_payment_date));
    }
    if (m_prepayments.size() > 0) {
        obj.insert(QString("Prepayments"), ::OpenAPI::toJsonValue(m_prepayments));
    }
    if (m_reference_isSet) {
        obj.insert(QString("Reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_repeating_invoice_id_isSet) {
        obj.insert(QString("RepeatingInvoiceID"), ::OpenAPI::toJsonValue(m_repeating_invoice_id));
    }
    if (m_sent_to_contact_isSet) {
        obj.insert(QString("SentToContact"), ::OpenAPI::toJsonValue(m_sent_to_contact));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_attribute_string_isSet) {
        obj.insert(QString("StatusAttributeString"), ::OpenAPI::toJsonValue(m_status_attribute_string));
    }
    if (m_sub_total_isSet) {
        obj.insert(QString("SubTotal"), ::OpenAPI::toJsonValue(m_sub_total));
    }
    if (m_total_isSet) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_total_discount_isSet) {
        obj.insert(QString("TotalDiscount"), ::OpenAPI::toJsonValue(m_total_discount));
    }
    if (m_total_tax_isSet) {
        obj.insert(QString("TotalTax"), ::OpenAPI::toJsonValue(m_total_tax));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("Warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

double OAIInvoice::getAmountCredited() const {
    return m_amount_credited;
}
void OAIInvoice::setAmountCredited(const double &amount_credited) {
    m_amount_credited = amount_credited;
    m_amount_credited_isSet = true;
}

bool OAIInvoice::is_amount_credited_Set() const{
    return m_amount_credited_isSet;
}

bool OAIInvoice::is_amount_credited_Valid() const{
    return m_amount_credited_isValid;
}

double OAIInvoice::getAmountDue() const {
    return m_amount_due;
}
void OAIInvoice::setAmountDue(const double &amount_due) {
    m_amount_due = amount_due;
    m_amount_due_isSet = true;
}

bool OAIInvoice::is_amount_due_Set() const{
    return m_amount_due_isSet;
}

bool OAIInvoice::is_amount_due_Valid() const{
    return m_amount_due_isValid;
}

double OAIInvoice::getAmountPaid() const {
    return m_amount_paid;
}
void OAIInvoice::setAmountPaid(const double &amount_paid) {
    m_amount_paid = amount_paid;
    m_amount_paid_isSet = true;
}

bool OAIInvoice::is_amount_paid_Set() const{
    return m_amount_paid_isSet;
}

bool OAIInvoice::is_amount_paid_Valid() const{
    return m_amount_paid_isValid;
}

QList<OAIAttachment> OAIInvoice::getAttachments() const {
    return m_attachments;
}
void OAIInvoice::setAttachments(const QList<OAIAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIInvoice::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIInvoice::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIInvoice::getBrandingThemeId() const {
    return m_branding_theme_id;
}
void OAIInvoice::setBrandingThemeId(const QString &branding_theme_id) {
    m_branding_theme_id = branding_theme_id;
    m_branding_theme_id_isSet = true;
}

bool OAIInvoice::is_branding_theme_id_Set() const{
    return m_branding_theme_id_isSet;
}

bool OAIInvoice::is_branding_theme_id_Valid() const{
    return m_branding_theme_id_isValid;
}

double OAIInvoice::getCisDeduction() const {
    return m_cis_deduction;
}
void OAIInvoice::setCisDeduction(const double &cis_deduction) {
    m_cis_deduction = cis_deduction;
    m_cis_deduction_isSet = true;
}

bool OAIInvoice::is_cis_deduction_Set() const{
    return m_cis_deduction_isSet;
}

bool OAIInvoice::is_cis_deduction_Valid() const{
    return m_cis_deduction_isValid;
}

double OAIInvoice::getCisRate() const {
    return m_cis_rate;
}
void OAIInvoice::setCisRate(const double &cis_rate) {
    m_cis_rate = cis_rate;
    m_cis_rate_isSet = true;
}

bool OAIInvoice::is_cis_rate_Set() const{
    return m_cis_rate_isSet;
}

bool OAIInvoice::is_cis_rate_Valid() const{
    return m_cis_rate_isValid;
}

OAIContact OAIInvoice::getContact() const {
    return m_contact;
}
void OAIInvoice::setContact(const OAIContact &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIInvoice::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIInvoice::is_contact_Valid() const{
    return m_contact_isValid;
}

QList<OAICreditNote> OAIInvoice::getCreditNotes() const {
    return m_credit_notes;
}
void OAIInvoice::setCreditNotes(const QList<OAICreditNote> &credit_notes) {
    m_credit_notes = credit_notes;
    m_credit_notes_isSet = true;
}

bool OAIInvoice::is_credit_notes_Set() const{
    return m_credit_notes_isSet;
}

bool OAIInvoice::is_credit_notes_Valid() const{
    return m_credit_notes_isValid;
}

OAICurrencyCode OAIInvoice::getCurrencyCode() const {
    return m_currency_code;
}
void OAIInvoice::setCurrencyCode(const OAICurrencyCode &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIInvoice::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIInvoice::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

double OAIInvoice::getCurrencyRate() const {
    return m_currency_rate;
}
void OAIInvoice::setCurrencyRate(const double &currency_rate) {
    m_currency_rate = currency_rate;
    m_currency_rate_isSet = true;
}

bool OAIInvoice::is_currency_rate_Set() const{
    return m_currency_rate_isSet;
}

bool OAIInvoice::is_currency_rate_Valid() const{
    return m_currency_rate_isValid;
}

QString OAIInvoice::getDate() const {
    return m_date;
}
void OAIInvoice::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIInvoice::is_date_Set() const{
    return m_date_isSet;
}

bool OAIInvoice::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIInvoice::getDueDate() const {
    return m_due_date;
}
void OAIInvoice::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIInvoice::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIInvoice::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAIInvoice::getExpectedPaymentDate() const {
    return m_expected_payment_date;
}
void OAIInvoice::setExpectedPaymentDate(const QString &expected_payment_date) {
    m_expected_payment_date = expected_payment_date;
    m_expected_payment_date_isSet = true;
}

bool OAIInvoice::is_expected_payment_date_Set() const{
    return m_expected_payment_date_isSet;
}

bool OAIInvoice::is_expected_payment_date_Valid() const{
    return m_expected_payment_date_isValid;
}

QString OAIInvoice::getFullyPaidOnDate() const {
    return m_fully_paid_on_date;
}
void OAIInvoice::setFullyPaidOnDate(const QString &fully_paid_on_date) {
    m_fully_paid_on_date = fully_paid_on_date;
    m_fully_paid_on_date_isSet = true;
}

bool OAIInvoice::is_fully_paid_on_date_Set() const{
    return m_fully_paid_on_date_isSet;
}

bool OAIInvoice::is_fully_paid_on_date_Valid() const{
    return m_fully_paid_on_date_isValid;
}

bool OAIInvoice::isHasAttachments() const {
    return m_has_attachments;
}
void OAIInvoice::setHasAttachments(const bool &has_attachments) {
    m_has_attachments = has_attachments;
    m_has_attachments_isSet = true;
}

bool OAIInvoice::is_has_attachments_Set() const{
    return m_has_attachments_isSet;
}

bool OAIInvoice::is_has_attachments_Valid() const{
    return m_has_attachments_isValid;
}

bool OAIInvoice::isHasErrors() const {
    return m_has_errors;
}
void OAIInvoice::setHasErrors(const bool &has_errors) {
    m_has_errors = has_errors;
    m_has_errors_isSet = true;
}

bool OAIInvoice::is_has_errors_Set() const{
    return m_has_errors_isSet;
}

bool OAIInvoice::is_has_errors_Valid() const{
    return m_has_errors_isValid;
}

QString OAIInvoice::getInvoiceId() const {
    return m_invoice_id;
}
void OAIInvoice::setInvoiceId(const QString &invoice_id) {
    m_invoice_id = invoice_id;
    m_invoice_id_isSet = true;
}

bool OAIInvoice::is_invoice_id_Set() const{
    return m_invoice_id_isSet;
}

bool OAIInvoice::is_invoice_id_Valid() const{
    return m_invoice_id_isValid;
}

QString OAIInvoice::getInvoiceNumber() const {
    return m_invoice_number;
}
void OAIInvoice::setInvoiceNumber(const QString &invoice_number) {
    m_invoice_number = invoice_number;
    m_invoice_number_isSet = true;
}

bool OAIInvoice::is_invoice_number_Set() const{
    return m_invoice_number_isSet;
}

bool OAIInvoice::is_invoice_number_Valid() const{
    return m_invoice_number_isValid;
}

bool OAIInvoice::isIsDiscounted() const {
    return m_is_discounted;
}
void OAIInvoice::setIsDiscounted(const bool &is_discounted) {
    m_is_discounted = is_discounted;
    m_is_discounted_isSet = true;
}

bool OAIInvoice::is_is_discounted_Set() const{
    return m_is_discounted_isSet;
}

bool OAIInvoice::is_is_discounted_Valid() const{
    return m_is_discounted_isValid;
}

OAILineAmountTypes OAIInvoice::getLineAmountTypes() const {
    return m_line_amount_types;
}
void OAIInvoice::setLineAmountTypes(const OAILineAmountTypes &line_amount_types) {
    m_line_amount_types = line_amount_types;
    m_line_amount_types_isSet = true;
}

bool OAIInvoice::is_line_amount_types_Set() const{
    return m_line_amount_types_isSet;
}

bool OAIInvoice::is_line_amount_types_Valid() const{
    return m_line_amount_types_isValid;
}

QList<OAILineItem> OAIInvoice::getLineItems() const {
    return m_line_items;
}
void OAIInvoice::setLineItems(const QList<OAILineItem> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIInvoice::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIInvoice::is_line_items_Valid() const{
    return m_line_items_isValid;
}

QList<OAIOverpayment> OAIInvoice::getOverpayments() const {
    return m_overpayments;
}
void OAIInvoice::setOverpayments(const QList<OAIOverpayment> &overpayments) {
    m_overpayments = overpayments;
    m_overpayments_isSet = true;
}

bool OAIInvoice::is_overpayments_Set() const{
    return m_overpayments_isSet;
}

bool OAIInvoice::is_overpayments_Valid() const{
    return m_overpayments_isValid;
}

QList<OAIPayment> OAIInvoice::getPayments() const {
    return m_payments;
}
void OAIInvoice::setPayments(const QList<OAIPayment> &payments) {
    m_payments = payments;
    m_payments_isSet = true;
}

bool OAIInvoice::is_payments_Set() const{
    return m_payments_isSet;
}

bool OAIInvoice::is_payments_Valid() const{
    return m_payments_isValid;
}

QString OAIInvoice::getPlannedPaymentDate() const {
    return m_planned_payment_date;
}
void OAIInvoice::setPlannedPaymentDate(const QString &planned_payment_date) {
    m_planned_payment_date = planned_payment_date;
    m_planned_payment_date_isSet = true;
}

bool OAIInvoice::is_planned_payment_date_Set() const{
    return m_planned_payment_date_isSet;
}

bool OAIInvoice::is_planned_payment_date_Valid() const{
    return m_planned_payment_date_isValid;
}

QList<OAIPrepayment> OAIInvoice::getPrepayments() const {
    return m_prepayments;
}
void OAIInvoice::setPrepayments(const QList<OAIPrepayment> &prepayments) {
    m_prepayments = prepayments;
    m_prepayments_isSet = true;
}

bool OAIInvoice::is_prepayments_Set() const{
    return m_prepayments_isSet;
}

bool OAIInvoice::is_prepayments_Valid() const{
    return m_prepayments_isValid;
}

QString OAIInvoice::getReference() const {
    return m_reference;
}
void OAIInvoice::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIInvoice::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIInvoice::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIInvoice::getRepeatingInvoiceId() const {
    return m_repeating_invoice_id;
}
void OAIInvoice::setRepeatingInvoiceId(const QString &repeating_invoice_id) {
    m_repeating_invoice_id = repeating_invoice_id;
    m_repeating_invoice_id_isSet = true;
}

bool OAIInvoice::is_repeating_invoice_id_Set() const{
    return m_repeating_invoice_id_isSet;
}

bool OAIInvoice::is_repeating_invoice_id_Valid() const{
    return m_repeating_invoice_id_isValid;
}

bool OAIInvoice::isSentToContact() const {
    return m_sent_to_contact;
}
void OAIInvoice::setSentToContact(const bool &sent_to_contact) {
    m_sent_to_contact = sent_to_contact;
    m_sent_to_contact_isSet = true;
}

bool OAIInvoice::is_sent_to_contact_Set() const{
    return m_sent_to_contact_isSet;
}

bool OAIInvoice::is_sent_to_contact_Valid() const{
    return m_sent_to_contact_isValid;
}

QString OAIInvoice::getStatus() const {
    return m_status;
}
void OAIInvoice::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInvoice::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInvoice::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIInvoice::getStatusAttributeString() const {
    return m_status_attribute_string;
}
void OAIInvoice::setStatusAttributeString(const QString &status_attribute_string) {
    m_status_attribute_string = status_attribute_string;
    m_status_attribute_string_isSet = true;
}

bool OAIInvoice::is_status_attribute_string_Set() const{
    return m_status_attribute_string_isSet;
}

bool OAIInvoice::is_status_attribute_string_Valid() const{
    return m_status_attribute_string_isValid;
}

double OAIInvoice::getSubTotal() const {
    return m_sub_total;
}
void OAIInvoice::setSubTotal(const double &sub_total) {
    m_sub_total = sub_total;
    m_sub_total_isSet = true;
}

bool OAIInvoice::is_sub_total_Set() const{
    return m_sub_total_isSet;
}

bool OAIInvoice::is_sub_total_Valid() const{
    return m_sub_total_isValid;
}

double OAIInvoice::getTotal() const {
    return m_total;
}
void OAIInvoice::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIInvoice::is_total_Set() const{
    return m_total_isSet;
}

bool OAIInvoice::is_total_Valid() const{
    return m_total_isValid;
}

double OAIInvoice::getTotalDiscount() const {
    return m_total_discount;
}
void OAIInvoice::setTotalDiscount(const double &total_discount) {
    m_total_discount = total_discount;
    m_total_discount_isSet = true;
}

bool OAIInvoice::is_total_discount_Set() const{
    return m_total_discount_isSet;
}

bool OAIInvoice::is_total_discount_Valid() const{
    return m_total_discount_isValid;
}

double OAIInvoice::getTotalTax() const {
    return m_total_tax;
}
void OAIInvoice::setTotalTax(const double &total_tax) {
    m_total_tax = total_tax;
    m_total_tax_isSet = true;
}

bool OAIInvoice::is_total_tax_Set() const{
    return m_total_tax_isSet;
}

bool OAIInvoice::is_total_tax_Valid() const{
    return m_total_tax_isValid;
}

QString OAIInvoice::getType() const {
    return m_type;
}
void OAIInvoice::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInvoice::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInvoice::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIInvoice::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIInvoice::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIInvoice::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIInvoice::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

QString OAIInvoice::getUrl() const {
    return m_url;
}
void OAIInvoice::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIInvoice::is_url_Set() const{
    return m_url_isSet;
}

bool OAIInvoice::is_url_Valid() const{
    return m_url_isValid;
}

QList<OAIValidationError> OAIInvoice::getValidationErrors() const {
    return m_validation_errors;
}
void OAIInvoice::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIInvoice::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIInvoice::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

QList<OAIValidationError> OAIInvoice::getWarnings() const {
    return m_warnings;
}
void OAIInvoice::setWarnings(const QList<OAIValidationError> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIInvoice::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIInvoice::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIInvoice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_credited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_due_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_branding_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cis_deduction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cis_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_payment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fully_paid_on_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_discounted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_amount_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_overpayments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_planned_payment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepayments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeating_invoice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_to_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_attribute_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvoice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
