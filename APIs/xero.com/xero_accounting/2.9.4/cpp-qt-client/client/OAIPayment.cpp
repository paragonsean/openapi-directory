/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayment::OAIPayment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayment::OAIPayment() {
    this->initializeModel();
}

OAIPayment::~OAIPayment() {}

void OAIPayment::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_bank_account_number_isSet = false;
    m_bank_account_number_isValid = false;

    m_batch_payment_id_isSet = false;
    m_batch_payment_id_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_credit_note_isSet = false;
    m_credit_note_isValid = false;

    m_credit_note_number_isSet = false;
    m_credit_note_number_isValid = false;

    m_currency_rate_isSet = false;
    m_currency_rate_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_has_account_isSet = false;
    m_has_account_isValid = false;

    m_has_validation_errors_isSet = false;
    m_has_validation_errors_isValid = false;

    m_invoice_isSet = false;
    m_invoice_isValid = false;

    m_invoice_number_isSet = false;
    m_invoice_number_isValid = false;

    m_is_reconciled_isSet = false;
    m_is_reconciled_isValid = false;

    m_overpayment_isSet = false;
    m_overpayment_isValid = false;

    m_particulars_isSet = false;
    m_particulars_isValid = false;

    m_payment_id_isSet = false;
    m_payment_id_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;

    m_prepayment_isSet = false;
    m_prepayment_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_attribute_string_isSet = false;
    m_status_attribute_string_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAIPayment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayment::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("Account")]);
    m_account_isSet = !json[QString("Account")].isNull() && m_account_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("Amount")]);
    m_amount_isSet = !json[QString("Amount")].isNull() && m_amount_isValid;

    m_bank_account_number_isValid = ::OpenAPI::fromJsonValue(m_bank_account_number, json[QString("BankAccountNumber")]);
    m_bank_account_number_isSet = !json[QString("BankAccountNumber")].isNull() && m_bank_account_number_isValid;

    m_batch_payment_id_isValid = ::OpenAPI::fromJsonValue(m_batch_payment_id, json[QString("BatchPaymentID")]);
    m_batch_payment_id_isSet = !json[QString("BatchPaymentID")].isNull() && m_batch_payment_id_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_credit_note_isValid = ::OpenAPI::fromJsonValue(m_credit_note, json[QString("CreditNote")]);
    m_credit_note_isSet = !json[QString("CreditNote")].isNull() && m_credit_note_isValid;

    m_credit_note_number_isValid = ::OpenAPI::fromJsonValue(m_credit_note_number, json[QString("CreditNoteNumber")]);
    m_credit_note_number_isSet = !json[QString("CreditNoteNumber")].isNull() && m_credit_note_number_isValid;

    m_currency_rate_isValid = ::OpenAPI::fromJsonValue(m_currency_rate, json[QString("CurrencyRate")]);
    m_currency_rate_isSet = !json[QString("CurrencyRate")].isNull() && m_currency_rate_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("Details")]);
    m_details_isSet = !json[QString("Details")].isNull() && m_details_isValid;

    m_has_account_isValid = ::OpenAPI::fromJsonValue(m_has_account, json[QString("HasAccount")]);
    m_has_account_isSet = !json[QString("HasAccount")].isNull() && m_has_account_isValid;

    m_has_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_has_validation_errors, json[QString("HasValidationErrors")]);
    m_has_validation_errors_isSet = !json[QString("HasValidationErrors")].isNull() && m_has_validation_errors_isValid;

    m_invoice_isValid = ::OpenAPI::fromJsonValue(m_invoice, json[QString("Invoice")]);
    m_invoice_isSet = !json[QString("Invoice")].isNull() && m_invoice_isValid;

    m_invoice_number_isValid = ::OpenAPI::fromJsonValue(m_invoice_number, json[QString("InvoiceNumber")]);
    m_invoice_number_isSet = !json[QString("InvoiceNumber")].isNull() && m_invoice_number_isValid;

    m_is_reconciled_isValid = ::OpenAPI::fromJsonValue(m_is_reconciled, json[QString("IsReconciled")]);
    m_is_reconciled_isSet = !json[QString("IsReconciled")].isNull() && m_is_reconciled_isValid;

    m_overpayment_isValid = ::OpenAPI::fromJsonValue(m_overpayment, json[QString("Overpayment")]);
    m_overpayment_isSet = !json[QString("Overpayment")].isNull() && m_overpayment_isValid;

    m_particulars_isValid = ::OpenAPI::fromJsonValue(m_particulars, json[QString("Particulars")]);
    m_particulars_isSet = !json[QString("Particulars")].isNull() && m_particulars_isValid;

    m_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_id, json[QString("PaymentID")]);
    m_payment_id_isSet = !json[QString("PaymentID")].isNull() && m_payment_id_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(m_payment_type, json[QString("PaymentType")]);
    m_payment_type_isSet = !json[QString("PaymentType")].isNull() && m_payment_type_isValid;

    m_prepayment_isValid = ::OpenAPI::fromJsonValue(m_prepayment, json[QString("Prepayment")]);
    m_prepayment_isSet = !json[QString("Prepayment")].isNull() && m_prepayment_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("Reference")]);
    m_reference_isSet = !json[QString("Reference")].isNull() && m_reference_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_attribute_string_isValid = ::OpenAPI::fromJsonValue(m_status_attribute_string, json[QString("StatusAttributeString")]);
    m_status_attribute_string_isSet = !json[QString("StatusAttributeString")].isNull() && m_status_attribute_string_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;
}

QString OAIPayment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayment::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("Account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_amount_isSet) {
        obj.insert(QString("Amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_bank_account_number_isSet) {
        obj.insert(QString("BankAccountNumber"), ::OpenAPI::toJsonValue(m_bank_account_number));
    }
    if (m_batch_payment_id_isSet) {
        obj.insert(QString("BatchPaymentID"), ::OpenAPI::toJsonValue(m_batch_payment_id));
    }
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_credit_note.isSet()) {
        obj.insert(QString("CreditNote"), ::OpenAPI::toJsonValue(m_credit_note));
    }
    if (m_credit_note_number_isSet) {
        obj.insert(QString("CreditNoteNumber"), ::OpenAPI::toJsonValue(m_credit_note_number));
    }
    if (m_currency_rate_isSet) {
        obj.insert(QString("CurrencyRate"), ::OpenAPI::toJsonValue(m_currency_rate));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_details_isSet) {
        obj.insert(QString("Details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_has_account_isSet) {
        obj.insert(QString("HasAccount"), ::OpenAPI::toJsonValue(m_has_account));
    }
    if (m_has_validation_errors_isSet) {
        obj.insert(QString("HasValidationErrors"), ::OpenAPI::toJsonValue(m_has_validation_errors));
    }
    if (m_invoice.isSet()) {
        obj.insert(QString("Invoice"), ::OpenAPI::toJsonValue(m_invoice));
    }
    if (m_invoice_number_isSet) {
        obj.insert(QString("InvoiceNumber"), ::OpenAPI::toJsonValue(m_invoice_number));
    }
    if (m_is_reconciled_isSet) {
        obj.insert(QString("IsReconciled"), ::OpenAPI::toJsonValue(m_is_reconciled));
    }
    if (m_overpayment.isSet()) {
        obj.insert(QString("Overpayment"), ::OpenAPI::toJsonValue(m_overpayment));
    }
    if (m_particulars_isSet) {
        obj.insert(QString("Particulars"), ::OpenAPI::toJsonValue(m_particulars));
    }
    if (m_payment_id_isSet) {
        obj.insert(QString("PaymentID"), ::OpenAPI::toJsonValue(m_payment_id));
    }
    if (m_payment_type_isSet) {
        obj.insert(QString("PaymentType"), ::OpenAPI::toJsonValue(m_payment_type));
    }
    if (m_prepayment.isSet()) {
        obj.insert(QString("Prepayment"), ::OpenAPI::toJsonValue(m_prepayment));
    }
    if (m_reference_isSet) {
        obj.insert(QString("Reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_attribute_string_isSet) {
        obj.insert(QString("StatusAttributeString"), ::OpenAPI::toJsonValue(m_status_attribute_string));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

OAIAccount OAIPayment::getAccount() const {
    return m_account;
}
void OAIPayment::setAccount(const OAIAccount &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIPayment::is_account_Set() const{
    return m_account_isSet;
}

bool OAIPayment::is_account_Valid() const{
    return m_account_isValid;
}

double OAIPayment::getAmount() const {
    return m_amount;
}
void OAIPayment::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPayment::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPayment::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIPayment::getBankAccountNumber() const {
    return m_bank_account_number;
}
void OAIPayment::setBankAccountNumber(const QString &bank_account_number) {
    m_bank_account_number = bank_account_number;
    m_bank_account_number_isSet = true;
}

bool OAIPayment::is_bank_account_number_Set() const{
    return m_bank_account_number_isSet;
}

bool OAIPayment::is_bank_account_number_Valid() const{
    return m_bank_account_number_isValid;
}

QString OAIPayment::getBatchPaymentId() const {
    return m_batch_payment_id;
}
void OAIPayment::setBatchPaymentId(const QString &batch_payment_id) {
    m_batch_payment_id = batch_payment_id;
    m_batch_payment_id_isSet = true;
}

bool OAIPayment::is_batch_payment_id_Set() const{
    return m_batch_payment_id_isSet;
}

bool OAIPayment::is_batch_payment_id_Valid() const{
    return m_batch_payment_id_isValid;
}

QString OAIPayment::getCode() const {
    return m_code;
}
void OAIPayment::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIPayment::is_code_Set() const{
    return m_code_isSet;
}

bool OAIPayment::is_code_Valid() const{
    return m_code_isValid;
}

OAICreditNote OAIPayment::getCreditNote() const {
    return m_credit_note;
}
void OAIPayment::setCreditNote(const OAICreditNote &credit_note) {
    m_credit_note = credit_note;
    m_credit_note_isSet = true;
}

bool OAIPayment::is_credit_note_Set() const{
    return m_credit_note_isSet;
}

bool OAIPayment::is_credit_note_Valid() const{
    return m_credit_note_isValid;
}

QString OAIPayment::getCreditNoteNumber() const {
    return m_credit_note_number;
}
void OAIPayment::setCreditNoteNumber(const QString &credit_note_number) {
    m_credit_note_number = credit_note_number;
    m_credit_note_number_isSet = true;
}

bool OAIPayment::is_credit_note_number_Set() const{
    return m_credit_note_number_isSet;
}

bool OAIPayment::is_credit_note_number_Valid() const{
    return m_credit_note_number_isValid;
}

double OAIPayment::getCurrencyRate() const {
    return m_currency_rate;
}
void OAIPayment::setCurrencyRate(const double &currency_rate) {
    m_currency_rate = currency_rate;
    m_currency_rate_isSet = true;
}

bool OAIPayment::is_currency_rate_Set() const{
    return m_currency_rate_isSet;
}

bool OAIPayment::is_currency_rate_Valid() const{
    return m_currency_rate_isValid;
}

QString OAIPayment::getDate() const {
    return m_date;
}
void OAIPayment::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIPayment::is_date_Set() const{
    return m_date_isSet;
}

bool OAIPayment::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIPayment::getDetails() const {
    return m_details;
}
void OAIPayment::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIPayment::is_details_Set() const{
    return m_details_isSet;
}

bool OAIPayment::is_details_Valid() const{
    return m_details_isValid;
}

bool OAIPayment::isHasAccount() const {
    return m_has_account;
}
void OAIPayment::setHasAccount(const bool &has_account) {
    m_has_account = has_account;
    m_has_account_isSet = true;
}

bool OAIPayment::is_has_account_Set() const{
    return m_has_account_isSet;
}

bool OAIPayment::is_has_account_Valid() const{
    return m_has_account_isValid;
}

bool OAIPayment::isHasValidationErrors() const {
    return m_has_validation_errors;
}
void OAIPayment::setHasValidationErrors(const bool &has_validation_errors) {
    m_has_validation_errors = has_validation_errors;
    m_has_validation_errors_isSet = true;
}

bool OAIPayment::is_has_validation_errors_Set() const{
    return m_has_validation_errors_isSet;
}

bool OAIPayment::is_has_validation_errors_Valid() const{
    return m_has_validation_errors_isValid;
}

OAIInvoice OAIPayment::getInvoice() const {
    return m_invoice;
}
void OAIPayment::setInvoice(const OAIInvoice &invoice) {
    m_invoice = invoice;
    m_invoice_isSet = true;
}

bool OAIPayment::is_invoice_Set() const{
    return m_invoice_isSet;
}

bool OAIPayment::is_invoice_Valid() const{
    return m_invoice_isValid;
}

QString OAIPayment::getInvoiceNumber() const {
    return m_invoice_number;
}
void OAIPayment::setInvoiceNumber(const QString &invoice_number) {
    m_invoice_number = invoice_number;
    m_invoice_number_isSet = true;
}

bool OAIPayment::is_invoice_number_Set() const{
    return m_invoice_number_isSet;
}

bool OAIPayment::is_invoice_number_Valid() const{
    return m_invoice_number_isValid;
}

bool OAIPayment::isIsReconciled() const {
    return m_is_reconciled;
}
void OAIPayment::setIsReconciled(const bool &is_reconciled) {
    m_is_reconciled = is_reconciled;
    m_is_reconciled_isSet = true;
}

bool OAIPayment::is_is_reconciled_Set() const{
    return m_is_reconciled_isSet;
}

bool OAIPayment::is_is_reconciled_Valid() const{
    return m_is_reconciled_isValid;
}

OAIOverpayment OAIPayment::getOverpayment() const {
    return m_overpayment;
}
void OAIPayment::setOverpayment(const OAIOverpayment &overpayment) {
    m_overpayment = overpayment;
    m_overpayment_isSet = true;
}

bool OAIPayment::is_overpayment_Set() const{
    return m_overpayment_isSet;
}

bool OAIPayment::is_overpayment_Valid() const{
    return m_overpayment_isValid;
}

QString OAIPayment::getParticulars() const {
    return m_particulars;
}
void OAIPayment::setParticulars(const QString &particulars) {
    m_particulars = particulars;
    m_particulars_isSet = true;
}

bool OAIPayment::is_particulars_Set() const{
    return m_particulars_isSet;
}

bool OAIPayment::is_particulars_Valid() const{
    return m_particulars_isValid;
}

QString OAIPayment::getPaymentId() const {
    return m_payment_id;
}
void OAIPayment::setPaymentId(const QString &payment_id) {
    m_payment_id = payment_id;
    m_payment_id_isSet = true;
}

bool OAIPayment::is_payment_id_Set() const{
    return m_payment_id_isSet;
}

bool OAIPayment::is_payment_id_Valid() const{
    return m_payment_id_isValid;
}

QString OAIPayment::getPaymentType() const {
    return m_payment_type;
}
void OAIPayment::setPaymentType(const QString &payment_type) {
    m_payment_type = payment_type;
    m_payment_type_isSet = true;
}

bool OAIPayment::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAIPayment::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

OAIPrepayment OAIPayment::getPrepayment() const {
    return m_prepayment;
}
void OAIPayment::setPrepayment(const OAIPrepayment &prepayment) {
    m_prepayment = prepayment;
    m_prepayment_isSet = true;
}

bool OAIPayment::is_prepayment_Set() const{
    return m_prepayment_isSet;
}

bool OAIPayment::is_prepayment_Valid() const{
    return m_prepayment_isValid;
}

QString OAIPayment::getReference() const {
    return m_reference;
}
void OAIPayment::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIPayment::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIPayment::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIPayment::getStatus() const {
    return m_status;
}
void OAIPayment::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPayment::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPayment::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPayment::getStatusAttributeString() const {
    return m_status_attribute_string;
}
void OAIPayment::setStatusAttributeString(const QString &status_attribute_string) {
    m_status_attribute_string = status_attribute_string;
    m_status_attribute_string_isSet = true;
}

bool OAIPayment::is_status_attribute_string_Set() const{
    return m_status_attribute_string_isSet;
}

bool OAIPayment::is_status_attribute_string_Valid() const{
    return m_status_attribute_string_isValid;
}

QString OAIPayment::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIPayment::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIPayment::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIPayment::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

QList<OAIValidationError> OAIPayment::getValidationErrors() const {
    return m_validation_errors;
}
void OAIPayment::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIPayment::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIPayment::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAIPayment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_note_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_validation_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_reconciled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overpayment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_particulars_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepayment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_attribute_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
