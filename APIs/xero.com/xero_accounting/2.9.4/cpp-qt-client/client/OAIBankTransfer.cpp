/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBankTransfer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBankTransfer::OAIBankTransfer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBankTransfer::OAIBankTransfer() {
    this->initializeModel();
}

OAIBankTransfer::~OAIBankTransfer() {}

void OAIBankTransfer::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_bank_transfer_id_isSet = false;
    m_bank_transfer_id_isValid = false;

    m_created_date_utc_isSet = false;
    m_created_date_utc_isValid = false;

    m_currency_rate_isSet = false;
    m_currency_rate_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_from_bank_account_isSet = false;
    m_from_bank_account_isValid = false;

    m_from_bank_transaction_id_isSet = false;
    m_from_bank_transaction_id_isValid = false;

    m_has_attachments_isSet = false;
    m_has_attachments_isValid = false;

    m_to_bank_account_isSet = false;
    m_to_bank_account_isValid = false;

    m_to_bank_transaction_id_isSet = false;
    m_to_bank_transaction_id_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAIBankTransfer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBankTransfer::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("Amount")]);
    m_amount_isSet = !json[QString("Amount")].isNull() && m_amount_isValid;

    m_bank_transfer_id_isValid = ::OpenAPI::fromJsonValue(m_bank_transfer_id, json[QString("BankTransferID")]);
    m_bank_transfer_id_isSet = !json[QString("BankTransferID")].isNull() && m_bank_transfer_id_isValid;

    m_created_date_utc_isValid = ::OpenAPI::fromJsonValue(m_created_date_utc, json[QString("CreatedDateUTC")]);
    m_created_date_utc_isSet = !json[QString("CreatedDateUTC")].isNull() && m_created_date_utc_isValid;

    m_currency_rate_isValid = ::OpenAPI::fromJsonValue(m_currency_rate, json[QString("CurrencyRate")]);
    m_currency_rate_isSet = !json[QString("CurrencyRate")].isNull() && m_currency_rate_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_from_bank_account_isValid = ::OpenAPI::fromJsonValue(m_from_bank_account, json[QString("FromBankAccount")]);
    m_from_bank_account_isSet = !json[QString("FromBankAccount")].isNull() && m_from_bank_account_isValid;

    m_from_bank_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_from_bank_transaction_id, json[QString("FromBankTransactionID")]);
    m_from_bank_transaction_id_isSet = !json[QString("FromBankTransactionID")].isNull() && m_from_bank_transaction_id_isValid;

    m_has_attachments_isValid = ::OpenAPI::fromJsonValue(m_has_attachments, json[QString("HasAttachments")]);
    m_has_attachments_isSet = !json[QString("HasAttachments")].isNull() && m_has_attachments_isValid;

    m_to_bank_account_isValid = ::OpenAPI::fromJsonValue(m_to_bank_account, json[QString("ToBankAccount")]);
    m_to_bank_account_isSet = !json[QString("ToBankAccount")].isNull() && m_to_bank_account_isValid;

    m_to_bank_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_to_bank_transaction_id, json[QString("ToBankTransactionID")]);
    m_to_bank_transaction_id_isSet = !json[QString("ToBankTransactionID")].isNull() && m_to_bank_transaction_id_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;
}

QString OAIBankTransfer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBankTransfer::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("Amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_bank_transfer_id_isSet) {
        obj.insert(QString("BankTransferID"), ::OpenAPI::toJsonValue(m_bank_transfer_id));
    }
    if (m_created_date_utc_isSet) {
        obj.insert(QString("CreatedDateUTC"), ::OpenAPI::toJsonValue(m_created_date_utc));
    }
    if (m_currency_rate_isSet) {
        obj.insert(QString("CurrencyRate"), ::OpenAPI::toJsonValue(m_currency_rate));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_from_bank_account.isSet()) {
        obj.insert(QString("FromBankAccount"), ::OpenAPI::toJsonValue(m_from_bank_account));
    }
    if (m_from_bank_transaction_id_isSet) {
        obj.insert(QString("FromBankTransactionID"), ::OpenAPI::toJsonValue(m_from_bank_transaction_id));
    }
    if (m_has_attachments_isSet) {
        obj.insert(QString("HasAttachments"), ::OpenAPI::toJsonValue(m_has_attachments));
    }
    if (m_to_bank_account.isSet()) {
        obj.insert(QString("ToBankAccount"), ::OpenAPI::toJsonValue(m_to_bank_account));
    }
    if (m_to_bank_transaction_id_isSet) {
        obj.insert(QString("ToBankTransactionID"), ::OpenAPI::toJsonValue(m_to_bank_transaction_id));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

double OAIBankTransfer::getAmount() const {
    return m_amount;
}
void OAIBankTransfer::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIBankTransfer::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIBankTransfer::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIBankTransfer::getBankTransferId() const {
    return m_bank_transfer_id;
}
void OAIBankTransfer::setBankTransferId(const QString &bank_transfer_id) {
    m_bank_transfer_id = bank_transfer_id;
    m_bank_transfer_id_isSet = true;
}

bool OAIBankTransfer::is_bank_transfer_id_Set() const{
    return m_bank_transfer_id_isSet;
}

bool OAIBankTransfer::is_bank_transfer_id_Valid() const{
    return m_bank_transfer_id_isValid;
}

QString OAIBankTransfer::getCreatedDateUtc() const {
    return m_created_date_utc;
}
void OAIBankTransfer::setCreatedDateUtc(const QString &created_date_utc) {
    m_created_date_utc = created_date_utc;
    m_created_date_utc_isSet = true;
}

bool OAIBankTransfer::is_created_date_utc_Set() const{
    return m_created_date_utc_isSet;
}

bool OAIBankTransfer::is_created_date_utc_Valid() const{
    return m_created_date_utc_isValid;
}

double OAIBankTransfer::getCurrencyRate() const {
    return m_currency_rate;
}
void OAIBankTransfer::setCurrencyRate(const double &currency_rate) {
    m_currency_rate = currency_rate;
    m_currency_rate_isSet = true;
}

bool OAIBankTransfer::is_currency_rate_Set() const{
    return m_currency_rate_isSet;
}

bool OAIBankTransfer::is_currency_rate_Valid() const{
    return m_currency_rate_isValid;
}

QString OAIBankTransfer::getDate() const {
    return m_date;
}
void OAIBankTransfer::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIBankTransfer::is_date_Set() const{
    return m_date_isSet;
}

bool OAIBankTransfer::is_date_Valid() const{
    return m_date_isValid;
}

OAIAccount OAIBankTransfer::getFromBankAccount() const {
    return m_from_bank_account;
}
void OAIBankTransfer::setFromBankAccount(const OAIAccount &from_bank_account) {
    m_from_bank_account = from_bank_account;
    m_from_bank_account_isSet = true;
}

bool OAIBankTransfer::is_from_bank_account_Set() const{
    return m_from_bank_account_isSet;
}

bool OAIBankTransfer::is_from_bank_account_Valid() const{
    return m_from_bank_account_isValid;
}

QString OAIBankTransfer::getFromBankTransactionId() const {
    return m_from_bank_transaction_id;
}
void OAIBankTransfer::setFromBankTransactionId(const QString &from_bank_transaction_id) {
    m_from_bank_transaction_id = from_bank_transaction_id;
    m_from_bank_transaction_id_isSet = true;
}

bool OAIBankTransfer::is_from_bank_transaction_id_Set() const{
    return m_from_bank_transaction_id_isSet;
}

bool OAIBankTransfer::is_from_bank_transaction_id_Valid() const{
    return m_from_bank_transaction_id_isValid;
}

bool OAIBankTransfer::isHasAttachments() const {
    return m_has_attachments;
}
void OAIBankTransfer::setHasAttachments(const bool &has_attachments) {
    m_has_attachments = has_attachments;
    m_has_attachments_isSet = true;
}

bool OAIBankTransfer::is_has_attachments_Set() const{
    return m_has_attachments_isSet;
}

bool OAIBankTransfer::is_has_attachments_Valid() const{
    return m_has_attachments_isValid;
}

OAIAccount OAIBankTransfer::getToBankAccount() const {
    return m_to_bank_account;
}
void OAIBankTransfer::setToBankAccount(const OAIAccount &to_bank_account) {
    m_to_bank_account = to_bank_account;
    m_to_bank_account_isSet = true;
}

bool OAIBankTransfer::is_to_bank_account_Set() const{
    return m_to_bank_account_isSet;
}

bool OAIBankTransfer::is_to_bank_account_Valid() const{
    return m_to_bank_account_isValid;
}

QString OAIBankTransfer::getToBankTransactionId() const {
    return m_to_bank_transaction_id;
}
void OAIBankTransfer::setToBankTransactionId(const QString &to_bank_transaction_id) {
    m_to_bank_transaction_id = to_bank_transaction_id;
    m_to_bank_transaction_id_isSet = true;
}

bool OAIBankTransfer::is_to_bank_transaction_id_Set() const{
    return m_to_bank_transaction_id_isSet;
}

bool OAIBankTransfer::is_to_bank_transaction_id_Valid() const{
    return m_to_bank_transaction_id_isValid;
}

QList<OAIValidationError> OAIBankTransfer::getValidationErrors() const {
    return m_validation_errors;
}
void OAIBankTransfer::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIBankTransfer::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIBankTransfer::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAIBankTransfer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_transfer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_bank_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_bank_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_bank_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_bank_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBankTransfer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_from_bank_account_isValid && m_to_bank_account_isValid && true;
}

} // namespace OpenAPI
