/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_add_to_watchlist_isSet = false;
    m_add_to_watchlist_isValid = false;

    m_bank_account_number_isSet = false;
    m_bank_account_number_isValid = false;

    m_bank_account_type_isSet = false;
    m_bank_account_type_isValid = false;

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enable_payments_to_account_isSet = false;
    m_enable_payments_to_account_isValid = false;

    m_has_attachments_isSet = false;
    m_has_attachments_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reporting_code_isSet = false;
    m_reporting_code_isValid = false;

    m_reporting_code_name_isSet = false;
    m_reporting_code_name_isValid = false;

    m_show_in_expense_claims_isSet = false;
    m_show_in_expense_claims_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_system_account_isSet = false;
    m_system_account_isValid = false;

    m_tax_type_isSet = false;
    m_tax_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountID")]);
    m_account_id_isSet = !json[QString("AccountID")].isNull() && m_account_id_isValid;

    m_add_to_watchlist_isValid = ::OpenAPI::fromJsonValue(m_add_to_watchlist, json[QString("AddToWatchlist")]);
    m_add_to_watchlist_isSet = !json[QString("AddToWatchlist")].isNull() && m_add_to_watchlist_isValid;

    m_bank_account_number_isValid = ::OpenAPI::fromJsonValue(m_bank_account_number, json[QString("BankAccountNumber")]);
    m_bank_account_number_isSet = !json[QString("BankAccountNumber")].isNull() && m_bank_account_number_isValid;

    m_bank_account_type_isValid = ::OpenAPI::fromJsonValue(m_bank_account_type, json[QString("BankAccountType")]);
    m_bank_account_type_isSet = !json[QString("BankAccountType")].isNull() && m_bank_account_type_isValid;

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("Class")]);
    m_r_class_isSet = !json[QString("Class")].isNull() && m_r_class_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_enable_payments_to_account_isValid = ::OpenAPI::fromJsonValue(m_enable_payments_to_account, json[QString("EnablePaymentsToAccount")]);
    m_enable_payments_to_account_isSet = !json[QString("EnablePaymentsToAccount")].isNull() && m_enable_payments_to_account_isValid;

    m_has_attachments_isValid = ::OpenAPI::fromJsonValue(m_has_attachments, json[QString("HasAttachments")]);
    m_has_attachments_isSet = !json[QString("HasAttachments")].isNull() && m_has_attachments_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_reporting_code_isValid = ::OpenAPI::fromJsonValue(m_reporting_code, json[QString("ReportingCode")]);
    m_reporting_code_isSet = !json[QString("ReportingCode")].isNull() && m_reporting_code_isValid;

    m_reporting_code_name_isValid = ::OpenAPI::fromJsonValue(m_reporting_code_name, json[QString("ReportingCodeName")]);
    m_reporting_code_name_isSet = !json[QString("ReportingCodeName")].isNull() && m_reporting_code_name_isValid;

    m_show_in_expense_claims_isValid = ::OpenAPI::fromJsonValue(m_show_in_expense_claims, json[QString("ShowInExpenseClaims")]);
    m_show_in_expense_claims_isSet = !json[QString("ShowInExpenseClaims")].isNull() && m_show_in_expense_claims_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_system_account_isValid = ::OpenAPI::fromJsonValue(m_system_account, json[QString("SystemAccount")]);
    m_system_account_isSet = !json[QString("SystemAccount")].isNull() && m_system_account_isValid;

    m_tax_type_isValid = ::OpenAPI::fromJsonValue(m_tax_type, json[QString("TaxType")]);
    m_tax_type_isSet = !json[QString("TaxType")].isNull() && m_tax_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("AccountID"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_add_to_watchlist_isSet) {
        obj.insert(QString("AddToWatchlist"), ::OpenAPI::toJsonValue(m_add_to_watchlist));
    }
    if (m_bank_account_number_isSet) {
        obj.insert(QString("BankAccountNumber"), ::OpenAPI::toJsonValue(m_bank_account_number));
    }
    if (m_bank_account_type_isSet) {
        obj.insert(QString("BankAccountType"), ::OpenAPI::toJsonValue(m_bank_account_type));
    }
    if (m_r_class_isSet) {
        obj.insert(QString("Class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_currency_code.isSet()) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enable_payments_to_account_isSet) {
        obj.insert(QString("EnablePaymentsToAccount"), ::OpenAPI::toJsonValue(m_enable_payments_to_account));
    }
    if (m_has_attachments_isSet) {
        obj.insert(QString("HasAttachments"), ::OpenAPI::toJsonValue(m_has_attachments));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reporting_code_isSet) {
        obj.insert(QString("ReportingCode"), ::OpenAPI::toJsonValue(m_reporting_code));
    }
    if (m_reporting_code_name_isSet) {
        obj.insert(QString("ReportingCodeName"), ::OpenAPI::toJsonValue(m_reporting_code_name));
    }
    if (m_show_in_expense_claims_isSet) {
        obj.insert(QString("ShowInExpenseClaims"), ::OpenAPI::toJsonValue(m_show_in_expense_claims));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_system_account_isSet) {
        obj.insert(QString("SystemAccount"), ::OpenAPI::toJsonValue(m_system_account));
    }
    if (m_tax_type_isSet) {
        obj.insert(QString("TaxType"), ::OpenAPI::toJsonValue(m_tax_type));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

QString OAIAccount::getAccountId() const {
    return m_account_id;
}
void OAIAccount::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAccount::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAccount::is_account_id_Valid() const{
    return m_account_id_isValid;
}

bool OAIAccount::isAddToWatchlist() const {
    return m_add_to_watchlist;
}
void OAIAccount::setAddToWatchlist(const bool &add_to_watchlist) {
    m_add_to_watchlist = add_to_watchlist;
    m_add_to_watchlist_isSet = true;
}

bool OAIAccount::is_add_to_watchlist_Set() const{
    return m_add_to_watchlist_isSet;
}

bool OAIAccount::is_add_to_watchlist_Valid() const{
    return m_add_to_watchlist_isValid;
}

QString OAIAccount::getBankAccountNumber() const {
    return m_bank_account_number;
}
void OAIAccount::setBankAccountNumber(const QString &bank_account_number) {
    m_bank_account_number = bank_account_number;
    m_bank_account_number_isSet = true;
}

bool OAIAccount::is_bank_account_number_Set() const{
    return m_bank_account_number_isSet;
}

bool OAIAccount::is_bank_account_number_Valid() const{
    return m_bank_account_number_isValid;
}

QString OAIAccount::getBankAccountType() const {
    return m_bank_account_type;
}
void OAIAccount::setBankAccountType(const QString &bank_account_type) {
    m_bank_account_type = bank_account_type;
    m_bank_account_type_isSet = true;
}

bool OAIAccount::is_bank_account_type_Set() const{
    return m_bank_account_type_isSet;
}

bool OAIAccount::is_bank_account_type_Valid() const{
    return m_bank_account_type_isValid;
}

QString OAIAccount::getRClass() const {
    return m_r_class;
}
void OAIAccount::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAIAccount::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAIAccount::is_r_class_Valid() const{
    return m_r_class_isValid;
}

QString OAIAccount::getCode() const {
    return m_code;
}
void OAIAccount::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIAccount::is_code_Set() const{
    return m_code_isSet;
}

bool OAIAccount::is_code_Valid() const{
    return m_code_isValid;
}

OAICurrencyCode OAIAccount::getCurrencyCode() const {
    return m_currency_code;
}
void OAIAccount::setCurrencyCode(const OAICurrencyCode &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIAccount::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIAccount::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIAccount::getDescription() const {
    return m_description;
}
void OAIAccount::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAccount::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAccount::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIAccount::isEnablePaymentsToAccount() const {
    return m_enable_payments_to_account;
}
void OAIAccount::setEnablePaymentsToAccount(const bool &enable_payments_to_account) {
    m_enable_payments_to_account = enable_payments_to_account;
    m_enable_payments_to_account_isSet = true;
}

bool OAIAccount::is_enable_payments_to_account_Set() const{
    return m_enable_payments_to_account_isSet;
}

bool OAIAccount::is_enable_payments_to_account_Valid() const{
    return m_enable_payments_to_account_isValid;
}

bool OAIAccount::isHasAttachments() const {
    return m_has_attachments;
}
void OAIAccount::setHasAttachments(const bool &has_attachments) {
    m_has_attachments = has_attachments;
    m_has_attachments_isSet = true;
}

bool OAIAccount::is_has_attachments_Set() const{
    return m_has_attachments_isSet;
}

bool OAIAccount::is_has_attachments_Valid() const{
    return m_has_attachments_isValid;
}

QString OAIAccount::getName() const {
    return m_name;
}
void OAIAccount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccount::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccount::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAccount::getReportingCode() const {
    return m_reporting_code;
}
void OAIAccount::setReportingCode(const QString &reporting_code) {
    m_reporting_code = reporting_code;
    m_reporting_code_isSet = true;
}

bool OAIAccount::is_reporting_code_Set() const{
    return m_reporting_code_isSet;
}

bool OAIAccount::is_reporting_code_Valid() const{
    return m_reporting_code_isValid;
}

QString OAIAccount::getReportingCodeName() const {
    return m_reporting_code_name;
}
void OAIAccount::setReportingCodeName(const QString &reporting_code_name) {
    m_reporting_code_name = reporting_code_name;
    m_reporting_code_name_isSet = true;
}

bool OAIAccount::is_reporting_code_name_Set() const{
    return m_reporting_code_name_isSet;
}

bool OAIAccount::is_reporting_code_name_Valid() const{
    return m_reporting_code_name_isValid;
}

bool OAIAccount::isShowInExpenseClaims() const {
    return m_show_in_expense_claims;
}
void OAIAccount::setShowInExpenseClaims(const bool &show_in_expense_claims) {
    m_show_in_expense_claims = show_in_expense_claims;
    m_show_in_expense_claims_isSet = true;
}

bool OAIAccount::is_show_in_expense_claims_Set() const{
    return m_show_in_expense_claims_isSet;
}

bool OAIAccount::is_show_in_expense_claims_Valid() const{
    return m_show_in_expense_claims_isValid;
}

QString OAIAccount::getStatus() const {
    return m_status;
}
void OAIAccount::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAccount::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAccount::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAccount::getSystemAccount() const {
    return m_system_account;
}
void OAIAccount::setSystemAccount(const QString &system_account) {
    m_system_account = system_account;
    m_system_account_isSet = true;
}

bool OAIAccount::is_system_account_Set() const{
    return m_system_account_isSet;
}

bool OAIAccount::is_system_account_Valid() const{
    return m_system_account_isValid;
}

QString OAIAccount::getTaxType() const {
    return m_tax_type;
}
void OAIAccount::setTaxType(const QString &tax_type) {
    m_tax_type = tax_type;
    m_tax_type_isSet = true;
}

bool OAIAccount::is_tax_type_Set() const{
    return m_tax_type_isSet;
}

bool OAIAccount::is_tax_type_Valid() const{
    return m_tax_type_isValid;
}

OAIAccountType OAIAccount::getType() const {
    return m_type;
}
void OAIAccount::setType(const OAIAccountType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAccount::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAccount::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAccount::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIAccount::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIAccount::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIAccount::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

QList<OAIValidationError> OAIAccount::getValidationErrors() const {
    return m_validation_errors;
}
void OAIAccount::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIAccount::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIAccount::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_to_watchlist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_payments_to_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_code_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_in_expense_claims_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
