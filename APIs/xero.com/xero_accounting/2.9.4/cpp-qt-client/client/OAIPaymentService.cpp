/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentService::OAIPaymentService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentService::OAIPaymentService() {
    this->initializeModel();
}

OAIPaymentService::~OAIPaymentService() {}

void OAIPaymentService::initializeModel() {

    m_pay_now_text_isSet = false;
    m_pay_now_text_isValid = false;

    m_payment_service_id_isSet = false;
    m_payment_service_id_isValid = false;

    m_payment_service_name_isSet = false;
    m_payment_service_name_isValid = false;

    m_payment_service_type_isSet = false;
    m_payment_service_type_isValid = false;

    m_payment_service_url_isSet = false;
    m_payment_service_url_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAIPaymentService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentService::fromJsonObject(QJsonObject json) {

    m_pay_now_text_isValid = ::OpenAPI::fromJsonValue(m_pay_now_text, json[QString("PayNowText")]);
    m_pay_now_text_isSet = !json[QString("PayNowText")].isNull() && m_pay_now_text_isValid;

    m_payment_service_id_isValid = ::OpenAPI::fromJsonValue(m_payment_service_id, json[QString("PaymentServiceID")]);
    m_payment_service_id_isSet = !json[QString("PaymentServiceID")].isNull() && m_payment_service_id_isValid;

    m_payment_service_name_isValid = ::OpenAPI::fromJsonValue(m_payment_service_name, json[QString("PaymentServiceName")]);
    m_payment_service_name_isSet = !json[QString("PaymentServiceName")].isNull() && m_payment_service_name_isValid;

    m_payment_service_type_isValid = ::OpenAPI::fromJsonValue(m_payment_service_type, json[QString("PaymentServiceType")]);
    m_payment_service_type_isSet = !json[QString("PaymentServiceType")].isNull() && m_payment_service_type_isValid;

    m_payment_service_url_isValid = ::OpenAPI::fromJsonValue(m_payment_service_url, json[QString("PaymentServiceUrl")]);
    m_payment_service_url_isSet = !json[QString("PaymentServiceUrl")].isNull() && m_payment_service_url_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;
}

QString OAIPaymentService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentService::asJsonObject() const {
    QJsonObject obj;
    if (m_pay_now_text_isSet) {
        obj.insert(QString("PayNowText"), ::OpenAPI::toJsonValue(m_pay_now_text));
    }
    if (m_payment_service_id_isSet) {
        obj.insert(QString("PaymentServiceID"), ::OpenAPI::toJsonValue(m_payment_service_id));
    }
    if (m_payment_service_name_isSet) {
        obj.insert(QString("PaymentServiceName"), ::OpenAPI::toJsonValue(m_payment_service_name));
    }
    if (m_payment_service_type_isSet) {
        obj.insert(QString("PaymentServiceType"), ::OpenAPI::toJsonValue(m_payment_service_type));
    }
    if (m_payment_service_url_isSet) {
        obj.insert(QString("PaymentServiceUrl"), ::OpenAPI::toJsonValue(m_payment_service_url));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

QString OAIPaymentService::getPayNowText() const {
    return m_pay_now_text;
}
void OAIPaymentService::setPayNowText(const QString &pay_now_text) {
    m_pay_now_text = pay_now_text;
    m_pay_now_text_isSet = true;
}

bool OAIPaymentService::is_pay_now_text_Set() const{
    return m_pay_now_text_isSet;
}

bool OAIPaymentService::is_pay_now_text_Valid() const{
    return m_pay_now_text_isValid;
}

QString OAIPaymentService::getPaymentServiceId() const {
    return m_payment_service_id;
}
void OAIPaymentService::setPaymentServiceId(const QString &payment_service_id) {
    m_payment_service_id = payment_service_id;
    m_payment_service_id_isSet = true;
}

bool OAIPaymentService::is_payment_service_id_Set() const{
    return m_payment_service_id_isSet;
}

bool OAIPaymentService::is_payment_service_id_Valid() const{
    return m_payment_service_id_isValid;
}

QString OAIPaymentService::getPaymentServiceName() const {
    return m_payment_service_name;
}
void OAIPaymentService::setPaymentServiceName(const QString &payment_service_name) {
    m_payment_service_name = payment_service_name;
    m_payment_service_name_isSet = true;
}

bool OAIPaymentService::is_payment_service_name_Set() const{
    return m_payment_service_name_isSet;
}

bool OAIPaymentService::is_payment_service_name_Valid() const{
    return m_payment_service_name_isValid;
}

QString OAIPaymentService::getPaymentServiceType() const {
    return m_payment_service_type;
}
void OAIPaymentService::setPaymentServiceType(const QString &payment_service_type) {
    m_payment_service_type = payment_service_type;
    m_payment_service_type_isSet = true;
}

bool OAIPaymentService::is_payment_service_type_Set() const{
    return m_payment_service_type_isSet;
}

bool OAIPaymentService::is_payment_service_type_Valid() const{
    return m_payment_service_type_isValid;
}

QString OAIPaymentService::getPaymentServiceUrl() const {
    return m_payment_service_url;
}
void OAIPaymentService::setPaymentServiceUrl(const QString &payment_service_url) {
    m_payment_service_url = payment_service_url;
    m_payment_service_url_isSet = true;
}

bool OAIPaymentService::is_payment_service_url_Set() const{
    return m_payment_service_url_isSet;
}

bool OAIPaymentService::is_payment_service_url_Valid() const{
    return m_payment_service_url_isValid;
}

QList<OAIValidationError> OAIPaymentService::getValidationErrors() const {
    return m_validation_errors;
}
void OAIPaymentService::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIPaymentService::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIPaymentService::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAIPaymentService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pay_now_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_service_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_service_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
