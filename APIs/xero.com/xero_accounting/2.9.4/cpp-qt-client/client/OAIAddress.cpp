/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddress::OAIAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddress::OAIAddress() {
    this->initializeModel();
}

OAIAddress::~OAIAddress() {}

void OAIAddress::initializeModel() {

    m_address_line1_isSet = false;
    m_address_line1_isValid = false;

    m_address_line2_isSet = false;
    m_address_line2_isValid = false;

    m_address_line3_isSet = false;
    m_address_line3_isValid = false;

    m_address_line4_isSet = false;
    m_address_line4_isValid = false;

    m_address_type_isSet = false;
    m_address_type_isValid = false;

    m_attention_to_isSet = false;
    m_attention_to_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;
}

void OAIAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddress::fromJsonObject(QJsonObject json) {

    m_address_line1_isValid = ::OpenAPI::fromJsonValue(m_address_line1, json[QString("AddressLine1")]);
    m_address_line1_isSet = !json[QString("AddressLine1")].isNull() && m_address_line1_isValid;

    m_address_line2_isValid = ::OpenAPI::fromJsonValue(m_address_line2, json[QString("AddressLine2")]);
    m_address_line2_isSet = !json[QString("AddressLine2")].isNull() && m_address_line2_isValid;

    m_address_line3_isValid = ::OpenAPI::fromJsonValue(m_address_line3, json[QString("AddressLine3")]);
    m_address_line3_isSet = !json[QString("AddressLine3")].isNull() && m_address_line3_isValid;

    m_address_line4_isValid = ::OpenAPI::fromJsonValue(m_address_line4, json[QString("AddressLine4")]);
    m_address_line4_isSet = !json[QString("AddressLine4")].isNull() && m_address_line4_isValid;

    m_address_type_isValid = ::OpenAPI::fromJsonValue(m_address_type, json[QString("AddressType")]);
    m_address_type_isSet = !json[QString("AddressType")].isNull() && m_address_type_isValid;

    m_attention_to_isValid = ::OpenAPI::fromJsonValue(m_attention_to, json[QString("AttentionTo")]);
    m_attention_to_isSet = !json[QString("AttentionTo")].isNull() && m_attention_to_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("City")]);
    m_city_isSet = !json[QString("City")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("PostalCode")]);
    m_postal_code_isSet = !json[QString("PostalCode")].isNull() && m_postal_code_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;
}

QString OAIAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address_line1_isSet) {
        obj.insert(QString("AddressLine1"), ::OpenAPI::toJsonValue(m_address_line1));
    }
    if (m_address_line2_isSet) {
        obj.insert(QString("AddressLine2"), ::OpenAPI::toJsonValue(m_address_line2));
    }
    if (m_address_line3_isSet) {
        obj.insert(QString("AddressLine3"), ::OpenAPI::toJsonValue(m_address_line3));
    }
    if (m_address_line4_isSet) {
        obj.insert(QString("AddressLine4"), ::OpenAPI::toJsonValue(m_address_line4));
    }
    if (m_address_type_isSet) {
        obj.insert(QString("AddressType"), ::OpenAPI::toJsonValue(m_address_type));
    }
    if (m_attention_to_isSet) {
        obj.insert(QString("AttentionTo"), ::OpenAPI::toJsonValue(m_attention_to));
    }
    if (m_city_isSet) {
        obj.insert(QString("City"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("PostalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    return obj;
}

QString OAIAddress::getAddressLine1() const {
    return m_address_line1;
}
void OAIAddress::setAddressLine1(const QString &address_line1) {
    m_address_line1 = address_line1;
    m_address_line1_isSet = true;
}

bool OAIAddress::is_address_line1_Set() const{
    return m_address_line1_isSet;
}

bool OAIAddress::is_address_line1_Valid() const{
    return m_address_line1_isValid;
}

QString OAIAddress::getAddressLine2() const {
    return m_address_line2;
}
void OAIAddress::setAddressLine2(const QString &address_line2) {
    m_address_line2 = address_line2;
    m_address_line2_isSet = true;
}

bool OAIAddress::is_address_line2_Set() const{
    return m_address_line2_isSet;
}

bool OAIAddress::is_address_line2_Valid() const{
    return m_address_line2_isValid;
}

QString OAIAddress::getAddressLine3() const {
    return m_address_line3;
}
void OAIAddress::setAddressLine3(const QString &address_line3) {
    m_address_line3 = address_line3;
    m_address_line3_isSet = true;
}

bool OAIAddress::is_address_line3_Set() const{
    return m_address_line3_isSet;
}

bool OAIAddress::is_address_line3_Valid() const{
    return m_address_line3_isValid;
}

QString OAIAddress::getAddressLine4() const {
    return m_address_line4;
}
void OAIAddress::setAddressLine4(const QString &address_line4) {
    m_address_line4 = address_line4;
    m_address_line4_isSet = true;
}

bool OAIAddress::is_address_line4_Set() const{
    return m_address_line4_isSet;
}

bool OAIAddress::is_address_line4_Valid() const{
    return m_address_line4_isValid;
}

QString OAIAddress::getAddressType() const {
    return m_address_type;
}
void OAIAddress::setAddressType(const QString &address_type) {
    m_address_type = address_type;
    m_address_type_isSet = true;
}

bool OAIAddress::is_address_type_Set() const{
    return m_address_type_isSet;
}

bool OAIAddress::is_address_type_Valid() const{
    return m_address_type_isValid;
}

QString OAIAddress::getAttentionTo() const {
    return m_attention_to;
}
void OAIAddress::setAttentionTo(const QString &attention_to) {
    m_attention_to = attention_to;
    m_attention_to_isSet = true;
}

bool OAIAddress::is_attention_to_Set() const{
    return m_attention_to_isSet;
}

bool OAIAddress::is_attention_to_Valid() const{
    return m_attention_to_isValid;
}

QString OAIAddress::getCity() const {
    return m_city;
}
void OAIAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIAddress::getCountry() const {
    return m_country;
}
void OAIAddress::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAddress::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAddress::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAddress::getPostalCode() const {
    return m_postal_code;
}
void OAIAddress::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIAddress::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIAddress::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIAddress::getRegion() const {
    return m_region;
}
void OAIAddress::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIAddress::is_region_Set() const{
    return m_region_isSet;
}

bool OAIAddress::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attention_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
