/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchedule::OAISchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchedule::OAISchedule() {
    this->initializeModel();
}

OAISchedule::~OAISchedule() {}

void OAISchedule::initializeModel() {

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_due_date_type_isSet = false;
    m_due_date_type_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_next_scheduled_date_isSet = false;
    m_next_scheduled_date_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAISchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchedule::fromJsonObject(QJsonObject json) {

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("DueDate")]);
    m_due_date_isSet = !json[QString("DueDate")].isNull() && m_due_date_isValid;

    m_due_date_type_isValid = ::OpenAPI::fromJsonValue(m_due_date_type, json[QString("DueDateType")]);
    m_due_date_type_isSet = !json[QString("DueDateType")].isNull() && m_due_date_type_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_next_scheduled_date_isValid = ::OpenAPI::fromJsonValue(m_next_scheduled_date, json[QString("NextScheduledDate")]);
    m_next_scheduled_date_isSet = !json[QString("NextScheduledDate")].isNull() && m_next_scheduled_date_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("Period")]);
    m_period_isSet = !json[QString("Period")].isNull() && m_period_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;
}

QString OAISchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_due_date_isSet) {
        obj.insert(QString("DueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_due_date_type_isSet) {
        obj.insert(QString("DueDateType"), ::OpenAPI::toJsonValue(m_due_date_type));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_next_scheduled_date_isSet) {
        obj.insert(QString("NextScheduledDate"), ::OpenAPI::toJsonValue(m_next_scheduled_date));
    }
    if (m_period_isSet) {
        obj.insert(QString("Period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_unit_isSet) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

qint32 OAISchedule::getDueDate() const {
    return m_due_date;
}
void OAISchedule::setDueDate(const qint32 &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAISchedule::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAISchedule::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAISchedule::getDueDateType() const {
    return m_due_date_type;
}
void OAISchedule::setDueDateType(const QString &due_date_type) {
    m_due_date_type = due_date_type;
    m_due_date_type_isSet = true;
}

bool OAISchedule::is_due_date_type_Set() const{
    return m_due_date_type_isSet;
}

bool OAISchedule::is_due_date_type_Valid() const{
    return m_due_date_type_isValid;
}

QString OAISchedule::getEndDate() const {
    return m_end_date;
}
void OAISchedule::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAISchedule::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAISchedule::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAISchedule::getNextScheduledDate() const {
    return m_next_scheduled_date;
}
void OAISchedule::setNextScheduledDate(const QString &next_scheduled_date) {
    m_next_scheduled_date = next_scheduled_date;
    m_next_scheduled_date_isSet = true;
}

bool OAISchedule::is_next_scheduled_date_Set() const{
    return m_next_scheduled_date_isSet;
}

bool OAISchedule::is_next_scheduled_date_Valid() const{
    return m_next_scheduled_date_isValid;
}

qint32 OAISchedule::getPeriod() const {
    return m_period;
}
void OAISchedule::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAISchedule::is_period_Set() const{
    return m_period_isSet;
}

bool OAISchedule::is_period_Valid() const{
    return m_period_isValid;
}

QString OAISchedule::getStartDate() const {
    return m_start_date;
}
void OAISchedule::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAISchedule::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAISchedule::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAISchedule::getUnit() const {
    return m_unit;
}
void OAISchedule::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAISchedule::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAISchedule::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAISchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_scheduled_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
