/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportSummaryAccounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportSummaryAccounts::OAIImportSummaryAccounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportSummaryAccounts::OAIImportSummaryAccounts() {
    this->initializeModel();
}

OAIImportSummaryAccounts::~OAIImportSummaryAccounts() {}

void OAIImportSummaryAccounts::initializeModel() {

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_errored_isSet = false;
    m_errored_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_r_new_isSet = false;
    m_r_new_isValid = false;

    m_new_or_updated_isSet = false;
    m_new_or_updated_isValid = false;

    m_present_isSet = false;
    m_present_isValid = false;

    m_system_isSet = false;
    m_system_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIImportSummaryAccounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportSummaryAccounts::fromJsonObject(QJsonObject json) {

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("Deleted")]);
    m_deleted_isSet = !json[QString("Deleted")].isNull() && m_deleted_isValid;

    m_errored_isValid = ::OpenAPI::fromJsonValue(m_errored, json[QString("Errored")]);
    m_errored_isSet = !json[QString("Errored")].isNull() && m_errored_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("Locked")]);
    m_locked_isSet = !json[QString("Locked")].isNull() && m_locked_isValid;

    m_r_new_isValid = ::OpenAPI::fromJsonValue(m_r_new, json[QString("New")]);
    m_r_new_isSet = !json[QString("New")].isNull() && m_r_new_isValid;

    m_new_or_updated_isValid = ::OpenAPI::fromJsonValue(m_new_or_updated, json[QString("NewOrUpdated")]);
    m_new_or_updated_isSet = !json[QString("NewOrUpdated")].isNull() && m_new_or_updated_isValid;

    m_present_isValid = ::OpenAPI::fromJsonValue(m_present, json[QString("Present")]);
    m_present_isSet = !json[QString("Present")].isNull() && m_present_isValid;

    m_system_isValid = ::OpenAPI::fromJsonValue(m_system, json[QString("System")]);
    m_system_isSet = !json[QString("System")].isNull() && m_system_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;
}

QString OAIImportSummaryAccounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportSummaryAccounts::asJsonObject() const {
    QJsonObject obj;
    if (m_deleted_isSet) {
        obj.insert(QString("Deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_errored_isSet) {
        obj.insert(QString("Errored"), ::OpenAPI::toJsonValue(m_errored));
    }
    if (m_locked_isSet) {
        obj.insert(QString("Locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_r_new_isSet) {
        obj.insert(QString("New"), ::OpenAPI::toJsonValue(m_r_new));
    }
    if (m_new_or_updated_isSet) {
        obj.insert(QString("NewOrUpdated"), ::OpenAPI::toJsonValue(m_new_or_updated));
    }
    if (m_present_isSet) {
        obj.insert(QString("Present"), ::OpenAPI::toJsonValue(m_present));
    }
    if (m_system_isSet) {
        obj.insert(QString("System"), ::OpenAPI::toJsonValue(m_system));
    }
    if (m_total_isSet) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

double OAIImportSummaryAccounts::getDeleted() const {
    return m_deleted;
}
void OAIImportSummaryAccounts::setDeleted(const double &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIImportSummaryAccounts::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIImportSummaryAccounts::is_deleted_Valid() const{
    return m_deleted_isValid;
}

double OAIImportSummaryAccounts::getErrored() const {
    return m_errored;
}
void OAIImportSummaryAccounts::setErrored(const double &errored) {
    m_errored = errored;
    m_errored_isSet = true;
}

bool OAIImportSummaryAccounts::is_errored_Set() const{
    return m_errored_isSet;
}

bool OAIImportSummaryAccounts::is_errored_Valid() const{
    return m_errored_isValid;
}

double OAIImportSummaryAccounts::getLocked() const {
    return m_locked;
}
void OAIImportSummaryAccounts::setLocked(const double &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAIImportSummaryAccounts::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIImportSummaryAccounts::is_locked_Valid() const{
    return m_locked_isValid;
}

double OAIImportSummaryAccounts::getRNew() const {
    return m_r_new;
}
void OAIImportSummaryAccounts::setRNew(const double &r_new) {
    m_r_new = r_new;
    m_r_new_isSet = true;
}

bool OAIImportSummaryAccounts::is_r_new_Set() const{
    return m_r_new_isSet;
}

bool OAIImportSummaryAccounts::is_r_new_Valid() const{
    return m_r_new_isValid;
}

double OAIImportSummaryAccounts::getNewOrUpdated() const {
    return m_new_or_updated;
}
void OAIImportSummaryAccounts::setNewOrUpdated(const double &new_or_updated) {
    m_new_or_updated = new_or_updated;
    m_new_or_updated_isSet = true;
}

bool OAIImportSummaryAccounts::is_new_or_updated_Set() const{
    return m_new_or_updated_isSet;
}

bool OAIImportSummaryAccounts::is_new_or_updated_Valid() const{
    return m_new_or_updated_isValid;
}

bool OAIImportSummaryAccounts::isPresent() const {
    return m_present;
}
void OAIImportSummaryAccounts::setPresent(const bool &present) {
    m_present = present;
    m_present_isSet = true;
}

bool OAIImportSummaryAccounts::is_present_Set() const{
    return m_present_isSet;
}

bool OAIImportSummaryAccounts::is_present_Valid() const{
    return m_present_isValid;
}

double OAIImportSummaryAccounts::getSystem() const {
    return m_system;
}
void OAIImportSummaryAccounts::setSystem(const double &system) {
    m_system = system;
    m_system_isSet = true;
}

bool OAIImportSummaryAccounts::is_system_Set() const{
    return m_system_isSet;
}

bool OAIImportSummaryAccounts::is_system_Valid() const{
    return m_system_isValid;
}

double OAIImportSummaryAccounts::getTotal() const {
    return m_total;
}
void OAIImportSummaryAccounts::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIImportSummaryAccounts::is_total_Set() const{
    return m_total_isSet;
}

bool OAIImportSummaryAccounts::is_total_Valid() const{
    return m_total_isValid;
}

double OAIImportSummaryAccounts::getUpdated() const {
    return m_updated;
}
void OAIImportSummaryAccounts::setUpdated(const double &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIImportSummaryAccounts::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIImportSummaryAccounts::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIImportSummaryAccounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errored_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_new_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_or_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_present_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportSummaryAccounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
