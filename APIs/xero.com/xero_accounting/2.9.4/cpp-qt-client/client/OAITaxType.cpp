/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaxType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaxType::OAITaxType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaxType::OAITaxType() {
    this->initializeModel();
}

OAITaxType::~OAITaxType() {}

void OAITaxType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITaxType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITaxType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("OUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::OUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::INPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CAPEXINPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::CAPEXINPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXEMPTEXPORT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::EXEMPTEXPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXEMPTEXPENSES", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::EXEMPTEXPENSES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXEMPTCAPITAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::EXEMPTCAPITAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXEMPTOUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::EXEMPTOUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INPUTTAXED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::INPUTTAXED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BASEXCLUDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::BASEXCLUDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GSTONCAPIMPORTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::GSTONCAPIMPORTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GSTONIMPORTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::GSTONIMPORTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INPUT2", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::INPUT2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ZERORATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::ZERORATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OUTPUT2", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::OUTPUT2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CAPEXINPUT2", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::CAPEXINPUT2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CAPEXOUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::CAPEXOUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CAPEXOUTPUT2", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::CAPEXOUTPUT2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CAPEXSRINPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::CAPEXSRINPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CAPEXSROUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::CAPEXSROUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ECACQUISITIONS", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::ECACQUISITIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ECZRINPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::ECZRINPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ECZROUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::ECZROUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ECZROUTPUTSERVICES", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::ECZROUTPUTSERVICES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXEMPTINPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::EXEMPTINPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REVERSECHARGES", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::REVERSECHARGES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RRINPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::RRINPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RROUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::RROUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SRINPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::SRINPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SROUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::SROUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ZERORATEDINPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::ZERORATEDINPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ZERORATEDOUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::ZERORATEDOUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BLINPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::BLINPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DSOUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::DSOUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EPINPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::EPINPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ES33OUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::ES33OUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ESN33OUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::ESN33OUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IGDSINPUT2", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::IGDSINPUT2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMINPUT2", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::IMINPUT2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MEINPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::MEINPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NRINPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::NRINPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OPINPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::OPINPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OSOUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::OSOUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TXESSINPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::TXESSINPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TXN33INPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::TXN33INPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TXPETINPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::TXPETINPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TXREINPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::TXREINPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INPUT3", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::INPUT3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INPUT4", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::INPUT4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OUTPUT3", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::OUTPUT3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OUTPUT4", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::OUTPUT4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SROUTPUT2", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::SROUTPUT2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TXCA", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::TXCA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SRCAS", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::SRCAS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BLINPUT2", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::BLINPUT2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DRCHARGESUPPLY20", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::DRCHARGESUPPLY20;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DRCHARGE20", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::DRCHARGE20;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DRCHARGESUPPLY5", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::DRCHARGESUPPLY5;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DRCHARGE5", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaxType::DRCHARGE5;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITaxType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITaxType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITaxType::OUTPUT:
            val = "OUTPUT";
            break;
        case eOAITaxType::INPUT:
            val = "INPUT";
            break;
        case eOAITaxType::CAPEXINPUT:
            val = "CAPEXINPUT";
            break;
        case eOAITaxType::EXEMPTEXPORT:
            val = "EXEMPTEXPORT";
            break;
        case eOAITaxType::EXEMPTEXPENSES:
            val = "EXEMPTEXPENSES";
            break;
        case eOAITaxType::EXEMPTCAPITAL:
            val = "EXEMPTCAPITAL";
            break;
        case eOAITaxType::EXEMPTOUTPUT:
            val = "EXEMPTOUTPUT";
            break;
        case eOAITaxType::INPUTTAXED:
            val = "INPUTTAXED";
            break;
        case eOAITaxType::BASEXCLUDED:
            val = "BASEXCLUDED";
            break;
        case eOAITaxType::GSTONCAPIMPORTS:
            val = "GSTONCAPIMPORTS";
            break;
        case eOAITaxType::GSTONIMPORTS:
            val = "GSTONIMPORTS";
            break;
        case eOAITaxType::NONE:
            val = "NONE";
            break;
        case eOAITaxType::INPUT2:
            val = "INPUT2";
            break;
        case eOAITaxType::ZERORATED:
            val = "ZERORATED";
            break;
        case eOAITaxType::OUTPUT2:
            val = "OUTPUT2";
            break;
        case eOAITaxType::CAPEXINPUT2:
            val = "CAPEXINPUT2";
            break;
        case eOAITaxType::CAPEXOUTPUT:
            val = "CAPEXOUTPUT";
            break;
        case eOAITaxType::CAPEXOUTPUT2:
            val = "CAPEXOUTPUT2";
            break;
        case eOAITaxType::CAPEXSRINPUT:
            val = "CAPEXSRINPUT";
            break;
        case eOAITaxType::CAPEXSROUTPUT:
            val = "CAPEXSROUTPUT";
            break;
        case eOAITaxType::ECACQUISITIONS:
            val = "ECACQUISITIONS";
            break;
        case eOAITaxType::ECZRINPUT:
            val = "ECZRINPUT";
            break;
        case eOAITaxType::ECZROUTPUT:
            val = "ECZROUTPUT";
            break;
        case eOAITaxType::ECZROUTPUTSERVICES:
            val = "ECZROUTPUTSERVICES";
            break;
        case eOAITaxType::EXEMPTINPUT:
            val = "EXEMPTINPUT";
            break;
        case eOAITaxType::REVERSECHARGES:
            val = "REVERSECHARGES";
            break;
        case eOAITaxType::RRINPUT:
            val = "RRINPUT";
            break;
        case eOAITaxType::RROUTPUT:
            val = "RROUTPUT";
            break;
        case eOAITaxType::SRINPUT:
            val = "SRINPUT";
            break;
        case eOAITaxType::SROUTPUT:
            val = "SROUTPUT";
            break;
        case eOAITaxType::ZERORATEDINPUT:
            val = "ZERORATEDINPUT";
            break;
        case eOAITaxType::ZERORATEDOUTPUT:
            val = "ZERORATEDOUTPUT";
            break;
        case eOAITaxType::BLINPUT:
            val = "BLINPUT";
            break;
        case eOAITaxType::DSOUTPUT:
            val = "DSOUTPUT";
            break;
        case eOAITaxType::EPINPUT:
            val = "EPINPUT";
            break;
        case eOAITaxType::ES33OUTPUT:
            val = "ES33OUTPUT";
            break;
        case eOAITaxType::ESN33OUTPUT:
            val = "ESN33OUTPUT";
            break;
        case eOAITaxType::IGDSINPUT2:
            val = "IGDSINPUT2";
            break;
        case eOAITaxType::IMINPUT2:
            val = "IMINPUT2";
            break;
        case eOAITaxType::MEINPUT:
            val = "MEINPUT";
            break;
        case eOAITaxType::NRINPUT:
            val = "NRINPUT";
            break;
        case eOAITaxType::OPINPUT:
            val = "OPINPUT";
            break;
        case eOAITaxType::OSOUTPUT:
            val = "OSOUTPUT";
            break;
        case eOAITaxType::TXESSINPUT:
            val = "TXESSINPUT";
            break;
        case eOAITaxType::TXN33INPUT:
            val = "TXN33INPUT";
            break;
        case eOAITaxType::TXPETINPUT:
            val = "TXPETINPUT";
            break;
        case eOAITaxType::TXREINPUT:
            val = "TXREINPUT";
            break;
        case eOAITaxType::INPUT3:
            val = "INPUT3";
            break;
        case eOAITaxType::INPUT4:
            val = "INPUT4";
            break;
        case eOAITaxType::OUTPUT3:
            val = "OUTPUT3";
            break;
        case eOAITaxType::OUTPUT4:
            val = "OUTPUT4";
            break;
        case eOAITaxType::SROUTPUT2:
            val = "SROUTPUT2";
            break;
        case eOAITaxType::TXCA:
            val = "TXCA";
            break;
        case eOAITaxType::SRCAS:
            val = "SRCAS";
            break;
        case eOAITaxType::BLINPUT2:
            val = "BLINPUT2";
            break;
        case eOAITaxType::DRCHARGESUPPLY20:
            val = "DRCHARGESUPPLY20";
            break;
        case eOAITaxType::DRCHARGE20:
            val = "DRCHARGE20";
            break;
        case eOAITaxType::DRCHARGESUPPLY5:
            val = "DRCHARGESUPPLY5";
            break;
        case eOAITaxType::DRCHARGE5:
            val = "DRCHARGE5";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITaxType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITaxType::eOAITaxType OAITaxType::getValue() const {
    return m_value;
}

void OAITaxType::setValue(const OAITaxType::eOAITaxType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITaxType::isSet() const {
    
    return m_value_isSet;
}

bool OAITaxType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
