/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepeatingInvoice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepeatingInvoice::OAIRepeatingInvoice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepeatingInvoice::OAIRepeatingInvoice() {
    this->initializeModel();
}

OAIRepeatingInvoice::~OAIRepeatingInvoice() {}

void OAIRepeatingInvoice::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_branding_theme_id_isSet = false;
    m_branding_theme_id_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_has_attachments_isSet = false;
    m_has_attachments_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_line_amount_types_isSet = false;
    m_line_amount_types_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_repeating_invoice_id_isSet = false;
    m_repeating_invoice_id_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sub_total_isSet = false;
    m_sub_total_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_total_tax_isSet = false;
    m_total_tax_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRepeatingInvoice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepeatingInvoice::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("Attachments")]);
    m_attachments_isSet = !json[QString("Attachments")].isNull() && m_attachments_isValid;

    m_branding_theme_id_isValid = ::OpenAPI::fromJsonValue(m_branding_theme_id, json[QString("BrandingThemeID")]);
    m_branding_theme_id_isSet = !json[QString("BrandingThemeID")].isNull() && m_branding_theme_id_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("Contact")]);
    m_contact_isSet = !json[QString("Contact")].isNull() && m_contact_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_has_attachments_isValid = ::OpenAPI::fromJsonValue(m_has_attachments, json[QString("HasAttachments")]);
    m_has_attachments_isSet = !json[QString("HasAttachments")].isNull() && m_has_attachments_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_line_amount_types_isValid = ::OpenAPI::fromJsonValue(m_line_amount_types, json[QString("LineAmountTypes")]);
    m_line_amount_types_isSet = !json[QString("LineAmountTypes")].isNull() && m_line_amount_types_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("LineItems")]);
    m_line_items_isSet = !json[QString("LineItems")].isNull() && m_line_items_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("Reference")]);
    m_reference_isSet = !json[QString("Reference")].isNull() && m_reference_isValid;

    m_repeating_invoice_id_isValid = ::OpenAPI::fromJsonValue(m_repeating_invoice_id, json[QString("RepeatingInvoiceID")]);
    m_repeating_invoice_id_isSet = !json[QString("RepeatingInvoiceID")].isNull() && m_repeating_invoice_id_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("Schedule")]);
    m_schedule_isSet = !json[QString("Schedule")].isNull() && m_schedule_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_sub_total_isValid = ::OpenAPI::fromJsonValue(m_sub_total, json[QString("SubTotal")]);
    m_sub_total_isSet = !json[QString("SubTotal")].isNull() && m_sub_total_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;

    m_total_tax_isValid = ::OpenAPI::fromJsonValue(m_total_tax, json[QString("TotalTax")]);
    m_total_tax_isSet = !json[QString("TotalTax")].isNull() && m_total_tax_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIRepeatingInvoice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepeatingInvoice::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("Attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_branding_theme_id_isSet) {
        obj.insert(QString("BrandingThemeID"), ::OpenAPI::toJsonValue(m_branding_theme_id));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("Contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_currency_code.isSet()) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_has_attachments_isSet) {
        obj.insert(QString("HasAttachments"), ::OpenAPI::toJsonValue(m_has_attachments));
    }
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_line_amount_types.isSet()) {
        obj.insert(QString("LineAmountTypes"), ::OpenAPI::toJsonValue(m_line_amount_types));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("LineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_reference_isSet) {
        obj.insert(QString("Reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_repeating_invoice_id_isSet) {
        obj.insert(QString("RepeatingInvoiceID"), ::OpenAPI::toJsonValue(m_repeating_invoice_id));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("Schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sub_total_isSet) {
        obj.insert(QString("SubTotal"), ::OpenAPI::toJsonValue(m_sub_total));
    }
    if (m_total_isSet) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_total_tax_isSet) {
        obj.insert(QString("TotalTax"), ::OpenAPI::toJsonValue(m_total_tax));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIAttachment> OAIRepeatingInvoice::getAttachments() const {
    return m_attachments;
}
void OAIRepeatingInvoice::setAttachments(const QList<OAIAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIRepeatingInvoice::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIRepeatingInvoice::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIRepeatingInvoice::getBrandingThemeId() const {
    return m_branding_theme_id;
}
void OAIRepeatingInvoice::setBrandingThemeId(const QString &branding_theme_id) {
    m_branding_theme_id = branding_theme_id;
    m_branding_theme_id_isSet = true;
}

bool OAIRepeatingInvoice::is_branding_theme_id_Set() const{
    return m_branding_theme_id_isSet;
}

bool OAIRepeatingInvoice::is_branding_theme_id_Valid() const{
    return m_branding_theme_id_isValid;
}

OAIContact OAIRepeatingInvoice::getContact() const {
    return m_contact;
}
void OAIRepeatingInvoice::setContact(const OAIContact &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIRepeatingInvoice::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIRepeatingInvoice::is_contact_Valid() const{
    return m_contact_isValid;
}

OAICurrencyCode OAIRepeatingInvoice::getCurrencyCode() const {
    return m_currency_code;
}
void OAIRepeatingInvoice::setCurrencyCode(const OAICurrencyCode &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIRepeatingInvoice::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIRepeatingInvoice::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

bool OAIRepeatingInvoice::isHasAttachments() const {
    return m_has_attachments;
}
void OAIRepeatingInvoice::setHasAttachments(const bool &has_attachments) {
    m_has_attachments = has_attachments;
    m_has_attachments_isSet = true;
}

bool OAIRepeatingInvoice::is_has_attachments_Set() const{
    return m_has_attachments_isSet;
}

bool OAIRepeatingInvoice::is_has_attachments_Valid() const{
    return m_has_attachments_isValid;
}

QString OAIRepeatingInvoice::getId() const {
    return m_id;
}
void OAIRepeatingInvoice::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRepeatingInvoice::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRepeatingInvoice::is_id_Valid() const{
    return m_id_isValid;
}

OAILineAmountTypes OAIRepeatingInvoice::getLineAmountTypes() const {
    return m_line_amount_types;
}
void OAIRepeatingInvoice::setLineAmountTypes(const OAILineAmountTypes &line_amount_types) {
    m_line_amount_types = line_amount_types;
    m_line_amount_types_isSet = true;
}

bool OAIRepeatingInvoice::is_line_amount_types_Set() const{
    return m_line_amount_types_isSet;
}

bool OAIRepeatingInvoice::is_line_amount_types_Valid() const{
    return m_line_amount_types_isValid;
}

QList<OAILineItem> OAIRepeatingInvoice::getLineItems() const {
    return m_line_items;
}
void OAIRepeatingInvoice::setLineItems(const QList<OAILineItem> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIRepeatingInvoice::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIRepeatingInvoice::is_line_items_Valid() const{
    return m_line_items_isValid;
}

QString OAIRepeatingInvoice::getReference() const {
    return m_reference;
}
void OAIRepeatingInvoice::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIRepeatingInvoice::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIRepeatingInvoice::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIRepeatingInvoice::getRepeatingInvoiceId() const {
    return m_repeating_invoice_id;
}
void OAIRepeatingInvoice::setRepeatingInvoiceId(const QString &repeating_invoice_id) {
    m_repeating_invoice_id = repeating_invoice_id;
    m_repeating_invoice_id_isSet = true;
}

bool OAIRepeatingInvoice::is_repeating_invoice_id_Set() const{
    return m_repeating_invoice_id_isSet;
}

bool OAIRepeatingInvoice::is_repeating_invoice_id_Valid() const{
    return m_repeating_invoice_id_isValid;
}

OAISchedule OAIRepeatingInvoice::getSchedule() const {
    return m_schedule;
}
void OAIRepeatingInvoice::setSchedule(const OAISchedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIRepeatingInvoice::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIRepeatingInvoice::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAIRepeatingInvoice::getStatus() const {
    return m_status;
}
void OAIRepeatingInvoice::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRepeatingInvoice::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRepeatingInvoice::is_status_Valid() const{
    return m_status_isValid;
}

double OAIRepeatingInvoice::getSubTotal() const {
    return m_sub_total;
}
void OAIRepeatingInvoice::setSubTotal(const double &sub_total) {
    m_sub_total = sub_total;
    m_sub_total_isSet = true;
}

bool OAIRepeatingInvoice::is_sub_total_Set() const{
    return m_sub_total_isSet;
}

bool OAIRepeatingInvoice::is_sub_total_Valid() const{
    return m_sub_total_isValid;
}

double OAIRepeatingInvoice::getTotal() const {
    return m_total;
}
void OAIRepeatingInvoice::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIRepeatingInvoice::is_total_Set() const{
    return m_total_isSet;
}

bool OAIRepeatingInvoice::is_total_Valid() const{
    return m_total_isValid;
}

double OAIRepeatingInvoice::getTotalTax() const {
    return m_total_tax;
}
void OAIRepeatingInvoice::setTotalTax(const double &total_tax) {
    m_total_tax = total_tax;
    m_total_tax_isSet = true;
}

bool OAIRepeatingInvoice::is_total_tax_Set() const{
    return m_total_tax_isSet;
}

bool OAIRepeatingInvoice::is_total_tax_Valid() const{
    return m_total_tax_isValid;
}

QString OAIRepeatingInvoice::getType() const {
    return m_type;
}
void OAIRepeatingInvoice::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRepeatingInvoice::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRepeatingInvoice::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRepeatingInvoice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_branding_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_amount_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeating_invoice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepeatingInvoice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
