/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineItem::OAILineItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineItem::OAILineItem() {
    this->initializeModel();
}

OAILineItem::~OAILineItem() {}

void OAILineItem::initializeModel() {

    m_account_code_isSet = false;
    m_account_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_rate_isSet = false;
    m_discount_rate_isValid = false;

    m_item_code_isSet = false;
    m_item_code_isValid = false;

    m_line_amount_isSet = false;
    m_line_amount_isValid = false;

    m_line_item_id_isSet = false;
    m_line_item_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_repeating_invoice_id_isSet = false;
    m_repeating_invoice_id_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_tax_type_isSet = false;
    m_tax_type_isValid = false;

    m_tracking_isSet = false;
    m_tracking_isValid = false;

    m_unit_amount_isSet = false;
    m_unit_amount_isValid = false;
}

void OAILineItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineItem::fromJsonObject(QJsonObject json) {

    m_account_code_isValid = ::OpenAPI::fromJsonValue(m_account_code, json[QString("AccountCode")]);
    m_account_code_isSet = !json[QString("AccountCode")].isNull() && m_account_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("DiscountAmount")]);
    m_discount_amount_isSet = !json[QString("DiscountAmount")].isNull() && m_discount_amount_isValid;

    m_discount_rate_isValid = ::OpenAPI::fromJsonValue(m_discount_rate, json[QString("DiscountRate")]);
    m_discount_rate_isSet = !json[QString("DiscountRate")].isNull() && m_discount_rate_isValid;

    m_item_code_isValid = ::OpenAPI::fromJsonValue(m_item_code, json[QString("ItemCode")]);
    m_item_code_isSet = !json[QString("ItemCode")].isNull() && m_item_code_isValid;

    m_line_amount_isValid = ::OpenAPI::fromJsonValue(m_line_amount, json[QString("LineAmount")]);
    m_line_amount_isSet = !json[QString("LineAmount")].isNull() && m_line_amount_isValid;

    m_line_item_id_isValid = ::OpenAPI::fromJsonValue(m_line_item_id, json[QString("LineItemID")]);
    m_line_item_id_isSet = !json[QString("LineItemID")].isNull() && m_line_item_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("Quantity")]);
    m_quantity_isSet = !json[QString("Quantity")].isNull() && m_quantity_isValid;

    m_repeating_invoice_id_isValid = ::OpenAPI::fromJsonValue(m_repeating_invoice_id, json[QString("RepeatingInvoiceID")]);
    m_repeating_invoice_id_isSet = !json[QString("RepeatingInvoiceID")].isNull() && m_repeating_invoice_id_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("TaxAmount")]);
    m_tax_amount_isSet = !json[QString("TaxAmount")].isNull() && m_tax_amount_isValid;

    m_tax_type_isValid = ::OpenAPI::fromJsonValue(m_tax_type, json[QString("TaxType")]);
    m_tax_type_isSet = !json[QString("TaxType")].isNull() && m_tax_type_isValid;

    m_tracking_isValid = ::OpenAPI::fromJsonValue(m_tracking, json[QString("Tracking")]);
    m_tracking_isSet = !json[QString("Tracking")].isNull() && m_tracking_isValid;

    m_unit_amount_isValid = ::OpenAPI::fromJsonValue(m_unit_amount, json[QString("UnitAmount")]);
    m_unit_amount_isSet = !json[QString("UnitAmount")].isNull() && m_unit_amount_isValid;
}

QString OAILineItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineItem::asJsonObject() const {
    QJsonObject obj;
    if (m_account_code_isSet) {
        obj.insert(QString("AccountCode"), ::OpenAPI::toJsonValue(m_account_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discount_amount_isSet) {
        obj.insert(QString("DiscountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_rate_isSet) {
        obj.insert(QString("DiscountRate"), ::OpenAPI::toJsonValue(m_discount_rate));
    }
    if (m_item_code_isSet) {
        obj.insert(QString("ItemCode"), ::OpenAPI::toJsonValue(m_item_code));
    }
    if (m_line_amount_isSet) {
        obj.insert(QString("LineAmount"), ::OpenAPI::toJsonValue(m_line_amount));
    }
    if (m_line_item_id_isSet) {
        obj.insert(QString("LineItemID"), ::OpenAPI::toJsonValue(m_line_item_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("Quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_repeating_invoice_id_isSet) {
        obj.insert(QString("RepeatingInvoiceID"), ::OpenAPI::toJsonValue(m_repeating_invoice_id));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("TaxAmount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_tax_type_isSet) {
        obj.insert(QString("TaxType"), ::OpenAPI::toJsonValue(m_tax_type));
    }
    if (m_tracking.size() > 0) {
        obj.insert(QString("Tracking"), ::OpenAPI::toJsonValue(m_tracking));
    }
    if (m_unit_amount_isSet) {
        obj.insert(QString("UnitAmount"), ::OpenAPI::toJsonValue(m_unit_amount));
    }
    return obj;
}

QString OAILineItem::getAccountCode() const {
    return m_account_code;
}
void OAILineItem::setAccountCode(const QString &account_code) {
    m_account_code = account_code;
    m_account_code_isSet = true;
}

bool OAILineItem::is_account_code_Set() const{
    return m_account_code_isSet;
}

bool OAILineItem::is_account_code_Valid() const{
    return m_account_code_isValid;
}

QString OAILineItem::getDescription() const {
    return m_description;
}
void OAILineItem::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILineItem::is_description_Set() const{
    return m_description_isSet;
}

bool OAILineItem::is_description_Valid() const{
    return m_description_isValid;
}

double OAILineItem::getDiscountAmount() const {
    return m_discount_amount;
}
void OAILineItem::setDiscountAmount(const double &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAILineItem::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAILineItem::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

double OAILineItem::getDiscountRate() const {
    return m_discount_rate;
}
void OAILineItem::setDiscountRate(const double &discount_rate) {
    m_discount_rate = discount_rate;
    m_discount_rate_isSet = true;
}

bool OAILineItem::is_discount_rate_Set() const{
    return m_discount_rate_isSet;
}

bool OAILineItem::is_discount_rate_Valid() const{
    return m_discount_rate_isValid;
}

QString OAILineItem::getItemCode() const {
    return m_item_code;
}
void OAILineItem::setItemCode(const QString &item_code) {
    m_item_code = item_code;
    m_item_code_isSet = true;
}

bool OAILineItem::is_item_code_Set() const{
    return m_item_code_isSet;
}

bool OAILineItem::is_item_code_Valid() const{
    return m_item_code_isValid;
}

double OAILineItem::getLineAmount() const {
    return m_line_amount;
}
void OAILineItem::setLineAmount(const double &line_amount) {
    m_line_amount = line_amount;
    m_line_amount_isSet = true;
}

bool OAILineItem::is_line_amount_Set() const{
    return m_line_amount_isSet;
}

bool OAILineItem::is_line_amount_Valid() const{
    return m_line_amount_isValid;
}

QString OAILineItem::getLineItemId() const {
    return m_line_item_id;
}
void OAILineItem::setLineItemId(const QString &line_item_id) {
    m_line_item_id = line_item_id;
    m_line_item_id_isSet = true;
}

bool OAILineItem::is_line_item_id_Set() const{
    return m_line_item_id_isSet;
}

bool OAILineItem::is_line_item_id_Valid() const{
    return m_line_item_id_isValid;
}

double OAILineItem::getQuantity() const {
    return m_quantity;
}
void OAILineItem::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAILineItem::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAILineItem::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAILineItem::getRepeatingInvoiceId() const {
    return m_repeating_invoice_id;
}
void OAILineItem::setRepeatingInvoiceId(const QString &repeating_invoice_id) {
    m_repeating_invoice_id = repeating_invoice_id;
    m_repeating_invoice_id_isSet = true;
}

bool OAILineItem::is_repeating_invoice_id_Set() const{
    return m_repeating_invoice_id_isSet;
}

bool OAILineItem::is_repeating_invoice_id_Valid() const{
    return m_repeating_invoice_id_isValid;
}

double OAILineItem::getTaxAmount() const {
    return m_tax_amount;
}
void OAILineItem::setTaxAmount(const double &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAILineItem::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAILineItem::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

QString OAILineItem::getTaxType() const {
    return m_tax_type;
}
void OAILineItem::setTaxType(const QString &tax_type) {
    m_tax_type = tax_type;
    m_tax_type_isSet = true;
}

bool OAILineItem::is_tax_type_Set() const{
    return m_tax_type_isSet;
}

bool OAILineItem::is_tax_type_Valid() const{
    return m_tax_type_isValid;
}

QList<OAILineItemTracking> OAILineItem::getTracking() const {
    return m_tracking;
}
void OAILineItem::setTracking(const QList<OAILineItemTracking> &tracking) {
    m_tracking = tracking;
    m_tracking_isSet = true;
}

bool OAILineItem::is_tracking_Set() const{
    return m_tracking_isSet;
}

bool OAILineItem::is_tracking_Valid() const{
    return m_tracking_isValid;
}

double OAILineItem::getUnitAmount() const {
    return m_unit_amount;
}
void OAILineItem::setUnitAmount(const double &unit_amount) {
    m_unit_amount = unit_amount;
    m_unit_amount_isSet = true;
}

bool OAILineItem::is_unit_amount_Set() const{
    return m_unit_amount_isSet;
}

bool OAILineItem::is_unit_amount_Valid() const{
    return m_unit_amount_isValid;
}

bool OAILineItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeating_invoice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
