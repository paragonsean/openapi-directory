/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportWithRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportWithRow::OAIReportWithRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportWithRow::OAIReportWithRow() {
    this->initializeModel();
}

OAIReportWithRow::~OAIReportWithRow() {}

void OAIReportWithRow::initializeModel() {

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_report_date_isSet = false;
    m_report_date_isValid = false;

    m_report_id_isSet = false;
    m_report_id_isValid = false;

    m_report_name_isSet = false;
    m_report_name_isValid = false;

    m_report_title_isSet = false;
    m_report_title_isValid = false;

    m_report_titles_isSet = false;
    m_report_titles_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;
}

void OAIReportWithRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportWithRow::fromJsonObject(QJsonObject json) {

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("Fields")]);
    m_fields_isSet = !json[QString("Fields")].isNull() && m_fields_isValid;

    m_report_date_isValid = ::OpenAPI::fromJsonValue(m_report_date, json[QString("ReportDate")]);
    m_report_date_isSet = !json[QString("ReportDate")].isNull() && m_report_date_isValid;

    m_report_id_isValid = ::OpenAPI::fromJsonValue(m_report_id, json[QString("ReportID")]);
    m_report_id_isSet = !json[QString("ReportID")].isNull() && m_report_id_isValid;

    m_report_name_isValid = ::OpenAPI::fromJsonValue(m_report_name, json[QString("ReportName")]);
    m_report_name_isSet = !json[QString("ReportName")].isNull() && m_report_name_isValid;

    m_report_title_isValid = ::OpenAPI::fromJsonValue(m_report_title, json[QString("ReportTitle")]);
    m_report_title_isSet = !json[QString("ReportTitle")].isNull() && m_report_title_isValid;

    m_report_titles_isValid = ::OpenAPI::fromJsonValue(m_report_titles, json[QString("ReportTitles")]);
    m_report_titles_isSet = !json[QString("ReportTitles")].isNull() && m_report_titles_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("ReportType")]);
    m_report_type_isSet = !json[QString("ReportType")].isNull() && m_report_type_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("Rows")]);
    m_rows_isSet = !json[QString("Rows")].isNull() && m_rows_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;
}

QString OAIReportWithRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportWithRow::asJsonObject() const {
    QJsonObject obj;
    if (m_fields.size() > 0) {
        obj.insert(QString("Fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_report_date_isSet) {
        obj.insert(QString("ReportDate"), ::OpenAPI::toJsonValue(m_report_date));
    }
    if (m_report_id_isSet) {
        obj.insert(QString("ReportID"), ::OpenAPI::toJsonValue(m_report_id));
    }
    if (m_report_name_isSet) {
        obj.insert(QString("ReportName"), ::OpenAPI::toJsonValue(m_report_name));
    }
    if (m_report_title_isSet) {
        obj.insert(QString("ReportTitle"), ::OpenAPI::toJsonValue(m_report_title));
    }
    if (m_report_titles.size() > 0) {
        obj.insert(QString("ReportTitles"), ::OpenAPI::toJsonValue(m_report_titles));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("ReportType"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_rows.size() > 0) {
        obj.insert(QString("Rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    return obj;
}

QList<OAIReportFields> OAIReportWithRow::getFields() const {
    return m_fields;
}
void OAIReportWithRow::setFields(const QList<OAIReportFields> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIReportWithRow::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIReportWithRow::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAIReportWithRow::getReportDate() const {
    return m_report_date;
}
void OAIReportWithRow::setReportDate(const QString &report_date) {
    m_report_date = report_date;
    m_report_date_isSet = true;
}

bool OAIReportWithRow::is_report_date_Set() const{
    return m_report_date_isSet;
}

bool OAIReportWithRow::is_report_date_Valid() const{
    return m_report_date_isValid;
}

QString OAIReportWithRow::getReportId() const {
    return m_report_id;
}
void OAIReportWithRow::setReportId(const QString &report_id) {
    m_report_id = report_id;
    m_report_id_isSet = true;
}

bool OAIReportWithRow::is_report_id_Set() const{
    return m_report_id_isSet;
}

bool OAIReportWithRow::is_report_id_Valid() const{
    return m_report_id_isValid;
}

QString OAIReportWithRow::getReportName() const {
    return m_report_name;
}
void OAIReportWithRow::setReportName(const QString &report_name) {
    m_report_name = report_name;
    m_report_name_isSet = true;
}

bool OAIReportWithRow::is_report_name_Set() const{
    return m_report_name_isSet;
}

bool OAIReportWithRow::is_report_name_Valid() const{
    return m_report_name_isValid;
}

QString OAIReportWithRow::getReportTitle() const {
    return m_report_title;
}
void OAIReportWithRow::setReportTitle(const QString &report_title) {
    m_report_title = report_title;
    m_report_title_isSet = true;
}

bool OAIReportWithRow::is_report_title_Set() const{
    return m_report_title_isSet;
}

bool OAIReportWithRow::is_report_title_Valid() const{
    return m_report_title_isValid;
}

QList<QString> OAIReportWithRow::getReportTitles() const {
    return m_report_titles;
}
void OAIReportWithRow::setReportTitles(const QList<QString> &report_titles) {
    m_report_titles = report_titles;
    m_report_titles_isSet = true;
}

bool OAIReportWithRow::is_report_titles_Set() const{
    return m_report_titles_isSet;
}

bool OAIReportWithRow::is_report_titles_Valid() const{
    return m_report_titles_isValid;
}

QString OAIReportWithRow::getReportType() const {
    return m_report_type;
}
void OAIReportWithRow::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAIReportWithRow::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAIReportWithRow::is_report_type_Valid() const{
    return m_report_type_isValid;
}

QList<OAIReportRows> OAIReportWithRow::getRows() const {
    return m_rows;
}
void OAIReportWithRow::setRows(const QList<OAIReportRows> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIReportWithRow::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIReportWithRow::is_rows_Valid() const{
    return m_rows_isValid;
}

QString OAIReportWithRow::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIReportWithRow::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIReportWithRow::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIReportWithRow::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

bool OAIReportWithRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_titles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportWithRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
