/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountsReceivable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountsReceivable::OAIAccountsReceivable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountsReceivable::OAIAccountsReceivable() {
    this->initializeModel();
}

OAIAccountsReceivable::~OAIAccountsReceivable() {}

void OAIAccountsReceivable::initializeModel() {

    m_outstanding_isSet = false;
    m_outstanding_isValid = false;

    m_overdue_isSet = false;
    m_overdue_isValid = false;
}

void OAIAccountsReceivable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountsReceivable::fromJsonObject(QJsonObject json) {

    m_outstanding_isValid = ::OpenAPI::fromJsonValue(m_outstanding, json[QString("Outstanding")]);
    m_outstanding_isSet = !json[QString("Outstanding")].isNull() && m_outstanding_isValid;

    m_overdue_isValid = ::OpenAPI::fromJsonValue(m_overdue, json[QString("Overdue")]);
    m_overdue_isSet = !json[QString("Overdue")].isNull() && m_overdue_isValid;
}

QString OAIAccountsReceivable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountsReceivable::asJsonObject() const {
    QJsonObject obj;
    if (m_outstanding_isSet) {
        obj.insert(QString("Outstanding"), ::OpenAPI::toJsonValue(m_outstanding));
    }
    if (m_overdue_isSet) {
        obj.insert(QString("Overdue"), ::OpenAPI::toJsonValue(m_overdue));
    }
    return obj;
}

double OAIAccountsReceivable::getOutstanding() const {
    return m_outstanding;
}
void OAIAccountsReceivable::setOutstanding(const double &outstanding) {
    m_outstanding = outstanding;
    m_outstanding_isSet = true;
}

bool OAIAccountsReceivable::is_outstanding_Set() const{
    return m_outstanding_isSet;
}

bool OAIAccountsReceivable::is_outstanding_Valid() const{
    return m_outstanding_isValid;
}

double OAIAccountsReceivable::getOverdue() const {
    return m_overdue;
}
void OAIAccountsReceivable::setOverdue(const double &overdue) {
    m_overdue = overdue;
    m_overdue_isSet = true;
}

bool OAIAccountsReceivable::is_overdue_Set() const{
    return m_overdue_isSet;
}

bool OAIAccountsReceivable::is_overdue_Valid() const{
    return m_overdue_isValid;
}

bool OAIAccountsReceivable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_outstanding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overdue_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountsReceivable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
