/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElement::OAIElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElement::OAIElement() {
    this->initializeModel();
}

OAIElement::~OAIElement() {}

void OAIElement::initializeModel() {

    m_bank_transaction_id_isSet = false;
    m_bank_transaction_id_isValid = false;

    m_batch_payment_id_isSet = false;
    m_batch_payment_id_isValid = false;

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_credit_note_id_isSet = false;
    m_credit_note_id_isValid = false;

    m_invoice_id_isSet = false;
    m_invoice_id_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_purchase_order_id_isSet = false;
    m_purchase_order_id_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAIElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElement::fromJsonObject(QJsonObject json) {

    m_bank_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_bank_transaction_id, json[QString("BankTransactionID")]);
    m_bank_transaction_id_isSet = !json[QString("BankTransactionID")].isNull() && m_bank_transaction_id_isValid;

    m_batch_payment_id_isValid = ::OpenAPI::fromJsonValue(m_batch_payment_id, json[QString("BatchPaymentID")]);
    m_batch_payment_id_isSet = !json[QString("BatchPaymentID")].isNull() && m_batch_payment_id_isValid;

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("ContactID")]);
    m_contact_id_isSet = !json[QString("ContactID")].isNull() && m_contact_id_isValid;

    m_credit_note_id_isValid = ::OpenAPI::fromJsonValue(m_credit_note_id, json[QString("CreditNoteID")]);
    m_credit_note_id_isSet = !json[QString("CreditNoteID")].isNull() && m_credit_note_id_isValid;

    m_invoice_id_isValid = ::OpenAPI::fromJsonValue(m_invoice_id, json[QString("InvoiceID")]);
    m_invoice_id_isSet = !json[QString("InvoiceID")].isNull() && m_invoice_id_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("ItemID")]);
    m_item_id_isSet = !json[QString("ItemID")].isNull() && m_item_id_isValid;

    m_purchase_order_id_isValid = ::OpenAPI::fromJsonValue(m_purchase_order_id, json[QString("PurchaseOrderID")]);
    m_purchase_order_id_isSet = !json[QString("PurchaseOrderID")].isNull() && m_purchase_order_id_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;
}

QString OAIElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElement::asJsonObject() const {
    QJsonObject obj;
    if (m_bank_transaction_id_isSet) {
        obj.insert(QString("BankTransactionID"), ::OpenAPI::toJsonValue(m_bank_transaction_id));
    }
    if (m_batch_payment_id_isSet) {
        obj.insert(QString("BatchPaymentID"), ::OpenAPI::toJsonValue(m_batch_payment_id));
    }
    if (m_contact_id_isSet) {
        obj.insert(QString("ContactID"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_credit_note_id_isSet) {
        obj.insert(QString("CreditNoteID"), ::OpenAPI::toJsonValue(m_credit_note_id));
    }
    if (m_invoice_id_isSet) {
        obj.insert(QString("InvoiceID"), ::OpenAPI::toJsonValue(m_invoice_id));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("ItemID"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_purchase_order_id_isSet) {
        obj.insert(QString("PurchaseOrderID"), ::OpenAPI::toJsonValue(m_purchase_order_id));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

QString OAIElement::getBankTransactionId() const {
    return m_bank_transaction_id;
}
void OAIElement::setBankTransactionId(const QString &bank_transaction_id) {
    m_bank_transaction_id = bank_transaction_id;
    m_bank_transaction_id_isSet = true;
}

bool OAIElement::is_bank_transaction_id_Set() const{
    return m_bank_transaction_id_isSet;
}

bool OAIElement::is_bank_transaction_id_Valid() const{
    return m_bank_transaction_id_isValid;
}

QString OAIElement::getBatchPaymentId() const {
    return m_batch_payment_id;
}
void OAIElement::setBatchPaymentId(const QString &batch_payment_id) {
    m_batch_payment_id = batch_payment_id;
    m_batch_payment_id_isSet = true;
}

bool OAIElement::is_batch_payment_id_Set() const{
    return m_batch_payment_id_isSet;
}

bool OAIElement::is_batch_payment_id_Valid() const{
    return m_batch_payment_id_isValid;
}

QString OAIElement::getContactId() const {
    return m_contact_id;
}
void OAIElement::setContactId(const QString &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAIElement::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAIElement::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

QString OAIElement::getCreditNoteId() const {
    return m_credit_note_id;
}
void OAIElement::setCreditNoteId(const QString &credit_note_id) {
    m_credit_note_id = credit_note_id;
    m_credit_note_id_isSet = true;
}

bool OAIElement::is_credit_note_id_Set() const{
    return m_credit_note_id_isSet;
}

bool OAIElement::is_credit_note_id_Valid() const{
    return m_credit_note_id_isValid;
}

QString OAIElement::getInvoiceId() const {
    return m_invoice_id;
}
void OAIElement::setInvoiceId(const QString &invoice_id) {
    m_invoice_id = invoice_id;
    m_invoice_id_isSet = true;
}

bool OAIElement::is_invoice_id_Set() const{
    return m_invoice_id_isSet;
}

bool OAIElement::is_invoice_id_Valid() const{
    return m_invoice_id_isValid;
}

QString OAIElement::getItemId() const {
    return m_item_id;
}
void OAIElement::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIElement::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIElement::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAIElement::getPurchaseOrderId() const {
    return m_purchase_order_id;
}
void OAIElement::setPurchaseOrderId(const QString &purchase_order_id) {
    m_purchase_order_id = purchase_order_id;
    m_purchase_order_id_isSet = true;
}

bool OAIElement::is_purchase_order_id_Set() const{
    return m_purchase_order_id_isSet;
}

bool OAIElement::is_purchase_order_id_Valid() const{
    return m_purchase_order_id_isValid;
}

QList<OAIValidationError> OAIElement::getValidationErrors() const {
    return m_validation_errors;
}
void OAIElement::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIElement::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIElement::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAIElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bank_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_note_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
