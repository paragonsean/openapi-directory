/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseOrder::OAIPurchaseOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseOrder::OAIPurchaseOrder() {
    this->initializeModel();
}

OAIPurchaseOrder::~OAIPurchaseOrder() {}

void OAIPurchaseOrder::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_attention_to_isSet = false;
    m_attention_to_isValid = false;

    m_branding_theme_id_isSet = false;
    m_branding_theme_id_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_currency_rate_isSet = false;
    m_currency_rate_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_delivery_address_isSet = false;
    m_delivery_address_isValid = false;

    m_delivery_date_isSet = false;
    m_delivery_date_isValid = false;

    m_delivery_instructions_isSet = false;
    m_delivery_instructions_isValid = false;

    m_expected_arrival_date_isSet = false;
    m_expected_arrival_date_isValid = false;

    m_has_attachments_isSet = false;
    m_has_attachments_isValid = false;

    m_line_amount_types_isSet = false;
    m_line_amount_types_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_purchase_order_id_isSet = false;
    m_purchase_order_id_isValid = false;

    m_purchase_order_number_isSet = false;
    m_purchase_order_number_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_sent_to_contact_isSet = false;
    m_sent_to_contact_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_attribute_string_isSet = false;
    m_status_attribute_string_isValid = false;

    m_sub_total_isSet = false;
    m_sub_total_isValid = false;

    m_telephone_isSet = false;
    m_telephone_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_total_discount_isSet = false;
    m_total_discount_isValid = false;

    m_total_tax_isSet = false;
    m_total_tax_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIPurchaseOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseOrder::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("Attachments")]);
    m_attachments_isSet = !json[QString("Attachments")].isNull() && m_attachments_isValid;

    m_attention_to_isValid = ::OpenAPI::fromJsonValue(m_attention_to, json[QString("AttentionTo")]);
    m_attention_to_isSet = !json[QString("AttentionTo")].isNull() && m_attention_to_isValid;

    m_branding_theme_id_isValid = ::OpenAPI::fromJsonValue(m_branding_theme_id, json[QString("BrandingThemeID")]);
    m_branding_theme_id_isSet = !json[QString("BrandingThemeID")].isNull() && m_branding_theme_id_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("Contact")]);
    m_contact_isSet = !json[QString("Contact")].isNull() && m_contact_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_currency_rate_isValid = ::OpenAPI::fromJsonValue(m_currency_rate, json[QString("CurrencyRate")]);
    m_currency_rate_isSet = !json[QString("CurrencyRate")].isNull() && m_currency_rate_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_delivery_address_isValid = ::OpenAPI::fromJsonValue(m_delivery_address, json[QString("DeliveryAddress")]);
    m_delivery_address_isSet = !json[QString("DeliveryAddress")].isNull() && m_delivery_address_isValid;

    m_delivery_date_isValid = ::OpenAPI::fromJsonValue(m_delivery_date, json[QString("DeliveryDate")]);
    m_delivery_date_isSet = !json[QString("DeliveryDate")].isNull() && m_delivery_date_isValid;

    m_delivery_instructions_isValid = ::OpenAPI::fromJsonValue(m_delivery_instructions, json[QString("DeliveryInstructions")]);
    m_delivery_instructions_isSet = !json[QString("DeliveryInstructions")].isNull() && m_delivery_instructions_isValid;

    m_expected_arrival_date_isValid = ::OpenAPI::fromJsonValue(m_expected_arrival_date, json[QString("ExpectedArrivalDate")]);
    m_expected_arrival_date_isSet = !json[QString("ExpectedArrivalDate")].isNull() && m_expected_arrival_date_isValid;

    m_has_attachments_isValid = ::OpenAPI::fromJsonValue(m_has_attachments, json[QString("HasAttachments")]);
    m_has_attachments_isSet = !json[QString("HasAttachments")].isNull() && m_has_attachments_isValid;

    m_line_amount_types_isValid = ::OpenAPI::fromJsonValue(m_line_amount_types, json[QString("LineAmountTypes")]);
    m_line_amount_types_isSet = !json[QString("LineAmountTypes")].isNull() && m_line_amount_types_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("LineItems")]);
    m_line_items_isSet = !json[QString("LineItems")].isNull() && m_line_items_isValid;

    m_purchase_order_id_isValid = ::OpenAPI::fromJsonValue(m_purchase_order_id, json[QString("PurchaseOrderID")]);
    m_purchase_order_id_isSet = !json[QString("PurchaseOrderID")].isNull() && m_purchase_order_id_isValid;

    m_purchase_order_number_isValid = ::OpenAPI::fromJsonValue(m_purchase_order_number, json[QString("PurchaseOrderNumber")]);
    m_purchase_order_number_isSet = !json[QString("PurchaseOrderNumber")].isNull() && m_purchase_order_number_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("Reference")]);
    m_reference_isSet = !json[QString("Reference")].isNull() && m_reference_isValid;

    m_sent_to_contact_isValid = ::OpenAPI::fromJsonValue(m_sent_to_contact, json[QString("SentToContact")]);
    m_sent_to_contact_isSet = !json[QString("SentToContact")].isNull() && m_sent_to_contact_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_attribute_string_isValid = ::OpenAPI::fromJsonValue(m_status_attribute_string, json[QString("StatusAttributeString")]);
    m_status_attribute_string_isSet = !json[QString("StatusAttributeString")].isNull() && m_status_attribute_string_isValid;

    m_sub_total_isValid = ::OpenAPI::fromJsonValue(m_sub_total, json[QString("SubTotal")]);
    m_sub_total_isSet = !json[QString("SubTotal")].isNull() && m_sub_total_isValid;

    m_telephone_isValid = ::OpenAPI::fromJsonValue(m_telephone, json[QString("Telephone")]);
    m_telephone_isSet = !json[QString("Telephone")].isNull() && m_telephone_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;

    m_total_discount_isValid = ::OpenAPI::fromJsonValue(m_total_discount, json[QString("TotalDiscount")]);
    m_total_discount_isSet = !json[QString("TotalDiscount")].isNull() && m_total_discount_isValid;

    m_total_tax_isValid = ::OpenAPI::fromJsonValue(m_total_tax, json[QString("TotalTax")]);
    m_total_tax_isSet = !json[QString("TotalTax")].isNull() && m_total_tax_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("Warnings")]);
    m_warnings_isSet = !json[QString("Warnings")].isNull() && m_warnings_isValid;
}

QString OAIPurchaseOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("Attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_attention_to_isSet) {
        obj.insert(QString("AttentionTo"), ::OpenAPI::toJsonValue(m_attention_to));
    }
    if (m_branding_theme_id_isSet) {
        obj.insert(QString("BrandingThemeID"), ::OpenAPI::toJsonValue(m_branding_theme_id));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("Contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_currency_code.isSet()) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_currency_rate_isSet) {
        obj.insert(QString("CurrencyRate"), ::OpenAPI::toJsonValue(m_currency_rate));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_delivery_address_isSet) {
        obj.insert(QString("DeliveryAddress"), ::OpenAPI::toJsonValue(m_delivery_address));
    }
    if (m_delivery_date_isSet) {
        obj.insert(QString("DeliveryDate"), ::OpenAPI::toJsonValue(m_delivery_date));
    }
    if (m_delivery_instructions_isSet) {
        obj.insert(QString("DeliveryInstructions"), ::OpenAPI::toJsonValue(m_delivery_instructions));
    }
    if (m_expected_arrival_date_isSet) {
        obj.insert(QString("ExpectedArrivalDate"), ::OpenAPI::toJsonValue(m_expected_arrival_date));
    }
    if (m_has_attachments_isSet) {
        obj.insert(QString("HasAttachments"), ::OpenAPI::toJsonValue(m_has_attachments));
    }
    if (m_line_amount_types.isSet()) {
        obj.insert(QString("LineAmountTypes"), ::OpenAPI::toJsonValue(m_line_amount_types));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("LineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_purchase_order_id_isSet) {
        obj.insert(QString("PurchaseOrderID"), ::OpenAPI::toJsonValue(m_purchase_order_id));
    }
    if (m_purchase_order_number_isSet) {
        obj.insert(QString("PurchaseOrderNumber"), ::OpenAPI::toJsonValue(m_purchase_order_number));
    }
    if (m_reference_isSet) {
        obj.insert(QString("Reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_sent_to_contact_isSet) {
        obj.insert(QString("SentToContact"), ::OpenAPI::toJsonValue(m_sent_to_contact));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_attribute_string_isSet) {
        obj.insert(QString("StatusAttributeString"), ::OpenAPI::toJsonValue(m_status_attribute_string));
    }
    if (m_sub_total_isSet) {
        obj.insert(QString("SubTotal"), ::OpenAPI::toJsonValue(m_sub_total));
    }
    if (m_telephone_isSet) {
        obj.insert(QString("Telephone"), ::OpenAPI::toJsonValue(m_telephone));
    }
    if (m_total_isSet) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_total_discount_isSet) {
        obj.insert(QString("TotalDiscount"), ::OpenAPI::toJsonValue(m_total_discount));
    }
    if (m_total_tax_isSet) {
        obj.insert(QString("TotalTax"), ::OpenAPI::toJsonValue(m_total_tax));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("Warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QList<OAIAttachment> OAIPurchaseOrder::getAttachments() const {
    return m_attachments;
}
void OAIPurchaseOrder::setAttachments(const QList<OAIAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIPurchaseOrder::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIPurchaseOrder::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIPurchaseOrder::getAttentionTo() const {
    return m_attention_to;
}
void OAIPurchaseOrder::setAttentionTo(const QString &attention_to) {
    m_attention_to = attention_to;
    m_attention_to_isSet = true;
}

bool OAIPurchaseOrder::is_attention_to_Set() const{
    return m_attention_to_isSet;
}

bool OAIPurchaseOrder::is_attention_to_Valid() const{
    return m_attention_to_isValid;
}

QString OAIPurchaseOrder::getBrandingThemeId() const {
    return m_branding_theme_id;
}
void OAIPurchaseOrder::setBrandingThemeId(const QString &branding_theme_id) {
    m_branding_theme_id = branding_theme_id;
    m_branding_theme_id_isSet = true;
}

bool OAIPurchaseOrder::is_branding_theme_id_Set() const{
    return m_branding_theme_id_isSet;
}

bool OAIPurchaseOrder::is_branding_theme_id_Valid() const{
    return m_branding_theme_id_isValid;
}

OAIContact OAIPurchaseOrder::getContact() const {
    return m_contact;
}
void OAIPurchaseOrder::setContact(const OAIContact &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIPurchaseOrder::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIPurchaseOrder::is_contact_Valid() const{
    return m_contact_isValid;
}

OAICurrencyCode OAIPurchaseOrder::getCurrencyCode() const {
    return m_currency_code;
}
void OAIPurchaseOrder::setCurrencyCode(const OAICurrencyCode &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIPurchaseOrder::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIPurchaseOrder::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

double OAIPurchaseOrder::getCurrencyRate() const {
    return m_currency_rate;
}
void OAIPurchaseOrder::setCurrencyRate(const double &currency_rate) {
    m_currency_rate = currency_rate;
    m_currency_rate_isSet = true;
}

bool OAIPurchaseOrder::is_currency_rate_Set() const{
    return m_currency_rate_isSet;
}

bool OAIPurchaseOrder::is_currency_rate_Valid() const{
    return m_currency_rate_isValid;
}

QString OAIPurchaseOrder::getDate() const {
    return m_date;
}
void OAIPurchaseOrder::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIPurchaseOrder::is_date_Set() const{
    return m_date_isSet;
}

bool OAIPurchaseOrder::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIPurchaseOrder::getDeliveryAddress() const {
    return m_delivery_address;
}
void OAIPurchaseOrder::setDeliveryAddress(const QString &delivery_address) {
    m_delivery_address = delivery_address;
    m_delivery_address_isSet = true;
}

bool OAIPurchaseOrder::is_delivery_address_Set() const{
    return m_delivery_address_isSet;
}

bool OAIPurchaseOrder::is_delivery_address_Valid() const{
    return m_delivery_address_isValid;
}

QString OAIPurchaseOrder::getDeliveryDate() const {
    return m_delivery_date;
}
void OAIPurchaseOrder::setDeliveryDate(const QString &delivery_date) {
    m_delivery_date = delivery_date;
    m_delivery_date_isSet = true;
}

bool OAIPurchaseOrder::is_delivery_date_Set() const{
    return m_delivery_date_isSet;
}

bool OAIPurchaseOrder::is_delivery_date_Valid() const{
    return m_delivery_date_isValid;
}

QString OAIPurchaseOrder::getDeliveryInstructions() const {
    return m_delivery_instructions;
}
void OAIPurchaseOrder::setDeliveryInstructions(const QString &delivery_instructions) {
    m_delivery_instructions = delivery_instructions;
    m_delivery_instructions_isSet = true;
}

bool OAIPurchaseOrder::is_delivery_instructions_Set() const{
    return m_delivery_instructions_isSet;
}

bool OAIPurchaseOrder::is_delivery_instructions_Valid() const{
    return m_delivery_instructions_isValid;
}

QString OAIPurchaseOrder::getExpectedArrivalDate() const {
    return m_expected_arrival_date;
}
void OAIPurchaseOrder::setExpectedArrivalDate(const QString &expected_arrival_date) {
    m_expected_arrival_date = expected_arrival_date;
    m_expected_arrival_date_isSet = true;
}

bool OAIPurchaseOrder::is_expected_arrival_date_Set() const{
    return m_expected_arrival_date_isSet;
}

bool OAIPurchaseOrder::is_expected_arrival_date_Valid() const{
    return m_expected_arrival_date_isValid;
}

bool OAIPurchaseOrder::isHasAttachments() const {
    return m_has_attachments;
}
void OAIPurchaseOrder::setHasAttachments(const bool &has_attachments) {
    m_has_attachments = has_attachments;
    m_has_attachments_isSet = true;
}

bool OAIPurchaseOrder::is_has_attachments_Set() const{
    return m_has_attachments_isSet;
}

bool OAIPurchaseOrder::is_has_attachments_Valid() const{
    return m_has_attachments_isValid;
}

OAILineAmountTypes OAIPurchaseOrder::getLineAmountTypes() const {
    return m_line_amount_types;
}
void OAIPurchaseOrder::setLineAmountTypes(const OAILineAmountTypes &line_amount_types) {
    m_line_amount_types = line_amount_types;
    m_line_amount_types_isSet = true;
}

bool OAIPurchaseOrder::is_line_amount_types_Set() const{
    return m_line_amount_types_isSet;
}

bool OAIPurchaseOrder::is_line_amount_types_Valid() const{
    return m_line_amount_types_isValid;
}

QList<OAILineItem> OAIPurchaseOrder::getLineItems() const {
    return m_line_items;
}
void OAIPurchaseOrder::setLineItems(const QList<OAILineItem> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIPurchaseOrder::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIPurchaseOrder::is_line_items_Valid() const{
    return m_line_items_isValid;
}

QString OAIPurchaseOrder::getPurchaseOrderId() const {
    return m_purchase_order_id;
}
void OAIPurchaseOrder::setPurchaseOrderId(const QString &purchase_order_id) {
    m_purchase_order_id = purchase_order_id;
    m_purchase_order_id_isSet = true;
}

bool OAIPurchaseOrder::is_purchase_order_id_Set() const{
    return m_purchase_order_id_isSet;
}

bool OAIPurchaseOrder::is_purchase_order_id_Valid() const{
    return m_purchase_order_id_isValid;
}

QString OAIPurchaseOrder::getPurchaseOrderNumber() const {
    return m_purchase_order_number;
}
void OAIPurchaseOrder::setPurchaseOrderNumber(const QString &purchase_order_number) {
    m_purchase_order_number = purchase_order_number;
    m_purchase_order_number_isSet = true;
}

bool OAIPurchaseOrder::is_purchase_order_number_Set() const{
    return m_purchase_order_number_isSet;
}

bool OAIPurchaseOrder::is_purchase_order_number_Valid() const{
    return m_purchase_order_number_isValid;
}

QString OAIPurchaseOrder::getReference() const {
    return m_reference;
}
void OAIPurchaseOrder::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIPurchaseOrder::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIPurchaseOrder::is_reference_Valid() const{
    return m_reference_isValid;
}

bool OAIPurchaseOrder::isSentToContact() const {
    return m_sent_to_contact;
}
void OAIPurchaseOrder::setSentToContact(const bool &sent_to_contact) {
    m_sent_to_contact = sent_to_contact;
    m_sent_to_contact_isSet = true;
}

bool OAIPurchaseOrder::is_sent_to_contact_Set() const{
    return m_sent_to_contact_isSet;
}

bool OAIPurchaseOrder::is_sent_to_contact_Valid() const{
    return m_sent_to_contact_isValid;
}

QString OAIPurchaseOrder::getStatus() const {
    return m_status;
}
void OAIPurchaseOrder::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPurchaseOrder::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPurchaseOrder::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPurchaseOrder::getStatusAttributeString() const {
    return m_status_attribute_string;
}
void OAIPurchaseOrder::setStatusAttributeString(const QString &status_attribute_string) {
    m_status_attribute_string = status_attribute_string;
    m_status_attribute_string_isSet = true;
}

bool OAIPurchaseOrder::is_status_attribute_string_Set() const{
    return m_status_attribute_string_isSet;
}

bool OAIPurchaseOrder::is_status_attribute_string_Valid() const{
    return m_status_attribute_string_isValid;
}

double OAIPurchaseOrder::getSubTotal() const {
    return m_sub_total;
}
void OAIPurchaseOrder::setSubTotal(const double &sub_total) {
    m_sub_total = sub_total;
    m_sub_total_isSet = true;
}

bool OAIPurchaseOrder::is_sub_total_Set() const{
    return m_sub_total_isSet;
}

bool OAIPurchaseOrder::is_sub_total_Valid() const{
    return m_sub_total_isValid;
}

QString OAIPurchaseOrder::getTelephone() const {
    return m_telephone;
}
void OAIPurchaseOrder::setTelephone(const QString &telephone) {
    m_telephone = telephone;
    m_telephone_isSet = true;
}

bool OAIPurchaseOrder::is_telephone_Set() const{
    return m_telephone_isSet;
}

bool OAIPurchaseOrder::is_telephone_Valid() const{
    return m_telephone_isValid;
}

double OAIPurchaseOrder::getTotal() const {
    return m_total;
}
void OAIPurchaseOrder::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIPurchaseOrder::is_total_Set() const{
    return m_total_isSet;
}

bool OAIPurchaseOrder::is_total_Valid() const{
    return m_total_isValid;
}

double OAIPurchaseOrder::getTotalDiscount() const {
    return m_total_discount;
}
void OAIPurchaseOrder::setTotalDiscount(const double &total_discount) {
    m_total_discount = total_discount;
    m_total_discount_isSet = true;
}

bool OAIPurchaseOrder::is_total_discount_Set() const{
    return m_total_discount_isSet;
}

bool OAIPurchaseOrder::is_total_discount_Valid() const{
    return m_total_discount_isValid;
}

double OAIPurchaseOrder::getTotalTax() const {
    return m_total_tax;
}
void OAIPurchaseOrder::setTotalTax(const double &total_tax) {
    m_total_tax = total_tax;
    m_total_tax_isSet = true;
}

bool OAIPurchaseOrder::is_total_tax_Set() const{
    return m_total_tax_isSet;
}

bool OAIPurchaseOrder::is_total_tax_Valid() const{
    return m_total_tax_isValid;
}

QString OAIPurchaseOrder::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIPurchaseOrder::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIPurchaseOrder::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIPurchaseOrder::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

QList<OAIValidationError> OAIPurchaseOrder::getValidationErrors() const {
    return m_validation_errors;
}
void OAIPurchaseOrder::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIPurchaseOrder::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIPurchaseOrder::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

QList<OAIValidationError> OAIPurchaseOrder::getWarnings() const {
    return m_warnings;
}
void OAIPurchaseOrder::setWarnings(const QList<OAIValidationError> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIPurchaseOrder::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIPurchaseOrder::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIPurchaseOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attention_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branding_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_arrival_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_amount_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_order_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_to_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_attribute_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
