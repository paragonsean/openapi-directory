/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportRows.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportRows::OAIReportRows(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportRows::OAIReportRows() {
    this->initializeModel();
}

OAIReportRows::~OAIReportRows() {}

void OAIReportRows::initializeModel() {

    m_cells_isSet = false;
    m_cells_isValid = false;

    m_row_type_isSet = false;
    m_row_type_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIReportRows::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportRows::fromJsonObject(QJsonObject json) {

    m_cells_isValid = ::OpenAPI::fromJsonValue(m_cells, json[QString("Cells")]);
    m_cells_isSet = !json[QString("Cells")].isNull() && m_cells_isValid;

    m_row_type_isValid = ::OpenAPI::fromJsonValue(m_row_type, json[QString("RowType")]);
    m_row_type_isSet = !json[QString("RowType")].isNull() && m_row_type_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("Rows")]);
    m_rows_isSet = !json[QString("Rows")].isNull() && m_rows_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;
}

QString OAIReportRows::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportRows::asJsonObject() const {
    QJsonObject obj;
    if (m_cells.size() > 0) {
        obj.insert(QString("Cells"), ::OpenAPI::toJsonValue(m_cells));
    }
    if (m_row_type.isSet()) {
        obj.insert(QString("RowType"), ::OpenAPI::toJsonValue(m_row_type));
    }
    if (m_rows.size() > 0) {
        obj.insert(QString("Rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAIReportCell> OAIReportRows::getCells() const {
    return m_cells;
}
void OAIReportRows::setCells(const QList<OAIReportCell> &cells) {
    m_cells = cells;
    m_cells_isSet = true;
}

bool OAIReportRows::is_cells_Set() const{
    return m_cells_isSet;
}

bool OAIReportRows::is_cells_Valid() const{
    return m_cells_isValid;
}

OAIRowType OAIReportRows::getRowType() const {
    return m_row_type;
}
void OAIReportRows::setRowType(const OAIRowType &row_type) {
    m_row_type = row_type;
    m_row_type_isSet = true;
}

bool OAIReportRows::is_row_type_Set() const{
    return m_row_type_isSet;
}

bool OAIReportRows::is_row_type_Valid() const{
    return m_row_type_isValid;
}

QList<OAIReportRow> OAIReportRows::getRows() const {
    return m_rows;
}
void OAIReportRows::setRows(const QList<OAIReportRow> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIReportRows::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIReportRows::is_rows_Valid() const{
    return m_rows_isValid;
}

QString OAIReportRows::getTitle() const {
    return m_title;
}
void OAIReportRows::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIReportRows::is_title_Set() const{
    return m_title_isSet;
}

bool OAIReportRows::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIReportRows::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cells.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportRows::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
