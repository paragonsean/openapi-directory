/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkedTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkedTransaction::OAILinkedTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkedTransaction::OAILinkedTransaction() {
    this->initializeModel();
}

OAILinkedTransaction::~OAILinkedTransaction() {}

void OAILinkedTransaction::initializeModel() {

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_linked_transaction_id_isSet = false;
    m_linked_transaction_id_isValid = false;

    m_source_line_item_id_isSet = false;
    m_source_line_item_id_isValid = false;

    m_source_transaction_id_isSet = false;
    m_source_transaction_id_isValid = false;

    m_source_transaction_type_code_isSet = false;
    m_source_transaction_type_code_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_line_item_id_isSet = false;
    m_target_line_item_id_isValid = false;

    m_target_transaction_id_isSet = false;
    m_target_transaction_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAILinkedTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinkedTransaction::fromJsonObject(QJsonObject json) {

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("ContactID")]);
    m_contact_id_isSet = !json[QString("ContactID")].isNull() && m_contact_id_isValid;

    m_linked_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_linked_transaction_id, json[QString("LinkedTransactionID")]);
    m_linked_transaction_id_isSet = !json[QString("LinkedTransactionID")].isNull() && m_linked_transaction_id_isValid;

    m_source_line_item_id_isValid = ::OpenAPI::fromJsonValue(m_source_line_item_id, json[QString("SourceLineItemID")]);
    m_source_line_item_id_isSet = !json[QString("SourceLineItemID")].isNull() && m_source_line_item_id_isValid;

    m_source_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_source_transaction_id, json[QString("SourceTransactionID")]);
    m_source_transaction_id_isSet = !json[QString("SourceTransactionID")].isNull() && m_source_transaction_id_isValid;

    m_source_transaction_type_code_isValid = ::OpenAPI::fromJsonValue(m_source_transaction_type_code, json[QString("SourceTransactionTypeCode")]);
    m_source_transaction_type_code_isSet = !json[QString("SourceTransactionTypeCode")].isNull() && m_source_transaction_type_code_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_target_line_item_id_isValid = ::OpenAPI::fromJsonValue(m_target_line_item_id, json[QString("TargetLineItemID")]);
    m_target_line_item_id_isSet = !json[QString("TargetLineItemID")].isNull() && m_target_line_item_id_isValid;

    m_target_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_target_transaction_id, json[QString("TargetTransactionID")]);
    m_target_transaction_id_isSet = !json[QString("TargetTransactionID")].isNull() && m_target_transaction_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;
}

QString OAILinkedTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinkedTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_id_isSet) {
        obj.insert(QString("ContactID"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_linked_transaction_id_isSet) {
        obj.insert(QString("LinkedTransactionID"), ::OpenAPI::toJsonValue(m_linked_transaction_id));
    }
    if (m_source_line_item_id_isSet) {
        obj.insert(QString("SourceLineItemID"), ::OpenAPI::toJsonValue(m_source_line_item_id));
    }
    if (m_source_transaction_id_isSet) {
        obj.insert(QString("SourceTransactionID"), ::OpenAPI::toJsonValue(m_source_transaction_id));
    }
    if (m_source_transaction_type_code_isSet) {
        obj.insert(QString("SourceTransactionTypeCode"), ::OpenAPI::toJsonValue(m_source_transaction_type_code));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_line_item_id_isSet) {
        obj.insert(QString("TargetLineItemID"), ::OpenAPI::toJsonValue(m_target_line_item_id));
    }
    if (m_target_transaction_id_isSet) {
        obj.insert(QString("TargetTransactionID"), ::OpenAPI::toJsonValue(m_target_transaction_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

QString OAILinkedTransaction::getContactId() const {
    return m_contact_id;
}
void OAILinkedTransaction::setContactId(const QString &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAILinkedTransaction::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAILinkedTransaction::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

QString OAILinkedTransaction::getLinkedTransactionId() const {
    return m_linked_transaction_id;
}
void OAILinkedTransaction::setLinkedTransactionId(const QString &linked_transaction_id) {
    m_linked_transaction_id = linked_transaction_id;
    m_linked_transaction_id_isSet = true;
}

bool OAILinkedTransaction::is_linked_transaction_id_Set() const{
    return m_linked_transaction_id_isSet;
}

bool OAILinkedTransaction::is_linked_transaction_id_Valid() const{
    return m_linked_transaction_id_isValid;
}

QString OAILinkedTransaction::getSourceLineItemId() const {
    return m_source_line_item_id;
}
void OAILinkedTransaction::setSourceLineItemId(const QString &source_line_item_id) {
    m_source_line_item_id = source_line_item_id;
    m_source_line_item_id_isSet = true;
}

bool OAILinkedTransaction::is_source_line_item_id_Set() const{
    return m_source_line_item_id_isSet;
}

bool OAILinkedTransaction::is_source_line_item_id_Valid() const{
    return m_source_line_item_id_isValid;
}

QString OAILinkedTransaction::getSourceTransactionId() const {
    return m_source_transaction_id;
}
void OAILinkedTransaction::setSourceTransactionId(const QString &source_transaction_id) {
    m_source_transaction_id = source_transaction_id;
    m_source_transaction_id_isSet = true;
}

bool OAILinkedTransaction::is_source_transaction_id_Set() const{
    return m_source_transaction_id_isSet;
}

bool OAILinkedTransaction::is_source_transaction_id_Valid() const{
    return m_source_transaction_id_isValid;
}

QString OAILinkedTransaction::getSourceTransactionTypeCode() const {
    return m_source_transaction_type_code;
}
void OAILinkedTransaction::setSourceTransactionTypeCode(const QString &source_transaction_type_code) {
    m_source_transaction_type_code = source_transaction_type_code;
    m_source_transaction_type_code_isSet = true;
}

bool OAILinkedTransaction::is_source_transaction_type_code_Set() const{
    return m_source_transaction_type_code_isSet;
}

bool OAILinkedTransaction::is_source_transaction_type_code_Valid() const{
    return m_source_transaction_type_code_isValid;
}

QString OAILinkedTransaction::getStatus() const {
    return m_status;
}
void OAILinkedTransaction::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILinkedTransaction::is_status_Set() const{
    return m_status_isSet;
}

bool OAILinkedTransaction::is_status_Valid() const{
    return m_status_isValid;
}

QString OAILinkedTransaction::getTargetLineItemId() const {
    return m_target_line_item_id;
}
void OAILinkedTransaction::setTargetLineItemId(const QString &target_line_item_id) {
    m_target_line_item_id = target_line_item_id;
    m_target_line_item_id_isSet = true;
}

bool OAILinkedTransaction::is_target_line_item_id_Set() const{
    return m_target_line_item_id_isSet;
}

bool OAILinkedTransaction::is_target_line_item_id_Valid() const{
    return m_target_line_item_id_isValid;
}

QString OAILinkedTransaction::getTargetTransactionId() const {
    return m_target_transaction_id;
}
void OAILinkedTransaction::setTargetTransactionId(const QString &target_transaction_id) {
    m_target_transaction_id = target_transaction_id;
    m_target_transaction_id_isSet = true;
}

bool OAILinkedTransaction::is_target_transaction_id_Set() const{
    return m_target_transaction_id_isSet;
}

bool OAILinkedTransaction::is_target_transaction_id_Valid() const{
    return m_target_transaction_id_isValid;
}

QString OAILinkedTransaction::getType() const {
    return m_type;
}
void OAILinkedTransaction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILinkedTransaction::is_type_Set() const{
    return m_type_isSet;
}

bool OAILinkedTransaction::is_type_Valid() const{
    return m_type_isValid;
}

QString OAILinkedTransaction::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAILinkedTransaction::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAILinkedTransaction::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAILinkedTransaction::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

QList<OAIValidationError> OAILinkedTransaction::getValidationErrors() const {
    return m_validation_errors;
}
void OAILinkedTransaction::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAILinkedTransaction::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAILinkedTransaction::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAILinkedTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_line_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_transaction_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_line_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinkedTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
