/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganisation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganisation::OAIOrganisation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganisation::OAIOrganisation() {
    this->initializeModel();
}

OAIOrganisation::~OAIOrganisation() {}

void OAIOrganisation::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_addresses_isSet = false;
    m_addresses_isValid = false;

    m_base_currency_isSet = false;
    m_base_currency_isValid = false;

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_created_date_utc_isSet = false;
    m_created_date_utc_isValid = false;

    m_default_purchases_tax_isSet = false;
    m_default_purchases_tax_isValid = false;

    m_default_sales_tax_isSet = false;
    m_default_sales_tax_isValid = false;

    m_edition_isSet = false;
    m_edition_isValid = false;

    m_employer_identification_number_isSet = false;
    m_employer_identification_number_isValid = false;

    m_end_of_year_lock_date_isSet = false;
    m_end_of_year_lock_date_isValid = false;

    m_external_links_isSet = false;
    m_external_links_isValid = false;

    m_financial_year_end_day_isSet = false;
    m_financial_year_end_day_isValid = false;

    m_financial_year_end_month_isSet = false;
    m_financial_year_end_month_isValid = false;

    m_is_demo_company_isSet = false;
    m_is_demo_company_isValid = false;

    m_legal_name_isSet = false;
    m_legal_name_isValid = false;

    m_line_of_business_isSet = false;
    m_line_of_business_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organisation_entity_type_isSet = false;
    m_organisation_entity_type_isValid = false;

    m_organisation_id_isSet = false;
    m_organisation_id_isValid = false;

    m_organisation_status_isSet = false;
    m_organisation_status_isValid = false;

    m_organisation_type_isSet = false;
    m_organisation_type_isValid = false;

    m_payment_terms_isSet = false;
    m_payment_terms_isValid = false;

    m_pays_tax_isSet = false;
    m_pays_tax_isValid = false;

    m_period_lock_date_isSet = false;
    m_period_lock_date_isValid = false;

    m_phones_isSet = false;
    m_phones_isValid = false;

    m_registration_number_isSet = false;
    m_registration_number_isValid = false;

    m_sales_tax_basis_isSet = false;
    m_sales_tax_basis_isValid = false;

    m_sales_tax_period_isSet = false;
    m_sales_tax_period_isValid = false;

    m_short_code_isSet = false;
    m_short_code_isValid = false;

    m_tax_number_isSet = false;
    m_tax_number_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIOrganisation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganisation::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("APIKey")]);
    m_api_key_isSet = !json[QString("APIKey")].isNull() && m_api_key_isValid;

    m_addresses_isValid = ::OpenAPI::fromJsonValue(m_addresses, json[QString("Addresses")]);
    m_addresses_isSet = !json[QString("Addresses")].isNull() && m_addresses_isValid;

    m_base_currency_isValid = ::OpenAPI::fromJsonValue(m_base_currency, json[QString("BaseCurrency")]);
    m_base_currency_isSet = !json[QString("BaseCurrency")].isNull() && m_base_currency_isValid;

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("Class")]);
    m_r_class_isSet = !json[QString("Class")].isNull() && m_r_class_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("CountryCode")]);
    m_country_code_isSet = !json[QString("CountryCode")].isNull() && m_country_code_isValid;

    m_created_date_utc_isValid = ::OpenAPI::fromJsonValue(m_created_date_utc, json[QString("CreatedDateUTC")]);
    m_created_date_utc_isSet = !json[QString("CreatedDateUTC")].isNull() && m_created_date_utc_isValid;

    m_default_purchases_tax_isValid = ::OpenAPI::fromJsonValue(m_default_purchases_tax, json[QString("DefaultPurchasesTax")]);
    m_default_purchases_tax_isSet = !json[QString("DefaultPurchasesTax")].isNull() && m_default_purchases_tax_isValid;

    m_default_sales_tax_isValid = ::OpenAPI::fromJsonValue(m_default_sales_tax, json[QString("DefaultSalesTax")]);
    m_default_sales_tax_isSet = !json[QString("DefaultSalesTax")].isNull() && m_default_sales_tax_isValid;

    m_edition_isValid = ::OpenAPI::fromJsonValue(m_edition, json[QString("Edition")]);
    m_edition_isSet = !json[QString("Edition")].isNull() && m_edition_isValid;

    m_employer_identification_number_isValid = ::OpenAPI::fromJsonValue(m_employer_identification_number, json[QString("EmployerIdentificationNumber")]);
    m_employer_identification_number_isSet = !json[QString("EmployerIdentificationNumber")].isNull() && m_employer_identification_number_isValid;

    m_end_of_year_lock_date_isValid = ::OpenAPI::fromJsonValue(m_end_of_year_lock_date, json[QString("EndOfYearLockDate")]);
    m_end_of_year_lock_date_isSet = !json[QString("EndOfYearLockDate")].isNull() && m_end_of_year_lock_date_isValid;

    m_external_links_isValid = ::OpenAPI::fromJsonValue(m_external_links, json[QString("ExternalLinks")]);
    m_external_links_isSet = !json[QString("ExternalLinks")].isNull() && m_external_links_isValid;

    m_financial_year_end_day_isValid = ::OpenAPI::fromJsonValue(m_financial_year_end_day, json[QString("FinancialYearEndDay")]);
    m_financial_year_end_day_isSet = !json[QString("FinancialYearEndDay")].isNull() && m_financial_year_end_day_isValid;

    m_financial_year_end_month_isValid = ::OpenAPI::fromJsonValue(m_financial_year_end_month, json[QString("FinancialYearEndMonth")]);
    m_financial_year_end_month_isSet = !json[QString("FinancialYearEndMonth")].isNull() && m_financial_year_end_month_isValid;

    m_is_demo_company_isValid = ::OpenAPI::fromJsonValue(m_is_demo_company, json[QString("IsDemoCompany")]);
    m_is_demo_company_isSet = !json[QString("IsDemoCompany")].isNull() && m_is_demo_company_isValid;

    m_legal_name_isValid = ::OpenAPI::fromJsonValue(m_legal_name, json[QString("LegalName")]);
    m_legal_name_isSet = !json[QString("LegalName")].isNull() && m_legal_name_isValid;

    m_line_of_business_isValid = ::OpenAPI::fromJsonValue(m_line_of_business, json[QString("LineOfBusiness")]);
    m_line_of_business_isSet = !json[QString("LineOfBusiness")].isNull() && m_line_of_business_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_organisation_entity_type_isValid = ::OpenAPI::fromJsonValue(m_organisation_entity_type, json[QString("OrganisationEntityType")]);
    m_organisation_entity_type_isSet = !json[QString("OrganisationEntityType")].isNull() && m_organisation_entity_type_isValid;

    m_organisation_id_isValid = ::OpenAPI::fromJsonValue(m_organisation_id, json[QString("OrganisationID")]);
    m_organisation_id_isSet = !json[QString("OrganisationID")].isNull() && m_organisation_id_isValid;

    m_organisation_status_isValid = ::OpenAPI::fromJsonValue(m_organisation_status, json[QString("OrganisationStatus")]);
    m_organisation_status_isSet = !json[QString("OrganisationStatus")].isNull() && m_organisation_status_isValid;

    m_organisation_type_isValid = ::OpenAPI::fromJsonValue(m_organisation_type, json[QString("OrganisationType")]);
    m_organisation_type_isSet = !json[QString("OrganisationType")].isNull() && m_organisation_type_isValid;

    m_payment_terms_isValid = ::OpenAPI::fromJsonValue(m_payment_terms, json[QString("PaymentTerms")]);
    m_payment_terms_isSet = !json[QString("PaymentTerms")].isNull() && m_payment_terms_isValid;

    m_pays_tax_isValid = ::OpenAPI::fromJsonValue(m_pays_tax, json[QString("PaysTax")]);
    m_pays_tax_isSet = !json[QString("PaysTax")].isNull() && m_pays_tax_isValid;

    m_period_lock_date_isValid = ::OpenAPI::fromJsonValue(m_period_lock_date, json[QString("PeriodLockDate")]);
    m_period_lock_date_isSet = !json[QString("PeriodLockDate")].isNull() && m_period_lock_date_isValid;

    m_phones_isValid = ::OpenAPI::fromJsonValue(m_phones, json[QString("Phones")]);
    m_phones_isSet = !json[QString("Phones")].isNull() && m_phones_isValid;

    m_registration_number_isValid = ::OpenAPI::fromJsonValue(m_registration_number, json[QString("RegistrationNumber")]);
    m_registration_number_isSet = !json[QString("RegistrationNumber")].isNull() && m_registration_number_isValid;

    m_sales_tax_basis_isValid = ::OpenAPI::fromJsonValue(m_sales_tax_basis, json[QString("SalesTaxBasis")]);
    m_sales_tax_basis_isSet = !json[QString("SalesTaxBasis")].isNull() && m_sales_tax_basis_isValid;

    m_sales_tax_period_isValid = ::OpenAPI::fromJsonValue(m_sales_tax_period, json[QString("SalesTaxPeriod")]);
    m_sales_tax_period_isSet = !json[QString("SalesTaxPeriod")].isNull() && m_sales_tax_period_isValid;

    m_short_code_isValid = ::OpenAPI::fromJsonValue(m_short_code, json[QString("ShortCode")]);
    m_short_code_isSet = !json[QString("ShortCode")].isNull() && m_short_code_isValid;

    m_tax_number_isValid = ::OpenAPI::fromJsonValue(m_tax_number, json[QString("TaxNumber")]);
    m_tax_number_isSet = !json[QString("TaxNumber")].isNull() && m_tax_number_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("Timezone")]);
    m_timezone_isSet = !json[QString("Timezone")].isNull() && m_timezone_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIOrganisation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganisation::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_isSet) {
        obj.insert(QString("APIKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_addresses.size() > 0) {
        obj.insert(QString("Addresses"), ::OpenAPI::toJsonValue(m_addresses));
    }
    if (m_base_currency.isSet()) {
        obj.insert(QString("BaseCurrency"), ::OpenAPI::toJsonValue(m_base_currency));
    }
    if (m_r_class_isSet) {
        obj.insert(QString("Class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m_country_code.isSet()) {
        obj.insert(QString("CountryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_created_date_utc_isSet) {
        obj.insert(QString("CreatedDateUTC"), ::OpenAPI::toJsonValue(m_created_date_utc));
    }
    if (m_default_purchases_tax_isSet) {
        obj.insert(QString("DefaultPurchasesTax"), ::OpenAPI::toJsonValue(m_default_purchases_tax));
    }
    if (m_default_sales_tax_isSet) {
        obj.insert(QString("DefaultSalesTax"), ::OpenAPI::toJsonValue(m_default_sales_tax));
    }
    if (m_edition_isSet) {
        obj.insert(QString("Edition"), ::OpenAPI::toJsonValue(m_edition));
    }
    if (m_employer_identification_number_isSet) {
        obj.insert(QString("EmployerIdentificationNumber"), ::OpenAPI::toJsonValue(m_employer_identification_number));
    }
    if (m_end_of_year_lock_date_isSet) {
        obj.insert(QString("EndOfYearLockDate"), ::OpenAPI::toJsonValue(m_end_of_year_lock_date));
    }
    if (m_external_links.size() > 0) {
        obj.insert(QString("ExternalLinks"), ::OpenAPI::toJsonValue(m_external_links));
    }
    if (m_financial_year_end_day_isSet) {
        obj.insert(QString("FinancialYearEndDay"), ::OpenAPI::toJsonValue(m_financial_year_end_day));
    }
    if (m_financial_year_end_month_isSet) {
        obj.insert(QString("FinancialYearEndMonth"), ::OpenAPI::toJsonValue(m_financial_year_end_month));
    }
    if (m_is_demo_company_isSet) {
        obj.insert(QString("IsDemoCompany"), ::OpenAPI::toJsonValue(m_is_demo_company));
    }
    if (m_legal_name_isSet) {
        obj.insert(QString("LegalName"), ::OpenAPI::toJsonValue(m_legal_name));
    }
    if (m_line_of_business_isSet) {
        obj.insert(QString("LineOfBusiness"), ::OpenAPI::toJsonValue(m_line_of_business));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organisation_entity_type_isSet) {
        obj.insert(QString("OrganisationEntityType"), ::OpenAPI::toJsonValue(m_organisation_entity_type));
    }
    if (m_organisation_id_isSet) {
        obj.insert(QString("OrganisationID"), ::OpenAPI::toJsonValue(m_organisation_id));
    }
    if (m_organisation_status_isSet) {
        obj.insert(QString("OrganisationStatus"), ::OpenAPI::toJsonValue(m_organisation_status));
    }
    if (m_organisation_type_isSet) {
        obj.insert(QString("OrganisationType"), ::OpenAPI::toJsonValue(m_organisation_type));
    }
    if (m_payment_terms.isSet()) {
        obj.insert(QString("PaymentTerms"), ::OpenAPI::toJsonValue(m_payment_terms));
    }
    if (m_pays_tax_isSet) {
        obj.insert(QString("PaysTax"), ::OpenAPI::toJsonValue(m_pays_tax));
    }
    if (m_period_lock_date_isSet) {
        obj.insert(QString("PeriodLockDate"), ::OpenAPI::toJsonValue(m_period_lock_date));
    }
    if (m_phones.size() > 0) {
        obj.insert(QString("Phones"), ::OpenAPI::toJsonValue(m_phones));
    }
    if (m_registration_number_isSet) {
        obj.insert(QString("RegistrationNumber"), ::OpenAPI::toJsonValue(m_registration_number));
    }
    if (m_sales_tax_basis_isSet) {
        obj.insert(QString("SalesTaxBasis"), ::OpenAPI::toJsonValue(m_sales_tax_basis));
    }
    if (m_sales_tax_period_isSet) {
        obj.insert(QString("SalesTaxPeriod"), ::OpenAPI::toJsonValue(m_sales_tax_period));
    }
    if (m_short_code_isSet) {
        obj.insert(QString("ShortCode"), ::OpenAPI::toJsonValue(m_short_code));
    }
    if (m_tax_number_isSet) {
        obj.insert(QString("TaxNumber"), ::OpenAPI::toJsonValue(m_tax_number));
    }
    if (m_timezone.isSet()) {
        obj.insert(QString("Timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIOrganisation::getApiKey() const {
    return m_api_key;
}
void OAIOrganisation::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIOrganisation::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIOrganisation::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QList<OAIAddressForOrganisation> OAIOrganisation::getAddresses() const {
    return m_addresses;
}
void OAIOrganisation::setAddresses(const QList<OAIAddressForOrganisation> &addresses) {
    m_addresses = addresses;
    m_addresses_isSet = true;
}

bool OAIOrganisation::is_addresses_Set() const{
    return m_addresses_isSet;
}

bool OAIOrganisation::is_addresses_Valid() const{
    return m_addresses_isValid;
}

OAICurrencyCode OAIOrganisation::getBaseCurrency() const {
    return m_base_currency;
}
void OAIOrganisation::setBaseCurrency(const OAICurrencyCode &base_currency) {
    m_base_currency = base_currency;
    m_base_currency_isSet = true;
}

bool OAIOrganisation::is_base_currency_Set() const{
    return m_base_currency_isSet;
}

bool OAIOrganisation::is_base_currency_Valid() const{
    return m_base_currency_isValid;
}

QString OAIOrganisation::getRClass() const {
    return m_r_class;
}
void OAIOrganisation::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAIOrganisation::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAIOrganisation::is_r_class_Valid() const{
    return m_r_class_isValid;
}

OAICountryCode OAIOrganisation::getCountryCode() const {
    return m_country_code;
}
void OAIOrganisation::setCountryCode(const OAICountryCode &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIOrganisation::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIOrganisation::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIOrganisation::getCreatedDateUtc() const {
    return m_created_date_utc;
}
void OAIOrganisation::setCreatedDateUtc(const QString &created_date_utc) {
    m_created_date_utc = created_date_utc;
    m_created_date_utc_isSet = true;
}

bool OAIOrganisation::is_created_date_utc_Set() const{
    return m_created_date_utc_isSet;
}

bool OAIOrganisation::is_created_date_utc_Valid() const{
    return m_created_date_utc_isValid;
}

QString OAIOrganisation::getDefaultPurchasesTax() const {
    return m_default_purchases_tax;
}
void OAIOrganisation::setDefaultPurchasesTax(const QString &default_purchases_tax) {
    m_default_purchases_tax = default_purchases_tax;
    m_default_purchases_tax_isSet = true;
}

bool OAIOrganisation::is_default_purchases_tax_Set() const{
    return m_default_purchases_tax_isSet;
}

bool OAIOrganisation::is_default_purchases_tax_Valid() const{
    return m_default_purchases_tax_isValid;
}

QString OAIOrganisation::getDefaultSalesTax() const {
    return m_default_sales_tax;
}
void OAIOrganisation::setDefaultSalesTax(const QString &default_sales_tax) {
    m_default_sales_tax = default_sales_tax;
    m_default_sales_tax_isSet = true;
}

bool OAIOrganisation::is_default_sales_tax_Set() const{
    return m_default_sales_tax_isSet;
}

bool OAIOrganisation::is_default_sales_tax_Valid() const{
    return m_default_sales_tax_isValid;
}

QString OAIOrganisation::getEdition() const {
    return m_edition;
}
void OAIOrganisation::setEdition(const QString &edition) {
    m_edition = edition;
    m_edition_isSet = true;
}

bool OAIOrganisation::is_edition_Set() const{
    return m_edition_isSet;
}

bool OAIOrganisation::is_edition_Valid() const{
    return m_edition_isValid;
}

QString OAIOrganisation::getEmployerIdentificationNumber() const {
    return m_employer_identification_number;
}
void OAIOrganisation::setEmployerIdentificationNumber(const QString &employer_identification_number) {
    m_employer_identification_number = employer_identification_number;
    m_employer_identification_number_isSet = true;
}

bool OAIOrganisation::is_employer_identification_number_Set() const{
    return m_employer_identification_number_isSet;
}

bool OAIOrganisation::is_employer_identification_number_Valid() const{
    return m_employer_identification_number_isValid;
}

QString OAIOrganisation::getEndOfYearLockDate() const {
    return m_end_of_year_lock_date;
}
void OAIOrganisation::setEndOfYearLockDate(const QString &end_of_year_lock_date) {
    m_end_of_year_lock_date = end_of_year_lock_date;
    m_end_of_year_lock_date_isSet = true;
}

bool OAIOrganisation::is_end_of_year_lock_date_Set() const{
    return m_end_of_year_lock_date_isSet;
}

bool OAIOrganisation::is_end_of_year_lock_date_Valid() const{
    return m_end_of_year_lock_date_isValid;
}

QList<OAIExternalLink> OAIOrganisation::getExternalLinks() const {
    return m_external_links;
}
void OAIOrganisation::setExternalLinks(const QList<OAIExternalLink> &external_links) {
    m_external_links = external_links;
    m_external_links_isSet = true;
}

bool OAIOrganisation::is_external_links_Set() const{
    return m_external_links_isSet;
}

bool OAIOrganisation::is_external_links_Valid() const{
    return m_external_links_isValid;
}

qint32 OAIOrganisation::getFinancialYearEndDay() const {
    return m_financial_year_end_day;
}
void OAIOrganisation::setFinancialYearEndDay(const qint32 &financial_year_end_day) {
    m_financial_year_end_day = financial_year_end_day;
    m_financial_year_end_day_isSet = true;
}

bool OAIOrganisation::is_financial_year_end_day_Set() const{
    return m_financial_year_end_day_isSet;
}

bool OAIOrganisation::is_financial_year_end_day_Valid() const{
    return m_financial_year_end_day_isValid;
}

qint32 OAIOrganisation::getFinancialYearEndMonth() const {
    return m_financial_year_end_month;
}
void OAIOrganisation::setFinancialYearEndMonth(const qint32 &financial_year_end_month) {
    m_financial_year_end_month = financial_year_end_month;
    m_financial_year_end_month_isSet = true;
}

bool OAIOrganisation::is_financial_year_end_month_Set() const{
    return m_financial_year_end_month_isSet;
}

bool OAIOrganisation::is_financial_year_end_month_Valid() const{
    return m_financial_year_end_month_isValid;
}

bool OAIOrganisation::isIsDemoCompany() const {
    return m_is_demo_company;
}
void OAIOrganisation::setIsDemoCompany(const bool &is_demo_company) {
    m_is_demo_company = is_demo_company;
    m_is_demo_company_isSet = true;
}

bool OAIOrganisation::is_is_demo_company_Set() const{
    return m_is_demo_company_isSet;
}

bool OAIOrganisation::is_is_demo_company_Valid() const{
    return m_is_demo_company_isValid;
}

QString OAIOrganisation::getLegalName() const {
    return m_legal_name;
}
void OAIOrganisation::setLegalName(const QString &legal_name) {
    m_legal_name = legal_name;
    m_legal_name_isSet = true;
}

bool OAIOrganisation::is_legal_name_Set() const{
    return m_legal_name_isSet;
}

bool OAIOrganisation::is_legal_name_Valid() const{
    return m_legal_name_isValid;
}

QString OAIOrganisation::getLineOfBusiness() const {
    return m_line_of_business;
}
void OAIOrganisation::setLineOfBusiness(const QString &line_of_business) {
    m_line_of_business = line_of_business;
    m_line_of_business_isSet = true;
}

bool OAIOrganisation::is_line_of_business_Set() const{
    return m_line_of_business_isSet;
}

bool OAIOrganisation::is_line_of_business_Valid() const{
    return m_line_of_business_isValid;
}

QString OAIOrganisation::getName() const {
    return m_name;
}
void OAIOrganisation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrganisation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrganisation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOrganisation::getOrganisationEntityType() const {
    return m_organisation_entity_type;
}
void OAIOrganisation::setOrganisationEntityType(const QString &organisation_entity_type) {
    m_organisation_entity_type = organisation_entity_type;
    m_organisation_entity_type_isSet = true;
}

bool OAIOrganisation::is_organisation_entity_type_Set() const{
    return m_organisation_entity_type_isSet;
}

bool OAIOrganisation::is_organisation_entity_type_Valid() const{
    return m_organisation_entity_type_isValid;
}

QString OAIOrganisation::getOrganisationId() const {
    return m_organisation_id;
}
void OAIOrganisation::setOrganisationId(const QString &organisation_id) {
    m_organisation_id = organisation_id;
    m_organisation_id_isSet = true;
}

bool OAIOrganisation::is_organisation_id_Set() const{
    return m_organisation_id_isSet;
}

bool OAIOrganisation::is_organisation_id_Valid() const{
    return m_organisation_id_isValid;
}

QString OAIOrganisation::getOrganisationStatus() const {
    return m_organisation_status;
}
void OAIOrganisation::setOrganisationStatus(const QString &organisation_status) {
    m_organisation_status = organisation_status;
    m_organisation_status_isSet = true;
}

bool OAIOrganisation::is_organisation_status_Set() const{
    return m_organisation_status_isSet;
}

bool OAIOrganisation::is_organisation_status_Valid() const{
    return m_organisation_status_isValid;
}

QString OAIOrganisation::getOrganisationType() const {
    return m_organisation_type;
}
void OAIOrganisation::setOrganisationType(const QString &organisation_type) {
    m_organisation_type = organisation_type;
    m_organisation_type_isSet = true;
}

bool OAIOrganisation::is_organisation_type_Set() const{
    return m_organisation_type_isSet;
}

bool OAIOrganisation::is_organisation_type_Valid() const{
    return m_organisation_type_isValid;
}

OAIPaymentTerm OAIOrganisation::getPaymentTerms() const {
    return m_payment_terms;
}
void OAIOrganisation::setPaymentTerms(const OAIPaymentTerm &payment_terms) {
    m_payment_terms = payment_terms;
    m_payment_terms_isSet = true;
}

bool OAIOrganisation::is_payment_terms_Set() const{
    return m_payment_terms_isSet;
}

bool OAIOrganisation::is_payment_terms_Valid() const{
    return m_payment_terms_isValid;
}

bool OAIOrganisation::isPaysTax() const {
    return m_pays_tax;
}
void OAIOrganisation::setPaysTax(const bool &pays_tax) {
    m_pays_tax = pays_tax;
    m_pays_tax_isSet = true;
}

bool OAIOrganisation::is_pays_tax_Set() const{
    return m_pays_tax_isSet;
}

bool OAIOrganisation::is_pays_tax_Valid() const{
    return m_pays_tax_isValid;
}

QString OAIOrganisation::getPeriodLockDate() const {
    return m_period_lock_date;
}
void OAIOrganisation::setPeriodLockDate(const QString &period_lock_date) {
    m_period_lock_date = period_lock_date;
    m_period_lock_date_isSet = true;
}

bool OAIOrganisation::is_period_lock_date_Set() const{
    return m_period_lock_date_isSet;
}

bool OAIOrganisation::is_period_lock_date_Valid() const{
    return m_period_lock_date_isValid;
}

QList<OAIPhone> OAIOrganisation::getPhones() const {
    return m_phones;
}
void OAIOrganisation::setPhones(const QList<OAIPhone> &phones) {
    m_phones = phones;
    m_phones_isSet = true;
}

bool OAIOrganisation::is_phones_Set() const{
    return m_phones_isSet;
}

bool OAIOrganisation::is_phones_Valid() const{
    return m_phones_isValid;
}

QString OAIOrganisation::getRegistrationNumber() const {
    return m_registration_number;
}
void OAIOrganisation::setRegistrationNumber(const QString &registration_number) {
    m_registration_number = registration_number;
    m_registration_number_isSet = true;
}

bool OAIOrganisation::is_registration_number_Set() const{
    return m_registration_number_isSet;
}

bool OAIOrganisation::is_registration_number_Valid() const{
    return m_registration_number_isValid;
}

QString OAIOrganisation::getSalesTaxBasis() const {
    return m_sales_tax_basis;
}
void OAIOrganisation::setSalesTaxBasis(const QString &sales_tax_basis) {
    m_sales_tax_basis = sales_tax_basis;
    m_sales_tax_basis_isSet = true;
}

bool OAIOrganisation::is_sales_tax_basis_Set() const{
    return m_sales_tax_basis_isSet;
}

bool OAIOrganisation::is_sales_tax_basis_Valid() const{
    return m_sales_tax_basis_isValid;
}

QString OAIOrganisation::getSalesTaxPeriod() const {
    return m_sales_tax_period;
}
void OAIOrganisation::setSalesTaxPeriod(const QString &sales_tax_period) {
    m_sales_tax_period = sales_tax_period;
    m_sales_tax_period_isSet = true;
}

bool OAIOrganisation::is_sales_tax_period_Set() const{
    return m_sales_tax_period_isSet;
}

bool OAIOrganisation::is_sales_tax_period_Valid() const{
    return m_sales_tax_period_isValid;
}

QString OAIOrganisation::getShortCode() const {
    return m_short_code;
}
void OAIOrganisation::setShortCode(const QString &short_code) {
    m_short_code = short_code;
    m_short_code_isSet = true;
}

bool OAIOrganisation::is_short_code_Set() const{
    return m_short_code_isSet;
}

bool OAIOrganisation::is_short_code_Valid() const{
    return m_short_code_isValid;
}

QString OAIOrganisation::getTaxNumber() const {
    return m_tax_number;
}
void OAIOrganisation::setTaxNumber(const QString &tax_number) {
    m_tax_number = tax_number;
    m_tax_number_isSet = true;
}

bool OAIOrganisation::is_tax_number_Set() const{
    return m_tax_number_isSet;
}

bool OAIOrganisation::is_tax_number_Valid() const{
    return m_tax_number_isValid;
}

OAITimeZone OAIOrganisation::getTimezone() const {
    return m_timezone;
}
void OAIOrganisation::setTimezone(const OAITimeZone &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIOrganisation::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIOrganisation::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIOrganisation::getVersion() const {
    return m_version;
}
void OAIOrganisation::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIOrganisation::is_version_Set() const{
    return m_version_isSet;
}

bool OAIOrganisation::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIOrganisation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_purchases_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_sales_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer_identification_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_of_year_lock_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_year_end_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_year_end_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_demo_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_of_business_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organisation_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organisation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organisation_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organisation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pays_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_lock_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phones.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_tax_basis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_tax_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganisation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
