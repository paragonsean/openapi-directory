/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllocation::OAIAllocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllocation::OAIAllocation() {
    this->initializeModel();
}

OAIAllocation::~OAIAllocation() {}

void OAIAllocation::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_credit_note_isSet = false;
    m_credit_note_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_invoice_isSet = false;
    m_invoice_isValid = false;

    m_overpayment_isSet = false;
    m_overpayment_isValid = false;

    m_prepayment_isSet = false;
    m_prepayment_isValid = false;

    m_status_attribute_string_isSet = false;
    m_status_attribute_string_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAIAllocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllocation::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("Amount")]);
    m_amount_isSet = !json[QString("Amount")].isNull() && m_amount_isValid;

    m_credit_note_isValid = ::OpenAPI::fromJsonValue(m_credit_note, json[QString("CreditNote")]);
    m_credit_note_isSet = !json[QString("CreditNote")].isNull() && m_credit_note_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_invoice_isValid = ::OpenAPI::fromJsonValue(m_invoice, json[QString("Invoice")]);
    m_invoice_isSet = !json[QString("Invoice")].isNull() && m_invoice_isValid;

    m_overpayment_isValid = ::OpenAPI::fromJsonValue(m_overpayment, json[QString("Overpayment")]);
    m_overpayment_isSet = !json[QString("Overpayment")].isNull() && m_overpayment_isValid;

    m_prepayment_isValid = ::OpenAPI::fromJsonValue(m_prepayment, json[QString("Prepayment")]);
    m_prepayment_isSet = !json[QString("Prepayment")].isNull() && m_prepayment_isValid;

    m_status_attribute_string_isValid = ::OpenAPI::fromJsonValue(m_status_attribute_string, json[QString("StatusAttributeString")]);
    m_status_attribute_string_isSet = !json[QString("StatusAttributeString")].isNull() && m_status_attribute_string_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;
}

QString OAIAllocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllocation::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("Amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_credit_note.isSet()) {
        obj.insert(QString("CreditNote"), ::OpenAPI::toJsonValue(m_credit_note));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_invoice.isSet()) {
        obj.insert(QString("Invoice"), ::OpenAPI::toJsonValue(m_invoice));
    }
    if (m_overpayment.isSet()) {
        obj.insert(QString("Overpayment"), ::OpenAPI::toJsonValue(m_overpayment));
    }
    if (m_prepayment.isSet()) {
        obj.insert(QString("Prepayment"), ::OpenAPI::toJsonValue(m_prepayment));
    }
    if (m_status_attribute_string_isSet) {
        obj.insert(QString("StatusAttributeString"), ::OpenAPI::toJsonValue(m_status_attribute_string));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

double OAIAllocation::getAmount() const {
    return m_amount;
}
void OAIAllocation::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIAllocation::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIAllocation::is_amount_Valid() const{
    return m_amount_isValid;
}

OAICreditNote OAIAllocation::getCreditNote() const {
    return m_credit_note;
}
void OAIAllocation::setCreditNote(const OAICreditNote &credit_note) {
    m_credit_note = credit_note;
    m_credit_note_isSet = true;
}

bool OAIAllocation::is_credit_note_Set() const{
    return m_credit_note_isSet;
}

bool OAIAllocation::is_credit_note_Valid() const{
    return m_credit_note_isValid;
}

QString OAIAllocation::getDate() const {
    return m_date;
}
void OAIAllocation::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAllocation::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAllocation::is_date_Valid() const{
    return m_date_isValid;
}

OAIInvoice OAIAllocation::getInvoice() const {
    return m_invoice;
}
void OAIAllocation::setInvoice(const OAIInvoice &invoice) {
    m_invoice = invoice;
    m_invoice_isSet = true;
}

bool OAIAllocation::is_invoice_Set() const{
    return m_invoice_isSet;
}

bool OAIAllocation::is_invoice_Valid() const{
    return m_invoice_isValid;
}

OAIOverpayment OAIAllocation::getOverpayment() const {
    return m_overpayment;
}
void OAIAllocation::setOverpayment(const OAIOverpayment &overpayment) {
    m_overpayment = overpayment;
    m_overpayment_isSet = true;
}

bool OAIAllocation::is_overpayment_Set() const{
    return m_overpayment_isSet;
}

bool OAIAllocation::is_overpayment_Valid() const{
    return m_overpayment_isValid;
}

OAIPrepayment OAIAllocation::getPrepayment() const {
    return m_prepayment;
}
void OAIAllocation::setPrepayment(const OAIPrepayment &prepayment) {
    m_prepayment = prepayment;
    m_prepayment_isSet = true;
}

bool OAIAllocation::is_prepayment_Set() const{
    return m_prepayment_isSet;
}

bool OAIAllocation::is_prepayment_Valid() const{
    return m_prepayment_isValid;
}

QString OAIAllocation::getStatusAttributeString() const {
    return m_status_attribute_string;
}
void OAIAllocation::setStatusAttributeString(const QString &status_attribute_string) {
    m_status_attribute_string = status_attribute_string;
    m_status_attribute_string_isSet = true;
}

bool OAIAllocation::is_status_attribute_string_Set() const{
    return m_status_attribute_string_isSet;
}

bool OAIAllocation::is_status_attribute_string_Valid() const{
    return m_status_attribute_string_isValid;
}

QList<OAIValidationError> OAIAllocation::getValidationErrors() const {
    return m_validation_errors;
}
void OAIAllocation::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIAllocation::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIAllocation::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAIAllocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overpayment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepayment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_attribute_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_date_isValid && m_invoice_isValid && true;
}

} // namespace OpenAPI
