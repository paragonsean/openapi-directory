/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_is_subscriber_isSet = false;
    m_is_subscriber_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_organisation_role_isSet = false;
    m_organisation_role_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("EmailAddress")]);
    m_email_address_isSet = !json[QString("EmailAddress")].isNull() && m_email_address_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("FirstName")]);
    m_first_name_isSet = !json[QString("FirstName")].isNull() && m_first_name_isValid;

    m_is_subscriber_isValid = ::OpenAPI::fromJsonValue(m_is_subscriber, json[QString("IsSubscriber")]);
    m_is_subscriber_isSet = !json[QString("IsSubscriber")].isNull() && m_is_subscriber_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("LastName")]);
    m_last_name_isSet = !json[QString("LastName")].isNull() && m_last_name_isValid;

    m_organisation_role_isValid = ::OpenAPI::fromJsonValue(m_organisation_role, json[QString("OrganisationRole")]);
    m_organisation_role_isSet = !json[QString("OrganisationRole")].isNull() && m_organisation_role_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserID")]);
    m_user_id_isSet = !json[QString("UserID")].isNull() && m_user_id_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_email_address_isSet) {
        obj.insert(QString("EmailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("FirstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_is_subscriber_isSet) {
        obj.insert(QString("IsSubscriber"), ::OpenAPI::toJsonValue(m_is_subscriber));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("LastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_organisation_role_isSet) {
        obj.insert(QString("OrganisationRole"), ::OpenAPI::toJsonValue(m_organisation_role));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserID"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIUser::getEmailAddress() const {
    return m_email_address;
}
void OAIUser::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIUser::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIUser::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAIUser::getFirstName() const {
    return m_first_name;
}
void OAIUser::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUser::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUser::is_first_name_Valid() const{
    return m_first_name_isValid;
}

bool OAIUser::isIsSubscriber() const {
    return m_is_subscriber;
}
void OAIUser::setIsSubscriber(const bool &is_subscriber) {
    m_is_subscriber = is_subscriber;
    m_is_subscriber_isSet = true;
}

bool OAIUser::is_is_subscriber_Set() const{
    return m_is_subscriber_isSet;
}

bool OAIUser::is_is_subscriber_Valid() const{
    return m_is_subscriber_isValid;
}

QString OAIUser::getLastName() const {
    return m_last_name;
}
void OAIUser::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUser::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUser::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIUser::getOrganisationRole() const {
    return m_organisation_role;
}
void OAIUser::setOrganisationRole(const QString &organisation_role) {
    m_organisation_role = organisation_role;
    m_organisation_role_isSet = true;
}

bool OAIUser::is_organisation_role_Set() const{
    return m_organisation_role_isSet;
}

bool OAIUser::is_organisation_role_Valid() const{
    return m_organisation_role_isValid;
}

QString OAIUser::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIUser::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIUser::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIUser::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

QString OAIUser::getUserId() const {
    return m_user_id;
}
void OAIUser::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUser::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUser::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_subscriber_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organisation_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
