/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.Accounts;
import org.openapitools.client.model.Actions;
import org.openapitools.client.model.Allocations;
import org.openapitools.client.model.Attachments;
import org.openapitools.client.model.BankTransactions;
import org.openapitools.client.model.BankTransfers;
import org.openapitools.client.model.BatchPayments;
import org.openapitools.client.model.BrandingThemes;
import org.openapitools.client.model.CISOrgSettings;
import org.openapitools.client.model.CISSettings;
import org.openapitools.client.model.ContactGroups;
import org.openapitools.client.model.Contacts;
import org.openapitools.client.model.CreditNotes;
import org.openapitools.client.model.Currencies;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.Employees;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ExpenseClaims;
import java.io.File;
import org.openapitools.client.model.HistoryRecords;
import org.openapitools.client.model.ImportSummaryObject;
import org.openapitools.client.model.InvoiceReminders;
import org.openapitools.client.model.Invoices;
import org.openapitools.client.model.Items;
import org.openapitools.client.model.Journals;
import org.openapitools.client.model.LinkedTransaction;
import org.openapitools.client.model.LinkedTransactions;
import java.time.LocalDate;
import org.openapitools.client.model.ManualJournals;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OnlineInvoices;
import org.openapitools.client.model.Organisations;
import org.openapitools.client.model.Overpayments;
import org.openapitools.client.model.Payment;
import org.openapitools.client.model.PaymentDelete;
import org.openapitools.client.model.PaymentService;
import org.openapitools.client.model.PaymentServices;
import org.openapitools.client.model.Payments;
import org.openapitools.client.model.Prepayments;
import org.openapitools.client.model.PurchaseOrders;
import org.openapitools.client.model.Quotes;
import org.openapitools.client.model.Receipts;
import org.openapitools.client.model.RepeatingInvoices;
import org.openapitools.client.model.ReportWithRows;
import org.openapitools.client.model.Reports;
import org.openapitools.client.model.RequestEmpty;
import org.openapitools.client.model.Setup;
import org.openapitools.client.model.TaxRates;
import org.openapitools.client.model.TrackingCategories;
import org.openapitools.client.model.TrackingCategory;
import org.openapitools.client.model.TrackingOption;
import org.openapitools.client.model.TrackingOptions;
import java.util.UUID;
import org.openapitools.client.model.Users;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountingApi
 */
@Disabled
public class AccountingApiTest {

    private final AccountingApi api = new AccountingApi();

    /**
     * Creates a new chart of accounts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAccountTest() throws ApiException {
        String xeroTenantId = null;
        Account account = null;
        Accounts response = api.createAccount(xeroTenantId, account);
        // TODO: test validations
    }

    /**
     * Creates an attachment on a specific account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAccountAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID accountID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.createAccountAttachmentByFileName(xeroTenantId, accountID, fileName, body);
        // TODO: test validations
    }

    /**
     * Creates an attachment for a specific bank transaction by filename
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBankTransactionAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID bankTransactionID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.createBankTransactionAttachmentByFileName(xeroTenantId, bankTransactionID, fileName, body);
        // TODO: test validations
    }

    /**
     * Creates a history record for a specific bank transactions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBankTransactionHistoryRecordTest() throws ApiException {
        String xeroTenantId = null;
        UUID bankTransactionID = null;
        HistoryRecords historyRecords = null;
        HistoryRecords response = api.createBankTransactionHistoryRecord(xeroTenantId, bankTransactionID, historyRecords);
        // TODO: test validations
    }

    /**
     * Creates one or more spent or received money transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBankTransactionsTest() throws ApiException {
        String xeroTenantId = null;
        BankTransactions bankTransactions = null;
        Boolean summarizeErrors = null;
        Integer unitdp = null;
        BankTransactions response = api.createBankTransactions(xeroTenantId, bankTransactions, summarizeErrors, unitdp);
        // TODO: test validations
    }

    /**
     * Creates a bank transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBankTransferTest() throws ApiException {
        String xeroTenantId = null;
        BankTransfers bankTransfers = null;
        BankTransfers response = api.createBankTransfer(xeroTenantId, bankTransfers);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBankTransferAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID bankTransferID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.createBankTransferAttachmentByFileName(xeroTenantId, bankTransferID, fileName, body);
        // TODO: test validations
    }

    /**
     * Creates a history record for a specific bank transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBankTransferHistoryRecordTest() throws ApiException {
        String xeroTenantId = null;
        UUID bankTransferID = null;
        HistoryRecords historyRecords = null;
        HistoryRecords response = api.createBankTransferHistoryRecord(xeroTenantId, bankTransferID, historyRecords);
        // TODO: test validations
    }

    /**
     * Creates one or many batch payments for invoices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBatchPaymentTest() throws ApiException {
        String xeroTenantId = null;
        BatchPayments batchPayments = null;
        Boolean summarizeErrors = null;
        BatchPayments response = api.createBatchPayment(xeroTenantId, batchPayments, summarizeErrors);
        // TODO: test validations
    }

    /**
     * Creates a history record for a specific batch payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBatchPaymentHistoryRecordTest() throws ApiException {
        String xeroTenantId = null;
        UUID batchPaymentID = null;
        HistoryRecords historyRecords = null;
        HistoryRecords response = api.createBatchPaymentHistoryRecord(xeroTenantId, batchPaymentID, historyRecords);
        // TODO: test validations
    }

    /**
     * Creates a new custom payment service for a specific branding theme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBrandingThemePaymentServicesTest() throws ApiException {
        String xeroTenantId = null;
        UUID brandingThemeID = null;
        PaymentService paymentService = null;
        PaymentServices response = api.createBrandingThemePaymentServices(xeroTenantId, brandingThemeID, paymentService);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContactAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID contactID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.createContactAttachmentByFileName(xeroTenantId, contactID, fileName, body);
        // TODO: test validations
    }

    /**
     * Creates a contact group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContactGroupTest() throws ApiException {
        String xeroTenantId = null;
        ContactGroups contactGroups = null;
        ContactGroups response = api.createContactGroup(xeroTenantId, contactGroups);
        // TODO: test validations
    }

    /**
     * Creates contacts to a specific contact group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContactGroupContactsTest() throws ApiException {
        String xeroTenantId = null;
        UUID contactGroupID = null;
        Contacts contacts = null;
        Contacts response = api.createContactGroupContacts(xeroTenantId, contactGroupID, contacts);
        // TODO: test validations
    }

    /**
     * Creates a new history record for a specific contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContactHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID contactID = null;
        HistoryRecords historyRecords = null;
        HistoryRecords response = api.createContactHistory(xeroTenantId, contactID, historyRecords);
        // TODO: test validations
    }

    /**
     * Creates multiple contacts (bulk) in a Xero organisation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContactsTest() throws ApiException {
        String xeroTenantId = null;
        Contacts contacts = null;
        Boolean summarizeErrors = null;
        Contacts response = api.createContacts(xeroTenantId, contacts, summarizeErrors);
        // TODO: test validations
    }

    /**
     * Creates allocation for a specific credit note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCreditNoteAllocationTest() throws ApiException {
        String xeroTenantId = null;
        UUID creditNoteID = null;
        Allocations allocations = null;
        Boolean summarizeErrors = null;
        Allocations response = api.createCreditNoteAllocation(xeroTenantId, creditNoteID, allocations, summarizeErrors);
        // TODO: test validations
    }

    /**
     * Creates an attachment for a specific credit note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCreditNoteAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID creditNoteID = null;
        String fileName = null;
        byte[] body = null;
        Boolean includeOnline = null;
        Attachments response = api.createCreditNoteAttachmentByFileName(xeroTenantId, creditNoteID, fileName, body, includeOnline);
        // TODO: test validations
    }

    /**
     * Retrieves history records of a specific credit note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCreditNoteHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID creditNoteID = null;
        HistoryRecords historyRecords = null;
        HistoryRecords response = api.createCreditNoteHistory(xeroTenantId, creditNoteID, historyRecords);
        // TODO: test validations
    }

    /**
     * Creates a new credit note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCreditNotesTest() throws ApiException {
        String xeroTenantId = null;
        CreditNotes creditNotes = null;
        Boolean summarizeErrors = null;
        Integer unitdp = null;
        CreditNotes response = api.createCreditNotes(xeroTenantId, creditNotes, summarizeErrors, unitdp);
        // TODO: test validations
    }

    /**
     * Create a new currency for a Xero organisation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCurrencyTest() throws ApiException {
        String xeroTenantId = null;
        Currency currency = null;
        Currencies response = api.createCurrency(xeroTenantId, currency);
        // TODO: test validations
    }

    /**
     * Creates new employees used in Xero payrun
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmployeesTest() throws ApiException {
        String xeroTenantId = null;
        Employees employees = null;
        Boolean summarizeErrors = null;
        Employees response = api.createEmployees(xeroTenantId, employees, summarizeErrors);
        // TODO: test validations
    }

    /**
     * Creates a history record for a specific expense claim
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createExpenseClaimHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID expenseClaimID = null;
        HistoryRecords historyRecords = null;
        HistoryRecords response = api.createExpenseClaimHistory(xeroTenantId, expenseClaimID, historyRecords);
        // TODO: test validations
    }

    /**
     * Creates expense claims
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createExpenseClaimsTest() throws ApiException {
        String xeroTenantId = null;
        ExpenseClaims expenseClaims = null;
        ExpenseClaims response = api.createExpenseClaims(xeroTenantId, expenseClaims);
        // TODO: test validations
    }

    /**
     * Creates an attachment for a specific invoice or purchase bill by filename
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInvoiceAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID invoiceID = null;
        String fileName = null;
        byte[] body = null;
        Boolean includeOnline = null;
        Attachments response = api.createInvoiceAttachmentByFileName(xeroTenantId, invoiceID, fileName, body, includeOnline);
        // TODO: test validations
    }

    /**
     * Creates a history record for a specific invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInvoiceHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID invoiceID = null;
        HistoryRecords historyRecords = null;
        HistoryRecords response = api.createInvoiceHistory(xeroTenantId, invoiceID, historyRecords);
        // TODO: test validations
    }

    /**
     * Creates one or more sales invoices or purchase bills
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInvoicesTest() throws ApiException {
        String xeroTenantId = null;
        Invoices invoices = null;
        Boolean summarizeErrors = null;
        Integer unitdp = null;
        Invoices response = api.createInvoices(xeroTenantId, invoices, summarizeErrors, unitdp);
        // TODO: test validations
    }

    /**
     * Creates a history record for a specific item
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createItemHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID itemID = null;
        HistoryRecords historyRecords = null;
        HistoryRecords response = api.createItemHistory(xeroTenantId, itemID, historyRecords);
        // TODO: test validations
    }

    /**
     * Creates one or more items
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createItemsTest() throws ApiException {
        String xeroTenantId = null;
        Items items = null;
        Boolean summarizeErrors = null;
        Integer unitdp = null;
        Items response = api.createItems(xeroTenantId, items, summarizeErrors, unitdp);
        // TODO: test validations
    }

    /**
     * Creates linked transactions (billable expenses)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLinkedTransactionTest() throws ApiException {
        String xeroTenantId = null;
        LinkedTransaction linkedTransaction = null;
        LinkedTransactions response = api.createLinkedTransaction(xeroTenantId, linkedTransaction);
        // TODO: test validations
    }

    /**
     * Creates a specific attachment for a specific manual journal by file name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createManualJournalAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID manualJournalID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.createManualJournalAttachmentByFileName(xeroTenantId, manualJournalID, fileName, body);
        // TODO: test validations
    }

    /**
     * Creates a history record for a specific manual journal
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createManualJournalHistoryRecordTest() throws ApiException {
        String xeroTenantId = null;
        UUID manualJournalID = null;
        HistoryRecords historyRecords = null;
        HistoryRecords response = api.createManualJournalHistoryRecord(xeroTenantId, manualJournalID, historyRecords);
        // TODO: test validations
    }

    /**
     * Creates one or more manual journals
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createManualJournalsTest() throws ApiException {
        String xeroTenantId = null;
        ManualJournals manualJournals = null;
        Boolean summarizeErrors = null;
        ManualJournals response = api.createManualJournals(xeroTenantId, manualJournals, summarizeErrors);
        // TODO: test validations
    }

    /**
     * Creates a single allocation for a specific overpayment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOverpaymentAllocationsTest() throws ApiException {
        String xeroTenantId = null;
        UUID overpaymentID = null;
        Allocations allocations = null;
        Boolean summarizeErrors = null;
        Allocations response = api.createOverpaymentAllocations(xeroTenantId, overpaymentID, allocations, summarizeErrors);
        // TODO: test validations
    }

    /**
     * Creates a history record for a specific overpayment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOverpaymentHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID overpaymentID = null;
        HistoryRecords historyRecords = null;
        HistoryRecords response = api.createOverpaymentHistory(xeroTenantId, overpaymentID, historyRecords);
        // TODO: test validations
    }

    /**
     * Creates a single payment for invoice or credit notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentTest() throws ApiException {
        String xeroTenantId = null;
        Payment payment = null;
        Payments response = api.createPayment(xeroTenantId, payment);
        // TODO: test validations
    }

    /**
     * Creates a history record for a specific payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID paymentID = null;
        HistoryRecords historyRecords = null;
        HistoryRecords response = api.createPaymentHistory(xeroTenantId, paymentID, historyRecords);
        // TODO: test validations
    }

    /**
     * Creates a payment service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentServiceTest() throws ApiException {
        String xeroTenantId = null;
        PaymentServices paymentServices = null;
        PaymentServices response = api.createPaymentService(xeroTenantId, paymentServices);
        // TODO: test validations
    }

    /**
     * Creates multiple payments for invoices or credit notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentsTest() throws ApiException {
        String xeroTenantId = null;
        Payments payments = null;
        Boolean summarizeErrors = null;
        Payments response = api.createPayments(xeroTenantId, payments, summarizeErrors);
        // TODO: test validations
    }

    /**
     * Allows you to create an Allocation for prepayments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPrepaymentAllocationsTest() throws ApiException {
        String xeroTenantId = null;
        UUID prepaymentID = null;
        Allocations allocations = null;
        Boolean summarizeErrors = null;
        Allocations response = api.createPrepaymentAllocations(xeroTenantId, prepaymentID, allocations, summarizeErrors);
        // TODO: test validations
    }

    /**
     * Creates a history record for a specific prepayment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPrepaymentHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID prepaymentID = null;
        HistoryRecords historyRecords = null;
        HistoryRecords response = api.createPrepaymentHistory(xeroTenantId, prepaymentID, historyRecords);
        // TODO: test validations
    }

    /**
     * Creates attachment for a specific purchase order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPurchaseOrderAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID purchaseOrderID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.createPurchaseOrderAttachmentByFileName(xeroTenantId, purchaseOrderID, fileName, body);
        // TODO: test validations
    }

    /**
     * Creates a history record for a specific purchase orders
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPurchaseOrderHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID purchaseOrderID = null;
        HistoryRecords historyRecords = null;
        HistoryRecords response = api.createPurchaseOrderHistory(xeroTenantId, purchaseOrderID, historyRecords);
        // TODO: test validations
    }

    /**
     * Creates one or more purchase orders
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPurchaseOrdersTest() throws ApiException {
        String xeroTenantId = null;
        PurchaseOrders purchaseOrders = null;
        Boolean summarizeErrors = null;
        PurchaseOrders response = api.createPurchaseOrders(xeroTenantId, purchaseOrders, summarizeErrors);
        // TODO: test validations
    }

    /**
     * Creates attachment for a specific quote
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createQuoteAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID quoteID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.createQuoteAttachmentByFileName(xeroTenantId, quoteID, fileName, body);
        // TODO: test validations
    }

    /**
     * Creates a history record for a specific quote
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createQuoteHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID quoteID = null;
        HistoryRecords historyRecords = null;
        HistoryRecords response = api.createQuoteHistory(xeroTenantId, quoteID, historyRecords);
        // TODO: test validations
    }

    /**
     * Create one or more quotes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createQuotesTest() throws ApiException {
        String xeroTenantId = null;
        Quotes quotes = null;
        Boolean summarizeErrors = null;
        Quotes response = api.createQuotes(xeroTenantId, quotes, summarizeErrors);
        // TODO: test validations
    }

    /**
     * Creates draft expense claim receipts for any user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReceiptTest() throws ApiException {
        String xeroTenantId = null;
        Receipts receipts = null;
        Integer unitdp = null;
        Receipts response = api.createReceipt(xeroTenantId, receipts, unitdp);
        // TODO: test validations
    }

    /**
     * Creates an attachment on a specific expense claim receipts by file name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReceiptAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID receiptID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.createReceiptAttachmentByFileName(xeroTenantId, receiptID, fileName, body);
        // TODO: test validations
    }

    /**
     * Creates a history record for a specific receipt
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReceiptHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID receiptID = null;
        HistoryRecords historyRecords = null;
        HistoryRecords response = api.createReceiptHistory(xeroTenantId, receiptID, historyRecords);
        // TODO: test validations
    }

    /**
     * Creates an attachment from a specific repeating invoices by file name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRepeatingInvoiceAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID repeatingInvoiceID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.createRepeatingInvoiceAttachmentByFileName(xeroTenantId, repeatingInvoiceID, fileName, body);
        // TODO: test validations
    }

    /**
     * Creates a  history record for a specific repeating invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRepeatingInvoiceHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID repeatingInvoiceID = null;
        HistoryRecords historyRecords = null;
        HistoryRecords response = api.createRepeatingInvoiceHistory(xeroTenantId, repeatingInvoiceID, historyRecords);
        // TODO: test validations
    }

    /**
     * Creates one or more tax rates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTaxRatesTest() throws ApiException {
        String xeroTenantId = null;
        TaxRates taxRates = null;
        TaxRates response = api.createTaxRates(xeroTenantId, taxRates);
        // TODO: test validations
    }

    /**
     * Create tracking categories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTrackingCategoryTest() throws ApiException {
        String xeroTenantId = null;
        TrackingCategory trackingCategory = null;
        TrackingCategories response = api.createTrackingCategory(xeroTenantId, trackingCategory);
        // TODO: test validations
    }

    /**
     * Creates options for a specific tracking category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTrackingOptionsTest() throws ApiException {
        String xeroTenantId = null;
        UUID trackingCategoryID = null;
        TrackingOption trackingOption = null;
        TrackingOptions response = api.createTrackingOptions(xeroTenantId, trackingCategoryID, trackingOption);
        // TODO: test validations
    }

    /**
     * Deletes a chart of accounts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccountTest() throws ApiException {
        String xeroTenantId = null;
        UUID accountID = null;
        Accounts response = api.deleteAccount(xeroTenantId, accountID);
        // TODO: test validations
    }

    /**
     * Deletes a specific contact from a contact group using a unique contact Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContactGroupContactTest() throws ApiException {
        String xeroTenantId = null;
        UUID contactGroupID = null;
        UUID contactID = null;
        api.deleteContactGroupContact(xeroTenantId, contactGroupID, contactID);
        // TODO: test validations
    }

    /**
     * Deletes all contacts from a specific contact group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContactGroupContactsTest() throws ApiException {
        String xeroTenantId = null;
        UUID contactGroupID = null;
        api.deleteContactGroupContacts(xeroTenantId, contactGroupID);
        // TODO: test validations
    }

    /**
     * Deletes a specific item
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteItemTest() throws ApiException {
        String xeroTenantId = null;
        UUID itemID = null;
        api.deleteItem(xeroTenantId, itemID);
        // TODO: test validations
    }

    /**
     * Deletes a specific linked transactions (billable expenses)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLinkedTransactionTest() throws ApiException {
        String xeroTenantId = null;
        UUID linkedTransactionID = null;
        api.deleteLinkedTransaction(xeroTenantId, linkedTransactionID);
        // TODO: test validations
    }

    /**
     * Updates a specific payment for invoices and credit notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePaymentTest() throws ApiException {
        String xeroTenantId = null;
        UUID paymentID = null;
        PaymentDelete paymentDelete = null;
        Payments response = api.deletePayment(xeroTenantId, paymentID, paymentDelete);
        // TODO: test validations
    }

    /**
     * Deletes a specific tracking category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTrackingCategoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID trackingCategoryID = null;
        TrackingCategories response = api.deleteTrackingCategory(xeroTenantId, trackingCategoryID);
        // TODO: test validations
    }

    /**
     * Deletes a specific option for a specific tracking category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTrackingOptionsTest() throws ApiException {
        String xeroTenantId = null;
        UUID trackingCategoryID = null;
        UUID trackingOptionID = null;
        TrackingOptions response = api.deleteTrackingOptions(xeroTenantId, trackingCategoryID, trackingOptionID);
        // TODO: test validations
    }

    /**
     * Sends a copy of a specific invoice to related contact via email
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void emailInvoiceTest() throws ApiException {
        String xeroTenantId = null;
        UUID invoiceID = null;
        RequestEmpty requestEmpty = null;
        api.emailInvoice(xeroTenantId, invoiceID, requestEmpty);
        // TODO: test validations
    }

    /**
     * Retrieves a single chart of accounts by using a unique account Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        String xeroTenantId = null;
        UUID accountID = null;
        Accounts response = api.getAccount(xeroTenantId, accountID);
        // TODO: test validations
    }

    /**
     * Retrieves an attachment for a specific account by filename
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID accountID = null;
        String fileName = null;
        String contentType = null;
        File response = api.getAccountAttachmentByFileName(xeroTenantId, accountID, fileName, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves a specific attachment from a specific account using a unique attachment Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountAttachmentByIdTest() throws ApiException {
        String xeroTenantId = null;
        UUID accountID = null;
        UUID attachmentID = null;
        String contentType = null;
        File response = api.getAccountAttachmentById(xeroTenantId, accountID, attachmentID, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves attachments for a specific accounts by using a unique account Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountAttachmentsTest() throws ApiException {
        String xeroTenantId = null;
        UUID accountID = null;
        Attachments response = api.getAccountAttachments(xeroTenantId, accountID);
        // TODO: test validations
    }

    /**
     * Retrieves the full chart of accounts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountsTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        String where = null;
        String order = null;
        Accounts response = api.getAccounts(xeroTenantId, ifModifiedSince, where, order);
        // TODO: test validations
    }

    /**
     * Retrieves a single spent or received money transaction by using a unique bank transaction Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankTransactionTest() throws ApiException {
        String xeroTenantId = null;
        UUID bankTransactionID = null;
        Integer unitdp = null;
        BankTransactions response = api.getBankTransaction(xeroTenantId, bankTransactionID, unitdp);
        // TODO: test validations
    }

    /**
     * Retrieves a specific attachment from a specific bank transaction by filename
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankTransactionAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID bankTransactionID = null;
        String fileName = null;
        String contentType = null;
        File response = api.getBankTransactionAttachmentByFileName(xeroTenantId, bankTransactionID, fileName, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves specific attachments from a specific BankTransaction using a unique attachment Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankTransactionAttachmentByIdTest() throws ApiException {
        String xeroTenantId = null;
        UUID bankTransactionID = null;
        UUID attachmentID = null;
        String contentType = null;
        File response = api.getBankTransactionAttachmentById(xeroTenantId, bankTransactionID, attachmentID, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves any attachments from a specific bank transactions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankTransactionAttachmentsTest() throws ApiException {
        String xeroTenantId = null;
        UUID bankTransactionID = null;
        Attachments response = api.getBankTransactionAttachments(xeroTenantId, bankTransactionID);
        // TODO: test validations
    }

    /**
     * Retrieves any spent or received money transactions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankTransactionsTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        String where = null;
        String order = null;
        Integer page = null;
        Integer unitdp = null;
        BankTransactions response = api.getBankTransactions(xeroTenantId, ifModifiedSince, where, order, page, unitdp);
        // TODO: test validations
    }

    /**
     * Retrieves history from a specific bank transaction using a unique bank transaction Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankTransactionsHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID bankTransactionID = null;
        HistoryRecords response = api.getBankTransactionsHistory(xeroTenantId, bankTransactionID);
        // TODO: test validations
    }

    /**
     * Retrieves specific bank transfers by using a unique bank transfer Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankTransferTest() throws ApiException {
        String xeroTenantId = null;
        UUID bankTransferID = null;
        BankTransfers response = api.getBankTransfer(xeroTenantId, bankTransferID);
        // TODO: test validations
    }

    /**
     * Retrieves a specific attachment on a specific bank transfer by file name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankTransferAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID bankTransferID = null;
        String fileName = null;
        String contentType = null;
        File response = api.getBankTransferAttachmentByFileName(xeroTenantId, bankTransferID, fileName, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves a specific attachment from a specific bank transfer using a unique attachment ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankTransferAttachmentByIdTest() throws ApiException {
        String xeroTenantId = null;
        UUID bankTransferID = null;
        UUID attachmentID = null;
        String contentType = null;
        File response = api.getBankTransferAttachmentById(xeroTenantId, bankTransferID, attachmentID, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves attachments from a specific bank transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankTransferAttachmentsTest() throws ApiException {
        String xeroTenantId = null;
        UUID bankTransferID = null;
        Attachments response = api.getBankTransferAttachments(xeroTenantId, bankTransferID);
        // TODO: test validations
    }

    /**
     * Retrieves history from a specific bank transfer using a unique bank transfer Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankTransferHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID bankTransferID = null;
        HistoryRecords response = api.getBankTransferHistory(xeroTenantId, bankTransferID);
        // TODO: test validations
    }

    /**
     * Retrieves all bank transfers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankTransfersTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        String where = null;
        String order = null;
        BankTransfers response = api.getBankTransfers(xeroTenantId, ifModifiedSince, where, order);
        // TODO: test validations
    }

    /**
     * Retrieves history from a specific batch payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBatchPaymentHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID batchPaymentID = null;
        HistoryRecords response = api.getBatchPaymentHistory(xeroTenantId, batchPaymentID);
        // TODO: test validations
    }

    /**
     * Retrieves either one or many batch payments for invoices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBatchPaymentsTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        String where = null;
        String order = null;
        BatchPayments response = api.getBatchPayments(xeroTenantId, ifModifiedSince, where, order);
        // TODO: test validations
    }

    /**
     * Retrieves a specific branding theme using a unique branding theme Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBrandingThemeTest() throws ApiException {
        String xeroTenantId = null;
        UUID brandingThemeID = null;
        BrandingThemes response = api.getBrandingTheme(xeroTenantId, brandingThemeID);
        // TODO: test validations
    }

    /**
     * Retrieves the payment services for a specific branding theme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBrandingThemePaymentServicesTest() throws ApiException {
        String xeroTenantId = null;
        UUID brandingThemeID = null;
        PaymentServices response = api.getBrandingThemePaymentServices(xeroTenantId, brandingThemeID);
        // TODO: test validations
    }

    /**
     * Retrieves all the branding themes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBrandingThemesTest() throws ApiException {
        String xeroTenantId = null;
        BrandingThemes response = api.getBrandingThemes(xeroTenantId);
        // TODO: test validations
    }

    /**
     * Retrieves a specific contacts in a Xero organisation using a unique contact Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactTest() throws ApiException {
        String xeroTenantId = null;
        UUID contactID = null;
        Contacts response = api.getContact(xeroTenantId, contactID);
        // TODO: test validations
    }

    /**
     * Retrieves a specific attachment from a specific contact by file name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID contactID = null;
        String fileName = null;
        String contentType = null;
        File response = api.getContactAttachmentByFileName(xeroTenantId, contactID, fileName, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves a specific attachment from a specific contact using a unique attachment Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactAttachmentByIdTest() throws ApiException {
        String xeroTenantId = null;
        UUID contactID = null;
        UUID attachmentID = null;
        String contentType = null;
        File response = api.getContactAttachmentById(xeroTenantId, contactID, attachmentID, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves attachments for a specific contact in a Xero organisation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactAttachmentsTest() throws ApiException {
        String xeroTenantId = null;
        UUID contactID = null;
        Attachments response = api.getContactAttachments(xeroTenantId, contactID);
        // TODO: test validations
    }

    /**
     * Retrieves a specific contact by contact number in a Xero organisation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactByContactNumberTest() throws ApiException {
        String xeroTenantId = null;
        String contactNumber = null;
        Contacts response = api.getContactByContactNumber(xeroTenantId, contactNumber);
        // TODO: test validations
    }

    /**
     * Retrieves CIS settings for a specific contact in a Xero organisation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactCISSettingsTest() throws ApiException {
        String xeroTenantId = null;
        UUID contactID = null;
        CISSettings response = api.getContactCISSettings(xeroTenantId, contactID);
        // TODO: test validations
    }

    /**
     * Retrieves a specific contact group by using a unique contact group Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactGroupTest() throws ApiException {
        String xeroTenantId = null;
        UUID contactGroupID = null;
        ContactGroups response = api.getContactGroup(xeroTenantId, contactGroupID);
        // TODO: test validations
    }

    /**
     * Retrieves the contact Id and name of all the contacts in a contact group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactGroupsTest() throws ApiException {
        String xeroTenantId = null;
        String where = null;
        String order = null;
        ContactGroups response = api.getContactGroups(xeroTenantId, where, order);
        // TODO: test validations
    }

    /**
     * Retrieves history records for a specific contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID contactID = null;
        HistoryRecords response = api.getContactHistory(xeroTenantId, contactID);
        // TODO: test validations
    }

    /**
     * Retrieves all contacts in a Xero organisation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactsTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        String where = null;
        String order = null;
        List<UUID> ids = null;
        Integer page = null;
        Boolean includeArchived = null;
        Contacts response = api.getContacts(xeroTenantId, ifModifiedSince, where, order, ids, page, includeArchived);
        // TODO: test validations
    }

    /**
     * Retrieves a specific credit note using a unique credit note Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCreditNoteTest() throws ApiException {
        String xeroTenantId = null;
        UUID creditNoteID = null;
        Integer unitdp = null;
        CreditNotes response = api.getCreditNote(xeroTenantId, creditNoteID, unitdp);
        // TODO: test validations
    }

    /**
     * Retrieves credit notes as PDF files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCreditNoteAsPdfTest() throws ApiException {
        String xeroTenantId = null;
        UUID creditNoteID = null;
        File response = api.getCreditNoteAsPdf(xeroTenantId, creditNoteID);
        // TODO: test validations
    }

    /**
     * Retrieves a specific attachment on a specific credit note by file name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCreditNoteAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID creditNoteID = null;
        String fileName = null;
        String contentType = null;
        File response = api.getCreditNoteAttachmentByFileName(xeroTenantId, creditNoteID, fileName, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves a specific attachment from a specific credit note using a unique attachment Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCreditNoteAttachmentByIdTest() throws ApiException {
        String xeroTenantId = null;
        UUID creditNoteID = null;
        UUID attachmentID = null;
        String contentType = null;
        File response = api.getCreditNoteAttachmentById(xeroTenantId, creditNoteID, attachmentID, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves attachments for a specific credit notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCreditNoteAttachmentsTest() throws ApiException {
        String xeroTenantId = null;
        UUID creditNoteID = null;
        Attachments response = api.getCreditNoteAttachments(xeroTenantId, creditNoteID);
        // TODO: test validations
    }

    /**
     * Retrieves history records of a specific credit note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCreditNoteHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID creditNoteID = null;
        HistoryRecords response = api.getCreditNoteHistory(xeroTenantId, creditNoteID);
        // TODO: test validations
    }

    /**
     * Retrieves any credit notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCreditNotesTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        String where = null;
        String order = null;
        Integer page = null;
        Integer unitdp = null;
        CreditNotes response = api.getCreditNotes(xeroTenantId, ifModifiedSince, where, order, page, unitdp);
        // TODO: test validations
    }

    /**
     * Retrieves currencies for your Xero organisation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrenciesTest() throws ApiException {
        String xeroTenantId = null;
        String where = null;
        String order = null;
        Currencies response = api.getCurrencies(xeroTenantId, where, order);
        // TODO: test validations
    }

    /**
     * Retrieves a specific employee used in Xero payrun using a unique employee Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeTest() throws ApiException {
        String xeroTenantId = null;
        UUID employeeID = null;
        Employees response = api.getEmployee(xeroTenantId, employeeID);
        // TODO: test validations
    }

    /**
     * Retrieves employees used in Xero payrun
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeesTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        String where = null;
        String order = null;
        Employees response = api.getEmployees(xeroTenantId, ifModifiedSince, where, order);
        // TODO: test validations
    }

    /**
     * Retrieves a specific expense claim using a unique expense claim Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExpenseClaimTest() throws ApiException {
        String xeroTenantId = null;
        UUID expenseClaimID = null;
        ExpenseClaims response = api.getExpenseClaim(xeroTenantId, expenseClaimID);
        // TODO: test validations
    }

    /**
     * Retrieves history records of a specific expense claim
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExpenseClaimHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID expenseClaimID = null;
        HistoryRecords response = api.getExpenseClaimHistory(xeroTenantId, expenseClaimID);
        // TODO: test validations
    }

    /**
     * Retrieves expense claims
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExpenseClaimsTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        String where = null;
        String order = null;
        ExpenseClaims response = api.getExpenseClaims(xeroTenantId, ifModifiedSince, where, order);
        // TODO: test validations
    }

    /**
     * Retrieves a specific sales invoice or purchase bill using a unique invoice Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvoiceTest() throws ApiException {
        String xeroTenantId = null;
        UUID invoiceID = null;
        Integer unitdp = null;
        Invoices response = api.getInvoice(xeroTenantId, invoiceID, unitdp);
        // TODO: test validations
    }

    /**
     * Retrieves invoices or purchase bills as PDF files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvoiceAsPdfTest() throws ApiException {
        String xeroTenantId = null;
        UUID invoiceID = null;
        File response = api.getInvoiceAsPdf(xeroTenantId, invoiceID);
        // TODO: test validations
    }

    /**
     * Retrieves an attachment from a specific invoice or purchase bill by filename
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvoiceAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID invoiceID = null;
        String fileName = null;
        String contentType = null;
        File response = api.getInvoiceAttachmentByFileName(xeroTenantId, invoiceID, fileName, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvoiceAttachmentByIdTest() throws ApiException {
        String xeroTenantId = null;
        UUID invoiceID = null;
        UUID attachmentID = null;
        String contentType = null;
        File response = api.getInvoiceAttachmentById(xeroTenantId, invoiceID, attachmentID, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves attachments for a specific invoice or purchase bill
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvoiceAttachmentsTest() throws ApiException {
        String xeroTenantId = null;
        UUID invoiceID = null;
        Attachments response = api.getInvoiceAttachments(xeroTenantId, invoiceID);
        // TODO: test validations
    }

    /**
     * Retrieves history records for a specific invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvoiceHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID invoiceID = null;
        HistoryRecords response = api.getInvoiceHistory(xeroTenantId, invoiceID);
        // TODO: test validations
    }

    /**
     * Retrieves invoice reminder settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvoiceRemindersTest() throws ApiException {
        String xeroTenantId = null;
        InvoiceReminders response = api.getInvoiceReminders(xeroTenantId);
        // TODO: test validations
    }

    /**
     * Retrieves sales invoices or purchase bills
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvoicesTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        String where = null;
        String order = null;
        List<UUID> ids = null;
        List<String> invoiceNumbers = null;
        List<UUID> contactIDs = null;
        List<String> statuses = null;
        Integer page = null;
        Boolean includeArchived = null;
        Boolean createdByMyApp = null;
        Integer unitdp = null;
        Invoices response = api.getInvoices(xeroTenantId, ifModifiedSince, where, order, ids, invoiceNumbers, contactIDs, statuses, page, includeArchived, createdByMyApp, unitdp);
        // TODO: test validations
    }

    /**
     * Retrieves a specific item using a unique item Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemTest() throws ApiException {
        String xeroTenantId = null;
        UUID itemID = null;
        Integer unitdp = null;
        Items response = api.getItem(xeroTenantId, itemID, unitdp);
        // TODO: test validations
    }

    /**
     * Retrieves history for a specific item
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID itemID = null;
        HistoryRecords response = api.getItemHistory(xeroTenantId, itemID);
        // TODO: test validations
    }

    /**
     * Retrieves items
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemsTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        String where = null;
        String order = null;
        Integer unitdp = null;
        Items response = api.getItems(xeroTenantId, ifModifiedSince, where, order, unitdp);
        // TODO: test validations
    }

    /**
     * Retrieves a specific journal using a unique journal Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJournalTest() throws ApiException {
        String xeroTenantId = null;
        UUID journalID = null;
        Journals response = api.getJournal(xeroTenantId, journalID);
        // TODO: test validations
    }

    /**
     * Retrieves journals
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJournalsTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        Integer offset = null;
        Boolean paymentsOnly = null;
        Journals response = api.getJournals(xeroTenantId, ifModifiedSince, offset, paymentsOnly);
        // TODO: test validations
    }

    /**
     * Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLinkedTransactionTest() throws ApiException {
        String xeroTenantId = null;
        UUID linkedTransactionID = null;
        LinkedTransactions response = api.getLinkedTransaction(xeroTenantId, linkedTransactionID);
        // TODO: test validations
    }

    /**
     * Retrieves linked transactions (billable expenses)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLinkedTransactionsTest() throws ApiException {
        String xeroTenantId = null;
        Integer page = null;
        UUID linkedTransactionID = null;
        UUID sourceTransactionID = null;
        UUID contactID = null;
        String status = null;
        UUID targetTransactionID = null;
        LinkedTransactions response = api.getLinkedTransactions(xeroTenantId, page, linkedTransactionID, sourceTransactionID, contactID, status, targetTransactionID);
        // TODO: test validations
    }

    /**
     * Retrieves a specific manual journal
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getManualJournalTest() throws ApiException {
        String xeroTenantId = null;
        UUID manualJournalID = null;
        ManualJournals response = api.getManualJournal(xeroTenantId, manualJournalID);
        // TODO: test validations
    }

    /**
     * Retrieves a specific attachment from a specific manual journal by file name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getManualJournalAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID manualJournalID = null;
        String fileName = null;
        String contentType = null;
        File response = api.getManualJournalAttachmentByFileName(xeroTenantId, manualJournalID, fileName, contentType);
        // TODO: test validations
    }

    /**
     * Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getManualJournalAttachmentByIdTest() throws ApiException {
        String xeroTenantId = null;
        UUID manualJournalID = null;
        UUID attachmentID = null;
        String contentType = null;
        File response = api.getManualJournalAttachmentById(xeroTenantId, manualJournalID, attachmentID, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves attachment for a specific manual journal
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getManualJournalAttachmentsTest() throws ApiException {
        String xeroTenantId = null;
        UUID manualJournalID = null;
        Attachments response = api.getManualJournalAttachments(xeroTenantId, manualJournalID);
        // TODO: test validations
    }

    /**
     * Retrieves manual journals
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getManualJournalsTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        String where = null;
        String order = null;
        Integer page = null;
        ManualJournals response = api.getManualJournals(xeroTenantId, ifModifiedSince, where, order, page);
        // TODO: test validations
    }

    /**
     * Retrieves history for a specific manual journal
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getManualJournalsHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID manualJournalID = null;
        HistoryRecords response = api.getManualJournalsHistory(xeroTenantId, manualJournalID);
        // TODO: test validations
    }

    /**
     * Retrieves a URL to an online invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOnlineInvoiceTest() throws ApiException {
        String xeroTenantId = null;
        UUID invoiceID = null;
        OnlineInvoices response = api.getOnlineInvoice(xeroTenantId, invoiceID);
        // TODO: test validations
    }

    /**
     * Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationActionsTest() throws ApiException {
        String xeroTenantId = null;
        Actions response = api.getOrganisationActions(xeroTenantId);
        // TODO: test validations
    }

    /**
     * Retrieves the CIS settings for the Xero organistaion.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationCISSettingsTest() throws ApiException {
        String xeroTenantId = null;
        UUID organisationID = null;
        CISOrgSettings response = api.getOrganisationCISSettings(xeroTenantId, organisationID);
        // TODO: test validations
    }

    /**
     * Retrieves Xero organisation details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsTest() throws ApiException {
        String xeroTenantId = null;
        Organisations response = api.getOrganisations(xeroTenantId);
        // TODO: test validations
    }

    /**
     * Retrieves a specific overpayment using a unique overpayment Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOverpaymentTest() throws ApiException {
        String xeroTenantId = null;
        UUID overpaymentID = null;
        Overpayments response = api.getOverpayment(xeroTenantId, overpaymentID);
        // TODO: test validations
    }

    /**
     * Retrieves history records of a specific overpayment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOverpaymentHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID overpaymentID = null;
        HistoryRecords response = api.getOverpaymentHistory(xeroTenantId, overpaymentID);
        // TODO: test validations
    }

    /**
     * Retrieves overpayments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOverpaymentsTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        String where = null;
        String order = null;
        Integer page = null;
        Integer unitdp = null;
        Overpayments response = api.getOverpayments(xeroTenantId, ifModifiedSince, where, order, page, unitdp);
        // TODO: test validations
    }

    /**
     * Retrieves a specific payment for invoices and credit notes using a unique payment Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentTest() throws ApiException {
        String xeroTenantId = null;
        UUID paymentID = null;
        Payments response = api.getPayment(xeroTenantId, paymentID);
        // TODO: test validations
    }

    /**
     * Retrieves history records of a specific payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID paymentID = null;
        HistoryRecords response = api.getPaymentHistory(xeroTenantId, paymentID);
        // TODO: test validations
    }

    /**
     * Retrieves payment services
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentServicesTest() throws ApiException {
        String xeroTenantId = null;
        PaymentServices response = api.getPaymentServices(xeroTenantId);
        // TODO: test validations
    }

    /**
     * Retrieves payments for invoices and credit notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentsTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        String where = null;
        String order = null;
        Integer page = null;
        Payments response = api.getPayments(xeroTenantId, ifModifiedSince, where, order, page);
        // TODO: test validations
    }

    /**
     * Allows you to retrieve a specified prepayments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPrepaymentTest() throws ApiException {
        String xeroTenantId = null;
        UUID prepaymentID = null;
        Prepayments response = api.getPrepayment(xeroTenantId, prepaymentID);
        // TODO: test validations
    }

    /**
     * Retrieves history record for a specific prepayment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPrepaymentHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID prepaymentID = null;
        HistoryRecords response = api.getPrepaymentHistory(xeroTenantId, prepaymentID);
        // TODO: test validations
    }

    /**
     * Retrieves prepayments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPrepaymentsTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        String where = null;
        String order = null;
        Integer page = null;
        Integer unitdp = null;
        Prepayments response = api.getPrepayments(xeroTenantId, ifModifiedSince, where, order, page, unitdp);
        // TODO: test validations
    }

    /**
     * Retrieves a specific purchase order using a unique purchase order Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPurchaseOrderTest() throws ApiException {
        String xeroTenantId = null;
        UUID purchaseOrderID = null;
        PurchaseOrders response = api.getPurchaseOrder(xeroTenantId, purchaseOrderID);
        // TODO: test validations
    }

    /**
     * Retrieves specific purchase order as PDF files using a unique purchase order Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPurchaseOrderAsPdfTest() throws ApiException {
        String xeroTenantId = null;
        UUID purchaseOrderID = null;
        File response = api.getPurchaseOrderAsPdf(xeroTenantId, purchaseOrderID);
        // TODO: test validations
    }

    /**
     * Retrieves a specific attachment for a specific purchase order by filename
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPurchaseOrderAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID purchaseOrderID = null;
        String fileName = null;
        String contentType = null;
        File response = api.getPurchaseOrderAttachmentByFileName(xeroTenantId, purchaseOrderID, fileName, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves specific attachment for a specific purchase order using a unique attachment Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPurchaseOrderAttachmentByIdTest() throws ApiException {
        String xeroTenantId = null;
        UUID purchaseOrderID = null;
        UUID attachmentID = null;
        String contentType = null;
        File response = api.getPurchaseOrderAttachmentById(xeroTenantId, purchaseOrderID, attachmentID, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves attachments for a specific purchase order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPurchaseOrderAttachmentsTest() throws ApiException {
        String xeroTenantId = null;
        UUID purchaseOrderID = null;
        Attachments response = api.getPurchaseOrderAttachments(xeroTenantId, purchaseOrderID);
        // TODO: test validations
    }

    /**
     * Retrieves a specific purchase order using purchase order number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPurchaseOrderByNumberTest() throws ApiException {
        String xeroTenantId = null;
        String purchaseOrderNumber = null;
        PurchaseOrders response = api.getPurchaseOrderByNumber(xeroTenantId, purchaseOrderNumber);
        // TODO: test validations
    }

    /**
     * Retrieves history for a specific purchase order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPurchaseOrderHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID purchaseOrderID = null;
        HistoryRecords response = api.getPurchaseOrderHistory(xeroTenantId, purchaseOrderID);
        // TODO: test validations
    }

    /**
     * Retrieves purchase orders
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPurchaseOrdersTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        String status = null;
        String dateFrom = null;
        String dateTo = null;
        String order = null;
        Integer page = null;
        PurchaseOrders response = api.getPurchaseOrders(xeroTenantId, ifModifiedSince, status, dateFrom, dateTo, order, page);
        // TODO: test validations
    }

    /**
     * Retrieves a specific quote using a unique quote Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuoteTest() throws ApiException {
        String xeroTenantId = null;
        UUID quoteID = null;
        Quotes response = api.getQuote(xeroTenantId, quoteID);
        // TODO: test validations
    }

    /**
     * Retrieves a specific quote as a PDF file using a unique quote Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuoteAsPdfTest() throws ApiException {
        String xeroTenantId = null;
        UUID quoteID = null;
        File response = api.getQuoteAsPdf(xeroTenantId, quoteID);
        // TODO: test validations
    }

    /**
     * Retrieves a specific attachment from a specific quote by filename
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuoteAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID quoteID = null;
        String fileName = null;
        String contentType = null;
        File response = api.getQuoteAttachmentByFileName(xeroTenantId, quoteID, fileName, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves a specific attachment from a specific quote using a unique attachment Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuoteAttachmentByIdTest() throws ApiException {
        String xeroTenantId = null;
        UUID quoteID = null;
        UUID attachmentID = null;
        String contentType = null;
        File response = api.getQuoteAttachmentById(xeroTenantId, quoteID, attachmentID, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves attachments for a specific quote
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuoteAttachmentsTest() throws ApiException {
        String xeroTenantId = null;
        UUID quoteID = null;
        Attachments response = api.getQuoteAttachments(xeroTenantId, quoteID);
        // TODO: test validations
    }

    /**
     * Retrieves history records of a specific quote
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuoteHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID quoteID = null;
        HistoryRecords response = api.getQuoteHistory(xeroTenantId, quoteID);
        // TODO: test validations
    }

    /**
     * Retrieves sales quotes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuotesTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        LocalDate dateFrom = null;
        LocalDate dateTo = null;
        LocalDate expiryDateFrom = null;
        LocalDate expiryDateTo = null;
        UUID contactID = null;
        String status = null;
        Integer page = null;
        String order = null;
        String quoteNumber = null;
        Quotes response = api.getQuotes(xeroTenantId, ifModifiedSince, dateFrom, dateTo, expiryDateFrom, expiryDateTo, contactID, status, page, order, quoteNumber);
        // TODO: test validations
    }

    /**
     * Retrieves a specific draft expense claim receipt by using a unique receipt Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReceiptTest() throws ApiException {
        String xeroTenantId = null;
        UUID receiptID = null;
        Integer unitdp = null;
        Receipts response = api.getReceipt(xeroTenantId, receiptID, unitdp);
        // TODO: test validations
    }

    /**
     * Retrieves a specific attachment from a specific expense claim receipts by file name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReceiptAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID receiptID = null;
        String fileName = null;
        String contentType = null;
        File response = api.getReceiptAttachmentByFileName(xeroTenantId, receiptID, fileName, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReceiptAttachmentByIdTest() throws ApiException {
        String xeroTenantId = null;
        UUID receiptID = null;
        UUID attachmentID = null;
        String contentType = null;
        File response = api.getReceiptAttachmentById(xeroTenantId, receiptID, attachmentID, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves attachments for a specific expense claim receipt
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReceiptAttachmentsTest() throws ApiException {
        String xeroTenantId = null;
        UUID receiptID = null;
        Attachments response = api.getReceiptAttachments(xeroTenantId, receiptID);
        // TODO: test validations
    }

    /**
     * Retrieves a history record for a specific receipt
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReceiptHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID receiptID = null;
        HistoryRecords response = api.getReceiptHistory(xeroTenantId, receiptID);
        // TODO: test validations
    }

    /**
     * Retrieves draft expense claim receipts for any user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReceiptsTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        String where = null;
        String order = null;
        Integer unitdp = null;
        Receipts response = api.getReceipts(xeroTenantId, ifModifiedSince, where, order, unitdp);
        // TODO: test validations
    }

    /**
     * Retrieves a specific repeating invoice by using a unique repeating invoice Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepeatingInvoiceTest() throws ApiException {
        String xeroTenantId = null;
        UUID repeatingInvoiceID = null;
        RepeatingInvoices response = api.getRepeatingInvoice(xeroTenantId, repeatingInvoiceID);
        // TODO: test validations
    }

    /**
     * Retrieves a specific attachment from a specific repeating invoices by file name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepeatingInvoiceAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID repeatingInvoiceID = null;
        String fileName = null;
        String contentType = null;
        File response = api.getRepeatingInvoiceAttachmentByFileName(xeroTenantId, repeatingInvoiceID, fileName, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves a specific attachment from a specific repeating invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepeatingInvoiceAttachmentByIdTest() throws ApiException {
        String xeroTenantId = null;
        UUID repeatingInvoiceID = null;
        UUID attachmentID = null;
        String contentType = null;
        File response = api.getRepeatingInvoiceAttachmentById(xeroTenantId, repeatingInvoiceID, attachmentID, contentType);
        // TODO: test validations
    }

    /**
     * Retrieves attachments from a specific repeating invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepeatingInvoiceAttachmentsTest() throws ApiException {
        String xeroTenantId = null;
        UUID repeatingInvoiceID = null;
        Attachments response = api.getRepeatingInvoiceAttachments(xeroTenantId, repeatingInvoiceID);
        // TODO: test validations
    }

    /**
     * Retrieves history record for a specific repeating invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepeatingInvoiceHistoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID repeatingInvoiceID = null;
        HistoryRecords response = api.getRepeatingInvoiceHistory(xeroTenantId, repeatingInvoiceID);
        // TODO: test validations
    }

    /**
     * Retrieves repeating invoices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepeatingInvoicesTest() throws ApiException {
        String xeroTenantId = null;
        String where = null;
        String order = null;
        RepeatingInvoices response = api.getRepeatingInvoices(xeroTenantId, where, order);
        // TODO: test validations
    }

    /**
     * Retrieves report for aged payables by contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportAgedPayablesByContactTest() throws ApiException {
        String xeroTenantId = null;
        UUID contactId = null;
        LocalDate date = null;
        LocalDate fromDate = null;
        LocalDate toDate = null;
        ReportWithRows response = api.getReportAgedPayablesByContact(xeroTenantId, contactId, date, fromDate, toDate);
        // TODO: test validations
    }

    /**
     * Retrieves report for aged receivables by contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportAgedReceivablesByContactTest() throws ApiException {
        String xeroTenantId = null;
        UUID contactId = null;
        LocalDate date = null;
        LocalDate fromDate = null;
        LocalDate toDate = null;
        ReportWithRows response = api.getReportAgedReceivablesByContact(xeroTenantId, contactId, date, fromDate, toDate);
        // TODO: test validations
    }

    /**
     * Retrieves a specific report for BAS using a unique report Id (only valid for AU orgs)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportBASorGSTTest() throws ApiException {
        String xeroTenantId = null;
        String reportID = null;
        ReportWithRows response = api.getReportBASorGST(xeroTenantId, reportID);
        // TODO: test validations
    }

    /**
     * Retrieves report for BAS (only valid for AU orgs)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportBASorGSTListTest() throws ApiException {
        String xeroTenantId = null;
        ReportWithRows response = api.getReportBASorGSTList(xeroTenantId);
        // TODO: test validations
    }

    /**
     * Retrieves report for balancesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportBalanceSheetTest() throws ApiException {
        String xeroTenantId = null;
        LocalDate date = null;
        Integer periods = null;
        String timeframe = null;
        String trackingOptionID1 = null;
        String trackingOptionID2 = null;
        Boolean standardLayout = null;
        Boolean paymentsOnly = null;
        ReportWithRows response = api.getReportBalanceSheet(xeroTenantId, date, periods, timeframe, trackingOptionID1, trackingOptionID2, standardLayout, paymentsOnly);
        // TODO: test validations
    }

    /**
     * Retrieves report for bank summary
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportBankSummaryTest() throws ApiException {
        String xeroTenantId = null;
        LocalDate fromDate = null;
        LocalDate toDate = null;
        ReportWithRows response = api.getReportBankSummary(xeroTenantId, fromDate, toDate);
        // TODO: test validations
    }

    /**
     * Retrieves report for budget summary
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportBudgetSummaryTest() throws ApiException {
        String xeroTenantId = null;
        LocalDate date = null;
        Integer period = null;
        Integer timeframe = null;
        ReportWithRows response = api.getReportBudgetSummary(xeroTenantId, date, period, timeframe);
        // TODO: test validations
    }

    /**
     * Retrieves report for executive summary
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportExecutiveSummaryTest() throws ApiException {
        String xeroTenantId = null;
        LocalDate date = null;
        ReportWithRows response = api.getReportExecutiveSummary(xeroTenantId, date);
        // TODO: test validations
    }

    /**
     * Retrieves report for profit and loss
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportProfitAndLossTest() throws ApiException {
        String xeroTenantId = null;
        LocalDate fromDate = null;
        LocalDate toDate = null;
        Integer periods = null;
        String timeframe = null;
        String trackingCategoryID = null;
        String trackingCategoryID2 = null;
        String trackingOptionID = null;
        String trackingOptionID2 = null;
        Boolean standardLayout = null;
        Boolean paymentsOnly = null;
        ReportWithRows response = api.getReportProfitAndLoss(xeroTenantId, fromDate, toDate, periods, timeframe, trackingCategoryID, trackingCategoryID2, trackingOptionID, trackingOptionID2, standardLayout, paymentsOnly);
        // TODO: test validations
    }

    /**
     * Retrieve reports for 1099
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportTenNinetyNineTest() throws ApiException {
        String xeroTenantId = null;
        String reportYear = null;
        Reports response = api.getReportTenNinetyNine(xeroTenantId, reportYear);
        // TODO: test validations
    }

    /**
     * Retrieves report for trial balance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportTrialBalanceTest() throws ApiException {
        String xeroTenantId = null;
        LocalDate date = null;
        Boolean paymentsOnly = null;
        ReportWithRows response = api.getReportTrialBalance(xeroTenantId, date, paymentsOnly);
        // TODO: test validations
    }

    /**
     * Retrieves tax rates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaxRatesTest() throws ApiException {
        String xeroTenantId = null;
        String where = null;
        String order = null;
        String taxType = null;
        TaxRates response = api.getTaxRates(xeroTenantId, where, order, taxType);
        // TODO: test validations
    }

    /**
     * Retrieves tracking categories and options
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrackingCategoriesTest() throws ApiException {
        String xeroTenantId = null;
        String where = null;
        String order = null;
        Boolean includeArchived = null;
        TrackingCategories response = api.getTrackingCategories(xeroTenantId, where, order, includeArchived);
        // TODO: test validations
    }

    /**
     * Retrieves specific tracking categories and options using a unique tracking category Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrackingCategoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID trackingCategoryID = null;
        TrackingCategories response = api.getTrackingCategory(xeroTenantId, trackingCategoryID);
        // TODO: test validations
    }

    /**
     * Retrieves a specific user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String xeroTenantId = null;
        UUID userID = null;
        Users response = api.getUser(xeroTenantId, userID);
        // TODO: test validations
    }

    /**
     * Retrieves users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        String xeroTenantId = null;
        OffsetDateTime ifModifiedSince = null;
        String where = null;
        String order = null;
        Users response = api.getUsers(xeroTenantId, ifModifiedSince, where, order);
        // TODO: test validations
    }

    /**
     * Sets the chart of accounts, the conversion date and conversion balances
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSetupTest() throws ApiException {
        String xeroTenantId = null;
        Setup setup = null;
        ImportSummaryObject response = api.postSetup(xeroTenantId, setup);
        // TODO: test validations
    }

    /**
     * Updates a chart of accounts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountTest() throws ApiException {
        String xeroTenantId = null;
        UUID accountID = null;
        Accounts accounts = null;
        Accounts response = api.updateAccount(xeroTenantId, accountID, accounts);
        // TODO: test validations
    }

    /**
     * Updates attachment on a specific account by filename
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID accountID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.updateAccountAttachmentByFileName(xeroTenantId, accountID, fileName, body);
        // TODO: test validations
    }

    /**
     * Updates a single spent or received money transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBankTransactionTest() throws ApiException {
        String xeroTenantId = null;
        UUID bankTransactionID = null;
        BankTransactions bankTransactions = null;
        Integer unitdp = null;
        BankTransactions response = api.updateBankTransaction(xeroTenantId, bankTransactionID, bankTransactions, unitdp);
        // TODO: test validations
    }

    /**
     * Updates a specific attachment from a specific bank transaction by filename
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBankTransactionAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID bankTransactionID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.updateBankTransactionAttachmentByFileName(xeroTenantId, bankTransactionID, fileName, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBankTransferAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID bankTransferID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.updateBankTransferAttachmentByFileName(xeroTenantId, bankTransferID, fileName, body);
        // TODO: test validations
    }

    /**
     * Updates a specific contact in a Xero organisation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactTest() throws ApiException {
        String xeroTenantId = null;
        UUID contactID = null;
        Contacts contacts = null;
        Contacts response = api.updateContact(xeroTenantId, contactID, contacts);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID contactID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.updateContactAttachmentByFileName(xeroTenantId, contactID, fileName, body);
        // TODO: test validations
    }

    /**
     * Updates a specific contact group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactGroupTest() throws ApiException {
        String xeroTenantId = null;
        UUID contactGroupID = null;
        ContactGroups contactGroups = null;
        ContactGroups response = api.updateContactGroup(xeroTenantId, contactGroupID, contactGroups);
        // TODO: test validations
    }

    /**
     * Updates a specific credit note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCreditNoteTest() throws ApiException {
        String xeroTenantId = null;
        UUID creditNoteID = null;
        CreditNotes creditNotes = null;
        Integer unitdp = null;
        CreditNotes response = api.updateCreditNote(xeroTenantId, creditNoteID, creditNotes, unitdp);
        // TODO: test validations
    }

    /**
     * Updates attachments on a specific credit note by file name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCreditNoteAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID creditNoteID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.updateCreditNoteAttachmentByFileName(xeroTenantId, creditNoteID, fileName, body);
        // TODO: test validations
    }

    /**
     * Updates a specific expense claims
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExpenseClaimTest() throws ApiException {
        String xeroTenantId = null;
        UUID expenseClaimID = null;
        ExpenseClaims expenseClaims = null;
        ExpenseClaims response = api.updateExpenseClaim(xeroTenantId, expenseClaimID, expenseClaims);
        // TODO: test validations
    }

    /**
     * Updates a specific sales invoices or purchase bills
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInvoiceTest() throws ApiException {
        String xeroTenantId = null;
        UUID invoiceID = null;
        Invoices invoices = null;
        Integer unitdp = null;
        Invoices response = api.updateInvoice(xeroTenantId, invoiceID, invoices, unitdp);
        // TODO: test validations
    }

    /**
     * Updates an attachment from a specific invoices or purchase bill by filename
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInvoiceAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID invoiceID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.updateInvoiceAttachmentByFileName(xeroTenantId, invoiceID, fileName, body);
        // TODO: test validations
    }

    /**
     * Updates a specific item
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemTest() throws ApiException {
        String xeroTenantId = null;
        UUID itemID = null;
        Items items = null;
        Integer unitdp = null;
        Items response = api.updateItem(xeroTenantId, itemID, items, unitdp);
        // TODO: test validations
    }

    /**
     * Updates a specific linked transactions (billable expenses)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLinkedTransactionTest() throws ApiException {
        String xeroTenantId = null;
        UUID linkedTransactionID = null;
        LinkedTransactions linkedTransactions = null;
        LinkedTransactions response = api.updateLinkedTransaction(xeroTenantId, linkedTransactionID, linkedTransactions);
        // TODO: test validations
    }

    /**
     * Updates a specific manual journal
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateManualJournalTest() throws ApiException {
        String xeroTenantId = null;
        UUID manualJournalID = null;
        ManualJournals manualJournals = null;
        ManualJournals response = api.updateManualJournal(xeroTenantId, manualJournalID, manualJournals);
        // TODO: test validations
    }

    /**
     * Updates a specific attachment from a specific manual journal by file name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateManualJournalAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID manualJournalID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.updateManualJournalAttachmentByFileName(xeroTenantId, manualJournalID, fileName, body);
        // TODO: test validations
    }

    /**
     * Updates or creates one or more spent or received money transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrCreateBankTransactionsTest() throws ApiException {
        String xeroTenantId = null;
        BankTransactions bankTransactions = null;
        Boolean summarizeErrors = null;
        Integer unitdp = null;
        BankTransactions response = api.updateOrCreateBankTransactions(xeroTenantId, bankTransactions, summarizeErrors, unitdp);
        // TODO: test validations
    }

    /**
     * Updates or creates one or more contacts in a Xero organisation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrCreateContactsTest() throws ApiException {
        String xeroTenantId = null;
        Contacts contacts = null;
        Boolean summarizeErrors = null;
        Contacts response = api.updateOrCreateContacts(xeroTenantId, contacts, summarizeErrors);
        // TODO: test validations
    }

    /**
     * Updates or creates one or more credit notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrCreateCreditNotesTest() throws ApiException {
        String xeroTenantId = null;
        CreditNotes creditNotes = null;
        Boolean summarizeErrors = null;
        Integer unitdp = null;
        CreditNotes response = api.updateOrCreateCreditNotes(xeroTenantId, creditNotes, summarizeErrors, unitdp);
        // TODO: test validations
    }

    /**
     * Creates a single new employees used in Xero payrun
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrCreateEmployeesTest() throws ApiException {
        String xeroTenantId = null;
        Employees employees = null;
        Boolean summarizeErrors = null;
        Employees response = api.updateOrCreateEmployees(xeroTenantId, employees, summarizeErrors);
        // TODO: test validations
    }

    /**
     * Updates or creates one or more sales invoices or purchase bills
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrCreateInvoicesTest() throws ApiException {
        String xeroTenantId = null;
        Invoices invoices = null;
        Boolean summarizeErrors = null;
        Integer unitdp = null;
        Invoices response = api.updateOrCreateInvoices(xeroTenantId, invoices, summarizeErrors, unitdp);
        // TODO: test validations
    }

    /**
     * Updates or creates one or more items
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrCreateItemsTest() throws ApiException {
        String xeroTenantId = null;
        Items items = null;
        Boolean summarizeErrors = null;
        Integer unitdp = null;
        Items response = api.updateOrCreateItems(xeroTenantId, items, summarizeErrors, unitdp);
        // TODO: test validations
    }

    /**
     * Updates or creates a single manual journal
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrCreateManualJournalsTest() throws ApiException {
        String xeroTenantId = null;
        ManualJournals manualJournals = null;
        Boolean summarizeErrors = null;
        ManualJournals response = api.updateOrCreateManualJournals(xeroTenantId, manualJournals, summarizeErrors);
        // TODO: test validations
    }

    /**
     * Updates or creates one or more purchase orders
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrCreatePurchaseOrdersTest() throws ApiException {
        String xeroTenantId = null;
        PurchaseOrders purchaseOrders = null;
        Boolean summarizeErrors = null;
        PurchaseOrders response = api.updateOrCreatePurchaseOrders(xeroTenantId, purchaseOrders, summarizeErrors);
        // TODO: test validations
    }

    /**
     * Updates or creates one or more quotes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrCreateQuotesTest() throws ApiException {
        String xeroTenantId = null;
        Quotes quotes = null;
        Boolean summarizeErrors = null;
        Quotes response = api.updateOrCreateQuotes(xeroTenantId, quotes, summarizeErrors);
        // TODO: test validations
    }

    /**
     * Updates a specific purchase order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePurchaseOrderTest() throws ApiException {
        String xeroTenantId = null;
        UUID purchaseOrderID = null;
        PurchaseOrders purchaseOrders = null;
        PurchaseOrders response = api.updatePurchaseOrder(xeroTenantId, purchaseOrderID, purchaseOrders);
        // TODO: test validations
    }

    /**
     * Updates a specific attachment for a specific purchase order by filename
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePurchaseOrderAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID purchaseOrderID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.updatePurchaseOrderAttachmentByFileName(xeroTenantId, purchaseOrderID, fileName, body);
        // TODO: test validations
    }

    /**
     * Updates a specific quote
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateQuoteTest() throws ApiException {
        String xeroTenantId = null;
        UUID quoteID = null;
        Quotes quotes = null;
        Quotes response = api.updateQuote(xeroTenantId, quoteID, quotes);
        // TODO: test validations
    }

    /**
     * Updates a specific attachment from a specific quote by filename
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateQuoteAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID quoteID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.updateQuoteAttachmentByFileName(xeroTenantId, quoteID, fileName, body);
        // TODO: test validations
    }

    /**
     * Updates a specific draft expense claim receipts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReceiptTest() throws ApiException {
        String xeroTenantId = null;
        UUID receiptID = null;
        Receipts receipts = null;
        Integer unitdp = null;
        Receipts response = api.updateReceipt(xeroTenantId, receiptID, receipts, unitdp);
        // TODO: test validations
    }

    /**
     * Updates a specific attachment on a specific expense claim receipts by file name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReceiptAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID receiptID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.updateReceiptAttachmentByFileName(xeroTenantId, receiptID, fileName, body);
        // TODO: test validations
    }

    /**
     * Updates a specific attachment from a specific repeating invoices by file name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRepeatingInvoiceAttachmentByFileNameTest() throws ApiException {
        String xeroTenantId = null;
        UUID repeatingInvoiceID = null;
        String fileName = null;
        byte[] body = null;
        Attachments response = api.updateRepeatingInvoiceAttachmentByFileName(xeroTenantId, repeatingInvoiceID, fileName, body);
        // TODO: test validations
    }

    /**
     * Updates tax rates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTaxRateTest() throws ApiException {
        String xeroTenantId = null;
        TaxRates taxRates = null;
        TaxRates response = api.updateTaxRate(xeroTenantId, taxRates);
        // TODO: test validations
    }

    /**
     * Updates a specific tracking category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTrackingCategoryTest() throws ApiException {
        String xeroTenantId = null;
        UUID trackingCategoryID = null;
        TrackingCategory trackingCategory = null;
        TrackingCategories response = api.updateTrackingCategory(xeroTenantId, trackingCategoryID, trackingCategory);
        // TODO: test validations
    }

    /**
     * Updates a specific option for a specific tracking category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTrackingOptionsTest() throws ApiException {
        String xeroTenantId = null;
        UUID trackingCategoryID = null;
        UUID trackingOptionID = null;
        TrackingOption trackingOption = null;
        TrackingOptions response = api.updateTrackingOptions(xeroTenantId, trackingCategoryID, trackingOptionID, trackingOption);
        // TODO: test validations
    }

}
