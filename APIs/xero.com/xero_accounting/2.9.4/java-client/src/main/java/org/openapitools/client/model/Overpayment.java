/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Allocation;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.CurrencyCode;
import org.openapitools.client.model.LineAmountTypes;
import org.openapitools.client.model.LineItem;
import org.openapitools.client.model.Payment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Overpayment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Overpayment {
  public static final String SERIALIZED_NAME_ALLOCATIONS = "Allocations";
  @SerializedName(SERIALIZED_NAME_ALLOCATIONS)
  private List<Allocation> allocations = new ArrayList<>();

  public static final String SERIALIZED_NAME_APPLIED_AMOUNT = "AppliedAmount";
  @SerializedName(SERIALIZED_NAME_APPLIED_AMOUNT)
  private Double appliedAmount;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "Attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<Attachment> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTACT = "Contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private Contact contact;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private CurrencyCode currencyCode;

  public static final String SERIALIZED_NAME_CURRENCY_RATE = "CurrencyRate";
  @SerializedName(SERIALIZED_NAME_CURRENCY_RATE)
  private Double currencyRate;

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_HAS_ATTACHMENTS = "HasAttachments";
  @SerializedName(SERIALIZED_NAME_HAS_ATTACHMENTS)
  private Boolean hasAttachments = false;

  public static final String SERIALIZED_NAME_LINE_AMOUNT_TYPES = "LineAmountTypes";
  @SerializedName(SERIALIZED_NAME_LINE_AMOUNT_TYPES)
  private LineAmountTypes lineAmountTypes;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "LineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<LineItem> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_OVERPAYMENT_I_D = "OverpaymentID";
  @SerializedName(SERIALIZED_NAME_OVERPAYMENT_I_D)
  private UUID overpaymentID;

  public static final String SERIALIZED_NAME_PAYMENTS = "Payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  private List<Payment> payments = new ArrayList<>();

  public static final String SERIALIZED_NAME_REMAINING_CREDIT = "RemainingCredit";
  @SerializedName(SERIALIZED_NAME_REMAINING_CREDIT)
  private Double remainingCredit;

  /**
   * See Overpayment Status Codes
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    AUTHORISED("AUTHORISED"),
    
    PAID("PAID"),
    
    VOIDED("VOIDED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUB_TOTAL = "SubTotal";
  @SerializedName(SERIALIZED_NAME_SUB_TOTAL)
  private Double subTotal;

  public static final String SERIALIZED_NAME_TOTAL = "Total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public static final String SERIALIZED_NAME_TOTAL_TAX = "TotalTax";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX)
  private Double totalTax;

  /**
   * See Overpayment Types
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    RECEIVE_OVERPAYMENT("RECEIVE-OVERPAYMENT"),
    
    SPEND_OVERPAYMENT("SPEND-OVERPAYMENT"),
    
    AROVERPAYMENT("AROVERPAYMENT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public Overpayment() {
  }

  public Overpayment(
     Boolean hasAttachments, 
     String updatedDateUTC
  ) {
    this();
    this.hasAttachments = hasAttachments;
    this.updatedDateUTC = updatedDateUTC;
  }

  public Overpayment allocations(List<Allocation> allocations) {
    this.allocations = allocations;
    return this;
  }

  public Overpayment addAllocationsItem(Allocation allocationsItem) {
    if (this.allocations == null) {
      this.allocations = new ArrayList<>();
    }
    this.allocations.add(allocationsItem);
    return this;
  }

  /**
   * See Allocations
   * @return allocations
   */
  @javax.annotation.Nullable
  public List<Allocation> getAllocations() {
    return allocations;
  }

  public void setAllocations(List<Allocation> allocations) {
    this.allocations = allocations;
  }


  public Overpayment appliedAmount(Double appliedAmount) {
    this.appliedAmount = appliedAmount;
    return this;
  }

  /**
   * The amount of applied to an invoice
   * @return appliedAmount
   */
  @javax.annotation.Nullable
  public Double getAppliedAmount() {
    return appliedAmount;
  }

  public void setAppliedAmount(Double appliedAmount) {
    this.appliedAmount = appliedAmount;
  }


  public Overpayment attachments(List<Attachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public Overpayment addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * See Attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<Attachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<Attachment> attachments) {
    this.attachments = attachments;
  }


  public Overpayment contact(Contact contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nullable
  public Contact getContact() {
    return contact;
  }

  public void setContact(Contact contact) {
    this.contact = contact;
  }


  public Overpayment currencyCode(CurrencyCode currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public CurrencyCode getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(CurrencyCode currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Overpayment currencyRate(Double currencyRate) {
    this.currencyRate = currencyRate;
    return this;
  }

  /**
   * The currency rate for a multicurrency overpayment. If no rate is specified, the XE.com day rate is used
   * @return currencyRate
   */
  @javax.annotation.Nullable
  public Double getCurrencyRate() {
    return currencyRate;
  }

  public void setCurrencyRate(Double currencyRate) {
    this.currencyRate = currencyRate;
  }


  public Overpayment date(String date) {
    this.date = date;
    return this;
  }

  /**
   * The date the overpayment is created YYYY-MM-DD
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  /**
   * boolean to indicate if a overpayment has an attachment
   * @return hasAttachments
   */
  @javax.annotation.Nullable
  public Boolean getHasAttachments() {
    return hasAttachments;
  }



  public Overpayment lineAmountTypes(LineAmountTypes lineAmountTypes) {
    this.lineAmountTypes = lineAmountTypes;
    return this;
  }

  /**
   * Get lineAmountTypes
   * @return lineAmountTypes
   */
  @javax.annotation.Nullable
  public LineAmountTypes getLineAmountTypes() {
    return lineAmountTypes;
  }

  public void setLineAmountTypes(LineAmountTypes lineAmountTypes) {
    this.lineAmountTypes = lineAmountTypes;
  }


  public Overpayment lineItems(List<LineItem> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public Overpayment addLineItemsItem(LineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * See Overpayment Line Items
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<LineItem> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<LineItem> lineItems) {
    this.lineItems = lineItems;
  }


  public Overpayment overpaymentID(UUID overpaymentID) {
    this.overpaymentID = overpaymentID;
    return this;
  }

  /**
   * Xero generated unique identifier
   * @return overpaymentID
   */
  @javax.annotation.Nullable
  public UUID getOverpaymentID() {
    return overpaymentID;
  }

  public void setOverpaymentID(UUID overpaymentID) {
    this.overpaymentID = overpaymentID;
  }


  public Overpayment payments(List<Payment> payments) {
    this.payments = payments;
    return this;
  }

  public Overpayment addPaymentsItem(Payment paymentsItem) {
    if (this.payments == null) {
      this.payments = new ArrayList<>();
    }
    this.payments.add(paymentsItem);
    return this;
  }

  /**
   * See Payments
   * @return payments
   */
  @javax.annotation.Nullable
  public List<Payment> getPayments() {
    return payments;
  }

  public void setPayments(List<Payment> payments) {
    this.payments = payments;
  }


  public Overpayment remainingCredit(Double remainingCredit) {
    this.remainingCredit = remainingCredit;
    return this;
  }

  /**
   * The remaining credit balance on the overpayment
   * @return remainingCredit
   */
  @javax.annotation.Nullable
  public Double getRemainingCredit() {
    return remainingCredit;
  }

  public void setRemainingCredit(Double remainingCredit) {
    this.remainingCredit = remainingCredit;
  }


  public Overpayment status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * See Overpayment Status Codes
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Overpayment subTotal(Double subTotal) {
    this.subTotal = subTotal;
    return this;
  }

  /**
   * The subtotal of the overpayment excluding taxes
   * @return subTotal
   */
  @javax.annotation.Nullable
  public Double getSubTotal() {
    return subTotal;
  }

  public void setSubTotal(Double subTotal) {
    this.subTotal = subTotal;
  }


  public Overpayment total(Double total) {
    this.total = total;
    return this;
  }

  /**
   * The total of the overpayment (subtotal + total tax)
   * @return total
   */
  @javax.annotation.Nullable
  public Double getTotal() {
    return total;
  }

  public void setTotal(Double total) {
    this.total = total;
  }


  public Overpayment totalTax(Double totalTax) {
    this.totalTax = totalTax;
    return this;
  }

  /**
   * The total tax on the overpayment
   * @return totalTax
   */
  @javax.annotation.Nullable
  public Double getTotalTax() {
    return totalTax;
  }

  public void setTotalTax(Double totalTax) {
    this.totalTax = totalTax;
  }


  public Overpayment type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * See Overpayment Types
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * UTC timestamp of last update to the overpayment
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Overpayment overpayment = (Overpayment) o;
    return Objects.equals(this.allocations, overpayment.allocations) &&
        Objects.equals(this.appliedAmount, overpayment.appliedAmount) &&
        Objects.equals(this.attachments, overpayment.attachments) &&
        Objects.equals(this.contact, overpayment.contact) &&
        Objects.equals(this.currencyCode, overpayment.currencyCode) &&
        Objects.equals(this.currencyRate, overpayment.currencyRate) &&
        Objects.equals(this.date, overpayment.date) &&
        Objects.equals(this.hasAttachments, overpayment.hasAttachments) &&
        Objects.equals(this.lineAmountTypes, overpayment.lineAmountTypes) &&
        Objects.equals(this.lineItems, overpayment.lineItems) &&
        Objects.equals(this.overpaymentID, overpayment.overpaymentID) &&
        Objects.equals(this.payments, overpayment.payments) &&
        Objects.equals(this.remainingCredit, overpayment.remainingCredit) &&
        Objects.equals(this.status, overpayment.status) &&
        Objects.equals(this.subTotal, overpayment.subTotal) &&
        Objects.equals(this.total, overpayment.total) &&
        Objects.equals(this.totalTax, overpayment.totalTax) &&
        Objects.equals(this.type, overpayment.type) &&
        Objects.equals(this.updatedDateUTC, overpayment.updatedDateUTC);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocations, appliedAmount, attachments, contact, currencyCode, currencyRate, date, hasAttachments, lineAmountTypes, lineItems, overpaymentID, payments, remainingCredit, status, subTotal, total, totalTax, type, updatedDateUTC);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Overpayment {\n");
    sb.append("    allocations: ").append(toIndentedString(allocations)).append("\n");
    sb.append("    appliedAmount: ").append(toIndentedString(appliedAmount)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currencyRate: ").append(toIndentedString(currencyRate)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    hasAttachments: ").append(toIndentedString(hasAttachments)).append("\n");
    sb.append("    lineAmountTypes: ").append(toIndentedString(lineAmountTypes)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    overpaymentID: ").append(toIndentedString(overpaymentID)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    remainingCredit: ").append(toIndentedString(remainingCredit)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subTotal: ").append(toIndentedString(subTotal)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totalTax: ").append(toIndentedString(totalTax)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Allocations");
    openapiFields.add("AppliedAmount");
    openapiFields.add("Attachments");
    openapiFields.add("Contact");
    openapiFields.add("CurrencyCode");
    openapiFields.add("CurrencyRate");
    openapiFields.add("Date");
    openapiFields.add("HasAttachments");
    openapiFields.add("LineAmountTypes");
    openapiFields.add("LineItems");
    openapiFields.add("OverpaymentID");
    openapiFields.add("Payments");
    openapiFields.add("RemainingCredit");
    openapiFields.add("Status");
    openapiFields.add("SubTotal");
    openapiFields.add("Total");
    openapiFields.add("TotalTax");
    openapiFields.add("Type");
    openapiFields.add("UpdatedDateUTC");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Overpayment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Overpayment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Overpayment is not found in the empty JSON string", Overpayment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Overpayment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Overpayment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Allocations") != null && !jsonObj.get("Allocations").isJsonNull()) {
        JsonArray jsonArrayallocations = jsonObj.getAsJsonArray("Allocations");
        if (jsonArrayallocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Allocations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Allocations` to be an array in the JSON string but got `%s`", jsonObj.get("Allocations").toString()));
          }

          // validate the optional field `Allocations` (array)
          for (int i = 0; i < jsonArrayallocations.size(); i++) {
            Allocation.validateJsonElement(jsonArrayallocations.get(i));
          };
        }
      }
      if (jsonObj.get("Attachments") != null && !jsonObj.get("Attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("Attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Attachments` to be an array in the JSON string but got `%s`", jsonObj.get("Attachments").toString()));
          }

          // validate the optional field `Attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            Attachment.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      // validate the optional field `Contact`
      if (jsonObj.get("Contact") != null && !jsonObj.get("Contact").isJsonNull()) {
        Contact.validateJsonElement(jsonObj.get("Contact"));
      }
      if ((jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) && !jsonObj.get("CurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencyCode").toString()));
      }
      // validate the optional field `CurrencyCode`
      if (jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) {
        CurrencyCode.validateJsonElement(jsonObj.get("CurrencyCode"));
      }
      if ((jsonObj.get("Date") != null && !jsonObj.get("Date").isJsonNull()) && !jsonObj.get("Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Date").toString()));
      }
      if ((jsonObj.get("LineAmountTypes") != null && !jsonObj.get("LineAmountTypes").isJsonNull()) && !jsonObj.get("LineAmountTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LineAmountTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LineAmountTypes").toString()));
      }
      // validate the optional field `LineAmountTypes`
      if (jsonObj.get("LineAmountTypes") != null && !jsonObj.get("LineAmountTypes").isJsonNull()) {
        LineAmountTypes.validateJsonElement(jsonObj.get("LineAmountTypes"));
      }
      if (jsonObj.get("LineItems") != null && !jsonObj.get("LineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("LineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LineItems` to be an array in the JSON string but got `%s`", jsonObj.get("LineItems").toString()));
          }

          // validate the optional field `LineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            LineItem.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      if ((jsonObj.get("OverpaymentID") != null && !jsonObj.get("OverpaymentID").isJsonNull()) && !jsonObj.get("OverpaymentID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OverpaymentID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OverpaymentID").toString()));
      }
      if (jsonObj.get("Payments") != null && !jsonObj.get("Payments").isJsonNull()) {
        JsonArray jsonArraypayments = jsonObj.getAsJsonArray("Payments");
        if (jsonArraypayments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Payments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Payments` to be an array in the JSON string but got `%s`", jsonObj.get("Payments").toString()));
          }

          // validate the optional field `Payments` (array)
          for (int i = 0; i < jsonArraypayments.size(); i++) {
            Payment.validateJsonElement(jsonArraypayments.get(i));
          };
        }
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("Type"));
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Overpayment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Overpayment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Overpayment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Overpayment.class));

       return (TypeAdapter<T>) new TypeAdapter<Overpayment>() {
           @Override
           public void write(JsonWriter out, Overpayment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Overpayment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Overpayment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Overpayment
   * @throws IOException if the JSON string is invalid with respect to Overpayment
   */
  public static Overpayment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Overpayment.class);
  }

  /**
   * Convert an instance of Overpayment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

