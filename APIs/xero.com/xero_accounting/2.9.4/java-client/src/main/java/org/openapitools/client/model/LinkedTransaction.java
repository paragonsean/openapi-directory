/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ValidationError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LinkedTransaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LinkedTransaction {
  public static final String SERIALIZED_NAME_CONTACT_I_D = "ContactID";
  @SerializedName(SERIALIZED_NAME_CONTACT_I_D)
  private UUID contactID;

  public static final String SERIALIZED_NAME_LINKED_TRANSACTION_I_D = "LinkedTransactionID";
  @SerializedName(SERIALIZED_NAME_LINKED_TRANSACTION_I_D)
  private UUID linkedTransactionID;

  public static final String SERIALIZED_NAME_SOURCE_LINE_ITEM_I_D = "SourceLineItemID";
  @SerializedName(SERIALIZED_NAME_SOURCE_LINE_ITEM_I_D)
  private UUID sourceLineItemID;

  public static final String SERIALIZED_NAME_SOURCE_TRANSACTION_I_D = "SourceTransactionID";
  @SerializedName(SERIALIZED_NAME_SOURCE_TRANSACTION_I_D)
  private UUID sourceTransactionID;

  /**
   * The Type of the source tranasction. This will be ACCPAY if the linked transaction was created from an invoice and SPEND if it was created from a bank transaction.
   */
  @JsonAdapter(SourceTransactionTypeCodeEnum.Adapter.class)
  public enum SourceTransactionTypeCodeEnum {
    ACCPAY("ACCPAY"),
    
    SPEND("SPEND");

    private String value;

    SourceTransactionTypeCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceTransactionTypeCodeEnum fromValue(String value) {
      for (SourceTransactionTypeCodeEnum b : SourceTransactionTypeCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceTransactionTypeCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceTransactionTypeCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceTransactionTypeCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceTransactionTypeCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceTransactionTypeCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_TRANSACTION_TYPE_CODE = "SourceTransactionTypeCode";
  @SerializedName(SERIALIZED_NAME_SOURCE_TRANSACTION_TYPE_CODE)
  private SourceTransactionTypeCodeEnum sourceTransactionTypeCode;

  /**
   * Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    APPROVED("APPROVED"),
    
    DRAFT("DRAFT"),
    
    ONDRAFT("ONDRAFT"),
    
    BILLED("BILLED"),
    
    VOIDED("VOIDED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TARGET_LINE_ITEM_I_D = "TargetLineItemID";
  @SerializedName(SERIALIZED_NAME_TARGET_LINE_ITEM_I_D)
  private UUID targetLineItemID;

  public static final String SERIALIZED_NAME_TARGET_TRANSACTION_I_D = "TargetTransactionID";
  @SerializedName(SERIALIZED_NAME_TARGET_TRANSACTION_I_D)
  private UUID targetTransactionID;

  /**
   * This will always be BILLABLEEXPENSE. More types may be added in future.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BILLABLEEXPENSE("BILLABLEEXPENSE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "ValidationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<ValidationError> validationErrors = new ArrayList<>();

  public LinkedTransaction() {
  }

  public LinkedTransaction(
     String updatedDateUTC
  ) {
    this();
    this.updatedDateUTC = updatedDateUTC;
  }

  public LinkedTransaction contactID(UUID contactID) {
    this.contactID = contactID;
    return this;
  }

  /**
   * Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED.
   * @return contactID
   */
  @javax.annotation.Nullable
  public UUID getContactID() {
    return contactID;
  }

  public void setContactID(UUID contactID) {
    this.contactID = contactID;
  }


  public LinkedTransaction linkedTransactionID(UUID linkedTransactionID) {
    this.linkedTransactionID = linkedTransactionID;
    return this;
  }

  /**
   * The Xero identifier for an Linked Transaction e.g./LinkedTransactions/297c2dc5-cc47-4afd-8ec8-74990b8761e9
   * @return linkedTransactionID
   */
  @javax.annotation.Nullable
  public UUID getLinkedTransactionID() {
    return linkedTransactionID;
  }

  public void setLinkedTransactionID(UUID linkedTransactionID) {
    this.linkedTransactionID = linkedTransactionID;
  }


  public LinkedTransaction sourceLineItemID(UUID sourceLineItemID) {
    this.sourceLineItemID = sourceLineItemID;
    return this;
  }

  /**
   * The line item identifier from the source transaction.
   * @return sourceLineItemID
   */
  @javax.annotation.Nullable
  public UUID getSourceLineItemID() {
    return sourceLineItemID;
  }

  public void setSourceLineItemID(UUID sourceLineItemID) {
    this.sourceLineItemID = sourceLineItemID;
  }


  public LinkedTransaction sourceTransactionID(UUID sourceTransactionID) {
    this.sourceTransactionID = sourceTransactionID;
    return this;
  }

  /**
   * Filter by the SourceTransactionID. Get all the linked transactions created from a particular ACCPAY invoice
   * @return sourceTransactionID
   */
  @javax.annotation.Nullable
  public UUID getSourceTransactionID() {
    return sourceTransactionID;
  }

  public void setSourceTransactionID(UUID sourceTransactionID) {
    this.sourceTransactionID = sourceTransactionID;
  }


  public LinkedTransaction sourceTransactionTypeCode(SourceTransactionTypeCodeEnum sourceTransactionTypeCode) {
    this.sourceTransactionTypeCode = sourceTransactionTypeCode;
    return this;
  }

  /**
   * The Type of the source tranasction. This will be ACCPAY if the linked transaction was created from an invoice and SPEND if it was created from a bank transaction.
   * @return sourceTransactionTypeCode
   */
  @javax.annotation.Nullable
  public SourceTransactionTypeCodeEnum getSourceTransactionTypeCode() {
    return sourceTransactionTypeCode;
  }

  public void setSourceTransactionTypeCode(SourceTransactionTypeCodeEnum sourceTransactionTypeCode) {
    this.sourceTransactionTypeCode = sourceTransactionTypeCode;
  }


  public LinkedTransaction status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public LinkedTransaction targetLineItemID(UUID targetLineItemID) {
    this.targetLineItemID = targetLineItemID;
    return this;
  }

  /**
   * The line item identifier from the target transaction. It is possible  to link multiple billable expenses to the same TargetLineItemID.
   * @return targetLineItemID
   */
  @javax.annotation.Nullable
  public UUID getTargetLineItemID() {
    return targetLineItemID;
  }

  public void setTargetLineItemID(UUID targetLineItemID) {
    this.targetLineItemID = targetLineItemID;
  }


  public LinkedTransaction targetTransactionID(UUID targetTransactionID) {
    this.targetTransactionID = targetTransactionID;
    return this;
  }

  /**
   * Filter by the TargetTransactionID. Get all the linked transactions  allocated to a particular ACCREC invoice
   * @return targetTransactionID
   */
  @javax.annotation.Nullable
  public UUID getTargetTransactionID() {
    return targetTransactionID;
  }

  public void setTargetTransactionID(UUID targetTransactionID) {
    this.targetTransactionID = targetTransactionID;
  }


  public LinkedTransaction type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * This will always be BILLABLEEXPENSE. More types may be added in future.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * The last modified date in UTC format
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }



  public LinkedTransaction validationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public LinkedTransaction addValidationErrorsItem(ValidationError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Displays array of validation error messages from the API
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<ValidationError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkedTransaction linkedTransaction = (LinkedTransaction) o;
    return Objects.equals(this.contactID, linkedTransaction.contactID) &&
        Objects.equals(this.linkedTransactionID, linkedTransaction.linkedTransactionID) &&
        Objects.equals(this.sourceLineItemID, linkedTransaction.sourceLineItemID) &&
        Objects.equals(this.sourceTransactionID, linkedTransaction.sourceTransactionID) &&
        Objects.equals(this.sourceTransactionTypeCode, linkedTransaction.sourceTransactionTypeCode) &&
        Objects.equals(this.status, linkedTransaction.status) &&
        Objects.equals(this.targetLineItemID, linkedTransaction.targetLineItemID) &&
        Objects.equals(this.targetTransactionID, linkedTransaction.targetTransactionID) &&
        Objects.equals(this.type, linkedTransaction.type) &&
        Objects.equals(this.updatedDateUTC, linkedTransaction.updatedDateUTC) &&
        Objects.equals(this.validationErrors, linkedTransaction.validationErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactID, linkedTransactionID, sourceLineItemID, sourceTransactionID, sourceTransactionTypeCode, status, targetLineItemID, targetTransactionID, type, updatedDateUTC, validationErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkedTransaction {\n");
    sb.append("    contactID: ").append(toIndentedString(contactID)).append("\n");
    sb.append("    linkedTransactionID: ").append(toIndentedString(linkedTransactionID)).append("\n");
    sb.append("    sourceLineItemID: ").append(toIndentedString(sourceLineItemID)).append("\n");
    sb.append("    sourceTransactionID: ").append(toIndentedString(sourceTransactionID)).append("\n");
    sb.append("    sourceTransactionTypeCode: ").append(toIndentedString(sourceTransactionTypeCode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targetLineItemID: ").append(toIndentedString(targetLineItemID)).append("\n");
    sb.append("    targetTransactionID: ").append(toIndentedString(targetTransactionID)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ContactID");
    openapiFields.add("LinkedTransactionID");
    openapiFields.add("SourceLineItemID");
    openapiFields.add("SourceTransactionID");
    openapiFields.add("SourceTransactionTypeCode");
    openapiFields.add("Status");
    openapiFields.add("TargetLineItemID");
    openapiFields.add("TargetTransactionID");
    openapiFields.add("Type");
    openapiFields.add("UpdatedDateUTC");
    openapiFields.add("ValidationErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LinkedTransaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LinkedTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinkedTransaction is not found in the empty JSON string", LinkedTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LinkedTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LinkedTransaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ContactID") != null && !jsonObj.get("ContactID").isJsonNull()) && !jsonObj.get("ContactID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactID").toString()));
      }
      if ((jsonObj.get("LinkedTransactionID") != null && !jsonObj.get("LinkedTransactionID").isJsonNull()) && !jsonObj.get("LinkedTransactionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LinkedTransactionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LinkedTransactionID").toString()));
      }
      if ((jsonObj.get("SourceLineItemID") != null && !jsonObj.get("SourceLineItemID").isJsonNull()) && !jsonObj.get("SourceLineItemID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceLineItemID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceLineItemID").toString()));
      }
      if ((jsonObj.get("SourceTransactionID") != null && !jsonObj.get("SourceTransactionID").isJsonNull()) && !jsonObj.get("SourceTransactionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceTransactionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceTransactionID").toString()));
      }
      if ((jsonObj.get("SourceTransactionTypeCode") != null && !jsonObj.get("SourceTransactionTypeCode").isJsonNull()) && !jsonObj.get("SourceTransactionTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceTransactionTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceTransactionTypeCode").toString()));
      }
      // validate the optional field `SourceTransactionTypeCode`
      if (jsonObj.get("SourceTransactionTypeCode") != null && !jsonObj.get("SourceTransactionTypeCode").isJsonNull()) {
        SourceTransactionTypeCodeEnum.validateJsonElement(jsonObj.get("SourceTransactionTypeCode"));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("TargetLineItemID") != null && !jsonObj.get("TargetLineItemID").isJsonNull()) && !jsonObj.get("TargetLineItemID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TargetLineItemID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TargetLineItemID").toString()));
      }
      if ((jsonObj.get("TargetTransactionID") != null && !jsonObj.get("TargetTransactionID").isJsonNull()) && !jsonObj.get("TargetTransactionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TargetTransactionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TargetTransactionID").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("Type"));
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
      if (jsonObj.get("ValidationErrors") != null && !jsonObj.get("ValidationErrors").isJsonNull()) {
        JsonArray jsonArrayvalidationErrors = jsonObj.getAsJsonArray("ValidationErrors");
        if (jsonArrayvalidationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ValidationErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ValidationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("ValidationErrors").toString()));
          }

          // validate the optional field `ValidationErrors` (array)
          for (int i = 0; i < jsonArrayvalidationErrors.size(); i++) {
            ValidationError.validateJsonElement(jsonArrayvalidationErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinkedTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinkedTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinkedTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinkedTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<LinkedTransaction>() {
           @Override
           public void write(JsonWriter out, LinkedTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LinkedTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LinkedTransaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LinkedTransaction
   * @throws IOException if the JSON string is invalid with respect to LinkedTransaction
   */
  public static LinkedTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinkedTransaction.class);
  }

  /**
   * Convert an instance of LinkedTransaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

