/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.Balances;
import org.openapitools.client.model.BatchPaymentDetails;
import org.openapitools.client.model.BrandingTheme;
import org.openapitools.client.model.ContactGroup;
import org.openapitools.client.model.ContactPerson;
import org.openapitools.client.model.CurrencyCode;
import org.openapitools.client.model.PaymentTerm;
import org.openapitools.client.model.Phone;
import org.openapitools.client.model.SalesTrackingCategory;
import org.openapitools.client.model.ValidationError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contact
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Contact {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "AccountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_ACCOUNTS_PAYABLE_TAX_TYPE = "AccountsPayableTaxType";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS_PAYABLE_TAX_TYPE)
  private String accountsPayableTaxType;

  public static final String SERIALIZED_NAME_ACCOUNTS_RECEIVABLE_TAX_TYPE = "AccountsReceivableTaxType";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS_RECEIVABLE_TAX_TYPE)
  private String accountsReceivableTaxType;

  public static final String SERIALIZED_NAME_ADDRESSES = "Addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<Address> addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTACHMENTS = "Attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<Attachment> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_BALANCES = "Balances";
  @SerializedName(SERIALIZED_NAME_BALANCES)
  private Balances balances;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_DETAILS = "BankAccountDetails";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_DETAILS)
  private String bankAccountDetails;

  public static final String SERIALIZED_NAME_BATCH_PAYMENTS = "BatchPayments";
  @SerializedName(SERIALIZED_NAME_BATCH_PAYMENTS)
  private BatchPaymentDetails batchPayments;

  public static final String SERIALIZED_NAME_BRANDING_THEME = "BrandingTheme";
  @SerializedName(SERIALIZED_NAME_BRANDING_THEME)
  private BrandingTheme brandingTheme;

  public static final String SERIALIZED_NAME_CONTACT_GROUPS = "ContactGroups";
  @SerializedName(SERIALIZED_NAME_CONTACT_GROUPS)
  private List<ContactGroup> contactGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTACT_I_D = "ContactID";
  @SerializedName(SERIALIZED_NAME_CONTACT_I_D)
  private UUID contactID;

  public static final String SERIALIZED_NAME_CONTACT_NUMBER = "ContactNumber";
  @SerializedName(SERIALIZED_NAME_CONTACT_NUMBER)
  private String contactNumber;

  public static final String SERIALIZED_NAME_CONTACT_PERSONS = "ContactPersons";
  @SerializedName(SERIALIZED_NAME_CONTACT_PERSONS)
  private List<ContactPerson> contactPersons = new ArrayList<>();

  /**
   * Current status of a contact â€“ see contact status types
   */
  @JsonAdapter(ContactStatusEnum.Adapter.class)
  public enum ContactStatusEnum {
    ACTIVE("ACTIVE"),
    
    ARCHIVED("ARCHIVED"),
    
    GDPRREQUEST("GDPRREQUEST");

    private String value;

    ContactStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContactStatusEnum fromValue(String value) {
      for (ContactStatusEnum b : ContactStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContactStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContactStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContactStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContactStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContactStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTACT_STATUS = "ContactStatus";
  @SerializedName(SERIALIZED_NAME_CONTACT_STATUS)
  private ContactStatusEnum contactStatus;

  public static final String SERIALIZED_NAME_DEFAULT_CURRENCY = "DefaultCurrency";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CURRENCY)
  private CurrencyCode defaultCurrency;

  public static final String SERIALIZED_NAME_DISCOUNT = "Discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private Double discount;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "EmailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_HAS_ATTACHMENTS = "HasAttachments";
  @SerializedName(SERIALIZED_NAME_HAS_ATTACHMENTS)
  private Boolean hasAttachments = false;

  public static final String SERIALIZED_NAME_HAS_VALIDATION_ERRORS = "HasValidationErrors";
  @SerializedName(SERIALIZED_NAME_HAS_VALIDATION_ERRORS)
  private Boolean hasValidationErrors = false;

  public static final String SERIALIZED_NAME_IS_CUSTOMER = "IsCustomer";
  @SerializedName(SERIALIZED_NAME_IS_CUSTOMER)
  private Boolean isCustomer;

  public static final String SERIALIZED_NAME_IS_SUPPLIER = "IsSupplier";
  @SerializedName(SERIALIZED_NAME_IS_SUPPLIER)
  private Boolean isSupplier;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAYMENT_TERMS = "PaymentTerms";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TERMS)
  private PaymentTerm paymentTerms;

  public static final String SERIALIZED_NAME_PHONES = "Phones";
  @SerializedName(SERIALIZED_NAME_PHONES)
  private List<Phone> phones = new ArrayList<>();

  public static final String SERIALIZED_NAME_PURCHASES_DEFAULT_ACCOUNT_CODE = "PurchasesDefaultAccountCode";
  @SerializedName(SERIALIZED_NAME_PURCHASES_DEFAULT_ACCOUNT_CODE)
  private String purchasesDefaultAccountCode;

  public static final String SERIALIZED_NAME_PURCHASES_TRACKING_CATEGORIES = "PurchasesTrackingCategories";
  @SerializedName(SERIALIZED_NAME_PURCHASES_TRACKING_CATEGORIES)
  private List<SalesTrackingCategory> purchasesTrackingCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_SALES_DEFAULT_ACCOUNT_CODE = "SalesDefaultAccountCode";
  @SerializedName(SERIALIZED_NAME_SALES_DEFAULT_ACCOUNT_CODE)
  private String salesDefaultAccountCode;

  public static final String SERIALIZED_NAME_SALES_TRACKING_CATEGORIES = "SalesTrackingCategories";
  @SerializedName(SERIALIZED_NAME_SALES_TRACKING_CATEGORIES)
  private List<SalesTrackingCategory> salesTrackingCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKYPE_USER_NAME = "SkypeUserName";
  @SerializedName(SERIALIZED_NAME_SKYPE_USER_NAME)
  private String skypeUserName;

  public static final String SERIALIZED_NAME_STATUS_ATTRIBUTE_STRING = "StatusAttributeString";
  @SerializedName(SERIALIZED_NAME_STATUS_ATTRIBUTE_STRING)
  private String statusAttributeString;

  public static final String SERIALIZED_NAME_TAX_NUMBER = "TaxNumber";
  @SerializedName(SERIALIZED_NAME_TAX_NUMBER)
  private String taxNumber;

  public static final String SERIALIZED_NAME_TRACKING_CATEGORY_NAME = "TrackingCategoryName";
  @SerializedName(SERIALIZED_NAME_TRACKING_CATEGORY_NAME)
  private String trackingCategoryName;

  public static final String SERIALIZED_NAME_TRACKING_CATEGORY_OPTION = "TrackingCategoryOption";
  @SerializedName(SERIALIZED_NAME_TRACKING_CATEGORY_OPTION)
  private String trackingCategoryOption;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "ValidationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<ValidationError> validationErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEBSITE = "Website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public static final String SERIALIZED_NAME_XERO_NETWORK_KEY = "XeroNetworkKey";
  @SerializedName(SERIALIZED_NAME_XERO_NETWORK_KEY)
  private String xeroNetworkKey;

  public Contact() {
  }

  public Contact(
     Double discount, 
     String updatedDateUTC, 
     String website
  ) {
    this();
    this.discount = discount;
    this.updatedDateUTC = updatedDateUTC;
    this.website = website;
  }

  public Contact accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * A user defined account number. This can be updated via the API and the Xero UI (max length &#x3D; 50)
   * @return accountNumber
   */
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public Contact accountsPayableTaxType(String accountsPayableTaxType) {
    this.accountsPayableTaxType = accountsPayableTaxType;
    return this;
  }

  /**
   * The tax type from TaxRates
   * @return accountsPayableTaxType
   */
  @javax.annotation.Nullable
  public String getAccountsPayableTaxType() {
    return accountsPayableTaxType;
  }

  public void setAccountsPayableTaxType(String accountsPayableTaxType) {
    this.accountsPayableTaxType = accountsPayableTaxType;
  }


  public Contact accountsReceivableTaxType(String accountsReceivableTaxType) {
    this.accountsReceivableTaxType = accountsReceivableTaxType;
    return this;
  }

  /**
   * The tax type from TaxRates
   * @return accountsReceivableTaxType
   */
  @javax.annotation.Nullable
  public String getAccountsReceivableTaxType() {
    return accountsReceivableTaxType;
  }

  public void setAccountsReceivableTaxType(String accountsReceivableTaxType) {
    this.accountsReceivableTaxType = accountsReceivableTaxType;
  }


  public Contact addresses(List<Address> addresses) {
    this.addresses = addresses;
    return this;
  }

  public Contact addAddressesItem(Address addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

  /**
   * Store certain address types for a contact â€“ see address types
   * @return addresses
   */
  @javax.annotation.Nullable
  public List<Address> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<Address> addresses) {
    this.addresses = addresses;
  }


  public Contact attachments(List<Attachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public Contact addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Displays array of attachments from the API
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<Attachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<Attachment> attachments) {
    this.attachments = attachments;
  }


  public Contact balances(Balances balances) {
    this.balances = balances;
    return this;
  }

  /**
   * Get balances
   * @return balances
   */
  @javax.annotation.Nullable
  public Balances getBalances() {
    return balances;
  }

  public void setBalances(Balances balances) {
    this.balances = balances;
  }


  public Contact bankAccountDetails(String bankAccountDetails) {
    this.bankAccountDetails = bankAccountDetails;
    return this;
  }

  /**
   * Bank account number of contact
   * @return bankAccountDetails
   */
  @javax.annotation.Nullable
  public String getBankAccountDetails() {
    return bankAccountDetails;
  }

  public void setBankAccountDetails(String bankAccountDetails) {
    this.bankAccountDetails = bankAccountDetails;
  }


  public Contact batchPayments(BatchPaymentDetails batchPayments) {
    this.batchPayments = batchPayments;
    return this;
  }

  /**
   * Get batchPayments
   * @return batchPayments
   */
  @javax.annotation.Nullable
  public BatchPaymentDetails getBatchPayments() {
    return batchPayments;
  }

  public void setBatchPayments(BatchPaymentDetails batchPayments) {
    this.batchPayments = batchPayments;
  }


  public Contact brandingTheme(BrandingTheme brandingTheme) {
    this.brandingTheme = brandingTheme;
    return this;
  }

  /**
   * Get brandingTheme
   * @return brandingTheme
   */
  @javax.annotation.Nullable
  public BrandingTheme getBrandingTheme() {
    return brandingTheme;
  }

  public void setBrandingTheme(BrandingTheme brandingTheme) {
    this.brandingTheme = brandingTheme;
  }


  public Contact contactGroups(List<ContactGroup> contactGroups) {
    this.contactGroups = contactGroups;
    return this;
  }

  public Contact addContactGroupsItem(ContactGroup contactGroupsItem) {
    if (this.contactGroups == null) {
      this.contactGroups = new ArrayList<>();
    }
    this.contactGroups.add(contactGroupsItem);
    return this;
  }

  /**
   * Displays which contact groups a contact is included in
   * @return contactGroups
   */
  @javax.annotation.Nullable
  public List<ContactGroup> getContactGroups() {
    return contactGroups;
  }

  public void setContactGroups(List<ContactGroup> contactGroups) {
    this.contactGroups = contactGroups;
  }


  public Contact contactID(UUID contactID) {
    this.contactID = contactID;
    return this;
  }

  /**
   * Xero identifier
   * @return contactID
   */
  @javax.annotation.Nullable
  public UUID getContactID() {
    return contactID;
  }

  public void setContactID(UUID contactID) {
    this.contactID = contactID;
  }


  public Contact contactNumber(String contactNumber) {
    this.contactNumber = contactNumber;
    return this;
  }

  /**
   * This can be updated via the API only i.e. This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50). If the Contact Number is used, this is displayed as Contact Code in the Contacts UI in Xero.
   * @return contactNumber
   */
  @javax.annotation.Nullable
  public String getContactNumber() {
    return contactNumber;
  }

  public void setContactNumber(String contactNumber) {
    this.contactNumber = contactNumber;
  }


  public Contact contactPersons(List<ContactPerson> contactPersons) {
    this.contactPersons = contactPersons;
    return this;
  }

  public Contact addContactPersonsItem(ContactPerson contactPersonsItem) {
    if (this.contactPersons == null) {
      this.contactPersons = new ArrayList<>();
    }
    this.contactPersons.add(contactPersonsItem);
    return this;
  }

  /**
   * See contact persons
   * @return contactPersons
   */
  @javax.annotation.Nullable
  public List<ContactPerson> getContactPersons() {
    return contactPersons;
  }

  public void setContactPersons(List<ContactPerson> contactPersons) {
    this.contactPersons = contactPersons;
  }


  public Contact contactStatus(ContactStatusEnum contactStatus) {
    this.contactStatus = contactStatus;
    return this;
  }

  /**
   * Current status of a contact â€“ see contact status types
   * @return contactStatus
   */
  @javax.annotation.Nullable
  public ContactStatusEnum getContactStatus() {
    return contactStatus;
  }

  public void setContactStatus(ContactStatusEnum contactStatus) {
    this.contactStatus = contactStatus;
  }


  public Contact defaultCurrency(CurrencyCode defaultCurrency) {
    this.defaultCurrency = defaultCurrency;
    return this;
  }

  /**
   * Get defaultCurrency
   * @return defaultCurrency
   */
  @javax.annotation.Nullable
  public CurrencyCode getDefaultCurrency() {
    return defaultCurrency;
  }

  public void setDefaultCurrency(CurrencyCode defaultCurrency) {
    this.defaultCurrency = defaultCurrency;
  }


  /**
   * The default discount rate for the contact (read only)
   * @return discount
   */
  @javax.annotation.Nullable
  public Double getDiscount() {
    return discount;
  }



  public Contact emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * Email address of contact person (umlauts not supported) (max length  &#x3D; 255)
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public Contact firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name of contact person (max length &#x3D; 255)
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Contact hasAttachments(Boolean hasAttachments) {
    this.hasAttachments = hasAttachments;
    return this;
  }

  /**
   * A boolean to indicate if a contact has an attachment
   * @return hasAttachments
   */
  @javax.annotation.Nullable
  public Boolean getHasAttachments() {
    return hasAttachments;
  }

  public void setHasAttachments(Boolean hasAttachments) {
    this.hasAttachments = hasAttachments;
  }


  public Contact hasValidationErrors(Boolean hasValidationErrors) {
    this.hasValidationErrors = hasValidationErrors;
    return this;
  }

  /**
   * A boolean to indicate if a contact has an validation errors
   * @return hasValidationErrors
   */
  @javax.annotation.Nullable
  public Boolean getHasValidationErrors() {
    return hasValidationErrors;
  }

  public void setHasValidationErrors(Boolean hasValidationErrors) {
    this.hasValidationErrors = hasValidationErrors;
  }


  public Contact isCustomer(Boolean isCustomer) {
    this.isCustomer = isCustomer;
    return this;
  }

  /**
   * true or false â€“ Boolean that describes if a contact has any AR invoices entered against them. Cannot be set via PUT or POST â€“ it is automatically set when an accounts receivable invoice is generated against this contact.
   * @return isCustomer
   */
  @javax.annotation.Nullable
  public Boolean getIsCustomer() {
    return isCustomer;
  }

  public void setIsCustomer(Boolean isCustomer) {
    this.isCustomer = isCustomer;
  }


  public Contact isSupplier(Boolean isSupplier) {
    this.isSupplier = isSupplier;
    return this;
  }

  /**
   * true or false â€“ Boolean that describes if a contact that has any AP  invoices entered against them. Cannot be set via PUT or POST â€“ it is automatically set when an accounts payable invoice is generated against this contact.
   * @return isSupplier
   */
  @javax.annotation.Nullable
  public Boolean getIsSupplier() {
    return isSupplier;
  }

  public void setIsSupplier(Boolean isSupplier) {
    this.isSupplier = isSupplier;
  }


  public Contact lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name of contact person (max length &#x3D; 255)
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Contact name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Full name of contact/organisation (max length &#x3D; 255)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Contact paymentTerms(PaymentTerm paymentTerms) {
    this.paymentTerms = paymentTerms;
    return this;
  }

  /**
   * Get paymentTerms
   * @return paymentTerms
   */
  @javax.annotation.Nullable
  public PaymentTerm getPaymentTerms() {
    return paymentTerms;
  }

  public void setPaymentTerms(PaymentTerm paymentTerms) {
    this.paymentTerms = paymentTerms;
  }


  public Contact phones(List<Phone> phones) {
    this.phones = phones;
    return this;
  }

  public Contact addPhonesItem(Phone phonesItem) {
    if (this.phones == null) {
      this.phones = new ArrayList<>();
    }
    this.phones.add(phonesItem);
    return this;
  }

  /**
   * Store certain phone types for a contact â€“ see phone types
   * @return phones
   */
  @javax.annotation.Nullable
  public List<Phone> getPhones() {
    return phones;
  }

  public void setPhones(List<Phone> phones) {
    this.phones = phones;
  }


  public Contact purchasesDefaultAccountCode(String purchasesDefaultAccountCode) {
    this.purchasesDefaultAccountCode = purchasesDefaultAccountCode;
    return this;
  }

  /**
   * The default purchases account code for contacts
   * @return purchasesDefaultAccountCode
   */
  @javax.annotation.Nullable
  public String getPurchasesDefaultAccountCode() {
    return purchasesDefaultAccountCode;
  }

  public void setPurchasesDefaultAccountCode(String purchasesDefaultAccountCode) {
    this.purchasesDefaultAccountCode = purchasesDefaultAccountCode;
  }


  public Contact purchasesTrackingCategories(List<SalesTrackingCategory> purchasesTrackingCategories) {
    this.purchasesTrackingCategories = purchasesTrackingCategories;
    return this;
  }

  public Contact addPurchasesTrackingCategoriesItem(SalesTrackingCategory purchasesTrackingCategoriesItem) {
    if (this.purchasesTrackingCategories == null) {
      this.purchasesTrackingCategories = new ArrayList<>();
    }
    this.purchasesTrackingCategories.add(purchasesTrackingCategoriesItem);
    return this;
  }

  /**
   * The default purchases tracking categories for contacts
   * @return purchasesTrackingCategories
   */
  @javax.annotation.Nullable
  public List<SalesTrackingCategory> getPurchasesTrackingCategories() {
    return purchasesTrackingCategories;
  }

  public void setPurchasesTrackingCategories(List<SalesTrackingCategory> purchasesTrackingCategories) {
    this.purchasesTrackingCategories = purchasesTrackingCategories;
  }


  public Contact salesDefaultAccountCode(String salesDefaultAccountCode) {
    this.salesDefaultAccountCode = salesDefaultAccountCode;
    return this;
  }

  /**
   * The default sales account code for contacts
   * @return salesDefaultAccountCode
   */
  @javax.annotation.Nullable
  public String getSalesDefaultAccountCode() {
    return salesDefaultAccountCode;
  }

  public void setSalesDefaultAccountCode(String salesDefaultAccountCode) {
    this.salesDefaultAccountCode = salesDefaultAccountCode;
  }


  public Contact salesTrackingCategories(List<SalesTrackingCategory> salesTrackingCategories) {
    this.salesTrackingCategories = salesTrackingCategories;
    return this;
  }

  public Contact addSalesTrackingCategoriesItem(SalesTrackingCategory salesTrackingCategoriesItem) {
    if (this.salesTrackingCategories == null) {
      this.salesTrackingCategories = new ArrayList<>();
    }
    this.salesTrackingCategories.add(salesTrackingCategoriesItem);
    return this;
  }

  /**
   * The default sales tracking categories for contacts
   * @return salesTrackingCategories
   */
  @javax.annotation.Nullable
  public List<SalesTrackingCategory> getSalesTrackingCategories() {
    return salesTrackingCategories;
  }

  public void setSalesTrackingCategories(List<SalesTrackingCategory> salesTrackingCategories) {
    this.salesTrackingCategories = salesTrackingCategories;
  }


  public Contact skypeUserName(String skypeUserName) {
    this.skypeUserName = skypeUserName;
    return this;
  }

  /**
   * Skype user name of contact
   * @return skypeUserName
   */
  @javax.annotation.Nullable
  public String getSkypeUserName() {
    return skypeUserName;
  }

  public void setSkypeUserName(String skypeUserName) {
    this.skypeUserName = skypeUserName;
  }


  public Contact statusAttributeString(String statusAttributeString) {
    this.statusAttributeString = statusAttributeString;
    return this;
  }

  /**
   * Status of object
   * @return statusAttributeString
   */
  @javax.annotation.Nullable
  public String getStatusAttributeString() {
    return statusAttributeString;
  }

  public void setStatusAttributeString(String statusAttributeString) {
    this.statusAttributeString = statusAttributeString;
  }


  public Contact taxNumber(String taxNumber) {
    this.taxNumber = taxNumber;
    return this;
  }

  /**
   * Tax number of contact â€“ this is also known as the ABN (Australia), GST Number (New Zealand), VAT Number (UK) or Tax ID Number (US and global) in the Xero UI depending on which regionalized version of Xero you are using (max length &#x3D; 50)
   * @return taxNumber
   */
  @javax.annotation.Nullable
  public String getTaxNumber() {
    return taxNumber;
  }

  public void setTaxNumber(String taxNumber) {
    this.taxNumber = taxNumber;
  }


  public Contact trackingCategoryName(String trackingCategoryName) {
    this.trackingCategoryName = trackingCategoryName;
    return this;
  }

  /**
   * The name of the Tracking Category assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories
   * @return trackingCategoryName
   */
  @javax.annotation.Nullable
  public String getTrackingCategoryName() {
    return trackingCategoryName;
  }

  public void setTrackingCategoryName(String trackingCategoryName) {
    this.trackingCategoryName = trackingCategoryName;
  }


  public Contact trackingCategoryOption(String trackingCategoryOption) {
    this.trackingCategoryOption = trackingCategoryOption;
    return this;
  }

  /**
   * The name of the Tracking Option assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories
   * @return trackingCategoryOption
   */
  @javax.annotation.Nullable
  public String getTrackingCategoryOption() {
    return trackingCategoryOption;
  }

  public void setTrackingCategoryOption(String trackingCategoryOption) {
    this.trackingCategoryOption = trackingCategoryOption;
  }


  /**
   * UTC timestamp of last update to contact
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }



  public Contact validationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public Contact addValidationErrorsItem(ValidationError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Displays validation errors returned from the API
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<ValidationError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }


  /**
   * Website address for contact (read only)
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }



  public Contact xeroNetworkKey(String xeroNetworkKey) {
    this.xeroNetworkKey = xeroNetworkKey;
    return this;
  }

  /**
   * Store XeroNetworkKey for contacts.
   * @return xeroNetworkKey
   */
  @javax.annotation.Nullable
  public String getXeroNetworkKey() {
    return xeroNetworkKey;
  }

  public void setXeroNetworkKey(String xeroNetworkKey) {
    this.xeroNetworkKey = xeroNetworkKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Contact contact = (Contact) o;
    return Objects.equals(this.accountNumber, contact.accountNumber) &&
        Objects.equals(this.accountsPayableTaxType, contact.accountsPayableTaxType) &&
        Objects.equals(this.accountsReceivableTaxType, contact.accountsReceivableTaxType) &&
        Objects.equals(this.addresses, contact.addresses) &&
        Objects.equals(this.attachments, contact.attachments) &&
        Objects.equals(this.balances, contact.balances) &&
        Objects.equals(this.bankAccountDetails, contact.bankAccountDetails) &&
        Objects.equals(this.batchPayments, contact.batchPayments) &&
        Objects.equals(this.brandingTheme, contact.brandingTheme) &&
        Objects.equals(this.contactGroups, contact.contactGroups) &&
        Objects.equals(this.contactID, contact.contactID) &&
        Objects.equals(this.contactNumber, contact.contactNumber) &&
        Objects.equals(this.contactPersons, contact.contactPersons) &&
        Objects.equals(this.contactStatus, contact.contactStatus) &&
        Objects.equals(this.defaultCurrency, contact.defaultCurrency) &&
        Objects.equals(this.discount, contact.discount) &&
        Objects.equals(this.emailAddress, contact.emailAddress) &&
        Objects.equals(this.firstName, contact.firstName) &&
        Objects.equals(this.hasAttachments, contact.hasAttachments) &&
        Objects.equals(this.hasValidationErrors, contact.hasValidationErrors) &&
        Objects.equals(this.isCustomer, contact.isCustomer) &&
        Objects.equals(this.isSupplier, contact.isSupplier) &&
        Objects.equals(this.lastName, contact.lastName) &&
        Objects.equals(this.name, contact.name) &&
        Objects.equals(this.paymentTerms, contact.paymentTerms) &&
        Objects.equals(this.phones, contact.phones) &&
        Objects.equals(this.purchasesDefaultAccountCode, contact.purchasesDefaultAccountCode) &&
        Objects.equals(this.purchasesTrackingCategories, contact.purchasesTrackingCategories) &&
        Objects.equals(this.salesDefaultAccountCode, contact.salesDefaultAccountCode) &&
        Objects.equals(this.salesTrackingCategories, contact.salesTrackingCategories) &&
        Objects.equals(this.skypeUserName, contact.skypeUserName) &&
        Objects.equals(this.statusAttributeString, contact.statusAttributeString) &&
        Objects.equals(this.taxNumber, contact.taxNumber) &&
        Objects.equals(this.trackingCategoryName, contact.trackingCategoryName) &&
        Objects.equals(this.trackingCategoryOption, contact.trackingCategoryOption) &&
        Objects.equals(this.updatedDateUTC, contact.updatedDateUTC) &&
        Objects.equals(this.validationErrors, contact.validationErrors) &&
        Objects.equals(this.website, contact.website) &&
        Objects.equals(this.xeroNetworkKey, contact.xeroNetworkKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, accountsPayableTaxType, accountsReceivableTaxType, addresses, attachments, balances, bankAccountDetails, batchPayments, brandingTheme, contactGroups, contactID, contactNumber, contactPersons, contactStatus, defaultCurrency, discount, emailAddress, firstName, hasAttachments, hasValidationErrors, isCustomer, isSupplier, lastName, name, paymentTerms, phones, purchasesDefaultAccountCode, purchasesTrackingCategories, salesDefaultAccountCode, salesTrackingCategories, skypeUserName, statusAttributeString, taxNumber, trackingCategoryName, trackingCategoryOption, updatedDateUTC, validationErrors, website, xeroNetworkKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Contact {\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    accountsPayableTaxType: ").append(toIndentedString(accountsPayableTaxType)).append("\n");
    sb.append("    accountsReceivableTaxType: ").append(toIndentedString(accountsReceivableTaxType)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    balances: ").append(toIndentedString(balances)).append("\n");
    sb.append("    bankAccountDetails: ").append(toIndentedString(bankAccountDetails)).append("\n");
    sb.append("    batchPayments: ").append(toIndentedString(batchPayments)).append("\n");
    sb.append("    brandingTheme: ").append(toIndentedString(brandingTheme)).append("\n");
    sb.append("    contactGroups: ").append(toIndentedString(contactGroups)).append("\n");
    sb.append("    contactID: ").append(toIndentedString(contactID)).append("\n");
    sb.append("    contactNumber: ").append(toIndentedString(contactNumber)).append("\n");
    sb.append("    contactPersons: ").append(toIndentedString(contactPersons)).append("\n");
    sb.append("    contactStatus: ").append(toIndentedString(contactStatus)).append("\n");
    sb.append("    defaultCurrency: ").append(toIndentedString(defaultCurrency)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    hasAttachments: ").append(toIndentedString(hasAttachments)).append("\n");
    sb.append("    hasValidationErrors: ").append(toIndentedString(hasValidationErrors)).append("\n");
    sb.append("    isCustomer: ").append(toIndentedString(isCustomer)).append("\n");
    sb.append("    isSupplier: ").append(toIndentedString(isSupplier)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    paymentTerms: ").append(toIndentedString(paymentTerms)).append("\n");
    sb.append("    phones: ").append(toIndentedString(phones)).append("\n");
    sb.append("    purchasesDefaultAccountCode: ").append(toIndentedString(purchasesDefaultAccountCode)).append("\n");
    sb.append("    purchasesTrackingCategories: ").append(toIndentedString(purchasesTrackingCategories)).append("\n");
    sb.append("    salesDefaultAccountCode: ").append(toIndentedString(salesDefaultAccountCode)).append("\n");
    sb.append("    salesTrackingCategories: ").append(toIndentedString(salesTrackingCategories)).append("\n");
    sb.append("    skypeUserName: ").append(toIndentedString(skypeUserName)).append("\n");
    sb.append("    statusAttributeString: ").append(toIndentedString(statusAttributeString)).append("\n");
    sb.append("    taxNumber: ").append(toIndentedString(taxNumber)).append("\n");
    sb.append("    trackingCategoryName: ").append(toIndentedString(trackingCategoryName)).append("\n");
    sb.append("    trackingCategoryOption: ").append(toIndentedString(trackingCategoryOption)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    xeroNetworkKey: ").append(toIndentedString(xeroNetworkKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountNumber");
    openapiFields.add("AccountsPayableTaxType");
    openapiFields.add("AccountsReceivableTaxType");
    openapiFields.add("Addresses");
    openapiFields.add("Attachments");
    openapiFields.add("Balances");
    openapiFields.add("BankAccountDetails");
    openapiFields.add("BatchPayments");
    openapiFields.add("BrandingTheme");
    openapiFields.add("ContactGroups");
    openapiFields.add("ContactID");
    openapiFields.add("ContactNumber");
    openapiFields.add("ContactPersons");
    openapiFields.add("ContactStatus");
    openapiFields.add("DefaultCurrency");
    openapiFields.add("Discount");
    openapiFields.add("EmailAddress");
    openapiFields.add("FirstName");
    openapiFields.add("HasAttachments");
    openapiFields.add("HasValidationErrors");
    openapiFields.add("IsCustomer");
    openapiFields.add("IsSupplier");
    openapiFields.add("LastName");
    openapiFields.add("Name");
    openapiFields.add("PaymentTerms");
    openapiFields.add("Phones");
    openapiFields.add("PurchasesDefaultAccountCode");
    openapiFields.add("PurchasesTrackingCategories");
    openapiFields.add("SalesDefaultAccountCode");
    openapiFields.add("SalesTrackingCategories");
    openapiFields.add("SkypeUserName");
    openapiFields.add("StatusAttributeString");
    openapiFields.add("TaxNumber");
    openapiFields.add("TrackingCategoryName");
    openapiFields.add("TrackingCategoryOption");
    openapiFields.add("UpdatedDateUTC");
    openapiFields.add("ValidationErrors");
    openapiFields.add("Website");
    openapiFields.add("XeroNetworkKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Contact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Contact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Contact is not found in the empty JSON string", Contact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Contact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Contact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccountNumber") != null && !jsonObj.get("AccountNumber").isJsonNull()) && !jsonObj.get("AccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountNumber").toString()));
      }
      if ((jsonObj.get("AccountsPayableTaxType") != null && !jsonObj.get("AccountsPayableTaxType").isJsonNull()) && !jsonObj.get("AccountsPayableTaxType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountsPayableTaxType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountsPayableTaxType").toString()));
      }
      if ((jsonObj.get("AccountsReceivableTaxType") != null && !jsonObj.get("AccountsReceivableTaxType").isJsonNull()) && !jsonObj.get("AccountsReceivableTaxType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountsReceivableTaxType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountsReceivableTaxType").toString()));
      }
      if (jsonObj.get("Addresses") != null && !jsonObj.get("Addresses").isJsonNull()) {
        JsonArray jsonArrayaddresses = jsonObj.getAsJsonArray("Addresses");
        if (jsonArrayaddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Addresses` to be an array in the JSON string but got `%s`", jsonObj.get("Addresses").toString()));
          }

          // validate the optional field `Addresses` (array)
          for (int i = 0; i < jsonArrayaddresses.size(); i++) {
            Address.validateJsonElement(jsonArrayaddresses.get(i));
          };
        }
      }
      if (jsonObj.get("Attachments") != null && !jsonObj.get("Attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("Attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Attachments` to be an array in the JSON string but got `%s`", jsonObj.get("Attachments").toString()));
          }

          // validate the optional field `Attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            Attachment.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      // validate the optional field `Balances`
      if (jsonObj.get("Balances") != null && !jsonObj.get("Balances").isJsonNull()) {
        Balances.validateJsonElement(jsonObj.get("Balances"));
      }
      if ((jsonObj.get("BankAccountDetails") != null && !jsonObj.get("BankAccountDetails").isJsonNull()) && !jsonObj.get("BankAccountDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BankAccountDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BankAccountDetails").toString()));
      }
      // validate the optional field `BatchPayments`
      if (jsonObj.get("BatchPayments") != null && !jsonObj.get("BatchPayments").isJsonNull()) {
        BatchPaymentDetails.validateJsonElement(jsonObj.get("BatchPayments"));
      }
      // validate the optional field `BrandingTheme`
      if (jsonObj.get("BrandingTheme") != null && !jsonObj.get("BrandingTheme").isJsonNull()) {
        BrandingTheme.validateJsonElement(jsonObj.get("BrandingTheme"));
      }
      if (jsonObj.get("ContactGroups") != null && !jsonObj.get("ContactGroups").isJsonNull()) {
        JsonArray jsonArraycontactGroups = jsonObj.getAsJsonArray("ContactGroups");
        if (jsonArraycontactGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ContactGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ContactGroups` to be an array in the JSON string but got `%s`", jsonObj.get("ContactGroups").toString()));
          }

          // validate the optional field `ContactGroups` (array)
          for (int i = 0; i < jsonArraycontactGroups.size(); i++) {
            ContactGroup.validateJsonElement(jsonArraycontactGroups.get(i));
          };
        }
      }
      if ((jsonObj.get("ContactID") != null && !jsonObj.get("ContactID").isJsonNull()) && !jsonObj.get("ContactID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactID").toString()));
      }
      if ((jsonObj.get("ContactNumber") != null && !jsonObj.get("ContactNumber").isJsonNull()) && !jsonObj.get("ContactNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactNumber").toString()));
      }
      if (jsonObj.get("ContactPersons") != null && !jsonObj.get("ContactPersons").isJsonNull()) {
        JsonArray jsonArraycontactPersons = jsonObj.getAsJsonArray("ContactPersons");
        if (jsonArraycontactPersons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ContactPersons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ContactPersons` to be an array in the JSON string but got `%s`", jsonObj.get("ContactPersons").toString()));
          }

          // validate the optional field `ContactPersons` (array)
          for (int i = 0; i < jsonArraycontactPersons.size(); i++) {
            ContactPerson.validateJsonElement(jsonArraycontactPersons.get(i));
          };
        }
      }
      if ((jsonObj.get("ContactStatus") != null && !jsonObj.get("ContactStatus").isJsonNull()) && !jsonObj.get("ContactStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactStatus").toString()));
      }
      // validate the optional field `ContactStatus`
      if (jsonObj.get("ContactStatus") != null && !jsonObj.get("ContactStatus").isJsonNull()) {
        ContactStatusEnum.validateJsonElement(jsonObj.get("ContactStatus"));
      }
      if ((jsonObj.get("DefaultCurrency") != null && !jsonObj.get("DefaultCurrency").isJsonNull()) && !jsonObj.get("DefaultCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultCurrency").toString()));
      }
      // validate the optional field `DefaultCurrency`
      if (jsonObj.get("DefaultCurrency") != null && !jsonObj.get("DefaultCurrency").isJsonNull()) {
        CurrencyCode.validateJsonElement(jsonObj.get("DefaultCurrency"));
      }
      if ((jsonObj.get("EmailAddress") != null && !jsonObj.get("EmailAddress").isJsonNull()) && !jsonObj.get("EmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmailAddress").toString()));
      }
      if ((jsonObj.get("FirstName") != null && !jsonObj.get("FirstName").isJsonNull()) && !jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if ((jsonObj.get("LastName") != null && !jsonObj.get("LastName").isJsonNull()) && !jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `PaymentTerms`
      if (jsonObj.get("PaymentTerms") != null && !jsonObj.get("PaymentTerms").isJsonNull()) {
        PaymentTerm.validateJsonElement(jsonObj.get("PaymentTerms"));
      }
      if (jsonObj.get("Phones") != null && !jsonObj.get("Phones").isJsonNull()) {
        JsonArray jsonArrayphones = jsonObj.getAsJsonArray("Phones");
        if (jsonArrayphones != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Phones").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Phones` to be an array in the JSON string but got `%s`", jsonObj.get("Phones").toString()));
          }

          // validate the optional field `Phones` (array)
          for (int i = 0; i < jsonArrayphones.size(); i++) {
            Phone.validateJsonElement(jsonArrayphones.get(i));
          };
        }
      }
      if ((jsonObj.get("PurchasesDefaultAccountCode") != null && !jsonObj.get("PurchasesDefaultAccountCode").isJsonNull()) && !jsonObj.get("PurchasesDefaultAccountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PurchasesDefaultAccountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PurchasesDefaultAccountCode").toString()));
      }
      if (jsonObj.get("PurchasesTrackingCategories") != null && !jsonObj.get("PurchasesTrackingCategories").isJsonNull()) {
        JsonArray jsonArraypurchasesTrackingCategories = jsonObj.getAsJsonArray("PurchasesTrackingCategories");
        if (jsonArraypurchasesTrackingCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PurchasesTrackingCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PurchasesTrackingCategories` to be an array in the JSON string but got `%s`", jsonObj.get("PurchasesTrackingCategories").toString()));
          }

          // validate the optional field `PurchasesTrackingCategories` (array)
          for (int i = 0; i < jsonArraypurchasesTrackingCategories.size(); i++) {
            SalesTrackingCategory.validateJsonElement(jsonArraypurchasesTrackingCategories.get(i));
          };
        }
      }
      if ((jsonObj.get("SalesDefaultAccountCode") != null && !jsonObj.get("SalesDefaultAccountCode").isJsonNull()) && !jsonObj.get("SalesDefaultAccountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SalesDefaultAccountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SalesDefaultAccountCode").toString()));
      }
      if (jsonObj.get("SalesTrackingCategories") != null && !jsonObj.get("SalesTrackingCategories").isJsonNull()) {
        JsonArray jsonArraysalesTrackingCategories = jsonObj.getAsJsonArray("SalesTrackingCategories");
        if (jsonArraysalesTrackingCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SalesTrackingCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SalesTrackingCategories` to be an array in the JSON string but got `%s`", jsonObj.get("SalesTrackingCategories").toString()));
          }

          // validate the optional field `SalesTrackingCategories` (array)
          for (int i = 0; i < jsonArraysalesTrackingCategories.size(); i++) {
            SalesTrackingCategory.validateJsonElement(jsonArraysalesTrackingCategories.get(i));
          };
        }
      }
      if ((jsonObj.get("SkypeUserName") != null && !jsonObj.get("SkypeUserName").isJsonNull()) && !jsonObj.get("SkypeUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SkypeUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SkypeUserName").toString()));
      }
      if ((jsonObj.get("StatusAttributeString") != null && !jsonObj.get("StatusAttributeString").isJsonNull()) && !jsonObj.get("StatusAttributeString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatusAttributeString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusAttributeString").toString()));
      }
      if ((jsonObj.get("TaxNumber") != null && !jsonObj.get("TaxNumber").isJsonNull()) && !jsonObj.get("TaxNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxNumber").toString()));
      }
      if ((jsonObj.get("TrackingCategoryName") != null && !jsonObj.get("TrackingCategoryName").isJsonNull()) && !jsonObj.get("TrackingCategoryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackingCategoryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackingCategoryName").toString()));
      }
      if ((jsonObj.get("TrackingCategoryOption") != null && !jsonObj.get("TrackingCategoryOption").isJsonNull()) && !jsonObj.get("TrackingCategoryOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackingCategoryOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackingCategoryOption").toString()));
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
      if (jsonObj.get("ValidationErrors") != null && !jsonObj.get("ValidationErrors").isJsonNull()) {
        JsonArray jsonArrayvalidationErrors = jsonObj.getAsJsonArray("ValidationErrors");
        if (jsonArrayvalidationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ValidationErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ValidationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("ValidationErrors").toString()));
          }

          // validate the optional field `ValidationErrors` (array)
          for (int i = 0; i < jsonArrayvalidationErrors.size(); i++) {
            ValidationError.validateJsonElement(jsonArrayvalidationErrors.get(i));
          };
        }
      }
      if ((jsonObj.get("Website") != null && !jsonObj.get("Website").isJsonNull()) && !jsonObj.get("Website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Website").toString()));
      }
      if ((jsonObj.get("XeroNetworkKey") != null && !jsonObj.get("XeroNetworkKey").isJsonNull()) && !jsonObj.get("XeroNetworkKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `XeroNetworkKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("XeroNetworkKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Contact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Contact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Contact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Contact.class));

       return (TypeAdapter<T>) new TypeAdapter<Contact>() {
           @Override
           public void write(JsonWriter out, Contact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Contact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Contact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Contact
   * @throws IOException if the JSON string is invalid with respect to Contact
   */
  public static Contact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Contact.class);
  }

  /**
   * Convert an instance of Contact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

