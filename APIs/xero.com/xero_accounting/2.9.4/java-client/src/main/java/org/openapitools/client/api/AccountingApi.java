/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Account;
import org.openapitools.client.model.Accounts;
import org.openapitools.client.model.Actions;
import org.openapitools.client.model.Allocations;
import org.openapitools.client.model.Attachments;
import org.openapitools.client.model.BankTransactions;
import org.openapitools.client.model.BankTransfers;
import org.openapitools.client.model.BatchPayments;
import org.openapitools.client.model.BrandingThemes;
import org.openapitools.client.model.CISOrgSettings;
import org.openapitools.client.model.CISSettings;
import org.openapitools.client.model.ContactGroups;
import org.openapitools.client.model.Contacts;
import org.openapitools.client.model.CreditNotes;
import org.openapitools.client.model.Currencies;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.Employees;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ExpenseClaims;
import java.io.File;
import org.openapitools.client.model.HistoryRecords;
import org.openapitools.client.model.ImportSummaryObject;
import org.openapitools.client.model.InvoiceReminders;
import org.openapitools.client.model.Invoices;
import org.openapitools.client.model.Items;
import org.openapitools.client.model.Journals;
import org.openapitools.client.model.LinkedTransaction;
import org.openapitools.client.model.LinkedTransactions;
import java.time.LocalDate;
import org.openapitools.client.model.ManualJournals;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OnlineInvoices;
import org.openapitools.client.model.Organisations;
import org.openapitools.client.model.Overpayments;
import org.openapitools.client.model.Payment;
import org.openapitools.client.model.PaymentDelete;
import org.openapitools.client.model.PaymentService;
import org.openapitools.client.model.PaymentServices;
import org.openapitools.client.model.Payments;
import org.openapitools.client.model.Prepayments;
import org.openapitools.client.model.PurchaseOrders;
import org.openapitools.client.model.Quotes;
import org.openapitools.client.model.Receipts;
import org.openapitools.client.model.RepeatingInvoices;
import org.openapitools.client.model.ReportWithRows;
import org.openapitools.client.model.Reports;
import org.openapitools.client.model.RequestEmpty;
import org.openapitools.client.model.Setup;
import org.openapitools.client.model.TaxRates;
import org.openapitools.client.model.TrackingCategories;
import org.openapitools.client.model.TrackingCategory;
import org.openapitools.client.model.TrackingOption;
import org.openapitools.client.model.TrackingOptions;
import java.util.UUID;
import org.openapitools.client.model.Users;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAccount
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param account Account object in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - created new Account and return response of type Accounts array with new Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountCall(String xeroTenantId, Account account, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = account;

        // create path and map variables
        String localVarPath = "/Accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccountValidateBeforeCall(String xeroTenantId, Account account, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createAccount(Async)");
        }

        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling createAccount(Async)");
        }

        return createAccountCall(xeroTenantId, account, _callback);

    }

    /**
     * Creates a new chart of accounts
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param account Account object in body of request (required)
     * @return Accounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - created new Account and return response of type Accounts array with new Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public Accounts createAccount(String xeroTenantId, Account account) throws ApiException {
        ApiResponse<Accounts> localVarResp = createAccountWithHttpInfo(xeroTenantId, account);
        return localVarResp.getData();
    }

    /**
     * Creates a new chart of accounts
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param account Account object in body of request (required)
     * @return ApiResponse&lt;Accounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - created new Account and return response of type Accounts array with new Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Accounts> createAccountWithHttpInfo(String xeroTenantId, Account account) throws ApiException {
        okhttp3.Call localVarCall = createAccountValidateBeforeCall(xeroTenantId, account, null);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new chart of accounts (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param account Account object in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - created new Account and return response of type Accounts array with new Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountAsync(String xeroTenantId, Account account, final ApiCallback<Accounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccountValidateBeforeCall(xeroTenantId, account, _callback);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAccountAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountAttachmentByFileNameCall(String xeroTenantId, UUID accountID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Accounts/{AccountID}/Attachments/{FileName}"
            .replace("{" + "AccountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccountAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID accountID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createAccountAttachmentByFileName(Async)");
        }

        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling createAccountAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling createAccountAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAccountAttachmentByFileName(Async)");
        }

        return createAccountAttachmentByFileNameCall(xeroTenantId, accountID, fileName, body, _callback);

    }

    /**
     * Creates an attachment on a specific account
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments createAccountAttachmentByFileName(String xeroTenantId, UUID accountID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = createAccountAttachmentByFileNameWithHttpInfo(xeroTenantId, accountID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * Creates an attachment on a specific account
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> createAccountAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID accountID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = createAccountAttachmentByFileNameValidateBeforeCall(xeroTenantId, accountID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates an attachment on a specific account (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountAttachmentByFileNameAsync(String xeroTenantId, UUID accountID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccountAttachmentByFileNameValidateBeforeCall(xeroTenantId, accountID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBankTransactionAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param fileName The name of the file being attached (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBankTransactionAttachmentByFileNameCall(String xeroTenantId, UUID bankTransactionID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/BankTransactions/{BankTransactionID}/Attachments/{FileName}"
            .replace("{" + "BankTransactionID" + "}", localVarApiClient.escapeString(bankTransactionID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBankTransactionAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID bankTransactionID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createBankTransactionAttachmentByFileName(Async)");
        }

        // verify the required parameter 'bankTransactionID' is set
        if (bankTransactionID == null) {
            throw new ApiException("Missing the required parameter 'bankTransactionID' when calling createBankTransactionAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling createBankTransactionAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createBankTransactionAttachmentByFileName(Async)");
        }

        return createBankTransactionAttachmentByFileNameCall(xeroTenantId, bankTransactionID, fileName, body, _callback);

    }

    /**
     * Creates an attachment for a specific bank transaction by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param fileName The name of the file being attached (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments createBankTransactionAttachmentByFileName(String xeroTenantId, UUID bankTransactionID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = createBankTransactionAttachmentByFileNameWithHttpInfo(xeroTenantId, bankTransactionID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * Creates an attachment for a specific bank transaction by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param fileName The name of the file being attached (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> createBankTransactionAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID bankTransactionID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = createBankTransactionAttachmentByFileNameValidateBeforeCall(xeroTenantId, bankTransactionID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates an attachment for a specific bank transaction by filename (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param fileName The name of the file being attached (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBankTransactionAttachmentByFileNameAsync(String xeroTenantId, UUID bankTransactionID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBankTransactionAttachmentByFileNameValidateBeforeCall(xeroTenantId, bankTransactionID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBankTransactionHistoryRecord
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBankTransactionHistoryRecordCall(String xeroTenantId, UUID bankTransactionID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = historyRecords;

        // create path and map variables
        String localVarPath = "/BankTransactions/{BankTransactionID}/History"
            .replace("{" + "BankTransactionID" + "}", localVarApiClient.escapeString(bankTransactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBankTransactionHistoryRecordValidateBeforeCall(String xeroTenantId, UUID bankTransactionID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createBankTransactionHistoryRecord(Async)");
        }

        // verify the required parameter 'bankTransactionID' is set
        if (bankTransactionID == null) {
            throw new ApiException("Missing the required parameter 'bankTransactionID' when calling createBankTransactionHistoryRecord(Async)");
        }

        // verify the required parameter 'historyRecords' is set
        if (historyRecords == null) {
            throw new ApiException("Missing the required parameter 'historyRecords' when calling createBankTransactionHistoryRecord(Async)");
        }

        return createBankTransactionHistoryRecordCall(xeroTenantId, bankTransactionID, historyRecords, _callback);

    }

    /**
     * Creates a history record for a specific bank transactions
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords createBankTransactionHistoryRecord(String xeroTenantId, UUID bankTransactionID, HistoryRecords historyRecords) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = createBankTransactionHistoryRecordWithHttpInfo(xeroTenantId, bankTransactionID, historyRecords);
        return localVarResp.getData();
    }

    /**
     * Creates a history record for a specific bank transactions
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> createBankTransactionHistoryRecordWithHttpInfo(String xeroTenantId, UUID bankTransactionID, HistoryRecords historyRecords) throws ApiException {
        okhttp3.Call localVarCall = createBankTransactionHistoryRecordValidateBeforeCall(xeroTenantId, bankTransactionID, historyRecords, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a history record for a specific bank transactions (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBankTransactionHistoryRecordAsync(String xeroTenantId, UUID bankTransactionID, HistoryRecords historyRecords, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBankTransactionHistoryRecordValidateBeforeCall(xeroTenantId, bankTransactionID, historyRecords, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBankTransactions
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactions BankTransactions with an array of BankTransaction objects in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with new BankTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBankTransactionsCall(String xeroTenantId, BankTransactions bankTransactions, Boolean summarizeErrors, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransactions;

        // create path and map variables
        String localVarPath = "/BankTransactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBankTransactionsValidateBeforeCall(String xeroTenantId, BankTransactions bankTransactions, Boolean summarizeErrors, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createBankTransactions(Async)");
        }

        // verify the required parameter 'bankTransactions' is set
        if (bankTransactions == null) {
            throw new ApiException("Missing the required parameter 'bankTransactions' when calling createBankTransactions(Async)");
        }

        return createBankTransactionsCall(xeroTenantId, bankTransactions, summarizeErrors, unitdp, _callback);

    }

    /**
     * Creates one or more spent or received money transaction
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactions BankTransactions with an array of BankTransaction objects in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return BankTransactions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with new BankTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public BankTransactions createBankTransactions(String xeroTenantId, BankTransactions bankTransactions, Boolean summarizeErrors, Integer unitdp) throws ApiException {
        ApiResponse<BankTransactions> localVarResp = createBankTransactionsWithHttpInfo(xeroTenantId, bankTransactions, summarizeErrors, unitdp);
        return localVarResp.getData();
    }

    /**
     * Creates one or more spent or received money transaction
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactions BankTransactions with an array of BankTransaction objects in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;BankTransactions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with new BankTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankTransactions> createBankTransactionsWithHttpInfo(String xeroTenantId, BankTransactions bankTransactions, Boolean summarizeErrors, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = createBankTransactionsValidateBeforeCall(xeroTenantId, bankTransactions, summarizeErrors, unitdp, null);
        Type localVarReturnType = new TypeToken<BankTransactions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates one or more spent or received money transaction (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactions BankTransactions with an array of BankTransaction objects in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with new BankTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBankTransactionsAsync(String xeroTenantId, BankTransactions bankTransactions, Boolean summarizeErrors, Integer unitdp, final ApiCallback<BankTransactions> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBankTransactionsValidateBeforeCall(xeroTenantId, bankTransactions, summarizeErrors, unitdp, _callback);
        Type localVarReturnType = new TypeToken<BankTransactions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBankTransfer
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransfers BankTransfers with array of BankTransfer objects in request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of BankTransfers array of one BankTransfer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBankTransferCall(String xeroTenantId, BankTransfers bankTransfers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransfers;

        // create path and map variables
        String localVarPath = "/BankTransfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBankTransferValidateBeforeCall(String xeroTenantId, BankTransfers bankTransfers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createBankTransfer(Async)");
        }

        // verify the required parameter 'bankTransfers' is set
        if (bankTransfers == null) {
            throw new ApiException("Missing the required parameter 'bankTransfers' when calling createBankTransfer(Async)");
        }

        return createBankTransferCall(xeroTenantId, bankTransfers, _callback);

    }

    /**
     * Creates a bank transfer
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransfers BankTransfers with array of BankTransfer objects in request body (required)
     * @return BankTransfers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of BankTransfers array of one BankTransfer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public BankTransfers createBankTransfer(String xeroTenantId, BankTransfers bankTransfers) throws ApiException {
        ApiResponse<BankTransfers> localVarResp = createBankTransferWithHttpInfo(xeroTenantId, bankTransfers);
        return localVarResp.getData();
    }

    /**
     * Creates a bank transfer
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransfers BankTransfers with array of BankTransfer objects in request body (required)
     * @return ApiResponse&lt;BankTransfers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of BankTransfers array of one BankTransfer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankTransfers> createBankTransferWithHttpInfo(String xeroTenantId, BankTransfers bankTransfers) throws ApiException {
        okhttp3.Call localVarCall = createBankTransferValidateBeforeCall(xeroTenantId, bankTransfers, null);
        Type localVarReturnType = new TypeToken<BankTransfers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a bank transfer (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransfers BankTransfers with array of BankTransfer objects in request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of BankTransfers array of one BankTransfer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBankTransferAsync(String xeroTenantId, BankTransfers bankTransfers, final ApiCallback<BankTransfers> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBankTransferValidateBeforeCall(xeroTenantId, bankTransfers, _callback);
        Type localVarReturnType = new TypeToken<BankTransfers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBankTransferAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param fileName The name of the file being attached to a Bank Transfer (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of 0 to N Attachment for a Bank Transfer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBankTransferAttachmentByFileNameCall(String xeroTenantId, UUID bankTransferID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/BankTransfers/{BankTransferID}/Attachments/{FileName}"
            .replace("{" + "BankTransferID" + "}", localVarApiClient.escapeString(bankTransferID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBankTransferAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID bankTransferID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createBankTransferAttachmentByFileName(Async)");
        }

        // verify the required parameter 'bankTransferID' is set
        if (bankTransferID == null) {
            throw new ApiException("Missing the required parameter 'bankTransferID' when calling createBankTransferAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling createBankTransferAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createBankTransferAttachmentByFileName(Async)");
        }

        return createBankTransferAttachmentByFileNameCall(xeroTenantId, bankTransferID, fileName, body, _callback);

    }

    /**
     * 
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param fileName The name of the file being attached to a Bank Transfer (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of 0 to N Attachment for a Bank Transfer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments createBankTransferAttachmentByFileName(String xeroTenantId, UUID bankTransferID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = createBankTransferAttachmentByFileNameWithHttpInfo(xeroTenantId, bankTransferID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param fileName The name of the file being attached to a Bank Transfer (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of 0 to N Attachment for a Bank Transfer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> createBankTransferAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID bankTransferID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = createBankTransferAttachmentByFileNameValidateBeforeCall(xeroTenantId, bankTransferID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param fileName The name of the file being attached to a Bank Transfer (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of 0 to N Attachment for a Bank Transfer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBankTransferAttachmentByFileNameAsync(String xeroTenantId, UUID bankTransferID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBankTransferAttachmentByFileNameValidateBeforeCall(xeroTenantId, bankTransferID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBankTransferHistoryRecord
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBankTransferHistoryRecordCall(String xeroTenantId, UUID bankTransferID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = historyRecords;

        // create path and map variables
        String localVarPath = "/BankTransfers/{BankTransferID}/History"
            .replace("{" + "BankTransferID" + "}", localVarApiClient.escapeString(bankTransferID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBankTransferHistoryRecordValidateBeforeCall(String xeroTenantId, UUID bankTransferID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createBankTransferHistoryRecord(Async)");
        }

        // verify the required parameter 'bankTransferID' is set
        if (bankTransferID == null) {
            throw new ApiException("Missing the required parameter 'bankTransferID' when calling createBankTransferHistoryRecord(Async)");
        }

        // verify the required parameter 'historyRecords' is set
        if (historyRecords == null) {
            throw new ApiException("Missing the required parameter 'historyRecords' when calling createBankTransferHistoryRecord(Async)");
        }

        return createBankTransferHistoryRecordCall(xeroTenantId, bankTransferID, historyRecords, _callback);

    }

    /**
     * Creates a history record for a specific bank transfer
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords createBankTransferHistoryRecord(String xeroTenantId, UUID bankTransferID, HistoryRecords historyRecords) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = createBankTransferHistoryRecordWithHttpInfo(xeroTenantId, bankTransferID, historyRecords);
        return localVarResp.getData();
    }

    /**
     * Creates a history record for a specific bank transfer
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> createBankTransferHistoryRecordWithHttpInfo(String xeroTenantId, UUID bankTransferID, HistoryRecords historyRecords) throws ApiException {
        okhttp3.Call localVarCall = createBankTransferHistoryRecordValidateBeforeCall(xeroTenantId, bankTransferID, historyRecords, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a history record for a specific bank transfer (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBankTransferHistoryRecordAsync(String xeroTenantId, UUID bankTransferID, HistoryRecords historyRecords, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBankTransferHistoryRecordValidateBeforeCall(xeroTenantId, bankTransferID, historyRecords, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBatchPayment
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param batchPayments BatchPayments with an array of Payments in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BatchPayments array of BatchPayment objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBatchPaymentCall(String xeroTenantId, BatchPayments batchPayments, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchPayments;

        // create path and map variables
        String localVarPath = "/BatchPayments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBatchPaymentValidateBeforeCall(String xeroTenantId, BatchPayments batchPayments, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createBatchPayment(Async)");
        }

        // verify the required parameter 'batchPayments' is set
        if (batchPayments == null) {
            throw new ApiException("Missing the required parameter 'batchPayments' when calling createBatchPayment(Async)");
        }

        return createBatchPaymentCall(xeroTenantId, batchPayments, summarizeErrors, _callback);

    }

    /**
     * Creates one or many batch payments for invoices
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param batchPayments BatchPayments with an array of Payments in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return BatchPayments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BatchPayments array of BatchPayment objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public BatchPayments createBatchPayment(String xeroTenantId, BatchPayments batchPayments, Boolean summarizeErrors) throws ApiException {
        ApiResponse<BatchPayments> localVarResp = createBatchPaymentWithHttpInfo(xeroTenantId, batchPayments, summarizeErrors);
        return localVarResp.getData();
    }

    /**
     * Creates one or many batch payments for invoices
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param batchPayments BatchPayments with an array of Payments in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return ApiResponse&lt;BatchPayments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BatchPayments array of BatchPayment objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchPayments> createBatchPaymentWithHttpInfo(String xeroTenantId, BatchPayments batchPayments, Boolean summarizeErrors) throws ApiException {
        okhttp3.Call localVarCall = createBatchPaymentValidateBeforeCall(xeroTenantId, batchPayments, summarizeErrors, null);
        Type localVarReturnType = new TypeToken<BatchPayments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates one or many batch payments for invoices (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param batchPayments BatchPayments with an array of Payments in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BatchPayments array of BatchPayment objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBatchPaymentAsync(String xeroTenantId, BatchPayments batchPayments, Boolean summarizeErrors, final ApiCallback<BatchPayments> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBatchPaymentValidateBeforeCall(xeroTenantId, batchPayments, summarizeErrors, _callback);
        Type localVarReturnType = new TypeToken<BatchPayments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBatchPaymentHistoryRecord
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param batchPaymentID Unique identifier for BatchPayment (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBatchPaymentHistoryRecordCall(String xeroTenantId, UUID batchPaymentID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = historyRecords;

        // create path and map variables
        String localVarPath = "/BatchPayments/{BatchPaymentID}/History"
            .replace("{" + "BatchPaymentID" + "}", localVarApiClient.escapeString(batchPaymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBatchPaymentHistoryRecordValidateBeforeCall(String xeroTenantId, UUID batchPaymentID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createBatchPaymentHistoryRecord(Async)");
        }

        // verify the required parameter 'batchPaymentID' is set
        if (batchPaymentID == null) {
            throw new ApiException("Missing the required parameter 'batchPaymentID' when calling createBatchPaymentHistoryRecord(Async)");
        }

        // verify the required parameter 'historyRecords' is set
        if (historyRecords == null) {
            throw new ApiException("Missing the required parameter 'historyRecords' when calling createBatchPaymentHistoryRecord(Async)");
        }

        return createBatchPaymentHistoryRecordCall(xeroTenantId, batchPaymentID, historyRecords, _callback);

    }

    /**
     * Creates a history record for a specific batch payment
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param batchPaymentID Unique identifier for BatchPayment (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords createBatchPaymentHistoryRecord(String xeroTenantId, UUID batchPaymentID, HistoryRecords historyRecords) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = createBatchPaymentHistoryRecordWithHttpInfo(xeroTenantId, batchPaymentID, historyRecords);
        return localVarResp.getData();
    }

    /**
     * Creates a history record for a specific batch payment
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param batchPaymentID Unique identifier for BatchPayment (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> createBatchPaymentHistoryRecordWithHttpInfo(String xeroTenantId, UUID batchPaymentID, HistoryRecords historyRecords) throws ApiException {
        okhttp3.Call localVarCall = createBatchPaymentHistoryRecordValidateBeforeCall(xeroTenantId, batchPaymentID, historyRecords, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a history record for a specific batch payment (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param batchPaymentID Unique identifier for BatchPayment (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBatchPaymentHistoryRecordAsync(String xeroTenantId, UUID batchPaymentID, HistoryRecords historyRecords, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBatchPaymentHistoryRecordValidateBeforeCall(xeroTenantId, batchPaymentID, historyRecords, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBrandingThemePaymentServices
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param brandingThemeID Unique identifier for a Branding Theme (required)
     * @param paymentService PaymentService object in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PaymentServices array with newly created PaymentService </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBrandingThemePaymentServicesCall(String xeroTenantId, UUID brandingThemeID, PaymentService paymentService, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentService;

        // create path and map variables
        String localVarPath = "/BrandingThemes/{BrandingThemeID}/PaymentServices"
            .replace("{" + "BrandingThemeID" + "}", localVarApiClient.escapeString(brandingThemeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBrandingThemePaymentServicesValidateBeforeCall(String xeroTenantId, UUID brandingThemeID, PaymentService paymentService, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createBrandingThemePaymentServices(Async)");
        }

        // verify the required parameter 'brandingThemeID' is set
        if (brandingThemeID == null) {
            throw new ApiException("Missing the required parameter 'brandingThemeID' when calling createBrandingThemePaymentServices(Async)");
        }

        // verify the required parameter 'paymentService' is set
        if (paymentService == null) {
            throw new ApiException("Missing the required parameter 'paymentService' when calling createBrandingThemePaymentServices(Async)");
        }

        return createBrandingThemePaymentServicesCall(xeroTenantId, brandingThemeID, paymentService, _callback);

    }

    /**
     * Creates a new custom payment service for a specific branding theme
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param brandingThemeID Unique identifier for a Branding Theme (required)
     * @param paymentService PaymentService object in body of request (required)
     * @return PaymentServices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PaymentServices array with newly created PaymentService </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public PaymentServices createBrandingThemePaymentServices(String xeroTenantId, UUID brandingThemeID, PaymentService paymentService) throws ApiException {
        ApiResponse<PaymentServices> localVarResp = createBrandingThemePaymentServicesWithHttpInfo(xeroTenantId, brandingThemeID, paymentService);
        return localVarResp.getData();
    }

    /**
     * Creates a new custom payment service for a specific branding theme
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param brandingThemeID Unique identifier for a Branding Theme (required)
     * @param paymentService PaymentService object in body of request (required)
     * @return ApiResponse&lt;PaymentServices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PaymentServices array with newly created PaymentService </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentServices> createBrandingThemePaymentServicesWithHttpInfo(String xeroTenantId, UUID brandingThemeID, PaymentService paymentService) throws ApiException {
        okhttp3.Call localVarCall = createBrandingThemePaymentServicesValidateBeforeCall(xeroTenantId, brandingThemeID, paymentService, null);
        Type localVarReturnType = new TypeToken<PaymentServices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new custom payment service for a specific branding theme (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param brandingThemeID Unique identifier for a Branding Theme (required)
     * @param paymentService PaymentService object in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PaymentServices array with newly created PaymentService </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBrandingThemePaymentServicesAsync(String xeroTenantId, UUID brandingThemeID, PaymentService paymentService, final ApiCallback<PaymentServices> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBrandingThemePaymentServicesValidateBeforeCall(xeroTenantId, brandingThemeID, paymentService, _callback);
        Type localVarReturnType = new TypeToken<PaymentServices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createContactAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param fileName Name for the file you are attaching (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with an newly created Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContactAttachmentByFileNameCall(String xeroTenantId, UUID contactID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Contacts/{ContactID}/Attachments/{FileName}"
            .replace("{" + "ContactID" + "}", localVarApiClient.escapeString(contactID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createContactAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID contactID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createContactAttachmentByFileName(Async)");
        }

        // verify the required parameter 'contactID' is set
        if (contactID == null) {
            throw new ApiException("Missing the required parameter 'contactID' when calling createContactAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling createContactAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createContactAttachmentByFileName(Async)");
        }

        return createContactAttachmentByFileNameCall(xeroTenantId, contactID, fileName, body, _callback);

    }

    /**
     * 
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param fileName Name for the file you are attaching (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with an newly created Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments createContactAttachmentByFileName(String xeroTenantId, UUID contactID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = createContactAttachmentByFileNameWithHttpInfo(xeroTenantId, contactID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param fileName Name for the file you are attaching (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with an newly created Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> createContactAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID contactID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = createContactAttachmentByFileNameValidateBeforeCall(xeroTenantId, contactID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param fileName Name for the file you are attaching (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with an newly created Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContactAttachmentByFileNameAsync(String xeroTenantId, UUID contactID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = createContactAttachmentByFileNameValidateBeforeCall(xeroTenantId, contactID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createContactGroup
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroups ContactGroups with an array of names in request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contact Groups array of newly created Contact Group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContactGroupCall(String xeroTenantId, ContactGroups contactGroups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contactGroups;

        // create path and map variables
        String localVarPath = "/ContactGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createContactGroupValidateBeforeCall(String xeroTenantId, ContactGroups contactGroups, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createContactGroup(Async)");
        }

        // verify the required parameter 'contactGroups' is set
        if (contactGroups == null) {
            throw new ApiException("Missing the required parameter 'contactGroups' when calling createContactGroup(Async)");
        }

        return createContactGroupCall(xeroTenantId, contactGroups, _callback);

    }

    /**
     * Creates a contact group
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroups ContactGroups with an array of names in request body (required)
     * @return ContactGroups
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contact Groups array of newly created Contact Group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public ContactGroups createContactGroup(String xeroTenantId, ContactGroups contactGroups) throws ApiException {
        ApiResponse<ContactGroups> localVarResp = createContactGroupWithHttpInfo(xeroTenantId, contactGroups);
        return localVarResp.getData();
    }

    /**
     * Creates a contact group
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroups ContactGroups with an array of names in request body (required)
     * @return ApiResponse&lt;ContactGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contact Groups array of newly created Contact Group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactGroups> createContactGroupWithHttpInfo(String xeroTenantId, ContactGroups contactGroups) throws ApiException {
        okhttp3.Call localVarCall = createContactGroupValidateBeforeCall(xeroTenantId, contactGroups, null);
        Type localVarReturnType = new TypeToken<ContactGroups>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a contact group (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroups ContactGroups with an array of names in request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contact Groups array of newly created Contact Group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContactGroupAsync(String xeroTenantId, ContactGroups contactGroups, final ApiCallback<ContactGroups> _callback) throws ApiException {

        okhttp3.Call localVarCall = createContactGroupValidateBeforeCall(xeroTenantId, contactGroups, _callback);
        Type localVarReturnType = new TypeToken<ContactGroups>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createContactGroupContacts
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @param contacts Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array of added Contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContactGroupContactsCall(String xeroTenantId, UUID contactGroupID, Contacts contacts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contacts;

        // create path and map variables
        String localVarPath = "/ContactGroups/{ContactGroupID}/Contacts"
            .replace("{" + "ContactGroupID" + "}", localVarApiClient.escapeString(contactGroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createContactGroupContactsValidateBeforeCall(String xeroTenantId, UUID contactGroupID, Contacts contacts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createContactGroupContacts(Async)");
        }

        // verify the required parameter 'contactGroupID' is set
        if (contactGroupID == null) {
            throw new ApiException("Missing the required parameter 'contactGroupID' when calling createContactGroupContacts(Async)");
        }

        // verify the required parameter 'contacts' is set
        if (contacts == null) {
            throw new ApiException("Missing the required parameter 'contacts' when calling createContactGroupContacts(Async)");
        }

        return createContactGroupContactsCall(xeroTenantId, contactGroupID, contacts, _callback);

    }

    /**
     * Creates contacts to a specific contact group
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @param contacts Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request (required)
     * @return Contacts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array of added Contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Contacts createContactGroupContacts(String xeroTenantId, UUID contactGroupID, Contacts contacts) throws ApiException {
        ApiResponse<Contacts> localVarResp = createContactGroupContactsWithHttpInfo(xeroTenantId, contactGroupID, contacts);
        return localVarResp.getData();
    }

    /**
     * Creates contacts to a specific contact group
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @param contacts Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request (required)
     * @return ApiResponse&lt;Contacts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array of added Contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Contacts> createContactGroupContactsWithHttpInfo(String xeroTenantId, UUID contactGroupID, Contacts contacts) throws ApiException {
        okhttp3.Call localVarCall = createContactGroupContactsValidateBeforeCall(xeroTenantId, contactGroupID, contacts, null);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates contacts to a specific contact group (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @param contacts Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array of added Contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContactGroupContactsAsync(String xeroTenantId, UUID contactGroupID, Contacts contacts, final ApiCallback<Contacts> _callback) throws ApiException {

        okhttp3.Call localVarCall = createContactGroupContactsValidateBeforeCall(xeroTenantId, contactGroupID, contacts, _callback);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createContactHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContactHistoryCall(String xeroTenantId, UUID contactID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = historyRecords;

        // create path and map variables
        String localVarPath = "/Contacts/{ContactID}/History"
            .replace("{" + "ContactID" + "}", localVarApiClient.escapeString(contactID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createContactHistoryValidateBeforeCall(String xeroTenantId, UUID contactID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createContactHistory(Async)");
        }

        // verify the required parameter 'contactID' is set
        if (contactID == null) {
            throw new ApiException("Missing the required parameter 'contactID' when calling createContactHistory(Async)");
        }

        // verify the required parameter 'historyRecords' is set
        if (historyRecords == null) {
            throw new ApiException("Missing the required parameter 'historyRecords' when calling createContactHistory(Async)");
        }

        return createContactHistoryCall(xeroTenantId, contactID, historyRecords, _callback);

    }

    /**
     * Creates a new history record for a specific contact
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords createContactHistory(String xeroTenantId, UUID contactID, HistoryRecords historyRecords) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = createContactHistoryWithHttpInfo(xeroTenantId, contactID, historyRecords);
        return localVarResp.getData();
    }

    /**
     * Creates a new history record for a specific contact
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> createContactHistoryWithHttpInfo(String xeroTenantId, UUID contactID, HistoryRecords historyRecords) throws ApiException {
        okhttp3.Call localVarCall = createContactHistoryValidateBeforeCall(xeroTenantId, contactID, historyRecords, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new history record for a specific contact (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContactHistoryAsync(String xeroTenantId, UUID contactID, HistoryRecords historyRecords, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = createContactHistoryValidateBeforeCall(xeroTenantId, contactID, historyRecords, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createContacts
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contacts Contacts with an array of Contact objects to create in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with newly created Contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContactsCall(String xeroTenantId, Contacts contacts, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contacts;

        // create path and map variables
        String localVarPath = "/Contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createContactsValidateBeforeCall(String xeroTenantId, Contacts contacts, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createContacts(Async)");
        }

        // verify the required parameter 'contacts' is set
        if (contacts == null) {
            throw new ApiException("Missing the required parameter 'contacts' when calling createContacts(Async)");
        }

        return createContactsCall(xeroTenantId, contacts, summarizeErrors, _callback);

    }

    /**
     * Creates multiple contacts (bulk) in a Xero organisation
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contacts Contacts with an array of Contact objects to create in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return Contacts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with newly created Contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public Contacts createContacts(String xeroTenantId, Contacts contacts, Boolean summarizeErrors) throws ApiException {
        ApiResponse<Contacts> localVarResp = createContactsWithHttpInfo(xeroTenantId, contacts, summarizeErrors);
        return localVarResp.getData();
    }

    /**
     * Creates multiple contacts (bulk) in a Xero organisation
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contacts Contacts with an array of Contact objects to create in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return ApiResponse&lt;Contacts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with newly created Contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Contacts> createContactsWithHttpInfo(String xeroTenantId, Contacts contacts, Boolean summarizeErrors) throws ApiException {
        okhttp3.Call localVarCall = createContactsValidateBeforeCall(xeroTenantId, contacts, summarizeErrors, null);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates multiple contacts (bulk) in a Xero organisation (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contacts Contacts with an array of Contact objects to create in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with newly created Contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContactsAsync(String xeroTenantId, Contacts contacts, Boolean summarizeErrors, final ApiCallback<Contacts> _callback) throws ApiException {

        okhttp3.Call localVarCall = createContactsValidateBeforeCall(xeroTenantId, contacts, summarizeErrors, _callback);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCreditNoteAllocation
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param allocations Allocations with array of Allocation object in body of request. (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Allocations array with newly created Allocation for specific Credit Note </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCreditNoteAllocationCall(String xeroTenantId, UUID creditNoteID, Allocations allocations, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = allocations;

        // create path and map variables
        String localVarPath = "/CreditNotes/{CreditNoteID}/Allocations"
            .replace("{" + "CreditNoteID" + "}", localVarApiClient.escapeString(creditNoteID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCreditNoteAllocationValidateBeforeCall(String xeroTenantId, UUID creditNoteID, Allocations allocations, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createCreditNoteAllocation(Async)");
        }

        // verify the required parameter 'creditNoteID' is set
        if (creditNoteID == null) {
            throw new ApiException("Missing the required parameter 'creditNoteID' when calling createCreditNoteAllocation(Async)");
        }

        // verify the required parameter 'allocations' is set
        if (allocations == null) {
            throw new ApiException("Missing the required parameter 'allocations' when calling createCreditNoteAllocation(Async)");
        }

        return createCreditNoteAllocationCall(xeroTenantId, creditNoteID, allocations, summarizeErrors, _callback);

    }

    /**
     * Creates allocation for a specific credit note
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param allocations Allocations with array of Allocation object in body of request. (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return Allocations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Allocations array with newly created Allocation for specific Credit Note </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Allocations createCreditNoteAllocation(String xeroTenantId, UUID creditNoteID, Allocations allocations, Boolean summarizeErrors) throws ApiException {
        ApiResponse<Allocations> localVarResp = createCreditNoteAllocationWithHttpInfo(xeroTenantId, creditNoteID, allocations, summarizeErrors);
        return localVarResp.getData();
    }

    /**
     * Creates allocation for a specific credit note
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param allocations Allocations with array of Allocation object in body of request. (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return ApiResponse&lt;Allocations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Allocations array with newly created Allocation for specific Credit Note </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Allocations> createCreditNoteAllocationWithHttpInfo(String xeroTenantId, UUID creditNoteID, Allocations allocations, Boolean summarizeErrors) throws ApiException {
        okhttp3.Call localVarCall = createCreditNoteAllocationValidateBeforeCall(xeroTenantId, creditNoteID, allocations, summarizeErrors, null);
        Type localVarReturnType = new TypeToken<Allocations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates allocation for a specific credit note (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param allocations Allocations with array of Allocation object in body of request. (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Allocations array with newly created Allocation for specific Credit Note </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCreditNoteAllocationAsync(String xeroTenantId, UUID creditNoteID, Allocations allocations, Boolean summarizeErrors, final ApiCallback<Allocations> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCreditNoteAllocationValidateBeforeCall(xeroTenantId, creditNoteID, allocations, summarizeErrors, _callback);
        Type localVarReturnType = new TypeToken<Allocations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCreditNoteAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param fileName Name of the file you are attaching to Credit Note (required)
     * @param body Byte array of file in body of request (required)
     * @param includeOnline Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with newly created Attachment for specific Credit Note </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCreditNoteAttachmentByFileNameCall(String xeroTenantId, UUID creditNoteID, String fileName, byte[] body, Boolean includeOnline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/CreditNotes/{CreditNoteID}/Attachments/{FileName}"
            .replace("{" + "CreditNoteID" + "}", localVarApiClient.escapeString(creditNoteID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeOnline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludeOnline", includeOnline));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCreditNoteAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID creditNoteID, String fileName, byte[] body, Boolean includeOnline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createCreditNoteAttachmentByFileName(Async)");
        }

        // verify the required parameter 'creditNoteID' is set
        if (creditNoteID == null) {
            throw new ApiException("Missing the required parameter 'creditNoteID' when calling createCreditNoteAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling createCreditNoteAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createCreditNoteAttachmentByFileName(Async)");
        }

        return createCreditNoteAttachmentByFileNameCall(xeroTenantId, creditNoteID, fileName, body, includeOnline, _callback);

    }

    /**
     * Creates an attachment for a specific credit note
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param fileName Name of the file you are attaching to Credit Note (required)
     * @param body Byte array of file in body of request (required)
     * @param includeOnline Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with newly created Attachment for specific Credit Note </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments createCreditNoteAttachmentByFileName(String xeroTenantId, UUID creditNoteID, String fileName, byte[] body, Boolean includeOnline) throws ApiException {
        ApiResponse<Attachments> localVarResp = createCreditNoteAttachmentByFileNameWithHttpInfo(xeroTenantId, creditNoteID, fileName, body, includeOnline);
        return localVarResp.getData();
    }

    /**
     * Creates an attachment for a specific credit note
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param fileName Name of the file you are attaching to Credit Note (required)
     * @param body Byte array of file in body of request (required)
     * @param includeOnline Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with newly created Attachment for specific Credit Note </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> createCreditNoteAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID creditNoteID, String fileName, byte[] body, Boolean includeOnline) throws ApiException {
        okhttp3.Call localVarCall = createCreditNoteAttachmentByFileNameValidateBeforeCall(xeroTenantId, creditNoteID, fileName, body, includeOnline, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates an attachment for a specific credit note (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param fileName Name of the file you are attaching to Credit Note (required)
     * @param body Byte array of file in body of request (required)
     * @param includeOnline Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with newly created Attachment for specific Credit Note </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCreditNoteAttachmentByFileNameAsync(String xeroTenantId, UUID creditNoteID, String fileName, byte[] body, Boolean includeOnline, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCreditNoteAttachmentByFileNameValidateBeforeCall(xeroTenantId, creditNoteID, fileName, body, includeOnline, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCreditNoteHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCreditNoteHistoryCall(String xeroTenantId, UUID creditNoteID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = historyRecords;

        // create path and map variables
        String localVarPath = "/CreditNotes/{CreditNoteID}/History"
            .replace("{" + "CreditNoteID" + "}", localVarApiClient.escapeString(creditNoteID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCreditNoteHistoryValidateBeforeCall(String xeroTenantId, UUID creditNoteID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createCreditNoteHistory(Async)");
        }

        // verify the required parameter 'creditNoteID' is set
        if (creditNoteID == null) {
            throw new ApiException("Missing the required parameter 'creditNoteID' when calling createCreditNoteHistory(Async)");
        }

        // verify the required parameter 'historyRecords' is set
        if (historyRecords == null) {
            throw new ApiException("Missing the required parameter 'historyRecords' when calling createCreditNoteHistory(Async)");
        }

        return createCreditNoteHistoryCall(xeroTenantId, creditNoteID, historyRecords, _callback);

    }

    /**
     * Retrieves history records of a specific credit note
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords createCreditNoteHistory(String xeroTenantId, UUID creditNoteID, HistoryRecords historyRecords) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = createCreditNoteHistoryWithHttpInfo(xeroTenantId, creditNoteID, historyRecords);
        return localVarResp.getData();
    }

    /**
     * Retrieves history records of a specific credit note
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> createCreditNoteHistoryWithHttpInfo(String xeroTenantId, UUID creditNoteID, HistoryRecords historyRecords) throws ApiException {
        okhttp3.Call localVarCall = createCreditNoteHistoryValidateBeforeCall(xeroTenantId, creditNoteID, historyRecords, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves history records of a specific credit note (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCreditNoteHistoryAsync(String xeroTenantId, UUID creditNoteID, HistoryRecords historyRecords, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCreditNoteHistoryValidateBeforeCall(xeroTenantId, creditNoteID, historyRecords, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCreditNotes
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNotes Credit Notes with array of CreditNote object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array of newly created CreditNote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCreditNotesCall(String xeroTenantId, CreditNotes creditNotes, Boolean summarizeErrors, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditNotes;

        // create path and map variables
        String localVarPath = "/CreditNotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCreditNotesValidateBeforeCall(String xeroTenantId, CreditNotes creditNotes, Boolean summarizeErrors, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createCreditNotes(Async)");
        }

        // verify the required parameter 'creditNotes' is set
        if (creditNotes == null) {
            throw new ApiException("Missing the required parameter 'creditNotes' when calling createCreditNotes(Async)");
        }

        return createCreditNotesCall(xeroTenantId, creditNotes, summarizeErrors, unitdp, _callback);

    }

    /**
     * Creates a new credit note
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNotes Credit Notes with array of CreditNote object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return CreditNotes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array of newly created CreditNote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public CreditNotes createCreditNotes(String xeroTenantId, CreditNotes creditNotes, Boolean summarizeErrors, Integer unitdp) throws ApiException {
        ApiResponse<CreditNotes> localVarResp = createCreditNotesWithHttpInfo(xeroTenantId, creditNotes, summarizeErrors, unitdp);
        return localVarResp.getData();
    }

    /**
     * Creates a new credit note
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNotes Credit Notes with array of CreditNote object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;CreditNotes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array of newly created CreditNote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditNotes> createCreditNotesWithHttpInfo(String xeroTenantId, CreditNotes creditNotes, Boolean summarizeErrors, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = createCreditNotesValidateBeforeCall(xeroTenantId, creditNotes, summarizeErrors, unitdp, null);
        Type localVarReturnType = new TypeToken<CreditNotes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new credit note (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNotes Credit Notes with array of CreditNote object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array of newly created CreditNote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCreditNotesAsync(String xeroTenantId, CreditNotes creditNotes, Boolean summarizeErrors, Integer unitdp, final ApiCallback<CreditNotes> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCreditNotesValidateBeforeCall(xeroTenantId, creditNotes, summarizeErrors, unitdp, _callback);
        Type localVarReturnType = new TypeToken<CreditNotes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCurrency
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param currency Currency object in the body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsupported - return response incorrect exception, API is not able to create new Currency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCurrencyCall(String xeroTenantId, Currency currency, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = currency;

        // create path and map variables
        String localVarPath = "/Currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCurrencyValidateBeforeCall(String xeroTenantId, Currency currency, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createCurrency(Async)");
        }

        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling createCurrency(Async)");
        }

        return createCurrencyCall(xeroTenantId, currency, _callback);

    }

    /**
     * Create a new currency for a Xero organisation
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param currency Currency object in the body of request (required)
     * @return Currencies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsupported - return response incorrect exception, API is not able to create new Currency </td><td>  -  </td></tr>
     </table>
     */
    public Currencies createCurrency(String xeroTenantId, Currency currency) throws ApiException {
        ApiResponse<Currencies> localVarResp = createCurrencyWithHttpInfo(xeroTenantId, currency);
        return localVarResp.getData();
    }

    /**
     * Create a new currency for a Xero organisation
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param currency Currency object in the body of request (required)
     * @return ApiResponse&lt;Currencies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsupported - return response incorrect exception, API is not able to create new Currency </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Currencies> createCurrencyWithHttpInfo(String xeroTenantId, Currency currency) throws ApiException {
        okhttp3.Call localVarCall = createCurrencyValidateBeforeCall(xeroTenantId, currency, null);
        Type localVarReturnType = new TypeToken<Currencies>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new currency for a Xero organisation (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param currency Currency object in the body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsupported - return response incorrect exception, API is not able to create new Currency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCurrencyAsync(String xeroTenantId, Currency currency, final ApiCallback<Currencies> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCurrencyValidateBeforeCall(xeroTenantId, currency, _callback);
        Type localVarReturnType = new TypeToken<Currencies>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEmployees
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employees Employees with array of Employee object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Employees array with new Employee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmployeesCall(String xeroTenantId, Employees employees, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employees;

        // create path and map variables
        String localVarPath = "/Employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmployeesValidateBeforeCall(String xeroTenantId, Employees employees, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createEmployees(Async)");
        }

        // verify the required parameter 'employees' is set
        if (employees == null) {
            throw new ApiException("Missing the required parameter 'employees' when calling createEmployees(Async)");
        }

        return createEmployeesCall(xeroTenantId, employees, summarizeErrors, _callback);

    }

    /**
     * Creates new employees used in Xero payrun
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employees Employees with array of Employee object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return Employees
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Employees array with new Employee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Employees createEmployees(String xeroTenantId, Employees employees, Boolean summarizeErrors) throws ApiException {
        ApiResponse<Employees> localVarResp = createEmployeesWithHttpInfo(xeroTenantId, employees, summarizeErrors);
        return localVarResp.getData();
    }

    /**
     * Creates new employees used in Xero payrun
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employees Employees with array of Employee object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return ApiResponse&lt;Employees&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Employees array with new Employee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Employees> createEmployeesWithHttpInfo(String xeroTenantId, Employees employees, Boolean summarizeErrors) throws ApiException {
        okhttp3.Call localVarCall = createEmployeesValidateBeforeCall(xeroTenantId, employees, summarizeErrors, null);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates new employees used in Xero payrun (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employees Employees with array of Employee object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Employees array with new Employee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmployeesAsync(String xeroTenantId, Employees employees, Boolean summarizeErrors, final ApiCallback<Employees> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmployeesValidateBeforeCall(xeroTenantId, employees, summarizeErrors, _callback);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createExpenseClaimHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaimID Unique identifier for a ExpenseClaim (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExpenseClaimHistoryCall(String xeroTenantId, UUID expenseClaimID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = historyRecords;

        // create path and map variables
        String localVarPath = "/ExpenseClaims/{ExpenseClaimID}/History"
            .replace("{" + "ExpenseClaimID" + "}", localVarApiClient.escapeString(expenseClaimID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createExpenseClaimHistoryValidateBeforeCall(String xeroTenantId, UUID expenseClaimID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createExpenseClaimHistory(Async)");
        }

        // verify the required parameter 'expenseClaimID' is set
        if (expenseClaimID == null) {
            throw new ApiException("Missing the required parameter 'expenseClaimID' when calling createExpenseClaimHistory(Async)");
        }

        // verify the required parameter 'historyRecords' is set
        if (historyRecords == null) {
            throw new ApiException("Missing the required parameter 'historyRecords' when calling createExpenseClaimHistory(Async)");
        }

        return createExpenseClaimHistoryCall(xeroTenantId, expenseClaimID, historyRecords, _callback);

    }

    /**
     * Creates a history record for a specific expense claim
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaimID Unique identifier for a ExpenseClaim (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords createExpenseClaimHistory(String xeroTenantId, UUID expenseClaimID, HistoryRecords historyRecords) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = createExpenseClaimHistoryWithHttpInfo(xeroTenantId, expenseClaimID, historyRecords);
        return localVarResp.getData();
    }

    /**
     * Creates a history record for a specific expense claim
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaimID Unique identifier for a ExpenseClaim (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> createExpenseClaimHistoryWithHttpInfo(String xeroTenantId, UUID expenseClaimID, HistoryRecords historyRecords) throws ApiException {
        okhttp3.Call localVarCall = createExpenseClaimHistoryValidateBeforeCall(xeroTenantId, expenseClaimID, historyRecords, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a history record for a specific expense claim (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaimID Unique identifier for a ExpenseClaim (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExpenseClaimHistoryAsync(String xeroTenantId, UUID expenseClaimID, HistoryRecords historyRecords, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = createExpenseClaimHistoryValidateBeforeCall(xeroTenantId, expenseClaimID, historyRecords, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createExpenseClaims
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaims ExpenseClaims with array of ExpenseClaim object in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ExpenseClaims array with newly created ExpenseClaim </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExpenseClaimsCall(String xeroTenantId, ExpenseClaims expenseClaims, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expenseClaims;

        // create path and map variables
        String localVarPath = "/ExpenseClaims";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createExpenseClaimsValidateBeforeCall(String xeroTenantId, ExpenseClaims expenseClaims, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createExpenseClaims(Async)");
        }

        // verify the required parameter 'expenseClaims' is set
        if (expenseClaims == null) {
            throw new ApiException("Missing the required parameter 'expenseClaims' when calling createExpenseClaims(Async)");
        }

        return createExpenseClaimsCall(xeroTenantId, expenseClaims, _callback);

    }

    /**
     * Creates expense claims
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaims ExpenseClaims with array of ExpenseClaim object in body of request (required)
     * @return ExpenseClaims
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ExpenseClaims array with newly created ExpenseClaim </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ExpenseClaims createExpenseClaims(String xeroTenantId, ExpenseClaims expenseClaims) throws ApiException {
        ApiResponse<ExpenseClaims> localVarResp = createExpenseClaimsWithHttpInfo(xeroTenantId, expenseClaims);
        return localVarResp.getData();
    }

    /**
     * Creates expense claims
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaims ExpenseClaims with array of ExpenseClaim object in body of request (required)
     * @return ApiResponse&lt;ExpenseClaims&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ExpenseClaims array with newly created ExpenseClaim </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpenseClaims> createExpenseClaimsWithHttpInfo(String xeroTenantId, ExpenseClaims expenseClaims) throws ApiException {
        okhttp3.Call localVarCall = createExpenseClaimsValidateBeforeCall(xeroTenantId, expenseClaims, null);
        Type localVarReturnType = new TypeToken<ExpenseClaims>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates expense claims (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaims ExpenseClaims with array of ExpenseClaim object in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ExpenseClaims array with newly created ExpenseClaim </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExpenseClaimsAsync(String xeroTenantId, ExpenseClaims expenseClaims, final ApiCallback<ExpenseClaims> _callback) throws ApiException {

        okhttp3.Call localVarCall = createExpenseClaimsValidateBeforeCall(xeroTenantId, expenseClaims, _callback);
        Type localVarReturnType = new TypeToken<ExpenseClaims>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createInvoiceAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param fileName Name of the file you are attaching (required)
     * @param body Byte array of file in body of request (required)
     * @param includeOnline Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with newly created Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInvoiceAttachmentByFileNameCall(String xeroTenantId, UUID invoiceID, String fileName, byte[] body, Boolean includeOnline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Invoices/{InvoiceID}/Attachments/{FileName}"
            .replace("{" + "InvoiceID" + "}", localVarApiClient.escapeString(invoiceID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeOnline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludeOnline", includeOnline));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInvoiceAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID invoiceID, String fileName, byte[] body, Boolean includeOnline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createInvoiceAttachmentByFileName(Async)");
        }

        // verify the required parameter 'invoiceID' is set
        if (invoiceID == null) {
            throw new ApiException("Missing the required parameter 'invoiceID' when calling createInvoiceAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling createInvoiceAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createInvoiceAttachmentByFileName(Async)");
        }

        return createInvoiceAttachmentByFileNameCall(xeroTenantId, invoiceID, fileName, body, includeOnline, _callback);

    }

    /**
     * Creates an attachment for a specific invoice or purchase bill by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param fileName Name of the file you are attaching (required)
     * @param body Byte array of file in body of request (required)
     * @param includeOnline Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with newly created Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments createInvoiceAttachmentByFileName(String xeroTenantId, UUID invoiceID, String fileName, byte[] body, Boolean includeOnline) throws ApiException {
        ApiResponse<Attachments> localVarResp = createInvoiceAttachmentByFileNameWithHttpInfo(xeroTenantId, invoiceID, fileName, body, includeOnline);
        return localVarResp.getData();
    }

    /**
     * Creates an attachment for a specific invoice or purchase bill by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param fileName Name of the file you are attaching (required)
     * @param body Byte array of file in body of request (required)
     * @param includeOnline Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with newly created Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> createInvoiceAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID invoiceID, String fileName, byte[] body, Boolean includeOnline) throws ApiException {
        okhttp3.Call localVarCall = createInvoiceAttachmentByFileNameValidateBeforeCall(xeroTenantId, invoiceID, fileName, body, includeOnline, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates an attachment for a specific invoice or purchase bill by filename (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param fileName Name of the file you are attaching (required)
     * @param body Byte array of file in body of request (required)
     * @param includeOnline Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with newly created Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInvoiceAttachmentByFileNameAsync(String xeroTenantId, UUID invoiceID, String fileName, byte[] body, Boolean includeOnline, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInvoiceAttachmentByFileNameValidateBeforeCall(xeroTenantId, invoiceID, fileName, body, includeOnline, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createInvoiceHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInvoiceHistoryCall(String xeroTenantId, UUID invoiceID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = historyRecords;

        // create path and map variables
        String localVarPath = "/Invoices/{InvoiceID}/History"
            .replace("{" + "InvoiceID" + "}", localVarApiClient.escapeString(invoiceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInvoiceHistoryValidateBeforeCall(String xeroTenantId, UUID invoiceID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createInvoiceHistory(Async)");
        }

        // verify the required parameter 'invoiceID' is set
        if (invoiceID == null) {
            throw new ApiException("Missing the required parameter 'invoiceID' when calling createInvoiceHistory(Async)");
        }

        // verify the required parameter 'historyRecords' is set
        if (historyRecords == null) {
            throw new ApiException("Missing the required parameter 'historyRecords' when calling createInvoiceHistory(Async)");
        }

        return createInvoiceHistoryCall(xeroTenantId, invoiceID, historyRecords, _callback);

    }

    /**
     * Creates a history record for a specific invoice
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords createInvoiceHistory(String xeroTenantId, UUID invoiceID, HistoryRecords historyRecords) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = createInvoiceHistoryWithHttpInfo(xeroTenantId, invoiceID, historyRecords);
        return localVarResp.getData();
    }

    /**
     * Creates a history record for a specific invoice
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> createInvoiceHistoryWithHttpInfo(String xeroTenantId, UUID invoiceID, HistoryRecords historyRecords) throws ApiException {
        okhttp3.Call localVarCall = createInvoiceHistoryValidateBeforeCall(xeroTenantId, invoiceID, historyRecords, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a history record for a specific invoice (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInvoiceHistoryAsync(String xeroTenantId, UUID invoiceID, HistoryRecords historyRecords, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInvoiceHistoryValidateBeforeCall(xeroTenantId, invoiceID, historyRecords, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createInvoices
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoices Invoices with an array of invoice objects in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with newly created Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInvoicesCall(String xeroTenantId, Invoices invoices, Boolean summarizeErrors, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoices;

        // create path and map variables
        String localVarPath = "/Invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInvoicesValidateBeforeCall(String xeroTenantId, Invoices invoices, Boolean summarizeErrors, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createInvoices(Async)");
        }

        // verify the required parameter 'invoices' is set
        if (invoices == null) {
            throw new ApiException("Missing the required parameter 'invoices' when calling createInvoices(Async)");
        }

        return createInvoicesCall(xeroTenantId, invoices, summarizeErrors, unitdp, _callback);

    }

    /**
     * Creates one or more sales invoices or purchase bills
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoices Invoices with an array of invoice objects in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return Invoices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with newly created Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Invoices createInvoices(String xeroTenantId, Invoices invoices, Boolean summarizeErrors, Integer unitdp) throws ApiException {
        ApiResponse<Invoices> localVarResp = createInvoicesWithHttpInfo(xeroTenantId, invoices, summarizeErrors, unitdp);
        return localVarResp.getData();
    }

    /**
     * Creates one or more sales invoices or purchase bills
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoices Invoices with an array of invoice objects in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;Invoices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with newly created Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Invoices> createInvoicesWithHttpInfo(String xeroTenantId, Invoices invoices, Boolean summarizeErrors, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = createInvoicesValidateBeforeCall(xeroTenantId, invoices, summarizeErrors, unitdp, null);
        Type localVarReturnType = new TypeToken<Invoices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates one or more sales invoices or purchase bills (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoices Invoices with an array of invoice objects in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with newly created Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInvoicesAsync(String xeroTenantId, Invoices invoices, Boolean summarizeErrors, Integer unitdp, final ApiCallback<Invoices> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInvoicesValidateBeforeCall(xeroTenantId, invoices, summarizeErrors, unitdp, _callback);
        Type localVarReturnType = new TypeToken<Invoices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createItemHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createItemHistoryCall(String xeroTenantId, UUID itemID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = historyRecords;

        // create path and map variables
        String localVarPath = "/Items/{ItemID}/History"
            .replace("{" + "ItemID" + "}", localVarApiClient.escapeString(itemID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createItemHistoryValidateBeforeCall(String xeroTenantId, UUID itemID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createItemHistory(Async)");
        }

        // verify the required parameter 'itemID' is set
        if (itemID == null) {
            throw new ApiException("Missing the required parameter 'itemID' when calling createItemHistory(Async)");
        }

        // verify the required parameter 'historyRecords' is set
        if (historyRecords == null) {
            throw new ApiException("Missing the required parameter 'historyRecords' when calling createItemHistory(Async)");
        }

        return createItemHistoryCall(xeroTenantId, itemID, historyRecords, _callback);

    }

    /**
     * Creates a history record for a specific item
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords createItemHistory(String xeroTenantId, UUID itemID, HistoryRecords historyRecords) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = createItemHistoryWithHttpInfo(xeroTenantId, itemID, historyRecords);
        return localVarResp.getData();
    }

    /**
     * Creates a history record for a specific item
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> createItemHistoryWithHttpInfo(String xeroTenantId, UUID itemID, HistoryRecords historyRecords) throws ApiException {
        okhttp3.Call localVarCall = createItemHistoryValidateBeforeCall(xeroTenantId, itemID, historyRecords, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a history record for a specific item (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createItemHistoryAsync(String xeroTenantId, UUID itemID, HistoryRecords historyRecords, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = createItemHistoryValidateBeforeCall(xeroTenantId, itemID, historyRecords, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createItems
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param items Items with an array of Item objects in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with newly created Item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createItemsCall(String xeroTenantId, Items items, Boolean summarizeErrors, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = items;

        // create path and map variables
        String localVarPath = "/Items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createItemsValidateBeforeCall(String xeroTenantId, Items items, Boolean summarizeErrors, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createItems(Async)");
        }

        // verify the required parameter 'items' is set
        if (items == null) {
            throw new ApiException("Missing the required parameter 'items' when calling createItems(Async)");
        }

        return createItemsCall(xeroTenantId, items, summarizeErrors, unitdp, _callback);

    }

    /**
     * Creates one or more items
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param items Items with an array of Item objects in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return Items
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with newly created Item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Items createItems(String xeroTenantId, Items items, Boolean summarizeErrors, Integer unitdp) throws ApiException {
        ApiResponse<Items> localVarResp = createItemsWithHttpInfo(xeroTenantId, items, summarizeErrors, unitdp);
        return localVarResp.getData();
    }

    /**
     * Creates one or more items
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param items Items with an array of Item objects in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;Items&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with newly created Item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Items> createItemsWithHttpInfo(String xeroTenantId, Items items, Boolean summarizeErrors, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = createItemsValidateBeforeCall(xeroTenantId, items, summarizeErrors, unitdp, null);
        Type localVarReturnType = new TypeToken<Items>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates one or more items (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param items Items with an array of Item objects in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with newly created Item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createItemsAsync(String xeroTenantId, Items items, Boolean summarizeErrors, Integer unitdp, final ApiCallback<Items> _callback) throws ApiException {

        okhttp3.Call localVarCall = createItemsValidateBeforeCall(xeroTenantId, items, summarizeErrors, unitdp, _callback);
        Type localVarReturnType = new TypeToken<Items>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLinkedTransaction
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param linkedTransaction LinkedTransaction object in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type LinkedTransactions array with newly created LinkedTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLinkedTransactionCall(String xeroTenantId, LinkedTransaction linkedTransaction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkedTransaction;

        // create path and map variables
        String localVarPath = "/LinkedTransactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLinkedTransactionValidateBeforeCall(String xeroTenantId, LinkedTransaction linkedTransaction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createLinkedTransaction(Async)");
        }

        // verify the required parameter 'linkedTransaction' is set
        if (linkedTransaction == null) {
            throw new ApiException("Missing the required parameter 'linkedTransaction' when calling createLinkedTransaction(Async)");
        }

        return createLinkedTransactionCall(xeroTenantId, linkedTransaction, _callback);

    }

    /**
     * Creates linked transactions (billable expenses)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param linkedTransaction LinkedTransaction object in body of request (required)
     * @return LinkedTransactions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type LinkedTransactions array with newly created LinkedTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public LinkedTransactions createLinkedTransaction(String xeroTenantId, LinkedTransaction linkedTransaction) throws ApiException {
        ApiResponse<LinkedTransactions> localVarResp = createLinkedTransactionWithHttpInfo(xeroTenantId, linkedTransaction);
        return localVarResp.getData();
    }

    /**
     * Creates linked transactions (billable expenses)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param linkedTransaction LinkedTransaction object in body of request (required)
     * @return ApiResponse&lt;LinkedTransactions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type LinkedTransactions array with newly created LinkedTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkedTransactions> createLinkedTransactionWithHttpInfo(String xeroTenantId, LinkedTransaction linkedTransaction) throws ApiException {
        okhttp3.Call localVarCall = createLinkedTransactionValidateBeforeCall(xeroTenantId, linkedTransaction, null);
        Type localVarReturnType = new TypeToken<LinkedTransactions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates linked transactions (billable expenses) (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param linkedTransaction LinkedTransaction object in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type LinkedTransactions array with newly created LinkedTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLinkedTransactionAsync(String xeroTenantId, LinkedTransaction linkedTransaction, final ApiCallback<LinkedTransactions> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLinkedTransactionValidateBeforeCall(xeroTenantId, linkedTransaction, _callback);
        Type localVarReturnType = new TypeToken<LinkedTransactions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createManualJournalAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param fileName The name of the file being attached to a ManualJournal (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with a newly created Attachment for a ManualJournals </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createManualJournalAttachmentByFileNameCall(String xeroTenantId, UUID manualJournalID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/ManualJournals/{ManualJournalID}/Attachments/{FileName}"
            .replace("{" + "ManualJournalID" + "}", localVarApiClient.escapeString(manualJournalID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createManualJournalAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID manualJournalID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createManualJournalAttachmentByFileName(Async)");
        }

        // verify the required parameter 'manualJournalID' is set
        if (manualJournalID == null) {
            throw new ApiException("Missing the required parameter 'manualJournalID' when calling createManualJournalAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling createManualJournalAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createManualJournalAttachmentByFileName(Async)");
        }

        return createManualJournalAttachmentByFileNameCall(xeroTenantId, manualJournalID, fileName, body, _callback);

    }

    /**
     * Creates a specific attachment for a specific manual journal by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param fileName The name of the file being attached to a ManualJournal (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with a newly created Attachment for a ManualJournals </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments createManualJournalAttachmentByFileName(String xeroTenantId, UUID manualJournalID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = createManualJournalAttachmentByFileNameWithHttpInfo(xeroTenantId, manualJournalID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * Creates a specific attachment for a specific manual journal by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param fileName The name of the file being attached to a ManualJournal (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with a newly created Attachment for a ManualJournals </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> createManualJournalAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID manualJournalID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = createManualJournalAttachmentByFileNameValidateBeforeCall(xeroTenantId, manualJournalID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a specific attachment for a specific manual journal by file name (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param fileName The name of the file being attached to a ManualJournal (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with a newly created Attachment for a ManualJournals </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createManualJournalAttachmentByFileNameAsync(String xeroTenantId, UUID manualJournalID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = createManualJournalAttachmentByFileNameValidateBeforeCall(xeroTenantId, manualJournalID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createManualJournalHistoryRecord
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Xero generated unique identifier for a manual journal (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createManualJournalHistoryRecordCall(String xeroTenantId, UUID manualJournalID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = historyRecords;

        // create path and map variables
        String localVarPath = "/ManualJournals/{ManualJournalID}/History"
            .replace("{" + "ManualJournalID" + "}", localVarApiClient.escapeString(manualJournalID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createManualJournalHistoryRecordValidateBeforeCall(String xeroTenantId, UUID manualJournalID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createManualJournalHistoryRecord(Async)");
        }

        // verify the required parameter 'manualJournalID' is set
        if (manualJournalID == null) {
            throw new ApiException("Missing the required parameter 'manualJournalID' when calling createManualJournalHistoryRecord(Async)");
        }

        // verify the required parameter 'historyRecords' is set
        if (historyRecords == null) {
            throw new ApiException("Missing the required parameter 'historyRecords' when calling createManualJournalHistoryRecord(Async)");
        }

        return createManualJournalHistoryRecordCall(xeroTenantId, manualJournalID, historyRecords, _callback);

    }

    /**
     * Creates a history record for a specific manual journal
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Xero generated unique identifier for a manual journal (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords createManualJournalHistoryRecord(String xeroTenantId, UUID manualJournalID, HistoryRecords historyRecords) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = createManualJournalHistoryRecordWithHttpInfo(xeroTenantId, manualJournalID, historyRecords);
        return localVarResp.getData();
    }

    /**
     * Creates a history record for a specific manual journal
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Xero generated unique identifier for a manual journal (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> createManualJournalHistoryRecordWithHttpInfo(String xeroTenantId, UUID manualJournalID, HistoryRecords historyRecords) throws ApiException {
        okhttp3.Call localVarCall = createManualJournalHistoryRecordValidateBeforeCall(xeroTenantId, manualJournalID, historyRecords, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a history record for a specific manual journal (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Xero generated unique identifier for a manual journal (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createManualJournalHistoryRecordAsync(String xeroTenantId, UUID manualJournalID, HistoryRecords historyRecords, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = createManualJournalHistoryRecordValidateBeforeCall(xeroTenantId, manualJournalID, historyRecords, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createManualJournals
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournals ManualJournals array with ManualJournal object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with newly created ManualJournal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createManualJournalsCall(String xeroTenantId, ManualJournals manualJournals, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manualJournals;

        // create path and map variables
        String localVarPath = "/ManualJournals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createManualJournalsValidateBeforeCall(String xeroTenantId, ManualJournals manualJournals, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createManualJournals(Async)");
        }

        // verify the required parameter 'manualJournals' is set
        if (manualJournals == null) {
            throw new ApiException("Missing the required parameter 'manualJournals' when calling createManualJournals(Async)");
        }

        return createManualJournalsCall(xeroTenantId, manualJournals, summarizeErrors, _callback);

    }

    /**
     * Creates one or more manual journals
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournals ManualJournals array with ManualJournal object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return ManualJournals
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with newly created ManualJournal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ManualJournals createManualJournals(String xeroTenantId, ManualJournals manualJournals, Boolean summarizeErrors) throws ApiException {
        ApiResponse<ManualJournals> localVarResp = createManualJournalsWithHttpInfo(xeroTenantId, manualJournals, summarizeErrors);
        return localVarResp.getData();
    }

    /**
     * Creates one or more manual journals
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournals ManualJournals array with ManualJournal object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return ApiResponse&lt;ManualJournals&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with newly created ManualJournal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManualJournals> createManualJournalsWithHttpInfo(String xeroTenantId, ManualJournals manualJournals, Boolean summarizeErrors) throws ApiException {
        okhttp3.Call localVarCall = createManualJournalsValidateBeforeCall(xeroTenantId, manualJournals, summarizeErrors, null);
        Type localVarReturnType = new TypeToken<ManualJournals>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates one or more manual journals (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournals ManualJournals array with ManualJournal object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with newly created ManualJournal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createManualJournalsAsync(String xeroTenantId, ManualJournals manualJournals, Boolean summarizeErrors, final ApiCallback<ManualJournals> _callback) throws ApiException {

        okhttp3.Call localVarCall = createManualJournalsValidateBeforeCall(xeroTenantId, manualJournals, summarizeErrors, _callback);
        Type localVarReturnType = new TypeToken<ManualJournals>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOverpaymentAllocations
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param overpaymentID Unique identifier for a Overpayment (required)
     * @param allocations Allocations array with Allocation object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Allocations array with all Allocation for Overpayments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOverpaymentAllocationsCall(String xeroTenantId, UUID overpaymentID, Allocations allocations, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = allocations;

        // create path and map variables
        String localVarPath = "/Overpayments/{OverpaymentID}/Allocations"
            .replace("{" + "OverpaymentID" + "}", localVarApiClient.escapeString(overpaymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOverpaymentAllocationsValidateBeforeCall(String xeroTenantId, UUID overpaymentID, Allocations allocations, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createOverpaymentAllocations(Async)");
        }

        // verify the required parameter 'overpaymentID' is set
        if (overpaymentID == null) {
            throw new ApiException("Missing the required parameter 'overpaymentID' when calling createOverpaymentAllocations(Async)");
        }

        // verify the required parameter 'allocations' is set
        if (allocations == null) {
            throw new ApiException("Missing the required parameter 'allocations' when calling createOverpaymentAllocations(Async)");
        }

        return createOverpaymentAllocationsCall(xeroTenantId, overpaymentID, allocations, summarizeErrors, _callback);

    }

    /**
     * Creates a single allocation for a specific overpayment
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param overpaymentID Unique identifier for a Overpayment (required)
     * @param allocations Allocations array with Allocation object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return Allocations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Allocations array with all Allocation for Overpayments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Allocations createOverpaymentAllocations(String xeroTenantId, UUID overpaymentID, Allocations allocations, Boolean summarizeErrors) throws ApiException {
        ApiResponse<Allocations> localVarResp = createOverpaymentAllocationsWithHttpInfo(xeroTenantId, overpaymentID, allocations, summarizeErrors);
        return localVarResp.getData();
    }

    /**
     * Creates a single allocation for a specific overpayment
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param overpaymentID Unique identifier for a Overpayment (required)
     * @param allocations Allocations array with Allocation object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return ApiResponse&lt;Allocations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Allocations array with all Allocation for Overpayments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Allocations> createOverpaymentAllocationsWithHttpInfo(String xeroTenantId, UUID overpaymentID, Allocations allocations, Boolean summarizeErrors) throws ApiException {
        okhttp3.Call localVarCall = createOverpaymentAllocationsValidateBeforeCall(xeroTenantId, overpaymentID, allocations, summarizeErrors, null);
        Type localVarReturnType = new TypeToken<Allocations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a single allocation for a specific overpayment (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param overpaymentID Unique identifier for a Overpayment (required)
     * @param allocations Allocations array with Allocation object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Allocations array with all Allocation for Overpayments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOverpaymentAllocationsAsync(String xeroTenantId, UUID overpaymentID, Allocations allocations, Boolean summarizeErrors, final ApiCallback<Allocations> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOverpaymentAllocationsValidateBeforeCall(xeroTenantId, overpaymentID, allocations, summarizeErrors, _callback);
        Type localVarReturnType = new TypeToken<Allocations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOverpaymentHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param overpaymentID Unique identifier for a Overpayment (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error - API is not able to create HistoryRecord for Overpayments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOverpaymentHistoryCall(String xeroTenantId, UUID overpaymentID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = historyRecords;

        // create path and map variables
        String localVarPath = "/Overpayments/{OverpaymentID}/History"
            .replace("{" + "OverpaymentID" + "}", localVarApiClient.escapeString(overpaymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOverpaymentHistoryValidateBeforeCall(String xeroTenantId, UUID overpaymentID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createOverpaymentHistory(Async)");
        }

        // verify the required parameter 'overpaymentID' is set
        if (overpaymentID == null) {
            throw new ApiException("Missing the required parameter 'overpaymentID' when calling createOverpaymentHistory(Async)");
        }

        // verify the required parameter 'historyRecords' is set
        if (historyRecords == null) {
            throw new ApiException("Missing the required parameter 'historyRecords' when calling createOverpaymentHistory(Async)");
        }

        return createOverpaymentHistoryCall(xeroTenantId, overpaymentID, historyRecords, _callback);

    }

    /**
     * Creates a history record for a specific overpayment
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param overpaymentID Unique identifier for a Overpayment (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error - API is not able to create HistoryRecord for Overpayments </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords createOverpaymentHistory(String xeroTenantId, UUID overpaymentID, HistoryRecords historyRecords) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = createOverpaymentHistoryWithHttpInfo(xeroTenantId, overpaymentID, historyRecords);
        return localVarResp.getData();
    }

    /**
     * Creates a history record for a specific overpayment
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param overpaymentID Unique identifier for a Overpayment (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error - API is not able to create HistoryRecord for Overpayments </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> createOverpaymentHistoryWithHttpInfo(String xeroTenantId, UUID overpaymentID, HistoryRecords historyRecords) throws ApiException {
        okhttp3.Call localVarCall = createOverpaymentHistoryValidateBeforeCall(xeroTenantId, overpaymentID, historyRecords, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a history record for a specific overpayment (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param overpaymentID Unique identifier for a Overpayment (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error - API is not able to create HistoryRecord for Overpayments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOverpaymentHistoryAsync(String xeroTenantId, UUID overpaymentID, HistoryRecords historyRecords, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOverpaymentHistoryValidateBeforeCall(xeroTenantId, overpaymentID, historyRecords, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPayment
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payment Request body with a single Payment object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for newly created Payment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentCall(String xeroTenantId, Payment payment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payment;

        // create path and map variables
        String localVarPath = "/Payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentValidateBeforeCall(String xeroTenantId, Payment payment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createPayment(Async)");
        }

        // verify the required parameter 'payment' is set
        if (payment == null) {
            throw new ApiException("Missing the required parameter 'payment' when calling createPayment(Async)");
        }

        return createPaymentCall(xeroTenantId, payment, _callback);

    }

    /**
     * Creates a single payment for invoice or credit notes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payment Request body with a single Payment object (required)
     * @return Payments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for newly created Payment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Payments createPayment(String xeroTenantId, Payment payment) throws ApiException {
        ApiResponse<Payments> localVarResp = createPaymentWithHttpInfo(xeroTenantId, payment);
        return localVarResp.getData();
    }

    /**
     * Creates a single payment for invoice or credit notes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payment Request body with a single Payment object (required)
     * @return ApiResponse&lt;Payments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for newly created Payment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Payments> createPaymentWithHttpInfo(String xeroTenantId, Payment payment) throws ApiException {
        okhttp3.Call localVarCall = createPaymentValidateBeforeCall(xeroTenantId, payment, null);
        Type localVarReturnType = new TypeToken<Payments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a single payment for invoice or credit notes (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payment Request body with a single Payment object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for newly created Payment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentAsync(String xeroTenantId, Payment payment, final ApiCallback<Payments> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentValidateBeforeCall(xeroTenantId, payment, _callback);
        Type localVarReturnType = new TypeToken<Payments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPaymentHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentID Unique identifier for a Payment (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error - API is not able to create HistoryRecord for Payments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentHistoryCall(String xeroTenantId, UUID paymentID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = historyRecords;

        // create path and map variables
        String localVarPath = "/Payments/{PaymentID}/History"
            .replace("{" + "PaymentID" + "}", localVarApiClient.escapeString(paymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentHistoryValidateBeforeCall(String xeroTenantId, UUID paymentID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createPaymentHistory(Async)");
        }

        // verify the required parameter 'paymentID' is set
        if (paymentID == null) {
            throw new ApiException("Missing the required parameter 'paymentID' when calling createPaymentHistory(Async)");
        }

        // verify the required parameter 'historyRecords' is set
        if (historyRecords == null) {
            throw new ApiException("Missing the required parameter 'historyRecords' when calling createPaymentHistory(Async)");
        }

        return createPaymentHistoryCall(xeroTenantId, paymentID, historyRecords, _callback);

    }

    /**
     * Creates a history record for a specific payment
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentID Unique identifier for a Payment (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error - API is not able to create HistoryRecord for Payments </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords createPaymentHistory(String xeroTenantId, UUID paymentID, HistoryRecords historyRecords) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = createPaymentHistoryWithHttpInfo(xeroTenantId, paymentID, historyRecords);
        return localVarResp.getData();
    }

    /**
     * Creates a history record for a specific payment
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentID Unique identifier for a Payment (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error - API is not able to create HistoryRecord for Payments </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> createPaymentHistoryWithHttpInfo(String xeroTenantId, UUID paymentID, HistoryRecords historyRecords) throws ApiException {
        okhttp3.Call localVarCall = createPaymentHistoryValidateBeforeCall(xeroTenantId, paymentID, historyRecords, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a history record for a specific payment (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentID Unique identifier for a Payment (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error - API is not able to create HistoryRecord for Payments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentHistoryAsync(String xeroTenantId, UUID paymentID, HistoryRecords historyRecords, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentHistoryValidateBeforeCall(xeroTenantId, paymentID, historyRecords, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPaymentService
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentServices PaymentServices array with PaymentService object in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PaymentServices array for newly created PaymentService </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentServiceCall(String xeroTenantId, PaymentServices paymentServices, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentServices;

        // create path and map variables
        String localVarPath = "/PaymentServices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentServiceValidateBeforeCall(String xeroTenantId, PaymentServices paymentServices, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createPaymentService(Async)");
        }

        // verify the required parameter 'paymentServices' is set
        if (paymentServices == null) {
            throw new ApiException("Missing the required parameter 'paymentServices' when calling createPaymentService(Async)");
        }

        return createPaymentServiceCall(xeroTenantId, paymentServices, _callback);

    }

    /**
     * Creates a payment service
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentServices PaymentServices array with PaymentService object in body of request (required)
     * @return PaymentServices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PaymentServices array for newly created PaymentService </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public PaymentServices createPaymentService(String xeroTenantId, PaymentServices paymentServices) throws ApiException {
        ApiResponse<PaymentServices> localVarResp = createPaymentServiceWithHttpInfo(xeroTenantId, paymentServices);
        return localVarResp.getData();
    }

    /**
     * Creates a payment service
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentServices PaymentServices array with PaymentService object in body of request (required)
     * @return ApiResponse&lt;PaymentServices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PaymentServices array for newly created PaymentService </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentServices> createPaymentServiceWithHttpInfo(String xeroTenantId, PaymentServices paymentServices) throws ApiException {
        okhttp3.Call localVarCall = createPaymentServiceValidateBeforeCall(xeroTenantId, paymentServices, null);
        Type localVarReturnType = new TypeToken<PaymentServices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a payment service (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentServices PaymentServices array with PaymentService object in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PaymentServices array for newly created PaymentService </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentServiceAsync(String xeroTenantId, PaymentServices paymentServices, final ApiCallback<PaymentServices> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentServiceValidateBeforeCall(xeroTenantId, paymentServices, _callback);
        Type localVarReturnType = new TypeToken<PaymentServices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPayments
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payments Payments array with Payment object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for newly created Payment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentsCall(String xeroTenantId, Payments payments, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payments;

        // create path and map variables
        String localVarPath = "/Payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentsValidateBeforeCall(String xeroTenantId, Payments payments, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createPayments(Async)");
        }

        // verify the required parameter 'payments' is set
        if (payments == null) {
            throw new ApiException("Missing the required parameter 'payments' when calling createPayments(Async)");
        }

        return createPaymentsCall(xeroTenantId, payments, summarizeErrors, _callback);

    }

    /**
     * Creates multiple payments for invoices or credit notes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payments Payments array with Payment object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return Payments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for newly created Payment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Payments createPayments(String xeroTenantId, Payments payments, Boolean summarizeErrors) throws ApiException {
        ApiResponse<Payments> localVarResp = createPaymentsWithHttpInfo(xeroTenantId, payments, summarizeErrors);
        return localVarResp.getData();
    }

    /**
     * Creates multiple payments for invoices or credit notes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payments Payments array with Payment object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return ApiResponse&lt;Payments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for newly created Payment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Payments> createPaymentsWithHttpInfo(String xeroTenantId, Payments payments, Boolean summarizeErrors) throws ApiException {
        okhttp3.Call localVarCall = createPaymentsValidateBeforeCall(xeroTenantId, payments, summarizeErrors, null);
        Type localVarReturnType = new TypeToken<Payments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates multiple payments for invoices or credit notes (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payments Payments array with Payment object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for newly created Payment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentsAsync(String xeroTenantId, Payments payments, Boolean summarizeErrors, final ApiCallback<Payments> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentsValidateBeforeCall(xeroTenantId, payments, summarizeErrors, _callback);
        Type localVarReturnType = new TypeToken<Payments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPrepaymentAllocations
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param prepaymentID Unique identifier for Prepayment (required)
     * @param allocations Allocations with an array of Allocation object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Allocations array of Allocation for all Prepayment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPrepaymentAllocationsCall(String xeroTenantId, UUID prepaymentID, Allocations allocations, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = allocations;

        // create path and map variables
        String localVarPath = "/Prepayments/{PrepaymentID}/Allocations"
            .replace("{" + "PrepaymentID" + "}", localVarApiClient.escapeString(prepaymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPrepaymentAllocationsValidateBeforeCall(String xeroTenantId, UUID prepaymentID, Allocations allocations, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createPrepaymentAllocations(Async)");
        }

        // verify the required parameter 'prepaymentID' is set
        if (prepaymentID == null) {
            throw new ApiException("Missing the required parameter 'prepaymentID' when calling createPrepaymentAllocations(Async)");
        }

        // verify the required parameter 'allocations' is set
        if (allocations == null) {
            throw new ApiException("Missing the required parameter 'allocations' when calling createPrepaymentAllocations(Async)");
        }

        return createPrepaymentAllocationsCall(xeroTenantId, prepaymentID, allocations, summarizeErrors, _callback);

    }

    /**
     * Allows you to create an Allocation for prepayments
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param prepaymentID Unique identifier for Prepayment (required)
     * @param allocations Allocations with an array of Allocation object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return Allocations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Allocations array of Allocation for all Prepayment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Allocations createPrepaymentAllocations(String xeroTenantId, UUID prepaymentID, Allocations allocations, Boolean summarizeErrors) throws ApiException {
        ApiResponse<Allocations> localVarResp = createPrepaymentAllocationsWithHttpInfo(xeroTenantId, prepaymentID, allocations, summarizeErrors);
        return localVarResp.getData();
    }

    /**
     * Allows you to create an Allocation for prepayments
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param prepaymentID Unique identifier for Prepayment (required)
     * @param allocations Allocations with an array of Allocation object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return ApiResponse&lt;Allocations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Allocations array of Allocation for all Prepayment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Allocations> createPrepaymentAllocationsWithHttpInfo(String xeroTenantId, UUID prepaymentID, Allocations allocations, Boolean summarizeErrors) throws ApiException {
        okhttp3.Call localVarCall = createPrepaymentAllocationsValidateBeforeCall(xeroTenantId, prepaymentID, allocations, summarizeErrors, null);
        Type localVarReturnType = new TypeToken<Allocations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Allows you to create an Allocation for prepayments (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param prepaymentID Unique identifier for Prepayment (required)
     * @param allocations Allocations with an array of Allocation object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Allocations array of Allocation for all Prepayment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPrepaymentAllocationsAsync(String xeroTenantId, UUID prepaymentID, Allocations allocations, Boolean summarizeErrors, final ApiCallback<Allocations> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPrepaymentAllocationsValidateBeforeCall(xeroTenantId, prepaymentID, allocations, summarizeErrors, _callback);
        Type localVarReturnType = new TypeToken<Allocations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPrepaymentHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param prepaymentID Unique identifier for a PrePayment (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsupported - return response incorrect exception, API is not able to create HistoryRecord for Expense Claims </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPrepaymentHistoryCall(String xeroTenantId, UUID prepaymentID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = historyRecords;

        // create path and map variables
        String localVarPath = "/Prepayments/{PrepaymentID}/History"
            .replace("{" + "PrepaymentID" + "}", localVarApiClient.escapeString(prepaymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPrepaymentHistoryValidateBeforeCall(String xeroTenantId, UUID prepaymentID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createPrepaymentHistory(Async)");
        }

        // verify the required parameter 'prepaymentID' is set
        if (prepaymentID == null) {
            throw new ApiException("Missing the required parameter 'prepaymentID' when calling createPrepaymentHistory(Async)");
        }

        // verify the required parameter 'historyRecords' is set
        if (historyRecords == null) {
            throw new ApiException("Missing the required parameter 'historyRecords' when calling createPrepaymentHistory(Async)");
        }

        return createPrepaymentHistoryCall(xeroTenantId, prepaymentID, historyRecords, _callback);

    }

    /**
     * Creates a history record for a specific prepayment
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param prepaymentID Unique identifier for a PrePayment (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsupported - return response incorrect exception, API is not able to create HistoryRecord for Expense Claims </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords createPrepaymentHistory(String xeroTenantId, UUID prepaymentID, HistoryRecords historyRecords) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = createPrepaymentHistoryWithHttpInfo(xeroTenantId, prepaymentID, historyRecords);
        return localVarResp.getData();
    }

    /**
     * Creates a history record for a specific prepayment
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param prepaymentID Unique identifier for a PrePayment (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsupported - return response incorrect exception, API is not able to create HistoryRecord for Expense Claims </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> createPrepaymentHistoryWithHttpInfo(String xeroTenantId, UUID prepaymentID, HistoryRecords historyRecords) throws ApiException {
        okhttp3.Call localVarCall = createPrepaymentHistoryValidateBeforeCall(xeroTenantId, prepaymentID, historyRecords, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a history record for a specific prepayment (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param prepaymentID Unique identifier for a PrePayment (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsupported - return response incorrect exception, API is not able to create HistoryRecord for Expense Claims </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPrepaymentHistoryAsync(String xeroTenantId, UUID prepaymentID, HistoryRecords historyRecords, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPrepaymentHistoryValidateBeforeCall(xeroTenantId, prepaymentID, historyRecords, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPurchaseOrderAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Order object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPurchaseOrderAttachmentByFileNameCall(String xeroTenantId, UUID purchaseOrderID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}"
            .replace("{" + "PurchaseOrderID" + "}", localVarApiClient.escapeString(purchaseOrderID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPurchaseOrderAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID purchaseOrderID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createPurchaseOrderAttachmentByFileName(Async)");
        }

        // verify the required parameter 'purchaseOrderID' is set
        if (purchaseOrderID == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrderID' when calling createPurchaseOrderAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling createPurchaseOrderAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPurchaseOrderAttachmentByFileName(Async)");
        }

        return createPurchaseOrderAttachmentByFileNameCall(xeroTenantId, purchaseOrderID, fileName, body, _callback);

    }

    /**
     * Creates attachment for a specific purchase order
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Order object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments createPurchaseOrderAttachmentByFileName(String xeroTenantId, UUID purchaseOrderID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = createPurchaseOrderAttachmentByFileNameWithHttpInfo(xeroTenantId, purchaseOrderID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * Creates attachment for a specific purchase order
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Order object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> createPurchaseOrderAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID purchaseOrderID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = createPurchaseOrderAttachmentByFileNameValidateBeforeCall(xeroTenantId, purchaseOrderID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates attachment for a specific purchase order (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Order object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPurchaseOrderAttachmentByFileNameAsync(String xeroTenantId, UUID purchaseOrderID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPurchaseOrderAttachmentByFileNameValidateBeforeCall(xeroTenantId, purchaseOrderID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPurchaseOrderHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for a PurchaseOrder (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPurchaseOrderHistoryCall(String xeroTenantId, UUID purchaseOrderID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = historyRecords;

        // create path and map variables
        String localVarPath = "/PurchaseOrders/{PurchaseOrderID}/History"
            .replace("{" + "PurchaseOrderID" + "}", localVarApiClient.escapeString(purchaseOrderID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPurchaseOrderHistoryValidateBeforeCall(String xeroTenantId, UUID purchaseOrderID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createPurchaseOrderHistory(Async)");
        }

        // verify the required parameter 'purchaseOrderID' is set
        if (purchaseOrderID == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrderID' when calling createPurchaseOrderHistory(Async)");
        }

        // verify the required parameter 'historyRecords' is set
        if (historyRecords == null) {
            throw new ApiException("Missing the required parameter 'historyRecords' when calling createPurchaseOrderHistory(Async)");
        }

        return createPurchaseOrderHistoryCall(xeroTenantId, purchaseOrderID, historyRecords, _callback);

    }

    /**
     * Creates a history record for a specific purchase orders
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for a PurchaseOrder (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords createPurchaseOrderHistory(String xeroTenantId, UUID purchaseOrderID, HistoryRecords historyRecords) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = createPurchaseOrderHistoryWithHttpInfo(xeroTenantId, purchaseOrderID, historyRecords);
        return localVarResp.getData();
    }

    /**
     * Creates a history record for a specific purchase orders
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for a PurchaseOrder (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> createPurchaseOrderHistoryWithHttpInfo(String xeroTenantId, UUID purchaseOrderID, HistoryRecords historyRecords) throws ApiException {
        okhttp3.Call localVarCall = createPurchaseOrderHistoryValidateBeforeCall(xeroTenantId, purchaseOrderID, historyRecords, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a history record for a specific purchase orders (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for a PurchaseOrder (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPurchaseOrderHistoryAsync(String xeroTenantId, UUID purchaseOrderID, HistoryRecords historyRecords, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPurchaseOrderHistoryValidateBeforeCall(xeroTenantId, purchaseOrderID, historyRecords, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPurchaseOrders
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrders PurchaseOrders with an array of PurchaseOrder object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for specified PurchaseOrder </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPurchaseOrdersCall(String xeroTenantId, PurchaseOrders purchaseOrders, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = purchaseOrders;

        // create path and map variables
        String localVarPath = "/PurchaseOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPurchaseOrdersValidateBeforeCall(String xeroTenantId, PurchaseOrders purchaseOrders, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createPurchaseOrders(Async)");
        }

        // verify the required parameter 'purchaseOrders' is set
        if (purchaseOrders == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrders' when calling createPurchaseOrders(Async)");
        }

        return createPurchaseOrdersCall(xeroTenantId, purchaseOrders, summarizeErrors, _callback);

    }

    /**
     * Creates one or more purchase orders
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrders PurchaseOrders with an array of PurchaseOrder object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return PurchaseOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for specified PurchaseOrder </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseOrders createPurchaseOrders(String xeroTenantId, PurchaseOrders purchaseOrders, Boolean summarizeErrors) throws ApiException {
        ApiResponse<PurchaseOrders> localVarResp = createPurchaseOrdersWithHttpInfo(xeroTenantId, purchaseOrders, summarizeErrors);
        return localVarResp.getData();
    }

    /**
     * Creates one or more purchase orders
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrders PurchaseOrders with an array of PurchaseOrder object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return ApiResponse&lt;PurchaseOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for specified PurchaseOrder </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PurchaseOrders> createPurchaseOrdersWithHttpInfo(String xeroTenantId, PurchaseOrders purchaseOrders, Boolean summarizeErrors) throws ApiException {
        okhttp3.Call localVarCall = createPurchaseOrdersValidateBeforeCall(xeroTenantId, purchaseOrders, summarizeErrors, null);
        Type localVarReturnType = new TypeToken<PurchaseOrders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates one or more purchase orders (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrders PurchaseOrders with an array of PurchaseOrder object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for specified PurchaseOrder </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPurchaseOrdersAsync(String xeroTenantId, PurchaseOrders purchaseOrders, Boolean summarizeErrors, final ApiCallback<PurchaseOrders> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPurchaseOrdersValidateBeforeCall(xeroTenantId, purchaseOrders, summarizeErrors, _callback);
        Type localVarReturnType = new TypeToken<PurchaseOrders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createQuoteAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createQuoteAttachmentByFileNameCall(String xeroTenantId, UUID quoteID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Quotes/{QuoteID}/Attachments/{FileName}"
            .replace("{" + "QuoteID" + "}", localVarApiClient.escapeString(quoteID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createQuoteAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID quoteID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createQuoteAttachmentByFileName(Async)");
        }

        // verify the required parameter 'quoteID' is set
        if (quoteID == null) {
            throw new ApiException("Missing the required parameter 'quoteID' when calling createQuoteAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling createQuoteAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createQuoteAttachmentByFileName(Async)");
        }

        return createQuoteAttachmentByFileNameCall(xeroTenantId, quoteID, fileName, body, _callback);

    }

    /**
     * Creates attachment for a specific quote
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments createQuoteAttachmentByFileName(String xeroTenantId, UUID quoteID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = createQuoteAttachmentByFileNameWithHttpInfo(xeroTenantId, quoteID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * Creates attachment for a specific quote
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> createQuoteAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID quoteID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = createQuoteAttachmentByFileNameValidateBeforeCall(xeroTenantId, quoteID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates attachment for a specific quote (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createQuoteAttachmentByFileNameAsync(String xeroTenantId, UUID quoteID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = createQuoteAttachmentByFileNameValidateBeforeCall(xeroTenantId, quoteID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createQuoteHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createQuoteHistoryCall(String xeroTenantId, UUID quoteID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = historyRecords;

        // create path and map variables
        String localVarPath = "/Quotes/{QuoteID}/History"
            .replace("{" + "QuoteID" + "}", localVarApiClient.escapeString(quoteID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createQuoteHistoryValidateBeforeCall(String xeroTenantId, UUID quoteID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createQuoteHistory(Async)");
        }

        // verify the required parameter 'quoteID' is set
        if (quoteID == null) {
            throw new ApiException("Missing the required parameter 'quoteID' when calling createQuoteHistory(Async)");
        }

        // verify the required parameter 'historyRecords' is set
        if (historyRecords == null) {
            throw new ApiException("Missing the required parameter 'historyRecords' when calling createQuoteHistory(Async)");
        }

        return createQuoteHistoryCall(xeroTenantId, quoteID, historyRecords, _callback);

    }

    /**
     * Creates a history record for a specific quote
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords createQuoteHistory(String xeroTenantId, UUID quoteID, HistoryRecords historyRecords) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = createQuoteHistoryWithHttpInfo(xeroTenantId, quoteID, historyRecords);
        return localVarResp.getData();
    }

    /**
     * Creates a history record for a specific quote
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> createQuoteHistoryWithHttpInfo(String xeroTenantId, UUID quoteID, HistoryRecords historyRecords) throws ApiException {
        okhttp3.Call localVarCall = createQuoteHistoryValidateBeforeCall(xeroTenantId, quoteID, historyRecords, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a history record for a specific quote (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createQuoteHistoryAsync(String xeroTenantId, UUID quoteID, HistoryRecords historyRecords, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = createQuoteHistoryValidateBeforeCall(xeroTenantId, quoteID, historyRecords, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createQuotes
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quotes Quotes with an array of Quote object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Quotes with array with newly created Quote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createQuotesCall(String xeroTenantId, Quotes quotes, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = quotes;

        // create path and map variables
        String localVarPath = "/Quotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createQuotesValidateBeforeCall(String xeroTenantId, Quotes quotes, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createQuotes(Async)");
        }

        // verify the required parameter 'quotes' is set
        if (quotes == null) {
            throw new ApiException("Missing the required parameter 'quotes' when calling createQuotes(Async)");
        }

        return createQuotesCall(xeroTenantId, quotes, summarizeErrors, _callback);

    }

    /**
     * Create one or more quotes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quotes Quotes with an array of Quote object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return Quotes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Quotes with array with newly created Quote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Quotes createQuotes(String xeroTenantId, Quotes quotes, Boolean summarizeErrors) throws ApiException {
        ApiResponse<Quotes> localVarResp = createQuotesWithHttpInfo(xeroTenantId, quotes, summarizeErrors);
        return localVarResp.getData();
    }

    /**
     * Create one or more quotes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quotes Quotes with an array of Quote object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return ApiResponse&lt;Quotes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Quotes with array with newly created Quote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quotes> createQuotesWithHttpInfo(String xeroTenantId, Quotes quotes, Boolean summarizeErrors) throws ApiException {
        okhttp3.Call localVarCall = createQuotesValidateBeforeCall(xeroTenantId, quotes, summarizeErrors, null);
        Type localVarReturnType = new TypeToken<Quotes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create one or more quotes (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quotes Quotes with an array of Quote object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Quotes with array with newly created Quote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createQuotesAsync(String xeroTenantId, Quotes quotes, Boolean summarizeErrors, final ApiCallback<Quotes> _callback) throws ApiException {

        okhttp3.Call localVarCall = createQuotesValidateBeforeCall(xeroTenantId, quotes, summarizeErrors, _callback);
        Type localVarReturnType = new TypeToken<Quotes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReceipt
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receipts Receipts with an array of Receipt object in body of request (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Receipts array for newly created Receipt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReceiptCall(String xeroTenantId, Receipts receipts, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = receipts;

        // create path and map variables
        String localVarPath = "/Receipts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReceiptValidateBeforeCall(String xeroTenantId, Receipts receipts, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createReceipt(Async)");
        }

        // verify the required parameter 'receipts' is set
        if (receipts == null) {
            throw new ApiException("Missing the required parameter 'receipts' when calling createReceipt(Async)");
        }

        return createReceiptCall(xeroTenantId, receipts, unitdp, _callback);

    }

    /**
     * Creates draft expense claim receipts for any user
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receipts Receipts with an array of Receipt object in body of request (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return Receipts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Receipts array for newly created Receipt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Receipts createReceipt(String xeroTenantId, Receipts receipts, Integer unitdp) throws ApiException {
        ApiResponse<Receipts> localVarResp = createReceiptWithHttpInfo(xeroTenantId, receipts, unitdp);
        return localVarResp.getData();
    }

    /**
     * Creates draft expense claim receipts for any user
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receipts Receipts with an array of Receipt object in body of request (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;Receipts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Receipts array for newly created Receipt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Receipts> createReceiptWithHttpInfo(String xeroTenantId, Receipts receipts, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = createReceiptValidateBeforeCall(xeroTenantId, receipts, unitdp, null);
        Type localVarReturnType = new TypeToken<Receipts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates draft expense claim receipts for any user (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receipts Receipts with an array of Receipt object in body of request (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Receipts array for newly created Receipt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReceiptAsync(String xeroTenantId, Receipts receipts, Integer unitdp, final ApiCallback<Receipts> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReceiptValidateBeforeCall(xeroTenantId, receipts, unitdp, _callback);
        Type localVarReturnType = new TypeToken<Receipts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReceiptAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param fileName The name of the file being attached to the Receipt (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with newly created Attachment for a specified Receipt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReceiptAttachmentByFileNameCall(String xeroTenantId, UUID receiptID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Receipts/{ReceiptID}/Attachments/{FileName}"
            .replace("{" + "ReceiptID" + "}", localVarApiClient.escapeString(receiptID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReceiptAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID receiptID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createReceiptAttachmentByFileName(Async)");
        }

        // verify the required parameter 'receiptID' is set
        if (receiptID == null) {
            throw new ApiException("Missing the required parameter 'receiptID' when calling createReceiptAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling createReceiptAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createReceiptAttachmentByFileName(Async)");
        }

        return createReceiptAttachmentByFileNameCall(xeroTenantId, receiptID, fileName, body, _callback);

    }

    /**
     * Creates an attachment on a specific expense claim receipts by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param fileName The name of the file being attached to the Receipt (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with newly created Attachment for a specified Receipt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments createReceiptAttachmentByFileName(String xeroTenantId, UUID receiptID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = createReceiptAttachmentByFileNameWithHttpInfo(xeroTenantId, receiptID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * Creates an attachment on a specific expense claim receipts by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param fileName The name of the file being attached to the Receipt (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with newly created Attachment for a specified Receipt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> createReceiptAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID receiptID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = createReceiptAttachmentByFileNameValidateBeforeCall(xeroTenantId, receiptID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates an attachment on a specific expense claim receipts by file name (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param fileName The name of the file being attached to the Receipt (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with newly created Attachment for a specified Receipt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReceiptAttachmentByFileNameAsync(String xeroTenantId, UUID receiptID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReceiptAttachmentByFileNameValidateBeforeCall(xeroTenantId, receiptID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReceiptHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsupported - return response incorrect exception, API is not able to create HistoryRecord for Receipts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReceiptHistoryCall(String xeroTenantId, UUID receiptID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = historyRecords;

        // create path and map variables
        String localVarPath = "/Receipts/{ReceiptID}/History"
            .replace("{" + "ReceiptID" + "}", localVarApiClient.escapeString(receiptID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReceiptHistoryValidateBeforeCall(String xeroTenantId, UUID receiptID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createReceiptHistory(Async)");
        }

        // verify the required parameter 'receiptID' is set
        if (receiptID == null) {
            throw new ApiException("Missing the required parameter 'receiptID' when calling createReceiptHistory(Async)");
        }

        // verify the required parameter 'historyRecords' is set
        if (historyRecords == null) {
            throw new ApiException("Missing the required parameter 'historyRecords' when calling createReceiptHistory(Async)");
        }

        return createReceiptHistoryCall(xeroTenantId, receiptID, historyRecords, _callback);

    }

    /**
     * Creates a history record for a specific receipt
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsupported - return response incorrect exception, API is not able to create HistoryRecord for Receipts </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords createReceiptHistory(String xeroTenantId, UUID receiptID, HistoryRecords historyRecords) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = createReceiptHistoryWithHttpInfo(xeroTenantId, receiptID, historyRecords);
        return localVarResp.getData();
    }

    /**
     * Creates a history record for a specific receipt
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsupported - return response incorrect exception, API is not able to create HistoryRecord for Receipts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> createReceiptHistoryWithHttpInfo(String xeroTenantId, UUID receiptID, HistoryRecords historyRecords) throws ApiException {
        okhttp3.Call localVarCall = createReceiptHistoryValidateBeforeCall(xeroTenantId, receiptID, historyRecords, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a history record for a specific receipt (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsupported - return response incorrect exception, API is not able to create HistoryRecord for Receipts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReceiptHistoryAsync(String xeroTenantId, UUID receiptID, HistoryRecords historyRecords, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReceiptHistoryValidateBeforeCall(xeroTenantId, receiptID, historyRecords, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRepeatingInvoiceAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param fileName The name of the file being attached to a Repeating Invoice (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with updated Attachment for a specified Repeating Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRepeatingInvoiceAttachmentByFileNameCall(String xeroTenantId, UUID repeatingInvoiceID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}"
            .replace("{" + "RepeatingInvoiceID" + "}", localVarApiClient.escapeString(repeatingInvoiceID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRepeatingInvoiceAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID repeatingInvoiceID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createRepeatingInvoiceAttachmentByFileName(Async)");
        }

        // verify the required parameter 'repeatingInvoiceID' is set
        if (repeatingInvoiceID == null) {
            throw new ApiException("Missing the required parameter 'repeatingInvoiceID' when calling createRepeatingInvoiceAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling createRepeatingInvoiceAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createRepeatingInvoiceAttachmentByFileName(Async)");
        }

        return createRepeatingInvoiceAttachmentByFileNameCall(xeroTenantId, repeatingInvoiceID, fileName, body, _callback);

    }

    /**
     * Creates an attachment from a specific repeating invoices by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param fileName The name of the file being attached to a Repeating Invoice (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with updated Attachment for a specified Repeating Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments createRepeatingInvoiceAttachmentByFileName(String xeroTenantId, UUID repeatingInvoiceID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = createRepeatingInvoiceAttachmentByFileNameWithHttpInfo(xeroTenantId, repeatingInvoiceID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * Creates an attachment from a specific repeating invoices by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param fileName The name of the file being attached to a Repeating Invoice (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with updated Attachment for a specified Repeating Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> createRepeatingInvoiceAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID repeatingInvoiceID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = createRepeatingInvoiceAttachmentByFileNameValidateBeforeCall(xeroTenantId, repeatingInvoiceID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates an attachment from a specific repeating invoices by file name (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param fileName The name of the file being attached to a Repeating Invoice (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with updated Attachment for a specified Repeating Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRepeatingInvoiceAttachmentByFileNameAsync(String xeroTenantId, UUID repeatingInvoiceID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRepeatingInvoiceAttachmentByFileNameValidateBeforeCall(xeroTenantId, repeatingInvoiceID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRepeatingInvoiceHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRepeatingInvoiceHistoryCall(String xeroTenantId, UUID repeatingInvoiceID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = historyRecords;

        // create path and map variables
        String localVarPath = "/RepeatingInvoices/{RepeatingInvoiceID}/History"
            .replace("{" + "RepeatingInvoiceID" + "}", localVarApiClient.escapeString(repeatingInvoiceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRepeatingInvoiceHistoryValidateBeforeCall(String xeroTenantId, UUID repeatingInvoiceID, HistoryRecords historyRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createRepeatingInvoiceHistory(Async)");
        }

        // verify the required parameter 'repeatingInvoiceID' is set
        if (repeatingInvoiceID == null) {
            throw new ApiException("Missing the required parameter 'repeatingInvoiceID' when calling createRepeatingInvoiceHistory(Async)");
        }

        // verify the required parameter 'historyRecords' is set
        if (historyRecords == null) {
            throw new ApiException("Missing the required parameter 'historyRecords' when calling createRepeatingInvoiceHistory(Async)");
        }

        return createRepeatingInvoiceHistoryCall(xeroTenantId, repeatingInvoiceID, historyRecords, _callback);

    }

    /**
     * Creates a  history record for a specific repeating invoice
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords createRepeatingInvoiceHistory(String xeroTenantId, UUID repeatingInvoiceID, HistoryRecords historyRecords) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = createRepeatingInvoiceHistoryWithHttpInfo(xeroTenantId, repeatingInvoiceID, historyRecords);
        return localVarResp.getData();
    }

    /**
     * Creates a  history record for a specific repeating invoice
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> createRepeatingInvoiceHistoryWithHttpInfo(String xeroTenantId, UUID repeatingInvoiceID, HistoryRecords historyRecords) throws ApiException {
        okhttp3.Call localVarCall = createRepeatingInvoiceHistoryValidateBeforeCall(xeroTenantId, repeatingInvoiceID, historyRecords, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a  history record for a specific repeating invoice (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type HistoryRecords array of HistoryRecord objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRepeatingInvoiceHistoryAsync(String xeroTenantId, UUID repeatingInvoiceID, HistoryRecords historyRecords, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRepeatingInvoiceHistoryValidateBeforeCall(xeroTenantId, repeatingInvoiceID, historyRecords, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTaxRates
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param taxRates TaxRates array with TaxRate object in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TaxRates array newly created TaxRate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaxRatesCall(String xeroTenantId, TaxRates taxRates, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taxRates;

        // create path and map variables
        String localVarPath = "/TaxRates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTaxRatesValidateBeforeCall(String xeroTenantId, TaxRates taxRates, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createTaxRates(Async)");
        }

        // verify the required parameter 'taxRates' is set
        if (taxRates == null) {
            throw new ApiException("Missing the required parameter 'taxRates' when calling createTaxRates(Async)");
        }

        return createTaxRatesCall(xeroTenantId, taxRates, _callback);

    }

    /**
     * Creates one or more tax rates
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param taxRates TaxRates array with TaxRate object in body of request (required)
     * @return TaxRates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TaxRates array newly created TaxRate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public TaxRates createTaxRates(String xeroTenantId, TaxRates taxRates) throws ApiException {
        ApiResponse<TaxRates> localVarResp = createTaxRatesWithHttpInfo(xeroTenantId, taxRates);
        return localVarResp.getData();
    }

    /**
     * Creates one or more tax rates
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param taxRates TaxRates array with TaxRate object in body of request (required)
     * @return ApiResponse&lt;TaxRates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TaxRates array newly created TaxRate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxRates> createTaxRatesWithHttpInfo(String xeroTenantId, TaxRates taxRates) throws ApiException {
        okhttp3.Call localVarCall = createTaxRatesValidateBeforeCall(xeroTenantId, taxRates, null);
        Type localVarReturnType = new TypeToken<TaxRates>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates one or more tax rates (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param taxRates TaxRates array with TaxRate object in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TaxRates array newly created TaxRate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaxRatesAsync(String xeroTenantId, TaxRates taxRates, final ApiCallback<TaxRates> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTaxRatesValidateBeforeCall(xeroTenantId, taxRates, _callback);
        Type localVarReturnType = new TypeToken<TaxRates>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTrackingCategory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategory TrackingCategory object in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of newly created TrackingCategory </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrackingCategoryCall(String xeroTenantId, TrackingCategory trackingCategory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trackingCategory;

        // create path and map variables
        String localVarPath = "/TrackingCategories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrackingCategoryValidateBeforeCall(String xeroTenantId, TrackingCategory trackingCategory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createTrackingCategory(Async)");
        }

        // verify the required parameter 'trackingCategory' is set
        if (trackingCategory == null) {
            throw new ApiException("Missing the required parameter 'trackingCategory' when calling createTrackingCategory(Async)");
        }

        return createTrackingCategoryCall(xeroTenantId, trackingCategory, _callback);

    }

    /**
     * Create tracking categories
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategory TrackingCategory object in body of request (required)
     * @return TrackingCategories
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of newly created TrackingCategory </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public TrackingCategories createTrackingCategory(String xeroTenantId, TrackingCategory trackingCategory) throws ApiException {
        ApiResponse<TrackingCategories> localVarResp = createTrackingCategoryWithHttpInfo(xeroTenantId, trackingCategory);
        return localVarResp.getData();
    }

    /**
     * Create tracking categories
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategory TrackingCategory object in body of request (required)
     * @return ApiResponse&lt;TrackingCategories&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of newly created TrackingCategory </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackingCategories> createTrackingCategoryWithHttpInfo(String xeroTenantId, TrackingCategory trackingCategory) throws ApiException {
        okhttp3.Call localVarCall = createTrackingCategoryValidateBeforeCall(xeroTenantId, trackingCategory, null);
        Type localVarReturnType = new TypeToken<TrackingCategories>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create tracking categories (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategory TrackingCategory object in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of newly created TrackingCategory </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrackingCategoryAsync(String xeroTenantId, TrackingCategory trackingCategory, final ApiCallback<TrackingCategories> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTrackingCategoryValidateBeforeCall(xeroTenantId, trackingCategory, _callback);
        Type localVarReturnType = new TypeToken<TrackingCategories>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTrackingOptions
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param trackingOption TrackingOption object in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingOptions array of options for a specified category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrackingOptionsCall(String xeroTenantId, UUID trackingCategoryID, TrackingOption trackingOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trackingOption;

        // create path and map variables
        String localVarPath = "/TrackingCategories/{TrackingCategoryID}/Options"
            .replace("{" + "TrackingCategoryID" + "}", localVarApiClient.escapeString(trackingCategoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrackingOptionsValidateBeforeCall(String xeroTenantId, UUID trackingCategoryID, TrackingOption trackingOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createTrackingOptions(Async)");
        }

        // verify the required parameter 'trackingCategoryID' is set
        if (trackingCategoryID == null) {
            throw new ApiException("Missing the required parameter 'trackingCategoryID' when calling createTrackingOptions(Async)");
        }

        // verify the required parameter 'trackingOption' is set
        if (trackingOption == null) {
            throw new ApiException("Missing the required parameter 'trackingOption' when calling createTrackingOptions(Async)");
        }

        return createTrackingOptionsCall(xeroTenantId, trackingCategoryID, trackingOption, _callback);

    }

    /**
     * Creates options for a specific tracking category
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param trackingOption TrackingOption object in body of request (required)
     * @return TrackingOptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingOptions array of options for a specified category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public TrackingOptions createTrackingOptions(String xeroTenantId, UUID trackingCategoryID, TrackingOption trackingOption) throws ApiException {
        ApiResponse<TrackingOptions> localVarResp = createTrackingOptionsWithHttpInfo(xeroTenantId, trackingCategoryID, trackingOption);
        return localVarResp.getData();
    }

    /**
     * Creates options for a specific tracking category
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param trackingOption TrackingOption object in body of request (required)
     * @return ApiResponse&lt;TrackingOptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingOptions array of options for a specified category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackingOptions> createTrackingOptionsWithHttpInfo(String xeroTenantId, UUID trackingCategoryID, TrackingOption trackingOption) throws ApiException {
        okhttp3.Call localVarCall = createTrackingOptionsValidateBeforeCall(xeroTenantId, trackingCategoryID, trackingOption, null);
        Type localVarReturnType = new TypeToken<TrackingOptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates options for a specific tracking category (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param trackingOption TrackingOption object in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingOptions array of options for a specified category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrackingOptionsAsync(String xeroTenantId, UUID trackingCategoryID, TrackingOption trackingOption, final ApiCallback<TrackingOptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTrackingOptionsValidateBeforeCall(xeroTenantId, trackingCategoryID, trackingOption, _callback);
        Type localVarReturnType = new TypeToken<TrackingOptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccount
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for retrieving single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - delete existing Account and return response of type Accounts array with deleted Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountCall(String xeroTenantId, UUID accountID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Accounts/{AccountID}"
            .replace("{" + "AccountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountValidateBeforeCall(String xeroTenantId, UUID accountID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling deleteAccount(Async)");
        }

        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling deleteAccount(Async)");
        }

        return deleteAccountCall(xeroTenantId, accountID, _callback);

    }

    /**
     * Deletes a chart of accounts
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for retrieving single object (required)
     * @return Accounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - delete existing Account and return response of type Accounts array with deleted Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public Accounts deleteAccount(String xeroTenantId, UUID accountID) throws ApiException {
        ApiResponse<Accounts> localVarResp = deleteAccountWithHttpInfo(xeroTenantId, accountID);
        return localVarResp.getData();
    }

    /**
     * Deletes a chart of accounts
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for retrieving single object (required)
     * @return ApiResponse&lt;Accounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - delete existing Account and return response of type Accounts array with deleted Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Accounts> deleteAccountWithHttpInfo(String xeroTenantId, UUID accountID) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountValidateBeforeCall(xeroTenantId, accountID, null);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a chart of accounts (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for retrieving single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - delete existing Account and return response of type Accounts array with deleted Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountAsync(String xeroTenantId, UUID accountID, final ApiCallback<Accounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountValidateBeforeCall(xeroTenantId, accountID, _callback);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteContactGroupContact
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteContactGroupContactCall(String xeroTenantId, UUID contactGroupID, UUID contactID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ContactGroups/{ContactGroupID}/Contacts/{ContactID}"
            .replace("{" + "ContactGroupID" + "}", localVarApiClient.escapeString(contactGroupID.toString()))
            .replace("{" + "ContactID" + "}", localVarApiClient.escapeString(contactID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteContactGroupContactValidateBeforeCall(String xeroTenantId, UUID contactGroupID, UUID contactID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling deleteContactGroupContact(Async)");
        }

        // verify the required parameter 'contactGroupID' is set
        if (contactGroupID == null) {
            throw new ApiException("Missing the required parameter 'contactGroupID' when calling deleteContactGroupContact(Async)");
        }

        // verify the required parameter 'contactID' is set
        if (contactID == null) {
            throw new ApiException("Missing the required parameter 'contactID' when calling deleteContactGroupContact(Async)");
        }

        return deleteContactGroupContactCall(xeroTenantId, contactGroupID, contactID, _callback);

    }

    /**
     * Deletes a specific contact from a contact group using a unique contact Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @param contactID Unique identifier for a Contact (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteContactGroupContact(String xeroTenantId, UUID contactGroupID, UUID contactID) throws ApiException {
        deleteContactGroupContactWithHttpInfo(xeroTenantId, contactGroupID, contactID);
    }

    /**
     * Deletes a specific contact from a contact group using a unique contact Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @param contactID Unique identifier for a Contact (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteContactGroupContactWithHttpInfo(String xeroTenantId, UUID contactGroupID, UUID contactID) throws ApiException {
        okhttp3.Call localVarCall = deleteContactGroupContactValidateBeforeCall(xeroTenantId, contactGroupID, contactID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a specific contact from a contact group using a unique contact Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteContactGroupContactAsync(String xeroTenantId, UUID contactGroupID, UUID contactID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteContactGroupContactValidateBeforeCall(xeroTenantId, contactGroupID, contactID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteContactGroupContacts
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteContactGroupContactsCall(String xeroTenantId, UUID contactGroupID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ContactGroups/{ContactGroupID}/Contacts"
            .replace("{" + "ContactGroupID" + "}", localVarApiClient.escapeString(contactGroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteContactGroupContactsValidateBeforeCall(String xeroTenantId, UUID contactGroupID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling deleteContactGroupContacts(Async)");
        }

        // verify the required parameter 'contactGroupID' is set
        if (contactGroupID == null) {
            throw new ApiException("Missing the required parameter 'contactGroupID' when calling deleteContactGroupContacts(Async)");
        }

        return deleteContactGroupContactsCall(xeroTenantId, contactGroupID, _callback);

    }

    /**
     * Deletes all contacts from a specific contact group
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteContactGroupContacts(String xeroTenantId, UUID contactGroupID) throws ApiException {
        deleteContactGroupContactsWithHttpInfo(xeroTenantId, contactGroupID);
    }

    /**
     * Deletes all contacts from a specific contact group
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteContactGroupContactsWithHttpInfo(String xeroTenantId, UUID contactGroupID) throws ApiException {
        okhttp3.Call localVarCall = deleteContactGroupContactsValidateBeforeCall(xeroTenantId, contactGroupID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes all contacts from a specific contact group (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteContactGroupContactsAsync(String xeroTenantId, UUID contactGroupID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteContactGroupContactsValidateBeforeCall(xeroTenantId, contactGroupID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteItem
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemCall(String xeroTenantId, UUID itemID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Items/{ItemID}"
            .replace("{" + "ItemID" + "}", localVarApiClient.escapeString(itemID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteItemValidateBeforeCall(String xeroTenantId, UUID itemID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling deleteItem(Async)");
        }

        // verify the required parameter 'itemID' is set
        if (itemID == null) {
            throw new ApiException("Missing the required parameter 'itemID' when calling deleteItem(Async)");
        }

        return deleteItemCall(xeroTenantId, itemID, _callback);

    }

    /**
     * Deletes a specific item
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteItem(String xeroTenantId, UUID itemID) throws ApiException {
        deleteItemWithHttpInfo(xeroTenantId, itemID);
    }

    /**
     * Deletes a specific item
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteItemWithHttpInfo(String xeroTenantId, UUID itemID) throws ApiException {
        okhttp3.Call localVarCall = deleteItemValidateBeforeCall(xeroTenantId, itemID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a specific item (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemAsync(String xeroTenantId, UUID itemID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteItemValidateBeforeCall(xeroTenantId, itemID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLinkedTransaction
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param linkedTransactionID Unique identifier for a LinkedTransaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLinkedTransactionCall(String xeroTenantId, UUID linkedTransactionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/LinkedTransactions/{LinkedTransactionID}"
            .replace("{" + "LinkedTransactionID" + "}", localVarApiClient.escapeString(linkedTransactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLinkedTransactionValidateBeforeCall(String xeroTenantId, UUID linkedTransactionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling deleteLinkedTransaction(Async)");
        }

        // verify the required parameter 'linkedTransactionID' is set
        if (linkedTransactionID == null) {
            throw new ApiException("Missing the required parameter 'linkedTransactionID' when calling deleteLinkedTransaction(Async)");
        }

        return deleteLinkedTransactionCall(xeroTenantId, linkedTransactionID, _callback);

    }

    /**
     * Deletes a specific linked transactions (billable expenses)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param linkedTransactionID Unique identifier for a LinkedTransaction (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteLinkedTransaction(String xeroTenantId, UUID linkedTransactionID) throws ApiException {
        deleteLinkedTransactionWithHttpInfo(xeroTenantId, linkedTransactionID);
    }

    /**
     * Deletes a specific linked transactions (billable expenses)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param linkedTransactionID Unique identifier for a LinkedTransaction (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteLinkedTransactionWithHttpInfo(String xeroTenantId, UUID linkedTransactionID) throws ApiException {
        okhttp3.Call localVarCall = deleteLinkedTransactionValidateBeforeCall(xeroTenantId, linkedTransactionID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a specific linked transactions (billable expenses) (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param linkedTransactionID Unique identifier for a LinkedTransaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLinkedTransactionAsync(String xeroTenantId, UUID linkedTransactionID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLinkedTransactionValidateBeforeCall(xeroTenantId, linkedTransactionID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePayment
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentID Unique identifier for a Payment (required)
     * @param paymentDelete  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for updated Payment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePaymentCall(String xeroTenantId, UUID paymentID, PaymentDelete paymentDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentDelete;

        // create path and map variables
        String localVarPath = "/Payments/{PaymentID}"
            .replace("{" + "PaymentID" + "}", localVarApiClient.escapeString(paymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePaymentValidateBeforeCall(String xeroTenantId, UUID paymentID, PaymentDelete paymentDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling deletePayment(Async)");
        }

        // verify the required parameter 'paymentID' is set
        if (paymentID == null) {
            throw new ApiException("Missing the required parameter 'paymentID' when calling deletePayment(Async)");
        }

        // verify the required parameter 'paymentDelete' is set
        if (paymentDelete == null) {
            throw new ApiException("Missing the required parameter 'paymentDelete' when calling deletePayment(Async)");
        }

        return deletePaymentCall(xeroTenantId, paymentID, paymentDelete, _callback);

    }

    /**
     * Updates a specific payment for invoices and credit notes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentID Unique identifier for a Payment (required)
     * @param paymentDelete  (required)
     * @return Payments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for updated Payment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Payments deletePayment(String xeroTenantId, UUID paymentID, PaymentDelete paymentDelete) throws ApiException {
        ApiResponse<Payments> localVarResp = deletePaymentWithHttpInfo(xeroTenantId, paymentID, paymentDelete);
        return localVarResp.getData();
    }

    /**
     * Updates a specific payment for invoices and credit notes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentID Unique identifier for a Payment (required)
     * @param paymentDelete  (required)
     * @return ApiResponse&lt;Payments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for updated Payment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Payments> deletePaymentWithHttpInfo(String xeroTenantId, UUID paymentID, PaymentDelete paymentDelete) throws ApiException {
        okhttp3.Call localVarCall = deletePaymentValidateBeforeCall(xeroTenantId, paymentID, paymentDelete, null);
        Type localVarReturnType = new TypeToken<Payments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific payment for invoices and credit notes (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentID Unique identifier for a Payment (required)
     * @param paymentDelete  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for updated Payment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePaymentAsync(String xeroTenantId, UUID paymentID, PaymentDelete paymentDelete, final ApiCallback<Payments> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePaymentValidateBeforeCall(xeroTenantId, paymentID, paymentDelete, _callback);
        Type localVarReturnType = new TypeToken<Payments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTrackingCategory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of deleted TrackingCategory </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrackingCategoryCall(String xeroTenantId, UUID trackingCategoryID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/TrackingCategories/{TrackingCategoryID}"
            .replace("{" + "TrackingCategoryID" + "}", localVarApiClient.escapeString(trackingCategoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrackingCategoryValidateBeforeCall(String xeroTenantId, UUID trackingCategoryID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling deleteTrackingCategory(Async)");
        }

        // verify the required parameter 'trackingCategoryID' is set
        if (trackingCategoryID == null) {
            throw new ApiException("Missing the required parameter 'trackingCategoryID' when calling deleteTrackingCategory(Async)");
        }

        return deleteTrackingCategoryCall(xeroTenantId, trackingCategoryID, _callback);

    }

    /**
     * Deletes a specific tracking category
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @return TrackingCategories
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of deleted TrackingCategory </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public TrackingCategories deleteTrackingCategory(String xeroTenantId, UUID trackingCategoryID) throws ApiException {
        ApiResponse<TrackingCategories> localVarResp = deleteTrackingCategoryWithHttpInfo(xeroTenantId, trackingCategoryID);
        return localVarResp.getData();
    }

    /**
     * Deletes a specific tracking category
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @return ApiResponse&lt;TrackingCategories&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of deleted TrackingCategory </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackingCategories> deleteTrackingCategoryWithHttpInfo(String xeroTenantId, UUID trackingCategoryID) throws ApiException {
        okhttp3.Call localVarCall = deleteTrackingCategoryValidateBeforeCall(xeroTenantId, trackingCategoryID, null);
        Type localVarReturnType = new TypeToken<TrackingCategories>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a specific tracking category (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of deleted TrackingCategory </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrackingCategoryAsync(String xeroTenantId, UUID trackingCategoryID, final ApiCallback<TrackingCategories> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrackingCategoryValidateBeforeCall(xeroTenantId, trackingCategoryID, _callback);
        Type localVarReturnType = new TypeToken<TrackingCategories>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTrackingOptions
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param trackingOptionID Unique identifier for a Tracking Option (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingOptions array of remaining options for a specified category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrackingOptionsCall(String xeroTenantId, UUID trackingCategoryID, UUID trackingOptionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/TrackingCategories/{TrackingCategoryID}/Options/{TrackingOptionID}"
            .replace("{" + "TrackingCategoryID" + "}", localVarApiClient.escapeString(trackingCategoryID.toString()))
            .replace("{" + "TrackingOptionID" + "}", localVarApiClient.escapeString(trackingOptionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrackingOptionsValidateBeforeCall(String xeroTenantId, UUID trackingCategoryID, UUID trackingOptionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling deleteTrackingOptions(Async)");
        }

        // verify the required parameter 'trackingCategoryID' is set
        if (trackingCategoryID == null) {
            throw new ApiException("Missing the required parameter 'trackingCategoryID' when calling deleteTrackingOptions(Async)");
        }

        // verify the required parameter 'trackingOptionID' is set
        if (trackingOptionID == null) {
            throw new ApiException("Missing the required parameter 'trackingOptionID' when calling deleteTrackingOptions(Async)");
        }

        return deleteTrackingOptionsCall(xeroTenantId, trackingCategoryID, trackingOptionID, _callback);

    }

    /**
     * Deletes a specific option for a specific tracking category
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param trackingOptionID Unique identifier for a Tracking Option (required)
     * @return TrackingOptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingOptions array of remaining options for a specified category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public TrackingOptions deleteTrackingOptions(String xeroTenantId, UUID trackingCategoryID, UUID trackingOptionID) throws ApiException {
        ApiResponse<TrackingOptions> localVarResp = deleteTrackingOptionsWithHttpInfo(xeroTenantId, trackingCategoryID, trackingOptionID);
        return localVarResp.getData();
    }

    /**
     * Deletes a specific option for a specific tracking category
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param trackingOptionID Unique identifier for a Tracking Option (required)
     * @return ApiResponse&lt;TrackingOptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingOptions array of remaining options for a specified category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackingOptions> deleteTrackingOptionsWithHttpInfo(String xeroTenantId, UUID trackingCategoryID, UUID trackingOptionID) throws ApiException {
        okhttp3.Call localVarCall = deleteTrackingOptionsValidateBeforeCall(xeroTenantId, trackingCategoryID, trackingOptionID, null);
        Type localVarReturnType = new TypeToken<TrackingOptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a specific option for a specific tracking category (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param trackingOptionID Unique identifier for a Tracking Option (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingOptions array of remaining options for a specified category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrackingOptionsAsync(String xeroTenantId, UUID trackingCategoryID, UUID trackingOptionID, final ApiCallback<TrackingOptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrackingOptionsValidateBeforeCall(xeroTenantId, trackingCategoryID, trackingOptionID, _callback);
        Type localVarReturnType = new TypeToken<TrackingOptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for emailInvoice
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param requestEmpty  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailInvoiceCall(String xeroTenantId, UUID invoiceID, RequestEmpty requestEmpty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestEmpty;

        // create path and map variables
        String localVarPath = "/Invoices/{InvoiceID}/Email"
            .replace("{" + "InvoiceID" + "}", localVarApiClient.escapeString(invoiceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailInvoiceValidateBeforeCall(String xeroTenantId, UUID invoiceID, RequestEmpty requestEmpty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling emailInvoice(Async)");
        }

        // verify the required parameter 'invoiceID' is set
        if (invoiceID == null) {
            throw new ApiException("Missing the required parameter 'invoiceID' when calling emailInvoice(Async)");
        }

        // verify the required parameter 'requestEmpty' is set
        if (requestEmpty == null) {
            throw new ApiException("Missing the required parameter 'requestEmpty' when calling emailInvoice(Async)");
        }

        return emailInvoiceCall(xeroTenantId, invoiceID, requestEmpty, _callback);

    }

    /**
     * Sends a copy of a specific invoice to related contact via email
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param requestEmpty  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public void emailInvoice(String xeroTenantId, UUID invoiceID, RequestEmpty requestEmpty) throws ApiException {
        emailInvoiceWithHttpInfo(xeroTenantId, invoiceID, requestEmpty);
    }

    /**
     * Sends a copy of a specific invoice to related contact via email
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param requestEmpty  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> emailInvoiceWithHttpInfo(String xeroTenantId, UUID invoiceID, RequestEmpty requestEmpty) throws ApiException {
        okhttp3.Call localVarCall = emailInvoiceValidateBeforeCall(xeroTenantId, invoiceID, requestEmpty, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sends a copy of a specific invoice to related contact via email (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param requestEmpty  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - return response 204 no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emailInvoiceAsync(String xeroTenantId, UUID invoiceID, RequestEmpty requestEmpty, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailInvoiceValidateBeforeCall(xeroTenantId, invoiceID, requestEmpty, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccount
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for retrieving single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Accounts array with one Account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountCall(String xeroTenantId, UUID accountID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Accounts/{AccountID}"
            .replace("{" + "AccountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountValidateBeforeCall(String xeroTenantId, UUID accountID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getAccount(Async)");
        }

        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling getAccount(Async)");
        }

        return getAccountCall(xeroTenantId, accountID, _callback);

    }

    /**
     * Retrieves a single chart of accounts by using a unique account Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for retrieving single object (required)
     * @return Accounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Accounts array with one Account </td><td>  -  </td></tr>
     </table>
     */
    public Accounts getAccount(String xeroTenantId, UUID accountID) throws ApiException {
        ApiResponse<Accounts> localVarResp = getAccountWithHttpInfo(xeroTenantId, accountID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a single chart of accounts by using a unique account Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for retrieving single object (required)
     * @return ApiResponse&lt;Accounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Accounts array with one Account </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Accounts> getAccountWithHttpInfo(String xeroTenantId, UUID accountID) throws ApiException {
        okhttp3.Call localVarCall = getAccountValidateBeforeCall(xeroTenantId, accountID, null);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a single chart of accounts by using a unique account Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for retrieving single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Accounts array with one Account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAsync(String xeroTenantId, UUID accountID, final ApiCallback<Accounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountValidateBeforeCall(xeroTenantId, accountID, _callback);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @param fileName Name of the attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Account as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAttachmentByFileNameCall(String xeroTenantId, UUID accountID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Accounts/{AccountID}/Attachments/{FileName}"
            .replace("{" + "AccountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID accountID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getAccountAttachmentByFileName(Async)");
        }

        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling getAccountAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling getAccountAttachmentByFileName(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getAccountAttachmentByFileName(Async)");
        }

        return getAccountAttachmentByFileNameCall(xeroTenantId, accountID, fileName, contentType, _callback);

    }

    /**
     * Retrieves an attachment for a specific account by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @param fileName Name of the attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Account as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getAccountAttachmentByFileName(String xeroTenantId, UUID accountID, String fileName, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getAccountAttachmentByFileNameWithHttpInfo(xeroTenantId, accountID, fileName, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves an attachment for a specific account by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @param fileName Name of the attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Account as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getAccountAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID accountID, String fileName, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getAccountAttachmentByFileNameValidateBeforeCall(xeroTenantId, accountID, fileName, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves an attachment for a specific account by filename (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @param fileName Name of the attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Account as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAttachmentByFileNameAsync(String xeroTenantId, UUID accountID, String fileName, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountAttachmentByFileNameValidateBeforeCall(xeroTenantId, accountID, fileName, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountAttachmentById
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @param attachmentID Unique identifier for Attachment object (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Account as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAttachmentByIdCall(String xeroTenantId, UUID accountID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Accounts/{AccountID}/Attachments/{AttachmentID}"
            .replace("{" + "AccountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "AttachmentID" + "}", localVarApiClient.escapeString(attachmentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountAttachmentByIdValidateBeforeCall(String xeroTenantId, UUID accountID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getAccountAttachmentById(Async)");
        }

        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling getAccountAttachmentById(Async)");
        }

        // verify the required parameter 'attachmentID' is set
        if (attachmentID == null) {
            throw new ApiException("Missing the required parameter 'attachmentID' when calling getAccountAttachmentById(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getAccountAttachmentById(Async)");
        }

        return getAccountAttachmentByIdCall(xeroTenantId, accountID, attachmentID, contentType, _callback);

    }

    /**
     * Retrieves a specific attachment from a specific account using a unique attachment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @param attachmentID Unique identifier for Attachment object (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Account as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getAccountAttachmentById(String xeroTenantId, UUID accountID, UUID attachmentID, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getAccountAttachmentByIdWithHttpInfo(xeroTenantId, accountID, attachmentID, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific attachment from a specific account using a unique attachment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @param attachmentID Unique identifier for Attachment object (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Account as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getAccountAttachmentByIdWithHttpInfo(String xeroTenantId, UUID accountID, UUID attachmentID, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getAccountAttachmentByIdValidateBeforeCall(xeroTenantId, accountID, attachmentID, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific attachment from a specific account using a unique attachment Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @param attachmentID Unique identifier for Attachment object (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Account as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAttachmentByIdAsync(String xeroTenantId, UUID accountID, UUID attachmentID, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountAttachmentByIdValidateBeforeCall(xeroTenantId, accountID, attachmentID, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountAttachments
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAttachmentsCall(String xeroTenantId, UUID accountID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Accounts/{AccountID}/Attachments"
            .replace("{" + "AccountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountAttachmentsValidateBeforeCall(String xeroTenantId, UUID accountID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getAccountAttachments(Async)");
        }

        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling getAccountAttachments(Async)");
        }

        return getAccountAttachmentsCall(xeroTenantId, accountID, _callback);

    }

    /**
     * Retrieves attachments for a specific accounts by using a unique account Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
     </table>
     */
    public Attachments getAccountAttachments(String xeroTenantId, UUID accountID) throws ApiException {
        ApiResponse<Attachments> localVarResp = getAccountAttachmentsWithHttpInfo(xeroTenantId, accountID);
        return localVarResp.getData();
    }

    /**
     * Retrieves attachments for a specific accounts by using a unique account Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> getAccountAttachmentsWithHttpInfo(String xeroTenantId, UUID accountID) throws ApiException {
        okhttp3.Call localVarCall = getAccountAttachmentsValidateBeforeCall(xeroTenantId, accountID, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves attachments for a specific accounts by using a unique account Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAttachmentsAsync(String xeroTenantId, UUID accountID, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountAttachmentsValidateBeforeCall(xeroTenantId, accountID, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccounts
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Accounts array with 0 to n Account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountsValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getAccounts(Async)");
        }

        return getAccountsCall(xeroTenantId, ifModifiedSince, where, order, _callback);

    }

    /**
     * Retrieves the full chart of accounts
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @return Accounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Accounts array with 0 to n Account </td><td>  -  </td></tr>
     </table>
     */
    public Accounts getAccounts(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order) throws ApiException {
        ApiResponse<Accounts> localVarResp = getAccountsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order);
        return localVarResp.getData();
    }

    /**
     * Retrieves the full chart of accounts
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @return ApiResponse&lt;Accounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Accounts array with 0 to n Account </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Accounts> getAccountsWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order) throws ApiException {
        okhttp3.Call localVarCall = getAccountsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, null);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the full chart of accounts (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Accounts array with 0 to n Account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, final ApiCallback<Accounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, _callback);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBankTransaction
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with a specific BankTransaction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransactionCall(String xeroTenantId, UUID bankTransactionID, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BankTransactions/{BankTransactionID}"
            .replace("{" + "BankTransactionID" + "}", localVarApiClient.escapeString(bankTransactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankTransactionValidateBeforeCall(String xeroTenantId, UUID bankTransactionID, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getBankTransaction(Async)");
        }

        // verify the required parameter 'bankTransactionID' is set
        if (bankTransactionID == null) {
            throw new ApiException("Missing the required parameter 'bankTransactionID' when calling getBankTransaction(Async)");
        }

        return getBankTransactionCall(xeroTenantId, bankTransactionID, unitdp, _callback);

    }

    /**
     * Retrieves a single spent or received money transaction by using a unique bank transaction Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return BankTransactions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with a specific BankTransaction </td><td>  -  </td></tr>
     </table>
     */
    public BankTransactions getBankTransaction(String xeroTenantId, UUID bankTransactionID, Integer unitdp) throws ApiException {
        ApiResponse<BankTransactions> localVarResp = getBankTransactionWithHttpInfo(xeroTenantId, bankTransactionID, unitdp);
        return localVarResp.getData();
    }

    /**
     * Retrieves a single spent or received money transaction by using a unique bank transaction Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;BankTransactions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with a specific BankTransaction </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankTransactions> getBankTransactionWithHttpInfo(String xeroTenantId, UUID bankTransactionID, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = getBankTransactionValidateBeforeCall(xeroTenantId, bankTransactionID, unitdp, null);
        Type localVarReturnType = new TypeToken<BankTransactions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a single spent or received money transaction by using a unique bank transaction Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with a specific BankTransaction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransactionAsync(String xeroTenantId, UUID bankTransactionID, Integer unitdp, final ApiCallback<BankTransactions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankTransactionValidateBeforeCall(xeroTenantId, bankTransactionID, unitdp, _callback);
        Type localVarReturnType = new TypeToken<BankTransactions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBankTransactionAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param fileName The name of the file being attached (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for BankTransaction as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransactionAttachmentByFileNameCall(String xeroTenantId, UUID bankTransactionID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BankTransactions/{BankTransactionID}/Attachments/{FileName}"
            .replace("{" + "BankTransactionID" + "}", localVarApiClient.escapeString(bankTransactionID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankTransactionAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID bankTransactionID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getBankTransactionAttachmentByFileName(Async)");
        }

        // verify the required parameter 'bankTransactionID' is set
        if (bankTransactionID == null) {
            throw new ApiException("Missing the required parameter 'bankTransactionID' when calling getBankTransactionAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling getBankTransactionAttachmentByFileName(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getBankTransactionAttachmentByFileName(Async)");
        }

        return getBankTransactionAttachmentByFileNameCall(xeroTenantId, bankTransactionID, fileName, contentType, _callback);

    }

    /**
     * Retrieves a specific attachment from a specific bank transaction by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param fileName The name of the file being attached (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for BankTransaction as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getBankTransactionAttachmentByFileName(String xeroTenantId, UUID bankTransactionID, String fileName, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getBankTransactionAttachmentByFileNameWithHttpInfo(xeroTenantId, bankTransactionID, fileName, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific attachment from a specific bank transaction by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param fileName The name of the file being attached (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for BankTransaction as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getBankTransactionAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID bankTransactionID, String fileName, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getBankTransactionAttachmentByFileNameValidateBeforeCall(xeroTenantId, bankTransactionID, fileName, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific attachment from a specific bank transaction by filename (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param fileName The name of the file being attached (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for BankTransaction as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransactionAttachmentByFileNameAsync(String xeroTenantId, UUID bankTransactionID, String fileName, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankTransactionAttachmentByFileNameValidateBeforeCall(xeroTenantId, bankTransactionID, fileName, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBankTransactionAttachmentById
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param attachmentID Xero generated unique identifier for an attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for BankTransaction as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransactionAttachmentByIdCall(String xeroTenantId, UUID bankTransactionID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BankTransactions/{BankTransactionID}/Attachments/{AttachmentID}"
            .replace("{" + "BankTransactionID" + "}", localVarApiClient.escapeString(bankTransactionID.toString()))
            .replace("{" + "AttachmentID" + "}", localVarApiClient.escapeString(attachmentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankTransactionAttachmentByIdValidateBeforeCall(String xeroTenantId, UUID bankTransactionID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getBankTransactionAttachmentById(Async)");
        }

        // verify the required parameter 'bankTransactionID' is set
        if (bankTransactionID == null) {
            throw new ApiException("Missing the required parameter 'bankTransactionID' when calling getBankTransactionAttachmentById(Async)");
        }

        // verify the required parameter 'attachmentID' is set
        if (attachmentID == null) {
            throw new ApiException("Missing the required parameter 'attachmentID' when calling getBankTransactionAttachmentById(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getBankTransactionAttachmentById(Async)");
        }

        return getBankTransactionAttachmentByIdCall(xeroTenantId, bankTransactionID, attachmentID, contentType, _callback);

    }

    /**
     * Retrieves specific attachments from a specific BankTransaction using a unique attachment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param attachmentID Xero generated unique identifier for an attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for BankTransaction as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getBankTransactionAttachmentById(String xeroTenantId, UUID bankTransactionID, UUID attachmentID, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getBankTransactionAttachmentByIdWithHttpInfo(xeroTenantId, bankTransactionID, attachmentID, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves specific attachments from a specific BankTransaction using a unique attachment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param attachmentID Xero generated unique identifier for an attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for BankTransaction as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getBankTransactionAttachmentByIdWithHttpInfo(String xeroTenantId, UUID bankTransactionID, UUID attachmentID, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getBankTransactionAttachmentByIdValidateBeforeCall(xeroTenantId, bankTransactionID, attachmentID, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves specific attachments from a specific BankTransaction using a unique attachment Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param attachmentID Xero generated unique identifier for an attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for BankTransaction as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransactionAttachmentByIdAsync(String xeroTenantId, UUID bankTransactionID, UUID attachmentID, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankTransactionAttachmentByIdValidateBeforeCall(xeroTenantId, bankTransactionID, attachmentID, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBankTransactionAttachments
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with 0 to n Attachment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransactionAttachmentsCall(String xeroTenantId, UUID bankTransactionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BankTransactions/{BankTransactionID}/Attachments"
            .replace("{" + "BankTransactionID" + "}", localVarApiClient.escapeString(bankTransactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankTransactionAttachmentsValidateBeforeCall(String xeroTenantId, UUID bankTransactionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getBankTransactionAttachments(Async)");
        }

        // verify the required parameter 'bankTransactionID' is set
        if (bankTransactionID == null) {
            throw new ApiException("Missing the required parameter 'bankTransactionID' when calling getBankTransactionAttachments(Async)");
        }

        return getBankTransactionAttachmentsCall(xeroTenantId, bankTransactionID, _callback);

    }

    /**
     * Retrieves any attachments from a specific bank transactions
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with 0 to n Attachment </td><td>  -  </td></tr>
     </table>
     */
    public Attachments getBankTransactionAttachments(String xeroTenantId, UUID bankTransactionID) throws ApiException {
        ApiResponse<Attachments> localVarResp = getBankTransactionAttachmentsWithHttpInfo(xeroTenantId, bankTransactionID);
        return localVarResp.getData();
    }

    /**
     * Retrieves any attachments from a specific bank transactions
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with 0 to n Attachment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> getBankTransactionAttachmentsWithHttpInfo(String xeroTenantId, UUID bankTransactionID) throws ApiException {
        okhttp3.Call localVarCall = getBankTransactionAttachmentsValidateBeforeCall(xeroTenantId, bankTransactionID, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves any attachments from a specific bank transactions (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with 0 to n Attachment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransactionAttachmentsAsync(String xeroTenantId, UUID bankTransactionID, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankTransactionAttachmentsValidateBeforeCall(xeroTenantId, bankTransactionID, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBankTransactions
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page Up to 100 bank transactions will be returned in a single API call with line items details (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with 0 to n BankTransaction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransactionsCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BankTransactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankTransactionsValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getBankTransactions(Async)");
        }

        return getBankTransactionsCall(xeroTenantId, ifModifiedSince, where, order, page, unitdp, _callback);

    }

    /**
     * Retrieves any spent or received money transactions
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page Up to 100 bank transactions will be returned in a single API call with line items details (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return BankTransactions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with 0 to n BankTransaction </td><td>  -  </td></tr>
     </table>
     */
    public BankTransactions getBankTransactions(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp) throws ApiException {
        ApiResponse<BankTransactions> localVarResp = getBankTransactionsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page, unitdp);
        return localVarResp.getData();
    }

    /**
     * Retrieves any spent or received money transactions
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page Up to 100 bank transactions will be returned in a single API call with line items details (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;BankTransactions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with 0 to n BankTransaction </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankTransactions> getBankTransactionsWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = getBankTransactionsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, unitdp, null);
        Type localVarReturnType = new TypeToken<BankTransactions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves any spent or received money transactions (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page Up to 100 bank transactions will be returned in a single API call with line items details (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with 0 to n BankTransaction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransactionsAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp, final ApiCallback<BankTransactions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankTransactionsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, unitdp, _callback);
        Type localVarReturnType = new TypeToken<BankTransactions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBankTransactionsHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransactionsHistoryCall(String xeroTenantId, UUID bankTransactionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BankTransactions/{BankTransactionID}/History"
            .replace("{" + "BankTransactionID" + "}", localVarApiClient.escapeString(bankTransactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankTransactionsHistoryValidateBeforeCall(String xeroTenantId, UUID bankTransactionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getBankTransactionsHistory(Async)");
        }

        // verify the required parameter 'bankTransactionID' is set
        if (bankTransactionID == null) {
            throw new ApiException("Missing the required parameter 'bankTransactionID' when calling getBankTransactionsHistory(Async)");
        }

        return getBankTransactionsHistoryCall(xeroTenantId, bankTransactionID, _callback);

    }

    /**
     * Retrieves history from a specific bank transaction using a unique bank transaction Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords getBankTransactionsHistory(String xeroTenantId, UUID bankTransactionID) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = getBankTransactionsHistoryWithHttpInfo(xeroTenantId, bankTransactionID);
        return localVarResp.getData();
    }

    /**
     * Retrieves history from a specific bank transaction using a unique bank transaction Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> getBankTransactionsHistoryWithHttpInfo(String xeroTenantId, UUID bankTransactionID) throws ApiException {
        okhttp3.Call localVarCall = getBankTransactionsHistoryValidateBeforeCall(xeroTenantId, bankTransactionID, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves history from a specific bank transaction using a unique bank transaction Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransactionsHistoryAsync(String xeroTenantId, UUID bankTransactionID, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankTransactionsHistoryValidateBeforeCall(xeroTenantId, bankTransactionID, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBankTransfer
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of BankTransfers array with one BankTransfer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransferCall(String xeroTenantId, UUID bankTransferID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BankTransfers/{BankTransferID}"
            .replace("{" + "BankTransferID" + "}", localVarApiClient.escapeString(bankTransferID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankTransferValidateBeforeCall(String xeroTenantId, UUID bankTransferID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getBankTransfer(Async)");
        }

        // verify the required parameter 'bankTransferID' is set
        if (bankTransferID == null) {
            throw new ApiException("Missing the required parameter 'bankTransferID' when calling getBankTransfer(Async)");
        }

        return getBankTransferCall(xeroTenantId, bankTransferID, _callback);

    }

    /**
     * Retrieves specific bank transfers by using a unique bank transfer Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @return BankTransfers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of BankTransfers array with one BankTransfer </td><td>  -  </td></tr>
     </table>
     */
    public BankTransfers getBankTransfer(String xeroTenantId, UUID bankTransferID) throws ApiException {
        ApiResponse<BankTransfers> localVarResp = getBankTransferWithHttpInfo(xeroTenantId, bankTransferID);
        return localVarResp.getData();
    }

    /**
     * Retrieves specific bank transfers by using a unique bank transfer Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @return ApiResponse&lt;BankTransfers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of BankTransfers array with one BankTransfer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankTransfers> getBankTransferWithHttpInfo(String xeroTenantId, UUID bankTransferID) throws ApiException {
        okhttp3.Call localVarCall = getBankTransferValidateBeforeCall(xeroTenantId, bankTransferID, null);
        Type localVarReturnType = new TypeToken<BankTransfers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves specific bank transfers by using a unique bank transfer Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of BankTransfers array with one BankTransfer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransferAsync(String xeroTenantId, UUID bankTransferID, final ApiCallback<BankTransfers> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankTransferValidateBeforeCall(xeroTenantId, bankTransferID, _callback);
        Type localVarReturnType = new TypeToken<BankTransfers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBankTransferAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param fileName The name of the file being attached to a Bank Transfer (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of binary data from the Attachment to a Bank Transfer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransferAttachmentByFileNameCall(String xeroTenantId, UUID bankTransferID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BankTransfers/{BankTransferID}/Attachments/{FileName}"
            .replace("{" + "BankTransferID" + "}", localVarApiClient.escapeString(bankTransferID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankTransferAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID bankTransferID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getBankTransferAttachmentByFileName(Async)");
        }

        // verify the required parameter 'bankTransferID' is set
        if (bankTransferID == null) {
            throw new ApiException("Missing the required parameter 'bankTransferID' when calling getBankTransferAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling getBankTransferAttachmentByFileName(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getBankTransferAttachmentByFileName(Async)");
        }

        return getBankTransferAttachmentByFileNameCall(xeroTenantId, bankTransferID, fileName, contentType, _callback);

    }

    /**
     * Retrieves a specific attachment on a specific bank transfer by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param fileName The name of the file being attached to a Bank Transfer (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of binary data from the Attachment to a Bank Transfer </td><td>  -  </td></tr>
     </table>
     */
    public File getBankTransferAttachmentByFileName(String xeroTenantId, UUID bankTransferID, String fileName, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getBankTransferAttachmentByFileNameWithHttpInfo(xeroTenantId, bankTransferID, fileName, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific attachment on a specific bank transfer by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param fileName The name of the file being attached to a Bank Transfer (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of binary data from the Attachment to a Bank Transfer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getBankTransferAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID bankTransferID, String fileName, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getBankTransferAttachmentByFileNameValidateBeforeCall(xeroTenantId, bankTransferID, fileName, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific attachment on a specific bank transfer by file name (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param fileName The name of the file being attached to a Bank Transfer (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of binary data from the Attachment to a Bank Transfer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransferAttachmentByFileNameAsync(String xeroTenantId, UUID bankTransferID, String fileName, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankTransferAttachmentByFileNameValidateBeforeCall(xeroTenantId, bankTransferID, fileName, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBankTransferAttachmentById
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param attachmentID Xero generated unique identifier for an Attachment to a bank transfer (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of binary data from the Attachment to a Bank Transfer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransferAttachmentByIdCall(String xeroTenantId, UUID bankTransferID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BankTransfers/{BankTransferID}/Attachments/{AttachmentID}"
            .replace("{" + "BankTransferID" + "}", localVarApiClient.escapeString(bankTransferID.toString()))
            .replace("{" + "AttachmentID" + "}", localVarApiClient.escapeString(attachmentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankTransferAttachmentByIdValidateBeforeCall(String xeroTenantId, UUID bankTransferID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getBankTransferAttachmentById(Async)");
        }

        // verify the required parameter 'bankTransferID' is set
        if (bankTransferID == null) {
            throw new ApiException("Missing the required parameter 'bankTransferID' when calling getBankTransferAttachmentById(Async)");
        }

        // verify the required parameter 'attachmentID' is set
        if (attachmentID == null) {
            throw new ApiException("Missing the required parameter 'attachmentID' when calling getBankTransferAttachmentById(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getBankTransferAttachmentById(Async)");
        }

        return getBankTransferAttachmentByIdCall(xeroTenantId, bankTransferID, attachmentID, contentType, _callback);

    }

    /**
     * Retrieves a specific attachment from a specific bank transfer using a unique attachment ID
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param attachmentID Xero generated unique identifier for an Attachment to a bank transfer (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of binary data from the Attachment to a Bank Transfer </td><td>  -  </td></tr>
     </table>
     */
    public File getBankTransferAttachmentById(String xeroTenantId, UUID bankTransferID, UUID attachmentID, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getBankTransferAttachmentByIdWithHttpInfo(xeroTenantId, bankTransferID, attachmentID, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific attachment from a specific bank transfer using a unique attachment ID
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param attachmentID Xero generated unique identifier for an Attachment to a bank transfer (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of binary data from the Attachment to a Bank Transfer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getBankTransferAttachmentByIdWithHttpInfo(String xeroTenantId, UUID bankTransferID, UUID attachmentID, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getBankTransferAttachmentByIdValidateBeforeCall(xeroTenantId, bankTransferID, attachmentID, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific attachment from a specific bank transfer using a unique attachment ID (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param attachmentID Xero generated unique identifier for an Attachment to a bank transfer (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of binary data from the Attachment to a Bank Transfer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransferAttachmentByIdAsync(String xeroTenantId, UUID bankTransferID, UUID attachmentID, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankTransferAttachmentByIdValidateBeforeCall(xeroTenantId, bankTransferID, attachmentID, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBankTransferAttachments
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of 0 to N Attachment for a Bank Transfer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransferAttachmentsCall(String xeroTenantId, UUID bankTransferID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BankTransfers/{BankTransferID}/Attachments"
            .replace("{" + "BankTransferID" + "}", localVarApiClient.escapeString(bankTransferID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankTransferAttachmentsValidateBeforeCall(String xeroTenantId, UUID bankTransferID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getBankTransferAttachments(Async)");
        }

        // verify the required parameter 'bankTransferID' is set
        if (bankTransferID == null) {
            throw new ApiException("Missing the required parameter 'bankTransferID' when calling getBankTransferAttachments(Async)");
        }

        return getBankTransferAttachmentsCall(xeroTenantId, bankTransferID, _callback);

    }

    /**
     * Retrieves attachments from a specific bank transfer
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of 0 to N Attachment for a Bank Transfer </td><td>  -  </td></tr>
     </table>
     */
    public Attachments getBankTransferAttachments(String xeroTenantId, UUID bankTransferID) throws ApiException {
        ApiResponse<Attachments> localVarResp = getBankTransferAttachmentsWithHttpInfo(xeroTenantId, bankTransferID);
        return localVarResp.getData();
    }

    /**
     * Retrieves attachments from a specific bank transfer
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of 0 to N Attachment for a Bank Transfer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> getBankTransferAttachmentsWithHttpInfo(String xeroTenantId, UUID bankTransferID) throws ApiException {
        okhttp3.Call localVarCall = getBankTransferAttachmentsValidateBeforeCall(xeroTenantId, bankTransferID, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves attachments from a specific bank transfer (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of 0 to N Attachment for a Bank Transfer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransferAttachmentsAsync(String xeroTenantId, UUID bankTransferID, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankTransferAttachmentsValidateBeforeCall(xeroTenantId, bankTransferID, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBankTransferHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransferHistoryCall(String xeroTenantId, UUID bankTransferID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BankTransfers/{BankTransferID}/History"
            .replace("{" + "BankTransferID" + "}", localVarApiClient.escapeString(bankTransferID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankTransferHistoryValidateBeforeCall(String xeroTenantId, UUID bankTransferID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getBankTransferHistory(Async)");
        }

        // verify the required parameter 'bankTransferID' is set
        if (bankTransferID == null) {
            throw new ApiException("Missing the required parameter 'bankTransferID' when calling getBankTransferHistory(Async)");
        }

        return getBankTransferHistoryCall(xeroTenantId, bankTransferID, _callback);

    }

    /**
     * Retrieves history from a specific bank transfer using a unique bank transfer Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords getBankTransferHistory(String xeroTenantId, UUID bankTransferID) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = getBankTransferHistoryWithHttpInfo(xeroTenantId, bankTransferID);
        return localVarResp.getData();
    }

    /**
     * Retrieves history from a specific bank transfer using a unique bank transfer Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> getBankTransferHistoryWithHttpInfo(String xeroTenantId, UUID bankTransferID) throws ApiException {
        okhttp3.Call localVarCall = getBankTransferHistoryValidateBeforeCall(xeroTenantId, bankTransferID, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves history from a specific bank transfer using a unique bank transfer Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransferHistoryAsync(String xeroTenantId, UUID bankTransferID, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankTransferHistoryValidateBeforeCall(xeroTenantId, bankTransferID, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBankTransfers
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of BankTransfers array of 0 to N BankTransfer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransfersCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BankTransfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankTransfersValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getBankTransfers(Async)");
        }

        return getBankTransfersCall(xeroTenantId, ifModifiedSince, where, order, _callback);

    }

    /**
     * Retrieves all bank transfers
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @return BankTransfers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of BankTransfers array of 0 to N BankTransfer </td><td>  -  </td></tr>
     </table>
     */
    public BankTransfers getBankTransfers(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order) throws ApiException {
        ApiResponse<BankTransfers> localVarResp = getBankTransfersWithHttpInfo(xeroTenantId, ifModifiedSince, where, order);
        return localVarResp.getData();
    }

    /**
     * Retrieves all bank transfers
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @return ApiResponse&lt;BankTransfers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of BankTransfers array of 0 to N BankTransfer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankTransfers> getBankTransfersWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order) throws ApiException {
        okhttp3.Call localVarCall = getBankTransfersValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, null);
        Type localVarReturnType = new TypeToken<BankTransfers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves all bank transfers (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of BankTransfers array of 0 to N BankTransfer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankTransfersAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, final ApiCallback<BankTransfers> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankTransfersValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, _callback);
        Type localVarReturnType = new TypeToken<BankTransfers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBatchPaymentHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param batchPaymentID Unique identifier for BatchPayment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBatchPaymentHistoryCall(String xeroTenantId, UUID batchPaymentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BatchPayments/{BatchPaymentID}/History"
            .replace("{" + "BatchPaymentID" + "}", localVarApiClient.escapeString(batchPaymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBatchPaymentHistoryValidateBeforeCall(String xeroTenantId, UUID batchPaymentID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getBatchPaymentHistory(Async)");
        }

        // verify the required parameter 'batchPaymentID' is set
        if (batchPaymentID == null) {
            throw new ApiException("Missing the required parameter 'batchPaymentID' when calling getBatchPaymentHistory(Async)");
        }

        return getBatchPaymentHistoryCall(xeroTenantId, batchPaymentID, _callback);

    }

    /**
     * Retrieves history from a specific batch payment
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param batchPaymentID Unique identifier for BatchPayment (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords getBatchPaymentHistory(String xeroTenantId, UUID batchPaymentID) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = getBatchPaymentHistoryWithHttpInfo(xeroTenantId, batchPaymentID);
        return localVarResp.getData();
    }

    /**
     * Retrieves history from a specific batch payment
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param batchPaymentID Unique identifier for BatchPayment (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> getBatchPaymentHistoryWithHttpInfo(String xeroTenantId, UUID batchPaymentID) throws ApiException {
        okhttp3.Call localVarCall = getBatchPaymentHistoryValidateBeforeCall(xeroTenantId, batchPaymentID, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves history from a specific batch payment (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param batchPaymentID Unique identifier for BatchPayment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBatchPaymentHistoryAsync(String xeroTenantId, UUID batchPaymentID, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBatchPaymentHistoryValidateBeforeCall(xeroTenantId, batchPaymentID, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBatchPayments
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BatchPayments array of BatchPayment objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBatchPaymentsCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BatchPayments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBatchPaymentsValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getBatchPayments(Async)");
        }

        return getBatchPaymentsCall(xeroTenantId, ifModifiedSince, where, order, _callback);

    }

    /**
     * Retrieves either one or many batch payments for invoices
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @return BatchPayments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BatchPayments array of BatchPayment objects </td><td>  -  </td></tr>
     </table>
     */
    public BatchPayments getBatchPayments(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order) throws ApiException {
        ApiResponse<BatchPayments> localVarResp = getBatchPaymentsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order);
        return localVarResp.getData();
    }

    /**
     * Retrieves either one or many batch payments for invoices
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @return ApiResponse&lt;BatchPayments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BatchPayments array of BatchPayment objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchPayments> getBatchPaymentsWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order) throws ApiException {
        okhttp3.Call localVarCall = getBatchPaymentsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, null);
        Type localVarReturnType = new TypeToken<BatchPayments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves either one or many batch payments for invoices (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BatchPayments array of BatchPayment objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBatchPaymentsAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, final ApiCallback<BatchPayments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBatchPaymentsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, _callback);
        Type localVarReturnType = new TypeToken<BatchPayments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBrandingTheme
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param brandingThemeID Unique identifier for a Branding Theme (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BrandingThemes with one BrandingTheme </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandingThemeCall(String xeroTenantId, UUID brandingThemeID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BrandingThemes/{BrandingThemeID}"
            .replace("{" + "BrandingThemeID" + "}", localVarApiClient.escapeString(brandingThemeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrandingThemeValidateBeforeCall(String xeroTenantId, UUID brandingThemeID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getBrandingTheme(Async)");
        }

        // verify the required parameter 'brandingThemeID' is set
        if (brandingThemeID == null) {
            throw new ApiException("Missing the required parameter 'brandingThemeID' when calling getBrandingTheme(Async)");
        }

        return getBrandingThemeCall(xeroTenantId, brandingThemeID, _callback);

    }

    /**
     * Retrieves a specific branding theme using a unique branding theme Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param brandingThemeID Unique identifier for a Branding Theme (required)
     * @return BrandingThemes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BrandingThemes with one BrandingTheme </td><td>  -  </td></tr>
     </table>
     */
    public BrandingThemes getBrandingTheme(String xeroTenantId, UUID brandingThemeID) throws ApiException {
        ApiResponse<BrandingThemes> localVarResp = getBrandingThemeWithHttpInfo(xeroTenantId, brandingThemeID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific branding theme using a unique branding theme Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param brandingThemeID Unique identifier for a Branding Theme (required)
     * @return ApiResponse&lt;BrandingThemes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BrandingThemes with one BrandingTheme </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BrandingThemes> getBrandingThemeWithHttpInfo(String xeroTenantId, UUID brandingThemeID) throws ApiException {
        okhttp3.Call localVarCall = getBrandingThemeValidateBeforeCall(xeroTenantId, brandingThemeID, null);
        Type localVarReturnType = new TypeToken<BrandingThemes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific branding theme using a unique branding theme Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param brandingThemeID Unique identifier for a Branding Theme (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BrandingThemes with one BrandingTheme </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandingThemeAsync(String xeroTenantId, UUID brandingThemeID, final ApiCallback<BrandingThemes> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrandingThemeValidateBeforeCall(xeroTenantId, brandingThemeID, _callback);
        Type localVarReturnType = new TypeToken<BrandingThemes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBrandingThemePaymentServices
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param brandingThemeID Unique identifier for a Branding Theme (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PaymentServices array with 0 to N PaymentService </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandingThemePaymentServicesCall(String xeroTenantId, UUID brandingThemeID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BrandingThemes/{BrandingThemeID}/PaymentServices"
            .replace("{" + "BrandingThemeID" + "}", localVarApiClient.escapeString(brandingThemeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrandingThemePaymentServicesValidateBeforeCall(String xeroTenantId, UUID brandingThemeID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getBrandingThemePaymentServices(Async)");
        }

        // verify the required parameter 'brandingThemeID' is set
        if (brandingThemeID == null) {
            throw new ApiException("Missing the required parameter 'brandingThemeID' when calling getBrandingThemePaymentServices(Async)");
        }

        return getBrandingThemePaymentServicesCall(xeroTenantId, brandingThemeID, _callback);

    }

    /**
     * Retrieves the payment services for a specific branding theme
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param brandingThemeID Unique identifier for a Branding Theme (required)
     * @return PaymentServices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PaymentServices array with 0 to N PaymentService </td><td>  -  </td></tr>
     </table>
     */
    public PaymentServices getBrandingThemePaymentServices(String xeroTenantId, UUID brandingThemeID) throws ApiException {
        ApiResponse<PaymentServices> localVarResp = getBrandingThemePaymentServicesWithHttpInfo(xeroTenantId, brandingThemeID);
        return localVarResp.getData();
    }

    /**
     * Retrieves the payment services for a specific branding theme
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param brandingThemeID Unique identifier for a Branding Theme (required)
     * @return ApiResponse&lt;PaymentServices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PaymentServices array with 0 to N PaymentService </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentServices> getBrandingThemePaymentServicesWithHttpInfo(String xeroTenantId, UUID brandingThemeID) throws ApiException {
        okhttp3.Call localVarCall = getBrandingThemePaymentServicesValidateBeforeCall(xeroTenantId, brandingThemeID, null);
        Type localVarReturnType = new TypeToken<PaymentServices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the payment services for a specific branding theme (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param brandingThemeID Unique identifier for a Branding Theme (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PaymentServices array with 0 to N PaymentService </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandingThemePaymentServicesAsync(String xeroTenantId, UUID brandingThemeID, final ApiCallback<PaymentServices> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrandingThemePaymentServicesValidateBeforeCall(xeroTenantId, brandingThemeID, _callback);
        Type localVarReturnType = new TypeToken<PaymentServices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBrandingThemes
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BrandingThemes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandingThemesCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BrandingThemes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrandingThemesValidateBeforeCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getBrandingThemes(Async)");
        }

        return getBrandingThemesCall(xeroTenantId, _callback);

    }

    /**
     * Retrieves all the branding themes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return BrandingThemes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BrandingThemes </td><td>  -  </td></tr>
     </table>
     */
    public BrandingThemes getBrandingThemes(String xeroTenantId) throws ApiException {
        ApiResponse<BrandingThemes> localVarResp = getBrandingThemesWithHttpInfo(xeroTenantId);
        return localVarResp.getData();
    }

    /**
     * Retrieves all the branding themes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return ApiResponse&lt;BrandingThemes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BrandingThemes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BrandingThemes> getBrandingThemesWithHttpInfo(String xeroTenantId) throws ApiException {
        okhttp3.Call localVarCall = getBrandingThemesValidateBeforeCall(xeroTenantId, null);
        Type localVarReturnType = new TypeToken<BrandingThemes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves all the branding themes (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BrandingThemes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandingThemesAsync(String xeroTenantId, final ApiCallback<BrandingThemes> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrandingThemesValidateBeforeCall(xeroTenantId, _callback);
        Type localVarReturnType = new TypeToken<BrandingThemes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContact
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with a unique Contact </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactCall(String xeroTenantId, UUID contactID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Contacts/{ContactID}"
            .replace("{" + "ContactID" + "}", localVarApiClient.escapeString(contactID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactValidateBeforeCall(String xeroTenantId, UUID contactID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getContact(Async)");
        }

        // verify the required parameter 'contactID' is set
        if (contactID == null) {
            throw new ApiException("Missing the required parameter 'contactID' when calling getContact(Async)");
        }

        return getContactCall(xeroTenantId, contactID, _callback);

    }

    /**
     * Retrieves a specific contacts in a Xero organisation using a unique contact Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @return Contacts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with a unique Contact </td><td>  -  </td></tr>
     </table>
     */
    public Contacts getContact(String xeroTenantId, UUID contactID) throws ApiException {
        ApiResponse<Contacts> localVarResp = getContactWithHttpInfo(xeroTenantId, contactID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific contacts in a Xero organisation using a unique contact Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @return ApiResponse&lt;Contacts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with a unique Contact </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Contacts> getContactWithHttpInfo(String xeroTenantId, UUID contactID) throws ApiException {
        okhttp3.Call localVarCall = getContactValidateBeforeCall(xeroTenantId, contactID, null);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific contacts in a Xero organisation using a unique contact Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with a unique Contact </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactAsync(String xeroTenantId, UUID contactID, final ApiCallback<Contacts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactValidateBeforeCall(xeroTenantId, contactID, _callback);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContactAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param fileName Name for the file you are attaching (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Contact as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactAttachmentByFileNameCall(String xeroTenantId, UUID contactID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Contacts/{ContactID}/Attachments/{FileName}"
            .replace("{" + "ContactID" + "}", localVarApiClient.escapeString(contactID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID contactID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getContactAttachmentByFileName(Async)");
        }

        // verify the required parameter 'contactID' is set
        if (contactID == null) {
            throw new ApiException("Missing the required parameter 'contactID' when calling getContactAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling getContactAttachmentByFileName(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getContactAttachmentByFileName(Async)");
        }

        return getContactAttachmentByFileNameCall(xeroTenantId, contactID, fileName, contentType, _callback);

    }

    /**
     * Retrieves a specific attachment from a specific contact by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param fileName Name for the file you are attaching (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Contact as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getContactAttachmentByFileName(String xeroTenantId, UUID contactID, String fileName, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getContactAttachmentByFileNameWithHttpInfo(xeroTenantId, contactID, fileName, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific attachment from a specific contact by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param fileName Name for the file you are attaching (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Contact as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getContactAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID contactID, String fileName, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getContactAttachmentByFileNameValidateBeforeCall(xeroTenantId, contactID, fileName, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific attachment from a specific contact by file name (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param fileName Name for the file you are attaching (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Contact as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactAttachmentByFileNameAsync(String xeroTenantId, UUID contactID, String fileName, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactAttachmentByFileNameValidateBeforeCall(xeroTenantId, contactID, fileName, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContactAttachmentById
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Contact as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactAttachmentByIdCall(String xeroTenantId, UUID contactID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Contacts/{ContactID}/Attachments/{AttachmentID}"
            .replace("{" + "ContactID" + "}", localVarApiClient.escapeString(contactID.toString()))
            .replace("{" + "AttachmentID" + "}", localVarApiClient.escapeString(attachmentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactAttachmentByIdValidateBeforeCall(String xeroTenantId, UUID contactID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getContactAttachmentById(Async)");
        }

        // verify the required parameter 'contactID' is set
        if (contactID == null) {
            throw new ApiException("Missing the required parameter 'contactID' when calling getContactAttachmentById(Async)");
        }

        // verify the required parameter 'attachmentID' is set
        if (attachmentID == null) {
            throw new ApiException("Missing the required parameter 'attachmentID' when calling getContactAttachmentById(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getContactAttachmentById(Async)");
        }

        return getContactAttachmentByIdCall(xeroTenantId, contactID, attachmentID, contentType, _callback);

    }

    /**
     * Retrieves a specific attachment from a specific contact using a unique attachment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Contact as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getContactAttachmentById(String xeroTenantId, UUID contactID, UUID attachmentID, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getContactAttachmentByIdWithHttpInfo(xeroTenantId, contactID, attachmentID, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific attachment from a specific contact using a unique attachment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Contact as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getContactAttachmentByIdWithHttpInfo(String xeroTenantId, UUID contactID, UUID attachmentID, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getContactAttachmentByIdValidateBeforeCall(xeroTenantId, contactID, attachmentID, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific attachment from a specific contact using a unique attachment Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Contact as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactAttachmentByIdAsync(String xeroTenantId, UUID contactID, UUID attachmentID, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactAttachmentByIdValidateBeforeCall(xeroTenantId, contactID, attachmentID, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContactAttachments
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with 0 to N Attachment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactAttachmentsCall(String xeroTenantId, UUID contactID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Contacts/{ContactID}/Attachments"
            .replace("{" + "ContactID" + "}", localVarApiClient.escapeString(contactID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactAttachmentsValidateBeforeCall(String xeroTenantId, UUID contactID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getContactAttachments(Async)");
        }

        // verify the required parameter 'contactID' is set
        if (contactID == null) {
            throw new ApiException("Missing the required parameter 'contactID' when calling getContactAttachments(Async)");
        }

        return getContactAttachmentsCall(xeroTenantId, contactID, _callback);

    }

    /**
     * Retrieves attachments for a specific contact in a Xero organisation
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with 0 to N Attachment </td><td>  -  </td></tr>
     </table>
     */
    public Attachments getContactAttachments(String xeroTenantId, UUID contactID) throws ApiException {
        ApiResponse<Attachments> localVarResp = getContactAttachmentsWithHttpInfo(xeroTenantId, contactID);
        return localVarResp.getData();
    }

    /**
     * Retrieves attachments for a specific contact in a Xero organisation
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with 0 to N Attachment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> getContactAttachmentsWithHttpInfo(String xeroTenantId, UUID contactID) throws ApiException {
        okhttp3.Call localVarCall = getContactAttachmentsValidateBeforeCall(xeroTenantId, contactID, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves attachments for a specific contact in a Xero organisation (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with 0 to N Attachment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactAttachmentsAsync(String xeroTenantId, UUID contactID, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactAttachmentsValidateBeforeCall(xeroTenantId, contactID, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContactByContactNumber
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactNumber This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with a unique Contact </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactByContactNumberCall(String xeroTenantId, String contactNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Contacts/{ContactNumber}"
            .replace("{" + "ContactNumber" + "}", localVarApiClient.escapeString(contactNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactByContactNumberValidateBeforeCall(String xeroTenantId, String contactNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getContactByContactNumber(Async)");
        }

        // verify the required parameter 'contactNumber' is set
        if (contactNumber == null) {
            throw new ApiException("Missing the required parameter 'contactNumber' when calling getContactByContactNumber(Async)");
        }

        return getContactByContactNumberCall(xeroTenantId, contactNumber, _callback);

    }

    /**
     * Retrieves a specific contact by contact number in a Xero organisation
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactNumber This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50). (required)
     * @return Contacts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with a unique Contact </td><td>  -  </td></tr>
     </table>
     */
    public Contacts getContactByContactNumber(String xeroTenantId, String contactNumber) throws ApiException {
        ApiResponse<Contacts> localVarResp = getContactByContactNumberWithHttpInfo(xeroTenantId, contactNumber);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific contact by contact number in a Xero organisation
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactNumber This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50). (required)
     * @return ApiResponse&lt;Contacts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with a unique Contact </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Contacts> getContactByContactNumberWithHttpInfo(String xeroTenantId, String contactNumber) throws ApiException {
        okhttp3.Call localVarCall = getContactByContactNumberValidateBeforeCall(xeroTenantId, contactNumber, null);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific contact by contact number in a Xero organisation (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactNumber This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with a unique Contact </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactByContactNumberAsync(String xeroTenantId, String contactNumber, final ApiCallback<Contacts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactByContactNumberValidateBeforeCall(xeroTenantId, contactNumber, _callback);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContactCISSettings
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type CISSettings for a specific Contact </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactCISSettingsCall(String xeroTenantId, UUID contactID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Contacts/{ContactID}/CISSettings"
            .replace("{" + "ContactID" + "}", localVarApiClient.escapeString(contactID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactCISSettingsValidateBeforeCall(String xeroTenantId, UUID contactID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getContactCISSettings(Async)");
        }

        // verify the required parameter 'contactID' is set
        if (contactID == null) {
            throw new ApiException("Missing the required parameter 'contactID' when calling getContactCISSettings(Async)");
        }

        return getContactCISSettingsCall(xeroTenantId, contactID, _callback);

    }

    /**
     * Retrieves CIS settings for a specific contact in a Xero organisation
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @return CISSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type CISSettings for a specific Contact </td><td>  -  </td></tr>
     </table>
     */
    public CISSettings getContactCISSettings(String xeroTenantId, UUID contactID) throws ApiException {
        ApiResponse<CISSettings> localVarResp = getContactCISSettingsWithHttpInfo(xeroTenantId, contactID);
        return localVarResp.getData();
    }

    /**
     * Retrieves CIS settings for a specific contact in a Xero organisation
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @return ApiResponse&lt;CISSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type CISSettings for a specific Contact </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CISSettings> getContactCISSettingsWithHttpInfo(String xeroTenantId, UUID contactID) throws ApiException {
        okhttp3.Call localVarCall = getContactCISSettingsValidateBeforeCall(xeroTenantId, contactID, null);
        Type localVarReturnType = new TypeToken<CISSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves CIS settings for a specific contact in a Xero organisation (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type CISSettings for a specific Contact </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactCISSettingsAsync(String xeroTenantId, UUID contactID, final ApiCallback<CISSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactCISSettingsValidateBeforeCall(xeroTenantId, contactID, _callback);
        Type localVarReturnType = new TypeToken<CISSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContactGroup
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contact Groups array with a specific Contact Group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactGroupCall(String xeroTenantId, UUID contactGroupID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ContactGroups/{ContactGroupID}"
            .replace("{" + "ContactGroupID" + "}", localVarApiClient.escapeString(contactGroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactGroupValidateBeforeCall(String xeroTenantId, UUID contactGroupID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getContactGroup(Async)");
        }

        // verify the required parameter 'contactGroupID' is set
        if (contactGroupID == null) {
            throw new ApiException("Missing the required parameter 'contactGroupID' when calling getContactGroup(Async)");
        }

        return getContactGroupCall(xeroTenantId, contactGroupID, _callback);

    }

    /**
     * Retrieves a specific contact group by using a unique contact group Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @return ContactGroups
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contact Groups array with a specific Contact Group </td><td>  -  </td></tr>
     </table>
     */
    public ContactGroups getContactGroup(String xeroTenantId, UUID contactGroupID) throws ApiException {
        ApiResponse<ContactGroups> localVarResp = getContactGroupWithHttpInfo(xeroTenantId, contactGroupID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific contact group by using a unique contact group Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @return ApiResponse&lt;ContactGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contact Groups array with a specific Contact Group </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactGroups> getContactGroupWithHttpInfo(String xeroTenantId, UUID contactGroupID) throws ApiException {
        okhttp3.Call localVarCall = getContactGroupValidateBeforeCall(xeroTenantId, contactGroupID, null);
        Type localVarReturnType = new TypeToken<ContactGroups>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific contact group by using a unique contact group Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contact Groups array with a specific Contact Group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactGroupAsync(String xeroTenantId, UUID contactGroupID, final ApiCallback<ContactGroups> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactGroupValidateBeforeCall(xeroTenantId, contactGroupID, _callback);
        Type localVarReturnType = new TypeToken<ContactGroups>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContactGroups
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contact Groups array of Contact Group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactGroupsCall(String xeroTenantId, String where, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ContactGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactGroupsValidateBeforeCall(String xeroTenantId, String where, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getContactGroups(Async)");
        }

        return getContactGroupsCall(xeroTenantId, where, order, _callback);

    }

    /**
     * Retrieves the contact Id and name of all the contacts in a contact group
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @return ContactGroups
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contact Groups array of Contact Group </td><td>  -  </td></tr>
     </table>
     */
    public ContactGroups getContactGroups(String xeroTenantId, String where, String order) throws ApiException {
        ApiResponse<ContactGroups> localVarResp = getContactGroupsWithHttpInfo(xeroTenantId, where, order);
        return localVarResp.getData();
    }

    /**
     * Retrieves the contact Id and name of all the contacts in a contact group
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @return ApiResponse&lt;ContactGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contact Groups array of Contact Group </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactGroups> getContactGroupsWithHttpInfo(String xeroTenantId, String where, String order) throws ApiException {
        okhttp3.Call localVarCall = getContactGroupsValidateBeforeCall(xeroTenantId, where, order, null);
        Type localVarReturnType = new TypeToken<ContactGroups>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the contact Id and name of all the contacts in a contact group (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contact Groups array of Contact Group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactGroupsAsync(String xeroTenantId, String where, String order, final ApiCallback<ContactGroups> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactGroupsValidateBeforeCall(xeroTenantId, where, order, _callback);
        Type localVarReturnType = new TypeToken<ContactGroups>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContactHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactHistoryCall(String xeroTenantId, UUID contactID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Contacts/{ContactID}/History"
            .replace("{" + "ContactID" + "}", localVarApiClient.escapeString(contactID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactHistoryValidateBeforeCall(String xeroTenantId, UUID contactID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getContactHistory(Async)");
        }

        // verify the required parameter 'contactID' is set
        if (contactID == null) {
            throw new ApiException("Missing the required parameter 'contactID' when calling getContactHistory(Async)");
        }

        return getContactHistoryCall(xeroTenantId, contactID, _callback);

    }

    /**
     * Retrieves history records for a specific contact
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords getContactHistory(String xeroTenantId, UUID contactID) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = getContactHistoryWithHttpInfo(xeroTenantId, contactID);
        return localVarResp.getData();
    }

    /**
     * Retrieves history records for a specific contact
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> getContactHistoryWithHttpInfo(String xeroTenantId, UUID contactID) throws ApiException {
        okhttp3.Call localVarCall = getContactHistoryValidateBeforeCall(xeroTenantId, contactID, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves history records for a specific contact (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactHistoryAsync(String xeroTenantId, UUID contactID, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactHistoryValidateBeforeCall(xeroTenantId, contactID, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContacts
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param ids Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)
     * @param page e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)
     * @param includeArchived e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with 0 to N Contact </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactsCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, List<UUID> ids, Integer page, Boolean includeArchived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "IDs", ids));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (includeArchived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeArchived", includeArchived));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactsValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, List<UUID> ids, Integer page, Boolean includeArchived, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getContacts(Async)");
        }

        return getContactsCall(xeroTenantId, ifModifiedSince, where, order, ids, page, includeArchived, _callback);

    }

    /**
     * Retrieves all contacts in a Xero organisation
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param ids Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)
     * @param page e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)
     * @param includeArchived e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)
     * @return Contacts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with 0 to N Contact </td><td>  -  </td></tr>
     </table>
     */
    public Contacts getContacts(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, List<UUID> ids, Integer page, Boolean includeArchived) throws ApiException {
        ApiResponse<Contacts> localVarResp = getContactsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, ids, page, includeArchived);
        return localVarResp.getData();
    }

    /**
     * Retrieves all contacts in a Xero organisation
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param ids Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)
     * @param page e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)
     * @param includeArchived e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)
     * @return ApiResponse&lt;Contacts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with 0 to N Contact </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Contacts> getContactsWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, List<UUID> ids, Integer page, Boolean includeArchived) throws ApiException {
        okhttp3.Call localVarCall = getContactsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, ids, page, includeArchived, null);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves all contacts in a Xero organisation (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param ids Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)
     * @param page e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)
     * @param includeArchived e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with 0 to N Contact </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactsAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, List<UUID> ids, Integer page, Boolean includeArchived, final ApiCallback<Contacts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, ids, page, includeArchived, _callback);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCreditNote
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array with a unique CreditNote </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditNoteCall(String xeroTenantId, UUID creditNoteID, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CreditNotes/{CreditNoteID}"
            .replace("{" + "CreditNoteID" + "}", localVarApiClient.escapeString(creditNoteID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreditNoteValidateBeforeCall(String xeroTenantId, UUID creditNoteID, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getCreditNote(Async)");
        }

        // verify the required parameter 'creditNoteID' is set
        if (creditNoteID == null) {
            throw new ApiException("Missing the required parameter 'creditNoteID' when calling getCreditNote(Async)");
        }

        return getCreditNoteCall(xeroTenantId, creditNoteID, unitdp, _callback);

    }

    /**
     * Retrieves a specific credit note using a unique credit note Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return CreditNotes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array with a unique CreditNote </td><td>  -  </td></tr>
     </table>
     */
    public CreditNotes getCreditNote(String xeroTenantId, UUID creditNoteID, Integer unitdp) throws ApiException {
        ApiResponse<CreditNotes> localVarResp = getCreditNoteWithHttpInfo(xeroTenantId, creditNoteID, unitdp);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific credit note using a unique credit note Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;CreditNotes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array with a unique CreditNote </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditNotes> getCreditNoteWithHttpInfo(String xeroTenantId, UUID creditNoteID, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = getCreditNoteValidateBeforeCall(xeroTenantId, creditNoteID, unitdp, null);
        Type localVarReturnType = new TypeToken<CreditNotes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific credit note using a unique credit note Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array with a unique CreditNote </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditNoteAsync(String xeroTenantId, UUID creditNoteID, Integer unitdp, final ApiCallback<CreditNotes> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreditNoteValidateBeforeCall(xeroTenantId, creditNoteID, unitdp, _callback);
        Type localVarReturnType = new TypeToken<CreditNotes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCreditNoteAsPdf
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of binary data from the Attachment to a Credit Note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditNoteAsPdfCall(String xeroTenantId, UUID creditNoteID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CreditNotes/{CreditNoteID}/pdf"
            .replace("{" + "CreditNoteID" + "}", localVarApiClient.escapeString(creditNoteID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreditNoteAsPdfValidateBeforeCall(String xeroTenantId, UUID creditNoteID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getCreditNoteAsPdf(Async)");
        }

        // verify the required parameter 'creditNoteID' is set
        if (creditNoteID == null) {
            throw new ApiException("Missing the required parameter 'creditNoteID' when calling getCreditNoteAsPdf(Async)");
        }

        return getCreditNoteAsPdfCall(xeroTenantId, creditNoteID, _callback);

    }

    /**
     * Retrieves credit notes as PDF files
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of binary data from the Attachment to a Credit Note </td><td>  -  </td></tr>
     </table>
     */
    public File getCreditNoteAsPdf(String xeroTenantId, UUID creditNoteID) throws ApiException {
        ApiResponse<File> localVarResp = getCreditNoteAsPdfWithHttpInfo(xeroTenantId, creditNoteID);
        return localVarResp.getData();
    }

    /**
     * Retrieves credit notes as PDF files
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of binary data from the Attachment to a Credit Note </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getCreditNoteAsPdfWithHttpInfo(String xeroTenantId, UUID creditNoteID) throws ApiException {
        okhttp3.Call localVarCall = getCreditNoteAsPdfValidateBeforeCall(xeroTenantId, creditNoteID, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves credit notes as PDF files (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of binary data from the Attachment to a Credit Note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditNoteAsPdfAsync(String xeroTenantId, UUID creditNoteID, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreditNoteAsPdfValidateBeforeCall(xeroTenantId, creditNoteID, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCreditNoteAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param fileName Name of the file you are attaching to Credit Note (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Credit Note as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditNoteAttachmentByFileNameCall(String xeroTenantId, UUID creditNoteID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CreditNotes/{CreditNoteID}/Attachments/{FileName}"
            .replace("{" + "CreditNoteID" + "}", localVarApiClient.escapeString(creditNoteID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreditNoteAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID creditNoteID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getCreditNoteAttachmentByFileName(Async)");
        }

        // verify the required parameter 'creditNoteID' is set
        if (creditNoteID == null) {
            throw new ApiException("Missing the required parameter 'creditNoteID' when calling getCreditNoteAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling getCreditNoteAttachmentByFileName(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getCreditNoteAttachmentByFileName(Async)");
        }

        return getCreditNoteAttachmentByFileNameCall(xeroTenantId, creditNoteID, fileName, contentType, _callback);

    }

    /**
     * Retrieves a specific attachment on a specific credit note by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param fileName Name of the file you are attaching to Credit Note (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Credit Note as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getCreditNoteAttachmentByFileName(String xeroTenantId, UUID creditNoteID, String fileName, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getCreditNoteAttachmentByFileNameWithHttpInfo(xeroTenantId, creditNoteID, fileName, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific attachment on a specific credit note by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param fileName Name of the file you are attaching to Credit Note (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Credit Note as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getCreditNoteAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID creditNoteID, String fileName, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getCreditNoteAttachmentByFileNameValidateBeforeCall(xeroTenantId, creditNoteID, fileName, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific attachment on a specific credit note by file name (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param fileName Name of the file you are attaching to Credit Note (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Credit Note as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditNoteAttachmentByFileNameAsync(String xeroTenantId, UUID creditNoteID, String fileName, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreditNoteAttachmentByFileNameValidateBeforeCall(xeroTenantId, creditNoteID, fileName, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCreditNoteAttachmentById
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Credit Note as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditNoteAttachmentByIdCall(String xeroTenantId, UUID creditNoteID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CreditNotes/{CreditNoteID}/Attachments/{AttachmentID}"
            .replace("{" + "CreditNoteID" + "}", localVarApiClient.escapeString(creditNoteID.toString()))
            .replace("{" + "AttachmentID" + "}", localVarApiClient.escapeString(attachmentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreditNoteAttachmentByIdValidateBeforeCall(String xeroTenantId, UUID creditNoteID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getCreditNoteAttachmentById(Async)");
        }

        // verify the required parameter 'creditNoteID' is set
        if (creditNoteID == null) {
            throw new ApiException("Missing the required parameter 'creditNoteID' when calling getCreditNoteAttachmentById(Async)");
        }

        // verify the required parameter 'attachmentID' is set
        if (attachmentID == null) {
            throw new ApiException("Missing the required parameter 'attachmentID' when calling getCreditNoteAttachmentById(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getCreditNoteAttachmentById(Async)");
        }

        return getCreditNoteAttachmentByIdCall(xeroTenantId, creditNoteID, attachmentID, contentType, _callback);

    }

    /**
     * Retrieves a specific attachment from a specific credit note using a unique attachment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Credit Note as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getCreditNoteAttachmentById(String xeroTenantId, UUID creditNoteID, UUID attachmentID, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getCreditNoteAttachmentByIdWithHttpInfo(xeroTenantId, creditNoteID, attachmentID, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific attachment from a specific credit note using a unique attachment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Credit Note as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getCreditNoteAttachmentByIdWithHttpInfo(String xeroTenantId, UUID creditNoteID, UUID attachmentID, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getCreditNoteAttachmentByIdValidateBeforeCall(xeroTenantId, creditNoteID, attachmentID, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific attachment from a specific credit note using a unique attachment Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Credit Note as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditNoteAttachmentByIdAsync(String xeroTenantId, UUID creditNoteID, UUID attachmentID, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreditNoteAttachmentByIdValidateBeforeCall(xeroTenantId, creditNoteID, attachmentID, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCreditNoteAttachments
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with all Attachment for specific Credit Note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditNoteAttachmentsCall(String xeroTenantId, UUID creditNoteID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CreditNotes/{CreditNoteID}/Attachments"
            .replace("{" + "CreditNoteID" + "}", localVarApiClient.escapeString(creditNoteID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreditNoteAttachmentsValidateBeforeCall(String xeroTenantId, UUID creditNoteID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getCreditNoteAttachments(Async)");
        }

        // verify the required parameter 'creditNoteID' is set
        if (creditNoteID == null) {
            throw new ApiException("Missing the required parameter 'creditNoteID' when calling getCreditNoteAttachments(Async)");
        }

        return getCreditNoteAttachmentsCall(xeroTenantId, creditNoteID, _callback);

    }

    /**
     * Retrieves attachments for a specific credit notes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with all Attachment for specific Credit Note </td><td>  -  </td></tr>
     </table>
     */
    public Attachments getCreditNoteAttachments(String xeroTenantId, UUID creditNoteID) throws ApiException {
        ApiResponse<Attachments> localVarResp = getCreditNoteAttachmentsWithHttpInfo(xeroTenantId, creditNoteID);
        return localVarResp.getData();
    }

    /**
     * Retrieves attachments for a specific credit notes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with all Attachment for specific Credit Note </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> getCreditNoteAttachmentsWithHttpInfo(String xeroTenantId, UUID creditNoteID) throws ApiException {
        okhttp3.Call localVarCall = getCreditNoteAttachmentsValidateBeforeCall(xeroTenantId, creditNoteID, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves attachments for a specific credit notes (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with all Attachment for specific Credit Note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditNoteAttachmentsAsync(String xeroTenantId, UUID creditNoteID, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreditNoteAttachmentsValidateBeforeCall(xeroTenantId, creditNoteID, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCreditNoteHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditNoteHistoryCall(String xeroTenantId, UUID creditNoteID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CreditNotes/{CreditNoteID}/History"
            .replace("{" + "CreditNoteID" + "}", localVarApiClient.escapeString(creditNoteID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreditNoteHistoryValidateBeforeCall(String xeroTenantId, UUID creditNoteID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getCreditNoteHistory(Async)");
        }

        // verify the required parameter 'creditNoteID' is set
        if (creditNoteID == null) {
            throw new ApiException("Missing the required parameter 'creditNoteID' when calling getCreditNoteHistory(Async)");
        }

        return getCreditNoteHistoryCall(xeroTenantId, creditNoteID, _callback);

    }

    /**
     * Retrieves history records of a specific credit note
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords getCreditNoteHistory(String xeroTenantId, UUID creditNoteID) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = getCreditNoteHistoryWithHttpInfo(xeroTenantId, creditNoteID);
        return localVarResp.getData();
    }

    /**
     * Retrieves history records of a specific credit note
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> getCreditNoteHistoryWithHttpInfo(String xeroTenantId, UUID creditNoteID) throws ApiException {
        okhttp3.Call localVarCall = getCreditNoteHistoryValidateBeforeCall(xeroTenantId, creditNoteID, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves history records of a specific credit note (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditNoteHistoryAsync(String xeroTenantId, UUID creditNoteID, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreditNoteHistoryValidateBeforeCall(xeroTenantId, creditNoteID, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCreditNotes
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array of CreditNote </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditNotesCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CreditNotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreditNotesValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getCreditNotes(Async)");
        }

        return getCreditNotesCall(xeroTenantId, ifModifiedSince, where, order, page, unitdp, _callback);

    }

    /**
     * Retrieves any credit notes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return CreditNotes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array of CreditNote </td><td>  -  </td></tr>
     </table>
     */
    public CreditNotes getCreditNotes(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp) throws ApiException {
        ApiResponse<CreditNotes> localVarResp = getCreditNotesWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page, unitdp);
        return localVarResp.getData();
    }

    /**
     * Retrieves any credit notes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;CreditNotes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array of CreditNote </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditNotes> getCreditNotesWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = getCreditNotesValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, unitdp, null);
        Type localVarReturnType = new TypeToken<CreditNotes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves any credit notes (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array of CreditNote </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditNotesAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp, final ApiCallback<CreditNotes> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreditNotesValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, unitdp, _callback);
        Type localVarReturnType = new TypeToken<CreditNotes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrencies
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Currencies array with all Currencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrenciesCall(String xeroTenantId, String where, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrenciesValidateBeforeCall(String xeroTenantId, String where, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getCurrencies(Async)");
        }

        return getCurrenciesCall(xeroTenantId, where, order, _callback);

    }

    /**
     * Retrieves currencies for your Xero organisation
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @return Currencies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Currencies array with all Currencies </td><td>  -  </td></tr>
     </table>
     */
    public Currencies getCurrencies(String xeroTenantId, String where, String order) throws ApiException {
        ApiResponse<Currencies> localVarResp = getCurrenciesWithHttpInfo(xeroTenantId, where, order);
        return localVarResp.getData();
    }

    /**
     * Retrieves currencies for your Xero organisation
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @return ApiResponse&lt;Currencies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Currencies array with all Currencies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Currencies> getCurrenciesWithHttpInfo(String xeroTenantId, String where, String order) throws ApiException {
        okhttp3.Call localVarCall = getCurrenciesValidateBeforeCall(xeroTenantId, where, order, null);
        Type localVarReturnType = new TypeToken<Currencies>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves currencies for your Xero organisation (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Currencies array with all Currencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrenciesAsync(String xeroTenantId, String where, String order, final ApiCallback<Currencies> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrenciesValidateBeforeCall(xeroTenantId, where, order, _callback);
        Type localVarReturnType = new TypeToken<Currencies>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmployee
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employeeID Unique identifier for a Employee (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Employees array with specified Employee </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmployeeCall(String xeroTenantId, UUID employeeID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employees/{EmployeeID}"
            .replace("{" + "EmployeeID" + "}", localVarApiClient.escapeString(employeeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeValidateBeforeCall(String xeroTenantId, UUID employeeID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getEmployee(Async)");
        }

        // verify the required parameter 'employeeID' is set
        if (employeeID == null) {
            throw new ApiException("Missing the required parameter 'employeeID' when calling getEmployee(Async)");
        }

        return getEmployeeCall(xeroTenantId, employeeID, _callback);

    }

    /**
     * Retrieves a specific employee used in Xero payrun using a unique employee Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employeeID Unique identifier for a Employee (required)
     * @return Employees
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Employees array with specified Employee </td><td>  -  </td></tr>
     </table>
     */
    public Employees getEmployee(String xeroTenantId, UUID employeeID) throws ApiException {
        ApiResponse<Employees> localVarResp = getEmployeeWithHttpInfo(xeroTenantId, employeeID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific employee used in Xero payrun using a unique employee Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employeeID Unique identifier for a Employee (required)
     * @return ApiResponse&lt;Employees&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Employees array with specified Employee </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Employees> getEmployeeWithHttpInfo(String xeroTenantId, UUID employeeID) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeValidateBeforeCall(xeroTenantId, employeeID, null);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific employee used in Xero payrun using a unique employee Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employeeID Unique identifier for a Employee (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Employees array with specified Employee </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmployeeAsync(String xeroTenantId, UUID employeeID, final ApiCallback<Employees> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeValidateBeforeCall(xeroTenantId, employeeID, _callback);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmployees
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Employees array with all Employee </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmployeesCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeesValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getEmployees(Async)");
        }

        return getEmployeesCall(xeroTenantId, ifModifiedSince, where, order, _callback);

    }

    /**
     * Retrieves employees used in Xero payrun
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @return Employees
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Employees array with all Employee </td><td>  -  </td></tr>
     </table>
     */
    public Employees getEmployees(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order) throws ApiException {
        ApiResponse<Employees> localVarResp = getEmployeesWithHttpInfo(xeroTenantId, ifModifiedSince, where, order);
        return localVarResp.getData();
    }

    /**
     * Retrieves employees used in Xero payrun
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @return ApiResponse&lt;Employees&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Employees array with all Employee </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Employees> getEmployeesWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order) throws ApiException {
        okhttp3.Call localVarCall = getEmployeesValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, null);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves employees used in Xero payrun (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Employees array with all Employee </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmployeesAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, final ApiCallback<Employees> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeesValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, _callback);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExpenseClaim
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaimID Unique identifier for a ExpenseClaim (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ExpenseClaims array with specified ExpenseClaim </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExpenseClaimCall(String xeroTenantId, UUID expenseClaimID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ExpenseClaims/{ExpenseClaimID}"
            .replace("{" + "ExpenseClaimID" + "}", localVarApiClient.escapeString(expenseClaimID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExpenseClaimValidateBeforeCall(String xeroTenantId, UUID expenseClaimID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getExpenseClaim(Async)");
        }

        // verify the required parameter 'expenseClaimID' is set
        if (expenseClaimID == null) {
            throw new ApiException("Missing the required parameter 'expenseClaimID' when calling getExpenseClaim(Async)");
        }

        return getExpenseClaimCall(xeroTenantId, expenseClaimID, _callback);

    }

    /**
     * Retrieves a specific expense claim using a unique expense claim Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaimID Unique identifier for a ExpenseClaim (required)
     * @return ExpenseClaims
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ExpenseClaims array with specified ExpenseClaim </td><td>  -  </td></tr>
     </table>
     */
    public ExpenseClaims getExpenseClaim(String xeroTenantId, UUID expenseClaimID) throws ApiException {
        ApiResponse<ExpenseClaims> localVarResp = getExpenseClaimWithHttpInfo(xeroTenantId, expenseClaimID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific expense claim using a unique expense claim Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaimID Unique identifier for a ExpenseClaim (required)
     * @return ApiResponse&lt;ExpenseClaims&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ExpenseClaims array with specified ExpenseClaim </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpenseClaims> getExpenseClaimWithHttpInfo(String xeroTenantId, UUID expenseClaimID) throws ApiException {
        okhttp3.Call localVarCall = getExpenseClaimValidateBeforeCall(xeroTenantId, expenseClaimID, null);
        Type localVarReturnType = new TypeToken<ExpenseClaims>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific expense claim using a unique expense claim Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaimID Unique identifier for a ExpenseClaim (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ExpenseClaims array with specified ExpenseClaim </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExpenseClaimAsync(String xeroTenantId, UUID expenseClaimID, final ApiCallback<ExpenseClaims> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExpenseClaimValidateBeforeCall(xeroTenantId, expenseClaimID, _callback);
        Type localVarReturnType = new TypeToken<ExpenseClaims>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExpenseClaimHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaimID Unique identifier for a ExpenseClaim (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExpenseClaimHistoryCall(String xeroTenantId, UUID expenseClaimID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ExpenseClaims/{ExpenseClaimID}/History"
            .replace("{" + "ExpenseClaimID" + "}", localVarApiClient.escapeString(expenseClaimID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExpenseClaimHistoryValidateBeforeCall(String xeroTenantId, UUID expenseClaimID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getExpenseClaimHistory(Async)");
        }

        // verify the required parameter 'expenseClaimID' is set
        if (expenseClaimID == null) {
            throw new ApiException("Missing the required parameter 'expenseClaimID' when calling getExpenseClaimHistory(Async)");
        }

        return getExpenseClaimHistoryCall(xeroTenantId, expenseClaimID, _callback);

    }

    /**
     * Retrieves history records of a specific expense claim
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaimID Unique identifier for a ExpenseClaim (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords getExpenseClaimHistory(String xeroTenantId, UUID expenseClaimID) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = getExpenseClaimHistoryWithHttpInfo(xeroTenantId, expenseClaimID);
        return localVarResp.getData();
    }

    /**
     * Retrieves history records of a specific expense claim
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaimID Unique identifier for a ExpenseClaim (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> getExpenseClaimHistoryWithHttpInfo(String xeroTenantId, UUID expenseClaimID) throws ApiException {
        okhttp3.Call localVarCall = getExpenseClaimHistoryValidateBeforeCall(xeroTenantId, expenseClaimID, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves history records of a specific expense claim (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaimID Unique identifier for a ExpenseClaim (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExpenseClaimHistoryAsync(String xeroTenantId, UUID expenseClaimID, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExpenseClaimHistoryValidateBeforeCall(xeroTenantId, expenseClaimID, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExpenseClaims
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ExpenseClaims array with all ExpenseClaims </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExpenseClaimsCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ExpenseClaims";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExpenseClaimsValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getExpenseClaims(Async)");
        }

        return getExpenseClaimsCall(xeroTenantId, ifModifiedSince, where, order, _callback);

    }

    /**
     * Retrieves expense claims
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @return ExpenseClaims
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ExpenseClaims array with all ExpenseClaims </td><td>  -  </td></tr>
     </table>
     */
    public ExpenseClaims getExpenseClaims(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order) throws ApiException {
        ApiResponse<ExpenseClaims> localVarResp = getExpenseClaimsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order);
        return localVarResp.getData();
    }

    /**
     * Retrieves expense claims
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @return ApiResponse&lt;ExpenseClaims&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ExpenseClaims array with all ExpenseClaims </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpenseClaims> getExpenseClaimsWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order) throws ApiException {
        okhttp3.Call localVarCall = getExpenseClaimsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, null);
        Type localVarReturnType = new TypeToken<ExpenseClaims>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves expense claims (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ExpenseClaims array with all ExpenseClaims </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExpenseClaimsAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, final ApiCallback<ExpenseClaims> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExpenseClaimsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, _callback);
        Type localVarReturnType = new TypeToken<ExpenseClaims>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvoice
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with specified Invoices </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceCall(String xeroTenantId, UUID invoiceID, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Invoices/{InvoiceID}"
            .replace("{" + "InvoiceID" + "}", localVarApiClient.escapeString(invoiceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoiceValidateBeforeCall(String xeroTenantId, UUID invoiceID, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getInvoice(Async)");
        }

        // verify the required parameter 'invoiceID' is set
        if (invoiceID == null) {
            throw new ApiException("Missing the required parameter 'invoiceID' when calling getInvoice(Async)");
        }

        return getInvoiceCall(xeroTenantId, invoiceID, unitdp, _callback);

    }

    /**
     * Retrieves a specific sales invoice or purchase bill using a unique invoice Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return Invoices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with specified Invoices </td><td>  -  </td></tr>
     </table>
     */
    public Invoices getInvoice(String xeroTenantId, UUID invoiceID, Integer unitdp) throws ApiException {
        ApiResponse<Invoices> localVarResp = getInvoiceWithHttpInfo(xeroTenantId, invoiceID, unitdp);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific sales invoice or purchase bill using a unique invoice Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;Invoices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with specified Invoices </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Invoices> getInvoiceWithHttpInfo(String xeroTenantId, UUID invoiceID, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = getInvoiceValidateBeforeCall(xeroTenantId, invoiceID, unitdp, null);
        Type localVarReturnType = new TypeToken<Invoices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific sales invoice or purchase bill using a unique invoice Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with specified Invoices </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceAsync(String xeroTenantId, UUID invoiceID, Integer unitdp, final ApiCallback<Invoices> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoiceValidateBeforeCall(xeroTenantId, invoiceID, unitdp, _callback);
        Type localVarReturnType = new TypeToken<Invoices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvoiceAsPdf
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of byte array pdf version of specified Invoices </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceAsPdfCall(String xeroTenantId, UUID invoiceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Invoices/{InvoiceID}/pdf"
            .replace("{" + "InvoiceID" + "}", localVarApiClient.escapeString(invoiceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoiceAsPdfValidateBeforeCall(String xeroTenantId, UUID invoiceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getInvoiceAsPdf(Async)");
        }

        // verify the required parameter 'invoiceID' is set
        if (invoiceID == null) {
            throw new ApiException("Missing the required parameter 'invoiceID' when calling getInvoiceAsPdf(Async)");
        }

        return getInvoiceAsPdfCall(xeroTenantId, invoiceID, _callback);

    }

    /**
     * Retrieves invoices or purchase bills as PDF files
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of byte array pdf version of specified Invoices </td><td>  -  </td></tr>
     </table>
     */
    public File getInvoiceAsPdf(String xeroTenantId, UUID invoiceID) throws ApiException {
        ApiResponse<File> localVarResp = getInvoiceAsPdfWithHttpInfo(xeroTenantId, invoiceID);
        return localVarResp.getData();
    }

    /**
     * Retrieves invoices or purchase bills as PDF files
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of byte array pdf version of specified Invoices </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getInvoiceAsPdfWithHttpInfo(String xeroTenantId, UUID invoiceID) throws ApiException {
        okhttp3.Call localVarCall = getInvoiceAsPdfValidateBeforeCall(xeroTenantId, invoiceID, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves invoices or purchase bills as PDF files (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of byte array pdf version of specified Invoices </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceAsPdfAsync(String xeroTenantId, UUID invoiceID, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoiceAsPdfValidateBeforeCall(xeroTenantId, invoiceID, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvoiceAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param fileName Name of the file you are attaching (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Invoice as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceAttachmentByFileNameCall(String xeroTenantId, UUID invoiceID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Invoices/{InvoiceID}/Attachments/{FileName}"
            .replace("{" + "InvoiceID" + "}", localVarApiClient.escapeString(invoiceID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoiceAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID invoiceID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getInvoiceAttachmentByFileName(Async)");
        }

        // verify the required parameter 'invoiceID' is set
        if (invoiceID == null) {
            throw new ApiException("Missing the required parameter 'invoiceID' when calling getInvoiceAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling getInvoiceAttachmentByFileName(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getInvoiceAttachmentByFileName(Async)");
        }

        return getInvoiceAttachmentByFileNameCall(xeroTenantId, invoiceID, fileName, contentType, _callback);

    }

    /**
     * Retrieves an attachment from a specific invoice or purchase bill by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param fileName Name of the file you are attaching (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Invoice as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getInvoiceAttachmentByFileName(String xeroTenantId, UUID invoiceID, String fileName, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getInvoiceAttachmentByFileNameWithHttpInfo(xeroTenantId, invoiceID, fileName, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves an attachment from a specific invoice or purchase bill by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param fileName Name of the file you are attaching (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Invoice as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getInvoiceAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID invoiceID, String fileName, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getInvoiceAttachmentByFileNameValidateBeforeCall(xeroTenantId, invoiceID, fileName, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves an attachment from a specific invoice or purchase bill by filename (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param fileName Name of the file you are attaching (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Invoice as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceAttachmentByFileNameAsync(String xeroTenantId, UUID invoiceID, String fileName, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoiceAttachmentByFileNameValidateBeforeCall(xeroTenantId, invoiceID, fileName, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvoiceAttachmentById
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param attachmentID Unique identifier for an Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Invoice as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceAttachmentByIdCall(String xeroTenantId, UUID invoiceID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Invoices/{InvoiceID}/Attachments/{AttachmentID}"
            .replace("{" + "InvoiceID" + "}", localVarApiClient.escapeString(invoiceID.toString()))
            .replace("{" + "AttachmentID" + "}", localVarApiClient.escapeString(attachmentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoiceAttachmentByIdValidateBeforeCall(String xeroTenantId, UUID invoiceID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getInvoiceAttachmentById(Async)");
        }

        // verify the required parameter 'invoiceID' is set
        if (invoiceID == null) {
            throw new ApiException("Missing the required parameter 'invoiceID' when calling getInvoiceAttachmentById(Async)");
        }

        // verify the required parameter 'attachmentID' is set
        if (attachmentID == null) {
            throw new ApiException("Missing the required parameter 'attachmentID' when calling getInvoiceAttachmentById(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getInvoiceAttachmentById(Async)");
        }

        return getInvoiceAttachmentByIdCall(xeroTenantId, invoiceID, attachmentID, contentType, _callback);

    }

    /**
     * Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param attachmentID Unique identifier for an Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Invoice as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getInvoiceAttachmentById(String xeroTenantId, UUID invoiceID, UUID attachmentID, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getInvoiceAttachmentByIdWithHttpInfo(xeroTenantId, invoiceID, attachmentID, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param attachmentID Unique identifier for an Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Invoice as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getInvoiceAttachmentByIdWithHttpInfo(String xeroTenantId, UUID invoiceID, UUID attachmentID, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getInvoiceAttachmentByIdValidateBeforeCall(xeroTenantId, invoiceID, attachmentID, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param attachmentID Unique identifier for an Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Invoice as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceAttachmentByIdAsync(String xeroTenantId, UUID invoiceID, UUID attachmentID, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoiceAttachmentByIdValidateBeforeCall(xeroTenantId, invoiceID, attachmentID, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvoiceAttachments
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachments for specified Invoices </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceAttachmentsCall(String xeroTenantId, UUID invoiceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Invoices/{InvoiceID}/Attachments"
            .replace("{" + "InvoiceID" + "}", localVarApiClient.escapeString(invoiceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoiceAttachmentsValidateBeforeCall(String xeroTenantId, UUID invoiceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getInvoiceAttachments(Async)");
        }

        // verify the required parameter 'invoiceID' is set
        if (invoiceID == null) {
            throw new ApiException("Missing the required parameter 'invoiceID' when calling getInvoiceAttachments(Async)");
        }

        return getInvoiceAttachmentsCall(xeroTenantId, invoiceID, _callback);

    }

    /**
     * Retrieves attachments for a specific invoice or purchase bill
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachments for specified Invoices </td><td>  -  </td></tr>
     </table>
     */
    public Attachments getInvoiceAttachments(String xeroTenantId, UUID invoiceID) throws ApiException {
        ApiResponse<Attachments> localVarResp = getInvoiceAttachmentsWithHttpInfo(xeroTenantId, invoiceID);
        return localVarResp.getData();
    }

    /**
     * Retrieves attachments for a specific invoice or purchase bill
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachments for specified Invoices </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> getInvoiceAttachmentsWithHttpInfo(String xeroTenantId, UUID invoiceID) throws ApiException {
        okhttp3.Call localVarCall = getInvoiceAttachmentsValidateBeforeCall(xeroTenantId, invoiceID, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves attachments for a specific invoice or purchase bill (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachments for specified Invoices </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceAttachmentsAsync(String xeroTenantId, UUID invoiceID, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoiceAttachmentsValidateBeforeCall(xeroTenantId, invoiceID, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvoiceHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceHistoryCall(String xeroTenantId, UUID invoiceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Invoices/{InvoiceID}/History"
            .replace("{" + "InvoiceID" + "}", localVarApiClient.escapeString(invoiceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoiceHistoryValidateBeforeCall(String xeroTenantId, UUID invoiceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getInvoiceHistory(Async)");
        }

        // verify the required parameter 'invoiceID' is set
        if (invoiceID == null) {
            throw new ApiException("Missing the required parameter 'invoiceID' when calling getInvoiceHistory(Async)");
        }

        return getInvoiceHistoryCall(xeroTenantId, invoiceID, _callback);

    }

    /**
     * Retrieves history records for a specific invoice
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords getInvoiceHistory(String xeroTenantId, UUID invoiceID) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = getInvoiceHistoryWithHttpInfo(xeroTenantId, invoiceID);
        return localVarResp.getData();
    }

    /**
     * Retrieves history records for a specific invoice
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> getInvoiceHistoryWithHttpInfo(String xeroTenantId, UUID invoiceID) throws ApiException {
        okhttp3.Call localVarCall = getInvoiceHistoryValidateBeforeCall(xeroTenantId, invoiceID, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves history records for a specific invoice (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceHistoryAsync(String xeroTenantId, UUID invoiceID, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoiceHistoryValidateBeforeCall(xeroTenantId, invoiceID, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvoiceReminders
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Invoice Reminders </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceRemindersCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/InvoiceReminders/Settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoiceRemindersValidateBeforeCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getInvoiceReminders(Async)");
        }

        return getInvoiceRemindersCall(xeroTenantId, _callback);

    }

    /**
     * Retrieves invoice reminder settings
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return InvoiceReminders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Invoice Reminders </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceReminders getInvoiceReminders(String xeroTenantId) throws ApiException {
        ApiResponse<InvoiceReminders> localVarResp = getInvoiceRemindersWithHttpInfo(xeroTenantId);
        return localVarResp.getData();
    }

    /**
     * Retrieves invoice reminder settings
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return ApiResponse&lt;InvoiceReminders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Invoice Reminders </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceReminders> getInvoiceRemindersWithHttpInfo(String xeroTenantId) throws ApiException {
        okhttp3.Call localVarCall = getInvoiceRemindersValidateBeforeCall(xeroTenantId, null);
        Type localVarReturnType = new TypeToken<InvoiceReminders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves invoice reminder settings (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Invoice Reminders </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceRemindersAsync(String xeroTenantId, final ApiCallback<InvoiceReminders> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoiceRemindersValidateBeforeCall(xeroTenantId, _callback);
        Type localVarReturnType = new TypeToken<InvoiceReminders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvoices
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param ids Filter by a comma-separated list of InvoicesIDs. (optional)
     * @param invoiceNumbers Filter by a comma-separated list of InvoiceNumbers. (optional)
     * @param contactIDs Filter by a comma-separated list of ContactIDs. (optional)
     * @param statuses Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)
     * @param includeArchived e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)
     * @param createdByMyApp When set to true you&#39;ll only retrieve Invoices created by your app (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with all Invoices </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoicesCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, List<UUID> ids, List<String> invoiceNumbers, List<UUID> contactIDs, List<String> statuses, Integer page, Boolean includeArchived, Boolean createdByMyApp, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "IDs", ids));
        }

        if (invoiceNumbers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "InvoiceNumbers", invoiceNumbers));
        }

        if (contactIDs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ContactIDs", contactIDs));
        }

        if (statuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "Statuses", statuses));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (includeArchived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeArchived", includeArchived));
        }

        if (createdByMyApp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdByMyApp", createdByMyApp));
        }

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoicesValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, List<UUID> ids, List<String> invoiceNumbers, List<UUID> contactIDs, List<String> statuses, Integer page, Boolean includeArchived, Boolean createdByMyApp, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getInvoices(Async)");
        }

        return getInvoicesCall(xeroTenantId, ifModifiedSince, where, order, ids, invoiceNumbers, contactIDs, statuses, page, includeArchived, createdByMyApp, unitdp, _callback);

    }

    /**
     * Retrieves sales invoices or purchase bills
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param ids Filter by a comma-separated list of InvoicesIDs. (optional)
     * @param invoiceNumbers Filter by a comma-separated list of InvoiceNumbers. (optional)
     * @param contactIDs Filter by a comma-separated list of ContactIDs. (optional)
     * @param statuses Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)
     * @param includeArchived e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)
     * @param createdByMyApp When set to true you&#39;ll only retrieve Invoices created by your app (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return Invoices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with all Invoices </td><td>  -  </td></tr>
     </table>
     */
    public Invoices getInvoices(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, List<UUID> ids, List<String> invoiceNumbers, List<UUID> contactIDs, List<String> statuses, Integer page, Boolean includeArchived, Boolean createdByMyApp, Integer unitdp) throws ApiException {
        ApiResponse<Invoices> localVarResp = getInvoicesWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, ids, invoiceNumbers, contactIDs, statuses, page, includeArchived, createdByMyApp, unitdp);
        return localVarResp.getData();
    }

    /**
     * Retrieves sales invoices or purchase bills
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param ids Filter by a comma-separated list of InvoicesIDs. (optional)
     * @param invoiceNumbers Filter by a comma-separated list of InvoiceNumbers. (optional)
     * @param contactIDs Filter by a comma-separated list of ContactIDs. (optional)
     * @param statuses Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)
     * @param includeArchived e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)
     * @param createdByMyApp When set to true you&#39;ll only retrieve Invoices created by your app (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;Invoices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with all Invoices </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Invoices> getInvoicesWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, List<UUID> ids, List<String> invoiceNumbers, List<UUID> contactIDs, List<String> statuses, Integer page, Boolean includeArchived, Boolean createdByMyApp, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = getInvoicesValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, ids, invoiceNumbers, contactIDs, statuses, page, includeArchived, createdByMyApp, unitdp, null);
        Type localVarReturnType = new TypeToken<Invoices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves sales invoices or purchase bills (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param ids Filter by a comma-separated list of InvoicesIDs. (optional)
     * @param invoiceNumbers Filter by a comma-separated list of InvoiceNumbers. (optional)
     * @param contactIDs Filter by a comma-separated list of ContactIDs. (optional)
     * @param statuses Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)
     * @param includeArchived e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)
     * @param createdByMyApp When set to true you&#39;ll only retrieve Invoices created by your app (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with all Invoices </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoicesAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, List<UUID> ids, List<String> invoiceNumbers, List<UUID> contactIDs, List<String> statuses, Integer page, Boolean includeArchived, Boolean createdByMyApp, Integer unitdp, final ApiCallback<Invoices> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoicesValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, ids, invoiceNumbers, contactIDs, statuses, page, includeArchived, createdByMyApp, unitdp, _callback);
        Type localVarReturnType = new TypeToken<Invoices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItem
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with specified Item </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemCall(String xeroTenantId, UUID itemID, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Items/{ItemID}"
            .replace("{" + "ItemID" + "}", localVarApiClient.escapeString(itemID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemValidateBeforeCall(String xeroTenantId, UUID itemID, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getItem(Async)");
        }

        // verify the required parameter 'itemID' is set
        if (itemID == null) {
            throw new ApiException("Missing the required parameter 'itemID' when calling getItem(Async)");
        }

        return getItemCall(xeroTenantId, itemID, unitdp, _callback);

    }

    /**
     * Retrieves a specific item using a unique item Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return Items
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with specified Item </td><td>  -  </td></tr>
     </table>
     */
    public Items getItem(String xeroTenantId, UUID itemID, Integer unitdp) throws ApiException {
        ApiResponse<Items> localVarResp = getItemWithHttpInfo(xeroTenantId, itemID, unitdp);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific item using a unique item Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;Items&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with specified Item </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Items> getItemWithHttpInfo(String xeroTenantId, UUID itemID, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = getItemValidateBeforeCall(xeroTenantId, itemID, unitdp, null);
        Type localVarReturnType = new TypeToken<Items>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific item using a unique item Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with specified Item </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemAsync(String xeroTenantId, UUID itemID, Integer unitdp, final ApiCallback<Items> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemValidateBeforeCall(xeroTenantId, itemID, unitdp, _callback);
        Type localVarReturnType = new TypeToken<Items>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemHistoryCall(String xeroTenantId, UUID itemID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Items/{ItemID}/History"
            .replace("{" + "ItemID" + "}", localVarApiClient.escapeString(itemID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemHistoryValidateBeforeCall(String xeroTenantId, UUID itemID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getItemHistory(Async)");
        }

        // verify the required parameter 'itemID' is set
        if (itemID == null) {
            throw new ApiException("Missing the required parameter 'itemID' when calling getItemHistory(Async)");
        }

        return getItemHistoryCall(xeroTenantId, itemID, _callback);

    }

    /**
     * Retrieves history for a specific item
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords getItemHistory(String xeroTenantId, UUID itemID) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = getItemHistoryWithHttpInfo(xeroTenantId, itemID);
        return localVarResp.getData();
    }

    /**
     * Retrieves history for a specific item
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> getItemHistoryWithHttpInfo(String xeroTenantId, UUID itemID) throws ApiException {
        okhttp3.Call localVarCall = getItemHistoryValidateBeforeCall(xeroTenantId, itemID, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves history for a specific item (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemHistoryAsync(String xeroTenantId, UUID itemID, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemHistoryValidateBeforeCall(xeroTenantId, itemID, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItems
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with all Item </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemsCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemsValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getItems(Async)");
        }

        return getItemsCall(xeroTenantId, ifModifiedSince, where, order, unitdp, _callback);

    }

    /**
     * Retrieves items
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return Items
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with all Item </td><td>  -  </td></tr>
     </table>
     */
    public Items getItems(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer unitdp) throws ApiException {
        ApiResponse<Items> localVarResp = getItemsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, unitdp);
        return localVarResp.getData();
    }

    /**
     * Retrieves items
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;Items&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with all Item </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Items> getItemsWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = getItemsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, unitdp, null);
        Type localVarReturnType = new TypeToken<Items>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves items (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with all Item </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemsAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer unitdp, final ApiCallback<Items> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, unitdp, _callback);
        Type localVarReturnType = new TypeToken<Items>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJournal
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param journalID Unique identifier for a Journal (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Journals array with specified Journal </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJournalCall(String xeroTenantId, UUID journalID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Journals/{JournalID}"
            .replace("{" + "JournalID" + "}", localVarApiClient.escapeString(journalID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJournalValidateBeforeCall(String xeroTenantId, UUID journalID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getJournal(Async)");
        }

        // verify the required parameter 'journalID' is set
        if (journalID == null) {
            throw new ApiException("Missing the required parameter 'journalID' when calling getJournal(Async)");
        }

        return getJournalCall(xeroTenantId, journalID, _callback);

    }

    /**
     * Retrieves a specific journal using a unique journal Id.
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param journalID Unique identifier for a Journal (required)
     * @return Journals
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Journals array with specified Journal </td><td>  -  </td></tr>
     </table>
     */
    public Journals getJournal(String xeroTenantId, UUID journalID) throws ApiException {
        ApiResponse<Journals> localVarResp = getJournalWithHttpInfo(xeroTenantId, journalID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific journal using a unique journal Id.
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param journalID Unique identifier for a Journal (required)
     * @return ApiResponse&lt;Journals&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Journals array with specified Journal </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Journals> getJournalWithHttpInfo(String xeroTenantId, UUID journalID) throws ApiException {
        okhttp3.Call localVarCall = getJournalValidateBeforeCall(xeroTenantId, journalID, null);
        Type localVarReturnType = new TypeToken<Journals>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific journal using a unique journal Id. (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param journalID Unique identifier for a Journal (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Journals array with specified Journal </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJournalAsync(String xeroTenantId, UUID journalID, final ApiCallback<Journals> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJournalValidateBeforeCall(xeroTenantId, journalID, _callback);
        Type localVarReturnType = new TypeToken<Journals>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJournals
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param offset Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)
     * @param paymentsOnly Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Journals array with all Journals </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJournalsCall(String xeroTenantId, OffsetDateTime ifModifiedSince, Integer offset, Boolean paymentsOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Journals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (paymentsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentsOnly", paymentsOnly));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJournalsValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, Integer offset, Boolean paymentsOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getJournals(Async)");
        }

        return getJournalsCall(xeroTenantId, ifModifiedSince, offset, paymentsOnly, _callback);

    }

    /**
     * Retrieves journals
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param offset Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)
     * @param paymentsOnly Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)
     * @return Journals
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Journals array with all Journals </td><td>  -  </td></tr>
     </table>
     */
    public Journals getJournals(String xeroTenantId, OffsetDateTime ifModifiedSince, Integer offset, Boolean paymentsOnly) throws ApiException {
        ApiResponse<Journals> localVarResp = getJournalsWithHttpInfo(xeroTenantId, ifModifiedSince, offset, paymentsOnly);
        return localVarResp.getData();
    }

    /**
     * Retrieves journals
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param offset Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)
     * @param paymentsOnly Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)
     * @return ApiResponse&lt;Journals&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Journals array with all Journals </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Journals> getJournalsWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, Integer offset, Boolean paymentsOnly) throws ApiException {
        okhttp3.Call localVarCall = getJournalsValidateBeforeCall(xeroTenantId, ifModifiedSince, offset, paymentsOnly, null);
        Type localVarReturnType = new TypeToken<Journals>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves journals (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param offset Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)
     * @param paymentsOnly Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Journals array with all Journals </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJournalsAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, Integer offset, Boolean paymentsOnly, final ApiCallback<Journals> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJournalsValidateBeforeCall(xeroTenantId, ifModifiedSince, offset, paymentsOnly, _callback);
        Type localVarReturnType = new TypeToken<Journals>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLinkedTransaction
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param linkedTransactionID Unique identifier for a LinkedTransaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type LinkedTransactions array with a specified LinkedTransaction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLinkedTransactionCall(String xeroTenantId, UUID linkedTransactionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/LinkedTransactions/{LinkedTransactionID}"
            .replace("{" + "LinkedTransactionID" + "}", localVarApiClient.escapeString(linkedTransactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLinkedTransactionValidateBeforeCall(String xeroTenantId, UUID linkedTransactionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getLinkedTransaction(Async)");
        }

        // verify the required parameter 'linkedTransactionID' is set
        if (linkedTransactionID == null) {
            throw new ApiException("Missing the required parameter 'linkedTransactionID' when calling getLinkedTransaction(Async)");
        }

        return getLinkedTransactionCall(xeroTenantId, linkedTransactionID, _callback);

    }

    /**
     * Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param linkedTransactionID Unique identifier for a LinkedTransaction (required)
     * @return LinkedTransactions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type LinkedTransactions array with a specified LinkedTransaction </td><td>  -  </td></tr>
     </table>
     */
    public LinkedTransactions getLinkedTransaction(String xeroTenantId, UUID linkedTransactionID) throws ApiException {
        ApiResponse<LinkedTransactions> localVarResp = getLinkedTransactionWithHttpInfo(xeroTenantId, linkedTransactionID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param linkedTransactionID Unique identifier for a LinkedTransaction (required)
     * @return ApiResponse&lt;LinkedTransactions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type LinkedTransactions array with a specified LinkedTransaction </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkedTransactions> getLinkedTransactionWithHttpInfo(String xeroTenantId, UUID linkedTransactionID) throws ApiException {
        okhttp3.Call localVarCall = getLinkedTransactionValidateBeforeCall(xeroTenantId, linkedTransactionID, null);
        Type localVarReturnType = new TypeToken<LinkedTransactions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param linkedTransactionID Unique identifier for a LinkedTransaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type LinkedTransactions array with a specified LinkedTransaction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLinkedTransactionAsync(String xeroTenantId, UUID linkedTransactionID, final ApiCallback<LinkedTransactions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLinkedTransactionValidateBeforeCall(xeroTenantId, linkedTransactionID, _callback);
        Type localVarReturnType = new TypeToken<LinkedTransactions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLinkedTransactions
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param page Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)
     * @param linkedTransactionID The Xero identifier for an Linked Transaction (optional)
     * @param sourceTransactionID Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice (optional)
     * @param contactID Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)
     * @param status Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status (optional)
     * @param targetTransactionID Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type LinkedTransactions array with all LinkedTransaction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLinkedTransactionsCall(String xeroTenantId, Integer page, UUID linkedTransactionID, UUID sourceTransactionID, UUID contactID, String status, UUID targetTransactionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/LinkedTransactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (linkedTransactionID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LinkedTransactionID", linkedTransactionID));
        }

        if (sourceTransactionID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceTransactionID", sourceTransactionID));
        }

        if (contactID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContactID", contactID));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (targetTransactionID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetTransactionID", targetTransactionID));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLinkedTransactionsValidateBeforeCall(String xeroTenantId, Integer page, UUID linkedTransactionID, UUID sourceTransactionID, UUID contactID, String status, UUID targetTransactionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getLinkedTransactions(Async)");
        }

        return getLinkedTransactionsCall(xeroTenantId, page, linkedTransactionID, sourceTransactionID, contactID, status, targetTransactionID, _callback);

    }

    /**
     * Retrieves linked transactions (billable expenses)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param page Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)
     * @param linkedTransactionID The Xero identifier for an Linked Transaction (optional)
     * @param sourceTransactionID Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice (optional)
     * @param contactID Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)
     * @param status Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status (optional)
     * @param targetTransactionID Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)
     * @return LinkedTransactions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type LinkedTransactions array with all LinkedTransaction </td><td>  -  </td></tr>
     </table>
     */
    public LinkedTransactions getLinkedTransactions(String xeroTenantId, Integer page, UUID linkedTransactionID, UUID sourceTransactionID, UUID contactID, String status, UUID targetTransactionID) throws ApiException {
        ApiResponse<LinkedTransactions> localVarResp = getLinkedTransactionsWithHttpInfo(xeroTenantId, page, linkedTransactionID, sourceTransactionID, contactID, status, targetTransactionID);
        return localVarResp.getData();
    }

    /**
     * Retrieves linked transactions (billable expenses)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param page Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)
     * @param linkedTransactionID The Xero identifier for an Linked Transaction (optional)
     * @param sourceTransactionID Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice (optional)
     * @param contactID Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)
     * @param status Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status (optional)
     * @param targetTransactionID Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)
     * @return ApiResponse&lt;LinkedTransactions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type LinkedTransactions array with all LinkedTransaction </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkedTransactions> getLinkedTransactionsWithHttpInfo(String xeroTenantId, Integer page, UUID linkedTransactionID, UUID sourceTransactionID, UUID contactID, String status, UUID targetTransactionID) throws ApiException {
        okhttp3.Call localVarCall = getLinkedTransactionsValidateBeforeCall(xeroTenantId, page, linkedTransactionID, sourceTransactionID, contactID, status, targetTransactionID, null);
        Type localVarReturnType = new TypeToken<LinkedTransactions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves linked transactions (billable expenses) (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param page Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)
     * @param linkedTransactionID The Xero identifier for an Linked Transaction (optional)
     * @param sourceTransactionID Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice (optional)
     * @param contactID Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)
     * @param status Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status (optional)
     * @param targetTransactionID Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type LinkedTransactions array with all LinkedTransaction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLinkedTransactionsAsync(String xeroTenantId, Integer page, UUID linkedTransactionID, UUID sourceTransactionID, UUID contactID, String status, UUID targetTransactionID, final ApiCallback<LinkedTransactions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLinkedTransactionsValidateBeforeCall(xeroTenantId, page, linkedTransactionID, sourceTransactionID, contactID, status, targetTransactionID, _callback);
        Type localVarReturnType = new TypeToken<LinkedTransactions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getManualJournal
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with a specified ManualJournals </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManualJournalCall(String xeroTenantId, UUID manualJournalID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ManualJournals/{ManualJournalID}"
            .replace("{" + "ManualJournalID" + "}", localVarApiClient.escapeString(manualJournalID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManualJournalValidateBeforeCall(String xeroTenantId, UUID manualJournalID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getManualJournal(Async)");
        }

        // verify the required parameter 'manualJournalID' is set
        if (manualJournalID == null) {
            throw new ApiException("Missing the required parameter 'manualJournalID' when calling getManualJournal(Async)");
        }

        return getManualJournalCall(xeroTenantId, manualJournalID, _callback);

    }

    /**
     * Retrieves a specific manual journal
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @return ManualJournals
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with a specified ManualJournals </td><td>  -  </td></tr>
     </table>
     */
    public ManualJournals getManualJournal(String xeroTenantId, UUID manualJournalID) throws ApiException {
        ApiResponse<ManualJournals> localVarResp = getManualJournalWithHttpInfo(xeroTenantId, manualJournalID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific manual journal
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @return ApiResponse&lt;ManualJournals&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with a specified ManualJournals </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManualJournals> getManualJournalWithHttpInfo(String xeroTenantId, UUID manualJournalID) throws ApiException {
        okhttp3.Call localVarCall = getManualJournalValidateBeforeCall(xeroTenantId, manualJournalID, null);
        Type localVarReturnType = new TypeToken<ManualJournals>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific manual journal (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with a specified ManualJournals </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManualJournalAsync(String xeroTenantId, UUID manualJournalID, final ApiCallback<ManualJournals> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManualJournalValidateBeforeCall(xeroTenantId, manualJournalID, _callback);
        Type localVarReturnType = new TypeToken<ManualJournals>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getManualJournalAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param fileName The name of the file being attached to a ManualJournal (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Manual Journal as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManualJournalAttachmentByFileNameCall(String xeroTenantId, UUID manualJournalID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ManualJournals/{ManualJournalID}/Attachments/{FileName}"
            .replace("{" + "ManualJournalID" + "}", localVarApiClient.escapeString(manualJournalID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManualJournalAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID manualJournalID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getManualJournalAttachmentByFileName(Async)");
        }

        // verify the required parameter 'manualJournalID' is set
        if (manualJournalID == null) {
            throw new ApiException("Missing the required parameter 'manualJournalID' when calling getManualJournalAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling getManualJournalAttachmentByFileName(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getManualJournalAttachmentByFileName(Async)");
        }

        return getManualJournalAttachmentByFileNameCall(xeroTenantId, manualJournalID, fileName, contentType, _callback);

    }

    /**
     * Retrieves a specific attachment from a specific manual journal by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param fileName The name of the file being attached to a ManualJournal (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Manual Journal as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getManualJournalAttachmentByFileName(String xeroTenantId, UUID manualJournalID, String fileName, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getManualJournalAttachmentByFileNameWithHttpInfo(xeroTenantId, manualJournalID, fileName, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific attachment from a specific manual journal by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param fileName The name of the file being attached to a ManualJournal (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Manual Journal as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getManualJournalAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID manualJournalID, String fileName, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getManualJournalAttachmentByFileNameValidateBeforeCall(xeroTenantId, manualJournalID, fileName, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific attachment from a specific manual journal by file name (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param fileName The name of the file being attached to a ManualJournal (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Manual Journal as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManualJournalAttachmentByFileNameAsync(String xeroTenantId, UUID manualJournalID, String fileName, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManualJournalAttachmentByFileNameValidateBeforeCall(xeroTenantId, manualJournalID, fileName, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getManualJournalAttachmentById
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Manual Journal as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManualJournalAttachmentByIdCall(String xeroTenantId, UUID manualJournalID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ManualJournals/{ManualJournalID}/Attachments/{AttachmentID}"
            .replace("{" + "ManualJournalID" + "}", localVarApiClient.escapeString(manualJournalID.toString()))
            .replace("{" + "AttachmentID" + "}", localVarApiClient.escapeString(attachmentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManualJournalAttachmentByIdValidateBeforeCall(String xeroTenantId, UUID manualJournalID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getManualJournalAttachmentById(Async)");
        }

        // verify the required parameter 'manualJournalID' is set
        if (manualJournalID == null) {
            throw new ApiException("Missing the required parameter 'manualJournalID' when calling getManualJournalAttachmentById(Async)");
        }

        // verify the required parameter 'attachmentID' is set
        if (attachmentID == null) {
            throw new ApiException("Missing the required parameter 'attachmentID' when calling getManualJournalAttachmentById(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getManualJournalAttachmentById(Async)");
        }

        return getManualJournalAttachmentByIdCall(xeroTenantId, manualJournalID, attachmentID, contentType, _callback);

    }

    /**
     * Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Manual Journal as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getManualJournalAttachmentById(String xeroTenantId, UUID manualJournalID, UUID attachmentID, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getManualJournalAttachmentByIdWithHttpInfo(xeroTenantId, manualJournalID, attachmentID, contentType);
        return localVarResp.getData();
    }

    /**
     * Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Manual Journal as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getManualJournalAttachmentByIdWithHttpInfo(String xeroTenantId, UUID manualJournalID, UUID attachmentID, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getManualJournalAttachmentByIdValidateBeforeCall(xeroTenantId, manualJournalID, attachmentID, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Manual Journal as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManualJournalAttachmentByIdAsync(String xeroTenantId, UUID manualJournalID, UUID attachmentID, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManualJournalAttachmentByIdValidateBeforeCall(xeroTenantId, manualJournalID, attachmentID, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getManualJournalAttachments
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with all Attachments for a ManualJournals </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManualJournalAttachmentsCall(String xeroTenantId, UUID manualJournalID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ManualJournals/{ManualJournalID}/Attachments"
            .replace("{" + "ManualJournalID" + "}", localVarApiClient.escapeString(manualJournalID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManualJournalAttachmentsValidateBeforeCall(String xeroTenantId, UUID manualJournalID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getManualJournalAttachments(Async)");
        }

        // verify the required parameter 'manualJournalID' is set
        if (manualJournalID == null) {
            throw new ApiException("Missing the required parameter 'manualJournalID' when calling getManualJournalAttachments(Async)");
        }

        return getManualJournalAttachmentsCall(xeroTenantId, manualJournalID, _callback);

    }

    /**
     * Retrieves attachment for a specific manual journal
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with all Attachments for a ManualJournals </td><td>  -  </td></tr>
     </table>
     */
    public Attachments getManualJournalAttachments(String xeroTenantId, UUID manualJournalID) throws ApiException {
        ApiResponse<Attachments> localVarResp = getManualJournalAttachmentsWithHttpInfo(xeroTenantId, manualJournalID);
        return localVarResp.getData();
    }

    /**
     * Retrieves attachment for a specific manual journal
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with all Attachments for a ManualJournals </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> getManualJournalAttachmentsWithHttpInfo(String xeroTenantId, UUID manualJournalID) throws ApiException {
        okhttp3.Call localVarCall = getManualJournalAttachmentsValidateBeforeCall(xeroTenantId, manualJournalID, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves attachment for a specific manual journal (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with all Attachments for a ManualJournals </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManualJournalAttachmentsAsync(String xeroTenantId, UUID manualJournalID, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManualJournalAttachmentsValidateBeforeCall(xeroTenantId, manualJournalID, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getManualJournals
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with a all ManualJournals </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManualJournalsCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ManualJournals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManualJournalsValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getManualJournals(Async)");
        }

        return getManualJournalsCall(xeroTenantId, ifModifiedSince, where, order, page, _callback);

    }

    /**
     * Retrieves manual journals
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)
     * @return ManualJournals
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with a all ManualJournals </td><td>  -  </td></tr>
     </table>
     */
    public ManualJournals getManualJournals(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page) throws ApiException {
        ApiResponse<ManualJournals> localVarResp = getManualJournalsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page);
        return localVarResp.getData();
    }

    /**
     * Retrieves manual journals
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)
     * @return ApiResponse&lt;ManualJournals&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with a all ManualJournals </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManualJournals> getManualJournalsWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getManualJournalsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, null);
        Type localVarReturnType = new TypeToken<ManualJournals>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves manual journals (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with a all ManualJournals </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManualJournalsAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, final ApiCallback<ManualJournals> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManualJournalsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, _callback);
        Type localVarReturnType = new TypeToken<ManualJournals>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getManualJournalsHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Xero generated unique identifier for a manual journal (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManualJournalsHistoryCall(String xeroTenantId, UUID manualJournalID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ManualJournals/{ManualJournalID}/History"
            .replace("{" + "ManualJournalID" + "}", localVarApiClient.escapeString(manualJournalID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManualJournalsHistoryValidateBeforeCall(String xeroTenantId, UUID manualJournalID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getManualJournalsHistory(Async)");
        }

        // verify the required parameter 'manualJournalID' is set
        if (manualJournalID == null) {
            throw new ApiException("Missing the required parameter 'manualJournalID' when calling getManualJournalsHistory(Async)");
        }

        return getManualJournalsHistoryCall(xeroTenantId, manualJournalID, _callback);

    }

    /**
     * Retrieves history for a specific manual journal
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Xero generated unique identifier for a manual journal (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords getManualJournalsHistory(String xeroTenantId, UUID manualJournalID) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = getManualJournalsHistoryWithHttpInfo(xeroTenantId, manualJournalID);
        return localVarResp.getData();
    }

    /**
     * Retrieves history for a specific manual journal
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Xero generated unique identifier for a manual journal (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> getManualJournalsHistoryWithHttpInfo(String xeroTenantId, UUID manualJournalID) throws ApiException {
        okhttp3.Call localVarCall = getManualJournalsHistoryValidateBeforeCall(xeroTenantId, manualJournalID, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves history for a specific manual journal (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Xero generated unique identifier for a manual journal (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManualJournalsHistoryAsync(String xeroTenantId, UUID manualJournalID, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManualJournalsHistoryValidateBeforeCall(xeroTenantId, manualJournalID, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOnlineInvoice
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type OnlineInvoice array with one OnlineInvoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOnlineInvoiceCall(String xeroTenantId, UUID invoiceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Invoices/{InvoiceID}/OnlineInvoice"
            .replace("{" + "InvoiceID" + "}", localVarApiClient.escapeString(invoiceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOnlineInvoiceValidateBeforeCall(String xeroTenantId, UUID invoiceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getOnlineInvoice(Async)");
        }

        // verify the required parameter 'invoiceID' is set
        if (invoiceID == null) {
            throw new ApiException("Missing the required parameter 'invoiceID' when calling getOnlineInvoice(Async)");
        }

        return getOnlineInvoiceCall(xeroTenantId, invoiceID, _callback);

    }

    /**
     * Retrieves a URL to an online invoice
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @return OnlineInvoices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type OnlineInvoice array with one OnlineInvoice </td><td>  -  </td></tr>
     </table>
     */
    public OnlineInvoices getOnlineInvoice(String xeroTenantId, UUID invoiceID) throws ApiException {
        ApiResponse<OnlineInvoices> localVarResp = getOnlineInvoiceWithHttpInfo(xeroTenantId, invoiceID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a URL to an online invoice
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @return ApiResponse&lt;OnlineInvoices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type OnlineInvoice array with one OnlineInvoice </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnlineInvoices> getOnlineInvoiceWithHttpInfo(String xeroTenantId, UUID invoiceID) throws ApiException {
        okhttp3.Call localVarCall = getOnlineInvoiceValidateBeforeCall(xeroTenantId, invoiceID, null);
        Type localVarReturnType = new TypeToken<OnlineInvoices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a URL to an online invoice (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type OnlineInvoice array with one OnlineInvoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOnlineInvoiceAsync(String xeroTenantId, UUID invoiceID, final ApiCallback<OnlineInvoices> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOnlineInvoiceValidateBeforeCall(xeroTenantId, invoiceID, _callback);
        Type localVarReturnType = new TypeToken<OnlineInvoices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationActions
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Actions array with all key actions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationActionsCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Organisation/Actions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationActionsValidateBeforeCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getOrganisationActions(Async)");
        }

        return getOrganisationActionsCall(xeroTenantId, _callback);

    }

    /**
     * Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation.
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return Actions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Actions array with all key actions </td><td>  -  </td></tr>
     </table>
     */
    public Actions getOrganisationActions(String xeroTenantId) throws ApiException {
        ApiResponse<Actions> localVarResp = getOrganisationActionsWithHttpInfo(xeroTenantId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation.
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return ApiResponse&lt;Actions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Actions array with all key actions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Actions> getOrganisationActionsWithHttpInfo(String xeroTenantId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationActionsValidateBeforeCall(xeroTenantId, null);
        Type localVarReturnType = new TypeToken<Actions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation. (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Actions array with all key actions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationActionsAsync(String xeroTenantId, final ApiCallback<Actions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationActionsValidateBeforeCall(xeroTenantId, _callback);
        Type localVarReturnType = new TypeToken<Actions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationCISSettings
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param organisationID The unique Xero identifier for an organisation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Organisation array with specified Organisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationCISSettingsCall(String xeroTenantId, UUID organisationID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Organisation/{OrganisationID}/CISSettings"
            .replace("{" + "OrganisationID" + "}", localVarApiClient.escapeString(organisationID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationCISSettingsValidateBeforeCall(String xeroTenantId, UUID organisationID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getOrganisationCISSettings(Async)");
        }

        // verify the required parameter 'organisationID' is set
        if (organisationID == null) {
            throw new ApiException("Missing the required parameter 'organisationID' when calling getOrganisationCISSettings(Async)");
        }

        return getOrganisationCISSettingsCall(xeroTenantId, organisationID, _callback);

    }

    /**
     * Retrieves the CIS settings for the Xero organistaion.
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param organisationID The unique Xero identifier for an organisation (required)
     * @return CISOrgSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Organisation array with specified Organisation </td><td>  -  </td></tr>
     </table>
     */
    public CISOrgSettings getOrganisationCISSettings(String xeroTenantId, UUID organisationID) throws ApiException {
        ApiResponse<CISOrgSettings> localVarResp = getOrganisationCISSettingsWithHttpInfo(xeroTenantId, organisationID);
        return localVarResp.getData();
    }

    /**
     * Retrieves the CIS settings for the Xero organistaion.
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param organisationID The unique Xero identifier for an organisation (required)
     * @return ApiResponse&lt;CISOrgSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Organisation array with specified Organisation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CISOrgSettings> getOrganisationCISSettingsWithHttpInfo(String xeroTenantId, UUID organisationID) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationCISSettingsValidateBeforeCall(xeroTenantId, organisationID, null);
        Type localVarReturnType = new TypeToken<CISOrgSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the CIS settings for the Xero organistaion. (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param organisationID The unique Xero identifier for an organisation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Organisation array with specified Organisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationCISSettingsAsync(String xeroTenantId, UUID organisationID, final ApiCallback<CISOrgSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationCISSettingsValidateBeforeCall(xeroTenantId, organisationID, _callback);
        Type localVarReturnType = new TypeToken<CISOrgSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisations
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Organisation array with all Organisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Organisation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsValidateBeforeCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getOrganisations(Async)");
        }

        return getOrganisationsCall(xeroTenantId, _callback);

    }

    /**
     * Retrieves Xero organisation details
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return Organisations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Organisation array with all Organisation </td><td>  -  </td></tr>
     </table>
     */
    public Organisations getOrganisations(String xeroTenantId) throws ApiException {
        ApiResponse<Organisations> localVarResp = getOrganisationsWithHttpInfo(xeroTenantId);
        return localVarResp.getData();
    }

    /**
     * Retrieves Xero organisation details
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return ApiResponse&lt;Organisations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Organisation array with all Organisation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organisations> getOrganisationsWithHttpInfo(String xeroTenantId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsValidateBeforeCall(xeroTenantId, null);
        Type localVarReturnType = new TypeToken<Organisations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves Xero organisation details (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Organisation array with all Organisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsAsync(String xeroTenantId, final ApiCallback<Organisations> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsValidateBeforeCall(xeroTenantId, _callback);
        Type localVarReturnType = new TypeToken<Organisations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOverpayment
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param overpaymentID Unique identifier for a Overpayment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Overpayments array with specified Overpayments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOverpaymentCall(String xeroTenantId, UUID overpaymentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Overpayments/{OverpaymentID}"
            .replace("{" + "OverpaymentID" + "}", localVarApiClient.escapeString(overpaymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOverpaymentValidateBeforeCall(String xeroTenantId, UUID overpaymentID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getOverpayment(Async)");
        }

        // verify the required parameter 'overpaymentID' is set
        if (overpaymentID == null) {
            throw new ApiException("Missing the required parameter 'overpaymentID' when calling getOverpayment(Async)");
        }

        return getOverpaymentCall(xeroTenantId, overpaymentID, _callback);

    }

    /**
     * Retrieves a specific overpayment using a unique overpayment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param overpaymentID Unique identifier for a Overpayment (required)
     * @return Overpayments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Overpayments array with specified Overpayments </td><td>  -  </td></tr>
     </table>
     */
    public Overpayments getOverpayment(String xeroTenantId, UUID overpaymentID) throws ApiException {
        ApiResponse<Overpayments> localVarResp = getOverpaymentWithHttpInfo(xeroTenantId, overpaymentID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific overpayment using a unique overpayment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param overpaymentID Unique identifier for a Overpayment (required)
     * @return ApiResponse&lt;Overpayments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Overpayments array with specified Overpayments </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Overpayments> getOverpaymentWithHttpInfo(String xeroTenantId, UUID overpaymentID) throws ApiException {
        okhttp3.Call localVarCall = getOverpaymentValidateBeforeCall(xeroTenantId, overpaymentID, null);
        Type localVarReturnType = new TypeToken<Overpayments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific overpayment using a unique overpayment Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param overpaymentID Unique identifier for a Overpayment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Overpayments array with specified Overpayments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOverpaymentAsync(String xeroTenantId, UUID overpaymentID, final ApiCallback<Overpayments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOverpaymentValidateBeforeCall(xeroTenantId, overpaymentID, _callback);
        Type localVarReturnType = new TypeToken<Overpayments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOverpaymentHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param overpaymentID Unique identifier for a Overpayment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOverpaymentHistoryCall(String xeroTenantId, UUID overpaymentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Overpayments/{OverpaymentID}/History"
            .replace("{" + "OverpaymentID" + "}", localVarApiClient.escapeString(overpaymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOverpaymentHistoryValidateBeforeCall(String xeroTenantId, UUID overpaymentID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getOverpaymentHistory(Async)");
        }

        // verify the required parameter 'overpaymentID' is set
        if (overpaymentID == null) {
            throw new ApiException("Missing the required parameter 'overpaymentID' when calling getOverpaymentHistory(Async)");
        }

        return getOverpaymentHistoryCall(xeroTenantId, overpaymentID, _callback);

    }

    /**
     * Retrieves history records of a specific overpayment
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param overpaymentID Unique identifier for a Overpayment (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords getOverpaymentHistory(String xeroTenantId, UUID overpaymentID) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = getOverpaymentHistoryWithHttpInfo(xeroTenantId, overpaymentID);
        return localVarResp.getData();
    }

    /**
     * Retrieves history records of a specific overpayment
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param overpaymentID Unique identifier for a Overpayment (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> getOverpaymentHistoryWithHttpInfo(String xeroTenantId, UUID overpaymentID) throws ApiException {
        okhttp3.Call localVarCall = getOverpaymentHistoryValidateBeforeCall(xeroTenantId, overpaymentID, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves history records of a specific overpayment (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param overpaymentID Unique identifier for a Overpayment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOverpaymentHistoryAsync(String xeroTenantId, UUID overpaymentID, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOverpaymentHistoryValidateBeforeCall(xeroTenantId, overpaymentID, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOverpayments
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Overpayments array with all Overpayments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOverpaymentsCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Overpayments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOverpaymentsValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getOverpayments(Async)");
        }

        return getOverpaymentsCall(xeroTenantId, ifModifiedSince, where, order, page, unitdp, _callback);

    }

    /**
     * Retrieves overpayments
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return Overpayments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Overpayments array with all Overpayments </td><td>  -  </td></tr>
     </table>
     */
    public Overpayments getOverpayments(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp) throws ApiException {
        ApiResponse<Overpayments> localVarResp = getOverpaymentsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page, unitdp);
        return localVarResp.getData();
    }

    /**
     * Retrieves overpayments
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;Overpayments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Overpayments array with all Overpayments </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Overpayments> getOverpaymentsWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = getOverpaymentsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, unitdp, null);
        Type localVarReturnType = new TypeToken<Overpayments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves overpayments (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Overpayments array with all Overpayments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOverpaymentsAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp, final ApiCallback<Overpayments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOverpaymentsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, unitdp, _callback);
        Type localVarReturnType = new TypeToken<Overpayments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayment
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentID Unique identifier for a Payment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for specified Payment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentCall(String xeroTenantId, UUID paymentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Payments/{PaymentID}"
            .replace("{" + "PaymentID" + "}", localVarApiClient.escapeString(paymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentValidateBeforeCall(String xeroTenantId, UUID paymentID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPayment(Async)");
        }

        // verify the required parameter 'paymentID' is set
        if (paymentID == null) {
            throw new ApiException("Missing the required parameter 'paymentID' when calling getPayment(Async)");
        }

        return getPaymentCall(xeroTenantId, paymentID, _callback);

    }

    /**
     * Retrieves a specific payment for invoices and credit notes using a unique payment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentID Unique identifier for a Payment (required)
     * @return Payments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for specified Payment </td><td>  -  </td></tr>
     </table>
     */
    public Payments getPayment(String xeroTenantId, UUID paymentID) throws ApiException {
        ApiResponse<Payments> localVarResp = getPaymentWithHttpInfo(xeroTenantId, paymentID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific payment for invoices and credit notes using a unique payment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentID Unique identifier for a Payment (required)
     * @return ApiResponse&lt;Payments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for specified Payment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Payments> getPaymentWithHttpInfo(String xeroTenantId, UUID paymentID) throws ApiException {
        okhttp3.Call localVarCall = getPaymentValidateBeforeCall(xeroTenantId, paymentID, null);
        Type localVarReturnType = new TypeToken<Payments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific payment for invoices and credit notes using a unique payment Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentID Unique identifier for a Payment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for specified Payment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentAsync(String xeroTenantId, UUID paymentID, final ApiCallback<Payments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentValidateBeforeCall(xeroTenantId, paymentID, _callback);
        Type localVarReturnType = new TypeToken<Payments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentID Unique identifier for a Payment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentHistoryCall(String xeroTenantId, UUID paymentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Payments/{PaymentID}/History"
            .replace("{" + "PaymentID" + "}", localVarApiClient.escapeString(paymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentHistoryValidateBeforeCall(String xeroTenantId, UUID paymentID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPaymentHistory(Async)");
        }

        // verify the required parameter 'paymentID' is set
        if (paymentID == null) {
            throw new ApiException("Missing the required parameter 'paymentID' when calling getPaymentHistory(Async)");
        }

        return getPaymentHistoryCall(xeroTenantId, paymentID, _callback);

    }

    /**
     * Retrieves history records of a specific payment
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentID Unique identifier for a Payment (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords getPaymentHistory(String xeroTenantId, UUID paymentID) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = getPaymentHistoryWithHttpInfo(xeroTenantId, paymentID);
        return localVarResp.getData();
    }

    /**
     * Retrieves history records of a specific payment
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentID Unique identifier for a Payment (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> getPaymentHistoryWithHttpInfo(String xeroTenantId, UUID paymentID) throws ApiException {
        okhttp3.Call localVarCall = getPaymentHistoryValidateBeforeCall(xeroTenantId, paymentID, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves history records of a specific payment (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param paymentID Unique identifier for a Payment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentHistoryAsync(String xeroTenantId, UUID paymentID, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentHistoryValidateBeforeCall(xeroTenantId, paymentID, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentServices
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PaymentServices array for all PaymentService </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentServicesCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/PaymentServices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentServicesValidateBeforeCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPaymentServices(Async)");
        }

        return getPaymentServicesCall(xeroTenantId, _callback);

    }

    /**
     * Retrieves payment services
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return PaymentServices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PaymentServices array for all PaymentService </td><td>  -  </td></tr>
     </table>
     */
    public PaymentServices getPaymentServices(String xeroTenantId) throws ApiException {
        ApiResponse<PaymentServices> localVarResp = getPaymentServicesWithHttpInfo(xeroTenantId);
        return localVarResp.getData();
    }

    /**
     * Retrieves payment services
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return ApiResponse&lt;PaymentServices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PaymentServices array for all PaymentService </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentServices> getPaymentServicesWithHttpInfo(String xeroTenantId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentServicesValidateBeforeCall(xeroTenantId, null);
        Type localVarReturnType = new TypeToken<PaymentServices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves payment services (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PaymentServices array for all PaymentService </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentServicesAsync(String xeroTenantId, final ApiCallback<PaymentServices> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentServicesValidateBeforeCall(xeroTenantId, _callback);
        Type localVarReturnType = new TypeToken<PaymentServices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayments
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page Up to 100 payments will be returned in a single API call (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for all Payments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentsValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPayments(Async)");
        }

        return getPaymentsCall(xeroTenantId, ifModifiedSince, where, order, page, _callback);

    }

    /**
     * Retrieves payments for invoices and credit notes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page Up to 100 payments will be returned in a single API call (optional)
     * @return Payments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for all Payments </td><td>  -  </td></tr>
     </table>
     */
    public Payments getPayments(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page) throws ApiException {
        ApiResponse<Payments> localVarResp = getPaymentsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page);
        return localVarResp.getData();
    }

    /**
     * Retrieves payments for invoices and credit notes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page Up to 100 payments will be returned in a single API call (optional)
     * @return ApiResponse&lt;Payments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for all Payments </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Payments> getPaymentsWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getPaymentsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, null);
        Type localVarReturnType = new TypeToken<Payments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves payments for invoices and credit notes (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page Up to 100 payments will be returned in a single API call (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Payments array for all Payments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, final ApiCallback<Payments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, _callback);
        Type localVarReturnType = new TypeToken<Payments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPrepayment
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param prepaymentID Unique identifier for a PrePayment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Prepayments array for a specified Prepayment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPrepaymentCall(String xeroTenantId, UUID prepaymentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Prepayments/{PrepaymentID}"
            .replace("{" + "PrepaymentID" + "}", localVarApiClient.escapeString(prepaymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPrepaymentValidateBeforeCall(String xeroTenantId, UUID prepaymentID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPrepayment(Async)");
        }

        // verify the required parameter 'prepaymentID' is set
        if (prepaymentID == null) {
            throw new ApiException("Missing the required parameter 'prepaymentID' when calling getPrepayment(Async)");
        }

        return getPrepaymentCall(xeroTenantId, prepaymentID, _callback);

    }

    /**
     * Allows you to retrieve a specified prepayments
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param prepaymentID Unique identifier for a PrePayment (required)
     * @return Prepayments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Prepayments array for a specified Prepayment </td><td>  -  </td></tr>
     </table>
     */
    public Prepayments getPrepayment(String xeroTenantId, UUID prepaymentID) throws ApiException {
        ApiResponse<Prepayments> localVarResp = getPrepaymentWithHttpInfo(xeroTenantId, prepaymentID);
        return localVarResp.getData();
    }

    /**
     * Allows you to retrieve a specified prepayments
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param prepaymentID Unique identifier for a PrePayment (required)
     * @return ApiResponse&lt;Prepayments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Prepayments array for a specified Prepayment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Prepayments> getPrepaymentWithHttpInfo(String xeroTenantId, UUID prepaymentID) throws ApiException {
        okhttp3.Call localVarCall = getPrepaymentValidateBeforeCall(xeroTenantId, prepaymentID, null);
        Type localVarReturnType = new TypeToken<Prepayments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Allows you to retrieve a specified prepayments (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param prepaymentID Unique identifier for a PrePayment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Prepayments array for a specified Prepayment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPrepaymentAsync(String xeroTenantId, UUID prepaymentID, final ApiCallback<Prepayments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPrepaymentValidateBeforeCall(xeroTenantId, prepaymentID, _callback);
        Type localVarReturnType = new TypeToken<Prepayments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPrepaymentHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param prepaymentID Unique identifier for a PrePayment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPrepaymentHistoryCall(String xeroTenantId, UUID prepaymentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Prepayments/{PrepaymentID}/History"
            .replace("{" + "PrepaymentID" + "}", localVarApiClient.escapeString(prepaymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPrepaymentHistoryValidateBeforeCall(String xeroTenantId, UUID prepaymentID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPrepaymentHistory(Async)");
        }

        // verify the required parameter 'prepaymentID' is set
        if (prepaymentID == null) {
            throw new ApiException("Missing the required parameter 'prepaymentID' when calling getPrepaymentHistory(Async)");
        }

        return getPrepaymentHistoryCall(xeroTenantId, prepaymentID, _callback);

    }

    /**
     * Retrieves history record for a specific prepayment
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param prepaymentID Unique identifier for a PrePayment (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords getPrepaymentHistory(String xeroTenantId, UUID prepaymentID) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = getPrepaymentHistoryWithHttpInfo(xeroTenantId, prepaymentID);
        return localVarResp.getData();
    }

    /**
     * Retrieves history record for a specific prepayment
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param prepaymentID Unique identifier for a PrePayment (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> getPrepaymentHistoryWithHttpInfo(String xeroTenantId, UUID prepaymentID) throws ApiException {
        okhttp3.Call localVarCall = getPrepaymentHistoryValidateBeforeCall(xeroTenantId, prepaymentID, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves history record for a specific prepayment (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param prepaymentID Unique identifier for a PrePayment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPrepaymentHistoryAsync(String xeroTenantId, UUID prepaymentID, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPrepaymentHistoryValidateBeforeCall(xeroTenantId, prepaymentID, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPrepayments
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Prepayments array for all Prepayment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPrepaymentsCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Prepayments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPrepaymentsValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPrepayments(Async)");
        }

        return getPrepaymentsCall(xeroTenantId, ifModifiedSince, where, order, page, unitdp, _callback);

    }

    /**
     * Retrieves prepayments
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return Prepayments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Prepayments array for all Prepayment </td><td>  -  </td></tr>
     </table>
     */
    public Prepayments getPrepayments(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp) throws ApiException {
        ApiResponse<Prepayments> localVarResp = getPrepaymentsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page, unitdp);
        return localVarResp.getData();
    }

    /**
     * Retrieves prepayments
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;Prepayments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Prepayments array for all Prepayment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Prepayments> getPrepaymentsWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = getPrepaymentsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, unitdp, null);
        Type localVarReturnType = new TypeToken<Prepayments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves prepayments (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Prepayments array for all Prepayment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPrepaymentsAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer page, Integer unitdp, final ApiCallback<Prepayments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPrepaymentsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, unitdp, _callback);
        Type localVarReturnType = new TypeToken<Prepayments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPurchaseOrder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for a PurchaseOrder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for specified PurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchaseOrderCall(String xeroTenantId, UUID purchaseOrderID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/PurchaseOrders/{PurchaseOrderID}"
            .replace("{" + "PurchaseOrderID" + "}", localVarApiClient.escapeString(purchaseOrderID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPurchaseOrderValidateBeforeCall(String xeroTenantId, UUID purchaseOrderID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPurchaseOrder(Async)");
        }

        // verify the required parameter 'purchaseOrderID' is set
        if (purchaseOrderID == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrderID' when calling getPurchaseOrder(Async)");
        }

        return getPurchaseOrderCall(xeroTenantId, purchaseOrderID, _callback);

    }

    /**
     * Retrieves a specific purchase order using a unique purchase order Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for a PurchaseOrder (required)
     * @return PurchaseOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for specified PurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseOrders getPurchaseOrder(String xeroTenantId, UUID purchaseOrderID) throws ApiException {
        ApiResponse<PurchaseOrders> localVarResp = getPurchaseOrderWithHttpInfo(xeroTenantId, purchaseOrderID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific purchase order using a unique purchase order Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for a PurchaseOrder (required)
     * @return ApiResponse&lt;PurchaseOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for specified PurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PurchaseOrders> getPurchaseOrderWithHttpInfo(String xeroTenantId, UUID purchaseOrderID) throws ApiException {
        okhttp3.Call localVarCall = getPurchaseOrderValidateBeforeCall(xeroTenantId, purchaseOrderID, null);
        Type localVarReturnType = new TypeToken<PurchaseOrders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific purchase order using a unique purchase order Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for a PurchaseOrder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for specified PurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchaseOrderAsync(String xeroTenantId, UUID purchaseOrderID, final ApiCallback<PurchaseOrders> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPurchaseOrderValidateBeforeCall(xeroTenantId, purchaseOrderID, _callback);
        Type localVarReturnType = new TypeToken<PurchaseOrders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPurchaseOrderAsPdf
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for an Purchase Order (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of byte array pdf version of specified Purchase Orders </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchaseOrderAsPdfCall(String xeroTenantId, UUID purchaseOrderID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/PurchaseOrders/{PurchaseOrderID}/pdf"
            .replace("{" + "PurchaseOrderID" + "}", localVarApiClient.escapeString(purchaseOrderID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPurchaseOrderAsPdfValidateBeforeCall(String xeroTenantId, UUID purchaseOrderID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPurchaseOrderAsPdf(Async)");
        }

        // verify the required parameter 'purchaseOrderID' is set
        if (purchaseOrderID == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrderID' when calling getPurchaseOrderAsPdf(Async)");
        }

        return getPurchaseOrderAsPdfCall(xeroTenantId, purchaseOrderID, _callback);

    }

    /**
     * Retrieves specific purchase order as PDF files using a unique purchase order Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for an Purchase Order (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of byte array pdf version of specified Purchase Orders </td><td>  -  </td></tr>
     </table>
     */
    public File getPurchaseOrderAsPdf(String xeroTenantId, UUID purchaseOrderID) throws ApiException {
        ApiResponse<File> localVarResp = getPurchaseOrderAsPdfWithHttpInfo(xeroTenantId, purchaseOrderID);
        return localVarResp.getData();
    }

    /**
     * Retrieves specific purchase order as PDF files using a unique purchase order Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for an Purchase Order (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of byte array pdf version of specified Purchase Orders </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getPurchaseOrderAsPdfWithHttpInfo(String xeroTenantId, UUID purchaseOrderID) throws ApiException {
        okhttp3.Call localVarCall = getPurchaseOrderAsPdfValidateBeforeCall(xeroTenantId, purchaseOrderID, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves specific purchase order as PDF files using a unique purchase order Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for an Purchase Order (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of byte array pdf version of specified Purchase Orders </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchaseOrderAsPdfAsync(String xeroTenantId, UUID purchaseOrderID, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPurchaseOrderAsPdfValidateBeforeCall(xeroTenantId, purchaseOrderID, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPurchaseOrderAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Order object (required)
     * @param fileName Name of the attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Purchase Order as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchaseOrderAttachmentByFileNameCall(String xeroTenantId, UUID purchaseOrderID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}"
            .replace("{" + "PurchaseOrderID" + "}", localVarApiClient.escapeString(purchaseOrderID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPurchaseOrderAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID purchaseOrderID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPurchaseOrderAttachmentByFileName(Async)");
        }

        // verify the required parameter 'purchaseOrderID' is set
        if (purchaseOrderID == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrderID' when calling getPurchaseOrderAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling getPurchaseOrderAttachmentByFileName(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getPurchaseOrderAttachmentByFileName(Async)");
        }

        return getPurchaseOrderAttachmentByFileNameCall(xeroTenantId, purchaseOrderID, fileName, contentType, _callback);

    }

    /**
     * Retrieves a specific attachment for a specific purchase order by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Order object (required)
     * @param fileName Name of the attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Purchase Order as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getPurchaseOrderAttachmentByFileName(String xeroTenantId, UUID purchaseOrderID, String fileName, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getPurchaseOrderAttachmentByFileNameWithHttpInfo(xeroTenantId, purchaseOrderID, fileName, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific attachment for a specific purchase order by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Order object (required)
     * @param fileName Name of the attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Purchase Order as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getPurchaseOrderAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID purchaseOrderID, String fileName, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getPurchaseOrderAttachmentByFileNameValidateBeforeCall(xeroTenantId, purchaseOrderID, fileName, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific attachment for a specific purchase order by filename (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Order object (required)
     * @param fileName Name of the attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Purchase Order as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchaseOrderAttachmentByFileNameAsync(String xeroTenantId, UUID purchaseOrderID, String fileName, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPurchaseOrderAttachmentByFileNameValidateBeforeCall(xeroTenantId, purchaseOrderID, fileName, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPurchaseOrderAttachmentById
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Order object (required)
     * @param attachmentID Unique identifier for Attachment object (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Account as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchaseOrderAttachmentByIdCall(String xeroTenantId, UUID purchaseOrderID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/PurchaseOrders/{PurchaseOrderID}/Attachments/{AttachmentID}"
            .replace("{" + "PurchaseOrderID" + "}", localVarApiClient.escapeString(purchaseOrderID.toString()))
            .replace("{" + "AttachmentID" + "}", localVarApiClient.escapeString(attachmentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPurchaseOrderAttachmentByIdValidateBeforeCall(String xeroTenantId, UUID purchaseOrderID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPurchaseOrderAttachmentById(Async)");
        }

        // verify the required parameter 'purchaseOrderID' is set
        if (purchaseOrderID == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrderID' when calling getPurchaseOrderAttachmentById(Async)");
        }

        // verify the required parameter 'attachmentID' is set
        if (attachmentID == null) {
            throw new ApiException("Missing the required parameter 'attachmentID' when calling getPurchaseOrderAttachmentById(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getPurchaseOrderAttachmentById(Async)");
        }

        return getPurchaseOrderAttachmentByIdCall(xeroTenantId, purchaseOrderID, attachmentID, contentType, _callback);

    }

    /**
     * Retrieves specific attachment for a specific purchase order using a unique attachment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Order object (required)
     * @param attachmentID Unique identifier for Attachment object (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Account as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getPurchaseOrderAttachmentById(String xeroTenantId, UUID purchaseOrderID, UUID attachmentID, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getPurchaseOrderAttachmentByIdWithHttpInfo(xeroTenantId, purchaseOrderID, attachmentID, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves specific attachment for a specific purchase order using a unique attachment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Order object (required)
     * @param attachmentID Unique identifier for Attachment object (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Account as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getPurchaseOrderAttachmentByIdWithHttpInfo(String xeroTenantId, UUID purchaseOrderID, UUID attachmentID, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getPurchaseOrderAttachmentByIdValidateBeforeCall(xeroTenantId, purchaseOrderID, attachmentID, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves specific attachment for a specific purchase order using a unique attachment Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Order object (required)
     * @param attachmentID Unique identifier for Attachment object (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Account as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchaseOrderAttachmentByIdAsync(String xeroTenantId, UUID purchaseOrderID, UUID attachmentID, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPurchaseOrderAttachmentByIdValidateBeforeCall(xeroTenantId, purchaseOrderID, attachmentID, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPurchaseOrderAttachments
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Orders object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Purchase Orders </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchaseOrderAttachmentsCall(String xeroTenantId, UUID purchaseOrderID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/PurchaseOrders/{PurchaseOrderID}/Attachments"
            .replace("{" + "PurchaseOrderID" + "}", localVarApiClient.escapeString(purchaseOrderID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPurchaseOrderAttachmentsValidateBeforeCall(String xeroTenantId, UUID purchaseOrderID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPurchaseOrderAttachments(Async)");
        }

        // verify the required parameter 'purchaseOrderID' is set
        if (purchaseOrderID == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrderID' when calling getPurchaseOrderAttachments(Async)");
        }

        return getPurchaseOrderAttachmentsCall(xeroTenantId, purchaseOrderID, _callback);

    }

    /**
     * Retrieves attachments for a specific purchase order
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Orders object (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Purchase Orders </td><td>  -  </td></tr>
     </table>
     */
    public Attachments getPurchaseOrderAttachments(String xeroTenantId, UUID purchaseOrderID) throws ApiException {
        ApiResponse<Attachments> localVarResp = getPurchaseOrderAttachmentsWithHttpInfo(xeroTenantId, purchaseOrderID);
        return localVarResp.getData();
    }

    /**
     * Retrieves attachments for a specific purchase order
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Orders object (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Purchase Orders </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> getPurchaseOrderAttachmentsWithHttpInfo(String xeroTenantId, UUID purchaseOrderID) throws ApiException {
        okhttp3.Call localVarCall = getPurchaseOrderAttachmentsValidateBeforeCall(xeroTenantId, purchaseOrderID, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves attachments for a specific purchase order (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Orders object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Purchase Orders </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchaseOrderAttachmentsAsync(String xeroTenantId, UUID purchaseOrderID, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPurchaseOrderAttachmentsValidateBeforeCall(xeroTenantId, purchaseOrderID, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPurchaseOrderByNumber
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderNumber Unique identifier for a PurchaseOrder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for specified PurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchaseOrderByNumberCall(String xeroTenantId, String purchaseOrderNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/PurchaseOrders/{PurchaseOrderNumber}"
            .replace("{" + "PurchaseOrderNumber" + "}", localVarApiClient.escapeString(purchaseOrderNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPurchaseOrderByNumberValidateBeforeCall(String xeroTenantId, String purchaseOrderNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPurchaseOrderByNumber(Async)");
        }

        // verify the required parameter 'purchaseOrderNumber' is set
        if (purchaseOrderNumber == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrderNumber' when calling getPurchaseOrderByNumber(Async)");
        }

        return getPurchaseOrderByNumberCall(xeroTenantId, purchaseOrderNumber, _callback);

    }

    /**
     * Retrieves a specific purchase order using purchase order number
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderNumber Unique identifier for a PurchaseOrder (required)
     * @return PurchaseOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for specified PurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseOrders getPurchaseOrderByNumber(String xeroTenantId, String purchaseOrderNumber) throws ApiException {
        ApiResponse<PurchaseOrders> localVarResp = getPurchaseOrderByNumberWithHttpInfo(xeroTenantId, purchaseOrderNumber);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific purchase order using purchase order number
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderNumber Unique identifier for a PurchaseOrder (required)
     * @return ApiResponse&lt;PurchaseOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for specified PurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PurchaseOrders> getPurchaseOrderByNumberWithHttpInfo(String xeroTenantId, String purchaseOrderNumber) throws ApiException {
        okhttp3.Call localVarCall = getPurchaseOrderByNumberValidateBeforeCall(xeroTenantId, purchaseOrderNumber, null);
        Type localVarReturnType = new TypeToken<PurchaseOrders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific purchase order using purchase order number (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderNumber Unique identifier for a PurchaseOrder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for specified PurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchaseOrderByNumberAsync(String xeroTenantId, String purchaseOrderNumber, final ApiCallback<PurchaseOrders> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPurchaseOrderByNumberValidateBeforeCall(xeroTenantId, purchaseOrderNumber, _callback);
        Type localVarReturnType = new TypeToken<PurchaseOrders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPurchaseOrderHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for a PurchaseOrder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchaseOrderHistoryCall(String xeroTenantId, UUID purchaseOrderID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/PurchaseOrders/{PurchaseOrderID}/History"
            .replace("{" + "PurchaseOrderID" + "}", localVarApiClient.escapeString(purchaseOrderID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPurchaseOrderHistoryValidateBeforeCall(String xeroTenantId, UUID purchaseOrderID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPurchaseOrderHistory(Async)");
        }

        // verify the required parameter 'purchaseOrderID' is set
        if (purchaseOrderID == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrderID' when calling getPurchaseOrderHistory(Async)");
        }

        return getPurchaseOrderHistoryCall(xeroTenantId, purchaseOrderID, _callback);

    }

    /**
     * Retrieves history for a specific purchase order
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for a PurchaseOrder (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords getPurchaseOrderHistory(String xeroTenantId, UUID purchaseOrderID) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = getPurchaseOrderHistoryWithHttpInfo(xeroTenantId, purchaseOrderID);
        return localVarResp.getData();
    }

    /**
     * Retrieves history for a specific purchase order
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for a PurchaseOrder (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> getPurchaseOrderHistoryWithHttpInfo(String xeroTenantId, UUID purchaseOrderID) throws ApiException {
        okhttp3.Call localVarCall = getPurchaseOrderHistoryValidateBeforeCall(xeroTenantId, purchaseOrderID, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves history for a specific purchase order (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for a PurchaseOrder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchaseOrderHistoryAsync(String xeroTenantId, UUID purchaseOrderID, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPurchaseOrderHistoryValidateBeforeCall(xeroTenantId, purchaseOrderID, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPurchaseOrders
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param status Filter by purchase order status (optional)
     * @param dateFrom Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)
     * @param dateTo Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)
     * @param order Order by an any element (optional)
     * @param page To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array of all PurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchaseOrdersCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String status, String dateFrom, String dateTo, String order, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/PurchaseOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPurchaseOrdersValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String status, String dateFrom, String dateTo, String order, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPurchaseOrders(Async)");
        }

        return getPurchaseOrdersCall(xeroTenantId, ifModifiedSince, status, dateFrom, dateTo, order, page, _callback);

    }

    /**
     * Retrieves purchase orders
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param status Filter by purchase order status (optional)
     * @param dateFrom Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)
     * @param dateTo Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)
     * @param order Order by an any element (optional)
     * @param page To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)
     * @return PurchaseOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array of all PurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseOrders getPurchaseOrders(String xeroTenantId, OffsetDateTime ifModifiedSince, String status, String dateFrom, String dateTo, String order, Integer page) throws ApiException {
        ApiResponse<PurchaseOrders> localVarResp = getPurchaseOrdersWithHttpInfo(xeroTenantId, ifModifiedSince, status, dateFrom, dateTo, order, page);
        return localVarResp.getData();
    }

    /**
     * Retrieves purchase orders
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param status Filter by purchase order status (optional)
     * @param dateFrom Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)
     * @param dateTo Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)
     * @param order Order by an any element (optional)
     * @param page To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)
     * @return ApiResponse&lt;PurchaseOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array of all PurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PurchaseOrders> getPurchaseOrdersWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, String status, String dateFrom, String dateTo, String order, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getPurchaseOrdersValidateBeforeCall(xeroTenantId, ifModifiedSince, status, dateFrom, dateTo, order, page, null);
        Type localVarReturnType = new TypeToken<PurchaseOrders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves purchase orders (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param status Filter by purchase order status (optional)
     * @param dateFrom Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)
     * @param dateTo Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)
     * @param order Order by an any element (optional)
     * @param page To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array of all PurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchaseOrdersAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, String status, String dateFrom, String dateTo, String order, Integer page, final ApiCallback<PurchaseOrders> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPurchaseOrdersValidateBeforeCall(xeroTenantId, ifModifiedSince, status, dateFrom, dateTo, order, page, _callback);
        Type localVarReturnType = new TypeToken<PurchaseOrders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuote
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Quotes array with specified Quote </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteCall(String xeroTenantId, UUID quoteID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Quotes/{QuoteID}"
            .replace("{" + "QuoteID" + "}", localVarApiClient.escapeString(quoteID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteValidateBeforeCall(String xeroTenantId, UUID quoteID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getQuote(Async)");
        }

        // verify the required parameter 'quoteID' is set
        if (quoteID == null) {
            throw new ApiException("Missing the required parameter 'quoteID' when calling getQuote(Async)");
        }

        return getQuoteCall(xeroTenantId, quoteID, _callback);

    }

    /**
     * Retrieves a specific quote using a unique quote Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @return Quotes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Quotes array with specified Quote </td><td>  -  </td></tr>
     </table>
     */
    public Quotes getQuote(String xeroTenantId, UUID quoteID) throws ApiException {
        ApiResponse<Quotes> localVarResp = getQuoteWithHttpInfo(xeroTenantId, quoteID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific quote using a unique quote Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @return ApiResponse&lt;Quotes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Quotes array with specified Quote </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quotes> getQuoteWithHttpInfo(String xeroTenantId, UUID quoteID) throws ApiException {
        okhttp3.Call localVarCall = getQuoteValidateBeforeCall(xeroTenantId, quoteID, null);
        Type localVarReturnType = new TypeToken<Quotes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific quote using a unique quote Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Quotes array with specified Quote </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteAsync(String xeroTenantId, UUID quoteID, final ApiCallback<Quotes> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteValidateBeforeCall(xeroTenantId, quoteID, _callback);
        Type localVarReturnType = new TypeToken<Quotes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuoteAsPdf
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of byte array pdf version of specified Quotes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteAsPdfCall(String xeroTenantId, UUID quoteID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Quotes/{QuoteID}/pdf"
            .replace("{" + "QuoteID" + "}", localVarApiClient.escapeString(quoteID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteAsPdfValidateBeforeCall(String xeroTenantId, UUID quoteID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getQuoteAsPdf(Async)");
        }

        // verify the required parameter 'quoteID' is set
        if (quoteID == null) {
            throw new ApiException("Missing the required parameter 'quoteID' when calling getQuoteAsPdf(Async)");
        }

        return getQuoteAsPdfCall(xeroTenantId, quoteID, _callback);

    }

    /**
     * Retrieves a specific quote as a PDF file using a unique quote Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of byte array pdf version of specified Quotes </td><td>  -  </td></tr>
     </table>
     */
    public File getQuoteAsPdf(String xeroTenantId, UUID quoteID) throws ApiException {
        ApiResponse<File> localVarResp = getQuoteAsPdfWithHttpInfo(xeroTenantId, quoteID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific quote as a PDF file using a unique quote Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of byte array pdf version of specified Quotes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getQuoteAsPdfWithHttpInfo(String xeroTenantId, UUID quoteID) throws ApiException {
        okhttp3.Call localVarCall = getQuoteAsPdfValidateBeforeCall(xeroTenantId, quoteID, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific quote as a PDF file using a unique quote Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of byte array pdf version of specified Quotes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteAsPdfAsync(String xeroTenantId, UUID quoteID, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteAsPdfValidateBeforeCall(xeroTenantId, quoteID, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuoteAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @param fileName Name of the attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Quote as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteAttachmentByFileNameCall(String xeroTenantId, UUID quoteID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Quotes/{QuoteID}/Attachments/{FileName}"
            .replace("{" + "QuoteID" + "}", localVarApiClient.escapeString(quoteID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID quoteID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getQuoteAttachmentByFileName(Async)");
        }

        // verify the required parameter 'quoteID' is set
        if (quoteID == null) {
            throw new ApiException("Missing the required parameter 'quoteID' when calling getQuoteAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling getQuoteAttachmentByFileName(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getQuoteAttachmentByFileName(Async)");
        }

        return getQuoteAttachmentByFileNameCall(xeroTenantId, quoteID, fileName, contentType, _callback);

    }

    /**
     * Retrieves a specific attachment from a specific quote by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @param fileName Name of the attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Quote as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getQuoteAttachmentByFileName(String xeroTenantId, UUID quoteID, String fileName, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getQuoteAttachmentByFileNameWithHttpInfo(xeroTenantId, quoteID, fileName, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific attachment from a specific quote by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @param fileName Name of the attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Quote as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getQuoteAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID quoteID, String fileName, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getQuoteAttachmentByFileNameValidateBeforeCall(xeroTenantId, quoteID, fileName, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific attachment from a specific quote by filename (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @param fileName Name of the attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Quote as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteAttachmentByFileNameAsync(String xeroTenantId, UUID quoteID, String fileName, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteAttachmentByFileNameValidateBeforeCall(xeroTenantId, quoteID, fileName, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuoteAttachmentById
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @param attachmentID Unique identifier for Attachment object (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Quote as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteAttachmentByIdCall(String xeroTenantId, UUID quoteID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Quotes/{QuoteID}/Attachments/{AttachmentID}"
            .replace("{" + "QuoteID" + "}", localVarApiClient.escapeString(quoteID.toString()))
            .replace("{" + "AttachmentID" + "}", localVarApiClient.escapeString(attachmentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteAttachmentByIdValidateBeforeCall(String xeroTenantId, UUID quoteID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getQuoteAttachmentById(Async)");
        }

        // verify the required parameter 'quoteID' is set
        if (quoteID == null) {
            throw new ApiException("Missing the required parameter 'quoteID' when calling getQuoteAttachmentById(Async)");
        }

        // verify the required parameter 'attachmentID' is set
        if (attachmentID == null) {
            throw new ApiException("Missing the required parameter 'attachmentID' when calling getQuoteAttachmentById(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getQuoteAttachmentById(Async)");
        }

        return getQuoteAttachmentByIdCall(xeroTenantId, quoteID, attachmentID, contentType, _callback);

    }

    /**
     * Retrieves a specific attachment from a specific quote using a unique attachment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @param attachmentID Unique identifier for Attachment object (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Quote as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getQuoteAttachmentById(String xeroTenantId, UUID quoteID, UUID attachmentID, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getQuoteAttachmentByIdWithHttpInfo(xeroTenantId, quoteID, attachmentID, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific attachment from a specific quote using a unique attachment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @param attachmentID Unique identifier for Attachment object (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Quote as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getQuoteAttachmentByIdWithHttpInfo(String xeroTenantId, UUID quoteID, UUID attachmentID, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getQuoteAttachmentByIdValidateBeforeCall(xeroTenantId, quoteID, attachmentID, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific attachment from a specific quote using a unique attachment Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @param attachmentID Unique identifier for Attachment object (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Quote as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteAttachmentByIdAsync(String xeroTenantId, UUID quoteID, UUID attachmentID, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteAttachmentByIdValidateBeforeCall(xeroTenantId, quoteID, attachmentID, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuoteAttachments
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteAttachmentsCall(String xeroTenantId, UUID quoteID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Quotes/{QuoteID}/Attachments"
            .replace("{" + "QuoteID" + "}", localVarApiClient.escapeString(quoteID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteAttachmentsValidateBeforeCall(String xeroTenantId, UUID quoteID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getQuoteAttachments(Async)");
        }

        // verify the required parameter 'quoteID' is set
        if (quoteID == null) {
            throw new ApiException("Missing the required parameter 'quoteID' when calling getQuoteAttachments(Async)");
        }

        return getQuoteAttachmentsCall(xeroTenantId, quoteID, _callback);

    }

    /**
     * Retrieves attachments for a specific quote
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
     </table>
     */
    public Attachments getQuoteAttachments(String xeroTenantId, UUID quoteID) throws ApiException {
        ApiResponse<Attachments> localVarResp = getQuoteAttachmentsWithHttpInfo(xeroTenantId, quoteID);
        return localVarResp.getData();
    }

    /**
     * Retrieves attachments for a specific quote
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> getQuoteAttachmentsWithHttpInfo(String xeroTenantId, UUID quoteID) throws ApiException {
        okhttp3.Call localVarCall = getQuoteAttachmentsValidateBeforeCall(xeroTenantId, quoteID, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves attachments for a specific quote (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteAttachmentsAsync(String xeroTenantId, UUID quoteID, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteAttachmentsValidateBeforeCall(xeroTenantId, quoteID, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuoteHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteHistoryCall(String xeroTenantId, UUID quoteID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Quotes/{QuoteID}/History"
            .replace("{" + "QuoteID" + "}", localVarApiClient.escapeString(quoteID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteHistoryValidateBeforeCall(String xeroTenantId, UUID quoteID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getQuoteHistory(Async)");
        }

        // verify the required parameter 'quoteID' is set
        if (quoteID == null) {
            throw new ApiException("Missing the required parameter 'quoteID' when calling getQuoteHistory(Async)");
        }

        return getQuoteHistoryCall(xeroTenantId, quoteID, _callback);

    }

    /**
     * Retrieves history records of a specific quote
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords getQuoteHistory(String xeroTenantId, UUID quoteID) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = getQuoteHistoryWithHttpInfo(xeroTenantId, quoteID);
        return localVarResp.getData();
    }

    /**
     * Retrieves history records of a specific quote
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> getQuoteHistoryWithHttpInfo(String xeroTenantId, UUID quoteID) throws ApiException {
        okhttp3.Call localVarCall = getQuoteHistoryValidateBeforeCall(xeroTenantId, quoteID, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves history records of a specific quote (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteHistoryAsync(String xeroTenantId, UUID quoteID, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteHistoryValidateBeforeCall(xeroTenantId, quoteID, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuotes
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param dateFrom Filter for quotes after a particular date (optional)
     * @param dateTo Filter for quotes before a particular date (optional)
     * @param expiryDateFrom Filter for quotes expiring after a particular date (optional)
     * @param expiryDateTo Filter for quotes before a particular date (optional)
     * @param contactID Filter for quotes belonging to a particular contact (optional)
     * @param status Filter for quotes of a particular Status (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 Quotes will be returned in a single API call with line items shown for each quote (optional)
     * @param order Order by an any element (optional)
     * @param quoteNumber Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber&#x3D;QU-0001) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type quotes array with all quotes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuotesCall(String xeroTenantId, OffsetDateTime ifModifiedSince, LocalDate dateFrom, LocalDate dateTo, LocalDate expiryDateFrom, LocalDate expiryDateTo, UUID contactID, String status, Integer page, String order, String quoteNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Quotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateTo", dateTo));
        }

        if (expiryDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExpiryDateFrom", expiryDateFrom));
        }

        if (expiryDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExpiryDateTo", expiryDateTo));
        }

        if (contactID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContactID", contactID));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (quoteNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("QuoteNumber", quoteNumber));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuotesValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, LocalDate dateFrom, LocalDate dateTo, LocalDate expiryDateFrom, LocalDate expiryDateTo, UUID contactID, String status, Integer page, String order, String quoteNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getQuotes(Async)");
        }

        return getQuotesCall(xeroTenantId, ifModifiedSince, dateFrom, dateTo, expiryDateFrom, expiryDateTo, contactID, status, page, order, quoteNumber, _callback);

    }

    /**
     * Retrieves sales quotes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param dateFrom Filter for quotes after a particular date (optional)
     * @param dateTo Filter for quotes before a particular date (optional)
     * @param expiryDateFrom Filter for quotes expiring after a particular date (optional)
     * @param expiryDateTo Filter for quotes before a particular date (optional)
     * @param contactID Filter for quotes belonging to a particular contact (optional)
     * @param status Filter for quotes of a particular Status (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 Quotes will be returned in a single API call with line items shown for each quote (optional)
     * @param order Order by an any element (optional)
     * @param quoteNumber Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber&#x3D;QU-0001) (optional)
     * @return Quotes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type quotes array with all quotes </td><td>  -  </td></tr>
     </table>
     */
    public Quotes getQuotes(String xeroTenantId, OffsetDateTime ifModifiedSince, LocalDate dateFrom, LocalDate dateTo, LocalDate expiryDateFrom, LocalDate expiryDateTo, UUID contactID, String status, Integer page, String order, String quoteNumber) throws ApiException {
        ApiResponse<Quotes> localVarResp = getQuotesWithHttpInfo(xeroTenantId, ifModifiedSince, dateFrom, dateTo, expiryDateFrom, expiryDateTo, contactID, status, page, order, quoteNumber);
        return localVarResp.getData();
    }

    /**
     * Retrieves sales quotes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param dateFrom Filter for quotes after a particular date (optional)
     * @param dateTo Filter for quotes before a particular date (optional)
     * @param expiryDateFrom Filter for quotes expiring after a particular date (optional)
     * @param expiryDateTo Filter for quotes before a particular date (optional)
     * @param contactID Filter for quotes belonging to a particular contact (optional)
     * @param status Filter for quotes of a particular Status (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 Quotes will be returned in a single API call with line items shown for each quote (optional)
     * @param order Order by an any element (optional)
     * @param quoteNumber Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber&#x3D;QU-0001) (optional)
     * @return ApiResponse&lt;Quotes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type quotes array with all quotes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quotes> getQuotesWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, LocalDate dateFrom, LocalDate dateTo, LocalDate expiryDateFrom, LocalDate expiryDateTo, UUID contactID, String status, Integer page, String order, String quoteNumber) throws ApiException {
        okhttp3.Call localVarCall = getQuotesValidateBeforeCall(xeroTenantId, ifModifiedSince, dateFrom, dateTo, expiryDateFrom, expiryDateTo, contactID, status, page, order, quoteNumber, null);
        Type localVarReturnType = new TypeToken<Quotes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves sales quotes (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param dateFrom Filter for quotes after a particular date (optional)
     * @param dateTo Filter for quotes before a particular date (optional)
     * @param expiryDateFrom Filter for quotes expiring after a particular date (optional)
     * @param expiryDateTo Filter for quotes before a particular date (optional)
     * @param contactID Filter for quotes belonging to a particular contact (optional)
     * @param status Filter for quotes of a particular Status (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 Quotes will be returned in a single API call with line items shown for each quote (optional)
     * @param order Order by an any element (optional)
     * @param quoteNumber Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber&#x3D;QU-0001) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type quotes array with all quotes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuotesAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, LocalDate dateFrom, LocalDate dateTo, LocalDate expiryDateFrom, LocalDate expiryDateTo, UUID contactID, String status, Integer page, String order, String quoteNumber, final ApiCallback<Quotes> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuotesValidateBeforeCall(xeroTenantId, ifModifiedSince, dateFrom, dateTo, expiryDateFrom, expiryDateTo, contactID, status, page, order, quoteNumber, _callback);
        Type localVarReturnType = new TypeToken<Quotes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReceipt
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Receipts array for a specified Receipt </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReceiptCall(String xeroTenantId, UUID receiptID, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Receipts/{ReceiptID}"
            .replace("{" + "ReceiptID" + "}", localVarApiClient.escapeString(receiptID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReceiptValidateBeforeCall(String xeroTenantId, UUID receiptID, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getReceipt(Async)");
        }

        // verify the required parameter 'receiptID' is set
        if (receiptID == null) {
            throw new ApiException("Missing the required parameter 'receiptID' when calling getReceipt(Async)");
        }

        return getReceiptCall(xeroTenantId, receiptID, unitdp, _callback);

    }

    /**
     * Retrieves a specific draft expense claim receipt by using a unique receipt Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return Receipts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Receipts array for a specified Receipt </td><td>  -  </td></tr>
     </table>
     */
    public Receipts getReceipt(String xeroTenantId, UUID receiptID, Integer unitdp) throws ApiException {
        ApiResponse<Receipts> localVarResp = getReceiptWithHttpInfo(xeroTenantId, receiptID, unitdp);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific draft expense claim receipt by using a unique receipt Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;Receipts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Receipts array for a specified Receipt </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Receipts> getReceiptWithHttpInfo(String xeroTenantId, UUID receiptID, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = getReceiptValidateBeforeCall(xeroTenantId, receiptID, unitdp, null);
        Type localVarReturnType = new TypeToken<Receipts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific draft expense claim receipt by using a unique receipt Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Receipts array for a specified Receipt </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReceiptAsync(String xeroTenantId, UUID receiptID, Integer unitdp, final ApiCallback<Receipts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReceiptValidateBeforeCall(xeroTenantId, receiptID, unitdp, _callback);
        Type localVarReturnType = new TypeToken<Receipts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReceiptAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param fileName The name of the file being attached to the Receipt (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Receipt as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReceiptAttachmentByFileNameCall(String xeroTenantId, UUID receiptID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Receipts/{ReceiptID}/Attachments/{FileName}"
            .replace("{" + "ReceiptID" + "}", localVarApiClient.escapeString(receiptID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReceiptAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID receiptID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getReceiptAttachmentByFileName(Async)");
        }

        // verify the required parameter 'receiptID' is set
        if (receiptID == null) {
            throw new ApiException("Missing the required parameter 'receiptID' when calling getReceiptAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling getReceiptAttachmentByFileName(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getReceiptAttachmentByFileName(Async)");
        }

        return getReceiptAttachmentByFileNameCall(xeroTenantId, receiptID, fileName, contentType, _callback);

    }

    /**
     * Retrieves a specific attachment from a specific expense claim receipts by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param fileName The name of the file being attached to the Receipt (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Receipt as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getReceiptAttachmentByFileName(String xeroTenantId, UUID receiptID, String fileName, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getReceiptAttachmentByFileNameWithHttpInfo(xeroTenantId, receiptID, fileName, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific attachment from a specific expense claim receipts by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param fileName The name of the file being attached to the Receipt (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Receipt as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getReceiptAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID receiptID, String fileName, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getReceiptAttachmentByFileNameValidateBeforeCall(xeroTenantId, receiptID, fileName, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific attachment from a specific expense claim receipts by file name (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param fileName The name of the file being attached to the Receipt (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Receipt as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReceiptAttachmentByFileNameAsync(String xeroTenantId, UUID receiptID, String fileName, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReceiptAttachmentByFileNameValidateBeforeCall(xeroTenantId, receiptID, fileName, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReceiptAttachmentById
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Receipt as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReceiptAttachmentByIdCall(String xeroTenantId, UUID receiptID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Receipts/{ReceiptID}/Attachments/{AttachmentID}"
            .replace("{" + "ReceiptID" + "}", localVarApiClient.escapeString(receiptID.toString()))
            .replace("{" + "AttachmentID" + "}", localVarApiClient.escapeString(attachmentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReceiptAttachmentByIdValidateBeforeCall(String xeroTenantId, UUID receiptID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getReceiptAttachmentById(Async)");
        }

        // verify the required parameter 'receiptID' is set
        if (receiptID == null) {
            throw new ApiException("Missing the required parameter 'receiptID' when calling getReceiptAttachmentById(Async)");
        }

        // verify the required parameter 'attachmentID' is set
        if (attachmentID == null) {
            throw new ApiException("Missing the required parameter 'attachmentID' when calling getReceiptAttachmentById(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getReceiptAttachmentById(Async)");
        }

        return getReceiptAttachmentByIdCall(xeroTenantId, receiptID, attachmentID, contentType, _callback);

    }

    /**
     * Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Receipt as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getReceiptAttachmentById(String xeroTenantId, UUID receiptID, UUID attachmentID, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getReceiptAttachmentByIdWithHttpInfo(xeroTenantId, receiptID, attachmentID, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Receipt as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getReceiptAttachmentByIdWithHttpInfo(String xeroTenantId, UUID receiptID, UUID attachmentID, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getReceiptAttachmentByIdValidateBeforeCall(xeroTenantId, receiptID, attachmentID, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Receipt as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReceiptAttachmentByIdAsync(String xeroTenantId, UUID receiptID, UUID attachmentID, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReceiptAttachmentByIdValidateBeforeCall(xeroTenantId, receiptID, attachmentID, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReceiptAttachments
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachments for a specified Receipt </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReceiptAttachmentsCall(String xeroTenantId, UUID receiptID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Receipts/{ReceiptID}/Attachments"
            .replace("{" + "ReceiptID" + "}", localVarApiClient.escapeString(receiptID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReceiptAttachmentsValidateBeforeCall(String xeroTenantId, UUID receiptID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getReceiptAttachments(Async)");
        }

        // verify the required parameter 'receiptID' is set
        if (receiptID == null) {
            throw new ApiException("Missing the required parameter 'receiptID' when calling getReceiptAttachments(Async)");
        }

        return getReceiptAttachmentsCall(xeroTenantId, receiptID, _callback);

    }

    /**
     * Retrieves attachments for a specific expense claim receipt
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachments for a specified Receipt </td><td>  -  </td></tr>
     </table>
     */
    public Attachments getReceiptAttachments(String xeroTenantId, UUID receiptID) throws ApiException {
        ApiResponse<Attachments> localVarResp = getReceiptAttachmentsWithHttpInfo(xeroTenantId, receiptID);
        return localVarResp.getData();
    }

    /**
     * Retrieves attachments for a specific expense claim receipt
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachments for a specified Receipt </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> getReceiptAttachmentsWithHttpInfo(String xeroTenantId, UUID receiptID) throws ApiException {
        okhttp3.Call localVarCall = getReceiptAttachmentsValidateBeforeCall(xeroTenantId, receiptID, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves attachments for a specific expense claim receipt (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachments for a specified Receipt </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReceiptAttachmentsAsync(String xeroTenantId, UUID receiptID, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReceiptAttachmentsValidateBeforeCall(xeroTenantId, receiptID, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReceiptHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReceiptHistoryCall(String xeroTenantId, UUID receiptID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Receipts/{ReceiptID}/History"
            .replace("{" + "ReceiptID" + "}", localVarApiClient.escapeString(receiptID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReceiptHistoryValidateBeforeCall(String xeroTenantId, UUID receiptID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getReceiptHistory(Async)");
        }

        // verify the required parameter 'receiptID' is set
        if (receiptID == null) {
            throw new ApiException("Missing the required parameter 'receiptID' when calling getReceiptHistory(Async)");
        }

        return getReceiptHistoryCall(xeroTenantId, receiptID, _callback);

    }

    /**
     * Retrieves a history record for a specific receipt
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords getReceiptHistory(String xeroTenantId, UUID receiptID) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = getReceiptHistoryWithHttpInfo(xeroTenantId, receiptID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a history record for a specific receipt
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> getReceiptHistoryWithHttpInfo(String xeroTenantId, UUID receiptID) throws ApiException {
        okhttp3.Call localVarCall = getReceiptHistoryValidateBeforeCall(xeroTenantId, receiptID, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a history record for a specific receipt (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReceiptHistoryAsync(String xeroTenantId, UUID receiptID, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReceiptHistoryValidateBeforeCall(xeroTenantId, receiptID, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReceipts
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Receipts array for all Receipt </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReceiptsCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Receipts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReceiptsValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getReceipts(Async)");
        }

        return getReceiptsCall(xeroTenantId, ifModifiedSince, where, order, unitdp, _callback);

    }

    /**
     * Retrieves draft expense claim receipts for any user
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return Receipts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Receipts array for all Receipt </td><td>  -  </td></tr>
     </table>
     */
    public Receipts getReceipts(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer unitdp) throws ApiException {
        ApiResponse<Receipts> localVarResp = getReceiptsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, unitdp);
        return localVarResp.getData();
    }

    /**
     * Retrieves draft expense claim receipts for any user
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;Receipts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Receipts array for all Receipt </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Receipts> getReceiptsWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = getReceiptsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, unitdp, null);
        Type localVarReturnType = new TypeToken<Receipts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves draft expense claim receipts for any user (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Receipts array for all Receipt </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReceiptsAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, Integer unitdp, final ApiCallback<Receipts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReceiptsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, unitdp, _callback);
        Type localVarReturnType = new TypeToken<Receipts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepeatingInvoice
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Repeating Invoices array with a specified Repeating Invoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepeatingInvoiceCall(String xeroTenantId, UUID repeatingInvoiceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/RepeatingInvoices/{RepeatingInvoiceID}"
            .replace("{" + "RepeatingInvoiceID" + "}", localVarApiClient.escapeString(repeatingInvoiceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepeatingInvoiceValidateBeforeCall(String xeroTenantId, UUID repeatingInvoiceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getRepeatingInvoice(Async)");
        }

        // verify the required parameter 'repeatingInvoiceID' is set
        if (repeatingInvoiceID == null) {
            throw new ApiException("Missing the required parameter 'repeatingInvoiceID' when calling getRepeatingInvoice(Async)");
        }

        return getRepeatingInvoiceCall(xeroTenantId, repeatingInvoiceID, _callback);

    }

    /**
     * Retrieves a specific repeating invoice by using a unique repeating invoice Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @return RepeatingInvoices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Repeating Invoices array with a specified Repeating Invoice </td><td>  -  </td></tr>
     </table>
     */
    public RepeatingInvoices getRepeatingInvoice(String xeroTenantId, UUID repeatingInvoiceID) throws ApiException {
        ApiResponse<RepeatingInvoices> localVarResp = getRepeatingInvoiceWithHttpInfo(xeroTenantId, repeatingInvoiceID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific repeating invoice by using a unique repeating invoice Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @return ApiResponse&lt;RepeatingInvoices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Repeating Invoices array with a specified Repeating Invoice </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepeatingInvoices> getRepeatingInvoiceWithHttpInfo(String xeroTenantId, UUID repeatingInvoiceID) throws ApiException {
        okhttp3.Call localVarCall = getRepeatingInvoiceValidateBeforeCall(xeroTenantId, repeatingInvoiceID, null);
        Type localVarReturnType = new TypeToken<RepeatingInvoices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific repeating invoice by using a unique repeating invoice Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Repeating Invoices array with a specified Repeating Invoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepeatingInvoiceAsync(String xeroTenantId, UUID repeatingInvoiceID, final ApiCallback<RepeatingInvoices> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepeatingInvoiceValidateBeforeCall(xeroTenantId, repeatingInvoiceID, _callback);
        Type localVarReturnType = new TypeToken<RepeatingInvoices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepeatingInvoiceAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param fileName The name of the file being attached to a Repeating Invoice (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Repeating Invoice as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepeatingInvoiceAttachmentByFileNameCall(String xeroTenantId, UUID repeatingInvoiceID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}"
            .replace("{" + "RepeatingInvoiceID" + "}", localVarApiClient.escapeString(repeatingInvoiceID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepeatingInvoiceAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID repeatingInvoiceID, String fileName, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getRepeatingInvoiceAttachmentByFileName(Async)");
        }

        // verify the required parameter 'repeatingInvoiceID' is set
        if (repeatingInvoiceID == null) {
            throw new ApiException("Missing the required parameter 'repeatingInvoiceID' when calling getRepeatingInvoiceAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling getRepeatingInvoiceAttachmentByFileName(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getRepeatingInvoiceAttachmentByFileName(Async)");
        }

        return getRepeatingInvoiceAttachmentByFileNameCall(xeroTenantId, repeatingInvoiceID, fileName, contentType, _callback);

    }

    /**
     * Retrieves a specific attachment from a specific repeating invoices by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param fileName The name of the file being attached to a Repeating Invoice (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Repeating Invoice as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getRepeatingInvoiceAttachmentByFileName(String xeroTenantId, UUID repeatingInvoiceID, String fileName, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getRepeatingInvoiceAttachmentByFileNameWithHttpInfo(xeroTenantId, repeatingInvoiceID, fileName, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific attachment from a specific repeating invoices by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param fileName The name of the file being attached to a Repeating Invoice (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Repeating Invoice as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getRepeatingInvoiceAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID repeatingInvoiceID, String fileName, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getRepeatingInvoiceAttachmentByFileNameValidateBeforeCall(xeroTenantId, repeatingInvoiceID, fileName, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific attachment from a specific repeating invoices by file name (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param fileName The name of the file being attached to a Repeating Invoice (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Repeating Invoice as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepeatingInvoiceAttachmentByFileNameAsync(String xeroTenantId, UUID repeatingInvoiceID, String fileName, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepeatingInvoiceAttachmentByFileNameValidateBeforeCall(xeroTenantId, repeatingInvoiceID, fileName, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepeatingInvoiceAttachmentById
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Repeating Invoice as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepeatingInvoiceAttachmentByIdCall(String xeroTenantId, UUID repeatingInvoiceID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{AttachmentID}"
            .replace("{" + "RepeatingInvoiceID" + "}", localVarApiClient.escapeString(repeatingInvoiceID.toString()))
            .replace("{" + "AttachmentID" + "}", localVarApiClient.escapeString(attachmentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepeatingInvoiceAttachmentByIdValidateBeforeCall(String xeroTenantId, UUID repeatingInvoiceID, UUID attachmentID, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getRepeatingInvoiceAttachmentById(Async)");
        }

        // verify the required parameter 'repeatingInvoiceID' is set
        if (repeatingInvoiceID == null) {
            throw new ApiException("Missing the required parameter 'repeatingInvoiceID' when calling getRepeatingInvoiceAttachmentById(Async)");
        }

        // verify the required parameter 'attachmentID' is set
        if (attachmentID == null) {
            throw new ApiException("Missing the required parameter 'attachmentID' when calling getRepeatingInvoiceAttachmentById(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getRepeatingInvoiceAttachmentById(Async)");
        }

        return getRepeatingInvoiceAttachmentByIdCall(xeroTenantId, repeatingInvoiceID, attachmentID, contentType, _callback);

    }

    /**
     * Retrieves a specific attachment from a specific repeating invoice
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Repeating Invoice as binary data </td><td>  -  </td></tr>
     </table>
     */
    public File getRepeatingInvoiceAttachmentById(String xeroTenantId, UUID repeatingInvoiceID, UUID attachmentID, String contentType) throws ApiException {
        ApiResponse<File> localVarResp = getRepeatingInvoiceAttachmentByIdWithHttpInfo(xeroTenantId, repeatingInvoiceID, attachmentID, contentType);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific attachment from a specific repeating invoice
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Repeating Invoice as binary data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getRepeatingInvoiceAttachmentByIdWithHttpInfo(String xeroTenantId, UUID repeatingInvoiceID, UUID attachmentID, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getRepeatingInvoiceAttachmentByIdValidateBeforeCall(xeroTenantId, repeatingInvoiceID, attachmentID, contentType, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific attachment from a specific repeating invoice (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param attachmentID Unique identifier for a Attachment (required)
     * @param contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of attachment for Repeating Invoice as binary data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepeatingInvoiceAttachmentByIdAsync(String xeroTenantId, UUID repeatingInvoiceID, UUID attachmentID, String contentType, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepeatingInvoiceAttachmentByIdValidateBeforeCall(xeroTenantId, repeatingInvoiceID, attachmentID, contentType, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepeatingInvoiceAttachments
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with all Attachments for a specified Repeating Invoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepeatingInvoiceAttachmentsCall(String xeroTenantId, UUID repeatingInvoiceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/RepeatingInvoices/{RepeatingInvoiceID}/Attachments"
            .replace("{" + "RepeatingInvoiceID" + "}", localVarApiClient.escapeString(repeatingInvoiceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepeatingInvoiceAttachmentsValidateBeforeCall(String xeroTenantId, UUID repeatingInvoiceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getRepeatingInvoiceAttachments(Async)");
        }

        // verify the required parameter 'repeatingInvoiceID' is set
        if (repeatingInvoiceID == null) {
            throw new ApiException("Missing the required parameter 'repeatingInvoiceID' when calling getRepeatingInvoiceAttachments(Async)");
        }

        return getRepeatingInvoiceAttachmentsCall(xeroTenantId, repeatingInvoiceID, _callback);

    }

    /**
     * Retrieves attachments from a specific repeating invoice
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with all Attachments for a specified Repeating Invoice </td><td>  -  </td></tr>
     </table>
     */
    public Attachments getRepeatingInvoiceAttachments(String xeroTenantId, UUID repeatingInvoiceID) throws ApiException {
        ApiResponse<Attachments> localVarResp = getRepeatingInvoiceAttachmentsWithHttpInfo(xeroTenantId, repeatingInvoiceID);
        return localVarResp.getData();
    }

    /**
     * Retrieves attachments from a specific repeating invoice
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with all Attachments for a specified Repeating Invoice </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> getRepeatingInvoiceAttachmentsWithHttpInfo(String xeroTenantId, UUID repeatingInvoiceID) throws ApiException {
        okhttp3.Call localVarCall = getRepeatingInvoiceAttachmentsValidateBeforeCall(xeroTenantId, repeatingInvoiceID, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves attachments from a specific repeating invoice (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with all Attachments for a specified Repeating Invoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepeatingInvoiceAttachmentsAsync(String xeroTenantId, UUID repeatingInvoiceID, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepeatingInvoiceAttachmentsValidateBeforeCall(xeroTenantId, repeatingInvoiceID, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepeatingInvoiceHistory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepeatingInvoiceHistoryCall(String xeroTenantId, UUID repeatingInvoiceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/RepeatingInvoices/{RepeatingInvoiceID}/History"
            .replace("{" + "RepeatingInvoiceID" + "}", localVarApiClient.escapeString(repeatingInvoiceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepeatingInvoiceHistoryValidateBeforeCall(String xeroTenantId, UUID repeatingInvoiceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getRepeatingInvoiceHistory(Async)");
        }

        // verify the required parameter 'repeatingInvoiceID' is set
        if (repeatingInvoiceID == null) {
            throw new ApiException("Missing the required parameter 'repeatingInvoiceID' when calling getRepeatingInvoiceHistory(Async)");
        }

        return getRepeatingInvoiceHistoryCall(xeroTenantId, repeatingInvoiceID, _callback);

    }

    /**
     * Retrieves history record for a specific repeating invoice
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @return HistoryRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public HistoryRecords getRepeatingInvoiceHistory(String xeroTenantId, UUID repeatingInvoiceID) throws ApiException {
        ApiResponse<HistoryRecords> localVarResp = getRepeatingInvoiceHistoryWithHttpInfo(xeroTenantId, repeatingInvoiceID);
        return localVarResp.getData();
    }

    /**
     * Retrieves history record for a specific repeating invoice
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @return ApiResponse&lt;HistoryRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryRecords> getRepeatingInvoiceHistoryWithHttpInfo(String xeroTenantId, UUID repeatingInvoiceID) throws ApiException {
        okhttp3.Call localVarCall = getRepeatingInvoiceHistoryValidateBeforeCall(xeroTenantId, repeatingInvoiceID, null);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves history record for a specific repeating invoice (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of HistoryRecords array of 0 to N HistoryRecord </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepeatingInvoiceHistoryAsync(String xeroTenantId, UUID repeatingInvoiceID, final ApiCallback<HistoryRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepeatingInvoiceHistoryValidateBeforeCall(xeroTenantId, repeatingInvoiceID, _callback);
        Type localVarReturnType = new TypeToken<HistoryRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepeatingInvoices
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Repeating Invoices array for all Repeating Invoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepeatingInvoicesCall(String xeroTenantId, String where, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/RepeatingInvoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepeatingInvoicesValidateBeforeCall(String xeroTenantId, String where, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getRepeatingInvoices(Async)");
        }

        return getRepeatingInvoicesCall(xeroTenantId, where, order, _callback);

    }

    /**
     * Retrieves repeating invoices
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @return RepeatingInvoices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Repeating Invoices array for all Repeating Invoice </td><td>  -  </td></tr>
     </table>
     */
    public RepeatingInvoices getRepeatingInvoices(String xeroTenantId, String where, String order) throws ApiException {
        ApiResponse<RepeatingInvoices> localVarResp = getRepeatingInvoicesWithHttpInfo(xeroTenantId, where, order);
        return localVarResp.getData();
    }

    /**
     * Retrieves repeating invoices
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @return ApiResponse&lt;RepeatingInvoices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Repeating Invoices array for all Repeating Invoice </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepeatingInvoices> getRepeatingInvoicesWithHttpInfo(String xeroTenantId, String where, String order) throws ApiException {
        okhttp3.Call localVarCall = getRepeatingInvoicesValidateBeforeCall(xeroTenantId, where, order, null);
        Type localVarReturnType = new TypeToken<RepeatingInvoices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves repeating invoices (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Repeating Invoices array for all Repeating Invoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepeatingInvoicesAsync(String xeroTenantId, String where, String order, final ApiCallback<RepeatingInvoices> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepeatingInvoicesValidateBeforeCall(xeroTenantId, where, order, _callback);
        Type localVarReturnType = new TypeToken<RepeatingInvoices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportAgedPayablesByContact
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactId Unique identifier for a Contact (required)
     * @param date The date of the Aged Payables By Contact report (optional)
     * @param fromDate The from date of the Aged Payables By Contact report (optional)
     * @param toDate The to date of the Aged Payables By Contact report (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportAgedPayablesByContactCall(String xeroTenantId, UUID contactId, LocalDate date, LocalDate fromDate, LocalDate toDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/AgedPayablesByContact";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contactId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contactId", contactId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportAgedPayablesByContactValidateBeforeCall(String xeroTenantId, UUID contactId, LocalDate date, LocalDate fromDate, LocalDate toDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getReportAgedPayablesByContact(Async)");
        }

        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling getReportAgedPayablesByContact(Async)");
        }

        return getReportAgedPayablesByContactCall(xeroTenantId, contactId, date, fromDate, toDate, _callback);

    }

    /**
     * Retrieves report for aged payables by contact
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactId Unique identifier for a Contact (required)
     * @param date The date of the Aged Payables By Contact report (optional)
     * @param fromDate The from date of the Aged Payables By Contact report (optional)
     * @param toDate The to date of the Aged Payables By Contact report (optional)
     * @return ReportWithRows
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public ReportWithRows getReportAgedPayablesByContact(String xeroTenantId, UUID contactId, LocalDate date, LocalDate fromDate, LocalDate toDate) throws ApiException {
        ApiResponse<ReportWithRows> localVarResp = getReportAgedPayablesByContactWithHttpInfo(xeroTenantId, contactId, date, fromDate, toDate);
        return localVarResp.getData();
    }

    /**
     * Retrieves report for aged payables by contact
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactId Unique identifier for a Contact (required)
     * @param date The date of the Aged Payables By Contact report (optional)
     * @param fromDate The from date of the Aged Payables By Contact report (optional)
     * @param toDate The to date of the Aged Payables By Contact report (optional)
     * @return ApiResponse&lt;ReportWithRows&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportWithRows> getReportAgedPayablesByContactWithHttpInfo(String xeroTenantId, UUID contactId, LocalDate date, LocalDate fromDate, LocalDate toDate) throws ApiException {
        okhttp3.Call localVarCall = getReportAgedPayablesByContactValidateBeforeCall(xeroTenantId, contactId, date, fromDate, toDate, null);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves report for aged payables by contact (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactId Unique identifier for a Contact (required)
     * @param date The date of the Aged Payables By Contact report (optional)
     * @param fromDate The from date of the Aged Payables By Contact report (optional)
     * @param toDate The to date of the Aged Payables By Contact report (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportAgedPayablesByContactAsync(String xeroTenantId, UUID contactId, LocalDate date, LocalDate fromDate, LocalDate toDate, final ApiCallback<ReportWithRows> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportAgedPayablesByContactValidateBeforeCall(xeroTenantId, contactId, date, fromDate, toDate, _callback);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportAgedReceivablesByContact
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactId Unique identifier for a Contact (required)
     * @param date The date of the Aged Receivables By Contact report (optional)
     * @param fromDate The from date of the Aged Receivables By Contact report (optional)
     * @param toDate The to date of the Aged Receivables By Contact report (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportAgedReceivablesByContactCall(String xeroTenantId, UUID contactId, LocalDate date, LocalDate fromDate, LocalDate toDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/AgedReceivablesByContact";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contactId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contactId", contactId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportAgedReceivablesByContactValidateBeforeCall(String xeroTenantId, UUID contactId, LocalDate date, LocalDate fromDate, LocalDate toDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getReportAgedReceivablesByContact(Async)");
        }

        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling getReportAgedReceivablesByContact(Async)");
        }

        return getReportAgedReceivablesByContactCall(xeroTenantId, contactId, date, fromDate, toDate, _callback);

    }

    /**
     * Retrieves report for aged receivables by contact
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactId Unique identifier for a Contact (required)
     * @param date The date of the Aged Receivables By Contact report (optional)
     * @param fromDate The from date of the Aged Receivables By Contact report (optional)
     * @param toDate The to date of the Aged Receivables By Contact report (optional)
     * @return ReportWithRows
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public ReportWithRows getReportAgedReceivablesByContact(String xeroTenantId, UUID contactId, LocalDate date, LocalDate fromDate, LocalDate toDate) throws ApiException {
        ApiResponse<ReportWithRows> localVarResp = getReportAgedReceivablesByContactWithHttpInfo(xeroTenantId, contactId, date, fromDate, toDate);
        return localVarResp.getData();
    }

    /**
     * Retrieves report for aged receivables by contact
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactId Unique identifier for a Contact (required)
     * @param date The date of the Aged Receivables By Contact report (optional)
     * @param fromDate The from date of the Aged Receivables By Contact report (optional)
     * @param toDate The to date of the Aged Receivables By Contact report (optional)
     * @return ApiResponse&lt;ReportWithRows&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportWithRows> getReportAgedReceivablesByContactWithHttpInfo(String xeroTenantId, UUID contactId, LocalDate date, LocalDate fromDate, LocalDate toDate) throws ApiException {
        okhttp3.Call localVarCall = getReportAgedReceivablesByContactValidateBeforeCall(xeroTenantId, contactId, date, fromDate, toDate, null);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves report for aged receivables by contact (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactId Unique identifier for a Contact (required)
     * @param date The date of the Aged Receivables By Contact report (optional)
     * @param fromDate The from date of the Aged Receivables By Contact report (optional)
     * @param toDate The to date of the Aged Receivables By Contact report (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportAgedReceivablesByContactAsync(String xeroTenantId, UUID contactId, LocalDate date, LocalDate fromDate, LocalDate toDate, final ApiCallback<ReportWithRows> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportAgedReceivablesByContactValidateBeforeCall(xeroTenantId, contactId, date, fromDate, toDate, _callback);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportBASorGST
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param reportID Unique identifier for a Report (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportBASorGSTCall(String xeroTenantId, String reportID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/{ReportID}"
            .replace("{" + "ReportID" + "}", localVarApiClient.escapeString(reportID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportBASorGSTValidateBeforeCall(String xeroTenantId, String reportID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getReportBASorGST(Async)");
        }

        // verify the required parameter 'reportID' is set
        if (reportID == null) {
            throw new ApiException("Missing the required parameter 'reportID' when calling getReportBASorGST(Async)");
        }

        return getReportBASorGSTCall(xeroTenantId, reportID, _callback);

    }

    /**
     * Retrieves a specific report for BAS using a unique report Id (only valid for AU orgs)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param reportID Unique identifier for a Report (required)
     * @return ReportWithRows
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public ReportWithRows getReportBASorGST(String xeroTenantId, String reportID) throws ApiException {
        ApiResponse<ReportWithRows> localVarResp = getReportBASorGSTWithHttpInfo(xeroTenantId, reportID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific report for BAS using a unique report Id (only valid for AU orgs)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param reportID Unique identifier for a Report (required)
     * @return ApiResponse&lt;ReportWithRows&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportWithRows> getReportBASorGSTWithHttpInfo(String xeroTenantId, String reportID) throws ApiException {
        okhttp3.Call localVarCall = getReportBASorGSTValidateBeforeCall(xeroTenantId, reportID, null);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific report for BAS using a unique report Id (only valid for AU orgs) (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param reportID Unique identifier for a Report (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportBASorGSTAsync(String xeroTenantId, String reportID, final ApiCallback<ReportWithRows> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportBASorGSTValidateBeforeCall(xeroTenantId, reportID, _callback);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportBASorGSTList
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportBASorGSTListCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportBASorGSTListValidateBeforeCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getReportBASorGSTList(Async)");
        }

        return getReportBASorGSTListCall(xeroTenantId, _callback);

    }

    /**
     * Retrieves report for BAS (only valid for AU orgs)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return ReportWithRows
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public ReportWithRows getReportBASorGSTList(String xeroTenantId) throws ApiException {
        ApiResponse<ReportWithRows> localVarResp = getReportBASorGSTListWithHttpInfo(xeroTenantId);
        return localVarResp.getData();
    }

    /**
     * Retrieves report for BAS (only valid for AU orgs)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return ApiResponse&lt;ReportWithRows&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportWithRows> getReportBASorGSTListWithHttpInfo(String xeroTenantId) throws ApiException {
        okhttp3.Call localVarCall = getReportBASorGSTListValidateBeforeCall(xeroTenantId, null);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves report for BAS (only valid for AU orgs) (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportBASorGSTListAsync(String xeroTenantId, final ApiCallback<ReportWithRows> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportBASorGSTListValidateBeforeCall(xeroTenantId, _callback);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportBalanceSheet
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param date The date of the Balance Sheet report (optional)
     * @param periods The number of periods for the Balance Sheet report (optional)
     * @param timeframe The period size to compare to (MONTH, QUARTER, YEAR) (optional)
     * @param trackingOptionID1 The tracking option 1 for the Balance Sheet report (optional)
     * @param trackingOptionID2 The tracking option 2 for the Balance Sheet report (optional)
     * @param standardLayout The standard layout boolean for the Balance Sheet report (optional)
     * @param paymentsOnly return a cash basis for the Balance Sheet report (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportBalanceSheetCall(String xeroTenantId, LocalDate date, Integer periods, String timeframe, String trackingOptionID1, String trackingOptionID2, Boolean standardLayout, Boolean paymentsOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/BalanceSheet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (periods != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periods", periods));
        }

        if (timeframe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeframe", timeframe));
        }

        if (trackingOptionID1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trackingOptionID1", trackingOptionID1));
        }

        if (trackingOptionID2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trackingOptionID2", trackingOptionID2));
        }

        if (standardLayout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("standardLayout", standardLayout));
        }

        if (paymentsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentsOnly", paymentsOnly));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportBalanceSheetValidateBeforeCall(String xeroTenantId, LocalDate date, Integer periods, String timeframe, String trackingOptionID1, String trackingOptionID2, Boolean standardLayout, Boolean paymentsOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getReportBalanceSheet(Async)");
        }

        return getReportBalanceSheetCall(xeroTenantId, date, periods, timeframe, trackingOptionID1, trackingOptionID2, standardLayout, paymentsOnly, _callback);

    }

    /**
     * Retrieves report for balancesheet
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param date The date of the Balance Sheet report (optional)
     * @param periods The number of periods for the Balance Sheet report (optional)
     * @param timeframe The period size to compare to (MONTH, QUARTER, YEAR) (optional)
     * @param trackingOptionID1 The tracking option 1 for the Balance Sheet report (optional)
     * @param trackingOptionID2 The tracking option 2 for the Balance Sheet report (optional)
     * @param standardLayout The standard layout boolean for the Balance Sheet report (optional)
     * @param paymentsOnly return a cash basis for the Balance Sheet report (optional)
     * @return ReportWithRows
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public ReportWithRows getReportBalanceSheet(String xeroTenantId, LocalDate date, Integer periods, String timeframe, String trackingOptionID1, String trackingOptionID2, Boolean standardLayout, Boolean paymentsOnly) throws ApiException {
        ApiResponse<ReportWithRows> localVarResp = getReportBalanceSheetWithHttpInfo(xeroTenantId, date, periods, timeframe, trackingOptionID1, trackingOptionID2, standardLayout, paymentsOnly);
        return localVarResp.getData();
    }

    /**
     * Retrieves report for balancesheet
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param date The date of the Balance Sheet report (optional)
     * @param periods The number of periods for the Balance Sheet report (optional)
     * @param timeframe The period size to compare to (MONTH, QUARTER, YEAR) (optional)
     * @param trackingOptionID1 The tracking option 1 for the Balance Sheet report (optional)
     * @param trackingOptionID2 The tracking option 2 for the Balance Sheet report (optional)
     * @param standardLayout The standard layout boolean for the Balance Sheet report (optional)
     * @param paymentsOnly return a cash basis for the Balance Sheet report (optional)
     * @return ApiResponse&lt;ReportWithRows&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportWithRows> getReportBalanceSheetWithHttpInfo(String xeroTenantId, LocalDate date, Integer periods, String timeframe, String trackingOptionID1, String trackingOptionID2, Boolean standardLayout, Boolean paymentsOnly) throws ApiException {
        okhttp3.Call localVarCall = getReportBalanceSheetValidateBeforeCall(xeroTenantId, date, periods, timeframe, trackingOptionID1, trackingOptionID2, standardLayout, paymentsOnly, null);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves report for balancesheet (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param date The date of the Balance Sheet report (optional)
     * @param periods The number of periods for the Balance Sheet report (optional)
     * @param timeframe The period size to compare to (MONTH, QUARTER, YEAR) (optional)
     * @param trackingOptionID1 The tracking option 1 for the Balance Sheet report (optional)
     * @param trackingOptionID2 The tracking option 2 for the Balance Sheet report (optional)
     * @param standardLayout The standard layout boolean for the Balance Sheet report (optional)
     * @param paymentsOnly return a cash basis for the Balance Sheet report (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportBalanceSheetAsync(String xeroTenantId, LocalDate date, Integer periods, String timeframe, String trackingOptionID1, String trackingOptionID2, Boolean standardLayout, Boolean paymentsOnly, final ApiCallback<ReportWithRows> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportBalanceSheetValidateBeforeCall(xeroTenantId, date, periods, timeframe, trackingOptionID1, trackingOptionID2, standardLayout, paymentsOnly, _callback);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportBankSummary
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fromDate The from date for the Bank Summary report e.g. 2018-03-31 (optional)
     * @param toDate The to date for the Bank Summary report e.g. 2018-03-31 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportBankSummaryCall(String xeroTenantId, LocalDate fromDate, LocalDate toDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/BankSummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportBankSummaryValidateBeforeCall(String xeroTenantId, LocalDate fromDate, LocalDate toDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getReportBankSummary(Async)");
        }

        return getReportBankSummaryCall(xeroTenantId, fromDate, toDate, _callback);

    }

    /**
     * Retrieves report for bank summary
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fromDate The from date for the Bank Summary report e.g. 2018-03-31 (optional)
     * @param toDate The to date for the Bank Summary report e.g. 2018-03-31 (optional)
     * @return ReportWithRows
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public ReportWithRows getReportBankSummary(String xeroTenantId, LocalDate fromDate, LocalDate toDate) throws ApiException {
        ApiResponse<ReportWithRows> localVarResp = getReportBankSummaryWithHttpInfo(xeroTenantId, fromDate, toDate);
        return localVarResp.getData();
    }

    /**
     * Retrieves report for bank summary
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fromDate The from date for the Bank Summary report e.g. 2018-03-31 (optional)
     * @param toDate The to date for the Bank Summary report e.g. 2018-03-31 (optional)
     * @return ApiResponse&lt;ReportWithRows&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportWithRows> getReportBankSummaryWithHttpInfo(String xeroTenantId, LocalDate fromDate, LocalDate toDate) throws ApiException {
        okhttp3.Call localVarCall = getReportBankSummaryValidateBeforeCall(xeroTenantId, fromDate, toDate, null);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves report for bank summary (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fromDate The from date for the Bank Summary report e.g. 2018-03-31 (optional)
     * @param toDate The to date for the Bank Summary report e.g. 2018-03-31 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportBankSummaryAsync(String xeroTenantId, LocalDate fromDate, LocalDate toDate, final ApiCallback<ReportWithRows> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportBankSummaryValidateBeforeCall(xeroTenantId, fromDate, toDate, _callback);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportBudgetSummary
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param date The date for the Bank Summary report e.g. 2018-03-31 (optional)
     * @param period The number of periods to compare (integer between 1 and 12) (optional)
     * @param timeframe The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success- return a Report with Rows object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportBudgetSummaryCall(String xeroTenantId, LocalDate date, Integer period, Integer timeframe, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/BudgetSummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (timeframe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeframe", timeframe));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportBudgetSummaryValidateBeforeCall(String xeroTenantId, LocalDate date, Integer period, Integer timeframe, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getReportBudgetSummary(Async)");
        }

        return getReportBudgetSummaryCall(xeroTenantId, date, period, timeframe, _callback);

    }

    /**
     * Retrieves report for budget summary
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param date The date for the Bank Summary report e.g. 2018-03-31 (optional)
     * @param period The number of periods to compare (integer between 1 and 12) (optional)
     * @param timeframe The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)
     * @return ReportWithRows
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success- return a Report with Rows object </td><td>  -  </td></tr>
     </table>
     */
    public ReportWithRows getReportBudgetSummary(String xeroTenantId, LocalDate date, Integer period, Integer timeframe) throws ApiException {
        ApiResponse<ReportWithRows> localVarResp = getReportBudgetSummaryWithHttpInfo(xeroTenantId, date, period, timeframe);
        return localVarResp.getData();
    }

    /**
     * Retrieves report for budget summary
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param date The date for the Bank Summary report e.g. 2018-03-31 (optional)
     * @param period The number of periods to compare (integer between 1 and 12) (optional)
     * @param timeframe The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)
     * @return ApiResponse&lt;ReportWithRows&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success- return a Report with Rows object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportWithRows> getReportBudgetSummaryWithHttpInfo(String xeroTenantId, LocalDate date, Integer period, Integer timeframe) throws ApiException {
        okhttp3.Call localVarCall = getReportBudgetSummaryValidateBeforeCall(xeroTenantId, date, period, timeframe, null);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves report for budget summary (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param date The date for the Bank Summary report e.g. 2018-03-31 (optional)
     * @param period The number of periods to compare (integer between 1 and 12) (optional)
     * @param timeframe The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success- return a Report with Rows object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportBudgetSummaryAsync(String xeroTenantId, LocalDate date, Integer period, Integer timeframe, final ApiCallback<ReportWithRows> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportBudgetSummaryValidateBeforeCall(xeroTenantId, date, period, timeframe, _callback);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportExecutiveSummary
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param date The date for the Bank Summary report e.g. 2018-03-31 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportExecutiveSummaryCall(String xeroTenantId, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/ExecutiveSummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportExecutiveSummaryValidateBeforeCall(String xeroTenantId, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getReportExecutiveSummary(Async)");
        }

        return getReportExecutiveSummaryCall(xeroTenantId, date, _callback);

    }

    /**
     * Retrieves report for executive summary
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param date The date for the Bank Summary report e.g. 2018-03-31 (optional)
     * @return ReportWithRows
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public ReportWithRows getReportExecutiveSummary(String xeroTenantId, LocalDate date) throws ApiException {
        ApiResponse<ReportWithRows> localVarResp = getReportExecutiveSummaryWithHttpInfo(xeroTenantId, date);
        return localVarResp.getData();
    }

    /**
     * Retrieves report for executive summary
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param date The date for the Bank Summary report e.g. 2018-03-31 (optional)
     * @return ApiResponse&lt;ReportWithRows&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportWithRows> getReportExecutiveSummaryWithHttpInfo(String xeroTenantId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = getReportExecutiveSummaryValidateBeforeCall(xeroTenantId, date, null);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves report for executive summary (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param date The date for the Bank Summary report e.g. 2018-03-31 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportExecutiveSummaryAsync(String xeroTenantId, LocalDate date, final ApiCallback<ReportWithRows> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportExecutiveSummaryValidateBeforeCall(xeroTenantId, date, _callback);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportProfitAndLoss
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fromDate The from date for the ProfitAndLoss report e.g. 2018-03-31 (optional)
     * @param toDate The to date for the ProfitAndLoss report e.g. 2018-03-31 (optional)
     * @param periods The number of periods to compare (integer between 1 and 12) (optional)
     * @param timeframe The period size to compare to (MONTH, QUARTER, YEAR) (optional)
     * @param trackingCategoryID The trackingCategory 1 for the ProfitAndLoss report (optional)
     * @param trackingCategoryID2 The trackingCategory 2 for the ProfitAndLoss report (optional)
     * @param trackingOptionID The tracking option 1 for the ProfitAndLoss report (optional)
     * @param trackingOptionID2 The tracking option 2 for the ProfitAndLoss report (optional)
     * @param standardLayout Return the standard layout for the ProfitAndLoss report (optional)
     * @param paymentsOnly Return cash only basis for the ProfitAndLoss report (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportProfitAndLossCall(String xeroTenantId, LocalDate fromDate, LocalDate toDate, Integer periods, String timeframe, String trackingCategoryID, String trackingCategoryID2, String trackingOptionID, String trackingOptionID2, Boolean standardLayout, Boolean paymentsOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/ProfitAndLoss";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (periods != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periods", periods));
        }

        if (timeframe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeframe", timeframe));
        }

        if (trackingCategoryID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trackingCategoryID", trackingCategoryID));
        }

        if (trackingCategoryID2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trackingCategoryID2", trackingCategoryID2));
        }

        if (trackingOptionID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trackingOptionID", trackingOptionID));
        }

        if (trackingOptionID2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trackingOptionID2", trackingOptionID2));
        }

        if (standardLayout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("standardLayout", standardLayout));
        }

        if (paymentsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentsOnly", paymentsOnly));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportProfitAndLossValidateBeforeCall(String xeroTenantId, LocalDate fromDate, LocalDate toDate, Integer periods, String timeframe, String trackingCategoryID, String trackingCategoryID2, String trackingOptionID, String trackingOptionID2, Boolean standardLayout, Boolean paymentsOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getReportProfitAndLoss(Async)");
        }

        return getReportProfitAndLossCall(xeroTenantId, fromDate, toDate, periods, timeframe, trackingCategoryID, trackingCategoryID2, trackingOptionID, trackingOptionID2, standardLayout, paymentsOnly, _callback);

    }

    /**
     * Retrieves report for profit and loss
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fromDate The from date for the ProfitAndLoss report e.g. 2018-03-31 (optional)
     * @param toDate The to date for the ProfitAndLoss report e.g. 2018-03-31 (optional)
     * @param periods The number of periods to compare (integer between 1 and 12) (optional)
     * @param timeframe The period size to compare to (MONTH, QUARTER, YEAR) (optional)
     * @param trackingCategoryID The trackingCategory 1 for the ProfitAndLoss report (optional)
     * @param trackingCategoryID2 The trackingCategory 2 for the ProfitAndLoss report (optional)
     * @param trackingOptionID The tracking option 1 for the ProfitAndLoss report (optional)
     * @param trackingOptionID2 The tracking option 2 for the ProfitAndLoss report (optional)
     * @param standardLayout Return the standard layout for the ProfitAndLoss report (optional)
     * @param paymentsOnly Return cash only basis for the ProfitAndLoss report (optional)
     * @return ReportWithRows
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public ReportWithRows getReportProfitAndLoss(String xeroTenantId, LocalDate fromDate, LocalDate toDate, Integer periods, String timeframe, String trackingCategoryID, String trackingCategoryID2, String trackingOptionID, String trackingOptionID2, Boolean standardLayout, Boolean paymentsOnly) throws ApiException {
        ApiResponse<ReportWithRows> localVarResp = getReportProfitAndLossWithHttpInfo(xeroTenantId, fromDate, toDate, periods, timeframe, trackingCategoryID, trackingCategoryID2, trackingOptionID, trackingOptionID2, standardLayout, paymentsOnly);
        return localVarResp.getData();
    }

    /**
     * Retrieves report for profit and loss
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fromDate The from date for the ProfitAndLoss report e.g. 2018-03-31 (optional)
     * @param toDate The to date for the ProfitAndLoss report e.g. 2018-03-31 (optional)
     * @param periods The number of periods to compare (integer between 1 and 12) (optional)
     * @param timeframe The period size to compare to (MONTH, QUARTER, YEAR) (optional)
     * @param trackingCategoryID The trackingCategory 1 for the ProfitAndLoss report (optional)
     * @param trackingCategoryID2 The trackingCategory 2 for the ProfitAndLoss report (optional)
     * @param trackingOptionID The tracking option 1 for the ProfitAndLoss report (optional)
     * @param trackingOptionID2 The tracking option 2 for the ProfitAndLoss report (optional)
     * @param standardLayout Return the standard layout for the ProfitAndLoss report (optional)
     * @param paymentsOnly Return cash only basis for the ProfitAndLoss report (optional)
     * @return ApiResponse&lt;ReportWithRows&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportWithRows> getReportProfitAndLossWithHttpInfo(String xeroTenantId, LocalDate fromDate, LocalDate toDate, Integer periods, String timeframe, String trackingCategoryID, String trackingCategoryID2, String trackingOptionID, String trackingOptionID2, Boolean standardLayout, Boolean paymentsOnly) throws ApiException {
        okhttp3.Call localVarCall = getReportProfitAndLossValidateBeforeCall(xeroTenantId, fromDate, toDate, periods, timeframe, trackingCategoryID, trackingCategoryID2, trackingOptionID, trackingOptionID2, standardLayout, paymentsOnly, null);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves report for profit and loss (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param fromDate The from date for the ProfitAndLoss report e.g. 2018-03-31 (optional)
     * @param toDate The to date for the ProfitAndLoss report e.g. 2018-03-31 (optional)
     * @param periods The number of periods to compare (integer between 1 and 12) (optional)
     * @param timeframe The period size to compare to (MONTH, QUARTER, YEAR) (optional)
     * @param trackingCategoryID The trackingCategory 1 for the ProfitAndLoss report (optional)
     * @param trackingCategoryID2 The trackingCategory 2 for the ProfitAndLoss report (optional)
     * @param trackingOptionID The tracking option 1 for the ProfitAndLoss report (optional)
     * @param trackingOptionID2 The tracking option 2 for the ProfitAndLoss report (optional)
     * @param standardLayout Return the standard layout for the ProfitAndLoss report (optional)
     * @param paymentsOnly Return cash only basis for the ProfitAndLoss report (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportProfitAndLossAsync(String xeroTenantId, LocalDate fromDate, LocalDate toDate, Integer periods, String timeframe, String trackingCategoryID, String trackingCategoryID2, String trackingOptionID, String trackingOptionID2, Boolean standardLayout, Boolean paymentsOnly, final ApiCallback<ReportWithRows> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportProfitAndLossValidateBeforeCall(xeroTenantId, fromDate, toDate, periods, timeframe, trackingCategoryID, trackingCategoryID2, trackingOptionID, trackingOptionID2, standardLayout, paymentsOnly, _callback);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportTenNinetyNine
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param reportYear The year of the 1099 report (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Reports </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportTenNinetyNineCall(String xeroTenantId, String reportYear, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/TenNinetyNine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reportYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reportYear", reportYear));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportTenNinetyNineValidateBeforeCall(String xeroTenantId, String reportYear, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getReportTenNinetyNine(Async)");
        }

        return getReportTenNinetyNineCall(xeroTenantId, reportYear, _callback);

    }

    /**
     * Retrieve reports for 1099
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param reportYear The year of the 1099 report (optional)
     * @return Reports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Reports </td><td>  -  </td></tr>
     </table>
     */
    public Reports getReportTenNinetyNine(String xeroTenantId, String reportYear) throws ApiException {
        ApiResponse<Reports> localVarResp = getReportTenNinetyNineWithHttpInfo(xeroTenantId, reportYear);
        return localVarResp.getData();
    }

    /**
     * Retrieve reports for 1099
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param reportYear The year of the 1099 report (optional)
     * @return ApiResponse&lt;Reports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Reports </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reports> getReportTenNinetyNineWithHttpInfo(String xeroTenantId, String reportYear) throws ApiException {
        okhttp3.Call localVarCall = getReportTenNinetyNineValidateBeforeCall(xeroTenantId, reportYear, null);
        Type localVarReturnType = new TypeToken<Reports>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve reports for 1099 (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param reportYear The year of the 1099 report (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Reports </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportTenNinetyNineAsync(String xeroTenantId, String reportYear, final ApiCallback<Reports> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportTenNinetyNineValidateBeforeCall(xeroTenantId, reportYear, _callback);
        Type localVarReturnType = new TypeToken<Reports>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportTrialBalance
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param date The date for the Trial Balance report e.g. 2018-03-31 (optional)
     * @param paymentsOnly Return cash only basis for the Trial Balance report (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportTrialBalanceCall(String xeroTenantId, LocalDate date, Boolean paymentsOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports/TrialBalance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (paymentsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentsOnly", paymentsOnly));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportTrialBalanceValidateBeforeCall(String xeroTenantId, LocalDate date, Boolean paymentsOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getReportTrialBalance(Async)");
        }

        return getReportTrialBalanceCall(xeroTenantId, date, paymentsOnly, _callback);

    }

    /**
     * Retrieves report for trial balance
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param date The date for the Trial Balance report e.g. 2018-03-31 (optional)
     * @param paymentsOnly Return cash only basis for the Trial Balance report (optional)
     * @return ReportWithRows
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public ReportWithRows getReportTrialBalance(String xeroTenantId, LocalDate date, Boolean paymentsOnly) throws ApiException {
        ApiResponse<ReportWithRows> localVarResp = getReportTrialBalanceWithHttpInfo(xeroTenantId, date, paymentsOnly);
        return localVarResp.getData();
    }

    /**
     * Retrieves report for trial balance
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param date The date for the Trial Balance report e.g. 2018-03-31 (optional)
     * @param paymentsOnly Return cash only basis for the Trial Balance report (optional)
     * @return ApiResponse&lt;ReportWithRows&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportWithRows> getReportTrialBalanceWithHttpInfo(String xeroTenantId, LocalDate date, Boolean paymentsOnly) throws ApiException {
        okhttp3.Call localVarCall = getReportTrialBalanceValidateBeforeCall(xeroTenantId, date, paymentsOnly, null);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves report for trial balance (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param date The date for the Trial Balance report e.g. 2018-03-31 (optional)
     * @param paymentsOnly Return cash only basis for the Trial Balance report (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ReportWithRows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportTrialBalanceAsync(String xeroTenantId, LocalDate date, Boolean paymentsOnly, final ApiCallback<ReportWithRows> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportTrialBalanceValidateBeforeCall(xeroTenantId, date, paymentsOnly, _callback);
        Type localVarReturnType = new TypeToken<ReportWithRows>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaxRates
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param taxType Filter by tax type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TaxRates array with TaxRates </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaxRatesCall(String xeroTenantId, String where, String order, String taxType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/TaxRates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (taxType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaxType", taxType));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaxRatesValidateBeforeCall(String xeroTenantId, String where, String order, String taxType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getTaxRates(Async)");
        }

        return getTaxRatesCall(xeroTenantId, where, order, taxType, _callback);

    }

    /**
     * Retrieves tax rates
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param taxType Filter by tax type (optional)
     * @return TaxRates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TaxRates array with TaxRates </td><td>  -  </td></tr>
     </table>
     */
    public TaxRates getTaxRates(String xeroTenantId, String where, String order, String taxType) throws ApiException {
        ApiResponse<TaxRates> localVarResp = getTaxRatesWithHttpInfo(xeroTenantId, where, order, taxType);
        return localVarResp.getData();
    }

    /**
     * Retrieves tax rates
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param taxType Filter by tax type (optional)
     * @return ApiResponse&lt;TaxRates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TaxRates array with TaxRates </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxRates> getTaxRatesWithHttpInfo(String xeroTenantId, String where, String order, String taxType) throws ApiException {
        okhttp3.Call localVarCall = getTaxRatesValidateBeforeCall(xeroTenantId, where, order, taxType, null);
        Type localVarReturnType = new TypeToken<TaxRates>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves tax rates (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param taxType Filter by tax type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TaxRates array with TaxRates </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaxRatesAsync(String xeroTenantId, String where, String order, String taxType, final ApiCallback<TaxRates> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaxRatesValidateBeforeCall(xeroTenantId, where, order, taxType, _callback);
        Type localVarReturnType = new TypeToken<TaxRates>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackingCategories
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param includeArchived e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of TrackingCategory </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackingCategoriesCall(String xeroTenantId, String where, String order, Boolean includeArchived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/TrackingCategories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (includeArchived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeArchived", includeArchived));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackingCategoriesValidateBeforeCall(String xeroTenantId, String where, String order, Boolean includeArchived, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getTrackingCategories(Async)");
        }

        return getTrackingCategoriesCall(xeroTenantId, where, order, includeArchived, _callback);

    }

    /**
     * Retrieves tracking categories and options
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param includeArchived e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)
     * @return TrackingCategories
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of TrackingCategory </td><td>  -  </td></tr>
     </table>
     */
    public TrackingCategories getTrackingCategories(String xeroTenantId, String where, String order, Boolean includeArchived) throws ApiException {
        ApiResponse<TrackingCategories> localVarResp = getTrackingCategoriesWithHttpInfo(xeroTenantId, where, order, includeArchived);
        return localVarResp.getData();
    }

    /**
     * Retrieves tracking categories and options
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param includeArchived e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)
     * @return ApiResponse&lt;TrackingCategories&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of TrackingCategory </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackingCategories> getTrackingCategoriesWithHttpInfo(String xeroTenantId, String where, String order, Boolean includeArchived) throws ApiException {
        okhttp3.Call localVarCall = getTrackingCategoriesValidateBeforeCall(xeroTenantId, where, order, includeArchived, null);
        Type localVarReturnType = new TypeToken<TrackingCategories>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves tracking categories and options (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param includeArchived e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of TrackingCategory </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackingCategoriesAsync(String xeroTenantId, String where, String order, Boolean includeArchived, final ApiCallback<TrackingCategories> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackingCategoriesValidateBeforeCall(xeroTenantId, where, order, includeArchived, _callback);
        Type localVarReturnType = new TypeToken<TrackingCategories>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackingCategory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of specified TrackingCategory </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackingCategoryCall(String xeroTenantId, UUID trackingCategoryID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/TrackingCategories/{TrackingCategoryID}"
            .replace("{" + "TrackingCategoryID" + "}", localVarApiClient.escapeString(trackingCategoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackingCategoryValidateBeforeCall(String xeroTenantId, UUID trackingCategoryID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getTrackingCategory(Async)");
        }

        // verify the required parameter 'trackingCategoryID' is set
        if (trackingCategoryID == null) {
            throw new ApiException("Missing the required parameter 'trackingCategoryID' when calling getTrackingCategory(Async)");
        }

        return getTrackingCategoryCall(xeroTenantId, trackingCategoryID, _callback);

    }

    /**
     * Retrieves specific tracking categories and options using a unique tracking category Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @return TrackingCategories
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of specified TrackingCategory </td><td>  -  </td></tr>
     </table>
     */
    public TrackingCategories getTrackingCategory(String xeroTenantId, UUID trackingCategoryID) throws ApiException {
        ApiResponse<TrackingCategories> localVarResp = getTrackingCategoryWithHttpInfo(xeroTenantId, trackingCategoryID);
        return localVarResp.getData();
    }

    /**
     * Retrieves specific tracking categories and options using a unique tracking category Id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @return ApiResponse&lt;TrackingCategories&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of specified TrackingCategory </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackingCategories> getTrackingCategoryWithHttpInfo(String xeroTenantId, UUID trackingCategoryID) throws ApiException {
        okhttp3.Call localVarCall = getTrackingCategoryValidateBeforeCall(xeroTenantId, trackingCategoryID, null);
        Type localVarReturnType = new TypeToken<TrackingCategories>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves specific tracking categories and options using a unique tracking category Id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of specified TrackingCategory </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackingCategoryAsync(String xeroTenantId, UUID trackingCategoryID, final ApiCallback<TrackingCategories> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackingCategoryValidateBeforeCall(xeroTenantId, trackingCategoryID, _callback);
        Type localVarReturnType = new TypeToken<TrackingCategories>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param userID Unique identifier for a User (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Users array of specified User </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(String xeroTenantId, UUID userID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Users/{UserID}"
            .replace("{" + "UserID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String xeroTenantId, UUID userID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getUser(Async)");
        }

        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling getUser(Async)");
        }

        return getUserCall(xeroTenantId, userID, _callback);

    }

    /**
     * Retrieves a specific user
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param userID Unique identifier for a User (required)
     * @return Users
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Users array of specified User </td><td>  -  </td></tr>
     </table>
     */
    public Users getUser(String xeroTenantId, UUID userID) throws ApiException {
        ApiResponse<Users> localVarResp = getUserWithHttpInfo(xeroTenantId, userID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific user
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param userID Unique identifier for a User (required)
     * @return ApiResponse&lt;Users&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Users array of specified User </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Users> getUserWithHttpInfo(String xeroTenantId, UUID userID) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(xeroTenantId, userID, null);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific user (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param userID Unique identifier for a User (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Users array of specified User </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(String xeroTenantId, UUID userID, final ApiCallback<Users> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(xeroTenantId, userID, _callback);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsers
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Users array of all User </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersValidateBeforeCall(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getUsers(Async)");
        }

        return getUsersCall(xeroTenantId, ifModifiedSince, where, order, _callback);

    }

    /**
     * Retrieves users
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @return Users
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Users array of all User </td><td>  -  </td></tr>
     </table>
     */
    public Users getUsers(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order) throws ApiException {
        ApiResponse<Users> localVarResp = getUsersWithHttpInfo(xeroTenantId, ifModifiedSince, where, order);
        return localVarResp.getData();
    }

    /**
     * Retrieves users
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @return ApiResponse&lt;Users&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Users array of all User </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Users> getUsersWithHttpInfo(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order) throws ApiException {
        okhttp3.Call localVarCall = getUsersValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, null);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves users (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Users array of all User </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersAsync(String xeroTenantId, OffsetDateTime ifModifiedSince, String where, String order, final ApiCallback<Users> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, _callback);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSetup
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param setup Object including an accounts array, a conversion balances array and a conversion date object in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - returns a summary of the chart of accounts updates </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSetupCall(String xeroTenantId, Setup setup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setup;

        // create path and map variables
        String localVarPath = "/Setup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSetupValidateBeforeCall(String xeroTenantId, Setup setup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling postSetup(Async)");
        }

        // verify the required parameter 'setup' is set
        if (setup == null) {
            throw new ApiException("Missing the required parameter 'setup' when calling postSetup(Async)");
        }

        return postSetupCall(xeroTenantId, setup, _callback);

    }

    /**
     * Sets the chart of accounts, the conversion date and conversion balances
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param setup Object including an accounts array, a conversion balances array and a conversion date object in body of request (required)
     * @return ImportSummaryObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - returns a summary of the chart of accounts updates </td><td>  -  </td></tr>
     </table>
     */
    public ImportSummaryObject postSetup(String xeroTenantId, Setup setup) throws ApiException {
        ApiResponse<ImportSummaryObject> localVarResp = postSetupWithHttpInfo(xeroTenantId, setup);
        return localVarResp.getData();
    }

    /**
     * Sets the chart of accounts, the conversion date and conversion balances
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param setup Object including an accounts array, a conversion balances array and a conversion date object in body of request (required)
     * @return ApiResponse&lt;ImportSummaryObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - returns a summary of the chart of accounts updates </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportSummaryObject> postSetupWithHttpInfo(String xeroTenantId, Setup setup) throws ApiException {
        okhttp3.Call localVarCall = postSetupValidateBeforeCall(xeroTenantId, setup, null);
        Type localVarReturnType = new TypeToken<ImportSummaryObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets the chart of accounts, the conversion date and conversion balances (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param setup Object including an accounts array, a conversion balances array and a conversion date object in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - returns a summary of the chart of accounts updates </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSetupAsync(String xeroTenantId, Setup setup, final ApiCallback<ImportSummaryObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSetupValidateBeforeCall(xeroTenantId, setup, _callback);
        Type localVarReturnType = new TypeToken<ImportSummaryObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccount
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for retrieving single object (required)
     * @param accounts Request of type Accounts array with one Account (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - update existing Account and return response of type Accounts array with updated Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountCall(String xeroTenantId, UUID accountID, Accounts accounts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accounts;

        // create path and map variables
        String localVarPath = "/Accounts/{AccountID}"
            .replace("{" + "AccountID" + "}", localVarApiClient.escapeString(accountID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountValidateBeforeCall(String xeroTenantId, UUID accountID, Accounts accounts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateAccount(Async)");
        }

        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling updateAccount(Async)");
        }

        // verify the required parameter 'accounts' is set
        if (accounts == null) {
            throw new ApiException("Missing the required parameter 'accounts' when calling updateAccount(Async)");
        }

        return updateAccountCall(xeroTenantId, accountID, accounts, _callback);

    }

    /**
     * Updates a chart of accounts
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for retrieving single object (required)
     * @param accounts Request of type Accounts array with one Account (required)
     * @return Accounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - update existing Account and return response of type Accounts array with updated Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public Accounts updateAccount(String xeroTenantId, UUID accountID, Accounts accounts) throws ApiException {
        ApiResponse<Accounts> localVarResp = updateAccountWithHttpInfo(xeroTenantId, accountID, accounts);
        return localVarResp.getData();
    }

    /**
     * Updates a chart of accounts
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for retrieving single object (required)
     * @param accounts Request of type Accounts array with one Account (required)
     * @return ApiResponse&lt;Accounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - update existing Account and return response of type Accounts array with updated Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Accounts> updateAccountWithHttpInfo(String xeroTenantId, UUID accountID, Accounts accounts) throws ApiException {
        okhttp3.Call localVarCall = updateAccountValidateBeforeCall(xeroTenantId, accountID, accounts, null);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a chart of accounts (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for retrieving single object (required)
     * @param accounts Request of type Accounts array with one Account (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - update existing Account and return response of type Accounts array with updated Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountAsync(String xeroTenantId, UUID accountID, Accounts accounts, final ApiCallback<Accounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountValidateBeforeCall(xeroTenantId, accountID, accounts, _callback);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccountAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountAttachmentByFileNameCall(String xeroTenantId, UUID accountID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Accounts/{AccountID}/Attachments/{FileName}"
            .replace("{" + "AccountID" + "}", localVarApiClient.escapeString(accountID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID accountID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateAccountAttachmentByFileName(Async)");
        }

        // verify the required parameter 'accountID' is set
        if (accountID == null) {
            throw new ApiException("Missing the required parameter 'accountID' when calling updateAccountAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling updateAccountAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateAccountAttachmentByFileName(Async)");
        }

        return updateAccountAttachmentByFileNameCall(xeroTenantId, accountID, fileName, body, _callback);

    }

    /**
     * Updates attachment on a specific account by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments updateAccountAttachmentByFileName(String xeroTenantId, UUID accountID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = updateAccountAttachmentByFileNameWithHttpInfo(xeroTenantId, accountID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * Updates attachment on a specific account by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> updateAccountAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID accountID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = updateAccountAttachmentByFileNameValidateBeforeCall(xeroTenantId, accountID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates attachment on a specific account by filename (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param accountID Unique identifier for Account object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountAttachmentByFileNameAsync(String xeroTenantId, UUID accountID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountAttachmentByFileNameValidateBeforeCall(xeroTenantId, accountID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBankTransaction
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param bankTransactions  (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with updated BankTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBankTransactionCall(String xeroTenantId, UUID bankTransactionID, BankTransactions bankTransactions, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransactions;

        // create path and map variables
        String localVarPath = "/BankTransactions/{BankTransactionID}"
            .replace("{" + "BankTransactionID" + "}", localVarApiClient.escapeString(bankTransactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBankTransactionValidateBeforeCall(String xeroTenantId, UUID bankTransactionID, BankTransactions bankTransactions, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateBankTransaction(Async)");
        }

        // verify the required parameter 'bankTransactionID' is set
        if (bankTransactionID == null) {
            throw new ApiException("Missing the required parameter 'bankTransactionID' when calling updateBankTransaction(Async)");
        }

        // verify the required parameter 'bankTransactions' is set
        if (bankTransactions == null) {
            throw new ApiException("Missing the required parameter 'bankTransactions' when calling updateBankTransaction(Async)");
        }

        return updateBankTransactionCall(xeroTenantId, bankTransactionID, bankTransactions, unitdp, _callback);

    }

    /**
     * Updates a single spent or received money transaction
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param bankTransactions  (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return BankTransactions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with updated BankTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public BankTransactions updateBankTransaction(String xeroTenantId, UUID bankTransactionID, BankTransactions bankTransactions, Integer unitdp) throws ApiException {
        ApiResponse<BankTransactions> localVarResp = updateBankTransactionWithHttpInfo(xeroTenantId, bankTransactionID, bankTransactions, unitdp);
        return localVarResp.getData();
    }

    /**
     * Updates a single spent or received money transaction
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param bankTransactions  (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;BankTransactions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with updated BankTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankTransactions> updateBankTransactionWithHttpInfo(String xeroTenantId, UUID bankTransactionID, BankTransactions bankTransactions, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = updateBankTransactionValidateBeforeCall(xeroTenantId, bankTransactionID, bankTransactions, unitdp, null);
        Type localVarReturnType = new TypeToken<BankTransactions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a single spent or received money transaction (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param bankTransactions  (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with updated BankTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBankTransactionAsync(String xeroTenantId, UUID bankTransactionID, BankTransactions bankTransactions, Integer unitdp, final ApiCallback<BankTransactions> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBankTransactionValidateBeforeCall(xeroTenantId, bankTransactionID, bankTransactions, unitdp, _callback);
        Type localVarReturnType = new TypeToken<BankTransactions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBankTransactionAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param fileName The name of the file being attached (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBankTransactionAttachmentByFileNameCall(String xeroTenantId, UUID bankTransactionID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/BankTransactions/{BankTransactionID}/Attachments/{FileName}"
            .replace("{" + "BankTransactionID" + "}", localVarApiClient.escapeString(bankTransactionID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBankTransactionAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID bankTransactionID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateBankTransactionAttachmentByFileName(Async)");
        }

        // verify the required parameter 'bankTransactionID' is set
        if (bankTransactionID == null) {
            throw new ApiException("Missing the required parameter 'bankTransactionID' when calling updateBankTransactionAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling updateBankTransactionAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBankTransactionAttachmentByFileName(Async)");
        }

        return updateBankTransactionAttachmentByFileNameCall(xeroTenantId, bankTransactionID, fileName, body, _callback);

    }

    /**
     * Updates a specific attachment from a specific bank transaction by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param fileName The name of the file being attached (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments updateBankTransactionAttachmentByFileName(String xeroTenantId, UUID bankTransactionID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = updateBankTransactionAttachmentByFileNameWithHttpInfo(xeroTenantId, bankTransactionID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * Updates a specific attachment from a specific bank transaction by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param fileName The name of the file being attached (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> updateBankTransactionAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID bankTransactionID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = updateBankTransactionAttachmentByFileNameValidateBeforeCall(xeroTenantId, bankTransactionID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific attachment from a specific bank transaction by filename (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactionID Xero generated unique identifier for a bank transaction (required)
     * @param fileName The name of the file being attached (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBankTransactionAttachmentByFileNameAsync(String xeroTenantId, UUID bankTransactionID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBankTransactionAttachmentByFileNameValidateBeforeCall(xeroTenantId, bankTransactionID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBankTransferAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param fileName The name of the file being attached to a Bank Transfer (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of 0 to N Attachment for a Bank Transfer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBankTransferAttachmentByFileNameCall(String xeroTenantId, UUID bankTransferID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/BankTransfers/{BankTransferID}/Attachments/{FileName}"
            .replace("{" + "BankTransferID" + "}", localVarApiClient.escapeString(bankTransferID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBankTransferAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID bankTransferID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateBankTransferAttachmentByFileName(Async)");
        }

        // verify the required parameter 'bankTransferID' is set
        if (bankTransferID == null) {
            throw new ApiException("Missing the required parameter 'bankTransferID' when calling updateBankTransferAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling updateBankTransferAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBankTransferAttachmentByFileName(Async)");
        }

        return updateBankTransferAttachmentByFileNameCall(xeroTenantId, bankTransferID, fileName, body, _callback);

    }

    /**
     * 
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param fileName The name of the file being attached to a Bank Transfer (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of 0 to N Attachment for a Bank Transfer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments updateBankTransferAttachmentByFileName(String xeroTenantId, UUID bankTransferID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = updateBankTransferAttachmentByFileNameWithHttpInfo(xeroTenantId, bankTransferID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param fileName The name of the file being attached to a Bank Transfer (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of 0 to N Attachment for a Bank Transfer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> updateBankTransferAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID bankTransferID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = updateBankTransferAttachmentByFileNameValidateBeforeCall(xeroTenantId, bankTransferID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransferID Xero generated unique identifier for a bank transfer (required)
     * @param fileName The name of the file being attached to a Bank Transfer (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of Attachments array of 0 to N Attachment for a Bank Transfer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBankTransferAttachmentByFileNameAsync(String xeroTenantId, UUID bankTransferID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBankTransferAttachmentByFileNameValidateBeforeCall(xeroTenantId, bankTransferID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContact
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param contacts an array of Contacts containing single Contact object with properties to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with an updated Contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContactCall(String xeroTenantId, UUID contactID, Contacts contacts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contacts;

        // create path and map variables
        String localVarPath = "/Contacts/{ContactID}"
            .replace("{" + "ContactID" + "}", localVarApiClient.escapeString(contactID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContactValidateBeforeCall(String xeroTenantId, UUID contactID, Contacts contacts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateContact(Async)");
        }

        // verify the required parameter 'contactID' is set
        if (contactID == null) {
            throw new ApiException("Missing the required parameter 'contactID' when calling updateContact(Async)");
        }

        // verify the required parameter 'contacts' is set
        if (contacts == null) {
            throw new ApiException("Missing the required parameter 'contacts' when calling updateContact(Async)");
        }

        return updateContactCall(xeroTenantId, contactID, contacts, _callback);

    }

    /**
     * Updates a specific contact in a Xero organisation
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param contacts an array of Contacts containing single Contact object with properties to update (required)
     * @return Contacts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with an updated Contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Contacts updateContact(String xeroTenantId, UUID contactID, Contacts contacts) throws ApiException {
        ApiResponse<Contacts> localVarResp = updateContactWithHttpInfo(xeroTenantId, contactID, contacts);
        return localVarResp.getData();
    }

    /**
     * Updates a specific contact in a Xero organisation
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param contacts an array of Contacts containing single Contact object with properties to update (required)
     * @return ApiResponse&lt;Contacts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with an updated Contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Contacts> updateContactWithHttpInfo(String xeroTenantId, UUID contactID, Contacts contacts) throws ApiException {
        okhttp3.Call localVarCall = updateContactValidateBeforeCall(xeroTenantId, contactID, contacts, null);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific contact in a Xero organisation (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param contacts an array of Contacts containing single Contact object with properties to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with an updated Contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContactAsync(String xeroTenantId, UUID contactID, Contacts contacts, final ApiCallback<Contacts> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContactValidateBeforeCall(xeroTenantId, contactID, contacts, _callback);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContactAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param fileName Name for the file you are attaching (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with an updated Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContactAttachmentByFileNameCall(String xeroTenantId, UUID contactID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Contacts/{ContactID}/Attachments/{FileName}"
            .replace("{" + "ContactID" + "}", localVarApiClient.escapeString(contactID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContactAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID contactID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateContactAttachmentByFileName(Async)");
        }

        // verify the required parameter 'contactID' is set
        if (contactID == null) {
            throw new ApiException("Missing the required parameter 'contactID' when calling updateContactAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling updateContactAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateContactAttachmentByFileName(Async)");
        }

        return updateContactAttachmentByFileNameCall(xeroTenantId, contactID, fileName, body, _callback);

    }

    /**
     * 
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param fileName Name for the file you are attaching (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with an updated Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments updateContactAttachmentByFileName(String xeroTenantId, UUID contactID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = updateContactAttachmentByFileNameWithHttpInfo(xeroTenantId, contactID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param fileName Name for the file you are attaching (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with an updated Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> updateContactAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID contactID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = updateContactAttachmentByFileNameValidateBeforeCall(xeroTenantId, contactID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactID Unique identifier for a Contact (required)
     * @param fileName Name for the file you are attaching (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with an updated Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContactAttachmentByFileNameAsync(String xeroTenantId, UUID contactID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContactAttachmentByFileNameValidateBeforeCall(xeroTenantId, contactID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContactGroup
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @param contactGroups an array of Contact groups with Name of specific group to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contact Groups array of updated Contact Group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContactGroupCall(String xeroTenantId, UUID contactGroupID, ContactGroups contactGroups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contactGroups;

        // create path and map variables
        String localVarPath = "/ContactGroups/{ContactGroupID}"
            .replace("{" + "ContactGroupID" + "}", localVarApiClient.escapeString(contactGroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContactGroupValidateBeforeCall(String xeroTenantId, UUID contactGroupID, ContactGroups contactGroups, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateContactGroup(Async)");
        }

        // verify the required parameter 'contactGroupID' is set
        if (contactGroupID == null) {
            throw new ApiException("Missing the required parameter 'contactGroupID' when calling updateContactGroup(Async)");
        }

        // verify the required parameter 'contactGroups' is set
        if (contactGroups == null) {
            throw new ApiException("Missing the required parameter 'contactGroups' when calling updateContactGroup(Async)");
        }

        return updateContactGroupCall(xeroTenantId, contactGroupID, contactGroups, _callback);

    }

    /**
     * Updates a specific contact group
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @param contactGroups an array of Contact groups with Name of specific group to update (required)
     * @return ContactGroups
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contact Groups array of updated Contact Group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ContactGroups updateContactGroup(String xeroTenantId, UUID contactGroupID, ContactGroups contactGroups) throws ApiException {
        ApiResponse<ContactGroups> localVarResp = updateContactGroupWithHttpInfo(xeroTenantId, contactGroupID, contactGroups);
        return localVarResp.getData();
    }

    /**
     * Updates a specific contact group
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @param contactGroups an array of Contact groups with Name of specific group to update (required)
     * @return ApiResponse&lt;ContactGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contact Groups array of updated Contact Group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactGroups> updateContactGroupWithHttpInfo(String xeroTenantId, UUID contactGroupID, ContactGroups contactGroups) throws ApiException {
        okhttp3.Call localVarCall = updateContactGroupValidateBeforeCall(xeroTenantId, contactGroupID, contactGroups, null);
        Type localVarReturnType = new TypeToken<ContactGroups>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific contact group (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contactGroupID Unique identifier for a Contact Group (required)
     * @param contactGroups an array of Contact groups with Name of specific group to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contact Groups array of updated Contact Group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContactGroupAsync(String xeroTenantId, UUID contactGroupID, ContactGroups contactGroups, final ApiCallback<ContactGroups> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContactGroupValidateBeforeCall(xeroTenantId, contactGroupID, contactGroups, _callback);
        Type localVarReturnType = new TypeToken<ContactGroups>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCreditNote
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param creditNotes an array of Credit Notes containing credit note details to update (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array with updated CreditNote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCreditNoteCall(String xeroTenantId, UUID creditNoteID, CreditNotes creditNotes, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditNotes;

        // create path and map variables
        String localVarPath = "/CreditNotes/{CreditNoteID}"
            .replace("{" + "CreditNoteID" + "}", localVarApiClient.escapeString(creditNoteID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCreditNoteValidateBeforeCall(String xeroTenantId, UUID creditNoteID, CreditNotes creditNotes, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateCreditNote(Async)");
        }

        // verify the required parameter 'creditNoteID' is set
        if (creditNoteID == null) {
            throw new ApiException("Missing the required parameter 'creditNoteID' when calling updateCreditNote(Async)");
        }

        // verify the required parameter 'creditNotes' is set
        if (creditNotes == null) {
            throw new ApiException("Missing the required parameter 'creditNotes' when calling updateCreditNote(Async)");
        }

        return updateCreditNoteCall(xeroTenantId, creditNoteID, creditNotes, unitdp, _callback);

    }

    /**
     * Updates a specific credit note
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param creditNotes an array of Credit Notes containing credit note details to update (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return CreditNotes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array with updated CreditNote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public CreditNotes updateCreditNote(String xeroTenantId, UUID creditNoteID, CreditNotes creditNotes, Integer unitdp) throws ApiException {
        ApiResponse<CreditNotes> localVarResp = updateCreditNoteWithHttpInfo(xeroTenantId, creditNoteID, creditNotes, unitdp);
        return localVarResp.getData();
    }

    /**
     * Updates a specific credit note
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param creditNotes an array of Credit Notes containing credit note details to update (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;CreditNotes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array with updated CreditNote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditNotes> updateCreditNoteWithHttpInfo(String xeroTenantId, UUID creditNoteID, CreditNotes creditNotes, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = updateCreditNoteValidateBeforeCall(xeroTenantId, creditNoteID, creditNotes, unitdp, null);
        Type localVarReturnType = new TypeToken<CreditNotes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific credit note (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param creditNotes an array of Credit Notes containing credit note details to update (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array with updated CreditNote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCreditNoteAsync(String xeroTenantId, UUID creditNoteID, CreditNotes creditNotes, Integer unitdp, final ApiCallback<CreditNotes> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCreditNoteValidateBeforeCall(xeroTenantId, creditNoteID, creditNotes, unitdp, _callback);
        Type localVarReturnType = new TypeToken<CreditNotes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCreditNoteAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param fileName Name of the file you are attaching to Credit Note (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with updated Attachment for specific Credit Note </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCreditNoteAttachmentByFileNameCall(String xeroTenantId, UUID creditNoteID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/CreditNotes/{CreditNoteID}/Attachments/{FileName}"
            .replace("{" + "CreditNoteID" + "}", localVarApiClient.escapeString(creditNoteID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCreditNoteAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID creditNoteID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateCreditNoteAttachmentByFileName(Async)");
        }

        // verify the required parameter 'creditNoteID' is set
        if (creditNoteID == null) {
            throw new ApiException("Missing the required parameter 'creditNoteID' when calling updateCreditNoteAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling updateCreditNoteAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCreditNoteAttachmentByFileName(Async)");
        }

        return updateCreditNoteAttachmentByFileNameCall(xeroTenantId, creditNoteID, fileName, body, _callback);

    }

    /**
     * Updates attachments on a specific credit note by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param fileName Name of the file you are attaching to Credit Note (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with updated Attachment for specific Credit Note </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments updateCreditNoteAttachmentByFileName(String xeroTenantId, UUID creditNoteID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = updateCreditNoteAttachmentByFileNameWithHttpInfo(xeroTenantId, creditNoteID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * Updates attachments on a specific credit note by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param fileName Name of the file you are attaching to Credit Note (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with updated Attachment for specific Credit Note </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> updateCreditNoteAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID creditNoteID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = updateCreditNoteAttachmentByFileNameValidateBeforeCall(xeroTenantId, creditNoteID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates attachments on a specific credit note by file name (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNoteID Unique identifier for a Credit Note (required)
     * @param fileName Name of the file you are attaching to Credit Note (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with updated Attachment for specific Credit Note </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCreditNoteAttachmentByFileNameAsync(String xeroTenantId, UUID creditNoteID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCreditNoteAttachmentByFileNameValidateBeforeCall(xeroTenantId, creditNoteID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateExpenseClaim
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaimID Unique identifier for a ExpenseClaim (required)
     * @param expenseClaims  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ExpenseClaims array with updated ExpenseClaim </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExpenseClaimCall(String xeroTenantId, UUID expenseClaimID, ExpenseClaims expenseClaims, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expenseClaims;

        // create path and map variables
        String localVarPath = "/ExpenseClaims/{ExpenseClaimID}"
            .replace("{" + "ExpenseClaimID" + "}", localVarApiClient.escapeString(expenseClaimID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExpenseClaimValidateBeforeCall(String xeroTenantId, UUID expenseClaimID, ExpenseClaims expenseClaims, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateExpenseClaim(Async)");
        }

        // verify the required parameter 'expenseClaimID' is set
        if (expenseClaimID == null) {
            throw new ApiException("Missing the required parameter 'expenseClaimID' when calling updateExpenseClaim(Async)");
        }

        // verify the required parameter 'expenseClaims' is set
        if (expenseClaims == null) {
            throw new ApiException("Missing the required parameter 'expenseClaims' when calling updateExpenseClaim(Async)");
        }

        return updateExpenseClaimCall(xeroTenantId, expenseClaimID, expenseClaims, _callback);

    }

    /**
     * Updates a specific expense claims
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaimID Unique identifier for a ExpenseClaim (required)
     * @param expenseClaims  (required)
     * @return ExpenseClaims
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ExpenseClaims array with updated ExpenseClaim </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ExpenseClaims updateExpenseClaim(String xeroTenantId, UUID expenseClaimID, ExpenseClaims expenseClaims) throws ApiException {
        ApiResponse<ExpenseClaims> localVarResp = updateExpenseClaimWithHttpInfo(xeroTenantId, expenseClaimID, expenseClaims);
        return localVarResp.getData();
    }

    /**
     * Updates a specific expense claims
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaimID Unique identifier for a ExpenseClaim (required)
     * @param expenseClaims  (required)
     * @return ApiResponse&lt;ExpenseClaims&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ExpenseClaims array with updated ExpenseClaim </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpenseClaims> updateExpenseClaimWithHttpInfo(String xeroTenantId, UUID expenseClaimID, ExpenseClaims expenseClaims) throws ApiException {
        okhttp3.Call localVarCall = updateExpenseClaimValidateBeforeCall(xeroTenantId, expenseClaimID, expenseClaims, null);
        Type localVarReturnType = new TypeToken<ExpenseClaims>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific expense claims (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param expenseClaimID Unique identifier for a ExpenseClaim (required)
     * @param expenseClaims  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ExpenseClaims array with updated ExpenseClaim </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExpenseClaimAsync(String xeroTenantId, UUID expenseClaimID, ExpenseClaims expenseClaims, final ApiCallback<ExpenseClaims> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExpenseClaimValidateBeforeCall(xeroTenantId, expenseClaimID, expenseClaims, _callback);
        Type localVarReturnType = new TypeToken<ExpenseClaims>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateInvoice
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param invoices  (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with updated Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInvoiceCall(String xeroTenantId, UUID invoiceID, Invoices invoices, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoices;

        // create path and map variables
        String localVarPath = "/Invoices/{InvoiceID}"
            .replace("{" + "InvoiceID" + "}", localVarApiClient.escapeString(invoiceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInvoiceValidateBeforeCall(String xeroTenantId, UUID invoiceID, Invoices invoices, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateInvoice(Async)");
        }

        // verify the required parameter 'invoiceID' is set
        if (invoiceID == null) {
            throw new ApiException("Missing the required parameter 'invoiceID' when calling updateInvoice(Async)");
        }

        // verify the required parameter 'invoices' is set
        if (invoices == null) {
            throw new ApiException("Missing the required parameter 'invoices' when calling updateInvoice(Async)");
        }

        return updateInvoiceCall(xeroTenantId, invoiceID, invoices, unitdp, _callback);

    }

    /**
     * Updates a specific sales invoices or purchase bills
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param invoices  (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return Invoices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with updated Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Invoices updateInvoice(String xeroTenantId, UUID invoiceID, Invoices invoices, Integer unitdp) throws ApiException {
        ApiResponse<Invoices> localVarResp = updateInvoiceWithHttpInfo(xeroTenantId, invoiceID, invoices, unitdp);
        return localVarResp.getData();
    }

    /**
     * Updates a specific sales invoices or purchase bills
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param invoices  (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;Invoices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with updated Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Invoices> updateInvoiceWithHttpInfo(String xeroTenantId, UUID invoiceID, Invoices invoices, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = updateInvoiceValidateBeforeCall(xeroTenantId, invoiceID, invoices, unitdp, null);
        Type localVarReturnType = new TypeToken<Invoices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific sales invoices or purchase bills (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param invoices  (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with updated Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInvoiceAsync(String xeroTenantId, UUID invoiceID, Invoices invoices, Integer unitdp, final ApiCallback<Invoices> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInvoiceValidateBeforeCall(xeroTenantId, invoiceID, invoices, unitdp, _callback);
        Type localVarReturnType = new TypeToken<Invoices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateInvoiceAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param fileName Name of the file you are attaching (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with updated Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInvoiceAttachmentByFileNameCall(String xeroTenantId, UUID invoiceID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Invoices/{InvoiceID}/Attachments/{FileName}"
            .replace("{" + "InvoiceID" + "}", localVarApiClient.escapeString(invoiceID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInvoiceAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID invoiceID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateInvoiceAttachmentByFileName(Async)");
        }

        // verify the required parameter 'invoiceID' is set
        if (invoiceID == null) {
            throw new ApiException("Missing the required parameter 'invoiceID' when calling updateInvoiceAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling updateInvoiceAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateInvoiceAttachmentByFileName(Async)");
        }

        return updateInvoiceAttachmentByFileNameCall(xeroTenantId, invoiceID, fileName, body, _callback);

    }

    /**
     * Updates an attachment from a specific invoices or purchase bill by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param fileName Name of the file you are attaching (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with updated Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments updateInvoiceAttachmentByFileName(String xeroTenantId, UUID invoiceID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = updateInvoiceAttachmentByFileNameWithHttpInfo(xeroTenantId, invoiceID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * Updates an attachment from a specific invoices or purchase bill by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param fileName Name of the file you are attaching (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with updated Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> updateInvoiceAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID invoiceID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = updateInvoiceAttachmentByFileNameValidateBeforeCall(xeroTenantId, invoiceID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an attachment from a specific invoices or purchase bill by filename (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoiceID Unique identifier for an Invoice (required)
     * @param fileName Name of the file you are attaching (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with updated Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInvoiceAttachmentByFileNameAsync(String xeroTenantId, UUID invoiceID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInvoiceAttachmentByFileNameValidateBeforeCall(xeroTenantId, invoiceID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateItem
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @param items  (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with updated Item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemCall(String xeroTenantId, UUID itemID, Items items, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = items;

        // create path and map variables
        String localVarPath = "/Items/{ItemID}"
            .replace("{" + "ItemID" + "}", localVarApiClient.escapeString(itemID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemValidateBeforeCall(String xeroTenantId, UUID itemID, Items items, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateItem(Async)");
        }

        // verify the required parameter 'itemID' is set
        if (itemID == null) {
            throw new ApiException("Missing the required parameter 'itemID' when calling updateItem(Async)");
        }

        // verify the required parameter 'items' is set
        if (items == null) {
            throw new ApiException("Missing the required parameter 'items' when calling updateItem(Async)");
        }

        return updateItemCall(xeroTenantId, itemID, items, unitdp, _callback);

    }

    /**
     * Updates a specific item
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @param items  (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return Items
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with updated Item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Items updateItem(String xeroTenantId, UUID itemID, Items items, Integer unitdp) throws ApiException {
        ApiResponse<Items> localVarResp = updateItemWithHttpInfo(xeroTenantId, itemID, items, unitdp);
        return localVarResp.getData();
    }

    /**
     * Updates a specific item
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @param items  (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;Items&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with updated Item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Items> updateItemWithHttpInfo(String xeroTenantId, UUID itemID, Items items, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = updateItemValidateBeforeCall(xeroTenantId, itemID, items, unitdp, null);
        Type localVarReturnType = new TypeToken<Items>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific item (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param itemID Unique identifier for an Item (required)
     * @param items  (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with updated Item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemAsync(String xeroTenantId, UUID itemID, Items items, Integer unitdp, final ApiCallback<Items> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemValidateBeforeCall(xeroTenantId, itemID, items, unitdp, _callback);
        Type localVarReturnType = new TypeToken<Items>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLinkedTransaction
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param linkedTransactionID Unique identifier for a LinkedTransaction (required)
     * @param linkedTransactions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type LinkedTransactions array with updated LinkedTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Success - return response of type LinkedTransactions array with updated LinkedTransaction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLinkedTransactionCall(String xeroTenantId, UUID linkedTransactionID, LinkedTransactions linkedTransactions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkedTransactions;

        // create path and map variables
        String localVarPath = "/LinkedTransactions/{LinkedTransactionID}"
            .replace("{" + "LinkedTransactionID" + "}", localVarApiClient.escapeString(linkedTransactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLinkedTransactionValidateBeforeCall(String xeroTenantId, UUID linkedTransactionID, LinkedTransactions linkedTransactions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateLinkedTransaction(Async)");
        }

        // verify the required parameter 'linkedTransactionID' is set
        if (linkedTransactionID == null) {
            throw new ApiException("Missing the required parameter 'linkedTransactionID' when calling updateLinkedTransaction(Async)");
        }

        // verify the required parameter 'linkedTransactions' is set
        if (linkedTransactions == null) {
            throw new ApiException("Missing the required parameter 'linkedTransactions' when calling updateLinkedTransaction(Async)");
        }

        return updateLinkedTransactionCall(xeroTenantId, linkedTransactionID, linkedTransactions, _callback);

    }

    /**
     * Updates a specific linked transactions (billable expenses)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param linkedTransactionID Unique identifier for a LinkedTransaction (required)
     * @param linkedTransactions  (required)
     * @return LinkedTransactions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type LinkedTransactions array with updated LinkedTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Success - return response of type LinkedTransactions array with updated LinkedTransaction </td><td>  -  </td></tr>
     </table>
     */
    public LinkedTransactions updateLinkedTransaction(String xeroTenantId, UUID linkedTransactionID, LinkedTransactions linkedTransactions) throws ApiException {
        ApiResponse<LinkedTransactions> localVarResp = updateLinkedTransactionWithHttpInfo(xeroTenantId, linkedTransactionID, linkedTransactions);
        return localVarResp.getData();
    }

    /**
     * Updates a specific linked transactions (billable expenses)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param linkedTransactionID Unique identifier for a LinkedTransaction (required)
     * @param linkedTransactions  (required)
     * @return ApiResponse&lt;LinkedTransactions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type LinkedTransactions array with updated LinkedTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Success - return response of type LinkedTransactions array with updated LinkedTransaction </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkedTransactions> updateLinkedTransactionWithHttpInfo(String xeroTenantId, UUID linkedTransactionID, LinkedTransactions linkedTransactions) throws ApiException {
        okhttp3.Call localVarCall = updateLinkedTransactionValidateBeforeCall(xeroTenantId, linkedTransactionID, linkedTransactions, null);
        Type localVarReturnType = new TypeToken<LinkedTransactions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific linked transactions (billable expenses) (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param linkedTransactionID Unique identifier for a LinkedTransaction (required)
     * @param linkedTransactions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type LinkedTransactions array with updated LinkedTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Success - return response of type LinkedTransactions array with updated LinkedTransaction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLinkedTransactionAsync(String xeroTenantId, UUID linkedTransactionID, LinkedTransactions linkedTransactions, final ApiCallback<LinkedTransactions> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLinkedTransactionValidateBeforeCall(xeroTenantId, linkedTransactionID, linkedTransactions, _callback);
        Type localVarReturnType = new TypeToken<LinkedTransactions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateManualJournal
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param manualJournals  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with an updated ManualJournal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateManualJournalCall(String xeroTenantId, UUID manualJournalID, ManualJournals manualJournals, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manualJournals;

        // create path and map variables
        String localVarPath = "/ManualJournals/{ManualJournalID}"
            .replace("{" + "ManualJournalID" + "}", localVarApiClient.escapeString(manualJournalID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateManualJournalValidateBeforeCall(String xeroTenantId, UUID manualJournalID, ManualJournals manualJournals, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateManualJournal(Async)");
        }

        // verify the required parameter 'manualJournalID' is set
        if (manualJournalID == null) {
            throw new ApiException("Missing the required parameter 'manualJournalID' when calling updateManualJournal(Async)");
        }

        // verify the required parameter 'manualJournals' is set
        if (manualJournals == null) {
            throw new ApiException("Missing the required parameter 'manualJournals' when calling updateManualJournal(Async)");
        }

        return updateManualJournalCall(xeroTenantId, manualJournalID, manualJournals, _callback);

    }

    /**
     * Updates a specific manual journal
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param manualJournals  (required)
     * @return ManualJournals
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with an updated ManualJournal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ManualJournals updateManualJournal(String xeroTenantId, UUID manualJournalID, ManualJournals manualJournals) throws ApiException {
        ApiResponse<ManualJournals> localVarResp = updateManualJournalWithHttpInfo(xeroTenantId, manualJournalID, manualJournals);
        return localVarResp.getData();
    }

    /**
     * Updates a specific manual journal
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param manualJournals  (required)
     * @return ApiResponse&lt;ManualJournals&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with an updated ManualJournal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManualJournals> updateManualJournalWithHttpInfo(String xeroTenantId, UUID manualJournalID, ManualJournals manualJournals) throws ApiException {
        okhttp3.Call localVarCall = updateManualJournalValidateBeforeCall(xeroTenantId, manualJournalID, manualJournals, null);
        Type localVarReturnType = new TypeToken<ManualJournals>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific manual journal (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param manualJournals  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with an updated ManualJournal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateManualJournalAsync(String xeroTenantId, UUID manualJournalID, ManualJournals manualJournals, final ApiCallback<ManualJournals> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateManualJournalValidateBeforeCall(xeroTenantId, manualJournalID, manualJournals, _callback);
        Type localVarReturnType = new TypeToken<ManualJournals>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateManualJournalAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param fileName The name of the file being attached to a ManualJournal (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with an update Attachment for a ManualJournals </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateManualJournalAttachmentByFileNameCall(String xeroTenantId, UUID manualJournalID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/ManualJournals/{ManualJournalID}/Attachments/{FileName}"
            .replace("{" + "ManualJournalID" + "}", localVarApiClient.escapeString(manualJournalID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateManualJournalAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID manualJournalID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateManualJournalAttachmentByFileName(Async)");
        }

        // verify the required parameter 'manualJournalID' is set
        if (manualJournalID == null) {
            throw new ApiException("Missing the required parameter 'manualJournalID' when calling updateManualJournalAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling updateManualJournalAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateManualJournalAttachmentByFileName(Async)");
        }

        return updateManualJournalAttachmentByFileNameCall(xeroTenantId, manualJournalID, fileName, body, _callback);

    }

    /**
     * Updates a specific attachment from a specific manual journal by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param fileName The name of the file being attached to a ManualJournal (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with an update Attachment for a ManualJournals </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments updateManualJournalAttachmentByFileName(String xeroTenantId, UUID manualJournalID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = updateManualJournalAttachmentByFileNameWithHttpInfo(xeroTenantId, manualJournalID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * Updates a specific attachment from a specific manual journal by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param fileName The name of the file being attached to a ManualJournal (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with an update Attachment for a ManualJournals </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> updateManualJournalAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID manualJournalID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = updateManualJournalAttachmentByFileNameValidateBeforeCall(xeroTenantId, manualJournalID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific attachment from a specific manual journal by file name (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournalID Unique identifier for a ManualJournal (required)
     * @param fileName The name of the file being attached to a ManualJournal (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with an update Attachment for a ManualJournals </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateManualJournalAttachmentByFileNameAsync(String xeroTenantId, UUID manualJournalID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateManualJournalAttachmentByFileNameValidateBeforeCall(xeroTenantId, manualJournalID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrCreateBankTransactions
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactions  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with new BankTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrCreateBankTransactionsCall(String xeroTenantId, BankTransactions bankTransactions, Boolean summarizeErrors, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransactions;

        // create path and map variables
        String localVarPath = "/BankTransactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrCreateBankTransactionsValidateBeforeCall(String xeroTenantId, BankTransactions bankTransactions, Boolean summarizeErrors, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateOrCreateBankTransactions(Async)");
        }

        // verify the required parameter 'bankTransactions' is set
        if (bankTransactions == null) {
            throw new ApiException("Missing the required parameter 'bankTransactions' when calling updateOrCreateBankTransactions(Async)");
        }

        return updateOrCreateBankTransactionsCall(xeroTenantId, bankTransactions, summarizeErrors, unitdp, _callback);

    }

    /**
     * Updates or creates one or more spent or received money transaction
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactions  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return BankTransactions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with new BankTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public BankTransactions updateOrCreateBankTransactions(String xeroTenantId, BankTransactions bankTransactions, Boolean summarizeErrors, Integer unitdp) throws ApiException {
        ApiResponse<BankTransactions> localVarResp = updateOrCreateBankTransactionsWithHttpInfo(xeroTenantId, bankTransactions, summarizeErrors, unitdp);
        return localVarResp.getData();
    }

    /**
     * Updates or creates one or more spent or received money transaction
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactions  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;BankTransactions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with new BankTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankTransactions> updateOrCreateBankTransactionsWithHttpInfo(String xeroTenantId, BankTransactions bankTransactions, Boolean summarizeErrors, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = updateOrCreateBankTransactionsValidateBeforeCall(xeroTenantId, bankTransactions, summarizeErrors, unitdp, null);
        Type localVarReturnType = new TypeToken<BankTransactions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates or creates one or more spent or received money transaction (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param bankTransactions  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type BankTransactions array with new BankTransaction </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrCreateBankTransactionsAsync(String xeroTenantId, BankTransactions bankTransactions, Boolean summarizeErrors, Integer unitdp, final ApiCallback<BankTransactions> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrCreateBankTransactionsValidateBeforeCall(xeroTenantId, bankTransactions, summarizeErrors, unitdp, _callback);
        Type localVarReturnType = new TypeToken<BankTransactions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrCreateContacts
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contacts  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with newly created Contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrCreateContactsCall(String xeroTenantId, Contacts contacts, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contacts;

        // create path and map variables
        String localVarPath = "/Contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrCreateContactsValidateBeforeCall(String xeroTenantId, Contacts contacts, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateOrCreateContacts(Async)");
        }

        // verify the required parameter 'contacts' is set
        if (contacts == null) {
            throw new ApiException("Missing the required parameter 'contacts' when calling updateOrCreateContacts(Async)");
        }

        return updateOrCreateContactsCall(xeroTenantId, contacts, summarizeErrors, _callback);

    }

    /**
     * Updates or creates one or more contacts in a Xero organisation
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contacts  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return Contacts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with newly created Contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public Contacts updateOrCreateContacts(String xeroTenantId, Contacts contacts, Boolean summarizeErrors) throws ApiException {
        ApiResponse<Contacts> localVarResp = updateOrCreateContactsWithHttpInfo(xeroTenantId, contacts, summarizeErrors);
        return localVarResp.getData();
    }

    /**
     * Updates or creates one or more contacts in a Xero organisation
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contacts  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return ApiResponse&lt;Contacts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with newly created Contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Contacts> updateOrCreateContactsWithHttpInfo(String xeroTenantId, Contacts contacts, Boolean summarizeErrors) throws ApiException {
        okhttp3.Call localVarCall = updateOrCreateContactsValidateBeforeCall(xeroTenantId, contacts, summarizeErrors, null);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates or creates one or more contacts in a Xero organisation (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param contacts  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Contacts array with newly created Contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrCreateContactsAsync(String xeroTenantId, Contacts contacts, Boolean summarizeErrors, final ApiCallback<Contacts> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrCreateContactsValidateBeforeCall(xeroTenantId, contacts, summarizeErrors, _callback);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrCreateCreditNotes
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNotes an array of Credit Notes with a single CreditNote object. (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array of newly created CreditNote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrCreateCreditNotesCall(String xeroTenantId, CreditNotes creditNotes, Boolean summarizeErrors, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditNotes;

        // create path and map variables
        String localVarPath = "/CreditNotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrCreateCreditNotesValidateBeforeCall(String xeroTenantId, CreditNotes creditNotes, Boolean summarizeErrors, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateOrCreateCreditNotes(Async)");
        }

        // verify the required parameter 'creditNotes' is set
        if (creditNotes == null) {
            throw new ApiException("Missing the required parameter 'creditNotes' when calling updateOrCreateCreditNotes(Async)");
        }

        return updateOrCreateCreditNotesCall(xeroTenantId, creditNotes, summarizeErrors, unitdp, _callback);

    }

    /**
     * Updates or creates one or more credit notes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNotes an array of Credit Notes with a single CreditNote object. (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return CreditNotes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array of newly created CreditNote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public CreditNotes updateOrCreateCreditNotes(String xeroTenantId, CreditNotes creditNotes, Boolean summarizeErrors, Integer unitdp) throws ApiException {
        ApiResponse<CreditNotes> localVarResp = updateOrCreateCreditNotesWithHttpInfo(xeroTenantId, creditNotes, summarizeErrors, unitdp);
        return localVarResp.getData();
    }

    /**
     * Updates or creates one or more credit notes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNotes an array of Credit Notes with a single CreditNote object. (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;CreditNotes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array of newly created CreditNote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditNotes> updateOrCreateCreditNotesWithHttpInfo(String xeroTenantId, CreditNotes creditNotes, Boolean summarizeErrors, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = updateOrCreateCreditNotesValidateBeforeCall(xeroTenantId, creditNotes, summarizeErrors, unitdp, null);
        Type localVarReturnType = new TypeToken<CreditNotes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates or creates one or more credit notes (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param creditNotes an array of Credit Notes with a single CreditNote object. (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Credit Notes array of newly created CreditNote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrCreateCreditNotesAsync(String xeroTenantId, CreditNotes creditNotes, Boolean summarizeErrors, Integer unitdp, final ApiCallback<CreditNotes> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrCreateCreditNotesValidateBeforeCall(xeroTenantId, creditNotes, summarizeErrors, unitdp, _callback);
        Type localVarReturnType = new TypeToken<CreditNotes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrCreateEmployees
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employees Employees with array of Employee object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Employees array with new Employee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrCreateEmployeesCall(String xeroTenantId, Employees employees, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employees;

        // create path and map variables
        String localVarPath = "/Employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrCreateEmployeesValidateBeforeCall(String xeroTenantId, Employees employees, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateOrCreateEmployees(Async)");
        }

        // verify the required parameter 'employees' is set
        if (employees == null) {
            throw new ApiException("Missing the required parameter 'employees' when calling updateOrCreateEmployees(Async)");
        }

        return updateOrCreateEmployeesCall(xeroTenantId, employees, summarizeErrors, _callback);

    }

    /**
     * Creates a single new employees used in Xero payrun
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employees Employees with array of Employee object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return Employees
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Employees array with new Employee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Employees updateOrCreateEmployees(String xeroTenantId, Employees employees, Boolean summarizeErrors) throws ApiException {
        ApiResponse<Employees> localVarResp = updateOrCreateEmployeesWithHttpInfo(xeroTenantId, employees, summarizeErrors);
        return localVarResp.getData();
    }

    /**
     * Creates a single new employees used in Xero payrun
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employees Employees with array of Employee object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return ApiResponse&lt;Employees&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Employees array with new Employee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Employees> updateOrCreateEmployeesWithHttpInfo(String xeroTenantId, Employees employees, Boolean summarizeErrors) throws ApiException {
        okhttp3.Call localVarCall = updateOrCreateEmployeesValidateBeforeCall(xeroTenantId, employees, summarizeErrors, null);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a single new employees used in Xero payrun (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employees Employees with array of Employee object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Employees array with new Employee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrCreateEmployeesAsync(String xeroTenantId, Employees employees, Boolean summarizeErrors, final ApiCallback<Employees> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrCreateEmployeesValidateBeforeCall(xeroTenantId, employees, summarizeErrors, _callback);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrCreateInvoices
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoices  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with newly created Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrCreateInvoicesCall(String xeroTenantId, Invoices invoices, Boolean summarizeErrors, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoices;

        // create path and map variables
        String localVarPath = "/Invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrCreateInvoicesValidateBeforeCall(String xeroTenantId, Invoices invoices, Boolean summarizeErrors, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateOrCreateInvoices(Async)");
        }

        // verify the required parameter 'invoices' is set
        if (invoices == null) {
            throw new ApiException("Missing the required parameter 'invoices' when calling updateOrCreateInvoices(Async)");
        }

        return updateOrCreateInvoicesCall(xeroTenantId, invoices, summarizeErrors, unitdp, _callback);

    }

    /**
     * Updates or creates one or more sales invoices or purchase bills
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoices  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return Invoices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with newly created Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Invoices updateOrCreateInvoices(String xeroTenantId, Invoices invoices, Boolean summarizeErrors, Integer unitdp) throws ApiException {
        ApiResponse<Invoices> localVarResp = updateOrCreateInvoicesWithHttpInfo(xeroTenantId, invoices, summarizeErrors, unitdp);
        return localVarResp.getData();
    }

    /**
     * Updates or creates one or more sales invoices or purchase bills
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoices  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;Invoices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with newly created Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Invoices> updateOrCreateInvoicesWithHttpInfo(String xeroTenantId, Invoices invoices, Boolean summarizeErrors, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = updateOrCreateInvoicesValidateBeforeCall(xeroTenantId, invoices, summarizeErrors, unitdp, null);
        Type localVarReturnType = new TypeToken<Invoices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates or creates one or more sales invoices or purchase bills (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param invoices  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Invoices array with newly created Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrCreateInvoicesAsync(String xeroTenantId, Invoices invoices, Boolean summarizeErrors, Integer unitdp, final ApiCallback<Invoices> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrCreateInvoicesValidateBeforeCall(xeroTenantId, invoices, summarizeErrors, unitdp, _callback);
        Type localVarReturnType = new TypeToken<Invoices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrCreateItems
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param items  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with newly created Item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrCreateItemsCall(String xeroTenantId, Items items, Boolean summarizeErrors, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = items;

        // create path and map variables
        String localVarPath = "/Items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrCreateItemsValidateBeforeCall(String xeroTenantId, Items items, Boolean summarizeErrors, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateOrCreateItems(Async)");
        }

        // verify the required parameter 'items' is set
        if (items == null) {
            throw new ApiException("Missing the required parameter 'items' when calling updateOrCreateItems(Async)");
        }

        return updateOrCreateItemsCall(xeroTenantId, items, summarizeErrors, unitdp, _callback);

    }

    /**
     * Updates or creates one or more items
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param items  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return Items
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with newly created Item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Items updateOrCreateItems(String xeroTenantId, Items items, Boolean summarizeErrors, Integer unitdp) throws ApiException {
        ApiResponse<Items> localVarResp = updateOrCreateItemsWithHttpInfo(xeroTenantId, items, summarizeErrors, unitdp);
        return localVarResp.getData();
    }

    /**
     * Updates or creates one or more items
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param items  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;Items&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with newly created Item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Items> updateOrCreateItemsWithHttpInfo(String xeroTenantId, Items items, Boolean summarizeErrors, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = updateOrCreateItemsValidateBeforeCall(xeroTenantId, items, summarizeErrors, unitdp, null);
        Type localVarReturnType = new TypeToken<Items>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates or creates one or more items (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param items  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Items array with newly created Item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrCreateItemsAsync(String xeroTenantId, Items items, Boolean summarizeErrors, Integer unitdp, final ApiCallback<Items> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrCreateItemsValidateBeforeCall(xeroTenantId, items, summarizeErrors, unitdp, _callback);
        Type localVarReturnType = new TypeToken<Items>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrCreateManualJournals
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournals ManualJournals array with ManualJournal object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with newly created ManualJournal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrCreateManualJournalsCall(String xeroTenantId, ManualJournals manualJournals, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manualJournals;

        // create path and map variables
        String localVarPath = "/ManualJournals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrCreateManualJournalsValidateBeforeCall(String xeroTenantId, ManualJournals manualJournals, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateOrCreateManualJournals(Async)");
        }

        // verify the required parameter 'manualJournals' is set
        if (manualJournals == null) {
            throw new ApiException("Missing the required parameter 'manualJournals' when calling updateOrCreateManualJournals(Async)");
        }

        return updateOrCreateManualJournalsCall(xeroTenantId, manualJournals, summarizeErrors, _callback);

    }

    /**
     * Updates or creates a single manual journal
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournals ManualJournals array with ManualJournal object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return ManualJournals
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with newly created ManualJournal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ManualJournals updateOrCreateManualJournals(String xeroTenantId, ManualJournals manualJournals, Boolean summarizeErrors) throws ApiException {
        ApiResponse<ManualJournals> localVarResp = updateOrCreateManualJournalsWithHttpInfo(xeroTenantId, manualJournals, summarizeErrors);
        return localVarResp.getData();
    }

    /**
     * Updates or creates a single manual journal
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournals ManualJournals array with ManualJournal object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return ApiResponse&lt;ManualJournals&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with newly created ManualJournal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManualJournals> updateOrCreateManualJournalsWithHttpInfo(String xeroTenantId, ManualJournals manualJournals, Boolean summarizeErrors) throws ApiException {
        okhttp3.Call localVarCall = updateOrCreateManualJournalsValidateBeforeCall(xeroTenantId, manualJournals, summarizeErrors, null);
        Type localVarReturnType = new TypeToken<ManualJournals>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates or creates a single manual journal (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param manualJournals ManualJournals array with ManualJournal object in body of request (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type ManualJournals array with newly created ManualJournal </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrCreateManualJournalsAsync(String xeroTenantId, ManualJournals manualJournals, Boolean summarizeErrors, final ApiCallback<ManualJournals> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrCreateManualJournalsValidateBeforeCall(xeroTenantId, manualJournals, summarizeErrors, _callback);
        Type localVarReturnType = new TypeToken<ManualJournals>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrCreatePurchaseOrders
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrders  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for specified PurchaseOrder </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrCreatePurchaseOrdersCall(String xeroTenantId, PurchaseOrders purchaseOrders, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = purchaseOrders;

        // create path and map variables
        String localVarPath = "/PurchaseOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrCreatePurchaseOrdersValidateBeforeCall(String xeroTenantId, PurchaseOrders purchaseOrders, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateOrCreatePurchaseOrders(Async)");
        }

        // verify the required parameter 'purchaseOrders' is set
        if (purchaseOrders == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrders' when calling updateOrCreatePurchaseOrders(Async)");
        }

        return updateOrCreatePurchaseOrdersCall(xeroTenantId, purchaseOrders, summarizeErrors, _callback);

    }

    /**
     * Updates or creates one or more purchase orders
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrders  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return PurchaseOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for specified PurchaseOrder </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseOrders updateOrCreatePurchaseOrders(String xeroTenantId, PurchaseOrders purchaseOrders, Boolean summarizeErrors) throws ApiException {
        ApiResponse<PurchaseOrders> localVarResp = updateOrCreatePurchaseOrdersWithHttpInfo(xeroTenantId, purchaseOrders, summarizeErrors);
        return localVarResp.getData();
    }

    /**
     * Updates or creates one or more purchase orders
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrders  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return ApiResponse&lt;PurchaseOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for specified PurchaseOrder </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PurchaseOrders> updateOrCreatePurchaseOrdersWithHttpInfo(String xeroTenantId, PurchaseOrders purchaseOrders, Boolean summarizeErrors) throws ApiException {
        okhttp3.Call localVarCall = updateOrCreatePurchaseOrdersValidateBeforeCall(xeroTenantId, purchaseOrders, summarizeErrors, null);
        Type localVarReturnType = new TypeToken<PurchaseOrders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates or creates one or more purchase orders (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrders  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for specified PurchaseOrder </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrCreatePurchaseOrdersAsync(String xeroTenantId, PurchaseOrders purchaseOrders, Boolean summarizeErrors, final ApiCallback<PurchaseOrders> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrCreatePurchaseOrdersValidateBeforeCall(xeroTenantId, purchaseOrders, summarizeErrors, _callback);
        Type localVarReturnType = new TypeToken<PurchaseOrders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrCreateQuotes
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quotes  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Quotes array with updated or created Quote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrCreateQuotesCall(String xeroTenantId, Quotes quotes, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = quotes;

        // create path and map variables
        String localVarPath = "/Quotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (summarizeErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summarizeErrors", summarizeErrors));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrCreateQuotesValidateBeforeCall(String xeroTenantId, Quotes quotes, Boolean summarizeErrors, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateOrCreateQuotes(Async)");
        }

        // verify the required parameter 'quotes' is set
        if (quotes == null) {
            throw new ApiException("Missing the required parameter 'quotes' when calling updateOrCreateQuotes(Async)");
        }

        return updateOrCreateQuotesCall(xeroTenantId, quotes, summarizeErrors, _callback);

    }

    /**
     * Updates or creates one or more quotes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quotes  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return Quotes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Quotes array with updated or created Quote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Quotes updateOrCreateQuotes(String xeroTenantId, Quotes quotes, Boolean summarizeErrors) throws ApiException {
        ApiResponse<Quotes> localVarResp = updateOrCreateQuotesWithHttpInfo(xeroTenantId, quotes, summarizeErrors);
        return localVarResp.getData();
    }

    /**
     * Updates or creates one or more quotes
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quotes  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @return ApiResponse&lt;Quotes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Quotes array with updated or created Quote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quotes> updateOrCreateQuotesWithHttpInfo(String xeroTenantId, Quotes quotes, Boolean summarizeErrors) throws ApiException {
        okhttp3.Call localVarCall = updateOrCreateQuotesValidateBeforeCall(xeroTenantId, quotes, summarizeErrors, null);
        Type localVarReturnType = new TypeToken<Quotes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates or creates one or more quotes (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quotes  (required)
     * @param summarizeErrors If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Quotes array with updated or created Quote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrCreateQuotesAsync(String xeroTenantId, Quotes quotes, Boolean summarizeErrors, final ApiCallback<Quotes> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrCreateQuotesValidateBeforeCall(xeroTenantId, quotes, summarizeErrors, _callback);
        Type localVarReturnType = new TypeToken<Quotes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePurchaseOrder
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for a PurchaseOrder (required)
     * @param purchaseOrders  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for updated PurchaseOrder </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePurchaseOrderCall(String xeroTenantId, UUID purchaseOrderID, PurchaseOrders purchaseOrders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = purchaseOrders;

        // create path and map variables
        String localVarPath = "/PurchaseOrders/{PurchaseOrderID}"
            .replace("{" + "PurchaseOrderID" + "}", localVarApiClient.escapeString(purchaseOrderID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePurchaseOrderValidateBeforeCall(String xeroTenantId, UUID purchaseOrderID, PurchaseOrders purchaseOrders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updatePurchaseOrder(Async)");
        }

        // verify the required parameter 'purchaseOrderID' is set
        if (purchaseOrderID == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrderID' when calling updatePurchaseOrder(Async)");
        }

        // verify the required parameter 'purchaseOrders' is set
        if (purchaseOrders == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrders' when calling updatePurchaseOrder(Async)");
        }

        return updatePurchaseOrderCall(xeroTenantId, purchaseOrderID, purchaseOrders, _callback);

    }

    /**
     * Updates a specific purchase order
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for a PurchaseOrder (required)
     * @param purchaseOrders  (required)
     * @return PurchaseOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for updated PurchaseOrder </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseOrders updatePurchaseOrder(String xeroTenantId, UUID purchaseOrderID, PurchaseOrders purchaseOrders) throws ApiException {
        ApiResponse<PurchaseOrders> localVarResp = updatePurchaseOrderWithHttpInfo(xeroTenantId, purchaseOrderID, purchaseOrders);
        return localVarResp.getData();
    }

    /**
     * Updates a specific purchase order
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for a PurchaseOrder (required)
     * @param purchaseOrders  (required)
     * @return ApiResponse&lt;PurchaseOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for updated PurchaseOrder </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PurchaseOrders> updatePurchaseOrderWithHttpInfo(String xeroTenantId, UUID purchaseOrderID, PurchaseOrders purchaseOrders) throws ApiException {
        okhttp3.Call localVarCall = updatePurchaseOrderValidateBeforeCall(xeroTenantId, purchaseOrderID, purchaseOrders, null);
        Type localVarReturnType = new TypeToken<PurchaseOrders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific purchase order (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for a PurchaseOrder (required)
     * @param purchaseOrders  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type PurchaseOrder array for updated PurchaseOrder </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePurchaseOrderAsync(String xeroTenantId, UUID purchaseOrderID, PurchaseOrders purchaseOrders, final ApiCallback<PurchaseOrders> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePurchaseOrderValidateBeforeCall(xeroTenantId, purchaseOrderID, purchaseOrders, _callback);
        Type localVarReturnType = new TypeToken<PurchaseOrders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePurchaseOrderAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Order object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePurchaseOrderAttachmentByFileNameCall(String xeroTenantId, UUID purchaseOrderID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}"
            .replace("{" + "PurchaseOrderID" + "}", localVarApiClient.escapeString(purchaseOrderID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePurchaseOrderAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID purchaseOrderID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updatePurchaseOrderAttachmentByFileName(Async)");
        }

        // verify the required parameter 'purchaseOrderID' is set
        if (purchaseOrderID == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrderID' when calling updatePurchaseOrderAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling updatePurchaseOrderAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePurchaseOrderAttachmentByFileName(Async)");
        }

        return updatePurchaseOrderAttachmentByFileNameCall(xeroTenantId, purchaseOrderID, fileName, body, _callback);

    }

    /**
     * Updates a specific attachment for a specific purchase order by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Order object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments updatePurchaseOrderAttachmentByFileName(String xeroTenantId, UUID purchaseOrderID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = updatePurchaseOrderAttachmentByFileNameWithHttpInfo(xeroTenantId, purchaseOrderID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * Updates a specific attachment for a specific purchase order by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Order object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> updatePurchaseOrderAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID purchaseOrderID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = updatePurchaseOrderAttachmentByFileNameValidateBeforeCall(xeroTenantId, purchaseOrderID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific attachment for a specific purchase order by filename (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param purchaseOrderID Unique identifier for Purchase Order object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePurchaseOrderAttachmentByFileNameAsync(String xeroTenantId, UUID purchaseOrderID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePurchaseOrderAttachmentByFileNameValidateBeforeCall(xeroTenantId, purchaseOrderID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateQuote
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @param quotes  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Quotes array with updated Quote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateQuoteCall(String xeroTenantId, UUID quoteID, Quotes quotes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = quotes;

        // create path and map variables
        String localVarPath = "/Quotes/{QuoteID}"
            .replace("{" + "QuoteID" + "}", localVarApiClient.escapeString(quoteID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateQuoteValidateBeforeCall(String xeroTenantId, UUID quoteID, Quotes quotes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateQuote(Async)");
        }

        // verify the required parameter 'quoteID' is set
        if (quoteID == null) {
            throw new ApiException("Missing the required parameter 'quoteID' when calling updateQuote(Async)");
        }

        // verify the required parameter 'quotes' is set
        if (quotes == null) {
            throw new ApiException("Missing the required parameter 'quotes' when calling updateQuote(Async)");
        }

        return updateQuoteCall(xeroTenantId, quoteID, quotes, _callback);

    }

    /**
     * Updates a specific quote
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @param quotes  (required)
     * @return Quotes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Quotes array with updated Quote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Quotes updateQuote(String xeroTenantId, UUID quoteID, Quotes quotes) throws ApiException {
        ApiResponse<Quotes> localVarResp = updateQuoteWithHttpInfo(xeroTenantId, quoteID, quotes);
        return localVarResp.getData();
    }

    /**
     * Updates a specific quote
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @param quotes  (required)
     * @return ApiResponse&lt;Quotes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Quotes array with updated Quote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quotes> updateQuoteWithHttpInfo(String xeroTenantId, UUID quoteID, Quotes quotes) throws ApiException {
        okhttp3.Call localVarCall = updateQuoteValidateBeforeCall(xeroTenantId, quoteID, quotes, null);
        Type localVarReturnType = new TypeToken<Quotes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific quote (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for an Quote (required)
     * @param quotes  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Quotes array with updated Quote </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateQuoteAsync(String xeroTenantId, UUID quoteID, Quotes quotes, final ApiCallback<Quotes> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateQuoteValidateBeforeCall(xeroTenantId, quoteID, quotes, _callback);
        Type localVarReturnType = new TypeToken<Quotes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateQuoteAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateQuoteAttachmentByFileNameCall(String xeroTenantId, UUID quoteID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Quotes/{QuoteID}/Attachments/{FileName}"
            .replace("{" + "QuoteID" + "}", localVarApiClient.escapeString(quoteID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateQuoteAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID quoteID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateQuoteAttachmentByFileName(Async)");
        }

        // verify the required parameter 'quoteID' is set
        if (quoteID == null) {
            throw new ApiException("Missing the required parameter 'quoteID' when calling updateQuoteAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling updateQuoteAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateQuoteAttachmentByFileName(Async)");
        }

        return updateQuoteAttachmentByFileNameCall(xeroTenantId, quoteID, fileName, body, _callback);

    }

    /**
     * Updates a specific attachment from a specific quote by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments updateQuoteAttachmentByFileName(String xeroTenantId, UUID quoteID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = updateQuoteAttachmentByFileNameWithHttpInfo(xeroTenantId, quoteID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * Updates a specific attachment from a specific quote by filename
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> updateQuoteAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID quoteID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = updateQuoteAttachmentByFileNameValidateBeforeCall(xeroTenantId, quoteID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific attachment from a specific quote by filename (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param quoteID Unique identifier for Quote object (required)
     * @param fileName Name of the attachment (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array of Attachment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error - some data was incorrect returns response of type Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateQuoteAttachmentByFileNameAsync(String xeroTenantId, UUID quoteID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateQuoteAttachmentByFileNameValidateBeforeCall(xeroTenantId, quoteID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateReceipt
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param receipts  (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Receipts array for updated Receipt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReceiptCall(String xeroTenantId, UUID receiptID, Receipts receipts, Integer unitdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = receipts;

        // create path and map variables
        String localVarPath = "/Receipts/{ReceiptID}"
            .replace("{" + "ReceiptID" + "}", localVarApiClient.escapeString(receiptID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unitdp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitdp", unitdp));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReceiptValidateBeforeCall(String xeroTenantId, UUID receiptID, Receipts receipts, Integer unitdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateReceipt(Async)");
        }

        // verify the required parameter 'receiptID' is set
        if (receiptID == null) {
            throw new ApiException("Missing the required parameter 'receiptID' when calling updateReceipt(Async)");
        }

        // verify the required parameter 'receipts' is set
        if (receipts == null) {
            throw new ApiException("Missing the required parameter 'receipts' when calling updateReceipt(Async)");
        }

        return updateReceiptCall(xeroTenantId, receiptID, receipts, unitdp, _callback);

    }

    /**
     * Updates a specific draft expense claim receipts
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param receipts  (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return Receipts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Receipts array for updated Receipt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Receipts updateReceipt(String xeroTenantId, UUID receiptID, Receipts receipts, Integer unitdp) throws ApiException {
        ApiResponse<Receipts> localVarResp = updateReceiptWithHttpInfo(xeroTenantId, receiptID, receipts, unitdp);
        return localVarResp.getData();
    }

    /**
     * Updates a specific draft expense claim receipts
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param receipts  (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @return ApiResponse&lt;Receipts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Receipts array for updated Receipt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Receipts> updateReceiptWithHttpInfo(String xeroTenantId, UUID receiptID, Receipts receipts, Integer unitdp) throws ApiException {
        okhttp3.Call localVarCall = updateReceiptValidateBeforeCall(xeroTenantId, receiptID, receipts, unitdp, null);
        Type localVarReturnType = new TypeToken<Receipts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific draft expense claim receipts (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param receipts  (required)
     * @param unitdp e.g. unitdp&#x3D;4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Receipts array for updated Receipt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReceiptAsync(String xeroTenantId, UUID receiptID, Receipts receipts, Integer unitdp, final ApiCallback<Receipts> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateReceiptValidateBeforeCall(xeroTenantId, receiptID, receipts, unitdp, _callback);
        Type localVarReturnType = new TypeToken<Receipts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateReceiptAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param fileName The name of the file being attached to the Receipt (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with updated Attachment for a specified Receipt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReceiptAttachmentByFileNameCall(String xeroTenantId, UUID receiptID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Receipts/{ReceiptID}/Attachments/{FileName}"
            .replace("{" + "ReceiptID" + "}", localVarApiClient.escapeString(receiptID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReceiptAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID receiptID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateReceiptAttachmentByFileName(Async)");
        }

        // verify the required parameter 'receiptID' is set
        if (receiptID == null) {
            throw new ApiException("Missing the required parameter 'receiptID' when calling updateReceiptAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling updateReceiptAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateReceiptAttachmentByFileName(Async)");
        }

        return updateReceiptAttachmentByFileNameCall(xeroTenantId, receiptID, fileName, body, _callback);

    }

    /**
     * Updates a specific attachment on a specific expense claim receipts by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param fileName The name of the file being attached to the Receipt (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with updated Attachment for a specified Receipt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments updateReceiptAttachmentByFileName(String xeroTenantId, UUID receiptID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = updateReceiptAttachmentByFileNameWithHttpInfo(xeroTenantId, receiptID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * Updates a specific attachment on a specific expense claim receipts by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param fileName The name of the file being attached to the Receipt (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with updated Attachment for a specified Receipt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> updateReceiptAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID receiptID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = updateReceiptAttachmentByFileNameValidateBeforeCall(xeroTenantId, receiptID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific attachment on a specific expense claim receipts by file name (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param receiptID Unique identifier for a Receipt (required)
     * @param fileName The name of the file being attached to the Receipt (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with updated Attachment for a specified Receipt </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReceiptAttachmentByFileNameAsync(String xeroTenantId, UUID receiptID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateReceiptAttachmentByFileNameValidateBeforeCall(xeroTenantId, receiptID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRepeatingInvoiceAttachmentByFileName
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param fileName The name of the file being attached to a Repeating Invoice (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with specified Attachment for a specified Repeating Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepeatingInvoiceAttachmentByFileNameCall(String xeroTenantId, UUID repeatingInvoiceID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}"
            .replace("{" + "RepeatingInvoiceID" + "}", localVarApiClient.escapeString(repeatingInvoiceID.toString()))
            .replace("{" + "FileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRepeatingInvoiceAttachmentByFileNameValidateBeforeCall(String xeroTenantId, UUID repeatingInvoiceID, String fileName, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateRepeatingInvoiceAttachmentByFileName(Async)");
        }

        // verify the required parameter 'repeatingInvoiceID' is set
        if (repeatingInvoiceID == null) {
            throw new ApiException("Missing the required parameter 'repeatingInvoiceID' when calling updateRepeatingInvoiceAttachmentByFileName(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling updateRepeatingInvoiceAttachmentByFileName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRepeatingInvoiceAttachmentByFileName(Async)");
        }

        return updateRepeatingInvoiceAttachmentByFileNameCall(xeroTenantId, repeatingInvoiceID, fileName, body, _callback);

    }

    /**
     * Updates a specific attachment from a specific repeating invoices by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param fileName The name of the file being attached to a Repeating Invoice (required)
     * @param body Byte array of file in body of request (required)
     * @return Attachments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with specified Attachment for a specified Repeating Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public Attachments updateRepeatingInvoiceAttachmentByFileName(String xeroTenantId, UUID repeatingInvoiceID, String fileName, byte[] body) throws ApiException {
        ApiResponse<Attachments> localVarResp = updateRepeatingInvoiceAttachmentByFileNameWithHttpInfo(xeroTenantId, repeatingInvoiceID, fileName, body);
        return localVarResp.getData();
    }

    /**
     * Updates a specific attachment from a specific repeating invoices by file name
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param fileName The name of the file being attached to a Repeating Invoice (required)
     * @param body Byte array of file in body of request (required)
     * @return ApiResponse&lt;Attachments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with specified Attachment for a specified Repeating Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachments> updateRepeatingInvoiceAttachmentByFileNameWithHttpInfo(String xeroTenantId, UUID repeatingInvoiceID, String fileName, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = updateRepeatingInvoiceAttachmentByFileNameValidateBeforeCall(xeroTenantId, repeatingInvoiceID, fileName, body, null);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific attachment from a specific repeating invoices by file name (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param repeatingInvoiceID Unique identifier for a Repeating Invoice (required)
     * @param fileName The name of the file being attached to a Repeating Invoice (required)
     * @param body Byte array of file in body of request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type Attachments array with specified Attachment for a specified Repeating Invoice </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepeatingInvoiceAttachmentByFileNameAsync(String xeroTenantId, UUID repeatingInvoiceID, String fileName, byte[] body, final ApiCallback<Attachments> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRepeatingInvoiceAttachmentByFileNameValidateBeforeCall(xeroTenantId, repeatingInvoiceID, fileName, body, _callback);
        Type localVarReturnType = new TypeToken<Attachments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTaxRate
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param taxRates  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TaxRates array updated TaxRate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaxRateCall(String xeroTenantId, TaxRates taxRates, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taxRates;

        // create path and map variables
        String localVarPath = "/TaxRates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaxRateValidateBeforeCall(String xeroTenantId, TaxRates taxRates, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateTaxRate(Async)");
        }

        // verify the required parameter 'taxRates' is set
        if (taxRates == null) {
            throw new ApiException("Missing the required parameter 'taxRates' when calling updateTaxRate(Async)");
        }

        return updateTaxRateCall(xeroTenantId, taxRates, _callback);

    }

    /**
     * Updates tax rates
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param taxRates  (required)
     * @return TaxRates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TaxRates array updated TaxRate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public TaxRates updateTaxRate(String xeroTenantId, TaxRates taxRates) throws ApiException {
        ApiResponse<TaxRates> localVarResp = updateTaxRateWithHttpInfo(xeroTenantId, taxRates);
        return localVarResp.getData();
    }

    /**
     * Updates tax rates
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param taxRates  (required)
     * @return ApiResponse&lt;TaxRates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TaxRates array updated TaxRate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxRates> updateTaxRateWithHttpInfo(String xeroTenantId, TaxRates taxRates) throws ApiException {
        okhttp3.Call localVarCall = updateTaxRateValidateBeforeCall(xeroTenantId, taxRates, null);
        Type localVarReturnType = new TypeToken<TaxRates>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates tax rates (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param taxRates  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TaxRates array updated TaxRate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaxRateAsync(String xeroTenantId, TaxRates taxRates, final ApiCallback<TaxRates> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaxRateValidateBeforeCall(xeroTenantId, taxRates, _callback);
        Type localVarReturnType = new TypeToken<TaxRates>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTrackingCategory
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param trackingCategory  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of updated TrackingCategory </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTrackingCategoryCall(String xeroTenantId, UUID trackingCategoryID, TrackingCategory trackingCategory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trackingCategory;

        // create path and map variables
        String localVarPath = "/TrackingCategories/{TrackingCategoryID}"
            .replace("{" + "TrackingCategoryID" + "}", localVarApiClient.escapeString(trackingCategoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTrackingCategoryValidateBeforeCall(String xeroTenantId, UUID trackingCategoryID, TrackingCategory trackingCategory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateTrackingCategory(Async)");
        }

        // verify the required parameter 'trackingCategoryID' is set
        if (trackingCategoryID == null) {
            throw new ApiException("Missing the required parameter 'trackingCategoryID' when calling updateTrackingCategory(Async)");
        }

        // verify the required parameter 'trackingCategory' is set
        if (trackingCategory == null) {
            throw new ApiException("Missing the required parameter 'trackingCategory' when calling updateTrackingCategory(Async)");
        }

        return updateTrackingCategoryCall(xeroTenantId, trackingCategoryID, trackingCategory, _callback);

    }

    /**
     * Updates a specific tracking category
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param trackingCategory  (required)
     * @return TrackingCategories
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of updated TrackingCategory </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public TrackingCategories updateTrackingCategory(String xeroTenantId, UUID trackingCategoryID, TrackingCategory trackingCategory) throws ApiException {
        ApiResponse<TrackingCategories> localVarResp = updateTrackingCategoryWithHttpInfo(xeroTenantId, trackingCategoryID, trackingCategory);
        return localVarResp.getData();
    }

    /**
     * Updates a specific tracking category
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param trackingCategory  (required)
     * @return ApiResponse&lt;TrackingCategories&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of updated TrackingCategory </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackingCategories> updateTrackingCategoryWithHttpInfo(String xeroTenantId, UUID trackingCategoryID, TrackingCategory trackingCategory) throws ApiException {
        okhttp3.Call localVarCall = updateTrackingCategoryValidateBeforeCall(xeroTenantId, trackingCategoryID, trackingCategory, null);
        Type localVarReturnType = new TypeToken<TrackingCategories>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific tracking category (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param trackingCategory  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingCategories array of updated TrackingCategory </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTrackingCategoryAsync(String xeroTenantId, UUID trackingCategoryID, TrackingCategory trackingCategory, final ApiCallback<TrackingCategories> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTrackingCategoryValidateBeforeCall(xeroTenantId, trackingCategoryID, trackingCategory, _callback);
        Type localVarReturnType = new TypeToken<TrackingCategories>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTrackingOptions
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param trackingOptionID Unique identifier for a Tracking Option (required)
     * @param trackingOption  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingOptions array of options for a specified category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTrackingOptionsCall(String xeroTenantId, UUID trackingCategoryID, UUID trackingOptionID, TrackingOption trackingOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trackingOption;

        // create path and map variables
        String localVarPath = "/TrackingCategories/{TrackingCategoryID}/Options/{TrackingOptionID}"
            .replace("{" + "TrackingCategoryID" + "}", localVarApiClient.escapeString(trackingCategoryID.toString()))
            .replace("{" + "TrackingOptionID" + "}", localVarApiClient.escapeString(trackingOptionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("xero-tenant-id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTrackingOptionsValidateBeforeCall(String xeroTenantId, UUID trackingCategoryID, UUID trackingOptionID, TrackingOption trackingOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateTrackingOptions(Async)");
        }

        // verify the required parameter 'trackingCategoryID' is set
        if (trackingCategoryID == null) {
            throw new ApiException("Missing the required parameter 'trackingCategoryID' when calling updateTrackingOptions(Async)");
        }

        // verify the required parameter 'trackingOptionID' is set
        if (trackingOptionID == null) {
            throw new ApiException("Missing the required parameter 'trackingOptionID' when calling updateTrackingOptions(Async)");
        }

        // verify the required parameter 'trackingOption' is set
        if (trackingOption == null) {
            throw new ApiException("Missing the required parameter 'trackingOption' when calling updateTrackingOptions(Async)");
        }

        return updateTrackingOptionsCall(xeroTenantId, trackingCategoryID, trackingOptionID, trackingOption, _callback);

    }

    /**
     * Updates a specific option for a specific tracking category
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param trackingOptionID Unique identifier for a Tracking Option (required)
     * @param trackingOption  (required)
     * @return TrackingOptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingOptions array of options for a specified category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public TrackingOptions updateTrackingOptions(String xeroTenantId, UUID trackingCategoryID, UUID trackingOptionID, TrackingOption trackingOption) throws ApiException {
        ApiResponse<TrackingOptions> localVarResp = updateTrackingOptionsWithHttpInfo(xeroTenantId, trackingCategoryID, trackingOptionID, trackingOption);
        return localVarResp.getData();
    }

    /**
     * Updates a specific option for a specific tracking category
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param trackingOptionID Unique identifier for a Tracking Option (required)
     * @param trackingOption  (required)
     * @return ApiResponse&lt;TrackingOptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingOptions array of options for a specified category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackingOptions> updateTrackingOptionsWithHttpInfo(String xeroTenantId, UUID trackingCategoryID, UUID trackingOptionID, TrackingOption trackingOption) throws ApiException {
        okhttp3.Call localVarCall = updateTrackingOptionsValidateBeforeCall(xeroTenantId, trackingCategoryID, trackingOptionID, trackingOption, null);
        Type localVarReturnType = new TypeToken<TrackingOptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific option for a specific tracking category (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param trackingCategoryID Unique identifier for a TrackingCategory (required)
     * @param trackingOptionID Unique identifier for a Tracking Option (required)
     * @param trackingOption  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - return response of type TrackingOptions array of options for a specified category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failed request due to validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTrackingOptionsAsync(String xeroTenantId, UUID trackingCategoryID, UUID trackingOptionID, TrackingOption trackingOption, final ApiCallback<TrackingOptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTrackingOptionsValidateBeforeCall(xeroTenantId, trackingCategoryID, trackingOptionID, trackingOption, _callback);
        Type localVarReturnType = new TypeToken<TrackingOptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
