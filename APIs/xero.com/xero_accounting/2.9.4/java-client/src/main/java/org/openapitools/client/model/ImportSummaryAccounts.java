/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A summary of the accounts changes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportSummaryAccounts {
  public static final String SERIALIZED_NAME_DELETED = "Deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private BigDecimal deleted;

  public static final String SERIALIZED_NAME_ERRORED = "Errored";
  @SerializedName(SERIALIZED_NAME_ERRORED)
  private BigDecimal errored;

  public static final String SERIALIZED_NAME_LOCKED = "Locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private BigDecimal locked;

  public static final String SERIALIZED_NAME_NEW = "New";
  @SerializedName(SERIALIZED_NAME_NEW)
  private BigDecimal _new;

  public static final String SERIALIZED_NAME_NEW_OR_UPDATED = "NewOrUpdated";
  @SerializedName(SERIALIZED_NAME_NEW_OR_UPDATED)
  private BigDecimal newOrUpdated;

  public static final String SERIALIZED_NAME_PRESENT = "Present";
  @SerializedName(SERIALIZED_NAME_PRESENT)
  private Boolean present;

  public static final String SERIALIZED_NAME_SYSTEM = "System";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private BigDecimal system;

  public static final String SERIALIZED_NAME_TOTAL = "Total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private BigDecimal updated;

  public ImportSummaryAccounts() {
  }

  public ImportSummaryAccounts deleted(BigDecimal deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * The number of accounts deleted
   * @return deleted
   */
  @javax.annotation.Nullable
  public BigDecimal getDeleted() {
    return deleted;
  }

  public void setDeleted(BigDecimal deleted) {
    this.deleted = deleted;
  }


  public ImportSummaryAccounts errored(BigDecimal errored) {
    this.errored = errored;
    return this;
  }

  /**
   * The number of accounts that had an error
   * @return errored
   */
  @javax.annotation.Nullable
  public BigDecimal getErrored() {
    return errored;
  }

  public void setErrored(BigDecimal errored) {
    this.errored = errored;
  }


  public ImportSummaryAccounts locked(BigDecimal locked) {
    this.locked = locked;
    return this;
  }

  /**
   * The number of locked accounts
   * @return locked
   */
  @javax.annotation.Nullable
  public BigDecimal getLocked() {
    return locked;
  }

  public void setLocked(BigDecimal locked) {
    this.locked = locked;
  }


  public ImportSummaryAccounts _new(BigDecimal _new) {
    this._new = _new;
    return this;
  }

  /**
   * The number of new accounts created
   * @return _new
   */
  @javax.annotation.Nullable
  public BigDecimal getNew() {
    return _new;
  }

  public void setNew(BigDecimal _new) {
    this._new = _new;
  }


  public ImportSummaryAccounts newOrUpdated(BigDecimal newOrUpdated) {
    this.newOrUpdated = newOrUpdated;
    return this;
  }

  /**
   * The number of new or updated accounts
   * @return newOrUpdated
   */
  @javax.annotation.Nullable
  public BigDecimal getNewOrUpdated() {
    return newOrUpdated;
  }

  public void setNewOrUpdated(BigDecimal newOrUpdated) {
    this.newOrUpdated = newOrUpdated;
  }


  public ImportSummaryAccounts present(Boolean present) {
    this.present = present;
    return this;
  }

  /**
   * Get present
   * @return present
   */
  @javax.annotation.Nullable
  public Boolean getPresent() {
    return present;
  }

  public void setPresent(Boolean present) {
    this.present = present;
  }


  public ImportSummaryAccounts system(BigDecimal system) {
    this.system = system;
    return this;
  }

  /**
   * The number of system accounts
   * @return system
   */
  @javax.annotation.Nullable
  public BigDecimal getSystem() {
    return system;
  }

  public void setSystem(BigDecimal system) {
    this.system = system;
  }


  public ImportSummaryAccounts total(BigDecimal total) {
    this.total = total;
    return this;
  }

  /**
   * The total number of accounts in the org
   * @return total
   */
  @javax.annotation.Nullable
  public BigDecimal getTotal() {
    return total;
  }

  public void setTotal(BigDecimal total) {
    this.total = total;
  }


  public ImportSummaryAccounts updated(BigDecimal updated) {
    this.updated = updated;
    return this;
  }

  /**
   * The number of accounts updated
   * @return updated
   */
  @javax.annotation.Nullable
  public BigDecimal getUpdated() {
    return updated;
  }

  public void setUpdated(BigDecimal updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportSummaryAccounts importSummaryAccounts = (ImportSummaryAccounts) o;
    return Objects.equals(this.deleted, importSummaryAccounts.deleted) &&
        Objects.equals(this.errored, importSummaryAccounts.errored) &&
        Objects.equals(this.locked, importSummaryAccounts.locked) &&
        Objects.equals(this._new, importSummaryAccounts._new) &&
        Objects.equals(this.newOrUpdated, importSummaryAccounts.newOrUpdated) &&
        Objects.equals(this.present, importSummaryAccounts.present) &&
        Objects.equals(this.system, importSummaryAccounts.system) &&
        Objects.equals(this.total, importSummaryAccounts.total) &&
        Objects.equals(this.updated, importSummaryAccounts.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deleted, errored, locked, _new, newOrUpdated, present, system, total, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportSummaryAccounts {\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    errored: ").append(toIndentedString(errored)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    _new: ").append(toIndentedString(_new)).append("\n");
    sb.append("    newOrUpdated: ").append(toIndentedString(newOrUpdated)).append("\n");
    sb.append("    present: ").append(toIndentedString(present)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Deleted");
    openapiFields.add("Errored");
    openapiFields.add("Locked");
    openapiFields.add("New");
    openapiFields.add("NewOrUpdated");
    openapiFields.add("Present");
    openapiFields.add("System");
    openapiFields.add("Total");
    openapiFields.add("Updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportSummaryAccounts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportSummaryAccounts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportSummaryAccounts is not found in the empty JSON string", ImportSummaryAccounts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportSummaryAccounts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportSummaryAccounts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportSummaryAccounts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportSummaryAccounts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportSummaryAccounts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportSummaryAccounts.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportSummaryAccounts>() {
           @Override
           public void write(JsonWriter out, ImportSummaryAccounts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportSummaryAccounts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportSummaryAccounts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportSummaryAccounts
   * @throws IOException if the JSON string is invalid with respect to ImportSummaryAccounts
   */
  public static ImportSummaryAccounts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportSummaryAccounts.class);
  }

  /**
   * Convert an instance of ImportSummaryAccounts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

