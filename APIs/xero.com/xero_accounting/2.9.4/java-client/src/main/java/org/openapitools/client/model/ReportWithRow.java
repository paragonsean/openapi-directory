/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReportFields;
import org.openapitools.client.model.ReportRows;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReportWithRow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportWithRow {
  public static final String SERIALIZED_NAME_FIELDS = "Fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<ReportFields> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPORT_DATE = "ReportDate";
  @SerializedName(SERIALIZED_NAME_REPORT_DATE)
  private String reportDate;

  public static final String SERIALIZED_NAME_REPORT_I_D = "ReportID";
  @SerializedName(SERIALIZED_NAME_REPORT_I_D)
  private String reportID;

  public static final String SERIALIZED_NAME_REPORT_NAME = "ReportName";
  @SerializedName(SERIALIZED_NAME_REPORT_NAME)
  private String reportName;

  public static final String SERIALIZED_NAME_REPORT_TITLE = "ReportTitle";
  @SerializedName(SERIALIZED_NAME_REPORT_TITLE)
  private String reportTitle;

  public static final String SERIALIZED_NAME_REPORT_TITLES = "ReportTitles";
  @SerializedName(SERIALIZED_NAME_REPORT_TITLES)
  private List<String> reportTitles = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPORT_TYPE = "ReportType";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE)
  private String reportType;

  public static final String SERIALIZED_NAME_ROWS = "Rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private List<ReportRows> rows = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public ReportWithRow() {
  }

  public ReportWithRow(
     String updatedDateUTC
  ) {
    this();
    this.updatedDateUTC = updatedDateUTC;
  }

  public ReportWithRow fields(List<ReportFields> fields) {
    this.fields = fields;
    return this;
  }

  public ReportWithRow addFieldsItem(ReportFields fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * Get fields
   * @return fields
   */
  @javax.annotation.Nullable
  public List<ReportFields> getFields() {
    return fields;
  }

  public void setFields(List<ReportFields> fields) {
    this.fields = fields;
  }


  public ReportWithRow reportDate(String reportDate) {
    this.reportDate = reportDate;
    return this;
  }

  /**
   * Date of report
   * @return reportDate
   */
  @javax.annotation.Nullable
  public String getReportDate() {
    return reportDate;
  }

  public void setReportDate(String reportDate) {
    this.reportDate = reportDate;
  }


  public ReportWithRow reportID(String reportID) {
    this.reportID = reportID;
    return this;
  }

  /**
   * Report id
   * @return reportID
   */
  @javax.annotation.Nullable
  public String getReportID() {
    return reportID;
  }

  public void setReportID(String reportID) {
    this.reportID = reportID;
  }


  public ReportWithRow reportName(String reportName) {
    this.reportName = reportName;
    return this;
  }

  /**
   * Name of the report
   * @return reportName
   */
  @javax.annotation.Nullable
  public String getReportName() {
    return reportName;
  }

  public void setReportName(String reportName) {
    this.reportName = reportName;
  }


  public ReportWithRow reportTitle(String reportTitle) {
    this.reportTitle = reportTitle;
    return this;
  }

  /**
   * Title of the report
   * @return reportTitle
   */
  @javax.annotation.Nullable
  public String getReportTitle() {
    return reportTitle;
  }

  public void setReportTitle(String reportTitle) {
    this.reportTitle = reportTitle;
  }


  public ReportWithRow reportTitles(List<String> reportTitles) {
    this.reportTitles = reportTitles;
    return this;
  }

  public ReportWithRow addReportTitlesItem(String reportTitlesItem) {
    if (this.reportTitles == null) {
      this.reportTitles = new ArrayList<>();
    }
    this.reportTitles.add(reportTitlesItem);
    return this;
  }

  /**
   * Report titles array (3 to 4 strings with the report name, orgnisation name and time frame of report)
   * @return reportTitles
   */
  @javax.annotation.Nullable
  public List<String> getReportTitles() {
    return reportTitles;
  }

  public void setReportTitles(List<String> reportTitles) {
    this.reportTitles = reportTitles;
  }


  public ReportWithRow reportType(String reportType) {
    this.reportType = reportType;
    return this;
  }

  /**
   * The type of report (BalanceSheet,ProfitLoss, etc)
   * @return reportType
   */
  @javax.annotation.Nullable
  public String getReportType() {
    return reportType;
  }

  public void setReportType(String reportType) {
    this.reportType = reportType;
  }


  public ReportWithRow rows(List<ReportRows> rows) {
    this.rows = rows;
    return this;
  }

  public ReportWithRow addRowsItem(ReportRows rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

  /**
   * Get rows
   * @return rows
   */
  @javax.annotation.Nullable
  public List<ReportRows> getRows() {
    return rows;
  }

  public void setRows(List<ReportRows> rows) {
    this.rows = rows;
  }


  /**
   * Updated Date
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportWithRow reportWithRow = (ReportWithRow) o;
    return Objects.equals(this.fields, reportWithRow.fields) &&
        Objects.equals(this.reportDate, reportWithRow.reportDate) &&
        Objects.equals(this.reportID, reportWithRow.reportID) &&
        Objects.equals(this.reportName, reportWithRow.reportName) &&
        Objects.equals(this.reportTitle, reportWithRow.reportTitle) &&
        Objects.equals(this.reportTitles, reportWithRow.reportTitles) &&
        Objects.equals(this.reportType, reportWithRow.reportType) &&
        Objects.equals(this.rows, reportWithRow.rows) &&
        Objects.equals(this.updatedDateUTC, reportWithRow.updatedDateUTC);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fields, reportDate, reportID, reportName, reportTitle, reportTitles, reportType, rows, updatedDateUTC);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportWithRow {\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    reportDate: ").append(toIndentedString(reportDate)).append("\n");
    sb.append("    reportID: ").append(toIndentedString(reportID)).append("\n");
    sb.append("    reportName: ").append(toIndentedString(reportName)).append("\n");
    sb.append("    reportTitle: ").append(toIndentedString(reportTitle)).append("\n");
    sb.append("    reportTitles: ").append(toIndentedString(reportTitles)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Fields");
    openapiFields.add("ReportDate");
    openapiFields.add("ReportID");
    openapiFields.add("ReportName");
    openapiFields.add("ReportTitle");
    openapiFields.add("ReportTitles");
    openapiFields.add("ReportType");
    openapiFields.add("Rows");
    openapiFields.add("UpdatedDateUTC");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportWithRow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportWithRow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportWithRow is not found in the empty JSON string", ReportWithRow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportWithRow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportWithRow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Fields") != null && !jsonObj.get("Fields").isJsonNull()) {
        JsonArray jsonArrayfields = jsonObj.getAsJsonArray("Fields");
        if (jsonArrayfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Fields` to be an array in the JSON string but got `%s`", jsonObj.get("Fields").toString()));
          }

          // validate the optional field `Fields` (array)
          for (int i = 0; i < jsonArrayfields.size(); i++) {
            ReportFields.validateJsonElement(jsonArrayfields.get(i));
          };
        }
      }
      if ((jsonObj.get("ReportDate") != null && !jsonObj.get("ReportDate").isJsonNull()) && !jsonObj.get("ReportDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportDate").toString()));
      }
      if ((jsonObj.get("ReportID") != null && !jsonObj.get("ReportID").isJsonNull()) && !jsonObj.get("ReportID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportID").toString()));
      }
      if ((jsonObj.get("ReportName") != null && !jsonObj.get("ReportName").isJsonNull()) && !jsonObj.get("ReportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportName").toString()));
      }
      if ((jsonObj.get("ReportTitle") != null && !jsonObj.get("ReportTitle").isJsonNull()) && !jsonObj.get("ReportTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportTitle").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ReportTitles") != null && !jsonObj.get("ReportTitles").isJsonNull() && !jsonObj.get("ReportTitles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportTitles` to be an array in the JSON string but got `%s`", jsonObj.get("ReportTitles").toString()));
      }
      if ((jsonObj.get("ReportType") != null && !jsonObj.get("ReportType").isJsonNull()) && !jsonObj.get("ReportType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportType").toString()));
      }
      if (jsonObj.get("Rows") != null && !jsonObj.get("Rows").isJsonNull()) {
        JsonArray jsonArrayrows = jsonObj.getAsJsonArray("Rows");
        if (jsonArrayrows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Rows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Rows` to be an array in the JSON string but got `%s`", jsonObj.get("Rows").toString()));
          }

          // validate the optional field `Rows` (array)
          for (int i = 0; i < jsonArrayrows.size(); i++) {
            ReportRows.validateJsonElement(jsonArrayrows.get(i));
          };
        }
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportWithRow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportWithRow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportWithRow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportWithRow.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportWithRow>() {
           @Override
           public void write(JsonWriter out, ReportWithRow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportWithRow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportWithRow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportWithRow
   * @throws IOException if the JSON string is invalid with respect to ReportWithRow
   */
  public static ReportWithRow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportWithRow.class);
  }

  /**
   * Convert an instance of ReportWithRow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

