/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Purchase;
import org.openapitools.client.model.ValidationError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Item
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Item {
  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INVENTORY_ASSET_ACCOUNT_CODE = "InventoryAssetAccountCode";
  @SerializedName(SERIALIZED_NAME_INVENTORY_ASSET_ACCOUNT_CODE)
  private String inventoryAssetAccountCode;

  public static final String SERIALIZED_NAME_IS_PURCHASED = "IsPurchased";
  @SerializedName(SERIALIZED_NAME_IS_PURCHASED)
  private Boolean isPurchased;

  public static final String SERIALIZED_NAME_IS_SOLD = "IsSold";
  @SerializedName(SERIALIZED_NAME_IS_SOLD)
  private Boolean isSold;

  public static final String SERIALIZED_NAME_IS_TRACKED_AS_INVENTORY = "IsTrackedAsInventory";
  @SerializedName(SERIALIZED_NAME_IS_TRACKED_AS_INVENTORY)
  private Boolean isTrackedAsInventory;

  public static final String SERIALIZED_NAME_ITEM_I_D = "ItemID";
  @SerializedName(SERIALIZED_NAME_ITEM_I_D)
  private UUID itemID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PURCHASE_DESCRIPTION = "PurchaseDescription";
  @SerializedName(SERIALIZED_NAME_PURCHASE_DESCRIPTION)
  private String purchaseDescription;

  public static final String SERIALIZED_NAME_PURCHASE_DETAILS = "PurchaseDetails";
  @SerializedName(SERIALIZED_NAME_PURCHASE_DETAILS)
  private Purchase purchaseDetails;

  public static final String SERIALIZED_NAME_QUANTITY_ON_HAND = "QuantityOnHand";
  @SerializedName(SERIALIZED_NAME_QUANTITY_ON_HAND)
  private Double quantityOnHand;

  public static final String SERIALIZED_NAME_SALES_DETAILS = "SalesDetails";
  @SerializedName(SERIALIZED_NAME_SALES_DETAILS)
  private Purchase salesDetails;

  public static final String SERIALIZED_NAME_STATUS_ATTRIBUTE_STRING = "StatusAttributeString";
  @SerializedName(SERIALIZED_NAME_STATUS_ATTRIBUTE_STRING)
  private String statusAttributeString;

  public static final String SERIALIZED_NAME_TOTAL_COST_POOL = "TotalCostPool";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST_POOL)
  private Double totalCostPool;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "ValidationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<ValidationError> validationErrors = new ArrayList<>();

  public Item() {
  }

  public Item(
     String updatedDateUTC
  ) {
    this();
    this.updatedDateUTC = updatedDateUTC;
  }

  public Item code(String code) {
    this.code = code;
    return this;
  }

  /**
   * User defined item code (max length &#x3D; 30)
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public Item description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The sales description of the item (max length &#x3D; 4000)
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Item inventoryAssetAccountCode(String inventoryAssetAccountCode) {
    this.inventoryAssetAccountCode = inventoryAssetAccountCode;
    return this;
  }

  /**
   * The inventory asset account for the item. The account must be of type INVENTORY. The  COGSAccountCode in PurchaseDetails is also required to create a tracked item
   * @return inventoryAssetAccountCode
   */
  @javax.annotation.Nullable
  public String getInventoryAssetAccountCode() {
    return inventoryAssetAccountCode;
  }

  public void setInventoryAssetAccountCode(String inventoryAssetAccountCode) {
    this.inventoryAssetAccountCode = inventoryAssetAccountCode;
  }


  public Item isPurchased(Boolean isPurchased) {
    this.isPurchased = isPurchased;
    return this;
  }

  /**
   * Boolean value, defaults to true. When IsPurchased is true the item is available for purchase transactions in the Xero UI. If IsPurchased is updated to false then PurchaseDescription and PurchaseDetails values will be nulled.
   * @return isPurchased
   */
  @javax.annotation.Nullable
  public Boolean getIsPurchased() {
    return isPurchased;
  }

  public void setIsPurchased(Boolean isPurchased) {
    this.isPurchased = isPurchased;
  }


  public Item isSold(Boolean isSold) {
    this.isSold = isSold;
    return this;
  }

  /**
   * Boolean value, defaults to true. When IsSold is true the item will be available on sales transactions in the Xero UI. If IsSold is updated to false then Description and SalesDetails values will be nulled.
   * @return isSold
   */
  @javax.annotation.Nullable
  public Boolean getIsSold() {
    return isSold;
  }

  public void setIsSold(Boolean isSold) {
    this.isSold = isSold;
  }


  public Item isTrackedAsInventory(Boolean isTrackedAsInventory) {
    this.isTrackedAsInventory = isTrackedAsInventory;
    return this;
  }

  /**
   * True for items that are tracked as inventory. An item will be tracked as inventory if the InventoryAssetAccountCode and COGSAccountCode are set.
   * @return isTrackedAsInventory
   */
  @javax.annotation.Nullable
  public Boolean getIsTrackedAsInventory() {
    return isTrackedAsInventory;
  }

  public void setIsTrackedAsInventory(Boolean isTrackedAsInventory) {
    this.isTrackedAsInventory = isTrackedAsInventory;
  }


  public Item itemID(UUID itemID) {
    this.itemID = itemID;
    return this;
  }

  /**
   * The Xero identifier for an Item
   * @return itemID
   */
  @javax.annotation.Nullable
  public UUID getItemID() {
    return itemID;
  }

  public void setItemID(UUID itemID) {
    this.itemID = itemID;
  }


  public Item name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the item (max length &#x3D; 50)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Item purchaseDescription(String purchaseDescription) {
    this.purchaseDescription = purchaseDescription;
    return this;
  }

  /**
   * The purchase description of the item (max length &#x3D; 4000)
   * @return purchaseDescription
   */
  @javax.annotation.Nullable
  public String getPurchaseDescription() {
    return purchaseDescription;
  }

  public void setPurchaseDescription(String purchaseDescription) {
    this.purchaseDescription = purchaseDescription;
  }


  public Item purchaseDetails(Purchase purchaseDetails) {
    this.purchaseDetails = purchaseDetails;
    return this;
  }

  /**
   * Get purchaseDetails
   * @return purchaseDetails
   */
  @javax.annotation.Nullable
  public Purchase getPurchaseDetails() {
    return purchaseDetails;
  }

  public void setPurchaseDetails(Purchase purchaseDetails) {
    this.purchaseDetails = purchaseDetails;
  }


  public Item quantityOnHand(Double quantityOnHand) {
    this.quantityOnHand = quantityOnHand;
    return this;
  }

  /**
   * The quantity of the item on hand
   * @return quantityOnHand
   */
  @javax.annotation.Nullable
  public Double getQuantityOnHand() {
    return quantityOnHand;
  }

  public void setQuantityOnHand(Double quantityOnHand) {
    this.quantityOnHand = quantityOnHand;
  }


  public Item salesDetails(Purchase salesDetails) {
    this.salesDetails = salesDetails;
    return this;
  }

  /**
   * Get salesDetails
   * @return salesDetails
   */
  @javax.annotation.Nullable
  public Purchase getSalesDetails() {
    return salesDetails;
  }

  public void setSalesDetails(Purchase salesDetails) {
    this.salesDetails = salesDetails;
  }


  public Item statusAttributeString(String statusAttributeString) {
    this.statusAttributeString = statusAttributeString;
    return this;
  }

  /**
   * Status of object
   * @return statusAttributeString
   */
  @javax.annotation.Nullable
  public String getStatusAttributeString() {
    return statusAttributeString;
  }

  public void setStatusAttributeString(String statusAttributeString) {
    this.statusAttributeString = statusAttributeString;
  }


  public Item totalCostPool(Double totalCostPool) {
    this.totalCostPool = totalCostPool;
    return this;
  }

  /**
   * The value of the item on hand. Calculated using average cost accounting.
   * @return totalCostPool
   */
  @javax.annotation.Nullable
  public Double getTotalCostPool() {
    return totalCostPool;
  }

  public void setTotalCostPool(Double totalCostPool) {
    this.totalCostPool = totalCostPool;
  }


  /**
   * Last modified date in UTC format
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }



  public Item validationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public Item addValidationErrorsItem(ValidationError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Displays array of validation error messages from the API
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<ValidationError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Item item = (Item) o;
    return Objects.equals(this.code, item.code) &&
        Objects.equals(this.description, item.description) &&
        Objects.equals(this.inventoryAssetAccountCode, item.inventoryAssetAccountCode) &&
        Objects.equals(this.isPurchased, item.isPurchased) &&
        Objects.equals(this.isSold, item.isSold) &&
        Objects.equals(this.isTrackedAsInventory, item.isTrackedAsInventory) &&
        Objects.equals(this.itemID, item.itemID) &&
        Objects.equals(this.name, item.name) &&
        Objects.equals(this.purchaseDescription, item.purchaseDescription) &&
        Objects.equals(this.purchaseDetails, item.purchaseDetails) &&
        Objects.equals(this.quantityOnHand, item.quantityOnHand) &&
        Objects.equals(this.salesDetails, item.salesDetails) &&
        Objects.equals(this.statusAttributeString, item.statusAttributeString) &&
        Objects.equals(this.totalCostPool, item.totalCostPool) &&
        Objects.equals(this.updatedDateUTC, item.updatedDateUTC) &&
        Objects.equals(this.validationErrors, item.validationErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, description, inventoryAssetAccountCode, isPurchased, isSold, isTrackedAsInventory, itemID, name, purchaseDescription, purchaseDetails, quantityOnHand, salesDetails, statusAttributeString, totalCostPool, updatedDateUTC, validationErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Item {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    inventoryAssetAccountCode: ").append(toIndentedString(inventoryAssetAccountCode)).append("\n");
    sb.append("    isPurchased: ").append(toIndentedString(isPurchased)).append("\n");
    sb.append("    isSold: ").append(toIndentedString(isSold)).append("\n");
    sb.append("    isTrackedAsInventory: ").append(toIndentedString(isTrackedAsInventory)).append("\n");
    sb.append("    itemID: ").append(toIndentedString(itemID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    purchaseDescription: ").append(toIndentedString(purchaseDescription)).append("\n");
    sb.append("    purchaseDetails: ").append(toIndentedString(purchaseDetails)).append("\n");
    sb.append("    quantityOnHand: ").append(toIndentedString(quantityOnHand)).append("\n");
    sb.append("    salesDetails: ").append(toIndentedString(salesDetails)).append("\n");
    sb.append("    statusAttributeString: ").append(toIndentedString(statusAttributeString)).append("\n");
    sb.append("    totalCostPool: ").append(toIndentedString(totalCostPool)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Code");
    openapiFields.add("Description");
    openapiFields.add("InventoryAssetAccountCode");
    openapiFields.add("IsPurchased");
    openapiFields.add("IsSold");
    openapiFields.add("IsTrackedAsInventory");
    openapiFields.add("ItemID");
    openapiFields.add("Name");
    openapiFields.add("PurchaseDescription");
    openapiFields.add("PurchaseDetails");
    openapiFields.add("QuantityOnHand");
    openapiFields.add("SalesDetails");
    openapiFields.add("StatusAttributeString");
    openapiFields.add("TotalCostPool");
    openapiFields.add("UpdatedDateUTC");
    openapiFields.add("ValidationErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Code");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Item
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Item.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Item is not found in the empty JSON string", Item.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Item.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Item` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Item.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("InventoryAssetAccountCode") != null && !jsonObj.get("InventoryAssetAccountCode").isJsonNull()) && !jsonObj.get("InventoryAssetAccountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InventoryAssetAccountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InventoryAssetAccountCode").toString()));
      }
      if ((jsonObj.get("ItemID") != null && !jsonObj.get("ItemID").isJsonNull()) && !jsonObj.get("ItemID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ItemID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ItemID").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("PurchaseDescription") != null && !jsonObj.get("PurchaseDescription").isJsonNull()) && !jsonObj.get("PurchaseDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PurchaseDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PurchaseDescription").toString()));
      }
      // validate the optional field `PurchaseDetails`
      if (jsonObj.get("PurchaseDetails") != null && !jsonObj.get("PurchaseDetails").isJsonNull()) {
        Purchase.validateJsonElement(jsonObj.get("PurchaseDetails"));
      }
      // validate the optional field `SalesDetails`
      if (jsonObj.get("SalesDetails") != null && !jsonObj.get("SalesDetails").isJsonNull()) {
        Purchase.validateJsonElement(jsonObj.get("SalesDetails"));
      }
      if ((jsonObj.get("StatusAttributeString") != null && !jsonObj.get("StatusAttributeString").isJsonNull()) && !jsonObj.get("StatusAttributeString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatusAttributeString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusAttributeString").toString()));
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
      if (jsonObj.get("ValidationErrors") != null && !jsonObj.get("ValidationErrors").isJsonNull()) {
        JsonArray jsonArrayvalidationErrors = jsonObj.getAsJsonArray("ValidationErrors");
        if (jsonArrayvalidationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ValidationErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ValidationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("ValidationErrors").toString()));
          }

          // validate the optional field `ValidationErrors` (array)
          for (int i = 0; i < jsonArrayvalidationErrors.size(); i++) {
            ValidationError.validateJsonElement(jsonArrayvalidationErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Item.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Item' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Item> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Item.class));

       return (TypeAdapter<T>) new TypeAdapter<Item>() {
           @Override
           public void write(JsonWriter out, Item value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Item read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Item given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Item
   * @throws IOException if the JSON string is invalid with respect to Item
   */
  public static Item fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Item.class);
  }

  /**
   * Convert an instance of Item to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

