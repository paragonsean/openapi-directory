/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.TrackingOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TrackingCategory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrackingCategory {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTION = "Option";
  @SerializedName(SERIALIZED_NAME_OPTION)
  private String option;

  public static final String SERIALIZED_NAME_OPTIONS = "Options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<TrackingOption> options = new ArrayList<>();

  /**
   * The status of a tracking category
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    ARCHIVED("ARCHIVED"),
    
    DELETED("DELETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TRACKING_CATEGORY_I_D = "TrackingCategoryID";
  @SerializedName(SERIALIZED_NAME_TRACKING_CATEGORY_I_D)
  private UUID trackingCategoryID;

  public static final String SERIALIZED_NAME_TRACKING_OPTION_I_D = "TrackingOptionID";
  @SerializedName(SERIALIZED_NAME_TRACKING_OPTION_I_D)
  private UUID trackingOptionID;

  public TrackingCategory() {
  }

  public TrackingCategory name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the tracking category e.g. Department, Region (max length &#x3D; 100)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TrackingCategory option(String option) {
    this.option = option;
    return this;
  }

  /**
   * The option name of the tracking option e.g. East, West (max length &#x3D; 100)
   * @return option
   */
  @javax.annotation.Nullable
  public String getOption() {
    return option;
  }

  public void setOption(String option) {
    this.option = option;
  }


  public TrackingCategory options(List<TrackingOption> options) {
    this.options = options;
    return this;
  }

  public TrackingCategory addOptionsItem(TrackingOption optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * See Tracking Options
   * @return options
   */
  @javax.annotation.Nullable
  public List<TrackingOption> getOptions() {
    return options;
  }

  public void setOptions(List<TrackingOption> options) {
    this.options = options;
  }


  public TrackingCategory status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of a tracking category
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public TrackingCategory trackingCategoryID(UUID trackingCategoryID) {
    this.trackingCategoryID = trackingCategoryID;
    return this;
  }

  /**
   * The Xero identifier for a tracking category e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
   * @return trackingCategoryID
   */
  @javax.annotation.Nullable
  public UUID getTrackingCategoryID() {
    return trackingCategoryID;
  }

  public void setTrackingCategoryID(UUID trackingCategoryID) {
    this.trackingCategoryID = trackingCategoryID;
  }


  public TrackingCategory trackingOptionID(UUID trackingOptionID) {
    this.trackingOptionID = trackingOptionID;
    return this;
  }

  /**
   * The Xero identifier for a tracking option e.g. dc54c220-0140-495a-b925-3246adc0075f
   * @return trackingOptionID
   */
  @javax.annotation.Nullable
  public UUID getTrackingOptionID() {
    return trackingOptionID;
  }

  public void setTrackingOptionID(UUID trackingOptionID) {
    this.trackingOptionID = trackingOptionID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackingCategory trackingCategory = (TrackingCategory) o;
    return Objects.equals(this.name, trackingCategory.name) &&
        Objects.equals(this.option, trackingCategory.option) &&
        Objects.equals(this.options, trackingCategory.options) &&
        Objects.equals(this.status, trackingCategory.status) &&
        Objects.equals(this.trackingCategoryID, trackingCategory.trackingCategoryID) &&
        Objects.equals(this.trackingOptionID, trackingCategory.trackingOptionID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, option, options, status, trackingCategoryID, trackingOptionID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackingCategory {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    option: ").append(toIndentedString(option)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trackingCategoryID: ").append(toIndentedString(trackingCategoryID)).append("\n");
    sb.append("    trackingOptionID: ").append(toIndentedString(trackingOptionID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Option");
    openapiFields.add("Options");
    openapiFields.add("Status");
    openapiFields.add("TrackingCategoryID");
    openapiFields.add("TrackingOptionID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrackingCategory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrackingCategory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackingCategory is not found in the empty JSON string", TrackingCategory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrackingCategory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrackingCategory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Option") != null && !jsonObj.get("Option").isJsonNull()) && !jsonObj.get("Option").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Option` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Option").toString()));
      }
      if (jsonObj.get("Options") != null && !jsonObj.get("Options").isJsonNull()) {
        JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("Options");
        if (jsonArrayoptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Options` to be an array in the JSON string but got `%s`", jsonObj.get("Options").toString()));
          }

          // validate the optional field `Options` (array)
          for (int i = 0; i < jsonArrayoptions.size(); i++) {
            TrackingOption.validateJsonElement(jsonArrayoptions.get(i));
          };
        }
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("TrackingCategoryID") != null && !jsonObj.get("TrackingCategoryID").isJsonNull()) && !jsonObj.get("TrackingCategoryID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackingCategoryID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackingCategoryID").toString()));
      }
      if ((jsonObj.get("TrackingOptionID") != null && !jsonObj.get("TrackingOptionID").isJsonNull()) && !jsonObj.get("TrackingOptionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackingOptionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackingOptionID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackingCategory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackingCategory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackingCategory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackingCategory.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackingCategory>() {
           @Override
           public void write(JsonWriter out, TrackingCategory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackingCategory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrackingCategory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrackingCategory
   * @throws IOException if the JSON string is invalid with respect to TrackingCategory
   */
  public static TrackingCategory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackingCategory.class);
  }

  /**
   * Convert an instance of TrackingCategory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

