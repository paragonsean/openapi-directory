/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TenNinetyNineContact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Report
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Report {
  public static final String SERIALIZED_NAME_CONTACTS = "Contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private List<TenNinetyNineContact> contacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPORT_DATE = "ReportDate";
  @SerializedName(SERIALIZED_NAME_REPORT_DATE)
  private String reportDate;

  public static final String SERIALIZED_NAME_REPORT_I_D = "ReportID";
  @SerializedName(SERIALIZED_NAME_REPORT_I_D)
  private String reportID;

  public static final String SERIALIZED_NAME_REPORT_NAME = "ReportName";
  @SerializedName(SERIALIZED_NAME_REPORT_NAME)
  private String reportName;

  public static final String SERIALIZED_NAME_REPORT_TITLE = "ReportTitle";
  @SerializedName(SERIALIZED_NAME_REPORT_TITLE)
  private String reportTitle;

  /**
   * See Prepayment Types
   */
  @JsonAdapter(ReportTypeEnum.Adapter.class)
  public enum ReportTypeEnum {
    AGED_PAYABLES_BY_CONTACT("AgedPayablesByContact");

    private String value;

    ReportTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReportTypeEnum fromValue(String value) {
      for (ReportTypeEnum b : ReportTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReportTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReportTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReportTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReportTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReportTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPORT_TYPE = "ReportType";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE)
  private ReportTypeEnum reportType;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public Report() {
  }

  public Report(
     String updatedDateUTC
  ) {
    this();
    this.updatedDateUTC = updatedDateUTC;
  }

  public Report contacts(List<TenNinetyNineContact> contacts) {
    this.contacts = contacts;
    return this;
  }

  public Report addContactsItem(TenNinetyNineContact contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

  /**
   * Get contacts
   * @return contacts
   */
  @javax.annotation.Nullable
  public List<TenNinetyNineContact> getContacts() {
    return contacts;
  }

  public void setContacts(List<TenNinetyNineContact> contacts) {
    this.contacts = contacts;
  }


  public Report reportDate(String reportDate) {
    this.reportDate = reportDate;
    return this;
  }

  /**
   * Date of report
   * @return reportDate
   */
  @javax.annotation.Nullable
  public String getReportDate() {
    return reportDate;
  }

  public void setReportDate(String reportDate) {
    this.reportDate = reportDate;
  }


  public Report reportID(String reportID) {
    this.reportID = reportID;
    return this;
  }

  /**
   * See Prepayment Types
   * @return reportID
   */
  @javax.annotation.Nullable
  public String getReportID() {
    return reportID;
  }

  public void setReportID(String reportID) {
    this.reportID = reportID;
  }


  public Report reportName(String reportName) {
    this.reportName = reportName;
    return this;
  }

  /**
   * See Prepayment Types
   * @return reportName
   */
  @javax.annotation.Nullable
  public String getReportName() {
    return reportName;
  }

  public void setReportName(String reportName) {
    this.reportName = reportName;
  }


  public Report reportTitle(String reportTitle) {
    this.reportTitle = reportTitle;
    return this;
  }

  /**
   * See Prepayment Types
   * @return reportTitle
   */
  @javax.annotation.Nullable
  public String getReportTitle() {
    return reportTitle;
  }

  public void setReportTitle(String reportTitle) {
    this.reportTitle = reportTitle;
  }


  public Report reportType(ReportTypeEnum reportType) {
    this.reportType = reportType;
    return this;
  }

  /**
   * See Prepayment Types
   * @return reportType
   */
  @javax.annotation.Nullable
  public ReportTypeEnum getReportType() {
    return reportType;
  }

  public void setReportType(ReportTypeEnum reportType) {
    this.reportType = reportType;
  }


  /**
   * Updated Date
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Report report = (Report) o;
    return Objects.equals(this.contacts, report.contacts) &&
        Objects.equals(this.reportDate, report.reportDate) &&
        Objects.equals(this.reportID, report.reportID) &&
        Objects.equals(this.reportName, report.reportName) &&
        Objects.equals(this.reportTitle, report.reportTitle) &&
        Objects.equals(this.reportType, report.reportType) &&
        Objects.equals(this.updatedDateUTC, report.updatedDateUTC);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contacts, reportDate, reportID, reportName, reportTitle, reportType, updatedDateUTC);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Report {\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    reportDate: ").append(toIndentedString(reportDate)).append("\n");
    sb.append("    reportID: ").append(toIndentedString(reportID)).append("\n");
    sb.append("    reportName: ").append(toIndentedString(reportName)).append("\n");
    sb.append("    reportTitle: ").append(toIndentedString(reportTitle)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Contacts");
    openapiFields.add("ReportDate");
    openapiFields.add("ReportID");
    openapiFields.add("ReportName");
    openapiFields.add("ReportTitle");
    openapiFields.add("ReportType");
    openapiFields.add("UpdatedDateUTC");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Report
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Report.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Report is not found in the empty JSON string", Report.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Report.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Report` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Contacts") != null && !jsonObj.get("Contacts").isJsonNull()) {
        JsonArray jsonArraycontacts = jsonObj.getAsJsonArray("Contacts");
        if (jsonArraycontacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Contacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Contacts` to be an array in the JSON string but got `%s`", jsonObj.get("Contacts").toString()));
          }

          // validate the optional field `Contacts` (array)
          for (int i = 0; i < jsonArraycontacts.size(); i++) {
            TenNinetyNineContact.validateJsonElement(jsonArraycontacts.get(i));
          };
        }
      }
      if ((jsonObj.get("ReportDate") != null && !jsonObj.get("ReportDate").isJsonNull()) && !jsonObj.get("ReportDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportDate").toString()));
      }
      if ((jsonObj.get("ReportID") != null && !jsonObj.get("ReportID").isJsonNull()) && !jsonObj.get("ReportID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportID").toString()));
      }
      if ((jsonObj.get("ReportName") != null && !jsonObj.get("ReportName").isJsonNull()) && !jsonObj.get("ReportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportName").toString()));
      }
      if ((jsonObj.get("ReportTitle") != null && !jsonObj.get("ReportTitle").isJsonNull()) && !jsonObj.get("ReportTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportTitle").toString()));
      }
      if ((jsonObj.get("ReportType") != null && !jsonObj.get("ReportType").isJsonNull()) && !jsonObj.get("ReportType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportType").toString()));
      }
      // validate the optional field `ReportType`
      if (jsonObj.get("ReportType") != null && !jsonObj.get("ReportType").isJsonNull()) {
        ReportTypeEnum.validateJsonElement(jsonObj.get("ReportType"));
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Report.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Report' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Report> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Report.class));

       return (TypeAdapter<T>) new TypeAdapter<Report>() {
           @Override
           public void write(JsonWriter out, Report value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Report read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Report given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Report
   * @throws IOException if the JSON string is invalid with respect to Report
   */
  public static Report fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Report.class);
  }

  /**
   * Convert an instance of Report to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

