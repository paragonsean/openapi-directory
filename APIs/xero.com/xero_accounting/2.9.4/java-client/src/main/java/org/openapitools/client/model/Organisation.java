/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.AddressForOrganisation;
import org.openapitools.client.model.CountryCode;
import org.openapitools.client.model.CurrencyCode;
import org.openapitools.client.model.ExternalLink;
import org.openapitools.client.model.PaymentTerm;
import org.openapitools.client.model.Phone;
import org.openapitools.client.model.TimeZone;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Organisation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Organisation {
  public static final String SERIALIZED_NAME_AP_I_KEY = "APIKey";
  @SerializedName(SERIALIZED_NAME_AP_I_KEY)
  private String apIKey;

  public static final String SERIALIZED_NAME_ADDRESSES = "Addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<AddressForOrganisation> addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASE_CURRENCY = "BaseCurrency";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY)
  private CurrencyCode baseCurrency;

  /**
   * Organisation Classes describe which plan the Xero organisation is on (e.g. DEMO, TRIAL, PREMIUM)
   */
  @JsonAdapter(PropertyClassEnum.Adapter.class)
  public enum PropertyClassEnum {
    DEMO("DEMO"),
    
    TRIAL("TRIAL"),
    
    STARTER("STARTER"),
    
    STANDARD("STANDARD"),
    
    PREMIUM("PREMIUM"),
    
    PREMIUM_20("PREMIUM_20"),
    
    PREMIUM_50("PREMIUM_50"),
    
    PREMIUM_100("PREMIUM_100"),
    
    LEDGER("LEDGER"),
    
    GST_CASHBOOK("GST_CASHBOOK"),
    
    NON_GST_CASHBOOK("NON_GST_CASHBOOK");

    private String value;

    PropertyClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PropertyClassEnum fromValue(String value) {
      for (PropertyClassEnum b : PropertyClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PropertyClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PropertyClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PropertyClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PropertyClassEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PropertyClassEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "Class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  private PropertyClassEnum propertyClass;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "CountryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private CountryCode countryCode;

  public static final String SERIALIZED_NAME_CREATED_DATE_U_T_C = "CreatedDateUTC";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_U_T_C)
  private String createdDateUTC;

  public static final String SERIALIZED_NAME_DEFAULT_PURCHASES_TAX = "DefaultPurchasesTax";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PURCHASES_TAX)
  private String defaultPurchasesTax;

  public static final String SERIALIZED_NAME_DEFAULT_SALES_TAX = "DefaultSalesTax";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SALES_TAX)
  private String defaultSalesTax;

  /**
   * BUSINESS or PARTNER. Partner edition organisations are sold exclusively through accounting partners and have restricted functionality (e.g. no access to invoicing)
   */
  @JsonAdapter(EditionEnum.Adapter.class)
  public enum EditionEnum {
    BUSINESS("BUSINESS"),
    
    PARTNER("PARTNER");

    private String value;

    EditionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EditionEnum fromValue(String value) {
      for (EditionEnum b : EditionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EditionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EditionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EditionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EditionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EditionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EDITION = "Edition";
  @SerializedName(SERIALIZED_NAME_EDITION)
  private EditionEnum edition;

  public static final String SERIALIZED_NAME_EMPLOYER_IDENTIFICATION_NUMBER = "EmployerIdentificationNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_IDENTIFICATION_NUMBER)
  private String employerIdentificationNumber;

  public static final String SERIALIZED_NAME_END_OF_YEAR_LOCK_DATE = "EndOfYearLockDate";
  @SerializedName(SERIALIZED_NAME_END_OF_YEAR_LOCK_DATE)
  private String endOfYearLockDate;

  public static final String SERIALIZED_NAME_EXTERNAL_LINKS = "ExternalLinks";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_LINKS)
  private List<ExternalLink> externalLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_FINANCIAL_YEAR_END_DAY = "FinancialYearEndDay";
  @SerializedName(SERIALIZED_NAME_FINANCIAL_YEAR_END_DAY)
  private Integer financialYearEndDay;

  public static final String SERIALIZED_NAME_FINANCIAL_YEAR_END_MONTH = "FinancialYearEndMonth";
  @SerializedName(SERIALIZED_NAME_FINANCIAL_YEAR_END_MONTH)
  private Integer financialYearEndMonth;

  public static final String SERIALIZED_NAME_IS_DEMO_COMPANY = "IsDemoCompany";
  @SerializedName(SERIALIZED_NAME_IS_DEMO_COMPANY)
  private Boolean isDemoCompany;

  public static final String SERIALIZED_NAME_LEGAL_NAME = "LegalName";
  @SerializedName(SERIALIZED_NAME_LEGAL_NAME)
  private String legalName;

  public static final String SERIALIZED_NAME_LINE_OF_BUSINESS = "LineOfBusiness";
  @SerializedName(SERIALIZED_NAME_LINE_OF_BUSINESS)
  private String lineOfBusiness;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Organisation Entity Type
   */
  @JsonAdapter(OrganisationEntityTypeEnum.Adapter.class)
  public enum OrganisationEntityTypeEnum {
    ACCOUNTING_PRACTICE("ACCOUNTING_PRACTICE"),
    
    COMPANY("COMPANY"),
    
    CHARITY("CHARITY"),
    
    CLUB_OR_SOCIETY("CLUB_OR_SOCIETY"),
    
    LOOK_THROUGH_COMPANY("LOOK_THROUGH_COMPANY"),
    
    NOT_FOR_PROFIT("NOT_FOR_PROFIT"),
    
    PARTNERSHIP("PARTNERSHIP"),
    
    S_CORPORATION("S_CORPORATION"),
    
    SELF_MANAGED_SUPERANNUATION_FUND("SELF_MANAGED_SUPERANNUATION_FUND"),
    
    SOLE_TRADER("SOLE_TRADER"),
    
    SUPERANNUATION_FUND("SUPERANNUATION_FUND"),
    
    TRUST("TRUST");

    private String value;

    OrganisationEntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrganisationEntityTypeEnum fromValue(String value) {
      for (OrganisationEntityTypeEnum b : OrganisationEntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrganisationEntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrganisationEntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrganisationEntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrganisationEntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrganisationEntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORGANISATION_ENTITY_TYPE = "OrganisationEntityType";
  @SerializedName(SERIALIZED_NAME_ORGANISATION_ENTITY_TYPE)
  private OrganisationEntityTypeEnum organisationEntityType;

  public static final String SERIALIZED_NAME_ORGANISATION_I_D = "OrganisationID";
  @SerializedName(SERIALIZED_NAME_ORGANISATION_I_D)
  private UUID organisationID;

  public static final String SERIALIZED_NAME_ORGANISATION_STATUS = "OrganisationStatus";
  @SerializedName(SERIALIZED_NAME_ORGANISATION_STATUS)
  private String organisationStatus;

  /**
   * Organisation Type
   */
  @JsonAdapter(OrganisationTypeEnum.Adapter.class)
  public enum OrganisationTypeEnum {
    ACCOUNTING_PRACTICE("ACCOUNTING_PRACTICE"),
    
    COMPANY("COMPANY"),
    
    CHARITY("CHARITY"),
    
    CLUB_OR_SOCIETY("CLUB_OR_SOCIETY"),
    
    LOOK_THROUGH_COMPANY("LOOK_THROUGH_COMPANY"),
    
    NOT_FOR_PROFIT("NOT_FOR_PROFIT"),
    
    PARTNERSHIP("PARTNERSHIP"),
    
    S_CORPORATION("S_CORPORATION"),
    
    SELF_MANAGED_SUPERANNUATION_FUND("SELF_MANAGED_SUPERANNUATION_FUND"),
    
    SOLE_TRADER("SOLE_TRADER"),
    
    SUPERANNUATION_FUND("SUPERANNUATION_FUND"),
    
    TRUST("TRUST");

    private String value;

    OrganisationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrganisationTypeEnum fromValue(String value) {
      for (OrganisationTypeEnum b : OrganisationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrganisationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrganisationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrganisationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrganisationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrganisationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORGANISATION_TYPE = "OrganisationType";
  @SerializedName(SERIALIZED_NAME_ORGANISATION_TYPE)
  private OrganisationTypeEnum organisationType;

  public static final String SERIALIZED_NAME_PAYMENT_TERMS = "PaymentTerms";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TERMS)
  private PaymentTerm paymentTerms;

  public static final String SERIALIZED_NAME_PAYS_TAX = "PaysTax";
  @SerializedName(SERIALIZED_NAME_PAYS_TAX)
  private Boolean paysTax;

  public static final String SERIALIZED_NAME_PERIOD_LOCK_DATE = "PeriodLockDate";
  @SerializedName(SERIALIZED_NAME_PERIOD_LOCK_DATE)
  private String periodLockDate;

  public static final String SERIALIZED_NAME_PHONES = "Phones";
  @SerializedName(SERIALIZED_NAME_PHONES)
  private List<Phone> phones = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGISTRATION_NUMBER = "RegistrationNumber";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NUMBER)
  private String registrationNumber;

  /**
   * The accounting basis used for tax returns. See Sales Tax Basis
   */
  @JsonAdapter(SalesTaxBasisEnum.Adapter.class)
  public enum SalesTaxBasisEnum {
    PAYMENTS("PAYMENTS"),
    
    INVOICE("INVOICE"),
    
    NONE("NONE"),
    
    CASH("CASH"),
    
    ACCRUAL("ACCRUAL"),
    
    FLATRATECASH("FLATRATECASH"),
    
    FLATRATEACCRUAL("FLATRATEACCRUAL"),
    
    ACCRUALS("ACCRUALS");

    private String value;

    SalesTaxBasisEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SalesTaxBasisEnum fromValue(String value) {
      for (SalesTaxBasisEnum b : SalesTaxBasisEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SalesTaxBasisEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SalesTaxBasisEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SalesTaxBasisEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SalesTaxBasisEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SalesTaxBasisEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SALES_TAX_BASIS = "SalesTaxBasis";
  @SerializedName(SERIALIZED_NAME_SALES_TAX_BASIS)
  private SalesTaxBasisEnum salesTaxBasis;

  /**
   * The frequency with which tax returns are processed. See Sales Tax Period
   */
  @JsonAdapter(SalesTaxPeriodEnum.Adapter.class)
  public enum SalesTaxPeriodEnum {
    MONTHLY("MONTHLY"),
    
    QUARTERLY1("QUARTERLY1"),
    
    QUARTERLY2("QUARTERLY2"),
    
    QUARTERLY3("QUARTERLY3"),
    
    ANNUALLY("ANNUALLY"),
    
    ONEMONTHS("ONEMONTHS"),
    
    TWOMONTHS("TWOMONTHS"),
    
    SIXMONTHS("SIXMONTHS"),
    
    _1_MONTHLY("1MONTHLY"),
    
    _2_MONTHLY("2MONTHLY"),
    
    _3_MONTHLY("3MONTHLY"),
    
    _6_MONTHLY("6MONTHLY"),
    
    QUARTERLY("QUARTERLY"),
    
    YEARLY("YEARLY"),
    
    NONE("NONE");

    private String value;

    SalesTaxPeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SalesTaxPeriodEnum fromValue(String value) {
      for (SalesTaxPeriodEnum b : SalesTaxPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SalesTaxPeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SalesTaxPeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SalesTaxPeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SalesTaxPeriodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SalesTaxPeriodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SALES_TAX_PERIOD = "SalesTaxPeriod";
  @SerializedName(SERIALIZED_NAME_SALES_TAX_PERIOD)
  private SalesTaxPeriodEnum salesTaxPeriod;

  public static final String SERIALIZED_NAME_SHORT_CODE = "ShortCode";
  @SerializedName(SERIALIZED_NAME_SHORT_CODE)
  private String shortCode;

  public static final String SERIALIZED_NAME_TAX_NUMBER = "TaxNumber";
  @SerializedName(SERIALIZED_NAME_TAX_NUMBER)
  private String taxNumber;

  public static final String SERIALIZED_NAME_TIMEZONE = "Timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private TimeZone timezone;

  /**
   * See Version Types
   */
  @JsonAdapter(VersionEnum.Adapter.class)
  public enum VersionEnum {
    AU("AU"),
    
    NZ("NZ"),
    
    GLOBAL("GLOBAL"),
    
    UK("UK"),
    
    US("US"),
    
    AUONRAMP("AUONRAMP"),
    
    NZONRAMP("NZONRAMP"),
    
    GLOBALONRAMP("GLOBALONRAMP"),
    
    UKONRAMP("UKONRAMP"),
    
    USONRAMP("USONRAMP");

    private String value;

    VersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VersionEnum fromValue(String value) {
      for (VersionEnum b : VersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private VersionEnum version;

  public Organisation() {
  }

  public Organisation(
     String createdDateUTC
  ) {
    this();
    this.createdDateUTC = createdDateUTC;
  }

  public Organisation apIKey(String apIKey) {
    this.apIKey = apIKey;
    return this;
  }

  /**
   * Display a unique key used for Xero-to-Xero transactions
   * @return apIKey
   */
  @javax.annotation.Nullable
  public String getApIKey() {
    return apIKey;
  }

  public void setApIKey(String apIKey) {
    this.apIKey = apIKey;
  }


  public Organisation addresses(List<AddressForOrganisation> addresses) {
    this.addresses = addresses;
    return this;
  }

  public Organisation addAddressesItem(AddressForOrganisation addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

  /**
   * Address details for organisation – see Addresses
   * @return addresses
   */
  @javax.annotation.Nullable
  public List<AddressForOrganisation> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<AddressForOrganisation> addresses) {
    this.addresses = addresses;
  }


  public Organisation baseCurrency(CurrencyCode baseCurrency) {
    this.baseCurrency = baseCurrency;
    return this;
  }

  /**
   * Get baseCurrency
   * @return baseCurrency
   */
  @javax.annotation.Nullable
  public CurrencyCode getBaseCurrency() {
    return baseCurrency;
  }

  public void setBaseCurrency(CurrencyCode baseCurrency) {
    this.baseCurrency = baseCurrency;
  }


  public Organisation propertyClass(PropertyClassEnum propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

  /**
   * Organisation Classes describe which plan the Xero organisation is on (e.g. DEMO, TRIAL, PREMIUM)
   * @return propertyClass
   */
  @javax.annotation.Nullable
  public PropertyClassEnum getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(PropertyClassEnum propertyClass) {
    this.propertyClass = propertyClass;
  }


  public Organisation countryCode(CountryCode countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Get countryCode
   * @return countryCode
   */
  @javax.annotation.Nullable
  public CountryCode getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(CountryCode countryCode) {
    this.countryCode = countryCode;
  }


  /**
   * Timestamp when the organisation was created in Xero
   * @return createdDateUTC
   */
  @javax.annotation.Nullable
  public String getCreatedDateUTC() {
    return createdDateUTC;
  }



  public Organisation defaultPurchasesTax(String defaultPurchasesTax) {
    this.defaultPurchasesTax = defaultPurchasesTax;
    return this;
  }

  /**
   * The default for LineAmountTypes on purchase transactions
   * @return defaultPurchasesTax
   */
  @javax.annotation.Nullable
  public String getDefaultPurchasesTax() {
    return defaultPurchasesTax;
  }

  public void setDefaultPurchasesTax(String defaultPurchasesTax) {
    this.defaultPurchasesTax = defaultPurchasesTax;
  }


  public Organisation defaultSalesTax(String defaultSalesTax) {
    this.defaultSalesTax = defaultSalesTax;
    return this;
  }

  /**
   * The default for LineAmountTypes on sales transactions
   * @return defaultSalesTax
   */
  @javax.annotation.Nullable
  public String getDefaultSalesTax() {
    return defaultSalesTax;
  }

  public void setDefaultSalesTax(String defaultSalesTax) {
    this.defaultSalesTax = defaultSalesTax;
  }


  public Organisation edition(EditionEnum edition) {
    this.edition = edition;
    return this;
  }

  /**
   * BUSINESS or PARTNER. Partner edition organisations are sold exclusively through accounting partners and have restricted functionality (e.g. no access to invoicing)
   * @return edition
   */
  @javax.annotation.Nullable
  public EditionEnum getEdition() {
    return edition;
  }

  public void setEdition(EditionEnum edition) {
    this.edition = edition;
  }


  public Organisation employerIdentificationNumber(String employerIdentificationNumber) {
    this.employerIdentificationNumber = employerIdentificationNumber;
    return this;
  }

  /**
   * Shown if set. US Only.
   * @return employerIdentificationNumber
   */
  @javax.annotation.Nullable
  public String getEmployerIdentificationNumber() {
    return employerIdentificationNumber;
  }

  public void setEmployerIdentificationNumber(String employerIdentificationNumber) {
    this.employerIdentificationNumber = employerIdentificationNumber;
  }


  public Organisation endOfYearLockDate(String endOfYearLockDate) {
    this.endOfYearLockDate = endOfYearLockDate;
    return this;
  }

  /**
   * Shown if set. See lock dates
   * @return endOfYearLockDate
   */
  @javax.annotation.Nullable
  public String getEndOfYearLockDate() {
    return endOfYearLockDate;
  }

  public void setEndOfYearLockDate(String endOfYearLockDate) {
    this.endOfYearLockDate = endOfYearLockDate;
  }


  public Organisation externalLinks(List<ExternalLink> externalLinks) {
    this.externalLinks = externalLinks;
    return this;
  }

  public Organisation addExternalLinksItem(ExternalLink externalLinksItem) {
    if (this.externalLinks == null) {
      this.externalLinks = new ArrayList<>();
    }
    this.externalLinks.add(externalLinksItem);
    return this;
  }

  /**
   * Organisation profile links for popular services such as Facebook,Twitter, GooglePlus and LinkedIn. You can also add link to your website here. Shown if Organisation settings  is updated in Xero. See ExternalLinks below
   * @return externalLinks
   */
  @javax.annotation.Nullable
  public List<ExternalLink> getExternalLinks() {
    return externalLinks;
  }

  public void setExternalLinks(List<ExternalLink> externalLinks) {
    this.externalLinks = externalLinks;
  }


  public Organisation financialYearEndDay(Integer financialYearEndDay) {
    this.financialYearEndDay = financialYearEndDay;
    return this;
  }

  /**
   * Calendar day e.g. 0-31
   * @return financialYearEndDay
   */
  @javax.annotation.Nullable
  public Integer getFinancialYearEndDay() {
    return financialYearEndDay;
  }

  public void setFinancialYearEndDay(Integer financialYearEndDay) {
    this.financialYearEndDay = financialYearEndDay;
  }


  public Organisation financialYearEndMonth(Integer financialYearEndMonth) {
    this.financialYearEndMonth = financialYearEndMonth;
    return this;
  }

  /**
   * Calendar Month e.g. 1-12
   * @return financialYearEndMonth
   */
  @javax.annotation.Nullable
  public Integer getFinancialYearEndMonth() {
    return financialYearEndMonth;
  }

  public void setFinancialYearEndMonth(Integer financialYearEndMonth) {
    this.financialYearEndMonth = financialYearEndMonth;
  }


  public Organisation isDemoCompany(Boolean isDemoCompany) {
    this.isDemoCompany = isDemoCompany;
    return this;
  }

  /**
   * Boolean to describe if organisation is a demo company.
   * @return isDemoCompany
   */
  @javax.annotation.Nullable
  public Boolean getIsDemoCompany() {
    return isDemoCompany;
  }

  public void setIsDemoCompany(Boolean isDemoCompany) {
    this.isDemoCompany = isDemoCompany;
  }


  public Organisation legalName(String legalName) {
    this.legalName = legalName;
    return this;
  }

  /**
   * Organisation name shown on Reports
   * @return legalName
   */
  @javax.annotation.Nullable
  public String getLegalName() {
    return legalName;
  }

  public void setLegalName(String legalName) {
    this.legalName = legalName;
  }


  public Organisation lineOfBusiness(String lineOfBusiness) {
    this.lineOfBusiness = lineOfBusiness;
    return this;
  }

  /**
   * Description of business type as defined in Organisation settings
   * @return lineOfBusiness
   */
  @javax.annotation.Nullable
  public String getLineOfBusiness() {
    return lineOfBusiness;
  }

  public void setLineOfBusiness(String lineOfBusiness) {
    this.lineOfBusiness = lineOfBusiness;
  }


  public Organisation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Display name of organisation shown in Xero
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Organisation organisationEntityType(OrganisationEntityTypeEnum organisationEntityType) {
    this.organisationEntityType = organisationEntityType;
    return this;
  }

  /**
   * Organisation Entity Type
   * @return organisationEntityType
   */
  @javax.annotation.Nullable
  public OrganisationEntityTypeEnum getOrganisationEntityType() {
    return organisationEntityType;
  }

  public void setOrganisationEntityType(OrganisationEntityTypeEnum organisationEntityType) {
    this.organisationEntityType = organisationEntityType;
  }


  public Organisation organisationID(UUID organisationID) {
    this.organisationID = organisationID;
    return this;
  }

  /**
   * Unique Xero identifier
   * @return organisationID
   */
  @javax.annotation.Nullable
  public UUID getOrganisationID() {
    return organisationID;
  }

  public void setOrganisationID(UUID organisationID) {
    this.organisationID = organisationID;
  }


  public Organisation organisationStatus(String organisationStatus) {
    this.organisationStatus = organisationStatus;
    return this;
  }

  /**
   * Will be set to ACTIVE if you can connect to organisation via the Xero API
   * @return organisationStatus
   */
  @javax.annotation.Nullable
  public String getOrganisationStatus() {
    return organisationStatus;
  }

  public void setOrganisationStatus(String organisationStatus) {
    this.organisationStatus = organisationStatus;
  }


  public Organisation organisationType(OrganisationTypeEnum organisationType) {
    this.organisationType = organisationType;
    return this;
  }

  /**
   * Organisation Type
   * @return organisationType
   */
  @javax.annotation.Nullable
  public OrganisationTypeEnum getOrganisationType() {
    return organisationType;
  }

  public void setOrganisationType(OrganisationTypeEnum organisationType) {
    this.organisationType = organisationType;
  }


  public Organisation paymentTerms(PaymentTerm paymentTerms) {
    this.paymentTerms = paymentTerms;
    return this;
  }

  /**
   * Get paymentTerms
   * @return paymentTerms
   */
  @javax.annotation.Nullable
  public PaymentTerm getPaymentTerms() {
    return paymentTerms;
  }

  public void setPaymentTerms(PaymentTerm paymentTerms) {
    this.paymentTerms = paymentTerms;
  }


  public Organisation paysTax(Boolean paysTax) {
    this.paysTax = paysTax;
    return this;
  }

  /**
   * Boolean to describe if organisation is registered with a local tax authority i.e. true, false
   * @return paysTax
   */
  @javax.annotation.Nullable
  public Boolean getPaysTax() {
    return paysTax;
  }

  public void setPaysTax(Boolean paysTax) {
    this.paysTax = paysTax;
  }


  public Organisation periodLockDate(String periodLockDate) {
    this.periodLockDate = periodLockDate;
    return this;
  }

  /**
   * Shown if set. See lock dates
   * @return periodLockDate
   */
  @javax.annotation.Nullable
  public String getPeriodLockDate() {
    return periodLockDate;
  }

  public void setPeriodLockDate(String periodLockDate) {
    this.periodLockDate = periodLockDate;
  }


  public Organisation phones(List<Phone> phones) {
    this.phones = phones;
    return this;
  }

  public Organisation addPhonesItem(Phone phonesItem) {
    if (this.phones == null) {
      this.phones = new ArrayList<>();
    }
    this.phones.add(phonesItem);
    return this;
  }

  /**
   * Phones details for organisation – see Phones
   * @return phones
   */
  @javax.annotation.Nullable
  public List<Phone> getPhones() {
    return phones;
  }

  public void setPhones(List<Phone> phones) {
    this.phones = phones;
  }


  public Organisation registrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
    return this;
  }

  /**
   * Shows for New Zealand, Australian and UK organisations
   * @return registrationNumber
   */
  @javax.annotation.Nullable
  public String getRegistrationNumber() {
    return registrationNumber;
  }

  public void setRegistrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
  }


  public Organisation salesTaxBasis(SalesTaxBasisEnum salesTaxBasis) {
    this.salesTaxBasis = salesTaxBasis;
    return this;
  }

  /**
   * The accounting basis used for tax returns. See Sales Tax Basis
   * @return salesTaxBasis
   */
  @javax.annotation.Nullable
  public SalesTaxBasisEnum getSalesTaxBasis() {
    return salesTaxBasis;
  }

  public void setSalesTaxBasis(SalesTaxBasisEnum salesTaxBasis) {
    this.salesTaxBasis = salesTaxBasis;
  }


  public Organisation salesTaxPeriod(SalesTaxPeriodEnum salesTaxPeriod) {
    this.salesTaxPeriod = salesTaxPeriod;
    return this;
  }

  /**
   * The frequency with which tax returns are processed. See Sales Tax Period
   * @return salesTaxPeriod
   */
  @javax.annotation.Nullable
  public SalesTaxPeriodEnum getSalesTaxPeriod() {
    return salesTaxPeriod;
  }

  public void setSalesTaxPeriod(SalesTaxPeriodEnum salesTaxPeriod) {
    this.salesTaxPeriod = salesTaxPeriod;
  }


  public Organisation shortCode(String shortCode) {
    this.shortCode = shortCode;
    return this;
  }

  /**
   * A unique identifier for the organisation. Potential uses.
   * @return shortCode
   */
  @javax.annotation.Nullable
  public String getShortCode() {
    return shortCode;
  }

  public void setShortCode(String shortCode) {
    this.shortCode = shortCode;
  }


  public Organisation taxNumber(String taxNumber) {
    this.taxNumber = taxNumber;
    return this;
  }

  /**
   * Shown if set. Displays in the Xero UI as Tax File Number (AU), GST Number (NZ), VAT Number (UK) and Tax ID Number (US &amp; Global).
   * @return taxNumber
   */
  @javax.annotation.Nullable
  public String getTaxNumber() {
    return taxNumber;
  }

  public void setTaxNumber(String taxNumber) {
    this.taxNumber = taxNumber;
  }


  public Organisation timezone(TimeZone timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Get timezone
   * @return timezone
   */
  @javax.annotation.Nullable
  public TimeZone getTimezone() {
    return timezone;
  }

  public void setTimezone(TimeZone timezone) {
    this.timezone = timezone;
  }


  public Organisation version(VersionEnum version) {
    this.version = version;
    return this;
  }

  /**
   * See Version Types
   * @return version
   */
  @javax.annotation.Nullable
  public VersionEnum getVersion() {
    return version;
  }

  public void setVersion(VersionEnum version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Organisation organisation = (Organisation) o;
    return Objects.equals(this.apIKey, organisation.apIKey) &&
        Objects.equals(this.addresses, organisation.addresses) &&
        Objects.equals(this.baseCurrency, organisation.baseCurrency) &&
        Objects.equals(this.propertyClass, organisation.propertyClass) &&
        Objects.equals(this.countryCode, organisation.countryCode) &&
        Objects.equals(this.createdDateUTC, organisation.createdDateUTC) &&
        Objects.equals(this.defaultPurchasesTax, organisation.defaultPurchasesTax) &&
        Objects.equals(this.defaultSalesTax, organisation.defaultSalesTax) &&
        Objects.equals(this.edition, organisation.edition) &&
        Objects.equals(this.employerIdentificationNumber, organisation.employerIdentificationNumber) &&
        Objects.equals(this.endOfYearLockDate, organisation.endOfYearLockDate) &&
        Objects.equals(this.externalLinks, organisation.externalLinks) &&
        Objects.equals(this.financialYearEndDay, organisation.financialYearEndDay) &&
        Objects.equals(this.financialYearEndMonth, organisation.financialYearEndMonth) &&
        Objects.equals(this.isDemoCompany, organisation.isDemoCompany) &&
        Objects.equals(this.legalName, organisation.legalName) &&
        Objects.equals(this.lineOfBusiness, organisation.lineOfBusiness) &&
        Objects.equals(this.name, organisation.name) &&
        Objects.equals(this.organisationEntityType, organisation.organisationEntityType) &&
        Objects.equals(this.organisationID, organisation.organisationID) &&
        Objects.equals(this.organisationStatus, organisation.organisationStatus) &&
        Objects.equals(this.organisationType, organisation.organisationType) &&
        Objects.equals(this.paymentTerms, organisation.paymentTerms) &&
        Objects.equals(this.paysTax, organisation.paysTax) &&
        Objects.equals(this.periodLockDate, organisation.periodLockDate) &&
        Objects.equals(this.phones, organisation.phones) &&
        Objects.equals(this.registrationNumber, organisation.registrationNumber) &&
        Objects.equals(this.salesTaxBasis, organisation.salesTaxBasis) &&
        Objects.equals(this.salesTaxPeriod, organisation.salesTaxPeriod) &&
        Objects.equals(this.shortCode, organisation.shortCode) &&
        Objects.equals(this.taxNumber, organisation.taxNumber) &&
        Objects.equals(this.timezone, organisation.timezone) &&
        Objects.equals(this.version, organisation.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apIKey, addresses, baseCurrency, propertyClass, countryCode, createdDateUTC, defaultPurchasesTax, defaultSalesTax, edition, employerIdentificationNumber, endOfYearLockDate, externalLinks, financialYearEndDay, financialYearEndMonth, isDemoCompany, legalName, lineOfBusiness, name, organisationEntityType, organisationID, organisationStatus, organisationType, paymentTerms, paysTax, periodLockDate, phones, registrationNumber, salesTaxBasis, salesTaxPeriod, shortCode, taxNumber, timezone, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Organisation {\n");
    sb.append("    apIKey: ").append(toIndentedString(apIKey)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    baseCurrency: ").append(toIndentedString(baseCurrency)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    createdDateUTC: ").append(toIndentedString(createdDateUTC)).append("\n");
    sb.append("    defaultPurchasesTax: ").append(toIndentedString(defaultPurchasesTax)).append("\n");
    sb.append("    defaultSalesTax: ").append(toIndentedString(defaultSalesTax)).append("\n");
    sb.append("    edition: ").append(toIndentedString(edition)).append("\n");
    sb.append("    employerIdentificationNumber: ").append(toIndentedString(employerIdentificationNumber)).append("\n");
    sb.append("    endOfYearLockDate: ").append(toIndentedString(endOfYearLockDate)).append("\n");
    sb.append("    externalLinks: ").append(toIndentedString(externalLinks)).append("\n");
    sb.append("    financialYearEndDay: ").append(toIndentedString(financialYearEndDay)).append("\n");
    sb.append("    financialYearEndMonth: ").append(toIndentedString(financialYearEndMonth)).append("\n");
    sb.append("    isDemoCompany: ").append(toIndentedString(isDemoCompany)).append("\n");
    sb.append("    legalName: ").append(toIndentedString(legalName)).append("\n");
    sb.append("    lineOfBusiness: ").append(toIndentedString(lineOfBusiness)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organisationEntityType: ").append(toIndentedString(organisationEntityType)).append("\n");
    sb.append("    organisationID: ").append(toIndentedString(organisationID)).append("\n");
    sb.append("    organisationStatus: ").append(toIndentedString(organisationStatus)).append("\n");
    sb.append("    organisationType: ").append(toIndentedString(organisationType)).append("\n");
    sb.append("    paymentTerms: ").append(toIndentedString(paymentTerms)).append("\n");
    sb.append("    paysTax: ").append(toIndentedString(paysTax)).append("\n");
    sb.append("    periodLockDate: ").append(toIndentedString(periodLockDate)).append("\n");
    sb.append("    phones: ").append(toIndentedString(phones)).append("\n");
    sb.append("    registrationNumber: ").append(toIndentedString(registrationNumber)).append("\n");
    sb.append("    salesTaxBasis: ").append(toIndentedString(salesTaxBasis)).append("\n");
    sb.append("    salesTaxPeriod: ").append(toIndentedString(salesTaxPeriod)).append("\n");
    sb.append("    shortCode: ").append(toIndentedString(shortCode)).append("\n");
    sb.append("    taxNumber: ").append(toIndentedString(taxNumber)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("APIKey");
    openapiFields.add("Addresses");
    openapiFields.add("BaseCurrency");
    openapiFields.add("Class");
    openapiFields.add("CountryCode");
    openapiFields.add("CreatedDateUTC");
    openapiFields.add("DefaultPurchasesTax");
    openapiFields.add("DefaultSalesTax");
    openapiFields.add("Edition");
    openapiFields.add("EmployerIdentificationNumber");
    openapiFields.add("EndOfYearLockDate");
    openapiFields.add("ExternalLinks");
    openapiFields.add("FinancialYearEndDay");
    openapiFields.add("FinancialYearEndMonth");
    openapiFields.add("IsDemoCompany");
    openapiFields.add("LegalName");
    openapiFields.add("LineOfBusiness");
    openapiFields.add("Name");
    openapiFields.add("OrganisationEntityType");
    openapiFields.add("OrganisationID");
    openapiFields.add("OrganisationStatus");
    openapiFields.add("OrganisationType");
    openapiFields.add("PaymentTerms");
    openapiFields.add("PaysTax");
    openapiFields.add("PeriodLockDate");
    openapiFields.add("Phones");
    openapiFields.add("RegistrationNumber");
    openapiFields.add("SalesTaxBasis");
    openapiFields.add("SalesTaxPeriod");
    openapiFields.add("ShortCode");
    openapiFields.add("TaxNumber");
    openapiFields.add("Timezone");
    openapiFields.add("Version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Organisation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Organisation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Organisation is not found in the empty JSON string", Organisation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Organisation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Organisation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("APIKey") != null && !jsonObj.get("APIKey").isJsonNull()) && !jsonObj.get("APIKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `APIKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("APIKey").toString()));
      }
      if (jsonObj.get("Addresses") != null && !jsonObj.get("Addresses").isJsonNull()) {
        JsonArray jsonArrayaddresses = jsonObj.getAsJsonArray("Addresses");
        if (jsonArrayaddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Addresses` to be an array in the JSON string but got `%s`", jsonObj.get("Addresses").toString()));
          }

          // validate the optional field `Addresses` (array)
          for (int i = 0; i < jsonArrayaddresses.size(); i++) {
            AddressForOrganisation.validateJsonElement(jsonArrayaddresses.get(i));
          };
        }
      }
      if ((jsonObj.get("BaseCurrency") != null && !jsonObj.get("BaseCurrency").isJsonNull()) && !jsonObj.get("BaseCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BaseCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BaseCurrency").toString()));
      }
      // validate the optional field `BaseCurrency`
      if (jsonObj.get("BaseCurrency") != null && !jsonObj.get("BaseCurrency").isJsonNull()) {
        CurrencyCode.validateJsonElement(jsonObj.get("BaseCurrency"));
      }
      if ((jsonObj.get("Class") != null && !jsonObj.get("Class").isJsonNull()) && !jsonObj.get("Class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Class").toString()));
      }
      // validate the optional field `Class`
      if (jsonObj.get("Class") != null && !jsonObj.get("Class").isJsonNull()) {
        PropertyClassEnum.validateJsonElement(jsonObj.get("Class"));
      }
      if ((jsonObj.get("CountryCode") != null && !jsonObj.get("CountryCode").isJsonNull()) && !jsonObj.get("CountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountryCode").toString()));
      }
      // validate the optional field `CountryCode`
      if (jsonObj.get("CountryCode") != null && !jsonObj.get("CountryCode").isJsonNull()) {
        CountryCode.validateJsonElement(jsonObj.get("CountryCode"));
      }
      if ((jsonObj.get("CreatedDateUTC") != null && !jsonObj.get("CreatedDateUTC").isJsonNull()) && !jsonObj.get("CreatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CreatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CreatedDateUTC").toString()));
      }
      if ((jsonObj.get("DefaultPurchasesTax") != null && !jsonObj.get("DefaultPurchasesTax").isJsonNull()) && !jsonObj.get("DefaultPurchasesTax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultPurchasesTax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultPurchasesTax").toString()));
      }
      if ((jsonObj.get("DefaultSalesTax") != null && !jsonObj.get("DefaultSalesTax").isJsonNull()) && !jsonObj.get("DefaultSalesTax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultSalesTax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultSalesTax").toString()));
      }
      if ((jsonObj.get("Edition") != null && !jsonObj.get("Edition").isJsonNull()) && !jsonObj.get("Edition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Edition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Edition").toString()));
      }
      // validate the optional field `Edition`
      if (jsonObj.get("Edition") != null && !jsonObj.get("Edition").isJsonNull()) {
        EditionEnum.validateJsonElement(jsonObj.get("Edition"));
      }
      if ((jsonObj.get("EmployerIdentificationNumber") != null && !jsonObj.get("EmployerIdentificationNumber").isJsonNull()) && !jsonObj.get("EmployerIdentificationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmployerIdentificationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmployerIdentificationNumber").toString()));
      }
      if ((jsonObj.get("EndOfYearLockDate") != null && !jsonObj.get("EndOfYearLockDate").isJsonNull()) && !jsonObj.get("EndOfYearLockDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EndOfYearLockDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EndOfYearLockDate").toString()));
      }
      if (jsonObj.get("ExternalLinks") != null && !jsonObj.get("ExternalLinks").isJsonNull()) {
        JsonArray jsonArrayexternalLinks = jsonObj.getAsJsonArray("ExternalLinks");
        if (jsonArrayexternalLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ExternalLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ExternalLinks` to be an array in the JSON string but got `%s`", jsonObj.get("ExternalLinks").toString()));
          }

          // validate the optional field `ExternalLinks` (array)
          for (int i = 0; i < jsonArrayexternalLinks.size(); i++) {
            ExternalLink.validateJsonElement(jsonArrayexternalLinks.get(i));
          };
        }
      }
      if ((jsonObj.get("LegalName") != null && !jsonObj.get("LegalName").isJsonNull()) && !jsonObj.get("LegalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LegalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LegalName").toString()));
      }
      if ((jsonObj.get("LineOfBusiness") != null && !jsonObj.get("LineOfBusiness").isJsonNull()) && !jsonObj.get("LineOfBusiness").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LineOfBusiness` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LineOfBusiness").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("OrganisationEntityType") != null && !jsonObj.get("OrganisationEntityType").isJsonNull()) && !jsonObj.get("OrganisationEntityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrganisationEntityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrganisationEntityType").toString()));
      }
      // validate the optional field `OrganisationEntityType`
      if (jsonObj.get("OrganisationEntityType") != null && !jsonObj.get("OrganisationEntityType").isJsonNull()) {
        OrganisationEntityTypeEnum.validateJsonElement(jsonObj.get("OrganisationEntityType"));
      }
      if ((jsonObj.get("OrganisationID") != null && !jsonObj.get("OrganisationID").isJsonNull()) && !jsonObj.get("OrganisationID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrganisationID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrganisationID").toString()));
      }
      if ((jsonObj.get("OrganisationStatus") != null && !jsonObj.get("OrganisationStatus").isJsonNull()) && !jsonObj.get("OrganisationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrganisationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrganisationStatus").toString()));
      }
      if ((jsonObj.get("OrganisationType") != null && !jsonObj.get("OrganisationType").isJsonNull()) && !jsonObj.get("OrganisationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrganisationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrganisationType").toString()));
      }
      // validate the optional field `OrganisationType`
      if (jsonObj.get("OrganisationType") != null && !jsonObj.get("OrganisationType").isJsonNull()) {
        OrganisationTypeEnum.validateJsonElement(jsonObj.get("OrganisationType"));
      }
      // validate the optional field `PaymentTerms`
      if (jsonObj.get("PaymentTerms") != null && !jsonObj.get("PaymentTerms").isJsonNull()) {
        PaymentTerm.validateJsonElement(jsonObj.get("PaymentTerms"));
      }
      if ((jsonObj.get("PeriodLockDate") != null && !jsonObj.get("PeriodLockDate").isJsonNull()) && !jsonObj.get("PeriodLockDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PeriodLockDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PeriodLockDate").toString()));
      }
      if (jsonObj.get("Phones") != null && !jsonObj.get("Phones").isJsonNull()) {
        JsonArray jsonArrayphones = jsonObj.getAsJsonArray("Phones");
        if (jsonArrayphones != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Phones").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Phones` to be an array in the JSON string but got `%s`", jsonObj.get("Phones").toString()));
          }

          // validate the optional field `Phones` (array)
          for (int i = 0; i < jsonArrayphones.size(); i++) {
            Phone.validateJsonElement(jsonArrayphones.get(i));
          };
        }
      }
      if ((jsonObj.get("RegistrationNumber") != null && !jsonObj.get("RegistrationNumber").isJsonNull()) && !jsonObj.get("RegistrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistrationNumber").toString()));
      }
      if ((jsonObj.get("SalesTaxBasis") != null && !jsonObj.get("SalesTaxBasis").isJsonNull()) && !jsonObj.get("SalesTaxBasis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SalesTaxBasis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SalesTaxBasis").toString()));
      }
      // validate the optional field `SalesTaxBasis`
      if (jsonObj.get("SalesTaxBasis") != null && !jsonObj.get("SalesTaxBasis").isJsonNull()) {
        SalesTaxBasisEnum.validateJsonElement(jsonObj.get("SalesTaxBasis"));
      }
      if ((jsonObj.get("SalesTaxPeriod") != null && !jsonObj.get("SalesTaxPeriod").isJsonNull()) && !jsonObj.get("SalesTaxPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SalesTaxPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SalesTaxPeriod").toString()));
      }
      // validate the optional field `SalesTaxPeriod`
      if (jsonObj.get("SalesTaxPeriod") != null && !jsonObj.get("SalesTaxPeriod").isJsonNull()) {
        SalesTaxPeriodEnum.validateJsonElement(jsonObj.get("SalesTaxPeriod"));
      }
      if ((jsonObj.get("ShortCode") != null && !jsonObj.get("ShortCode").isJsonNull()) && !jsonObj.get("ShortCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShortCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShortCode").toString()));
      }
      if ((jsonObj.get("TaxNumber") != null && !jsonObj.get("TaxNumber").isJsonNull()) && !jsonObj.get("TaxNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxNumber").toString()));
      }
      if ((jsonObj.get("Timezone") != null && !jsonObj.get("Timezone").isJsonNull()) && !jsonObj.get("Timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Timezone").toString()));
      }
      // validate the optional field `Timezone`
      if (jsonObj.get("Timezone") != null && !jsonObj.get("Timezone").isJsonNull()) {
        TimeZone.validateJsonElement(jsonObj.get("Timezone"));
      }
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
      // validate the optional field `Version`
      if (jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) {
        VersionEnum.validateJsonElement(jsonObj.get("Version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Organisation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Organisation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Organisation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Organisation.class));

       return (TypeAdapter<T>) new TypeAdapter<Organisation>() {
           @Override
           public void write(JsonWriter out, Organisation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Organisation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Organisation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Organisation
   * @throws IOException if the JSON string is invalid with respect to Organisation
   */
  public static Organisation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Organisation.class);
  }

  /**
   * Convert an instance of Organisation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

