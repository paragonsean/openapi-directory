/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.TrackingCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ManualJournalLine
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManualJournalLine {
  public static final String SERIALIZED_NAME_ACCOUNT_CODE = "AccountCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CODE)
  private String accountCode;

  public static final String SERIALIZED_NAME_ACCOUNT_I_D = "AccountID";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_I_D)
  private UUID accountID;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_BLANK = "IsBlank";
  @SerializedName(SERIALIZED_NAME_IS_BLANK)
  private Boolean isBlank;

  public static final String SERIALIZED_NAME_LINE_AMOUNT = "LineAmount";
  @SerializedName(SERIALIZED_NAME_LINE_AMOUNT)
  private Double lineAmount;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "TaxAmount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private Double taxAmount;

  public static final String SERIALIZED_NAME_TAX_TYPE = "TaxType";
  @SerializedName(SERIALIZED_NAME_TAX_TYPE)
  private String taxType;

  public static final String SERIALIZED_NAME_TRACKING = "Tracking";
  @SerializedName(SERIALIZED_NAME_TRACKING)
  private List<TrackingCategory> tracking = new ArrayList<>();

  public ManualJournalLine() {
  }

  public ManualJournalLine(
     Double taxAmount
  ) {
    this();
    this.taxAmount = taxAmount;
  }

  public ManualJournalLine accountCode(String accountCode) {
    this.accountCode = accountCode;
    return this;
  }

  /**
   * See Accounts
   * @return accountCode
   */
  @javax.annotation.Nullable
  public String getAccountCode() {
    return accountCode;
  }

  public void setAccountCode(String accountCode) {
    this.accountCode = accountCode;
  }


  public ManualJournalLine accountID(UUID accountID) {
    this.accountID = accountID;
    return this;
  }

  /**
   * See Accounts
   * @return accountID
   */
  @javax.annotation.Nullable
  public UUID getAccountID() {
    return accountID;
  }

  public void setAccountID(UUID accountID) {
    this.accountID = accountID;
  }


  public ManualJournalLine description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description for journal line
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ManualJournalLine isBlank(Boolean isBlank) {
    this.isBlank = isBlank;
    return this;
  }

  /**
   * is the line blank
   * @return isBlank
   */
  @javax.annotation.Nullable
  public Boolean getIsBlank() {
    return isBlank;
  }

  public void setIsBlank(Boolean isBlank) {
    this.isBlank = isBlank;
  }


  public ManualJournalLine lineAmount(Double lineAmount) {
    this.lineAmount = lineAmount;
    return this;
  }

  /**
   * total for line. Debits are positive, credits are negative value
   * @return lineAmount
   */
  @javax.annotation.Nullable
  public Double getLineAmount() {
    return lineAmount;
  }

  public void setLineAmount(Double lineAmount) {
    this.lineAmount = lineAmount;
  }


  /**
   * The calculated tax amount based on the TaxType and LineAmount
   * @return taxAmount
   */
  @javax.annotation.Nullable
  public Double getTaxAmount() {
    return taxAmount;
  }



  public ManualJournalLine taxType(String taxType) {
    this.taxType = taxType;
    return this;
  }

  /**
   * The tax type from TaxRates
   * @return taxType
   */
  @javax.annotation.Nullable
  public String getTaxType() {
    return taxType;
  }

  public void setTaxType(String taxType) {
    this.taxType = taxType;
  }


  public ManualJournalLine tracking(List<TrackingCategory> tracking) {
    this.tracking = tracking;
    return this;
  }

  public ManualJournalLine addTrackingItem(TrackingCategory trackingItem) {
    if (this.tracking == null) {
      this.tracking = new ArrayList<>();
    }
    this.tracking.add(trackingItem);
    return this;
  }

  /**
   * Optional Tracking Category â€“ see Tracking. Any JournalLine can have a maximum of 2 &lt;TrackingCategory&gt; elements.
   * @return tracking
   */
  @javax.annotation.Nullable
  public List<TrackingCategory> getTracking() {
    return tracking;
  }

  public void setTracking(List<TrackingCategory> tracking) {
    this.tracking = tracking;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManualJournalLine manualJournalLine = (ManualJournalLine) o;
    return Objects.equals(this.accountCode, manualJournalLine.accountCode) &&
        Objects.equals(this.accountID, manualJournalLine.accountID) &&
        Objects.equals(this.description, manualJournalLine.description) &&
        Objects.equals(this.isBlank, manualJournalLine.isBlank) &&
        Objects.equals(this.lineAmount, manualJournalLine.lineAmount) &&
        Objects.equals(this.taxAmount, manualJournalLine.taxAmount) &&
        Objects.equals(this.taxType, manualJournalLine.taxType) &&
        Objects.equals(this.tracking, manualJournalLine.tracking);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountCode, accountID, description, isBlank, lineAmount, taxAmount, taxType, tracking);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManualJournalLine {\n");
    sb.append("    accountCode: ").append(toIndentedString(accountCode)).append("\n");
    sb.append("    accountID: ").append(toIndentedString(accountID)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isBlank: ").append(toIndentedString(isBlank)).append("\n");
    sb.append("    lineAmount: ").append(toIndentedString(lineAmount)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    taxType: ").append(toIndentedString(taxType)).append("\n");
    sb.append("    tracking: ").append(toIndentedString(tracking)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountCode");
    openapiFields.add("AccountID");
    openapiFields.add("Description");
    openapiFields.add("IsBlank");
    openapiFields.add("LineAmount");
    openapiFields.add("TaxAmount");
    openapiFields.add("TaxType");
    openapiFields.add("Tracking");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManualJournalLine
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManualJournalLine.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManualJournalLine is not found in the empty JSON string", ManualJournalLine.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManualJournalLine.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManualJournalLine` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccountCode") != null && !jsonObj.get("AccountCode").isJsonNull()) && !jsonObj.get("AccountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountCode").toString()));
      }
      if ((jsonObj.get("AccountID") != null && !jsonObj.get("AccountID").isJsonNull()) && !jsonObj.get("AccountID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountID").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("TaxType") != null && !jsonObj.get("TaxType").isJsonNull()) && !jsonObj.get("TaxType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxType").toString()));
      }
      if (jsonObj.get("Tracking") != null && !jsonObj.get("Tracking").isJsonNull()) {
        JsonArray jsonArraytracking = jsonObj.getAsJsonArray("Tracking");
        if (jsonArraytracking != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tracking").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tracking` to be an array in the JSON string but got `%s`", jsonObj.get("Tracking").toString()));
          }

          // validate the optional field `Tracking` (array)
          for (int i = 0; i < jsonArraytracking.size(); i++) {
            TrackingCategory.validateJsonElement(jsonArraytracking.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManualJournalLine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManualJournalLine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManualJournalLine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManualJournalLine.class));

       return (TypeAdapter<T>) new TypeAdapter<ManualJournalLine>() {
           @Override
           public void write(JsonWriter out, ManualJournalLine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManualJournalLine read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManualJournalLine given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManualJournalLine
   * @throws IOException if the JSON string is invalid with respect to ManualJournalLine
   */
  public static ManualJournalLine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManualJournalLine.class);
  }

  /**
   * Convert an instance of ManualJournalLine to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

