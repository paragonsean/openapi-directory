/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.Payment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BatchPayment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchPayment {
  public static final String SERIALIZED_NAME_ACCOUNT = "Account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private Account account;

  public static final String SERIALIZED_NAME_AMOUNT = "Amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_BATCH_PAYMENT_I_D = "BatchPaymentID";
  @SerializedName(SERIALIZED_NAME_BATCH_PAYMENT_I_D)
  private UUID batchPaymentID;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DATE_STRING = "DateString";
  @SerializedName(SERIALIZED_NAME_DATE_STRING)
  private String dateString;

  public static final String SERIALIZED_NAME_DETAILS = "Details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private String details;

  public static final String SERIALIZED_NAME_IS_RECONCILED = "IsReconciled";
  @SerializedName(SERIALIZED_NAME_IS_RECONCILED)
  private String isReconciled;

  public static final String SERIALIZED_NAME_NARRATIVE = "Narrative";
  @SerializedName(SERIALIZED_NAME_NARRATIVE)
  private String narrative;

  public static final String SERIALIZED_NAME_PARTICULARS = "Particulars";
  @SerializedName(SERIALIZED_NAME_PARTICULARS)
  private String particulars;

  public static final String SERIALIZED_NAME_PAYMENTS = "Payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  private List<Payment> payments = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFERENCE = "Reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  /**
   * AUTHORISED or DELETED (read-only). New batch payments will have a status of AUTHORISED. It is not possible to delete batch payments via the API.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    AUTHORISED("AUTHORISED"),
    
    DELETED("DELETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "TotalAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private String totalAmount;

  /**
   * PAYBATCH for bill payments or RECBATCH for sales invoice payments (read-only)
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PAYBATCH("PAYBATCH"),
    
    RECBATCH("RECBATCH");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public BatchPayment() {
  }

  public BatchPayment(
     UUID batchPaymentID, 
     String isReconciled, 
     StatusEnum status, 
     String totalAmount, 
     TypeEnum type, 
     String updatedDateUTC
  ) {
    this();
    this.batchPaymentID = batchPaymentID;
    this.isReconciled = isReconciled;
    this.status = status;
    this.totalAmount = totalAmount;
    this.type = type;
    this.updatedDateUTC = updatedDateUTC;
  }

  public BatchPayment account(Account account) {
    this.account = account;
    return this;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nullable
  public Account getAccount() {
    return account;
  }

  public void setAccount(Account account) {
    this.account = account;
  }


  public BatchPayment amount(Double amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00
   * @return amount
   */
  @javax.annotation.Nullable
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }


  /**
   * The Xero generated unique identifier for the bank transaction (read-only)
   * @return batchPaymentID
   */
  @javax.annotation.Nullable
  public UUID getBatchPaymentID() {
    return batchPaymentID;
  }



  public BatchPayment code(String code) {
    this.code = code;
    return this;
  }

  /**
   * (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public BatchPayment date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public BatchPayment dateString(String dateString) {
    this.dateString = dateString;
    return this;
  }

  /**
   * Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
   * @return dateString
   */
  @javax.annotation.Nullable
  public String getDateString() {
    return dateString;
  }

  public void setDateString(String dateString) {
    this.dateString = dateString;
  }


  public BatchPayment details(String details) {
    this.details = details;
    return this;
  }

  /**
   * (Non-NZ Only) These details are sent to the orgâ€™s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length &#x3D; 18
   * @return details
   */
  @javax.annotation.Nullable
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }


  /**
   * Booelan that tells you if the batch payment has been reconciled (read-only)
   * @return isReconciled
   */
  @javax.annotation.Nullable
  public String getIsReconciled() {
    return isReconciled;
  }



  public BatchPayment narrative(String narrative) {
    this.narrative = narrative;
    return this;
  }

  /**
   * (UK Only) Only shows on the statement line in Xero. Max length &#x3D;18
   * @return narrative
   */
  @javax.annotation.Nullable
  public String getNarrative() {
    return narrative;
  }

  public void setNarrative(String narrative) {
    this.narrative = narrative;
  }


  public BatchPayment particulars(String particulars) {
    this.particulars = particulars;
    return this;
  }

  /**
   * (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
   * @return particulars
   */
  @javax.annotation.Nullable
  public String getParticulars() {
    return particulars;
  }

  public void setParticulars(String particulars) {
    this.particulars = particulars;
  }


  public BatchPayment payments(List<Payment> payments) {
    this.payments = payments;
    return this;
  }

  public BatchPayment addPaymentsItem(Payment paymentsItem) {
    if (this.payments == null) {
      this.payments = new ArrayList<>();
    }
    this.payments.add(paymentsItem);
    return this;
  }

  /**
   * An array of payments
   * @return payments
   */
  @javax.annotation.Nullable
  public List<Payment> getPayments() {
    return payments;
  }

  public void setPayments(List<Payment> payments) {
    this.payments = payments;
  }


  public BatchPayment reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  /**
   * AUTHORISED or DELETED (read-only). New batch payments will have a status of AUTHORISED. It is not possible to delete batch payments via the API.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



  /**
   * The total of the payments that make up the batch (read-only)
   * @return totalAmount
   */
  @javax.annotation.Nullable
  public String getTotalAmount() {
    return totalAmount;
  }



  /**
   * PAYBATCH for bill payments or RECBATCH for sales invoice payments (read-only)
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }



  /**
   * UTC timestamp of last update to the payment
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchPayment batchPayment = (BatchPayment) o;
    return Objects.equals(this.account, batchPayment.account) &&
        Objects.equals(this.amount, batchPayment.amount) &&
        Objects.equals(this.batchPaymentID, batchPayment.batchPaymentID) &&
        Objects.equals(this.code, batchPayment.code) &&
        Objects.equals(this.date, batchPayment.date) &&
        Objects.equals(this.dateString, batchPayment.dateString) &&
        Objects.equals(this.details, batchPayment.details) &&
        Objects.equals(this.isReconciled, batchPayment.isReconciled) &&
        Objects.equals(this.narrative, batchPayment.narrative) &&
        Objects.equals(this.particulars, batchPayment.particulars) &&
        Objects.equals(this.payments, batchPayment.payments) &&
        Objects.equals(this.reference, batchPayment.reference) &&
        Objects.equals(this.status, batchPayment.status) &&
        Objects.equals(this.totalAmount, batchPayment.totalAmount) &&
        Objects.equals(this.type, batchPayment.type) &&
        Objects.equals(this.updatedDateUTC, batchPayment.updatedDateUTC);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, amount, batchPaymentID, code, date, dateString, details, isReconciled, narrative, particulars, payments, reference, status, totalAmount, type, updatedDateUTC);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchPayment {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    batchPaymentID: ").append(toIndentedString(batchPaymentID)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    dateString: ").append(toIndentedString(dateString)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    isReconciled: ").append(toIndentedString(isReconciled)).append("\n");
    sb.append("    narrative: ").append(toIndentedString(narrative)).append("\n");
    sb.append("    particulars: ").append(toIndentedString(particulars)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Account");
    openapiFields.add("Amount");
    openapiFields.add("BatchPaymentID");
    openapiFields.add("Code");
    openapiFields.add("Date");
    openapiFields.add("DateString");
    openapiFields.add("Details");
    openapiFields.add("IsReconciled");
    openapiFields.add("Narrative");
    openapiFields.add("Particulars");
    openapiFields.add("Payments");
    openapiFields.add("Reference");
    openapiFields.add("Status");
    openapiFields.add("TotalAmount");
    openapiFields.add("Type");
    openapiFields.add("UpdatedDateUTC");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchPayment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchPayment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchPayment is not found in the empty JSON string", BatchPayment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchPayment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchPayment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Account`
      if (jsonObj.get("Account") != null && !jsonObj.get("Account").isJsonNull()) {
        Account.validateJsonElement(jsonObj.get("Account"));
      }
      if ((jsonObj.get("BatchPaymentID") != null && !jsonObj.get("BatchPaymentID").isJsonNull()) && !jsonObj.get("BatchPaymentID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BatchPaymentID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BatchPaymentID").toString()));
      }
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      if ((jsonObj.get("Date") != null && !jsonObj.get("Date").isJsonNull()) && !jsonObj.get("Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Date").toString()));
      }
      if ((jsonObj.get("DateString") != null && !jsonObj.get("DateString").isJsonNull()) && !jsonObj.get("DateString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateString").toString()));
      }
      if ((jsonObj.get("Details") != null && !jsonObj.get("Details").isJsonNull()) && !jsonObj.get("Details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Details").toString()));
      }
      if ((jsonObj.get("IsReconciled") != null && !jsonObj.get("IsReconciled").isJsonNull()) && !jsonObj.get("IsReconciled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IsReconciled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IsReconciled").toString()));
      }
      if ((jsonObj.get("Narrative") != null && !jsonObj.get("Narrative").isJsonNull()) && !jsonObj.get("Narrative").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Narrative` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Narrative").toString()));
      }
      if ((jsonObj.get("Particulars") != null && !jsonObj.get("Particulars").isJsonNull()) && !jsonObj.get("Particulars").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Particulars` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Particulars").toString()));
      }
      if (jsonObj.get("Payments") != null && !jsonObj.get("Payments").isJsonNull()) {
        JsonArray jsonArraypayments = jsonObj.getAsJsonArray("Payments");
        if (jsonArraypayments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Payments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Payments` to be an array in the JSON string but got `%s`", jsonObj.get("Payments").toString()));
          }

          // validate the optional field `Payments` (array)
          for (int i = 0; i < jsonArraypayments.size(); i++) {
            Payment.validateJsonElement(jsonArraypayments.get(i));
          };
        }
      }
      if ((jsonObj.get("Reference") != null && !jsonObj.get("Reference").isJsonNull()) && !jsonObj.get("Reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Reference").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("TotalAmount") != null && !jsonObj.get("TotalAmount").isJsonNull()) && !jsonObj.get("TotalAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalAmount").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("Type"));
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchPayment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchPayment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchPayment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchPayment.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchPayment>() {
           @Override
           public void write(JsonWriter out, BatchPayment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchPayment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchPayment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchPayment
   * @throws IOException if the JSON string is invalid with respect to BatchPayment
   */
  public static BatchPayment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchPayment.class);
  }

  /**
   * Convert an instance of BatchPayment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

