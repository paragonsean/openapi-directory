/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.LineItemTracking;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LineItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LineItem {
  public static final String SERIALIZED_NAME_ACCOUNT_CODE = "AccountCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CODE)
  private String accountCode;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISCOUNT_AMOUNT = "DiscountAmount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_AMOUNT)
  private Double discountAmount;

  public static final String SERIALIZED_NAME_DISCOUNT_RATE = "DiscountRate";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_RATE)
  private Double discountRate;

  public static final String SERIALIZED_NAME_ITEM_CODE = "ItemCode";
  @SerializedName(SERIALIZED_NAME_ITEM_CODE)
  private String itemCode;

  public static final String SERIALIZED_NAME_LINE_AMOUNT = "LineAmount";
  @SerializedName(SERIALIZED_NAME_LINE_AMOUNT)
  private Double lineAmount;

  public static final String SERIALIZED_NAME_LINE_ITEM_I_D = "LineItemID";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_I_D)
  private UUID lineItemID;

  public static final String SERIALIZED_NAME_QUANTITY = "Quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_REPEATING_INVOICE_I_D = "RepeatingInvoiceID";
  @SerializedName(SERIALIZED_NAME_REPEATING_INVOICE_I_D)
  private UUID repeatingInvoiceID;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "TaxAmount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private Double taxAmount;

  public static final String SERIALIZED_NAME_TAX_TYPE = "TaxType";
  @SerializedName(SERIALIZED_NAME_TAX_TYPE)
  private String taxType;

  public static final String SERIALIZED_NAME_TRACKING = "Tracking";
  @SerializedName(SERIALIZED_NAME_TRACKING)
  private List<LineItemTracking> tracking = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIT_AMOUNT = "UnitAmount";
  @SerializedName(SERIALIZED_NAME_UNIT_AMOUNT)
  private Double unitAmount;

  public LineItem() {
  }

  public LineItem accountCode(String accountCode) {
    this.accountCode = accountCode;
    return this;
  }

  /**
   * See Accounts
   * @return accountCode
   */
  @javax.annotation.Nullable
  public String getAccountCode() {
    return accountCode;
  }

  public void setAccountCode(String accountCode) {
    this.accountCode = accountCode;
  }


  public LineItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description needs to be at least 1 char long. A line item with just a description (i.e no unit amount or quantity) can be created by specifying just a &lt;Description&gt; element that contains at least 1 character
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LineItem discountAmount(Double discountAmount) {
    this.discountAmount = discountAmount;
    return this;
  }

  /**
   * Discount amount being applied to a line item. Only supported on ACCREC invoices - ACCPAY invoices and credit notes in Xero do not support discounts.
   * @return discountAmount
   */
  @javax.annotation.Nullable
  public Double getDiscountAmount() {
    return discountAmount;
  }

  public void setDiscountAmount(Double discountAmount) {
    this.discountAmount = discountAmount;
  }


  public LineItem discountRate(Double discountRate) {
    this.discountRate = discountRate;
    return this;
  }

  /**
   * Percentage discount being applied to a line item (only supported on  ACCREC invoices – ACC PAY invoices and credit notes in Xero do not support discounts
   * @return discountRate
   */
  @javax.annotation.Nullable
  public Double getDiscountRate() {
    return discountRate;
  }

  public void setDiscountRate(Double discountRate) {
    this.discountRate = discountRate;
  }


  public LineItem itemCode(String itemCode) {
    this.itemCode = itemCode;
    return this;
  }

  /**
   * See Items
   * @return itemCode
   */
  @javax.annotation.Nullable
  public String getItemCode() {
    return itemCode;
  }

  public void setItemCode(String itemCode) {
    this.itemCode = itemCode;
  }


  public LineItem lineAmount(Double lineAmount) {
    this.lineAmount = lineAmount;
    return this;
  }

  /**
   * If you wish to omit either of the &lt;Quantity&gt; or &lt;UnitAmount&gt; you can provide a LineAmount and Xero will calculate the missing amount for you. The line amount reflects the discounted price if a DiscountRate has been used . i.e LineAmount &#x3D; Quantity * Unit Amount * ((100 – DiscountRate)/100)
   * @return lineAmount
   */
  @javax.annotation.Nullable
  public Double getLineAmount() {
    return lineAmount;
  }

  public void setLineAmount(Double lineAmount) {
    this.lineAmount = lineAmount;
  }


  public LineItem lineItemID(UUID lineItemID) {
    this.lineItemID = lineItemID;
    return this;
  }

  /**
   * LineItem unique ID
   * @return lineItemID
   */
  @javax.annotation.Nullable
  public UUID getLineItemID() {
    return lineItemID;
  }

  public void setLineItemID(UUID lineItemID) {
    this.lineItemID = lineItemID;
  }


  public LineItem quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * LineItem Quantity
   * @return quantity
   */
  @javax.annotation.Nullable
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public LineItem repeatingInvoiceID(UUID repeatingInvoiceID) {
    this.repeatingInvoiceID = repeatingInvoiceID;
    return this;
  }

  /**
   * The Xero identifier for a Repeating Invoice
   * @return repeatingInvoiceID
   */
  @javax.annotation.Nullable
  public UUID getRepeatingInvoiceID() {
    return repeatingInvoiceID;
  }

  public void setRepeatingInvoiceID(UUID repeatingInvoiceID) {
    this.repeatingInvoiceID = repeatingInvoiceID;
  }


  public LineItem taxAmount(Double taxAmount) {
    this.taxAmount = taxAmount;
    return this;
  }

  /**
   * The tax amount is auto calculated as a percentage of the line amount (see below) based on the tax rate. This value can be overriden if the calculated &lt;TaxAmount&gt; is not correct.
   * @return taxAmount
   */
  @javax.annotation.Nullable
  public Double getTaxAmount() {
    return taxAmount;
  }

  public void setTaxAmount(Double taxAmount) {
    this.taxAmount = taxAmount;
  }


  public LineItem taxType(String taxType) {
    this.taxType = taxType;
    return this;
  }

  /**
   * The tax type from TaxRates
   * @return taxType
   */
  @javax.annotation.Nullable
  public String getTaxType() {
    return taxType;
  }

  public void setTaxType(String taxType) {
    this.taxType = taxType;
  }


  public LineItem tracking(List<LineItemTracking> tracking) {
    this.tracking = tracking;
    return this;
  }

  public LineItem addTrackingItem(LineItemTracking trackingItem) {
    if (this.tracking == null) {
      this.tracking = new ArrayList<>();
    }
    this.tracking.add(trackingItem);
    return this;
  }

  /**
   * Optional Tracking Category – see Tracking.  Any LineItem can have a  maximum of 2 &lt;TrackingCategory&gt; elements.
   * @return tracking
   */
  @javax.annotation.Nullable
  public List<LineItemTracking> getTracking() {
    return tracking;
  }

  public void setTracking(List<LineItemTracking> tracking) {
    this.tracking = tracking;
  }


  public LineItem unitAmount(Double unitAmount) {
    this.unitAmount = unitAmount;
    return this;
  }

  /**
   * LineItem Unit Amount
   * @return unitAmount
   */
  @javax.annotation.Nullable
  public Double getUnitAmount() {
    return unitAmount;
  }

  public void setUnitAmount(Double unitAmount) {
    this.unitAmount = unitAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineItem lineItem = (LineItem) o;
    return Objects.equals(this.accountCode, lineItem.accountCode) &&
        Objects.equals(this.description, lineItem.description) &&
        Objects.equals(this.discountAmount, lineItem.discountAmount) &&
        Objects.equals(this.discountRate, lineItem.discountRate) &&
        Objects.equals(this.itemCode, lineItem.itemCode) &&
        Objects.equals(this.lineAmount, lineItem.lineAmount) &&
        Objects.equals(this.lineItemID, lineItem.lineItemID) &&
        Objects.equals(this.quantity, lineItem.quantity) &&
        Objects.equals(this.repeatingInvoiceID, lineItem.repeatingInvoiceID) &&
        Objects.equals(this.taxAmount, lineItem.taxAmount) &&
        Objects.equals(this.taxType, lineItem.taxType) &&
        Objects.equals(this.tracking, lineItem.tracking) &&
        Objects.equals(this.unitAmount, lineItem.unitAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountCode, description, discountAmount, discountRate, itemCode, lineAmount, lineItemID, quantity, repeatingInvoiceID, taxAmount, taxType, tracking, unitAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineItem {\n");
    sb.append("    accountCode: ").append(toIndentedString(accountCode)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    discountAmount: ").append(toIndentedString(discountAmount)).append("\n");
    sb.append("    discountRate: ").append(toIndentedString(discountRate)).append("\n");
    sb.append("    itemCode: ").append(toIndentedString(itemCode)).append("\n");
    sb.append("    lineAmount: ").append(toIndentedString(lineAmount)).append("\n");
    sb.append("    lineItemID: ").append(toIndentedString(lineItemID)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    repeatingInvoiceID: ").append(toIndentedString(repeatingInvoiceID)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    taxType: ").append(toIndentedString(taxType)).append("\n");
    sb.append("    tracking: ").append(toIndentedString(tracking)).append("\n");
    sb.append("    unitAmount: ").append(toIndentedString(unitAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountCode");
    openapiFields.add("Description");
    openapiFields.add("DiscountAmount");
    openapiFields.add("DiscountRate");
    openapiFields.add("ItemCode");
    openapiFields.add("LineAmount");
    openapiFields.add("LineItemID");
    openapiFields.add("Quantity");
    openapiFields.add("RepeatingInvoiceID");
    openapiFields.add("TaxAmount");
    openapiFields.add("TaxType");
    openapiFields.add("Tracking");
    openapiFields.add("UnitAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LineItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LineItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LineItem is not found in the empty JSON string", LineItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LineItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LineItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccountCode") != null && !jsonObj.get("AccountCode").isJsonNull()) && !jsonObj.get("AccountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountCode").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("ItemCode") != null && !jsonObj.get("ItemCode").isJsonNull()) && !jsonObj.get("ItemCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ItemCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ItemCode").toString()));
      }
      if ((jsonObj.get("LineItemID") != null && !jsonObj.get("LineItemID").isJsonNull()) && !jsonObj.get("LineItemID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LineItemID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LineItemID").toString()));
      }
      if ((jsonObj.get("RepeatingInvoiceID") != null && !jsonObj.get("RepeatingInvoiceID").isJsonNull()) && !jsonObj.get("RepeatingInvoiceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RepeatingInvoiceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RepeatingInvoiceID").toString()));
      }
      if ((jsonObj.get("TaxType") != null && !jsonObj.get("TaxType").isJsonNull()) && !jsonObj.get("TaxType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxType").toString()));
      }
      if (jsonObj.get("Tracking") != null && !jsonObj.get("Tracking").isJsonNull()) {
        JsonArray jsonArraytracking = jsonObj.getAsJsonArray("Tracking");
        if (jsonArraytracking != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tracking").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tracking` to be an array in the JSON string but got `%s`", jsonObj.get("Tracking").toString()));
          }

          // validate the optional field `Tracking` (array)
          for (int i = 0; i < jsonArraytracking.size(); i++) {
            LineItemTracking.validateJsonElement(jsonArraytracking.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LineItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LineItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LineItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LineItem.class));

       return (TypeAdapter<T>) new TypeAdapter<LineItem>() {
           @Override
           public void write(JsonWriter out, LineItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LineItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LineItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LineItem
   * @throws IOException if the JSON string is invalid with respect to LineItem
   */
  public static LineItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LineItem.class);
  }

  /**
   * Convert an instance of LineItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

