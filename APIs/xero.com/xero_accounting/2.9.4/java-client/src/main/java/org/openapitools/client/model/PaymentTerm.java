/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Bill;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentTerm
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentTerm {
  public static final String SERIALIZED_NAME_BILLS = "Bills";
  @SerializedName(SERIALIZED_NAME_BILLS)
  private Bill bills;

  public static final String SERIALIZED_NAME_SALES = "Sales";
  @SerializedName(SERIALIZED_NAME_SALES)
  private Bill sales;

  public PaymentTerm() {
  }

  public PaymentTerm bills(Bill bills) {
    this.bills = bills;
    return this;
  }

  /**
   * Get bills
   * @return bills
   */
  @javax.annotation.Nullable
  public Bill getBills() {
    return bills;
  }

  public void setBills(Bill bills) {
    this.bills = bills;
  }


  public PaymentTerm sales(Bill sales) {
    this.sales = sales;
    return this;
  }

  /**
   * Get sales
   * @return sales
   */
  @javax.annotation.Nullable
  public Bill getSales() {
    return sales;
  }

  public void setSales(Bill sales) {
    this.sales = sales;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentTerm paymentTerm = (PaymentTerm) o;
    return Objects.equals(this.bills, paymentTerm.bills) &&
        Objects.equals(this.sales, paymentTerm.sales);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bills, sales);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentTerm {\n");
    sb.append("    bills: ").append(toIndentedString(bills)).append("\n");
    sb.append("    sales: ").append(toIndentedString(sales)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Bills");
    openapiFields.add("Sales");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentTerm
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentTerm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentTerm is not found in the empty JSON string", PaymentTerm.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentTerm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentTerm` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Bills`
      if (jsonObj.get("Bills") != null && !jsonObj.get("Bills").isJsonNull()) {
        Bill.validateJsonElement(jsonObj.get("Bills"));
      }
      // validate the optional field `Sales`
      if (jsonObj.get("Sales") != null && !jsonObj.get("Sales").isJsonNull()) {
        Bill.validateJsonElement(jsonObj.get("Sales"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentTerm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentTerm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentTerm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentTerm.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentTerm>() {
           @Override
           public void write(JsonWriter out, PaymentTerm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentTerm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentTerm given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentTerm
   * @throws IOException if the JSON string is invalid with respect to PaymentTerm
   */
  public static PaymentTerm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentTerm.class);
  }

  /**
   * Convert an instance of PaymentTerm to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

