/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.CurrencyCode;
import org.openapitools.client.model.LineAmountTypes;
import org.openapitools.client.model.LineItem;
import org.openapitools.client.model.ValidationError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PurchaseOrder
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PurchaseOrder {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "Attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<Attachment> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTENTION_TO = "AttentionTo";
  @SerializedName(SERIALIZED_NAME_ATTENTION_TO)
  private String attentionTo;

  public static final String SERIALIZED_NAME_BRANDING_THEME_I_D = "BrandingThemeID";
  @SerializedName(SERIALIZED_NAME_BRANDING_THEME_I_D)
  private UUID brandingThemeID;

  public static final String SERIALIZED_NAME_CONTACT = "Contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private Contact contact;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private CurrencyCode currencyCode;

  public static final String SERIALIZED_NAME_CURRENCY_RATE = "CurrencyRate";
  @SerializedName(SERIALIZED_NAME_CURRENCY_RATE)
  private Double currencyRate;

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DELIVERY_ADDRESS = "DeliveryAddress";
  @SerializedName(SERIALIZED_NAME_DELIVERY_ADDRESS)
  private String deliveryAddress;

  public static final String SERIALIZED_NAME_DELIVERY_DATE = "DeliveryDate";
  @SerializedName(SERIALIZED_NAME_DELIVERY_DATE)
  private String deliveryDate;

  public static final String SERIALIZED_NAME_DELIVERY_INSTRUCTIONS = "DeliveryInstructions";
  @SerializedName(SERIALIZED_NAME_DELIVERY_INSTRUCTIONS)
  private String deliveryInstructions;

  public static final String SERIALIZED_NAME_EXPECTED_ARRIVAL_DATE = "ExpectedArrivalDate";
  @SerializedName(SERIALIZED_NAME_EXPECTED_ARRIVAL_DATE)
  private String expectedArrivalDate;

  public static final String SERIALIZED_NAME_HAS_ATTACHMENTS = "HasAttachments";
  @SerializedName(SERIALIZED_NAME_HAS_ATTACHMENTS)
  private Boolean hasAttachments = false;

  public static final String SERIALIZED_NAME_LINE_AMOUNT_TYPES = "LineAmountTypes";
  @SerializedName(SERIALIZED_NAME_LINE_AMOUNT_TYPES)
  private LineAmountTypes lineAmountTypes;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "LineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<LineItem> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_PURCHASE_ORDER_I_D = "PurchaseOrderID";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER_I_D)
  private UUID purchaseOrderID;

  public static final String SERIALIZED_NAME_PURCHASE_ORDER_NUMBER = "PurchaseOrderNumber";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER_NUMBER)
  private String purchaseOrderNumber;

  public static final String SERIALIZED_NAME_REFERENCE = "Reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_SENT_TO_CONTACT = "SentToContact";
  @SerializedName(SERIALIZED_NAME_SENT_TO_CONTACT)
  private Boolean sentToContact;

  /**
   * See Purchase Order Status Codes
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DRAFT("DRAFT"),
    
    SUBMITTED("SUBMITTED"),
    
    AUTHORISED("AUTHORISED"),
    
    BILLED("BILLED"),
    
    DELETED("DELETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STATUS_ATTRIBUTE_STRING = "StatusAttributeString";
  @SerializedName(SERIALIZED_NAME_STATUS_ATTRIBUTE_STRING)
  private String statusAttributeString;

  public static final String SERIALIZED_NAME_SUB_TOTAL = "SubTotal";
  @SerializedName(SERIALIZED_NAME_SUB_TOTAL)
  private Double subTotal;

  public static final String SERIALIZED_NAME_TELEPHONE = "Telephone";
  @SerializedName(SERIALIZED_NAME_TELEPHONE)
  private String telephone;

  public static final String SERIALIZED_NAME_TOTAL = "Total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public static final String SERIALIZED_NAME_TOTAL_DISCOUNT = "TotalDiscount";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISCOUNT)
  private Double totalDiscount;

  public static final String SERIALIZED_NAME_TOTAL_TAX = "TotalTax";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX)
  private Double totalTax;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "ValidationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<ValidationError> validationErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_WARNINGS = "Warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<ValidationError> warnings = new ArrayList<>();

  public PurchaseOrder() {
  }

  public PurchaseOrder(
     Boolean hasAttachments, 
     Double subTotal, 
     Double total, 
     Double totalDiscount, 
     Double totalTax, 
     String updatedDateUTC
  ) {
    this();
    this.hasAttachments = hasAttachments;
    this.subTotal = subTotal;
    this.total = total;
    this.totalDiscount = totalDiscount;
    this.totalTax = totalTax;
    this.updatedDateUTC = updatedDateUTC;
  }

  public PurchaseOrder attachments(List<Attachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public PurchaseOrder addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Displays array of attachments from the API
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<Attachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<Attachment> attachments) {
    this.attachments = attachments;
  }


  public PurchaseOrder attentionTo(String attentionTo) {
    this.attentionTo = attentionTo;
    return this;
  }

  /**
   * The person that the delivery is going to
   * @return attentionTo
   */
  @javax.annotation.Nullable
  public String getAttentionTo() {
    return attentionTo;
  }

  public void setAttentionTo(String attentionTo) {
    this.attentionTo = attentionTo;
  }


  public PurchaseOrder brandingThemeID(UUID brandingThemeID) {
    this.brandingThemeID = brandingThemeID;
    return this;
  }

  /**
   * See BrandingThemes
   * @return brandingThemeID
   */
  @javax.annotation.Nullable
  public UUID getBrandingThemeID() {
    return brandingThemeID;
  }

  public void setBrandingThemeID(UUID brandingThemeID) {
    this.brandingThemeID = brandingThemeID;
  }


  public PurchaseOrder contact(Contact contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nullable
  public Contact getContact() {
    return contact;
  }

  public void setContact(Contact contact) {
    this.contact = contact;
  }


  public PurchaseOrder currencyCode(CurrencyCode currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public CurrencyCode getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(CurrencyCode currencyCode) {
    this.currencyCode = currencyCode;
  }


  public PurchaseOrder currencyRate(Double currencyRate) {
    this.currencyRate = currencyRate;
    return this;
  }

  /**
   * The currency rate for a multicurrency purchase order. If no rate is specified, the XE.com day rate is used.
   * @return currencyRate
   */
  @javax.annotation.Nullable
  public Double getCurrencyRate() {
    return currencyRate;
  }

  public void setCurrencyRate(Double currencyRate) {
    this.currencyRate = currencyRate;
  }


  public PurchaseOrder date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Date purchase order was issued – YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public PurchaseOrder deliveryAddress(String deliveryAddress) {
    this.deliveryAddress = deliveryAddress;
    return this;
  }

  /**
   * The address the goods are to be delivered to
   * @return deliveryAddress
   */
  @javax.annotation.Nullable
  public String getDeliveryAddress() {
    return deliveryAddress;
  }

  public void setDeliveryAddress(String deliveryAddress) {
    this.deliveryAddress = deliveryAddress;
  }


  public PurchaseOrder deliveryDate(String deliveryDate) {
    this.deliveryDate = deliveryDate;
    return this;
  }

  /**
   * Date the goods are to be delivered – YYYY-MM-DD
   * @return deliveryDate
   */
  @javax.annotation.Nullable
  public String getDeliveryDate() {
    return deliveryDate;
  }

  public void setDeliveryDate(String deliveryDate) {
    this.deliveryDate = deliveryDate;
  }


  public PurchaseOrder deliveryInstructions(String deliveryInstructions) {
    this.deliveryInstructions = deliveryInstructions;
    return this;
  }

  /**
   * A free text feild for instructions (500 characters max)
   * @return deliveryInstructions
   */
  @javax.annotation.Nullable
  public String getDeliveryInstructions() {
    return deliveryInstructions;
  }

  public void setDeliveryInstructions(String deliveryInstructions) {
    this.deliveryInstructions = deliveryInstructions;
  }


  public PurchaseOrder expectedArrivalDate(String expectedArrivalDate) {
    this.expectedArrivalDate = expectedArrivalDate;
    return this;
  }

  /**
   * The date the goods are expected to arrive.
   * @return expectedArrivalDate
   */
  @javax.annotation.Nullable
  public String getExpectedArrivalDate() {
    return expectedArrivalDate;
  }

  public void setExpectedArrivalDate(String expectedArrivalDate) {
    this.expectedArrivalDate = expectedArrivalDate;
  }


  /**
   * boolean to indicate if a purchase order has an attachment
   * @return hasAttachments
   */
  @javax.annotation.Nullable
  public Boolean getHasAttachments() {
    return hasAttachments;
  }



  public PurchaseOrder lineAmountTypes(LineAmountTypes lineAmountTypes) {
    this.lineAmountTypes = lineAmountTypes;
    return this;
  }

  /**
   * Get lineAmountTypes
   * @return lineAmountTypes
   */
  @javax.annotation.Nullable
  public LineAmountTypes getLineAmountTypes() {
    return lineAmountTypes;
  }

  public void setLineAmountTypes(LineAmountTypes lineAmountTypes) {
    this.lineAmountTypes = lineAmountTypes;
  }


  public PurchaseOrder lineItems(List<LineItem> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public PurchaseOrder addLineItemsItem(LineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * See LineItems
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<LineItem> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<LineItem> lineItems) {
    this.lineItems = lineItems;
  }


  public PurchaseOrder purchaseOrderID(UUID purchaseOrderID) {
    this.purchaseOrderID = purchaseOrderID;
    return this;
  }

  /**
   * Xero generated unique identifier for purchase order
   * @return purchaseOrderID
   */
  @javax.annotation.Nullable
  public UUID getPurchaseOrderID() {
    return purchaseOrderID;
  }

  public void setPurchaseOrderID(UUID purchaseOrderID) {
    this.purchaseOrderID = purchaseOrderID;
  }


  public PurchaseOrder purchaseOrderNumber(String purchaseOrderNumber) {
    this.purchaseOrderNumber = purchaseOrderNumber;
    return this;
  }

  /**
   * Unique alpha numeric code identifying purchase order (when missing will auto-generate from your Organisation Invoice Settings)
   * @return purchaseOrderNumber
   */
  @javax.annotation.Nullable
  public String getPurchaseOrderNumber() {
    return purchaseOrderNumber;
  }

  public void setPurchaseOrderNumber(String purchaseOrderNumber) {
    this.purchaseOrderNumber = purchaseOrderNumber;
  }


  public PurchaseOrder reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Additional reference number
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public PurchaseOrder sentToContact(Boolean sentToContact) {
    this.sentToContact = sentToContact;
    return this;
  }

  /**
   * Boolean to set whether the purchase order should be marked as “sent”. This can be set only on purchase orders that have been approved or billed
   * @return sentToContact
   */
  @javax.annotation.Nullable
  public Boolean getSentToContact() {
    return sentToContact;
  }

  public void setSentToContact(Boolean sentToContact) {
    this.sentToContact = sentToContact;
  }


  public PurchaseOrder status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * See Purchase Order Status Codes
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public PurchaseOrder statusAttributeString(String statusAttributeString) {
    this.statusAttributeString = statusAttributeString;
    return this;
  }

  /**
   * A string to indicate if a invoice status
   * @return statusAttributeString
   */
  @javax.annotation.Nullable
  public String getStatusAttributeString() {
    return statusAttributeString;
  }

  public void setStatusAttributeString(String statusAttributeString) {
    this.statusAttributeString = statusAttributeString;
  }


  /**
   * Total of purchase order excluding taxes
   * @return subTotal
   */
  @javax.annotation.Nullable
  public Double getSubTotal() {
    return subTotal;
  }



  public PurchaseOrder telephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  /**
   * The phone number for the person accepting the delivery
   * @return telephone
   */
  @javax.annotation.Nullable
  public String getTelephone() {
    return telephone;
  }

  public void setTelephone(String telephone) {
    this.telephone = telephone;
  }


  /**
   * Total of Purchase Order tax inclusive (i.e. SubTotal + TotalTax)
   * @return total
   */
  @javax.annotation.Nullable
  public Double getTotal() {
    return total;
  }



  /**
   * Total of discounts applied on the purchase order line items
   * @return totalDiscount
   */
  @javax.annotation.Nullable
  public Double getTotalDiscount() {
    return totalDiscount;
  }



  /**
   * Total tax on purchase order
   * @return totalTax
   */
  @javax.annotation.Nullable
  public Double getTotalTax() {
    return totalTax;
  }



  /**
   * Last modified date UTC format
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }



  public PurchaseOrder validationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public PurchaseOrder addValidationErrorsItem(ValidationError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Displays array of validation error messages from the API
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<ValidationError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }


  public PurchaseOrder warnings(List<ValidationError> warnings) {
    this.warnings = warnings;
    return this;
  }

  public PurchaseOrder addWarningsItem(ValidationError warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * Displays array of warning messages from the API
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<ValidationError> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<ValidationError> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PurchaseOrder purchaseOrder = (PurchaseOrder) o;
    return Objects.equals(this.attachments, purchaseOrder.attachments) &&
        Objects.equals(this.attentionTo, purchaseOrder.attentionTo) &&
        Objects.equals(this.brandingThemeID, purchaseOrder.brandingThemeID) &&
        Objects.equals(this.contact, purchaseOrder.contact) &&
        Objects.equals(this.currencyCode, purchaseOrder.currencyCode) &&
        Objects.equals(this.currencyRate, purchaseOrder.currencyRate) &&
        Objects.equals(this.date, purchaseOrder.date) &&
        Objects.equals(this.deliveryAddress, purchaseOrder.deliveryAddress) &&
        Objects.equals(this.deliveryDate, purchaseOrder.deliveryDate) &&
        Objects.equals(this.deliveryInstructions, purchaseOrder.deliveryInstructions) &&
        Objects.equals(this.expectedArrivalDate, purchaseOrder.expectedArrivalDate) &&
        Objects.equals(this.hasAttachments, purchaseOrder.hasAttachments) &&
        Objects.equals(this.lineAmountTypes, purchaseOrder.lineAmountTypes) &&
        Objects.equals(this.lineItems, purchaseOrder.lineItems) &&
        Objects.equals(this.purchaseOrderID, purchaseOrder.purchaseOrderID) &&
        Objects.equals(this.purchaseOrderNumber, purchaseOrder.purchaseOrderNumber) &&
        Objects.equals(this.reference, purchaseOrder.reference) &&
        Objects.equals(this.sentToContact, purchaseOrder.sentToContact) &&
        Objects.equals(this.status, purchaseOrder.status) &&
        Objects.equals(this.statusAttributeString, purchaseOrder.statusAttributeString) &&
        Objects.equals(this.subTotal, purchaseOrder.subTotal) &&
        Objects.equals(this.telephone, purchaseOrder.telephone) &&
        Objects.equals(this.total, purchaseOrder.total) &&
        Objects.equals(this.totalDiscount, purchaseOrder.totalDiscount) &&
        Objects.equals(this.totalTax, purchaseOrder.totalTax) &&
        Objects.equals(this.updatedDateUTC, purchaseOrder.updatedDateUTC) &&
        Objects.equals(this.validationErrors, purchaseOrder.validationErrors) &&
        Objects.equals(this.warnings, purchaseOrder.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, attentionTo, brandingThemeID, contact, currencyCode, currencyRate, date, deliveryAddress, deliveryDate, deliveryInstructions, expectedArrivalDate, hasAttachments, lineAmountTypes, lineItems, purchaseOrderID, purchaseOrderNumber, reference, sentToContact, status, statusAttributeString, subTotal, telephone, total, totalDiscount, totalTax, updatedDateUTC, validationErrors, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PurchaseOrder {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    attentionTo: ").append(toIndentedString(attentionTo)).append("\n");
    sb.append("    brandingThemeID: ").append(toIndentedString(brandingThemeID)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currencyRate: ").append(toIndentedString(currencyRate)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    deliveryAddress: ").append(toIndentedString(deliveryAddress)).append("\n");
    sb.append("    deliveryDate: ").append(toIndentedString(deliveryDate)).append("\n");
    sb.append("    deliveryInstructions: ").append(toIndentedString(deliveryInstructions)).append("\n");
    sb.append("    expectedArrivalDate: ").append(toIndentedString(expectedArrivalDate)).append("\n");
    sb.append("    hasAttachments: ").append(toIndentedString(hasAttachments)).append("\n");
    sb.append("    lineAmountTypes: ").append(toIndentedString(lineAmountTypes)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    purchaseOrderID: ").append(toIndentedString(purchaseOrderID)).append("\n");
    sb.append("    purchaseOrderNumber: ").append(toIndentedString(purchaseOrderNumber)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    sentToContact: ").append(toIndentedString(sentToContact)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusAttributeString: ").append(toIndentedString(statusAttributeString)).append("\n");
    sb.append("    subTotal: ").append(toIndentedString(subTotal)).append("\n");
    sb.append("    telephone: ").append(toIndentedString(telephone)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totalDiscount: ").append(toIndentedString(totalDiscount)).append("\n");
    sb.append("    totalTax: ").append(toIndentedString(totalTax)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attachments");
    openapiFields.add("AttentionTo");
    openapiFields.add("BrandingThemeID");
    openapiFields.add("Contact");
    openapiFields.add("CurrencyCode");
    openapiFields.add("CurrencyRate");
    openapiFields.add("Date");
    openapiFields.add("DeliveryAddress");
    openapiFields.add("DeliveryDate");
    openapiFields.add("DeliveryInstructions");
    openapiFields.add("ExpectedArrivalDate");
    openapiFields.add("HasAttachments");
    openapiFields.add("LineAmountTypes");
    openapiFields.add("LineItems");
    openapiFields.add("PurchaseOrderID");
    openapiFields.add("PurchaseOrderNumber");
    openapiFields.add("Reference");
    openapiFields.add("SentToContact");
    openapiFields.add("Status");
    openapiFields.add("StatusAttributeString");
    openapiFields.add("SubTotal");
    openapiFields.add("Telephone");
    openapiFields.add("Total");
    openapiFields.add("TotalDiscount");
    openapiFields.add("TotalTax");
    openapiFields.add("UpdatedDateUTC");
    openapiFields.add("ValidationErrors");
    openapiFields.add("Warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PurchaseOrder
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PurchaseOrder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PurchaseOrder is not found in the empty JSON string", PurchaseOrder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PurchaseOrder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PurchaseOrder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Attachments") != null && !jsonObj.get("Attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("Attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Attachments` to be an array in the JSON string but got `%s`", jsonObj.get("Attachments").toString()));
          }

          // validate the optional field `Attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            Attachment.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if ((jsonObj.get("AttentionTo") != null && !jsonObj.get("AttentionTo").isJsonNull()) && !jsonObj.get("AttentionTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttentionTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttentionTo").toString()));
      }
      if ((jsonObj.get("BrandingThemeID") != null && !jsonObj.get("BrandingThemeID").isJsonNull()) && !jsonObj.get("BrandingThemeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BrandingThemeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BrandingThemeID").toString()));
      }
      // validate the optional field `Contact`
      if (jsonObj.get("Contact") != null && !jsonObj.get("Contact").isJsonNull()) {
        Contact.validateJsonElement(jsonObj.get("Contact"));
      }
      if ((jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) && !jsonObj.get("CurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencyCode").toString()));
      }
      // validate the optional field `CurrencyCode`
      if (jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) {
        CurrencyCode.validateJsonElement(jsonObj.get("CurrencyCode"));
      }
      if ((jsonObj.get("Date") != null && !jsonObj.get("Date").isJsonNull()) && !jsonObj.get("Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Date").toString()));
      }
      if ((jsonObj.get("DeliveryAddress") != null && !jsonObj.get("DeliveryAddress").isJsonNull()) && !jsonObj.get("DeliveryAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeliveryAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeliveryAddress").toString()));
      }
      if ((jsonObj.get("DeliveryDate") != null && !jsonObj.get("DeliveryDate").isJsonNull()) && !jsonObj.get("DeliveryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeliveryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeliveryDate").toString()));
      }
      if ((jsonObj.get("DeliveryInstructions") != null && !jsonObj.get("DeliveryInstructions").isJsonNull()) && !jsonObj.get("DeliveryInstructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeliveryInstructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeliveryInstructions").toString()));
      }
      if ((jsonObj.get("ExpectedArrivalDate") != null && !jsonObj.get("ExpectedArrivalDate").isJsonNull()) && !jsonObj.get("ExpectedArrivalDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExpectedArrivalDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExpectedArrivalDate").toString()));
      }
      if ((jsonObj.get("LineAmountTypes") != null && !jsonObj.get("LineAmountTypes").isJsonNull()) && !jsonObj.get("LineAmountTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LineAmountTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LineAmountTypes").toString()));
      }
      // validate the optional field `LineAmountTypes`
      if (jsonObj.get("LineAmountTypes") != null && !jsonObj.get("LineAmountTypes").isJsonNull()) {
        LineAmountTypes.validateJsonElement(jsonObj.get("LineAmountTypes"));
      }
      if (jsonObj.get("LineItems") != null && !jsonObj.get("LineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("LineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LineItems` to be an array in the JSON string but got `%s`", jsonObj.get("LineItems").toString()));
          }

          // validate the optional field `LineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            LineItem.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      if ((jsonObj.get("PurchaseOrderID") != null && !jsonObj.get("PurchaseOrderID").isJsonNull()) && !jsonObj.get("PurchaseOrderID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PurchaseOrderID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PurchaseOrderID").toString()));
      }
      if ((jsonObj.get("PurchaseOrderNumber") != null && !jsonObj.get("PurchaseOrderNumber").isJsonNull()) && !jsonObj.get("PurchaseOrderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PurchaseOrderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PurchaseOrderNumber").toString()));
      }
      if ((jsonObj.get("Reference") != null && !jsonObj.get("Reference").isJsonNull()) && !jsonObj.get("Reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Reference").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("StatusAttributeString") != null && !jsonObj.get("StatusAttributeString").isJsonNull()) && !jsonObj.get("StatusAttributeString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatusAttributeString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusAttributeString").toString()));
      }
      if ((jsonObj.get("Telephone") != null && !jsonObj.get("Telephone").isJsonNull()) && !jsonObj.get("Telephone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Telephone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Telephone").toString()));
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
      if (jsonObj.get("ValidationErrors") != null && !jsonObj.get("ValidationErrors").isJsonNull()) {
        JsonArray jsonArrayvalidationErrors = jsonObj.getAsJsonArray("ValidationErrors");
        if (jsonArrayvalidationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ValidationErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ValidationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("ValidationErrors").toString()));
          }

          // validate the optional field `ValidationErrors` (array)
          for (int i = 0; i < jsonArrayvalidationErrors.size(); i++) {
            ValidationError.validateJsonElement(jsonArrayvalidationErrors.get(i));
          };
        }
      }
      if (jsonObj.get("Warnings") != null && !jsonObj.get("Warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("Warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Warnings` to be an array in the JSON string but got `%s`", jsonObj.get("Warnings").toString()));
          }

          // validate the optional field `Warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            ValidationError.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PurchaseOrder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PurchaseOrder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PurchaseOrder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PurchaseOrder.class));

       return (TypeAdapter<T>) new TypeAdapter<PurchaseOrder>() {
           @Override
           public void write(JsonWriter out, PurchaseOrder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PurchaseOrder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PurchaseOrder given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PurchaseOrder
   * @throws IOException if the JSON string is invalid with respect to PurchaseOrder
   */
  public static PurchaseOrder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PurchaseOrder.class);
  }

  /**
   * Convert an instance of PurchaseOrder to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

