/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Schedule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Schedule {
  public static final String SERIALIZED_NAME_DUE_DATE = "DueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private Integer dueDate;

  /**
   * the payment terms
   */
  @JsonAdapter(DueDateTypeEnum.Adapter.class)
  public enum DueDateTypeEnum {
    DAYSAFTERBILLDATE("DAYSAFTERBILLDATE"),
    
    DAYSAFTERBILLMONTH("DAYSAFTERBILLMONTH"),
    
    DAYSAFTERINVOICEDATE("DAYSAFTERINVOICEDATE"),
    
    DAYSAFTERINVOICEMONTH("DAYSAFTERINVOICEMONTH"),
    
    OFCURRENTMONTH("OFCURRENTMONTH"),
    
    OFFOLLOWINGMONTH("OFFOLLOWINGMONTH");

    private String value;

    DueDateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DueDateTypeEnum fromValue(String value) {
      for (DueDateTypeEnum b : DueDateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DueDateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DueDateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DueDateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DueDateTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DueDateTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DUE_DATE_TYPE = "DueDateType";
  @SerializedName(SERIALIZED_NAME_DUE_DATE_TYPE)
  private DueDateTypeEnum dueDateType;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_NEXT_SCHEDULED_DATE = "NextScheduledDate";
  @SerializedName(SERIALIZED_NAME_NEXT_SCHEDULED_DATE)
  private String nextScheduledDate;

  public static final String SERIALIZED_NAME_PERIOD = "Period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Integer period;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  /**
   * One of the following - WEEKLY or MONTHLY
   */
  @JsonAdapter(UnitEnum.Adapter.class)
  public enum UnitEnum {
    WEEKLY("WEEKLY"),
    
    MONTHLY("MONTHLY");

    private String value;

    UnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitEnum fromValue(String value) {
      for (UnitEnum b : UnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNIT = "Unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private UnitEnum unit;

  public Schedule() {
  }

  public Schedule dueDate(Integer dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Integer used with due date type e.g 20 (of following month), 31 (of current month)
   * @return dueDate
   */
  @javax.annotation.Nullable
  public Integer getDueDate() {
    return dueDate;
  }

  public void setDueDate(Integer dueDate) {
    this.dueDate = dueDate;
  }


  public Schedule dueDateType(DueDateTypeEnum dueDateType) {
    this.dueDateType = dueDateType;
    return this;
  }

  /**
   * the payment terms
   * @return dueDateType
   */
  @javax.annotation.Nullable
  public DueDateTypeEnum getDueDateType() {
    return dueDateType;
  }

  public void setDueDateType(DueDateTypeEnum dueDateType) {
    this.dueDateType = dueDateType;
  }


  public Schedule endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Invoice end date â€“ only returned if the template has an end date set
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public Schedule nextScheduledDate(String nextScheduledDate) {
    this.nextScheduledDate = nextScheduledDate;
    return this;
  }

  /**
   * The calendar date of the next invoice in the schedule to be generated
   * @return nextScheduledDate
   */
  @javax.annotation.Nullable
  public String getNextScheduledDate() {
    return nextScheduledDate;
  }

  public void setNextScheduledDate(String nextScheduledDate) {
    this.nextScheduledDate = nextScheduledDate;
  }


  public Schedule period(Integer period) {
    this.period = period;
    return this;
  }

  /**
   * Integer used with the unit e.g. 1 (every 1 week), 2 (every 2 months)
   * @return period
   */
  @javax.annotation.Nullable
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(Integer period) {
    this.period = period;
  }


  public Schedule startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Date the first invoice of the current version of the repeating schedule was generated (changes when repeating invoice is edited)
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public Schedule unit(UnitEnum unit) {
    this.unit = unit;
    return this;
  }

  /**
   * One of the following - WEEKLY or MONTHLY
   * @return unit
   */
  @javax.annotation.Nullable
  public UnitEnum getUnit() {
    return unit;
  }

  public void setUnit(UnitEnum unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Schedule schedule = (Schedule) o;
    return Objects.equals(this.dueDate, schedule.dueDate) &&
        Objects.equals(this.dueDateType, schedule.dueDateType) &&
        Objects.equals(this.endDate, schedule.endDate) &&
        Objects.equals(this.nextScheduledDate, schedule.nextScheduledDate) &&
        Objects.equals(this.period, schedule.period) &&
        Objects.equals(this.startDate, schedule.startDate) &&
        Objects.equals(this.unit, schedule.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dueDate, dueDateType, endDate, nextScheduledDate, period, startDate, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Schedule {\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    dueDateType: ").append(toIndentedString(dueDateType)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    nextScheduledDate: ").append(toIndentedString(nextScheduledDate)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DueDate");
    openapiFields.add("DueDateType");
    openapiFields.add("EndDate");
    openapiFields.add("NextScheduledDate");
    openapiFields.add("Period");
    openapiFields.add("StartDate");
    openapiFields.add("Unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Schedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Schedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Schedule is not found in the empty JSON string", Schedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Schedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Schedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DueDateType") != null && !jsonObj.get("DueDateType").isJsonNull()) && !jsonObj.get("DueDateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DueDateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DueDateType").toString()));
      }
      // validate the optional field `DueDateType`
      if (jsonObj.get("DueDateType") != null && !jsonObj.get("DueDateType").isJsonNull()) {
        DueDateTypeEnum.validateJsonElement(jsonObj.get("DueDateType"));
      }
      if ((jsonObj.get("EndDate") != null && !jsonObj.get("EndDate").isJsonNull()) && !jsonObj.get("EndDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EndDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EndDate").toString()));
      }
      if ((jsonObj.get("NextScheduledDate") != null && !jsonObj.get("NextScheduledDate").isJsonNull()) && !jsonObj.get("NextScheduledDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextScheduledDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextScheduledDate").toString()));
      }
      if ((jsonObj.get("StartDate") != null && !jsonObj.get("StartDate").isJsonNull()) && !jsonObj.get("StartDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StartDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StartDate").toString()));
      }
      if ((jsonObj.get("Unit") != null && !jsonObj.get("Unit").isJsonNull()) && !jsonObj.get("Unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Unit").toString()));
      }
      // validate the optional field `Unit`
      if (jsonObj.get("Unit") != null && !jsonObj.get("Unit").isJsonNull()) {
        UnitEnum.validateJsonElement(jsonObj.get("Unit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Schedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Schedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Schedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Schedule.class));

       return (TypeAdapter<T>) new TypeAdapter<Schedule>() {
           @Override
           public void write(JsonWriter out, Schedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Schedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Schedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Schedule
   * @throws IOException if the JSON string is invalid with respect to Schedule
   */
  public static Schedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Schedule.class);
  }

  /**
   * Convert an instance of Schedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

