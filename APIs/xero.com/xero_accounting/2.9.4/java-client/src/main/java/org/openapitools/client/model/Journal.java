/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.JournalLine;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Journal
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Journal {
  public static final String SERIALIZED_NAME_CREATED_DATE_U_T_C = "CreatedDateUTC";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_U_T_C)
  private String createdDateUTC;

  public static final String SERIALIZED_NAME_JOURNAL_DATE = "JournalDate";
  @SerializedName(SERIALIZED_NAME_JOURNAL_DATE)
  private String journalDate;

  public static final String SERIALIZED_NAME_JOURNAL_I_D = "JournalID";
  @SerializedName(SERIALIZED_NAME_JOURNAL_I_D)
  private UUID journalID;

  public static final String SERIALIZED_NAME_JOURNAL_LINES = "JournalLines";
  @SerializedName(SERIALIZED_NAME_JOURNAL_LINES)
  private List<JournalLine> journalLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOURNAL_NUMBER = "JournalNumber";
  @SerializedName(SERIALIZED_NAME_JOURNAL_NUMBER)
  private Integer journalNumber;

  public static final String SERIALIZED_NAME_REFERENCE = "Reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_SOURCE_I_D = "SourceID";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_D)
  private UUID sourceID;

  /**
   * The journal source type. The type of transaction that created the journal
   */
  @JsonAdapter(SourceTypeEnum.Adapter.class)
  public enum SourceTypeEnum {
    ACCREC("ACCREC"),
    
    ACCPAY("ACCPAY"),
    
    ACCRECCREDIT("ACCRECCREDIT"),
    
    ACCPAYCREDIT("ACCPAYCREDIT"),
    
    ACCRECPAYMENT("ACCRECPAYMENT"),
    
    ACCPAYPAYMENT("ACCPAYPAYMENT"),
    
    ARCREDITPAYMENT("ARCREDITPAYMENT"),
    
    APCREDITPAYMENT("APCREDITPAYMENT"),
    
    CASHREC("CASHREC"),
    
    CASHPAID("CASHPAID"),
    
    TRANSFER("TRANSFER"),
    
    ARPREPAYMENT("ARPREPAYMENT"),
    
    APPREPAYMENT("APPREPAYMENT"),
    
    AROVERPAYMENT("AROVERPAYMENT"),
    
    APOVERPAYMENT("APOVERPAYMENT"),
    
    EXPCLAIM("EXPCLAIM"),
    
    EXPPAYMENT("EXPPAYMENT"),
    
    MANJOURNAL("MANJOURNAL"),
    
    PAYSLIP("PAYSLIP"),
    
    WAGEPAYABLE("WAGEPAYABLE"),
    
    INTEGRATEDPAYROLLPE("INTEGRATEDPAYROLLPE"),
    
    INTEGRATEDPAYROLLPT("INTEGRATEDPAYROLLPT"),
    
    EXTERNALSPENDMONEY("EXTERNALSPENDMONEY"),
    
    INTEGRATEDPAYROLLPTPAYMENT("INTEGRATEDPAYROLLPTPAYMENT"),
    
    INTEGRATEDPAYROLLCN("INTEGRATEDPAYROLLCN");

    private String value;

    SourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceTypeEnum fromValue(String value) {
      for (SourceTypeEnum b : SourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "SourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private SourceTypeEnum sourceType;

  public Journal() {
  }

  public Journal(
     String createdDateUTC
  ) {
    this();
    this.createdDateUTC = createdDateUTC;
  }

  /**
   * Created date UTC format
   * @return createdDateUTC
   */
  @javax.annotation.Nullable
  public String getCreatedDateUTC() {
    return createdDateUTC;
  }



  public Journal journalDate(String journalDate) {
    this.journalDate = journalDate;
    return this;
  }

  /**
   * Date the journal was posted
   * @return journalDate
   */
  @javax.annotation.Nullable
  public String getJournalDate() {
    return journalDate;
  }

  public void setJournalDate(String journalDate) {
    this.journalDate = journalDate;
  }


  public Journal journalID(UUID journalID) {
    this.journalID = journalID;
    return this;
  }

  /**
   * Xero identifier
   * @return journalID
   */
  @javax.annotation.Nullable
  public UUID getJournalID() {
    return journalID;
  }

  public void setJournalID(UUID journalID) {
    this.journalID = journalID;
  }


  public Journal journalLines(List<JournalLine> journalLines) {
    this.journalLines = journalLines;
    return this;
  }

  public Journal addJournalLinesItem(JournalLine journalLinesItem) {
    if (this.journalLines == null) {
      this.journalLines = new ArrayList<>();
    }
    this.journalLines.add(journalLinesItem);
    return this;
  }

  /**
   * See JournalLines
   * @return journalLines
   */
  @javax.annotation.Nullable
  public List<JournalLine> getJournalLines() {
    return journalLines;
  }

  public void setJournalLines(List<JournalLine> journalLines) {
    this.journalLines = journalLines;
  }


  public Journal journalNumber(Integer journalNumber) {
    this.journalNumber = journalNumber;
    return this;
  }

  /**
   * Xero generated journal number
   * @return journalNumber
   */
  @javax.annotation.Nullable
  public Integer getJournalNumber() {
    return journalNumber;
  }

  public void setJournalNumber(Integer journalNumber) {
    this.journalNumber = journalNumber;
  }


  public Journal reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * reference field for additional indetifying information
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public Journal sourceID(UUID sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  /**
   * The identifier for the source transaction (e.g. InvoiceID)
   * @return sourceID
   */
  @javax.annotation.Nullable
  public UUID getSourceID() {
    return sourceID;
  }

  public void setSourceID(UUID sourceID) {
    this.sourceID = sourceID;
  }


  public Journal sourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * The journal source type. The type of transaction that created the journal
   * @return sourceType
   */
  @javax.annotation.Nullable
  public SourceTypeEnum getSourceType() {
    return sourceType;
  }

  public void setSourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Journal journal = (Journal) o;
    return Objects.equals(this.createdDateUTC, journal.createdDateUTC) &&
        Objects.equals(this.journalDate, journal.journalDate) &&
        Objects.equals(this.journalID, journal.journalID) &&
        Objects.equals(this.journalLines, journal.journalLines) &&
        Objects.equals(this.journalNumber, journal.journalNumber) &&
        Objects.equals(this.reference, journal.reference) &&
        Objects.equals(this.sourceID, journal.sourceID) &&
        Objects.equals(this.sourceType, journal.sourceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdDateUTC, journalDate, journalID, journalLines, journalNumber, reference, sourceID, sourceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Journal {\n");
    sb.append("    createdDateUTC: ").append(toIndentedString(createdDateUTC)).append("\n");
    sb.append("    journalDate: ").append(toIndentedString(journalDate)).append("\n");
    sb.append("    journalID: ").append(toIndentedString(journalID)).append("\n");
    sb.append("    journalLines: ").append(toIndentedString(journalLines)).append("\n");
    sb.append("    journalNumber: ").append(toIndentedString(journalNumber)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    sourceID: ").append(toIndentedString(sourceID)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CreatedDateUTC");
    openapiFields.add("JournalDate");
    openapiFields.add("JournalID");
    openapiFields.add("JournalLines");
    openapiFields.add("JournalNumber");
    openapiFields.add("Reference");
    openapiFields.add("SourceID");
    openapiFields.add("SourceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Journal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Journal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Journal is not found in the empty JSON string", Journal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Journal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Journal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CreatedDateUTC") != null && !jsonObj.get("CreatedDateUTC").isJsonNull()) && !jsonObj.get("CreatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CreatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CreatedDateUTC").toString()));
      }
      if ((jsonObj.get("JournalDate") != null && !jsonObj.get("JournalDate").isJsonNull()) && !jsonObj.get("JournalDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JournalDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JournalDate").toString()));
      }
      if ((jsonObj.get("JournalID") != null && !jsonObj.get("JournalID").isJsonNull()) && !jsonObj.get("JournalID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JournalID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JournalID").toString()));
      }
      if (jsonObj.get("JournalLines") != null && !jsonObj.get("JournalLines").isJsonNull()) {
        JsonArray jsonArrayjournalLines = jsonObj.getAsJsonArray("JournalLines");
        if (jsonArrayjournalLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("JournalLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `JournalLines` to be an array in the JSON string but got `%s`", jsonObj.get("JournalLines").toString()));
          }

          // validate the optional field `JournalLines` (array)
          for (int i = 0; i < jsonArrayjournalLines.size(); i++) {
            JournalLine.validateJsonElement(jsonArrayjournalLines.get(i));
          };
        }
      }
      if ((jsonObj.get("Reference") != null && !jsonObj.get("Reference").isJsonNull()) && !jsonObj.get("Reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Reference").toString()));
      }
      if ((jsonObj.get("SourceID") != null && !jsonObj.get("SourceID").isJsonNull()) && !jsonObj.get("SourceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceID").toString()));
      }
      if ((jsonObj.get("SourceType") != null && !jsonObj.get("SourceType").isJsonNull()) && !jsonObj.get("SourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceType").toString()));
      }
      // validate the optional field `SourceType`
      if (jsonObj.get("SourceType") != null && !jsonObj.get("SourceType").isJsonNull()) {
        SourceTypeEnum.validateJsonElement(jsonObj.get("SourceType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Journal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Journal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Journal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Journal.class));

       return (TypeAdapter<T>) new TypeAdapter<Journal>() {
           @Override
           public void write(JsonWriter out, Journal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Journal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Journal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Journal
   * @throws IOException if the JSON string is invalid with respect to Journal
   */
  public static Journal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Journal.class);
  }

  /**
   * Convert an instance of Journal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

