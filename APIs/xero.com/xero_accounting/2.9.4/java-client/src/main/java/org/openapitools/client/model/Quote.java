/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.CurrencyCode;
import org.openapitools.client.model.LineItem;
import org.openapitools.client.model.QuoteLineAmountTypes;
import org.openapitools.client.model.QuoteStatusCodes;
import org.openapitools.client.model.ValidationError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Quote
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Quote {
  public static final String SERIALIZED_NAME_BRANDING_THEME_I_D = "BrandingThemeID";
  @SerializedName(SERIALIZED_NAME_BRANDING_THEME_I_D)
  private UUID brandingThemeID;

  public static final String SERIALIZED_NAME_CONTACT = "Contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private Contact contact;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private CurrencyCode currencyCode;

  public static final String SERIALIZED_NAME_CURRENCY_RATE = "CurrencyRate";
  @SerializedName(SERIALIZED_NAME_CURRENCY_RATE)
  private Double currencyRate;

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DATE_STRING = "DateString";
  @SerializedName(SERIALIZED_NAME_DATE_STRING)
  private String dateString;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "ExpiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private String expiryDate;

  public static final String SERIALIZED_NAME_EXPIRY_DATE_STRING = "ExpiryDateString";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE_STRING)
  private String expiryDateString;

  public static final String SERIALIZED_NAME_LINE_AMOUNT_TYPES = "LineAmountTypes";
  @SerializedName(SERIALIZED_NAME_LINE_AMOUNT_TYPES)
  private QuoteLineAmountTypes lineAmountTypes;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "LineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<LineItem> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUOTE_I_D = "QuoteID";
  @SerializedName(SERIALIZED_NAME_QUOTE_I_D)
  private UUID quoteID;

  public static final String SERIALIZED_NAME_QUOTE_NUMBER = "QuoteNumber";
  @SerializedName(SERIALIZED_NAME_QUOTE_NUMBER)
  private String quoteNumber;

  public static final String SERIALIZED_NAME_REFERENCE = "Reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private QuoteStatusCodes status;

  public static final String SERIALIZED_NAME_STATUS_ATTRIBUTE_STRING = "StatusAttributeString";
  @SerializedName(SERIALIZED_NAME_STATUS_ATTRIBUTE_STRING)
  private String statusAttributeString;

  public static final String SERIALIZED_NAME_SUB_TOTAL = "SubTotal";
  @SerializedName(SERIALIZED_NAME_SUB_TOTAL)
  private Double subTotal;

  public static final String SERIALIZED_NAME_SUMMARY = "Summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_TERMS = "Terms";
  @SerializedName(SERIALIZED_NAME_TERMS)
  private String terms;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOTAL = "Total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public static final String SERIALIZED_NAME_TOTAL_DISCOUNT = "TotalDiscount";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISCOUNT)
  private Double totalDiscount;

  public static final String SERIALIZED_NAME_TOTAL_TAX = "TotalTax";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX)
  private Double totalTax;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "ValidationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<ValidationError> validationErrors = new ArrayList<>();

  public Quote() {
  }

  public Quote(
     Double subTotal, 
     Double total, 
     Double totalDiscount, 
     Double totalTax, 
     String updatedDateUTC
  ) {
    this();
    this.subTotal = subTotal;
    this.total = total;
    this.totalDiscount = totalDiscount;
    this.totalTax = totalTax;
    this.updatedDateUTC = updatedDateUTC;
  }

  public Quote brandingThemeID(UUID brandingThemeID) {
    this.brandingThemeID = brandingThemeID;
    return this;
  }

  /**
   * See BrandingThemes
   * @return brandingThemeID
   */
  @javax.annotation.Nullable
  public UUID getBrandingThemeID() {
    return brandingThemeID;
  }

  public void setBrandingThemeID(UUID brandingThemeID) {
    this.brandingThemeID = brandingThemeID;
  }


  public Quote contact(Contact contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nullable
  public Contact getContact() {
    return contact;
  }

  public void setContact(Contact contact) {
    this.contact = contact;
  }


  public Quote currencyCode(CurrencyCode currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public CurrencyCode getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(CurrencyCode currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Quote currencyRate(Double currencyRate) {
    this.currencyRate = currencyRate;
    return this;
  }

  /**
   * The currency rate for a multicurrency quote
   * @return currencyRate
   */
  @javax.annotation.Nullable
  public Double getCurrencyRate() {
    return currencyRate;
  }

  public void setCurrencyRate(Double currencyRate) {
    this.currencyRate = currencyRate;
  }


  public Quote date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Date quote was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public Quote dateString(String dateString) {
    this.dateString = dateString;
    return this;
  }

  /**
   * Date the quote was issued (YYYY-MM-DD)
   * @return dateString
   */
  @javax.annotation.Nullable
  public String getDateString() {
    return dateString;
  }

  public void setDateString(String dateString) {
    this.dateString = dateString;
  }


  public Quote expiryDate(String expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

  /**
   * Date the quote expires – YYYY-MM-DD.
   * @return expiryDate
   */
  @javax.annotation.Nullable
  public String getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(String expiryDate) {
    this.expiryDate = expiryDate;
  }


  public Quote expiryDateString(String expiryDateString) {
    this.expiryDateString = expiryDateString;
    return this;
  }

  /**
   * Date the quote expires – YYYY-MM-DD.
   * @return expiryDateString
   */
  @javax.annotation.Nullable
  public String getExpiryDateString() {
    return expiryDateString;
  }

  public void setExpiryDateString(String expiryDateString) {
    this.expiryDateString = expiryDateString;
  }


  public Quote lineAmountTypes(QuoteLineAmountTypes lineAmountTypes) {
    this.lineAmountTypes = lineAmountTypes;
    return this;
  }

  /**
   * Get lineAmountTypes
   * @return lineAmountTypes
   */
  @javax.annotation.Nullable
  public QuoteLineAmountTypes getLineAmountTypes() {
    return lineAmountTypes;
  }

  public void setLineAmountTypes(QuoteLineAmountTypes lineAmountTypes) {
    this.lineAmountTypes = lineAmountTypes;
  }


  public Quote lineItems(List<LineItem> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public Quote addLineItemsItem(LineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * See LineItems
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<LineItem> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<LineItem> lineItems) {
    this.lineItems = lineItems;
  }


  public Quote quoteID(UUID quoteID) {
    this.quoteID = quoteID;
    return this;
  }

  /**
   * QuoteID GUID is automatically generated and is returned after create or GET.
   * @return quoteID
   */
  @javax.annotation.Nullable
  public UUID getQuoteID() {
    return quoteID;
  }

  public void setQuoteID(UUID quoteID) {
    this.quoteID = quoteID;
  }


  public Quote quoteNumber(String quoteNumber) {
    this.quoteNumber = quoteNumber;
    return this;
  }

  /**
   * Unique alpha numeric code identifying a quote (Max Length &#x3D; 255)
   * @return quoteNumber
   */
  @javax.annotation.Nullable
  public String getQuoteNumber() {
    return quoteNumber;
  }

  public void setQuoteNumber(String quoteNumber) {
    this.quoteNumber = quoteNumber;
  }


  public Quote reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Additional reference number
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public Quote status(QuoteStatusCodes status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public QuoteStatusCodes getStatus() {
    return status;
  }

  public void setStatus(QuoteStatusCodes status) {
    this.status = status;
  }


  public Quote statusAttributeString(String statusAttributeString) {
    this.statusAttributeString = statusAttributeString;
    return this;
  }

  /**
   * A string to indicate if a invoice status
   * @return statusAttributeString
   */
  @javax.annotation.Nullable
  public String getStatusAttributeString() {
    return statusAttributeString;
  }

  public void setStatusAttributeString(String statusAttributeString) {
    this.statusAttributeString = statusAttributeString;
  }


  /**
   * Total of quote excluding taxes.
   * @return subTotal
   */
  @javax.annotation.Nullable
  public Double getSubTotal() {
    return subTotal;
  }



  public Quote summary(String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Summary text for the quote
   * @return summary
   */
  @javax.annotation.Nullable
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }


  public Quote terms(String terms) {
    this.terms = terms;
    return this;
  }

  /**
   * Terms of the quote
   * @return terms
   */
  @javax.annotation.Nullable
  public String getTerms() {
    return terms;
  }

  public void setTerms(String terms) {
    this.terms = terms;
  }


  public Quote title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title text for the quote
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  /**
   * Total of Quote tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts
   * @return total
   */
  @javax.annotation.Nullable
  public Double getTotal() {
    return total;
  }



  /**
   * Total of discounts applied on the quote line items
   * @return totalDiscount
   */
  @javax.annotation.Nullable
  public Double getTotalDiscount() {
    return totalDiscount;
  }



  /**
   * Total tax on quote
   * @return totalTax
   */
  @javax.annotation.Nullable
  public Double getTotalTax() {
    return totalTax;
  }



  /**
   * Last modified date UTC format
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }



  public Quote validationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public Quote addValidationErrorsItem(ValidationError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Displays array of validation error messages from the API
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<ValidationError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Quote quote = (Quote) o;
    return Objects.equals(this.brandingThemeID, quote.brandingThemeID) &&
        Objects.equals(this.contact, quote.contact) &&
        Objects.equals(this.currencyCode, quote.currencyCode) &&
        Objects.equals(this.currencyRate, quote.currencyRate) &&
        Objects.equals(this.date, quote.date) &&
        Objects.equals(this.dateString, quote.dateString) &&
        Objects.equals(this.expiryDate, quote.expiryDate) &&
        Objects.equals(this.expiryDateString, quote.expiryDateString) &&
        Objects.equals(this.lineAmountTypes, quote.lineAmountTypes) &&
        Objects.equals(this.lineItems, quote.lineItems) &&
        Objects.equals(this.quoteID, quote.quoteID) &&
        Objects.equals(this.quoteNumber, quote.quoteNumber) &&
        Objects.equals(this.reference, quote.reference) &&
        Objects.equals(this.status, quote.status) &&
        Objects.equals(this.statusAttributeString, quote.statusAttributeString) &&
        Objects.equals(this.subTotal, quote.subTotal) &&
        Objects.equals(this.summary, quote.summary) &&
        Objects.equals(this.terms, quote.terms) &&
        Objects.equals(this.title, quote.title) &&
        Objects.equals(this.total, quote.total) &&
        Objects.equals(this.totalDiscount, quote.totalDiscount) &&
        Objects.equals(this.totalTax, quote.totalTax) &&
        Objects.equals(this.updatedDateUTC, quote.updatedDateUTC) &&
        Objects.equals(this.validationErrors, quote.validationErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brandingThemeID, contact, currencyCode, currencyRate, date, dateString, expiryDate, expiryDateString, lineAmountTypes, lineItems, quoteID, quoteNumber, reference, status, statusAttributeString, subTotal, summary, terms, title, total, totalDiscount, totalTax, updatedDateUTC, validationErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Quote {\n");
    sb.append("    brandingThemeID: ").append(toIndentedString(brandingThemeID)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currencyRate: ").append(toIndentedString(currencyRate)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    dateString: ").append(toIndentedString(dateString)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    expiryDateString: ").append(toIndentedString(expiryDateString)).append("\n");
    sb.append("    lineAmountTypes: ").append(toIndentedString(lineAmountTypes)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    quoteID: ").append(toIndentedString(quoteID)).append("\n");
    sb.append("    quoteNumber: ").append(toIndentedString(quoteNumber)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusAttributeString: ").append(toIndentedString(statusAttributeString)).append("\n");
    sb.append("    subTotal: ").append(toIndentedString(subTotal)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totalDiscount: ").append(toIndentedString(totalDiscount)).append("\n");
    sb.append("    totalTax: ").append(toIndentedString(totalTax)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BrandingThemeID");
    openapiFields.add("Contact");
    openapiFields.add("CurrencyCode");
    openapiFields.add("CurrencyRate");
    openapiFields.add("Date");
    openapiFields.add("DateString");
    openapiFields.add("ExpiryDate");
    openapiFields.add("ExpiryDateString");
    openapiFields.add("LineAmountTypes");
    openapiFields.add("LineItems");
    openapiFields.add("QuoteID");
    openapiFields.add("QuoteNumber");
    openapiFields.add("Reference");
    openapiFields.add("Status");
    openapiFields.add("StatusAttributeString");
    openapiFields.add("SubTotal");
    openapiFields.add("Summary");
    openapiFields.add("Terms");
    openapiFields.add("Title");
    openapiFields.add("Total");
    openapiFields.add("TotalDiscount");
    openapiFields.add("TotalTax");
    openapiFields.add("UpdatedDateUTC");
    openapiFields.add("ValidationErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Quote
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Quote.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Quote is not found in the empty JSON string", Quote.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Quote.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Quote` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BrandingThemeID") != null && !jsonObj.get("BrandingThemeID").isJsonNull()) && !jsonObj.get("BrandingThemeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BrandingThemeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BrandingThemeID").toString()));
      }
      if ((jsonObj.get("Contact") != null && !jsonObj.get("Contact").isJsonNull()) && !jsonObj.get("Contact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Contact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Contact").toString()));
      }
      // validate the optional field `Contact`
      if (jsonObj.get("Contact") != null && !jsonObj.get("Contact").isJsonNull()) {
        Contact.validateJsonElement(jsonObj.get("Contact"));
      }
      if ((jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) && !jsonObj.get("CurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencyCode").toString()));
      }
      // validate the optional field `CurrencyCode`
      if (jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) {
        CurrencyCode.validateJsonElement(jsonObj.get("CurrencyCode"));
      }
      if ((jsonObj.get("Date") != null && !jsonObj.get("Date").isJsonNull()) && !jsonObj.get("Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Date").toString()));
      }
      if ((jsonObj.get("DateString") != null && !jsonObj.get("DateString").isJsonNull()) && !jsonObj.get("DateString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateString").toString()));
      }
      if ((jsonObj.get("ExpiryDate") != null && !jsonObj.get("ExpiryDate").isJsonNull()) && !jsonObj.get("ExpiryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExpiryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExpiryDate").toString()));
      }
      if ((jsonObj.get("ExpiryDateString") != null && !jsonObj.get("ExpiryDateString").isJsonNull()) && !jsonObj.get("ExpiryDateString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExpiryDateString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExpiryDateString").toString()));
      }
      if ((jsonObj.get("LineAmountTypes") != null && !jsonObj.get("LineAmountTypes").isJsonNull()) && !jsonObj.get("LineAmountTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LineAmountTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LineAmountTypes").toString()));
      }
      // validate the optional field `LineAmountTypes`
      if (jsonObj.get("LineAmountTypes") != null && !jsonObj.get("LineAmountTypes").isJsonNull()) {
        QuoteLineAmountTypes.validateJsonElement(jsonObj.get("LineAmountTypes"));
      }
      if (jsonObj.get("LineItems") != null && !jsonObj.get("LineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("LineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LineItems` to be an array in the JSON string but got `%s`", jsonObj.get("LineItems").toString()));
          }

          // validate the optional field `LineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            LineItem.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      if ((jsonObj.get("QuoteID") != null && !jsonObj.get("QuoteID").isJsonNull()) && !jsonObj.get("QuoteID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QuoteID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QuoteID").toString()));
      }
      if ((jsonObj.get("QuoteNumber") != null && !jsonObj.get("QuoteNumber").isJsonNull()) && !jsonObj.get("QuoteNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QuoteNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QuoteNumber").toString()));
      }
      if ((jsonObj.get("Reference") != null && !jsonObj.get("Reference").isJsonNull()) && !jsonObj.get("Reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Reference").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        QuoteStatusCodes.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("StatusAttributeString") != null && !jsonObj.get("StatusAttributeString").isJsonNull()) && !jsonObj.get("StatusAttributeString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatusAttributeString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusAttributeString").toString()));
      }
      if ((jsonObj.get("Summary") != null && !jsonObj.get("Summary").isJsonNull()) && !jsonObj.get("Summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Summary").toString()));
      }
      if ((jsonObj.get("Terms") != null && !jsonObj.get("Terms").isJsonNull()) && !jsonObj.get("Terms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Terms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Terms").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
      if (jsonObj.get("ValidationErrors") != null && !jsonObj.get("ValidationErrors").isJsonNull()) {
        JsonArray jsonArrayvalidationErrors = jsonObj.getAsJsonArray("ValidationErrors");
        if (jsonArrayvalidationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ValidationErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ValidationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("ValidationErrors").toString()));
          }

          // validate the optional field `ValidationErrors` (array)
          for (int i = 0; i < jsonArrayvalidationErrors.size(); i++) {
            ValidationError.validateJsonElement(jsonArrayvalidationErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Quote.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Quote' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Quote> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Quote.class));

       return (TypeAdapter<T>) new TypeAdapter<Quote>() {
           @Override
           public void write(JsonWriter out, Quote value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Quote read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Quote given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Quote
   * @throws IOException if the JSON string is invalid with respect to Quote
   */
  public static Quote fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Quote.class);
  }

  /**
   * Convert an instance of Quote to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

