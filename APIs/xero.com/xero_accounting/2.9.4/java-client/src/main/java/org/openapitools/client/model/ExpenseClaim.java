/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Payment;
import org.openapitools.client.model.Receipt;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExpenseClaim
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExpenseClaim {
  public static final String SERIALIZED_NAME_AMOUNT_DUE = "AmountDue";
  @SerializedName(SERIALIZED_NAME_AMOUNT_DUE)
  private Double amountDue;

  public static final String SERIALIZED_NAME_AMOUNT_PAID = "AmountPaid";
  @SerializedName(SERIALIZED_NAME_AMOUNT_PAID)
  private Double amountPaid;

  public static final String SERIALIZED_NAME_EXPENSE_CLAIM_I_D = "ExpenseClaimID";
  @SerializedName(SERIALIZED_NAME_EXPENSE_CLAIM_I_D)
  private UUID expenseClaimID;

  public static final String SERIALIZED_NAME_PAYMENT_DUE_DATE = "PaymentDueDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DUE_DATE)
  private String paymentDueDate;

  public static final String SERIALIZED_NAME_PAYMENTS = "Payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  private List<Payment> payments = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECEIPT_I_D = "ReceiptID";
  @SerializedName(SERIALIZED_NAME_RECEIPT_I_D)
  private UUID receiptID;

  public static final String SERIALIZED_NAME_RECEIPTS = "Receipts";
  @SerializedName(SERIALIZED_NAME_RECEIPTS)
  private List<Receipt> receipts = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPORTING_DATE = "ReportingDate";
  @SerializedName(SERIALIZED_NAME_REPORTING_DATE)
  private String reportingDate;

  /**
   * Current status of an expense claim – see status types
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUBMITTED("SUBMITTED"),
    
    AUTHORISED("AUTHORISED"),
    
    PAID("PAID"),
    
    VOIDED("VOIDED"),
    
    DELETED("DELETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TOTAL = "Total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public static final String SERIALIZED_NAME_USER = "User";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public ExpenseClaim() {
  }

  public ExpenseClaim(
     Double amountDue, 
     Double amountPaid, 
     String paymentDueDate, 
     String reportingDate, 
     Double total, 
     String updatedDateUTC
  ) {
    this();
    this.amountDue = amountDue;
    this.amountPaid = amountPaid;
    this.paymentDueDate = paymentDueDate;
    this.reportingDate = reportingDate;
    this.total = total;
    this.updatedDateUTC = updatedDateUTC;
  }

  /**
   * The amount due to be paid for an expense claim
   * @return amountDue
   */
  @javax.annotation.Nullable
  public Double getAmountDue() {
    return amountDue;
  }



  /**
   * The amount still to pay for an expense claim
   * @return amountPaid
   */
  @javax.annotation.Nullable
  public Double getAmountPaid() {
    return amountPaid;
  }



  public ExpenseClaim expenseClaimID(UUID expenseClaimID) {
    this.expenseClaimID = expenseClaimID;
    return this;
  }

  /**
   * Xero generated unique identifier for an expense claim
   * @return expenseClaimID
   */
  @javax.annotation.Nullable
  public UUID getExpenseClaimID() {
    return expenseClaimID;
  }

  public void setExpenseClaimID(UUID expenseClaimID) {
    this.expenseClaimID = expenseClaimID;
  }


  /**
   * The date when the expense claim is due to be paid YYYY-MM-DD
   * @return paymentDueDate
   */
  @javax.annotation.Nullable
  public String getPaymentDueDate() {
    return paymentDueDate;
  }



  public ExpenseClaim payments(List<Payment> payments) {
    this.payments = payments;
    return this;
  }

  public ExpenseClaim addPaymentsItem(Payment paymentsItem) {
    if (this.payments == null) {
      this.payments = new ArrayList<>();
    }
    this.payments.add(paymentsItem);
    return this;
  }

  /**
   * See Payments
   * @return payments
   */
  @javax.annotation.Nullable
  public List<Payment> getPayments() {
    return payments;
  }

  public void setPayments(List<Payment> payments) {
    this.payments = payments;
  }


  public ExpenseClaim receiptID(UUID receiptID) {
    this.receiptID = receiptID;
    return this;
  }

  /**
   * The Xero identifier for the Receipt e.g. e59a2c7f-1306-4078-a0f3-73537afcbba9
   * @return receiptID
   */
  @javax.annotation.Nullable
  public UUID getReceiptID() {
    return receiptID;
  }

  public void setReceiptID(UUID receiptID) {
    this.receiptID = receiptID;
  }


  public ExpenseClaim receipts(List<Receipt> receipts) {
    this.receipts = receipts;
    return this;
  }

  public ExpenseClaim addReceiptsItem(Receipt receiptsItem) {
    if (this.receipts == null) {
      this.receipts = new ArrayList<>();
    }
    this.receipts.add(receiptsItem);
    return this;
  }

  /**
   * Get receipts
   * @return receipts
   */
  @javax.annotation.Nullable
  public List<Receipt> getReceipts() {
    return receipts;
  }

  public void setReceipts(List<Receipt> receipts) {
    this.receipts = receipts;
  }


  /**
   * The date the expense claim will be reported in Xero YYYY-MM-DD
   * @return reportingDate
   */
  @javax.annotation.Nullable
  public String getReportingDate() {
    return reportingDate;
  }



  public ExpenseClaim status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Current status of an expense claim – see status types
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  /**
   * The total of an expense claim being paid
   * @return total
   */
  @javax.annotation.Nullable
  public Double getTotal() {
    return total;
  }



  /**
   * Last modified date UTC format
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }



  public ExpenseClaim user(User user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpenseClaim expenseClaim = (ExpenseClaim) o;
    return Objects.equals(this.amountDue, expenseClaim.amountDue) &&
        Objects.equals(this.amountPaid, expenseClaim.amountPaid) &&
        Objects.equals(this.expenseClaimID, expenseClaim.expenseClaimID) &&
        Objects.equals(this.paymentDueDate, expenseClaim.paymentDueDate) &&
        Objects.equals(this.payments, expenseClaim.payments) &&
        Objects.equals(this.receiptID, expenseClaim.receiptID) &&
        Objects.equals(this.receipts, expenseClaim.receipts) &&
        Objects.equals(this.reportingDate, expenseClaim.reportingDate) &&
        Objects.equals(this.status, expenseClaim.status) &&
        Objects.equals(this.total, expenseClaim.total) &&
        Objects.equals(this.updatedDateUTC, expenseClaim.updatedDateUTC) &&
        Objects.equals(this.user, expenseClaim.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountDue, amountPaid, expenseClaimID, paymentDueDate, payments, receiptID, receipts, reportingDate, status, total, updatedDateUTC, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpenseClaim {\n");
    sb.append("    amountDue: ").append(toIndentedString(amountDue)).append("\n");
    sb.append("    amountPaid: ").append(toIndentedString(amountPaid)).append("\n");
    sb.append("    expenseClaimID: ").append(toIndentedString(expenseClaimID)).append("\n");
    sb.append("    paymentDueDate: ").append(toIndentedString(paymentDueDate)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    receiptID: ").append(toIndentedString(receiptID)).append("\n");
    sb.append("    receipts: ").append(toIndentedString(receipts)).append("\n");
    sb.append("    reportingDate: ").append(toIndentedString(reportingDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AmountDue");
    openapiFields.add("AmountPaid");
    openapiFields.add("ExpenseClaimID");
    openapiFields.add("PaymentDueDate");
    openapiFields.add("Payments");
    openapiFields.add("ReceiptID");
    openapiFields.add("Receipts");
    openapiFields.add("ReportingDate");
    openapiFields.add("Status");
    openapiFields.add("Total");
    openapiFields.add("UpdatedDateUTC");
    openapiFields.add("User");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpenseClaim
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpenseClaim.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpenseClaim is not found in the empty JSON string", ExpenseClaim.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpenseClaim.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpenseClaim` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ExpenseClaimID") != null && !jsonObj.get("ExpenseClaimID").isJsonNull()) && !jsonObj.get("ExpenseClaimID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExpenseClaimID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExpenseClaimID").toString()));
      }
      if ((jsonObj.get("PaymentDueDate") != null && !jsonObj.get("PaymentDueDate").isJsonNull()) && !jsonObj.get("PaymentDueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentDueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentDueDate").toString()));
      }
      if (jsonObj.get("Payments") != null && !jsonObj.get("Payments").isJsonNull()) {
        JsonArray jsonArraypayments = jsonObj.getAsJsonArray("Payments");
        if (jsonArraypayments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Payments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Payments` to be an array in the JSON string but got `%s`", jsonObj.get("Payments").toString()));
          }

          // validate the optional field `Payments` (array)
          for (int i = 0; i < jsonArraypayments.size(); i++) {
            Payment.validateJsonElement(jsonArraypayments.get(i));
          };
        }
      }
      if ((jsonObj.get("ReceiptID") != null && !jsonObj.get("ReceiptID").isJsonNull()) && !jsonObj.get("ReceiptID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReceiptID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReceiptID").toString()));
      }
      if (jsonObj.get("Receipts") != null && !jsonObj.get("Receipts").isJsonNull()) {
        JsonArray jsonArrayreceipts = jsonObj.getAsJsonArray("Receipts");
        if (jsonArrayreceipts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Receipts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Receipts` to be an array in the JSON string but got `%s`", jsonObj.get("Receipts").toString()));
          }

          // validate the optional field `Receipts` (array)
          for (int i = 0; i < jsonArrayreceipts.size(); i++) {
            Receipt.validateJsonElement(jsonArrayreceipts.get(i));
          };
        }
      }
      if ((jsonObj.get("ReportingDate") != null && !jsonObj.get("ReportingDate").isJsonNull()) && !jsonObj.get("ReportingDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportingDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportingDate").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
      // validate the optional field `User`
      if (jsonObj.get("User") != null && !jsonObj.get("User").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("User"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpenseClaim.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpenseClaim' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpenseClaim> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpenseClaim.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpenseClaim>() {
           @Override
           public void write(JsonWriter out, ExpenseClaim value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpenseClaim read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpenseClaim given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpenseClaim
   * @throws IOException if the JSON string is invalid with respect to ExpenseClaim
   */
  public static ExpenseClaim fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpenseClaim.class);
  }

  /**
   * Convert an instance of ExpenseClaim to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

