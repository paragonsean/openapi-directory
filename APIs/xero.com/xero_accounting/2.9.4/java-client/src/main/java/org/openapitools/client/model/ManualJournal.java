/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.LineAmountTypes;
import org.openapitools.client.model.ManualJournalLine;
import org.openapitools.client.model.ValidationError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ManualJournal
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManualJournal {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "Attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<Attachment> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_HAS_ATTACHMENTS = "HasAttachments";
  @SerializedName(SERIALIZED_NAME_HAS_ATTACHMENTS)
  private Boolean hasAttachments = false;

  public static final String SERIALIZED_NAME_JOURNAL_LINES = "JournalLines";
  @SerializedName(SERIALIZED_NAME_JOURNAL_LINES)
  private List<ManualJournalLine> journalLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINE_AMOUNT_TYPES = "LineAmountTypes";
  @SerializedName(SERIALIZED_NAME_LINE_AMOUNT_TYPES)
  private LineAmountTypes lineAmountTypes;

  public static final String SERIALIZED_NAME_MANUAL_JOURNAL_I_D = "ManualJournalID";
  @SerializedName(SERIALIZED_NAME_MANUAL_JOURNAL_I_D)
  private UUID manualJournalID;

  public static final String SERIALIZED_NAME_NARRATION = "Narration";
  @SerializedName(SERIALIZED_NAME_NARRATION)
  private String narration;

  public static final String SERIALIZED_NAME_SHOW_ON_CASH_BASIS_REPORTS = "ShowOnCashBasisReports";
  @SerializedName(SERIALIZED_NAME_SHOW_ON_CASH_BASIS_REPORTS)
  private Boolean showOnCashBasisReports;

  /**
   * See Manual Journal Status Codes
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DRAFT("DRAFT"),
    
    POSTED("POSTED"),
    
    DELETED("DELETED"),
    
    VOIDED("VOIDED"),
    
    ARCHIVED("ARCHIVED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STATUS_ATTRIBUTE_STRING = "StatusAttributeString";
  @SerializedName(SERIALIZED_NAME_STATUS_ATTRIBUTE_STRING)
  private String statusAttributeString;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public static final String SERIALIZED_NAME_URL = "Url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "ValidationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<ValidationError> validationErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_WARNINGS = "Warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<ValidationError> warnings = new ArrayList<>();

  public ManualJournal() {
  }

  public ManualJournal(
     Boolean hasAttachments, 
     String updatedDateUTC
  ) {
    this();
    this.hasAttachments = hasAttachments;
    this.updatedDateUTC = updatedDateUTC;
  }

  public ManualJournal attachments(List<Attachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public ManualJournal addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Displays array of attachments from the API
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<Attachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<Attachment> attachments) {
    this.attachments = attachments;
  }


  public ManualJournal date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Date journal was posted – YYYY-MM-DD
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  /**
   * Boolean to indicate if a manual journal has an attachment
   * @return hasAttachments
   */
  @javax.annotation.Nullable
  public Boolean getHasAttachments() {
    return hasAttachments;
  }



  public ManualJournal journalLines(List<ManualJournalLine> journalLines) {
    this.journalLines = journalLines;
    return this;
  }

  public ManualJournal addJournalLinesItem(ManualJournalLine journalLinesItem) {
    if (this.journalLines == null) {
      this.journalLines = new ArrayList<>();
    }
    this.journalLines.add(journalLinesItem);
    return this;
  }

  /**
   * See JournalLines
   * @return journalLines
   */
  @javax.annotation.Nullable
  public List<ManualJournalLine> getJournalLines() {
    return journalLines;
  }

  public void setJournalLines(List<ManualJournalLine> journalLines) {
    this.journalLines = journalLines;
  }


  public ManualJournal lineAmountTypes(LineAmountTypes lineAmountTypes) {
    this.lineAmountTypes = lineAmountTypes;
    return this;
  }

  /**
   * Get lineAmountTypes
   * @return lineAmountTypes
   */
  @javax.annotation.Nullable
  public LineAmountTypes getLineAmountTypes() {
    return lineAmountTypes;
  }

  public void setLineAmountTypes(LineAmountTypes lineAmountTypes) {
    this.lineAmountTypes = lineAmountTypes;
  }


  public ManualJournal manualJournalID(UUID manualJournalID) {
    this.manualJournalID = manualJournalID;
    return this;
  }

  /**
   * The Xero identifier for a Manual Journal
   * @return manualJournalID
   */
  @javax.annotation.Nullable
  public UUID getManualJournalID() {
    return manualJournalID;
  }

  public void setManualJournalID(UUID manualJournalID) {
    this.manualJournalID = manualJournalID;
  }


  public ManualJournal narration(String narration) {
    this.narration = narration;
    return this;
  }

  /**
   * Description of journal being posted
   * @return narration
   */
  @javax.annotation.Nonnull
  public String getNarration() {
    return narration;
  }

  public void setNarration(String narration) {
    this.narration = narration;
  }


  public ManualJournal showOnCashBasisReports(Boolean showOnCashBasisReports) {
    this.showOnCashBasisReports = showOnCashBasisReports;
    return this;
  }

  /**
   * Boolean – default is true if not specified
   * @return showOnCashBasisReports
   */
  @javax.annotation.Nullable
  public Boolean getShowOnCashBasisReports() {
    return showOnCashBasisReports;
  }

  public void setShowOnCashBasisReports(Boolean showOnCashBasisReports) {
    this.showOnCashBasisReports = showOnCashBasisReports;
  }


  public ManualJournal status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * See Manual Journal Status Codes
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ManualJournal statusAttributeString(String statusAttributeString) {
    this.statusAttributeString = statusAttributeString;
    return this;
  }

  /**
   * A string to indicate if a invoice status
   * @return statusAttributeString
   */
  @javax.annotation.Nullable
  public String getStatusAttributeString() {
    return statusAttributeString;
  }

  public void setStatusAttributeString(String statusAttributeString) {
    this.statusAttributeString = statusAttributeString;
  }


  /**
   * Last modified date UTC format
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }



  public ManualJournal url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Url link to a source document – shown as “Go to [appName]” in the Xero app
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public ManualJournal validationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public ManualJournal addValidationErrorsItem(ValidationError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Displays array of validation error messages from the API
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<ValidationError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }


  public ManualJournal warnings(List<ValidationError> warnings) {
    this.warnings = warnings;
    return this;
  }

  public ManualJournal addWarningsItem(ValidationError warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * Displays array of warning messages from the API
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<ValidationError> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<ValidationError> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManualJournal manualJournal = (ManualJournal) o;
    return Objects.equals(this.attachments, manualJournal.attachments) &&
        Objects.equals(this.date, manualJournal.date) &&
        Objects.equals(this.hasAttachments, manualJournal.hasAttachments) &&
        Objects.equals(this.journalLines, manualJournal.journalLines) &&
        Objects.equals(this.lineAmountTypes, manualJournal.lineAmountTypes) &&
        Objects.equals(this.manualJournalID, manualJournal.manualJournalID) &&
        Objects.equals(this.narration, manualJournal.narration) &&
        Objects.equals(this.showOnCashBasisReports, manualJournal.showOnCashBasisReports) &&
        Objects.equals(this.status, manualJournal.status) &&
        Objects.equals(this.statusAttributeString, manualJournal.statusAttributeString) &&
        Objects.equals(this.updatedDateUTC, manualJournal.updatedDateUTC) &&
        Objects.equals(this.url, manualJournal.url) &&
        Objects.equals(this.validationErrors, manualJournal.validationErrors) &&
        Objects.equals(this.warnings, manualJournal.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, date, hasAttachments, journalLines, lineAmountTypes, manualJournalID, narration, showOnCashBasisReports, status, statusAttributeString, updatedDateUTC, url, validationErrors, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManualJournal {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    hasAttachments: ").append(toIndentedString(hasAttachments)).append("\n");
    sb.append("    journalLines: ").append(toIndentedString(journalLines)).append("\n");
    sb.append("    lineAmountTypes: ").append(toIndentedString(lineAmountTypes)).append("\n");
    sb.append("    manualJournalID: ").append(toIndentedString(manualJournalID)).append("\n");
    sb.append("    narration: ").append(toIndentedString(narration)).append("\n");
    sb.append("    showOnCashBasisReports: ").append(toIndentedString(showOnCashBasisReports)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusAttributeString: ").append(toIndentedString(statusAttributeString)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attachments");
    openapiFields.add("Date");
    openapiFields.add("HasAttachments");
    openapiFields.add("JournalLines");
    openapiFields.add("LineAmountTypes");
    openapiFields.add("ManualJournalID");
    openapiFields.add("Narration");
    openapiFields.add("ShowOnCashBasisReports");
    openapiFields.add("Status");
    openapiFields.add("StatusAttributeString");
    openapiFields.add("UpdatedDateUTC");
    openapiFields.add("Url");
    openapiFields.add("ValidationErrors");
    openapiFields.add("Warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Narration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManualJournal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManualJournal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManualJournal is not found in the empty JSON string", ManualJournal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManualJournal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManualJournal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ManualJournal.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Attachments") != null && !jsonObj.get("Attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("Attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Attachments` to be an array in the JSON string but got `%s`", jsonObj.get("Attachments").toString()));
          }

          // validate the optional field `Attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            Attachment.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if ((jsonObj.get("Date") != null && !jsonObj.get("Date").isJsonNull()) && !jsonObj.get("Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Date").toString()));
      }
      if (jsonObj.get("JournalLines") != null && !jsonObj.get("JournalLines").isJsonNull()) {
        JsonArray jsonArrayjournalLines = jsonObj.getAsJsonArray("JournalLines");
        if (jsonArrayjournalLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("JournalLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `JournalLines` to be an array in the JSON string but got `%s`", jsonObj.get("JournalLines").toString()));
          }

          // validate the optional field `JournalLines` (array)
          for (int i = 0; i < jsonArrayjournalLines.size(); i++) {
            ManualJournalLine.validateJsonElement(jsonArrayjournalLines.get(i));
          };
        }
      }
      if ((jsonObj.get("LineAmountTypes") != null && !jsonObj.get("LineAmountTypes").isJsonNull()) && !jsonObj.get("LineAmountTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LineAmountTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LineAmountTypes").toString()));
      }
      // validate the optional field `LineAmountTypes`
      if (jsonObj.get("LineAmountTypes") != null && !jsonObj.get("LineAmountTypes").isJsonNull()) {
        LineAmountTypes.validateJsonElement(jsonObj.get("LineAmountTypes"));
      }
      if ((jsonObj.get("ManualJournalID") != null && !jsonObj.get("ManualJournalID").isJsonNull()) && !jsonObj.get("ManualJournalID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ManualJournalID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ManualJournalID").toString()));
      }
      if (!jsonObj.get("Narration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Narration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Narration").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("StatusAttributeString") != null && !jsonObj.get("StatusAttributeString").isJsonNull()) && !jsonObj.get("StatusAttributeString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatusAttributeString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusAttributeString").toString()));
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
      if ((jsonObj.get("Url") != null && !jsonObj.get("Url").isJsonNull()) && !jsonObj.get("Url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Url").toString()));
      }
      if (jsonObj.get("ValidationErrors") != null && !jsonObj.get("ValidationErrors").isJsonNull()) {
        JsonArray jsonArrayvalidationErrors = jsonObj.getAsJsonArray("ValidationErrors");
        if (jsonArrayvalidationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ValidationErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ValidationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("ValidationErrors").toString()));
          }

          // validate the optional field `ValidationErrors` (array)
          for (int i = 0; i < jsonArrayvalidationErrors.size(); i++) {
            ValidationError.validateJsonElement(jsonArrayvalidationErrors.get(i));
          };
        }
      }
      if (jsonObj.get("Warnings") != null && !jsonObj.get("Warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("Warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Warnings` to be an array in the JSON string but got `%s`", jsonObj.get("Warnings").toString()));
          }

          // validate the optional field `Warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            ValidationError.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManualJournal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManualJournal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManualJournal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManualJournal.class));

       return (TypeAdapter<T>) new TypeAdapter<ManualJournal>() {
           @Override
           public void write(JsonWriter out, ManualJournal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManualJournal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManualJournal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManualJournal
   * @throws IOException if the JSON string is invalid with respect to ManualJournal
   */
  public static ManualJournal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManualJournal.class);
  }

  /**
   * Convert an instance of ManualJournal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

