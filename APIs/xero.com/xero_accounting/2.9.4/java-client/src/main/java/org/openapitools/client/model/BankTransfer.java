/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.ValidationError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BankTransfer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BankTransfer {
  public static final String SERIALIZED_NAME_AMOUNT = "Amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_BANK_TRANSFER_I_D = "BankTransferID";
  @SerializedName(SERIALIZED_NAME_BANK_TRANSFER_I_D)
  private UUID bankTransferID;

  public static final String SERIALIZED_NAME_CREATED_DATE_U_T_C = "CreatedDateUTC";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_U_T_C)
  private String createdDateUTC;

  public static final String SERIALIZED_NAME_CURRENCY_RATE = "CurrencyRate";
  @SerializedName(SERIALIZED_NAME_CURRENCY_RATE)
  private Double currencyRate;

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_FROM_BANK_ACCOUNT = "FromBankAccount";
  @SerializedName(SERIALIZED_NAME_FROM_BANK_ACCOUNT)
  private Account fromBankAccount;

  public static final String SERIALIZED_NAME_FROM_BANK_TRANSACTION_I_D = "FromBankTransactionID";
  @SerializedName(SERIALIZED_NAME_FROM_BANK_TRANSACTION_I_D)
  private UUID fromBankTransactionID;

  public static final String SERIALIZED_NAME_HAS_ATTACHMENTS = "HasAttachments";
  @SerializedName(SERIALIZED_NAME_HAS_ATTACHMENTS)
  private Boolean hasAttachments = false;

  public static final String SERIALIZED_NAME_TO_BANK_ACCOUNT = "ToBankAccount";
  @SerializedName(SERIALIZED_NAME_TO_BANK_ACCOUNT)
  private Account toBankAccount;

  public static final String SERIALIZED_NAME_TO_BANK_TRANSACTION_I_D = "ToBankTransactionID";
  @SerializedName(SERIALIZED_NAME_TO_BANK_TRANSACTION_I_D)
  private UUID toBankTransactionID;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "ValidationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<ValidationError> validationErrors = new ArrayList<>();

  public BankTransfer() {
  }

  public BankTransfer(
     UUID bankTransferID, 
     String createdDateUTC, 
     Double currencyRate, 
     UUID fromBankTransactionID, 
     Boolean hasAttachments, 
     UUID toBankTransactionID
  ) {
    this();
    this.bankTransferID = bankTransferID;
    this.createdDateUTC = createdDateUTC;
    this.currencyRate = currencyRate;
    this.fromBankTransactionID = fromBankTransactionID;
    this.hasAttachments = hasAttachments;
    this.toBankTransactionID = toBankTransactionID;
  }

  public BankTransfer amount(Double amount) {
    this.amount = amount;
    return this;
  }

  /**
   * amount of the transaction
   * @return amount
   */
  @javax.annotation.Nonnull
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }


  /**
   * The identifier of the Bank Transfer
   * @return bankTransferID
   */
  @javax.annotation.Nullable
  public UUID getBankTransferID() {
    return bankTransferID;
  }



  /**
   * UTC timestamp of creation date of bank transfer
   * @return createdDateUTC
   */
  @javax.annotation.Nullable
  public String getCreatedDateUTC() {
    return createdDateUTC;
  }



  /**
   * The currency rate
   * @return currencyRate
   */
  @javax.annotation.Nullable
  public Double getCurrencyRate() {
    return currencyRate;
  }



  public BankTransfer date(String date) {
    this.date = date;
    return this;
  }

  /**
   * The date of the Transfer YYYY-MM-DD
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public BankTransfer fromBankAccount(Account fromBankAccount) {
    this.fromBankAccount = fromBankAccount;
    return this;
  }

  /**
   * Get fromBankAccount
   * @return fromBankAccount
   */
  @javax.annotation.Nonnull
  public Account getFromBankAccount() {
    return fromBankAccount;
  }

  public void setFromBankAccount(Account fromBankAccount) {
    this.fromBankAccount = fromBankAccount;
  }


  /**
   * The Bank Transaction ID for the source account
   * @return fromBankTransactionID
   */
  @javax.annotation.Nullable
  public UUID getFromBankTransactionID() {
    return fromBankTransactionID;
  }



  /**
   * Boolean to indicate if a Bank Transfer has an attachment
   * @return hasAttachments
   */
  @javax.annotation.Nullable
  public Boolean getHasAttachments() {
    return hasAttachments;
  }



  public BankTransfer toBankAccount(Account toBankAccount) {
    this.toBankAccount = toBankAccount;
    return this;
  }

  /**
   * Get toBankAccount
   * @return toBankAccount
   */
  @javax.annotation.Nonnull
  public Account getToBankAccount() {
    return toBankAccount;
  }

  public void setToBankAccount(Account toBankAccount) {
    this.toBankAccount = toBankAccount;
  }


  /**
   * The Bank Transaction ID for the destination account
   * @return toBankTransactionID
   */
  @javax.annotation.Nullable
  public UUID getToBankTransactionID() {
    return toBankTransactionID;
  }



  public BankTransfer validationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public BankTransfer addValidationErrorsItem(ValidationError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Displays array of validation error messages from the API
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<ValidationError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BankTransfer bankTransfer = (BankTransfer) o;
    return Objects.equals(this.amount, bankTransfer.amount) &&
        Objects.equals(this.bankTransferID, bankTransfer.bankTransferID) &&
        Objects.equals(this.createdDateUTC, bankTransfer.createdDateUTC) &&
        Objects.equals(this.currencyRate, bankTransfer.currencyRate) &&
        Objects.equals(this.date, bankTransfer.date) &&
        Objects.equals(this.fromBankAccount, bankTransfer.fromBankAccount) &&
        Objects.equals(this.fromBankTransactionID, bankTransfer.fromBankTransactionID) &&
        Objects.equals(this.hasAttachments, bankTransfer.hasAttachments) &&
        Objects.equals(this.toBankAccount, bankTransfer.toBankAccount) &&
        Objects.equals(this.toBankTransactionID, bankTransfer.toBankTransactionID) &&
        Objects.equals(this.validationErrors, bankTransfer.validationErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, bankTransferID, createdDateUTC, currencyRate, date, fromBankAccount, fromBankTransactionID, hasAttachments, toBankAccount, toBankTransactionID, validationErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BankTransfer {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    bankTransferID: ").append(toIndentedString(bankTransferID)).append("\n");
    sb.append("    createdDateUTC: ").append(toIndentedString(createdDateUTC)).append("\n");
    sb.append("    currencyRate: ").append(toIndentedString(currencyRate)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    fromBankAccount: ").append(toIndentedString(fromBankAccount)).append("\n");
    sb.append("    fromBankTransactionID: ").append(toIndentedString(fromBankTransactionID)).append("\n");
    sb.append("    hasAttachments: ").append(toIndentedString(hasAttachments)).append("\n");
    sb.append("    toBankAccount: ").append(toIndentedString(toBankAccount)).append("\n");
    sb.append("    toBankTransactionID: ").append(toIndentedString(toBankTransactionID)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Amount");
    openapiFields.add("BankTransferID");
    openapiFields.add("CreatedDateUTC");
    openapiFields.add("CurrencyRate");
    openapiFields.add("Date");
    openapiFields.add("FromBankAccount");
    openapiFields.add("FromBankTransactionID");
    openapiFields.add("HasAttachments");
    openapiFields.add("ToBankAccount");
    openapiFields.add("ToBankTransactionID");
    openapiFields.add("ValidationErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Amount");
    openapiRequiredFields.add("FromBankAccount");
    openapiRequiredFields.add("ToBankAccount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BankTransfer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BankTransfer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BankTransfer is not found in the empty JSON string", BankTransfer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BankTransfer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BankTransfer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BankTransfer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BankTransferID") != null && !jsonObj.get("BankTransferID").isJsonNull()) && !jsonObj.get("BankTransferID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BankTransferID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BankTransferID").toString()));
      }
      if ((jsonObj.get("CreatedDateUTC") != null && !jsonObj.get("CreatedDateUTC").isJsonNull()) && !jsonObj.get("CreatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CreatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CreatedDateUTC").toString()));
      }
      if ((jsonObj.get("Date") != null && !jsonObj.get("Date").isJsonNull()) && !jsonObj.get("Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Date").toString()));
      }
      // validate the required field `FromBankAccount`
      Account.validateJsonElement(jsonObj.get("FromBankAccount"));
      if ((jsonObj.get("FromBankTransactionID") != null && !jsonObj.get("FromBankTransactionID").isJsonNull()) && !jsonObj.get("FromBankTransactionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FromBankTransactionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FromBankTransactionID").toString()));
      }
      // validate the required field `ToBankAccount`
      Account.validateJsonElement(jsonObj.get("ToBankAccount"));
      if ((jsonObj.get("ToBankTransactionID") != null && !jsonObj.get("ToBankTransactionID").isJsonNull()) && !jsonObj.get("ToBankTransactionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ToBankTransactionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ToBankTransactionID").toString()));
      }
      if (jsonObj.get("ValidationErrors") != null && !jsonObj.get("ValidationErrors").isJsonNull()) {
        JsonArray jsonArrayvalidationErrors = jsonObj.getAsJsonArray("ValidationErrors");
        if (jsonArrayvalidationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ValidationErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ValidationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("ValidationErrors").toString()));
          }

          // validate the optional field `ValidationErrors` (array)
          for (int i = 0; i < jsonArrayvalidationErrors.size(); i++) {
            ValidationError.validateJsonElement(jsonArrayvalidationErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BankTransfer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BankTransfer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BankTransfer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BankTransfer.class));

       return (TypeAdapter<T>) new TypeAdapter<BankTransfer>() {
           @Override
           public void write(JsonWriter out, BankTransfer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BankTransfer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BankTransfer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BankTransfer
   * @throws IOException if the JSON string is invalid with respect to BankTransfer
   */
  public static BankTransfer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BankTransfer.class);
  }

  /**
   * Convert an instance of BankTransfer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

