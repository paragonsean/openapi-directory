/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ValidationError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentService
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentService {
  public static final String SERIALIZED_NAME_PAY_NOW_TEXT = "PayNowText";
  @SerializedName(SERIALIZED_NAME_PAY_NOW_TEXT)
  private String payNowText;

  public static final String SERIALIZED_NAME_PAYMENT_SERVICE_I_D = "PaymentServiceID";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SERVICE_I_D)
  private UUID paymentServiceID;

  public static final String SERIALIZED_NAME_PAYMENT_SERVICE_NAME = "PaymentServiceName";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SERVICE_NAME)
  private String paymentServiceName;

  public static final String SERIALIZED_NAME_PAYMENT_SERVICE_TYPE = "PaymentServiceType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SERVICE_TYPE)
  private String paymentServiceType;

  public static final String SERIALIZED_NAME_PAYMENT_SERVICE_URL = "PaymentServiceUrl";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SERVICE_URL)
  private String paymentServiceUrl;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "ValidationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<ValidationError> validationErrors = new ArrayList<>();

  public PaymentService() {
  }

  public PaymentService payNowText(String payNowText) {
    this.payNowText = payNowText;
    return this;
  }

  /**
   * The text displayed on the Pay Now button in Xero Online Invoicing. If this is not set it will default to Pay by credit card
   * @return payNowText
   */
  @javax.annotation.Nullable
  public String getPayNowText() {
    return payNowText;
  }

  public void setPayNowText(String payNowText) {
    this.payNowText = payNowText;
  }


  public PaymentService paymentServiceID(UUID paymentServiceID) {
    this.paymentServiceID = paymentServiceID;
    return this;
  }

  /**
   * Xero identifier
   * @return paymentServiceID
   */
  @javax.annotation.Nullable
  public UUID getPaymentServiceID() {
    return paymentServiceID;
  }

  public void setPaymentServiceID(UUID paymentServiceID) {
    this.paymentServiceID = paymentServiceID;
  }


  public PaymentService paymentServiceName(String paymentServiceName) {
    this.paymentServiceName = paymentServiceName;
    return this;
  }

  /**
   * Name of payment service
   * @return paymentServiceName
   */
  @javax.annotation.Nullable
  public String getPaymentServiceName() {
    return paymentServiceName;
  }

  public void setPaymentServiceName(String paymentServiceName) {
    this.paymentServiceName = paymentServiceName;
  }


  public PaymentService paymentServiceType(String paymentServiceType) {
    this.paymentServiceType = paymentServiceType;
    return this;
  }

  /**
   * This will always be CUSTOM for payment services created via the API.
   * @return paymentServiceType
   */
  @javax.annotation.Nullable
  public String getPaymentServiceType() {
    return paymentServiceType;
  }

  public void setPaymentServiceType(String paymentServiceType) {
    this.paymentServiceType = paymentServiceType;
  }


  public PaymentService paymentServiceUrl(String paymentServiceUrl) {
    this.paymentServiceUrl = paymentServiceUrl;
    return this;
  }

  /**
   * The custom payment URL
   * @return paymentServiceUrl
   */
  @javax.annotation.Nullable
  public String getPaymentServiceUrl() {
    return paymentServiceUrl;
  }

  public void setPaymentServiceUrl(String paymentServiceUrl) {
    this.paymentServiceUrl = paymentServiceUrl;
  }


  public PaymentService validationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public PaymentService addValidationErrorsItem(ValidationError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Displays array of validation error messages from the API
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<ValidationError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentService paymentService = (PaymentService) o;
    return Objects.equals(this.payNowText, paymentService.payNowText) &&
        Objects.equals(this.paymentServiceID, paymentService.paymentServiceID) &&
        Objects.equals(this.paymentServiceName, paymentService.paymentServiceName) &&
        Objects.equals(this.paymentServiceType, paymentService.paymentServiceType) &&
        Objects.equals(this.paymentServiceUrl, paymentService.paymentServiceUrl) &&
        Objects.equals(this.validationErrors, paymentService.validationErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payNowText, paymentServiceID, paymentServiceName, paymentServiceType, paymentServiceUrl, validationErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentService {\n");
    sb.append("    payNowText: ").append(toIndentedString(payNowText)).append("\n");
    sb.append("    paymentServiceID: ").append(toIndentedString(paymentServiceID)).append("\n");
    sb.append("    paymentServiceName: ").append(toIndentedString(paymentServiceName)).append("\n");
    sb.append("    paymentServiceType: ").append(toIndentedString(paymentServiceType)).append("\n");
    sb.append("    paymentServiceUrl: ").append(toIndentedString(paymentServiceUrl)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PayNowText");
    openapiFields.add("PaymentServiceID");
    openapiFields.add("PaymentServiceName");
    openapiFields.add("PaymentServiceType");
    openapiFields.add("PaymentServiceUrl");
    openapiFields.add("ValidationErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentService
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentService.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentService is not found in the empty JSON string", PaymentService.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentService.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentService` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("PayNowText") != null && !jsonObj.get("PayNowText").isJsonNull()) && !jsonObj.get("PayNowText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayNowText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayNowText").toString()));
      }
      if ((jsonObj.get("PaymentServiceID") != null && !jsonObj.get("PaymentServiceID").isJsonNull()) && !jsonObj.get("PaymentServiceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentServiceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentServiceID").toString()));
      }
      if ((jsonObj.get("PaymentServiceName") != null && !jsonObj.get("PaymentServiceName").isJsonNull()) && !jsonObj.get("PaymentServiceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentServiceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentServiceName").toString()));
      }
      if ((jsonObj.get("PaymentServiceType") != null && !jsonObj.get("PaymentServiceType").isJsonNull()) && !jsonObj.get("PaymentServiceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentServiceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentServiceType").toString()));
      }
      if ((jsonObj.get("PaymentServiceUrl") != null && !jsonObj.get("PaymentServiceUrl").isJsonNull()) && !jsonObj.get("PaymentServiceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentServiceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentServiceUrl").toString()));
      }
      if (jsonObj.get("ValidationErrors") != null && !jsonObj.get("ValidationErrors").isJsonNull()) {
        JsonArray jsonArrayvalidationErrors = jsonObj.getAsJsonArray("ValidationErrors");
        if (jsonArrayvalidationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ValidationErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ValidationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("ValidationErrors").toString()));
          }

          // validate the optional field `ValidationErrors` (array)
          for (int i = 0; i < jsonArrayvalidationErrors.size(); i++) {
            ValidationError.validateJsonElement(jsonArrayvalidationErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentService.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentService' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentService> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentService.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentService>() {
           @Override
           public void write(JsonWriter out, PaymentService value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentService read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentService given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentService
   * @throws IOException if the JSON string is invalid with respect to PaymentService
   */
  public static PaymentService fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentService.class);
  }

  /**
   * Convert an instance of PaymentService to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

