/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Phone
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Phone {
  public static final String SERIALIZED_NAME_PHONE_AREA_CODE = "PhoneAreaCode";
  @SerializedName(SERIALIZED_NAME_PHONE_AREA_CODE)
  private String phoneAreaCode;

  public static final String SERIALIZED_NAME_PHONE_COUNTRY_CODE = "PhoneCountryCode";
  @SerializedName(SERIALIZED_NAME_PHONE_COUNTRY_CODE)
  private String phoneCountryCode;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "PhoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  /**
   * Gets or Sets phoneType
   */
  @JsonAdapter(PhoneTypeEnum.Adapter.class)
  public enum PhoneTypeEnum {
    DEFAULT("DEFAULT"),
    
    DDI("DDI"),
    
    MOBILE("MOBILE"),
    
    FAX("FAX"),
    
    OFFICE("OFFICE");

    private String value;

    PhoneTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhoneTypeEnum fromValue(String value) {
      for (PhoneTypeEnum b : PhoneTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhoneTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhoneTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhoneTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhoneTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PhoneTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PHONE_TYPE = "PhoneType";
  @SerializedName(SERIALIZED_NAME_PHONE_TYPE)
  private PhoneTypeEnum phoneType;

  public Phone() {
  }

  public Phone phoneAreaCode(String phoneAreaCode) {
    this.phoneAreaCode = phoneAreaCode;
    return this;
  }

  /**
   * max length &#x3D; 10
   * @return phoneAreaCode
   */
  @javax.annotation.Nullable
  public String getPhoneAreaCode() {
    return phoneAreaCode;
  }

  public void setPhoneAreaCode(String phoneAreaCode) {
    this.phoneAreaCode = phoneAreaCode;
  }


  public Phone phoneCountryCode(String phoneCountryCode) {
    this.phoneCountryCode = phoneCountryCode;
    return this;
  }

  /**
   * max length &#x3D; 20
   * @return phoneCountryCode
   */
  @javax.annotation.Nullable
  public String getPhoneCountryCode() {
    return phoneCountryCode;
  }

  public void setPhoneCountryCode(String phoneCountryCode) {
    this.phoneCountryCode = phoneCountryCode;
  }


  public Phone phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * max length &#x3D; 50
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public Phone phoneType(PhoneTypeEnum phoneType) {
    this.phoneType = phoneType;
    return this;
  }

  /**
   * Get phoneType
   * @return phoneType
   */
  @javax.annotation.Nullable
  public PhoneTypeEnum getPhoneType() {
    return phoneType;
  }

  public void setPhoneType(PhoneTypeEnum phoneType) {
    this.phoneType = phoneType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Phone phone = (Phone) o;
    return Objects.equals(this.phoneAreaCode, phone.phoneAreaCode) &&
        Objects.equals(this.phoneCountryCode, phone.phoneCountryCode) &&
        Objects.equals(this.phoneNumber, phone.phoneNumber) &&
        Objects.equals(this.phoneType, phone.phoneType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(phoneAreaCode, phoneCountryCode, phoneNumber, phoneType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Phone {\n");
    sb.append("    phoneAreaCode: ").append(toIndentedString(phoneAreaCode)).append("\n");
    sb.append("    phoneCountryCode: ").append(toIndentedString(phoneCountryCode)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    phoneType: ").append(toIndentedString(phoneType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PhoneAreaCode");
    openapiFields.add("PhoneCountryCode");
    openapiFields.add("PhoneNumber");
    openapiFields.add("PhoneType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Phone
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Phone.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Phone is not found in the empty JSON string", Phone.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Phone.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Phone` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("PhoneAreaCode") != null && !jsonObj.get("PhoneAreaCode").isJsonNull()) && !jsonObj.get("PhoneAreaCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneAreaCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneAreaCode").toString()));
      }
      if ((jsonObj.get("PhoneCountryCode") != null && !jsonObj.get("PhoneCountryCode").isJsonNull()) && !jsonObj.get("PhoneCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneCountryCode").toString()));
      }
      if ((jsonObj.get("PhoneNumber") != null && !jsonObj.get("PhoneNumber").isJsonNull()) && !jsonObj.get("PhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneNumber").toString()));
      }
      if ((jsonObj.get("PhoneType") != null && !jsonObj.get("PhoneType").isJsonNull()) && !jsonObj.get("PhoneType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneType").toString()));
      }
      // validate the optional field `PhoneType`
      if (jsonObj.get("PhoneType") != null && !jsonObj.get("PhoneType").isJsonNull()) {
        PhoneTypeEnum.validateJsonElement(jsonObj.get("PhoneType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Phone.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Phone' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Phone> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Phone.class));

       return (TypeAdapter<T>) new TypeAdapter<Phone>() {
           @Override
           public void write(JsonWriter out, Phone value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Phone read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Phone given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Phone
   * @throws IOException if the JSON string is invalid with respect to Phone
   */
  public static Phone fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Phone.class);
  }

  /**
   * Convert an instance of Phone to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

