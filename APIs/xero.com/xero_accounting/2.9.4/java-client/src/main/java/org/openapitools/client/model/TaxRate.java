/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TaxComponent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaxRate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaxRate {
  public static final String SERIALIZED_NAME_CAN_APPLY_TO_ASSETS = "CanApplyToAssets";
  @SerializedName(SERIALIZED_NAME_CAN_APPLY_TO_ASSETS)
  private Boolean canApplyToAssets;

  public static final String SERIALIZED_NAME_CAN_APPLY_TO_EQUITY = "CanApplyToEquity";
  @SerializedName(SERIALIZED_NAME_CAN_APPLY_TO_EQUITY)
  private Boolean canApplyToEquity;

  public static final String SERIALIZED_NAME_CAN_APPLY_TO_EXPENSES = "CanApplyToExpenses";
  @SerializedName(SERIALIZED_NAME_CAN_APPLY_TO_EXPENSES)
  private Boolean canApplyToExpenses;

  public static final String SERIALIZED_NAME_CAN_APPLY_TO_LIABILITIES = "CanApplyToLiabilities";
  @SerializedName(SERIALIZED_NAME_CAN_APPLY_TO_LIABILITIES)
  private Boolean canApplyToLiabilities;

  public static final String SERIALIZED_NAME_CAN_APPLY_TO_REVENUE = "CanApplyToRevenue";
  @SerializedName(SERIALIZED_NAME_CAN_APPLY_TO_REVENUE)
  private Boolean canApplyToRevenue;

  public static final String SERIALIZED_NAME_DISPLAY_TAX_RATE = "DisplayTaxRate";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TAX_RATE)
  private Double displayTaxRate;

  public static final String SERIALIZED_NAME_EFFECTIVE_RATE = "EffectiveRate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_RATE)
  private Double effectiveRate;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * See ReportTaxTypes
   */
  @JsonAdapter(ReportTaxTypeEnum.Adapter.class)
  public enum ReportTaxTypeEnum {
    AVALARA("AVALARA"),
    
    BASEXCLUDED("BASEXCLUDED"),
    
    CAPITALSALESOUTPUT("CAPITALSALESOUTPUT"),
    
    CAPITALEXPENSESINPUT("CAPITALEXPENSESINPUT"),
    
    ECOUTPUT("ECOUTPUT"),
    
    ECOUTPUTSERVICES("ECOUTPUTSERVICES"),
    
    ECINPUT("ECINPUT"),
    
    ECACQUISITIONS("ECACQUISITIONS"),
    
    EXEMPTEXPENSES("EXEMPTEXPENSES"),
    
    EXEMPTINPUT("EXEMPTINPUT"),
    
    EXEMPTOUTPUT("EXEMPTOUTPUT"),
    
    GSTONIMPORTS("GSTONIMPORTS"),
    
    INPUT("INPUT"),
    
    INPUTTAXED("INPUTTAXED"),
    
    MOSSSALES("MOSSSALES"),
    
    NONE("NONE"),
    
    NONEOUTPUT("NONEOUTPUT"),
    
    OUTPUT("OUTPUT"),
    
    PURCHASESINPUT("PURCHASESINPUT"),
    
    SALESOUTPUT("SALESOUTPUT"),
    
    EXEMPTCAPITAL("EXEMPTCAPITAL"),
    
    EXEMPTEXPORT("EXEMPTEXPORT"),
    
    CAPITALEXINPUT("CAPITALEXINPUT"),
    
    GSTONCAPIMPORTS("GSTONCAPIMPORTS"),
    
    GSTONCAPITALIMPORTS("GSTONCAPITALIMPORTS"),
    
    REVERSECHARGES("REVERSECHARGES"),
    
    PAYMENTS("PAYMENTS"),
    
    INVOICE("INVOICE"),
    
    CASH("CASH"),
    
    ACCRUAL("ACCRUAL"),
    
    FLATRATECASH("FLATRATECASH"),
    
    FLATRATEACCRUAL("FLATRATEACCRUAL"),
    
    ACCRUALS("ACCRUALS"),
    
    TXCA("TXCA"),
    
    SRCAS("SRCAS"),
    
    DSOUTPUT("DSOUTPUT"),
    
    BLINPUT2("BLINPUT2"),
    
    EPINPUT("EPINPUT"),
    
    IMINPUT2("IMINPUT2"),
    
    MEINPUT("MEINPUT"),
    
    IGDSINPUT2("IGDSINPUT2"),
    
    ESN33_OUTPUT("ESN33OUTPUT"),
    
    OPINPUT("OPINPUT"),
    
    OSOUTPUT("OSOUTPUT"),
    
    TXN33_INPUT("TXN33INPUT"),
    
    TXESSINPUT("TXESSINPUT"),
    
    TXREINPUT("TXREINPUT"),
    
    TXPETINPUT("TXPETINPUT"),
    
    NRINPUT("NRINPUT"),
    
    ES33_OUTPUT("ES33OUTPUT"),
    
    ZERORATEDINPUT("ZERORATEDINPUT"),
    
    ZERORATEDOUTPUT("ZERORATEDOUTPUT"),
    
    DRCHARGESUPPLY("DRCHARGESUPPLY"),
    
    DRCHARGE("DRCHARGE"),
    
    CAPINPUT("CAPINPUT"),
    
    CAPIMPORTS("CAPIMPORTS"),
    
    IMINPUT("IMINPUT"),
    
    INPUT2("INPUT2"),
    
    CIUINPUT("CIUINPUT"),
    
    SRINPUT("SRINPUT"),
    
    OUTPUT2("OUTPUT2"),
    
    SROUTPUT("SROUTPUT"),
    
    CAPOUTPUT("CAPOUTPUT"),
    
    SROUTPUT2("SROUTPUT2"),
    
    CIUOUTPUT("CIUOUTPUT"),
    
    ZROUTPUT("ZROUTPUT"),
    
    ZREXPORT("ZREXPORT"),
    
    ACC28_PLUS("ACC28PLUS"),
    
    ACCUPTO28("ACCUPTO28"),
    
    OTHEROUTPUT("OTHEROUTPUT"),
    
    SHOUTPUT("SHOUTPUT"),
    
    ZRINPUT("ZRINPUT"),
    
    BADDEBT("BADDEBT"),
    
    OTHERINPUT("OTHERINPUT");

    private String value;

    ReportTaxTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReportTaxTypeEnum fromValue(String value) {
      for (ReportTaxTypeEnum b : ReportTaxTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReportTaxTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReportTaxTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReportTaxTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReportTaxTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReportTaxTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPORT_TAX_TYPE = "ReportTaxType";
  @SerializedName(SERIALIZED_NAME_REPORT_TAX_TYPE)
  private ReportTaxTypeEnum reportTaxType;

  /**
   * See Status Codes
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    DELETED("DELETED"),
    
    ARCHIVED("ARCHIVED"),
    
    PENDING("PENDING");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TAX_COMPONENTS = "TaxComponents";
  @SerializedName(SERIALIZED_NAME_TAX_COMPONENTS)
  private List<TaxComponent> taxComponents = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAX_TYPE = "TaxType";
  @SerializedName(SERIALIZED_NAME_TAX_TYPE)
  private String taxType;

  public TaxRate() {
  }

  public TaxRate(
     Boolean canApplyToAssets, 
     Boolean canApplyToEquity, 
     Boolean canApplyToExpenses, 
     Boolean canApplyToLiabilities, 
     Boolean canApplyToRevenue, 
     Double displayTaxRate, 
     Double effectiveRate
  ) {
    this();
    this.canApplyToAssets = canApplyToAssets;
    this.canApplyToEquity = canApplyToEquity;
    this.canApplyToExpenses = canApplyToExpenses;
    this.canApplyToLiabilities = canApplyToLiabilities;
    this.canApplyToRevenue = canApplyToRevenue;
    this.displayTaxRate = displayTaxRate;
    this.effectiveRate = effectiveRate;
  }

  /**
   * Boolean to describe if tax rate can be used for asset accounts i.e.  true,false
   * @return canApplyToAssets
   */
  @javax.annotation.Nullable
  public Boolean getCanApplyToAssets() {
    return canApplyToAssets;
  }



  /**
   * Boolean to describe if tax rate can be used for equity accounts i.e true,false
   * @return canApplyToEquity
   */
  @javax.annotation.Nullable
  public Boolean getCanApplyToEquity() {
    return canApplyToEquity;
  }



  /**
   * Boolean to describe if tax rate can be used for expense accounts  i.e. true,false
   * @return canApplyToExpenses
   */
  @javax.annotation.Nullable
  public Boolean getCanApplyToExpenses() {
    return canApplyToExpenses;
  }



  /**
   * Boolean to describe if tax rate can be used for liability accounts  i.e. true,false
   * @return canApplyToLiabilities
   */
  @javax.annotation.Nullable
  public Boolean getCanApplyToLiabilities() {
    return canApplyToLiabilities;
  }



  /**
   * Boolean to describe if tax rate can be used for revenue accounts i.e. true,false
   * @return canApplyToRevenue
   */
  @javax.annotation.Nullable
  public Boolean getCanApplyToRevenue() {
    return canApplyToRevenue;
  }



  /**
   * Tax Rate (decimal to 4dp) e.g 12.5000
   * @return displayTaxRate
   */
  @javax.annotation.Nullable
  public Double getDisplayTaxRate() {
    return displayTaxRate;
  }



  /**
   * Effective Tax Rate (decimal to 4dp) e.g 12.5000
   * @return effectiveRate
   */
  @javax.annotation.Nullable
  public Double getEffectiveRate() {
    return effectiveRate;
  }



  public TaxRate name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of tax rate
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TaxRate reportTaxType(ReportTaxTypeEnum reportTaxType) {
    this.reportTaxType = reportTaxType;
    return this;
  }

  /**
   * See ReportTaxTypes
   * @return reportTaxType
   */
  @javax.annotation.Nullable
  public ReportTaxTypeEnum getReportTaxType() {
    return reportTaxType;
  }

  public void setReportTaxType(ReportTaxTypeEnum reportTaxType) {
    this.reportTaxType = reportTaxType;
  }


  public TaxRate status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * See Status Codes
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public TaxRate taxComponents(List<TaxComponent> taxComponents) {
    this.taxComponents = taxComponents;
    return this;
  }

  public TaxRate addTaxComponentsItem(TaxComponent taxComponentsItem) {
    if (this.taxComponents == null) {
      this.taxComponents = new ArrayList<>();
    }
    this.taxComponents.add(taxComponentsItem);
    return this;
  }

  /**
   * See TaxComponents
   * @return taxComponents
   */
  @javax.annotation.Nullable
  public List<TaxComponent> getTaxComponents() {
    return taxComponents;
  }

  public void setTaxComponents(List<TaxComponent> taxComponents) {
    this.taxComponents = taxComponents;
  }


  public TaxRate taxType(String taxType) {
    this.taxType = taxType;
    return this;
  }

  /**
   * The tax type
   * @return taxType
   */
  @javax.annotation.Nullable
  public String getTaxType() {
    return taxType;
  }

  public void setTaxType(String taxType) {
    this.taxType = taxType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxRate taxRate = (TaxRate) o;
    return Objects.equals(this.canApplyToAssets, taxRate.canApplyToAssets) &&
        Objects.equals(this.canApplyToEquity, taxRate.canApplyToEquity) &&
        Objects.equals(this.canApplyToExpenses, taxRate.canApplyToExpenses) &&
        Objects.equals(this.canApplyToLiabilities, taxRate.canApplyToLiabilities) &&
        Objects.equals(this.canApplyToRevenue, taxRate.canApplyToRevenue) &&
        Objects.equals(this.displayTaxRate, taxRate.displayTaxRate) &&
        Objects.equals(this.effectiveRate, taxRate.effectiveRate) &&
        Objects.equals(this.name, taxRate.name) &&
        Objects.equals(this.reportTaxType, taxRate.reportTaxType) &&
        Objects.equals(this.status, taxRate.status) &&
        Objects.equals(this.taxComponents, taxRate.taxComponents) &&
        Objects.equals(this.taxType, taxRate.taxType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canApplyToAssets, canApplyToEquity, canApplyToExpenses, canApplyToLiabilities, canApplyToRevenue, displayTaxRate, effectiveRate, name, reportTaxType, status, taxComponents, taxType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxRate {\n");
    sb.append("    canApplyToAssets: ").append(toIndentedString(canApplyToAssets)).append("\n");
    sb.append("    canApplyToEquity: ").append(toIndentedString(canApplyToEquity)).append("\n");
    sb.append("    canApplyToExpenses: ").append(toIndentedString(canApplyToExpenses)).append("\n");
    sb.append("    canApplyToLiabilities: ").append(toIndentedString(canApplyToLiabilities)).append("\n");
    sb.append("    canApplyToRevenue: ").append(toIndentedString(canApplyToRevenue)).append("\n");
    sb.append("    displayTaxRate: ").append(toIndentedString(displayTaxRate)).append("\n");
    sb.append("    effectiveRate: ").append(toIndentedString(effectiveRate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    reportTaxType: ").append(toIndentedString(reportTaxType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taxComponents: ").append(toIndentedString(taxComponents)).append("\n");
    sb.append("    taxType: ").append(toIndentedString(taxType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CanApplyToAssets");
    openapiFields.add("CanApplyToEquity");
    openapiFields.add("CanApplyToExpenses");
    openapiFields.add("CanApplyToLiabilities");
    openapiFields.add("CanApplyToRevenue");
    openapiFields.add("DisplayTaxRate");
    openapiFields.add("EffectiveRate");
    openapiFields.add("Name");
    openapiFields.add("ReportTaxType");
    openapiFields.add("Status");
    openapiFields.add("TaxComponents");
    openapiFields.add("TaxType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaxRate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaxRate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxRate is not found in the empty JSON string", TaxRate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaxRate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxRate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("ReportTaxType") != null && !jsonObj.get("ReportTaxType").isJsonNull()) && !jsonObj.get("ReportTaxType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportTaxType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportTaxType").toString()));
      }
      // validate the optional field `ReportTaxType`
      if (jsonObj.get("ReportTaxType") != null && !jsonObj.get("ReportTaxType").isJsonNull()) {
        ReportTaxTypeEnum.validateJsonElement(jsonObj.get("ReportTaxType"));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
      if (jsonObj.get("TaxComponents") != null && !jsonObj.get("TaxComponents").isJsonNull()) {
        JsonArray jsonArraytaxComponents = jsonObj.getAsJsonArray("TaxComponents");
        if (jsonArraytaxComponents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TaxComponents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TaxComponents` to be an array in the JSON string but got `%s`", jsonObj.get("TaxComponents").toString()));
          }

          // validate the optional field `TaxComponents` (array)
          for (int i = 0; i < jsonArraytaxComponents.size(); i++) {
            TaxComponent.validateJsonElement(jsonArraytaxComponents.get(i));
          };
        }
      }
      if ((jsonObj.get("TaxType") != null && !jsonObj.get("TaxType").isJsonNull()) && !jsonObj.get("TaxType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxRate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxRate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxRate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxRate.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxRate>() {
           @Override
           public void write(JsonWriter out, TaxRate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxRate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaxRate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaxRate
   * @throws IOException if the JSON string is invalid with respect to TaxRate
   */
  public static TaxRate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxRate.class);
  }

  /**
   * Convert an instance of TaxRate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

