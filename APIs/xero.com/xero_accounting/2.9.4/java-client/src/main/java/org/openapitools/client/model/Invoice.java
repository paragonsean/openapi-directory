/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.CreditNote;
import org.openapitools.client.model.CurrencyCode;
import org.openapitools.client.model.LineAmountTypes;
import org.openapitools.client.model.LineItem;
import org.openapitools.client.model.Overpayment;
import org.openapitools.client.model.Payment;
import org.openapitools.client.model.Prepayment;
import org.openapitools.client.model.ValidationError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Invoice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Invoice {
  public static final String SERIALIZED_NAME_AMOUNT_CREDITED = "AmountCredited";
  @SerializedName(SERIALIZED_NAME_AMOUNT_CREDITED)
  private Double amountCredited;

  public static final String SERIALIZED_NAME_AMOUNT_DUE = "AmountDue";
  @SerializedName(SERIALIZED_NAME_AMOUNT_DUE)
  private Double amountDue;

  public static final String SERIALIZED_NAME_AMOUNT_PAID = "AmountPaid";
  @SerializedName(SERIALIZED_NAME_AMOUNT_PAID)
  private Double amountPaid;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "Attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<Attachment> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRANDING_THEME_I_D = "BrandingThemeID";
  @SerializedName(SERIALIZED_NAME_BRANDING_THEME_I_D)
  private UUID brandingThemeID;

  public static final String SERIALIZED_NAME_CI_S_DEDUCTION = "CISDeduction";
  @SerializedName(SERIALIZED_NAME_CI_S_DEDUCTION)
  private Double ciSDeduction;

  public static final String SERIALIZED_NAME_CI_S_RATE = "CISRate";
  @SerializedName(SERIALIZED_NAME_CI_S_RATE)
  private Double ciSRate;

  public static final String SERIALIZED_NAME_CONTACT = "Contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private Contact contact;

  public static final String SERIALIZED_NAME_CREDIT_NOTES = "CreditNotes";
  @SerializedName(SERIALIZED_NAME_CREDIT_NOTES)
  private List<CreditNote> creditNotes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private CurrencyCode currencyCode;

  public static final String SERIALIZED_NAME_CURRENCY_RATE = "CurrencyRate";
  @SerializedName(SERIALIZED_NAME_CURRENCY_RATE)
  private Double currencyRate;

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DUE_DATE = "DueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private String dueDate;

  public static final String SERIALIZED_NAME_EXPECTED_PAYMENT_DATE = "ExpectedPaymentDate";
  @SerializedName(SERIALIZED_NAME_EXPECTED_PAYMENT_DATE)
  private String expectedPaymentDate;

  public static final String SERIALIZED_NAME_FULLY_PAID_ON_DATE = "FullyPaidOnDate";
  @SerializedName(SERIALIZED_NAME_FULLY_PAID_ON_DATE)
  private String fullyPaidOnDate;

  public static final String SERIALIZED_NAME_HAS_ATTACHMENTS = "HasAttachments";
  @SerializedName(SERIALIZED_NAME_HAS_ATTACHMENTS)
  private Boolean hasAttachments = false;

  public static final String SERIALIZED_NAME_HAS_ERRORS = "HasErrors";
  @SerializedName(SERIALIZED_NAME_HAS_ERRORS)
  private Boolean hasErrors = false;

  public static final String SERIALIZED_NAME_INVOICE_I_D = "InvoiceID";
  @SerializedName(SERIALIZED_NAME_INVOICE_I_D)
  private UUID invoiceID;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "InvoiceNumber";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_IS_DISCOUNTED = "IsDiscounted";
  @SerializedName(SERIALIZED_NAME_IS_DISCOUNTED)
  private Boolean isDiscounted;

  public static final String SERIALIZED_NAME_LINE_AMOUNT_TYPES = "LineAmountTypes";
  @SerializedName(SERIALIZED_NAME_LINE_AMOUNT_TYPES)
  private LineAmountTypes lineAmountTypes;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "LineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<LineItem> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_OVERPAYMENTS = "Overpayments";
  @SerializedName(SERIALIZED_NAME_OVERPAYMENTS)
  private List<Overpayment> overpayments = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENTS = "Payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  private List<Payment> payments = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLANNED_PAYMENT_DATE = "PlannedPaymentDate";
  @SerializedName(SERIALIZED_NAME_PLANNED_PAYMENT_DATE)
  private String plannedPaymentDate;

  public static final String SERIALIZED_NAME_PREPAYMENTS = "Prepayments";
  @SerializedName(SERIALIZED_NAME_PREPAYMENTS)
  private List<Prepayment> prepayments = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFERENCE = "Reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_REPEATING_INVOICE_I_D = "RepeatingInvoiceID";
  @SerializedName(SERIALIZED_NAME_REPEATING_INVOICE_I_D)
  private UUID repeatingInvoiceID;

  public static final String SERIALIZED_NAME_SENT_TO_CONTACT = "SentToContact";
  @SerializedName(SERIALIZED_NAME_SENT_TO_CONTACT)
  private Boolean sentToContact;

  /**
   * See Invoice Status Codes
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DRAFT("DRAFT"),
    
    SUBMITTED("SUBMITTED"),
    
    DELETED("DELETED"),
    
    AUTHORISED("AUTHORISED"),
    
    PAID("PAID"),
    
    VOIDED("VOIDED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STATUS_ATTRIBUTE_STRING = "StatusAttributeString";
  @SerializedName(SERIALIZED_NAME_STATUS_ATTRIBUTE_STRING)
  private String statusAttributeString;

  public static final String SERIALIZED_NAME_SUB_TOTAL = "SubTotal";
  @SerializedName(SERIALIZED_NAME_SUB_TOTAL)
  private Double subTotal;

  public static final String SERIALIZED_NAME_TOTAL = "Total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public static final String SERIALIZED_NAME_TOTAL_DISCOUNT = "TotalDiscount";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISCOUNT)
  private Double totalDiscount;

  public static final String SERIALIZED_NAME_TOTAL_TAX = "TotalTax";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX)
  private Double totalTax;

  /**
   * See Invoice Types
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ACCPAY("ACCPAY"),
    
    ACCPAYCREDIT("ACCPAYCREDIT"),
    
    APOVERPAYMENT("APOVERPAYMENT"),
    
    APPREPAYMENT("APPREPAYMENT"),
    
    ACCREC("ACCREC"),
    
    ACCRECCREDIT("ACCRECCREDIT"),
    
    AROVERPAYMENT("AROVERPAYMENT"),
    
    ARPREPAYMENT("ARPREPAYMENT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public static final String SERIALIZED_NAME_URL = "Url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "ValidationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<ValidationError> validationErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_WARNINGS = "Warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<ValidationError> warnings = new ArrayList<>();

  public Invoice() {
  }

  public Invoice(
     Double amountCredited, 
     Double amountDue, 
     Double amountPaid, 
     Double ciSDeduction, 
     Double ciSRate, 
     List<CreditNote> creditNotes, 
     String fullyPaidOnDate, 
     Boolean hasAttachments, 
     Boolean isDiscounted, 
     List<Overpayment> overpayments, 
     List<Payment> payments, 
     List<Prepayment> prepayments, 
     Double subTotal, 
     Double total, 
     Double totalDiscount, 
     Double totalTax, 
     String updatedDateUTC
  ) {
    this();
    this.amountCredited = amountCredited;
    this.amountDue = amountDue;
    this.amountPaid = amountPaid;
    this.ciSDeduction = ciSDeduction;
    this.ciSRate = ciSRate;
    this.creditNotes = creditNotes;
    this.fullyPaidOnDate = fullyPaidOnDate;
    this.hasAttachments = hasAttachments;
    this.isDiscounted = isDiscounted;
    this.overpayments = overpayments;
    this.payments = payments;
    this.prepayments = prepayments;
    this.subTotal = subTotal;
    this.total = total;
    this.totalDiscount = totalDiscount;
    this.totalTax = totalTax;
    this.updatedDateUTC = updatedDateUTC;
  }

  /**
   * Sum of all credit notes, over-payments and pre-payments applied to invoice
   * @return amountCredited
   */
  @javax.annotation.Nullable
  public Double getAmountCredited() {
    return amountCredited;
  }



  /**
   * Amount remaining to be paid on invoice
   * @return amountDue
   */
  @javax.annotation.Nullable
  public Double getAmountDue() {
    return amountDue;
  }



  /**
   * Sum of payments received for invoice
   * @return amountPaid
   */
  @javax.annotation.Nullable
  public Double getAmountPaid() {
    return amountPaid;
  }



  public Invoice attachments(List<Attachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public Invoice addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Displays array of attachments from the API
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<Attachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<Attachment> attachments) {
    this.attachments = attachments;
  }


  public Invoice brandingThemeID(UUID brandingThemeID) {
    this.brandingThemeID = brandingThemeID;
    return this;
  }

  /**
   * See BrandingThemes
   * @return brandingThemeID
   */
  @javax.annotation.Nullable
  public UUID getBrandingThemeID() {
    return brandingThemeID;
  }

  public void setBrandingThemeID(UUID brandingThemeID) {
    this.brandingThemeID = brandingThemeID;
  }


  /**
   * CIS deduction for UK contractors
   * @return ciSDeduction
   */
  @javax.annotation.Nullable
  public Double getCiSDeduction() {
    return ciSDeduction;
  }



  /**
   * CIS Deduction rate for the organisation
   * @return ciSRate
   */
  @javax.annotation.Nullable
  public Double getCiSRate() {
    return ciSRate;
  }



  public Invoice contact(Contact contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nullable
  public Contact getContact() {
    return contact;
  }

  public void setContact(Contact contact) {
    this.contact = contact;
  }


  /**
   * Details of credit notes that have been applied to an invoice
   * @return creditNotes
   */
  @javax.annotation.Nullable
  public List<CreditNote> getCreditNotes() {
    return creditNotes;
  }



  public Invoice currencyCode(CurrencyCode currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public CurrencyCode getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(CurrencyCode currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Invoice currencyRate(Double currencyRate) {
    this.currencyRate = currencyRate;
    return this;
  }

  /**
   * The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used. (max length &#x3D; [18].[6])
   * @return currencyRate
   */
  @javax.annotation.Nullable
  public Double getCurrencyRate() {
    return currencyRate;
  }

  public void setCurrencyRate(Double currencyRate) {
    this.currencyRate = currencyRate;
  }


  public Invoice date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Date invoice was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public Invoice dueDate(String dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Date invoice is due – YYYY-MM-DD
   * @return dueDate
   */
  @javax.annotation.Nullable
  public String getDueDate() {
    return dueDate;
  }

  public void setDueDate(String dueDate) {
    this.dueDate = dueDate;
  }


  public Invoice expectedPaymentDate(String expectedPaymentDate) {
    this.expectedPaymentDate = expectedPaymentDate;
    return this;
  }

  /**
   * Shown on sales invoices (Accounts Receivable) when this has been set
   * @return expectedPaymentDate
   */
  @javax.annotation.Nullable
  public String getExpectedPaymentDate() {
    return expectedPaymentDate;
  }

  public void setExpectedPaymentDate(String expectedPaymentDate) {
    this.expectedPaymentDate = expectedPaymentDate;
  }


  /**
   * The date the invoice was fully paid. Only returned on fully paid invoices
   * @return fullyPaidOnDate
   */
  @javax.annotation.Nullable
  public String getFullyPaidOnDate() {
    return fullyPaidOnDate;
  }



  /**
   * boolean to indicate if an invoice has an attachment
   * @return hasAttachments
   */
  @javax.annotation.Nullable
  public Boolean getHasAttachments() {
    return hasAttachments;
  }



  public Invoice hasErrors(Boolean hasErrors) {
    this.hasErrors = hasErrors;
    return this;
  }

  /**
   * A boolean to indicate if a invoice has an validation errors
   * @return hasErrors
   */
  @javax.annotation.Nullable
  public Boolean getHasErrors() {
    return hasErrors;
  }

  public void setHasErrors(Boolean hasErrors) {
    this.hasErrors = hasErrors;
  }


  public Invoice invoiceID(UUID invoiceID) {
    this.invoiceID = invoiceID;
    return this;
  }

  /**
   * Xero generated unique identifier for invoice
   * @return invoiceID
   */
  @javax.annotation.Nullable
  public UUID getInvoiceID() {
    return invoiceID;
  }

  public void setInvoiceID(UUID invoiceID) {
    this.invoiceID = invoiceID;
  }


  public Invoice invoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
    return this;
  }

  /**
   * ACCREC – Unique alpha numeric code identifying invoice (when missing will auto-generate from your Organisation Invoice Settings) (max length &#x3D; 255)
   * @return invoiceNumber
   */
  @javax.annotation.Nullable
  public String getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }


  /**
   * boolean to indicate if an invoice has a discount
   * @return isDiscounted
   */
  @javax.annotation.Nullable
  public Boolean getIsDiscounted() {
    return isDiscounted;
  }



  public Invoice lineAmountTypes(LineAmountTypes lineAmountTypes) {
    this.lineAmountTypes = lineAmountTypes;
    return this;
  }

  /**
   * Get lineAmountTypes
   * @return lineAmountTypes
   */
  @javax.annotation.Nullable
  public LineAmountTypes getLineAmountTypes() {
    return lineAmountTypes;
  }

  public void setLineAmountTypes(LineAmountTypes lineAmountTypes) {
    this.lineAmountTypes = lineAmountTypes;
  }


  public Invoice lineItems(List<LineItem> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public Invoice addLineItemsItem(LineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * See LineItems
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<LineItem> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<LineItem> lineItems) {
    this.lineItems = lineItems;
  }


  /**
   * See Overpayments
   * @return overpayments
   */
  @javax.annotation.Nullable
  public List<Overpayment> getOverpayments() {
    return overpayments;
  }



  /**
   * See Payments
   * @return payments
   */
  @javax.annotation.Nullable
  public List<Payment> getPayments() {
    return payments;
  }



  public Invoice plannedPaymentDate(String plannedPaymentDate) {
    this.plannedPaymentDate = plannedPaymentDate;
    return this;
  }

  /**
   * Shown on bills (Accounts Payable) when this has been set
   * @return plannedPaymentDate
   */
  @javax.annotation.Nullable
  public String getPlannedPaymentDate() {
    return plannedPaymentDate;
  }

  public void setPlannedPaymentDate(String plannedPaymentDate) {
    this.plannedPaymentDate = plannedPaymentDate;
  }


  /**
   * See Prepayments
   * @return prepayments
   */
  @javax.annotation.Nullable
  public List<Prepayment> getPrepayments() {
    return prepayments;
  }



  public Invoice reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * ACCREC only – additional reference number
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public Invoice repeatingInvoiceID(UUID repeatingInvoiceID) {
    this.repeatingInvoiceID = repeatingInvoiceID;
    return this;
  }

  /**
   * Xero generated unique identifier for repeating invoices
   * @return repeatingInvoiceID
   */
  @javax.annotation.Nullable
  public UUID getRepeatingInvoiceID() {
    return repeatingInvoiceID;
  }

  public void setRepeatingInvoiceID(UUID repeatingInvoiceID) {
    this.repeatingInvoiceID = repeatingInvoiceID;
  }


  public Invoice sentToContact(Boolean sentToContact) {
    this.sentToContact = sentToContact;
    return this;
  }

  /**
   * Boolean to set whether the invoice in the Xero app should be marked as “sent”. This can be set only on invoices that have been approved
   * @return sentToContact
   */
  @javax.annotation.Nullable
  public Boolean getSentToContact() {
    return sentToContact;
  }

  public void setSentToContact(Boolean sentToContact) {
    this.sentToContact = sentToContact;
  }


  public Invoice status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * See Invoice Status Codes
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Invoice statusAttributeString(String statusAttributeString) {
    this.statusAttributeString = statusAttributeString;
    return this;
  }

  /**
   * A string to indicate if a invoice status
   * @return statusAttributeString
   */
  @javax.annotation.Nullable
  public String getStatusAttributeString() {
    return statusAttributeString;
  }

  public void setStatusAttributeString(String statusAttributeString) {
    this.statusAttributeString = statusAttributeString;
  }


  /**
   * Total of invoice excluding taxes
   * @return subTotal
   */
  @javax.annotation.Nullable
  public Double getSubTotal() {
    return subTotal;
  }



  /**
   * Total of Invoice tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts
   * @return total
   */
  @javax.annotation.Nullable
  public Double getTotal() {
    return total;
  }



  /**
   * Total of discounts applied on the invoice line items
   * @return totalDiscount
   */
  @javax.annotation.Nullable
  public Double getTotalDiscount() {
    return totalDiscount;
  }



  /**
   * Total tax on invoice
   * @return totalTax
   */
  @javax.annotation.Nullable
  public Double getTotalTax() {
    return totalTax;
  }



  public Invoice type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * See Invoice Types
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Last modified date UTC format
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }



  public Invoice url(String url) {
    this.url = url;
    return this;
  }

  /**
   * URL link to a source document – shown as “Go to [appName]” in the Xero app
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Invoice validationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public Invoice addValidationErrorsItem(ValidationError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Displays array of validation error messages from the API
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<ValidationError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }


  public Invoice warnings(List<ValidationError> warnings) {
    this.warnings = warnings;
    return this;
  }

  public Invoice addWarningsItem(ValidationError warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * Displays array of warning messages from the API
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<ValidationError> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<ValidationError> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Invoice invoice = (Invoice) o;
    return Objects.equals(this.amountCredited, invoice.amountCredited) &&
        Objects.equals(this.amountDue, invoice.amountDue) &&
        Objects.equals(this.amountPaid, invoice.amountPaid) &&
        Objects.equals(this.attachments, invoice.attachments) &&
        Objects.equals(this.brandingThemeID, invoice.brandingThemeID) &&
        Objects.equals(this.ciSDeduction, invoice.ciSDeduction) &&
        Objects.equals(this.ciSRate, invoice.ciSRate) &&
        Objects.equals(this.contact, invoice.contact) &&
        Objects.equals(this.creditNotes, invoice.creditNotes) &&
        Objects.equals(this.currencyCode, invoice.currencyCode) &&
        Objects.equals(this.currencyRate, invoice.currencyRate) &&
        Objects.equals(this.date, invoice.date) &&
        Objects.equals(this.dueDate, invoice.dueDate) &&
        Objects.equals(this.expectedPaymentDate, invoice.expectedPaymentDate) &&
        Objects.equals(this.fullyPaidOnDate, invoice.fullyPaidOnDate) &&
        Objects.equals(this.hasAttachments, invoice.hasAttachments) &&
        Objects.equals(this.hasErrors, invoice.hasErrors) &&
        Objects.equals(this.invoiceID, invoice.invoiceID) &&
        Objects.equals(this.invoiceNumber, invoice.invoiceNumber) &&
        Objects.equals(this.isDiscounted, invoice.isDiscounted) &&
        Objects.equals(this.lineAmountTypes, invoice.lineAmountTypes) &&
        Objects.equals(this.lineItems, invoice.lineItems) &&
        Objects.equals(this.overpayments, invoice.overpayments) &&
        Objects.equals(this.payments, invoice.payments) &&
        Objects.equals(this.plannedPaymentDate, invoice.plannedPaymentDate) &&
        Objects.equals(this.prepayments, invoice.prepayments) &&
        Objects.equals(this.reference, invoice.reference) &&
        Objects.equals(this.repeatingInvoiceID, invoice.repeatingInvoiceID) &&
        Objects.equals(this.sentToContact, invoice.sentToContact) &&
        Objects.equals(this.status, invoice.status) &&
        Objects.equals(this.statusAttributeString, invoice.statusAttributeString) &&
        Objects.equals(this.subTotal, invoice.subTotal) &&
        Objects.equals(this.total, invoice.total) &&
        Objects.equals(this.totalDiscount, invoice.totalDiscount) &&
        Objects.equals(this.totalTax, invoice.totalTax) &&
        Objects.equals(this.type, invoice.type) &&
        Objects.equals(this.updatedDateUTC, invoice.updatedDateUTC) &&
        Objects.equals(this.url, invoice.url) &&
        Objects.equals(this.validationErrors, invoice.validationErrors) &&
        Objects.equals(this.warnings, invoice.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountCredited, amountDue, amountPaid, attachments, brandingThemeID, ciSDeduction, ciSRate, contact, creditNotes, currencyCode, currencyRate, date, dueDate, expectedPaymentDate, fullyPaidOnDate, hasAttachments, hasErrors, invoiceID, invoiceNumber, isDiscounted, lineAmountTypes, lineItems, overpayments, payments, plannedPaymentDate, prepayments, reference, repeatingInvoiceID, sentToContact, status, statusAttributeString, subTotal, total, totalDiscount, totalTax, type, updatedDateUTC, url, validationErrors, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Invoice {\n");
    sb.append("    amountCredited: ").append(toIndentedString(amountCredited)).append("\n");
    sb.append("    amountDue: ").append(toIndentedString(amountDue)).append("\n");
    sb.append("    amountPaid: ").append(toIndentedString(amountPaid)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    brandingThemeID: ").append(toIndentedString(brandingThemeID)).append("\n");
    sb.append("    ciSDeduction: ").append(toIndentedString(ciSDeduction)).append("\n");
    sb.append("    ciSRate: ").append(toIndentedString(ciSRate)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    creditNotes: ").append(toIndentedString(creditNotes)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currencyRate: ").append(toIndentedString(currencyRate)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    expectedPaymentDate: ").append(toIndentedString(expectedPaymentDate)).append("\n");
    sb.append("    fullyPaidOnDate: ").append(toIndentedString(fullyPaidOnDate)).append("\n");
    sb.append("    hasAttachments: ").append(toIndentedString(hasAttachments)).append("\n");
    sb.append("    hasErrors: ").append(toIndentedString(hasErrors)).append("\n");
    sb.append("    invoiceID: ").append(toIndentedString(invoiceID)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    isDiscounted: ").append(toIndentedString(isDiscounted)).append("\n");
    sb.append("    lineAmountTypes: ").append(toIndentedString(lineAmountTypes)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    overpayments: ").append(toIndentedString(overpayments)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    plannedPaymentDate: ").append(toIndentedString(plannedPaymentDate)).append("\n");
    sb.append("    prepayments: ").append(toIndentedString(prepayments)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    repeatingInvoiceID: ").append(toIndentedString(repeatingInvoiceID)).append("\n");
    sb.append("    sentToContact: ").append(toIndentedString(sentToContact)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusAttributeString: ").append(toIndentedString(statusAttributeString)).append("\n");
    sb.append("    subTotal: ").append(toIndentedString(subTotal)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totalDiscount: ").append(toIndentedString(totalDiscount)).append("\n");
    sb.append("    totalTax: ").append(toIndentedString(totalTax)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AmountCredited");
    openapiFields.add("AmountDue");
    openapiFields.add("AmountPaid");
    openapiFields.add("Attachments");
    openapiFields.add("BrandingThemeID");
    openapiFields.add("CISDeduction");
    openapiFields.add("CISRate");
    openapiFields.add("Contact");
    openapiFields.add("CreditNotes");
    openapiFields.add("CurrencyCode");
    openapiFields.add("CurrencyRate");
    openapiFields.add("Date");
    openapiFields.add("DueDate");
    openapiFields.add("ExpectedPaymentDate");
    openapiFields.add("FullyPaidOnDate");
    openapiFields.add("HasAttachments");
    openapiFields.add("HasErrors");
    openapiFields.add("InvoiceID");
    openapiFields.add("InvoiceNumber");
    openapiFields.add("IsDiscounted");
    openapiFields.add("LineAmountTypes");
    openapiFields.add("LineItems");
    openapiFields.add("Overpayments");
    openapiFields.add("Payments");
    openapiFields.add("PlannedPaymentDate");
    openapiFields.add("Prepayments");
    openapiFields.add("Reference");
    openapiFields.add("RepeatingInvoiceID");
    openapiFields.add("SentToContact");
    openapiFields.add("Status");
    openapiFields.add("StatusAttributeString");
    openapiFields.add("SubTotal");
    openapiFields.add("Total");
    openapiFields.add("TotalDiscount");
    openapiFields.add("TotalTax");
    openapiFields.add("Type");
    openapiFields.add("UpdatedDateUTC");
    openapiFields.add("Url");
    openapiFields.add("ValidationErrors");
    openapiFields.add("Warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Invoice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Invoice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Invoice is not found in the empty JSON string", Invoice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Invoice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Invoice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Attachments") != null && !jsonObj.get("Attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("Attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Attachments` to be an array in the JSON string but got `%s`", jsonObj.get("Attachments").toString()));
          }

          // validate the optional field `Attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            Attachment.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if ((jsonObj.get("BrandingThemeID") != null && !jsonObj.get("BrandingThemeID").isJsonNull()) && !jsonObj.get("BrandingThemeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BrandingThemeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BrandingThemeID").toString()));
      }
      // validate the optional field `Contact`
      if (jsonObj.get("Contact") != null && !jsonObj.get("Contact").isJsonNull()) {
        Contact.validateJsonElement(jsonObj.get("Contact"));
      }
      if (jsonObj.get("CreditNotes") != null && !jsonObj.get("CreditNotes").isJsonNull()) {
        JsonArray jsonArraycreditNotes = jsonObj.getAsJsonArray("CreditNotes");
        if (jsonArraycreditNotes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CreditNotes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CreditNotes` to be an array in the JSON string but got `%s`", jsonObj.get("CreditNotes").toString()));
          }

          // validate the optional field `CreditNotes` (array)
          for (int i = 0; i < jsonArraycreditNotes.size(); i++) {
            CreditNote.validateJsonElement(jsonArraycreditNotes.get(i));
          };
        }
      }
      if ((jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) && !jsonObj.get("CurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencyCode").toString()));
      }
      // validate the optional field `CurrencyCode`
      if (jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) {
        CurrencyCode.validateJsonElement(jsonObj.get("CurrencyCode"));
      }
      if ((jsonObj.get("Date") != null && !jsonObj.get("Date").isJsonNull()) && !jsonObj.get("Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Date").toString()));
      }
      if ((jsonObj.get("DueDate") != null && !jsonObj.get("DueDate").isJsonNull()) && !jsonObj.get("DueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DueDate").toString()));
      }
      if ((jsonObj.get("ExpectedPaymentDate") != null && !jsonObj.get("ExpectedPaymentDate").isJsonNull()) && !jsonObj.get("ExpectedPaymentDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExpectedPaymentDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExpectedPaymentDate").toString()));
      }
      if ((jsonObj.get("FullyPaidOnDate") != null && !jsonObj.get("FullyPaidOnDate").isJsonNull()) && !jsonObj.get("FullyPaidOnDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FullyPaidOnDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FullyPaidOnDate").toString()));
      }
      if ((jsonObj.get("InvoiceID") != null && !jsonObj.get("InvoiceID").isJsonNull()) && !jsonObj.get("InvoiceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InvoiceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InvoiceID").toString()));
      }
      if ((jsonObj.get("InvoiceNumber") != null && !jsonObj.get("InvoiceNumber").isJsonNull()) && !jsonObj.get("InvoiceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InvoiceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InvoiceNumber").toString()));
      }
      if ((jsonObj.get("LineAmountTypes") != null && !jsonObj.get("LineAmountTypes").isJsonNull()) && !jsonObj.get("LineAmountTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LineAmountTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LineAmountTypes").toString()));
      }
      // validate the optional field `LineAmountTypes`
      if (jsonObj.get("LineAmountTypes") != null && !jsonObj.get("LineAmountTypes").isJsonNull()) {
        LineAmountTypes.validateJsonElement(jsonObj.get("LineAmountTypes"));
      }
      if (jsonObj.get("LineItems") != null && !jsonObj.get("LineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("LineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LineItems` to be an array in the JSON string but got `%s`", jsonObj.get("LineItems").toString()));
          }

          // validate the optional field `LineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            LineItem.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      if (jsonObj.get("Overpayments") != null && !jsonObj.get("Overpayments").isJsonNull()) {
        JsonArray jsonArrayoverpayments = jsonObj.getAsJsonArray("Overpayments");
        if (jsonArrayoverpayments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Overpayments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Overpayments` to be an array in the JSON string but got `%s`", jsonObj.get("Overpayments").toString()));
          }

          // validate the optional field `Overpayments` (array)
          for (int i = 0; i < jsonArrayoverpayments.size(); i++) {
            Overpayment.validateJsonElement(jsonArrayoverpayments.get(i));
          };
        }
      }
      if (jsonObj.get("Payments") != null && !jsonObj.get("Payments").isJsonNull()) {
        JsonArray jsonArraypayments = jsonObj.getAsJsonArray("Payments");
        if (jsonArraypayments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Payments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Payments` to be an array in the JSON string but got `%s`", jsonObj.get("Payments").toString()));
          }

          // validate the optional field `Payments` (array)
          for (int i = 0; i < jsonArraypayments.size(); i++) {
            Payment.validateJsonElement(jsonArraypayments.get(i));
          };
        }
      }
      if ((jsonObj.get("PlannedPaymentDate") != null && !jsonObj.get("PlannedPaymentDate").isJsonNull()) && !jsonObj.get("PlannedPaymentDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlannedPaymentDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlannedPaymentDate").toString()));
      }
      if (jsonObj.get("Prepayments") != null && !jsonObj.get("Prepayments").isJsonNull()) {
        JsonArray jsonArrayprepayments = jsonObj.getAsJsonArray("Prepayments");
        if (jsonArrayprepayments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Prepayments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Prepayments` to be an array in the JSON string but got `%s`", jsonObj.get("Prepayments").toString()));
          }

          // validate the optional field `Prepayments` (array)
          for (int i = 0; i < jsonArrayprepayments.size(); i++) {
            Prepayment.validateJsonElement(jsonArrayprepayments.get(i));
          };
        }
      }
      if ((jsonObj.get("Reference") != null && !jsonObj.get("Reference").isJsonNull()) && !jsonObj.get("Reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Reference").toString()));
      }
      if ((jsonObj.get("RepeatingInvoiceID") != null && !jsonObj.get("RepeatingInvoiceID").isJsonNull()) && !jsonObj.get("RepeatingInvoiceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RepeatingInvoiceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RepeatingInvoiceID").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("StatusAttributeString") != null && !jsonObj.get("StatusAttributeString").isJsonNull()) && !jsonObj.get("StatusAttributeString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatusAttributeString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusAttributeString").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("Type"));
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
      if ((jsonObj.get("Url") != null && !jsonObj.get("Url").isJsonNull()) && !jsonObj.get("Url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Url").toString()));
      }
      if (jsonObj.get("ValidationErrors") != null && !jsonObj.get("ValidationErrors").isJsonNull()) {
        JsonArray jsonArrayvalidationErrors = jsonObj.getAsJsonArray("ValidationErrors");
        if (jsonArrayvalidationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ValidationErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ValidationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("ValidationErrors").toString()));
          }

          // validate the optional field `ValidationErrors` (array)
          for (int i = 0; i < jsonArrayvalidationErrors.size(); i++) {
            ValidationError.validateJsonElement(jsonArrayvalidationErrors.get(i));
          };
        }
      }
      if (jsonObj.get("Warnings") != null && !jsonObj.get("Warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("Warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Warnings` to be an array in the JSON string but got `%s`", jsonObj.get("Warnings").toString()));
          }

          // validate the optional field `Warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            ValidationError.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Invoice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Invoice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Invoice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Invoice.class));

       return (TypeAdapter<T>) new TypeAdapter<Invoice>() {
           @Override
           public void write(JsonWriter out, Invoice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Invoice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Invoice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Invoice
   * @throws IOException if the JSON string is invalid with respect to Invoice
   */
  public static Invoice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Invoice.class);
  }

  /**
   * Convert an instance of Invoice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

