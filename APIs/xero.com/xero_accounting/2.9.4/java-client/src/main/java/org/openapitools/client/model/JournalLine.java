/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.AccountType;
import org.openapitools.client.model.TrackingCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JournalLine
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JournalLine {
  public static final String SERIALIZED_NAME_ACCOUNT_CODE = "AccountCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CODE)
  private String accountCode;

  public static final String SERIALIZED_NAME_ACCOUNT_I_D = "AccountID";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_I_D)
  private UUID accountID;

  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "AccountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "AccountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private AccountType accountType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GROSS_AMOUNT = "GrossAmount";
  @SerializedName(SERIALIZED_NAME_GROSS_AMOUNT)
  private Double grossAmount;

  public static final String SERIALIZED_NAME_JOURNAL_LINE_I_D = "JournalLineID";
  @SerializedName(SERIALIZED_NAME_JOURNAL_LINE_I_D)
  private UUID journalLineID;

  public static final String SERIALIZED_NAME_NET_AMOUNT = "NetAmount";
  @SerializedName(SERIALIZED_NAME_NET_AMOUNT)
  private Double netAmount;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "TaxAmount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private Double taxAmount;

  public static final String SERIALIZED_NAME_TAX_NAME = "TaxName";
  @SerializedName(SERIALIZED_NAME_TAX_NAME)
  private String taxName;

  public static final String SERIALIZED_NAME_TAX_TYPE = "TaxType";
  @SerializedName(SERIALIZED_NAME_TAX_TYPE)
  private String taxType;

  public static final String SERIALIZED_NAME_TRACKING_CATEGORIES = "TrackingCategories";
  @SerializedName(SERIALIZED_NAME_TRACKING_CATEGORIES)
  private List<TrackingCategory> trackingCategories = new ArrayList<>();

  public JournalLine() {
  }

  public JournalLine(
     Double taxAmount
  ) {
    this();
    this.taxAmount = taxAmount;
  }

  public JournalLine accountCode(String accountCode) {
    this.accountCode = accountCode;
    return this;
  }

  /**
   * See Accounts
   * @return accountCode
   */
  @javax.annotation.Nullable
  public String getAccountCode() {
    return accountCode;
  }

  public void setAccountCode(String accountCode) {
    this.accountCode = accountCode;
  }


  public JournalLine accountID(UUID accountID) {
    this.accountID = accountID;
    return this;
  }

  /**
   * See Accounts
   * @return accountID
   */
  @javax.annotation.Nullable
  public UUID getAccountID() {
    return accountID;
  }

  public void setAccountID(UUID accountID) {
    this.accountID = accountID;
  }


  public JournalLine accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * See AccountCodes
   * @return accountName
   */
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public JournalLine accountType(AccountType accountType) {
    this.accountType = accountType;
    return this;
  }

  /**
   * Get accountType
   * @return accountType
   */
  @javax.annotation.Nullable
  public AccountType getAccountType() {
    return accountType;
  }

  public void setAccountType(AccountType accountType) {
    this.accountType = accountType;
  }


  public JournalLine description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description from the source transaction line item. Only returned if populated.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public JournalLine grossAmount(Double grossAmount) {
    this.grossAmount = grossAmount;
    return this;
  }

  /**
   * Gross amount of journal line (NetAmount + TaxAmount).
   * @return grossAmount
   */
  @javax.annotation.Nullable
  public Double getGrossAmount() {
    return grossAmount;
  }

  public void setGrossAmount(Double grossAmount) {
    this.grossAmount = grossAmount;
  }


  public JournalLine journalLineID(UUID journalLineID) {
    this.journalLineID = journalLineID;
    return this;
  }

  /**
   * Xero identifier for Journal
   * @return journalLineID
   */
  @javax.annotation.Nullable
  public UUID getJournalLineID() {
    return journalLineID;
  }

  public void setJournalLineID(UUID journalLineID) {
    this.journalLineID = journalLineID;
  }


  public JournalLine netAmount(Double netAmount) {
    this.netAmount = netAmount;
    return this;
  }

  /**
   * Net amount of journal line. This will be a positive value for a debit and negative for a credit
   * @return netAmount
   */
  @javax.annotation.Nullable
  public Double getNetAmount() {
    return netAmount;
  }

  public void setNetAmount(Double netAmount) {
    this.netAmount = netAmount;
  }


  /**
   * Total tax on a journal line
   * @return taxAmount
   */
  @javax.annotation.Nullable
  public Double getTaxAmount() {
    return taxAmount;
  }



  public JournalLine taxName(String taxName) {
    this.taxName = taxName;
    return this;
  }

  /**
   * see TaxRates
   * @return taxName
   */
  @javax.annotation.Nullable
  public String getTaxName() {
    return taxName;
  }

  public void setTaxName(String taxName) {
    this.taxName = taxName;
  }


  public JournalLine taxType(String taxType) {
    this.taxType = taxType;
    return this;
  }

  /**
   * The tax type from TaxRates
   * @return taxType
   */
  @javax.annotation.Nullable
  public String getTaxType() {
    return taxType;
  }

  public void setTaxType(String taxType) {
    this.taxType = taxType;
  }


  public JournalLine trackingCategories(List<TrackingCategory> trackingCategories) {
    this.trackingCategories = trackingCategories;
    return this;
  }

  public JournalLine addTrackingCategoriesItem(TrackingCategory trackingCategoriesItem) {
    if (this.trackingCategories == null) {
      this.trackingCategories = new ArrayList<>();
    }
    this.trackingCategories.add(trackingCategoriesItem);
    return this;
  }

  /**
   * Optional Tracking Category â€“ see Tracking. Any JournalLine can have a maximum of 2 &lt;TrackingCategory&gt; elements.
   * @return trackingCategories
   */
  @javax.annotation.Nullable
  public List<TrackingCategory> getTrackingCategories() {
    return trackingCategories;
  }

  public void setTrackingCategories(List<TrackingCategory> trackingCategories) {
    this.trackingCategories = trackingCategories;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JournalLine journalLine = (JournalLine) o;
    return Objects.equals(this.accountCode, journalLine.accountCode) &&
        Objects.equals(this.accountID, journalLine.accountID) &&
        Objects.equals(this.accountName, journalLine.accountName) &&
        Objects.equals(this.accountType, journalLine.accountType) &&
        Objects.equals(this.description, journalLine.description) &&
        Objects.equals(this.grossAmount, journalLine.grossAmount) &&
        Objects.equals(this.journalLineID, journalLine.journalLineID) &&
        Objects.equals(this.netAmount, journalLine.netAmount) &&
        Objects.equals(this.taxAmount, journalLine.taxAmount) &&
        Objects.equals(this.taxName, journalLine.taxName) &&
        Objects.equals(this.taxType, journalLine.taxType) &&
        Objects.equals(this.trackingCategories, journalLine.trackingCategories);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountCode, accountID, accountName, accountType, description, grossAmount, journalLineID, netAmount, taxAmount, taxName, taxType, trackingCategories);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JournalLine {\n");
    sb.append("    accountCode: ").append(toIndentedString(accountCode)).append("\n");
    sb.append("    accountID: ").append(toIndentedString(accountID)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    grossAmount: ").append(toIndentedString(grossAmount)).append("\n");
    sb.append("    journalLineID: ").append(toIndentedString(journalLineID)).append("\n");
    sb.append("    netAmount: ").append(toIndentedString(netAmount)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    taxName: ").append(toIndentedString(taxName)).append("\n");
    sb.append("    taxType: ").append(toIndentedString(taxType)).append("\n");
    sb.append("    trackingCategories: ").append(toIndentedString(trackingCategories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountCode");
    openapiFields.add("AccountID");
    openapiFields.add("AccountName");
    openapiFields.add("AccountType");
    openapiFields.add("Description");
    openapiFields.add("GrossAmount");
    openapiFields.add("JournalLineID");
    openapiFields.add("NetAmount");
    openapiFields.add("TaxAmount");
    openapiFields.add("TaxName");
    openapiFields.add("TaxType");
    openapiFields.add("TrackingCategories");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JournalLine
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JournalLine.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JournalLine is not found in the empty JSON string", JournalLine.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JournalLine.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JournalLine` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccountCode") != null && !jsonObj.get("AccountCode").isJsonNull()) && !jsonObj.get("AccountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountCode").toString()));
      }
      if ((jsonObj.get("AccountID") != null && !jsonObj.get("AccountID").isJsonNull()) && !jsonObj.get("AccountID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountID").toString()));
      }
      if ((jsonObj.get("AccountName") != null && !jsonObj.get("AccountName").isJsonNull()) && !jsonObj.get("AccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountName").toString()));
      }
      if ((jsonObj.get("AccountType") != null && !jsonObj.get("AccountType").isJsonNull()) && !jsonObj.get("AccountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountType").toString()));
      }
      // validate the optional field `AccountType`
      if (jsonObj.get("AccountType") != null && !jsonObj.get("AccountType").isJsonNull()) {
        AccountType.validateJsonElement(jsonObj.get("AccountType"));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("JournalLineID") != null && !jsonObj.get("JournalLineID").isJsonNull()) && !jsonObj.get("JournalLineID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JournalLineID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JournalLineID").toString()));
      }
      if ((jsonObj.get("TaxName") != null && !jsonObj.get("TaxName").isJsonNull()) && !jsonObj.get("TaxName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxName").toString()));
      }
      if ((jsonObj.get("TaxType") != null && !jsonObj.get("TaxType").isJsonNull()) && !jsonObj.get("TaxType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxType").toString()));
      }
      if (jsonObj.get("TrackingCategories") != null && !jsonObj.get("TrackingCategories").isJsonNull()) {
        JsonArray jsonArraytrackingCategories = jsonObj.getAsJsonArray("TrackingCategories");
        if (jsonArraytrackingCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TrackingCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TrackingCategories` to be an array in the JSON string but got `%s`", jsonObj.get("TrackingCategories").toString()));
          }

          // validate the optional field `TrackingCategories` (array)
          for (int i = 0; i < jsonArraytrackingCategories.size(); i++) {
            TrackingCategory.validateJsonElement(jsonArraytrackingCategories.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JournalLine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JournalLine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JournalLine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JournalLine.class));

       return (TypeAdapter<T>) new TypeAdapter<JournalLine>() {
           @Override
           public void write(JsonWriter out, JournalLine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JournalLine read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JournalLine given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JournalLine
   * @throws IOException if the JSON string is invalid with respect to JournalLine
   */
  public static JournalLine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JournalLine.class);
  }

  /**
   * Convert an instance of JournalLine to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

