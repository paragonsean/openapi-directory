/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.AccountType;
import org.openapitools.client.model.CurrencyCode;
import org.openapitools.client.model.ValidationError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Account {
  public static final String SERIALIZED_NAME_ACCOUNT_I_D = "AccountID";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_I_D)
  private UUID accountID;

  public static final String SERIALIZED_NAME_ADD_TO_WATCHLIST = "AddToWatchlist";
  @SerializedName(SERIALIZED_NAME_ADD_TO_WATCHLIST)
  private Boolean addToWatchlist;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_NUMBER = "BankAccountNumber";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_NUMBER)
  private String bankAccountNumber;

  /**
   * For bank accounts only. See Bank Account types
   */
  @JsonAdapter(BankAccountTypeEnum.Adapter.class)
  public enum BankAccountTypeEnum {
    BANK("BANK"),
    
    CREDITCARD("CREDITCARD"),
    
    PAYPAL("PAYPAL"),
    
    NONE("NONE"),
    
    EMPTY("");

    private String value;

    BankAccountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BankAccountTypeEnum fromValue(String value) {
      for (BankAccountTypeEnum b : BankAccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BankAccountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BankAccountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BankAccountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BankAccountTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BankAccountTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_TYPE = "BankAccountType";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_TYPE)
  private BankAccountTypeEnum bankAccountType;

  /**
   * See Account Class Types
   */
  @JsonAdapter(PropertyClassEnum.Adapter.class)
  public enum PropertyClassEnum {
    ASSET("ASSET"),
    
    EQUITY("EQUITY"),
    
    EXPENSE("EXPENSE"),
    
    LIABILITY("LIABILITY"),
    
    REVENUE("REVENUE");

    private String value;

    PropertyClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PropertyClassEnum fromValue(String value) {
      for (PropertyClassEnum b : PropertyClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PropertyClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PropertyClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PropertyClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PropertyClassEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PropertyClassEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "Class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  private PropertyClassEnum propertyClass;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private CurrencyCode currencyCode;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLE_PAYMENTS_TO_ACCOUNT = "EnablePaymentsToAccount";
  @SerializedName(SERIALIZED_NAME_ENABLE_PAYMENTS_TO_ACCOUNT)
  private Boolean enablePaymentsToAccount;

  public static final String SERIALIZED_NAME_HAS_ATTACHMENTS = "HasAttachments";
  @SerializedName(SERIALIZED_NAME_HAS_ATTACHMENTS)
  private Boolean hasAttachments = false;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REPORTING_CODE = "ReportingCode";
  @SerializedName(SERIALIZED_NAME_REPORTING_CODE)
  private String reportingCode;

  public static final String SERIALIZED_NAME_REPORTING_CODE_NAME = "ReportingCodeName";
  @SerializedName(SERIALIZED_NAME_REPORTING_CODE_NAME)
  private String reportingCodeName;

  public static final String SERIALIZED_NAME_SHOW_IN_EXPENSE_CLAIMS = "ShowInExpenseClaims";
  @SerializedName(SERIALIZED_NAME_SHOW_IN_EXPENSE_CLAIMS)
  private Boolean showInExpenseClaims;

  /**
   * Accounts with a status of ACTIVE can be updated to ARCHIVED. See Account Status Codes
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    ARCHIVED("ARCHIVED"),
    
    DELETED("DELETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * If this is a system account then this element is returned. See System Account types. Note that non-system accounts may have this element set as either “” or null.
   */
  @JsonAdapter(SystemAccountEnum.Adapter.class)
  public enum SystemAccountEnum {
    DEBTORS("DEBTORS"),
    
    CREDITORS("CREDITORS"),
    
    BANKCURRENCYGAIN("BANKCURRENCYGAIN"),
    
    GST("GST"),
    
    GSTONIMPORTS("GSTONIMPORTS"),
    
    HISTORICAL("HISTORICAL"),
    
    REALISEDCURRENCYGAIN("REALISEDCURRENCYGAIN"),
    
    RETAINEDEARNINGS("RETAINEDEARNINGS"),
    
    ROUNDING("ROUNDING"),
    
    TRACKINGTRANSFERS("TRACKINGTRANSFERS"),
    
    UNPAIDEXPCLM("UNPAIDEXPCLM"),
    
    UNREALISEDCURRENCYGAIN("UNREALISEDCURRENCYGAIN"),
    
    WAGEPAYABLES("WAGEPAYABLES"),
    
    CISASSETS("CISASSETS"),
    
    CISASSET("CISASSET"),
    
    CISLABOUR("CISLABOUR"),
    
    CISLABOUREXPENSE("CISLABOUREXPENSE"),
    
    CISLABOURINCOME("CISLABOURINCOME"),
    
    CISLIABILITY("CISLIABILITY"),
    
    CISMATERIALS("CISMATERIALS"),
    
    EMPTY("");

    private String value;

    SystemAccountEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SystemAccountEnum fromValue(String value) {
      for (SystemAccountEnum b : SystemAccountEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SystemAccountEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SystemAccountEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SystemAccountEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SystemAccountEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SystemAccountEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYSTEM_ACCOUNT = "SystemAccount";
  @SerializedName(SERIALIZED_NAME_SYSTEM_ACCOUNT)
  private SystemAccountEnum systemAccount;

  public static final String SERIALIZED_NAME_TAX_TYPE = "TaxType";
  @SerializedName(SERIALIZED_NAME_TAX_TYPE)
  private String taxType;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private AccountType type;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "ValidationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<ValidationError> validationErrors = new ArrayList<>();

  public Account() {
  }

  public Account(
     PropertyClassEnum propertyClass, 
     Boolean hasAttachments, 
     String reportingCodeName, 
     SystemAccountEnum systemAccount, 
     String updatedDateUTC
  ) {
    this();
    this.propertyClass = propertyClass;
    this.hasAttachments = hasAttachments;
    this.reportingCodeName = reportingCodeName;
    this.systemAccount = systemAccount;
    this.updatedDateUTC = updatedDateUTC;
  }

  public Account accountID(UUID accountID) {
    this.accountID = accountID;
    return this;
  }

  /**
   * The Xero identifier for an account – specified as a string following  the endpoint name   e.g. /297c2dc5-cc47-4afd-8ec8-74990b8761e9
   * @return accountID
   */
  @javax.annotation.Nullable
  public UUID getAccountID() {
    return accountID;
  }

  public void setAccountID(UUID accountID) {
    this.accountID = accountID;
  }


  public Account addToWatchlist(Boolean addToWatchlist) {
    this.addToWatchlist = addToWatchlist;
    return this;
  }

  /**
   * Boolean – describes whether the account is shown in the watchlist widget on the dashboard
   * @return addToWatchlist
   */
  @javax.annotation.Nullable
  public Boolean getAddToWatchlist() {
    return addToWatchlist;
  }

  public void setAddToWatchlist(Boolean addToWatchlist) {
    this.addToWatchlist = addToWatchlist;
  }


  public Account bankAccountNumber(String bankAccountNumber) {
    this.bankAccountNumber = bankAccountNumber;
    return this;
  }

  /**
   * For bank accounts only (Account Type BANK)
   * @return bankAccountNumber
   */
  @javax.annotation.Nullable
  public String getBankAccountNumber() {
    return bankAccountNumber;
  }

  public void setBankAccountNumber(String bankAccountNumber) {
    this.bankAccountNumber = bankAccountNumber;
  }


  public Account bankAccountType(BankAccountTypeEnum bankAccountType) {
    this.bankAccountType = bankAccountType;
    return this;
  }

  /**
   * For bank accounts only. See Bank Account types
   * @return bankAccountType
   */
  @javax.annotation.Nullable
  public BankAccountTypeEnum getBankAccountType() {
    return bankAccountType;
  }

  public void setBankAccountType(BankAccountTypeEnum bankAccountType) {
    this.bankAccountType = bankAccountType;
  }


  /**
   * See Account Class Types
   * @return propertyClass
   */
  @javax.annotation.Nullable
  public PropertyClassEnum getPropertyClass() {
    return propertyClass;
  }



  public Account code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Customer defined alpha numeric account code e.g 200 or SALES (max length &#x3D; 10)
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public Account currencyCode(CurrencyCode currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public CurrencyCode getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(CurrencyCode currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Account description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the Account. Valid for all types of accounts except bank accounts (max length &#x3D; 4000)
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Account enablePaymentsToAccount(Boolean enablePaymentsToAccount) {
    this.enablePaymentsToAccount = enablePaymentsToAccount;
    return this;
  }

  /**
   * Boolean – describes whether account can have payments applied to it
   * @return enablePaymentsToAccount
   */
  @javax.annotation.Nullable
  public Boolean getEnablePaymentsToAccount() {
    return enablePaymentsToAccount;
  }

  public void setEnablePaymentsToAccount(Boolean enablePaymentsToAccount) {
    this.enablePaymentsToAccount = enablePaymentsToAccount;
  }


  /**
   * boolean to indicate if an account has an attachment (read only)
   * @return hasAttachments
   */
  @javax.annotation.Nullable
  public Boolean getHasAttachments() {
    return hasAttachments;
  }



  public Account name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of account (max length &#x3D; 150)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Account reportingCode(String reportingCode) {
    this.reportingCode = reportingCode;
    return this;
  }

  /**
   * Shown if set
   * @return reportingCode
   */
  @javax.annotation.Nullable
  public String getReportingCode() {
    return reportingCode;
  }

  public void setReportingCode(String reportingCode) {
    this.reportingCode = reportingCode;
  }


  /**
   * Shown if set
   * @return reportingCodeName
   */
  @javax.annotation.Nullable
  public String getReportingCodeName() {
    return reportingCodeName;
  }



  public Account showInExpenseClaims(Boolean showInExpenseClaims) {
    this.showInExpenseClaims = showInExpenseClaims;
    return this;
  }

  /**
   * Boolean – describes whether account code is available for use with expense claims
   * @return showInExpenseClaims
   */
  @javax.annotation.Nullable
  public Boolean getShowInExpenseClaims() {
    return showInExpenseClaims;
  }

  public void setShowInExpenseClaims(Boolean showInExpenseClaims) {
    this.showInExpenseClaims = showInExpenseClaims;
  }


  public Account status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Accounts with a status of ACTIVE can be updated to ARCHIVED. See Account Status Codes
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  /**
   * If this is a system account then this element is returned. See System Account types. Note that non-system accounts may have this element set as either “” or null.
   * @return systemAccount
   */
  @javax.annotation.Nullable
  public SystemAccountEnum getSystemAccount() {
    return systemAccount;
  }



  public Account taxType(String taxType) {
    this.taxType = taxType;
    return this;
  }

  /**
   * The tax type from TaxRates
   * @return taxType
   */
  @javax.annotation.Nullable
  public String getTaxType() {
    return taxType;
  }

  public void setTaxType(String taxType) {
    this.taxType = taxType;
  }


  public Account type(AccountType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public AccountType getType() {
    return type;
  }

  public void setType(AccountType type) {
    this.type = type;
  }


  /**
   * Last modified date UTC format
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }



  public Account validationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public Account addValidationErrorsItem(ValidationError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Displays array of validation error messages from the API
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<ValidationError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.accountID, account.accountID) &&
        Objects.equals(this.addToWatchlist, account.addToWatchlist) &&
        Objects.equals(this.bankAccountNumber, account.bankAccountNumber) &&
        Objects.equals(this.bankAccountType, account.bankAccountType) &&
        Objects.equals(this.propertyClass, account.propertyClass) &&
        Objects.equals(this.code, account.code) &&
        Objects.equals(this.currencyCode, account.currencyCode) &&
        Objects.equals(this.description, account.description) &&
        Objects.equals(this.enablePaymentsToAccount, account.enablePaymentsToAccount) &&
        Objects.equals(this.hasAttachments, account.hasAttachments) &&
        Objects.equals(this.name, account.name) &&
        Objects.equals(this.reportingCode, account.reportingCode) &&
        Objects.equals(this.reportingCodeName, account.reportingCodeName) &&
        Objects.equals(this.showInExpenseClaims, account.showInExpenseClaims) &&
        Objects.equals(this.status, account.status) &&
        Objects.equals(this.systemAccount, account.systemAccount) &&
        Objects.equals(this.taxType, account.taxType) &&
        Objects.equals(this.type, account.type) &&
        Objects.equals(this.updatedDateUTC, account.updatedDateUTC) &&
        Objects.equals(this.validationErrors, account.validationErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountID, addToWatchlist, bankAccountNumber, bankAccountType, propertyClass, code, currencyCode, description, enablePaymentsToAccount, hasAttachments, name, reportingCode, reportingCodeName, showInExpenseClaims, status, systemAccount, taxType, type, updatedDateUTC, validationErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    accountID: ").append(toIndentedString(accountID)).append("\n");
    sb.append("    addToWatchlist: ").append(toIndentedString(addToWatchlist)).append("\n");
    sb.append("    bankAccountNumber: ").append(toIndentedString(bankAccountNumber)).append("\n");
    sb.append("    bankAccountType: ").append(toIndentedString(bankAccountType)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enablePaymentsToAccount: ").append(toIndentedString(enablePaymentsToAccount)).append("\n");
    sb.append("    hasAttachments: ").append(toIndentedString(hasAttachments)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    reportingCode: ").append(toIndentedString(reportingCode)).append("\n");
    sb.append("    reportingCodeName: ").append(toIndentedString(reportingCodeName)).append("\n");
    sb.append("    showInExpenseClaims: ").append(toIndentedString(showInExpenseClaims)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    systemAccount: ").append(toIndentedString(systemAccount)).append("\n");
    sb.append("    taxType: ").append(toIndentedString(taxType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountID");
    openapiFields.add("AddToWatchlist");
    openapiFields.add("BankAccountNumber");
    openapiFields.add("BankAccountType");
    openapiFields.add("Class");
    openapiFields.add("Code");
    openapiFields.add("CurrencyCode");
    openapiFields.add("Description");
    openapiFields.add("EnablePaymentsToAccount");
    openapiFields.add("HasAttachments");
    openapiFields.add("Name");
    openapiFields.add("ReportingCode");
    openapiFields.add("ReportingCodeName");
    openapiFields.add("ShowInExpenseClaims");
    openapiFields.add("Status");
    openapiFields.add("SystemAccount");
    openapiFields.add("TaxType");
    openapiFields.add("Type");
    openapiFields.add("UpdatedDateUTC");
    openapiFields.add("ValidationErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Account
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccountID") != null && !jsonObj.get("AccountID").isJsonNull()) && !jsonObj.get("AccountID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountID").toString()));
      }
      if ((jsonObj.get("BankAccountNumber") != null && !jsonObj.get("BankAccountNumber").isJsonNull()) && !jsonObj.get("BankAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BankAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BankAccountNumber").toString()));
      }
      if ((jsonObj.get("BankAccountType") != null && !jsonObj.get("BankAccountType").isJsonNull()) && !jsonObj.get("BankAccountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BankAccountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BankAccountType").toString()));
      }
      // validate the optional field `BankAccountType`
      if (jsonObj.get("BankAccountType") != null && !jsonObj.get("BankAccountType").isJsonNull()) {
        BankAccountTypeEnum.validateJsonElement(jsonObj.get("BankAccountType"));
      }
      if ((jsonObj.get("Class") != null && !jsonObj.get("Class").isJsonNull()) && !jsonObj.get("Class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Class").toString()));
      }
      // validate the optional field `Class`
      if (jsonObj.get("Class") != null && !jsonObj.get("Class").isJsonNull()) {
        PropertyClassEnum.validateJsonElement(jsonObj.get("Class"));
      }
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      if ((jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) && !jsonObj.get("CurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencyCode").toString()));
      }
      // validate the optional field `CurrencyCode`
      if (jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) {
        CurrencyCode.validateJsonElement(jsonObj.get("CurrencyCode"));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("ReportingCode") != null && !jsonObj.get("ReportingCode").isJsonNull()) && !jsonObj.get("ReportingCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportingCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportingCode").toString()));
      }
      if ((jsonObj.get("ReportingCodeName") != null && !jsonObj.get("ReportingCodeName").isJsonNull()) && !jsonObj.get("ReportingCodeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportingCodeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportingCodeName").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("SystemAccount") != null && !jsonObj.get("SystemAccount").isJsonNull()) && !jsonObj.get("SystemAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SystemAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SystemAccount").toString()));
      }
      // validate the optional field `SystemAccount`
      if (jsonObj.get("SystemAccount") != null && !jsonObj.get("SystemAccount").isJsonNull()) {
        SystemAccountEnum.validateJsonElement(jsonObj.get("SystemAccount"));
      }
      if ((jsonObj.get("TaxType") != null && !jsonObj.get("TaxType").isJsonNull()) && !jsonObj.get("TaxType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxType").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        AccountType.validateJsonElement(jsonObj.get("Type"));
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
      if (jsonObj.get("ValidationErrors") != null && !jsonObj.get("ValidationErrors").isJsonNull()) {
        JsonArray jsonArrayvalidationErrors = jsonObj.getAsJsonArray("ValidationErrors");
        if (jsonArrayvalidationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ValidationErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ValidationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("ValidationErrors").toString()));
          }

          // validate the optional field `ValidationErrors` (array)
          for (int i = 0; i < jsonArrayvalidationErrors.size(); i++) {
            ValidationError.validateJsonElement(jsonArrayvalidationErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Account given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Account
   * @throws IOException if the JSON string is invalid with respect to Account
   */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

  /**
   * Convert an instance of Account to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

