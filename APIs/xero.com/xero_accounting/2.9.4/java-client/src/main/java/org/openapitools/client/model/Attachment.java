/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Attachment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attachment {
  public static final String SERIALIZED_NAME_ATTACHMENT_I_D = "AttachmentID";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_I_D)
  private UUID attachmentID;

  public static final String SERIALIZED_NAME_CONTENT_LENGTH = "ContentLength";
  @SerializedName(SERIALIZED_NAME_CONTENT_LENGTH)
  private Integer contentLength;

  public static final String SERIALIZED_NAME_FILE_NAME = "FileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_INCLUDE_ONLINE = "IncludeOnline";
  @SerializedName(SERIALIZED_NAME_INCLUDE_ONLINE)
  private Boolean includeOnline;

  public static final String SERIALIZED_NAME_MIME_TYPE = "MimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_URL = "Url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Attachment() {
  }

  public Attachment attachmentID(UUID attachmentID) {
    this.attachmentID = attachmentID;
    return this;
  }

  /**
   * Unique ID for the file
   * @return attachmentID
   */
  @javax.annotation.Nullable
  public UUID getAttachmentID() {
    return attachmentID;
  }

  public void setAttachmentID(UUID attachmentID) {
    this.attachmentID = attachmentID;
  }


  public Attachment contentLength(Integer contentLength) {
    this.contentLength = contentLength;
    return this;
  }

  /**
   * Length of the file content
   * @return contentLength
   */
  @javax.annotation.Nullable
  public Integer getContentLength() {
    return contentLength;
  }

  public void setContentLength(Integer contentLength) {
    this.contentLength = contentLength;
  }


  public Attachment fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * Name of the file
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public Attachment includeOnline(Boolean includeOnline) {
    this.includeOnline = includeOnline;
    return this;
  }

  /**
   * Include the file with the online invoice
   * @return includeOnline
   */
  @javax.annotation.Nullable
  public Boolean getIncludeOnline() {
    return includeOnline;
  }

  public void setIncludeOnline(Boolean includeOnline) {
    this.includeOnline = includeOnline;
  }


  public Attachment mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * Type of file
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public Attachment url(String url) {
    this.url = url;
    return this;
  }

  /**
   * URL to the file on xero.com
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attachment attachment = (Attachment) o;
    return Objects.equals(this.attachmentID, attachment.attachmentID) &&
        Objects.equals(this.contentLength, attachment.contentLength) &&
        Objects.equals(this.fileName, attachment.fileName) &&
        Objects.equals(this.includeOnline, attachment.includeOnline) &&
        Objects.equals(this.mimeType, attachment.mimeType) &&
        Objects.equals(this.url, attachment.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachmentID, contentLength, fileName, includeOnline, mimeType, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attachment {\n");
    sb.append("    attachmentID: ").append(toIndentedString(attachmentID)).append("\n");
    sb.append("    contentLength: ").append(toIndentedString(contentLength)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    includeOnline: ").append(toIndentedString(includeOnline)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AttachmentID");
    openapiFields.add("ContentLength");
    openapiFields.add("FileName");
    openapiFields.add("IncludeOnline");
    openapiFields.add("MimeType");
    openapiFields.add("Url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attachment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attachment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attachment is not found in the empty JSON string", Attachment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attachment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attachment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AttachmentID") != null && !jsonObj.get("AttachmentID").isJsonNull()) && !jsonObj.get("AttachmentID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttachmentID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttachmentID").toString()));
      }
      if ((jsonObj.get("FileName") != null && !jsonObj.get("FileName").isJsonNull()) && !jsonObj.get("FileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FileName").toString()));
      }
      if ((jsonObj.get("MimeType") != null && !jsonObj.get("MimeType").isJsonNull()) && !jsonObj.get("MimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MimeType").toString()));
      }
      if ((jsonObj.get("Url") != null && !jsonObj.get("Url").isJsonNull()) && !jsonObj.get("Url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attachment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attachment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attachment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attachment.class));

       return (TypeAdapter<T>) new TypeAdapter<Attachment>() {
           @Override
           public void write(JsonWriter out, Attachment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attachment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attachment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attachment
   * @throws IOException if the JSON string is invalid with respect to Attachment
   */
  public static Attachment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attachment.class);
  }

  /**
   * Convert an instance of Attachment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

