/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ValidationError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Element
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Element {
  public static final String SERIALIZED_NAME_BANK_TRANSACTION_I_D = "BankTransactionID";
  @SerializedName(SERIALIZED_NAME_BANK_TRANSACTION_I_D)
  private UUID bankTransactionID;

  public static final String SERIALIZED_NAME_BATCH_PAYMENT_I_D = "BatchPaymentID";
  @SerializedName(SERIALIZED_NAME_BATCH_PAYMENT_I_D)
  private UUID batchPaymentID;

  public static final String SERIALIZED_NAME_CONTACT_I_D = "ContactID";
  @SerializedName(SERIALIZED_NAME_CONTACT_I_D)
  private UUID contactID;

  public static final String SERIALIZED_NAME_CREDIT_NOTE_I_D = "CreditNoteID";
  @SerializedName(SERIALIZED_NAME_CREDIT_NOTE_I_D)
  private UUID creditNoteID;

  public static final String SERIALIZED_NAME_INVOICE_I_D = "InvoiceID";
  @SerializedName(SERIALIZED_NAME_INVOICE_I_D)
  private UUID invoiceID;

  public static final String SERIALIZED_NAME_ITEM_I_D = "ItemID";
  @SerializedName(SERIALIZED_NAME_ITEM_I_D)
  private UUID itemID;

  public static final String SERIALIZED_NAME_PURCHASE_ORDER_I_D = "PurchaseOrderID";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER_I_D)
  private UUID purchaseOrderID;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "ValidationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<ValidationError> validationErrors = new ArrayList<>();

  public Element() {
  }

  public Element bankTransactionID(UUID bankTransactionID) {
    this.bankTransactionID = bankTransactionID;
    return this;
  }

  /**
   * Get bankTransactionID
   * @return bankTransactionID
   */
  @javax.annotation.Nullable
  public UUID getBankTransactionID() {
    return bankTransactionID;
  }

  public void setBankTransactionID(UUID bankTransactionID) {
    this.bankTransactionID = bankTransactionID;
  }


  public Element batchPaymentID(UUID batchPaymentID) {
    this.batchPaymentID = batchPaymentID;
    return this;
  }

  /**
   * Unique ID for batch payment object with validation error
   * @return batchPaymentID
   */
  @javax.annotation.Nullable
  public UUID getBatchPaymentID() {
    return batchPaymentID;
  }

  public void setBatchPaymentID(UUID batchPaymentID) {
    this.batchPaymentID = batchPaymentID;
  }


  public Element contactID(UUID contactID) {
    this.contactID = contactID;
    return this;
  }

  /**
   * Get contactID
   * @return contactID
   */
  @javax.annotation.Nullable
  public UUID getContactID() {
    return contactID;
  }

  public void setContactID(UUID contactID) {
    this.contactID = contactID;
  }


  public Element creditNoteID(UUID creditNoteID) {
    this.creditNoteID = creditNoteID;
    return this;
  }

  /**
   * Get creditNoteID
   * @return creditNoteID
   */
  @javax.annotation.Nullable
  public UUID getCreditNoteID() {
    return creditNoteID;
  }

  public void setCreditNoteID(UUID creditNoteID) {
    this.creditNoteID = creditNoteID;
  }


  public Element invoiceID(UUID invoiceID) {
    this.invoiceID = invoiceID;
    return this;
  }

  /**
   * Get invoiceID
   * @return invoiceID
   */
  @javax.annotation.Nullable
  public UUID getInvoiceID() {
    return invoiceID;
  }

  public void setInvoiceID(UUID invoiceID) {
    this.invoiceID = invoiceID;
  }


  public Element itemID(UUID itemID) {
    this.itemID = itemID;
    return this;
  }

  /**
   * Get itemID
   * @return itemID
   */
  @javax.annotation.Nullable
  public UUID getItemID() {
    return itemID;
  }

  public void setItemID(UUID itemID) {
    this.itemID = itemID;
  }


  public Element purchaseOrderID(UUID purchaseOrderID) {
    this.purchaseOrderID = purchaseOrderID;
    return this;
  }

  /**
   * Get purchaseOrderID
   * @return purchaseOrderID
   */
  @javax.annotation.Nullable
  public UUID getPurchaseOrderID() {
    return purchaseOrderID;
  }

  public void setPurchaseOrderID(UUID purchaseOrderID) {
    this.purchaseOrderID = purchaseOrderID;
  }


  public Element validationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public Element addValidationErrorsItem(ValidationError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Array of Validation Error message
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<ValidationError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Element element = (Element) o;
    return Objects.equals(this.bankTransactionID, element.bankTransactionID) &&
        Objects.equals(this.batchPaymentID, element.batchPaymentID) &&
        Objects.equals(this.contactID, element.contactID) &&
        Objects.equals(this.creditNoteID, element.creditNoteID) &&
        Objects.equals(this.invoiceID, element.invoiceID) &&
        Objects.equals(this.itemID, element.itemID) &&
        Objects.equals(this.purchaseOrderID, element.purchaseOrderID) &&
        Objects.equals(this.validationErrors, element.validationErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bankTransactionID, batchPaymentID, contactID, creditNoteID, invoiceID, itemID, purchaseOrderID, validationErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Element {\n");
    sb.append("    bankTransactionID: ").append(toIndentedString(bankTransactionID)).append("\n");
    sb.append("    batchPaymentID: ").append(toIndentedString(batchPaymentID)).append("\n");
    sb.append("    contactID: ").append(toIndentedString(contactID)).append("\n");
    sb.append("    creditNoteID: ").append(toIndentedString(creditNoteID)).append("\n");
    sb.append("    invoiceID: ").append(toIndentedString(invoiceID)).append("\n");
    sb.append("    itemID: ").append(toIndentedString(itemID)).append("\n");
    sb.append("    purchaseOrderID: ").append(toIndentedString(purchaseOrderID)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BankTransactionID");
    openapiFields.add("BatchPaymentID");
    openapiFields.add("ContactID");
    openapiFields.add("CreditNoteID");
    openapiFields.add("InvoiceID");
    openapiFields.add("ItemID");
    openapiFields.add("PurchaseOrderID");
    openapiFields.add("ValidationErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Element
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Element.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Element is not found in the empty JSON string", Element.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Element.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Element` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BankTransactionID") != null && !jsonObj.get("BankTransactionID").isJsonNull()) && !jsonObj.get("BankTransactionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BankTransactionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BankTransactionID").toString()));
      }
      if ((jsonObj.get("BatchPaymentID") != null && !jsonObj.get("BatchPaymentID").isJsonNull()) && !jsonObj.get("BatchPaymentID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BatchPaymentID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BatchPaymentID").toString()));
      }
      if ((jsonObj.get("ContactID") != null && !jsonObj.get("ContactID").isJsonNull()) && !jsonObj.get("ContactID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactID").toString()));
      }
      if ((jsonObj.get("CreditNoteID") != null && !jsonObj.get("CreditNoteID").isJsonNull()) && !jsonObj.get("CreditNoteID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CreditNoteID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CreditNoteID").toString()));
      }
      if ((jsonObj.get("InvoiceID") != null && !jsonObj.get("InvoiceID").isJsonNull()) && !jsonObj.get("InvoiceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InvoiceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InvoiceID").toString()));
      }
      if ((jsonObj.get("ItemID") != null && !jsonObj.get("ItemID").isJsonNull()) && !jsonObj.get("ItemID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ItemID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ItemID").toString()));
      }
      if ((jsonObj.get("PurchaseOrderID") != null && !jsonObj.get("PurchaseOrderID").isJsonNull()) && !jsonObj.get("PurchaseOrderID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PurchaseOrderID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PurchaseOrderID").toString()));
      }
      if (jsonObj.get("ValidationErrors") != null && !jsonObj.get("ValidationErrors").isJsonNull()) {
        JsonArray jsonArrayvalidationErrors = jsonObj.getAsJsonArray("ValidationErrors");
        if (jsonArrayvalidationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ValidationErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ValidationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("ValidationErrors").toString()));
          }

          // validate the optional field `ValidationErrors` (array)
          for (int i = 0; i < jsonArrayvalidationErrors.size(); i++) {
            ValidationError.validateJsonElement(jsonArrayvalidationErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Element.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Element' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Element> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Element.class));

       return (TypeAdapter<T>) new TypeAdapter<Element>() {
           @Override
           public void write(JsonWriter out, Element value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Element read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Element given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Element
   * @throws IOException if the JSON string is invalid with respect to Element
   */
  public static Element fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Element.class);
  }

  /**
   * Convert an instance of Element to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

