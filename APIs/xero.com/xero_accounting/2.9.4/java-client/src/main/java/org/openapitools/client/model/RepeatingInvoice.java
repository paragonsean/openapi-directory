/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.CurrencyCode;
import org.openapitools.client.model.LineAmountTypes;
import org.openapitools.client.model.LineItem;
import org.openapitools.client.model.Schedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RepeatingInvoice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RepeatingInvoice {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "Attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<Attachment> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRANDING_THEME_I_D = "BrandingThemeID";
  @SerializedName(SERIALIZED_NAME_BRANDING_THEME_I_D)
  private UUID brandingThemeID;

  public static final String SERIALIZED_NAME_CONTACT = "Contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private Contact contact;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private CurrencyCode currencyCode;

  public static final String SERIALIZED_NAME_HAS_ATTACHMENTS = "HasAttachments";
  @SerializedName(SERIALIZED_NAME_HAS_ATTACHMENTS)
  private Boolean hasAttachments = false;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private UUID ID;

  public static final String SERIALIZED_NAME_LINE_AMOUNT_TYPES = "LineAmountTypes";
  @SerializedName(SERIALIZED_NAME_LINE_AMOUNT_TYPES)
  private LineAmountTypes lineAmountTypes;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "LineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<LineItem> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFERENCE = "Reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_REPEATING_INVOICE_I_D = "RepeatingInvoiceID";
  @SerializedName(SERIALIZED_NAME_REPEATING_INVOICE_I_D)
  private UUID repeatingInvoiceID;

  public static final String SERIALIZED_NAME_SCHEDULE = "Schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private Schedule schedule;

  /**
   * One of the following - DRAFT or AUTHORISED â€“ See Invoice Status Codes
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DRAFT("DRAFT"),
    
    AUTHORISED("AUTHORISED"),
    
    DELETED("DELETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUB_TOTAL = "SubTotal";
  @SerializedName(SERIALIZED_NAME_SUB_TOTAL)
  private Double subTotal;

  public static final String SERIALIZED_NAME_TOTAL = "Total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public static final String SERIALIZED_NAME_TOTAL_TAX = "TotalTax";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX)
  private Double totalTax;

  /**
   * See Invoice Types
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ACCPAY("ACCPAY"),
    
    ACCREC("ACCREC");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public RepeatingInvoice() {
  }

  public RepeatingInvoice(
     Boolean hasAttachments
  ) {
    this();
    this.hasAttachments = hasAttachments;
  }

  public RepeatingInvoice attachments(List<Attachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public RepeatingInvoice addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Displays array of attachments from the API
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<Attachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<Attachment> attachments) {
    this.attachments = attachments;
  }


  public RepeatingInvoice brandingThemeID(UUID brandingThemeID) {
    this.brandingThemeID = brandingThemeID;
    return this;
  }

  /**
   * See BrandingThemes
   * @return brandingThemeID
   */
  @javax.annotation.Nullable
  public UUID getBrandingThemeID() {
    return brandingThemeID;
  }

  public void setBrandingThemeID(UUID brandingThemeID) {
    this.brandingThemeID = brandingThemeID;
  }


  public RepeatingInvoice contact(Contact contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nullable
  public Contact getContact() {
    return contact;
  }

  public void setContact(Contact contact) {
    this.contact = contact;
  }


  public RepeatingInvoice currencyCode(CurrencyCode currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public CurrencyCode getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(CurrencyCode currencyCode) {
    this.currencyCode = currencyCode;
  }


  /**
   * boolean to indicate if an invoice has an attachment
   * @return hasAttachments
   */
  @javax.annotation.Nullable
  public Boolean getHasAttachments() {
    return hasAttachments;
  }



  public RepeatingInvoice ID(UUID ID) {
    this.ID = ID;
    return this;
  }

  /**
   * Xero generated unique identifier for repeating invoice template
   * @return ID
   */
  @javax.annotation.Nullable
  public UUID getID() {
    return ID;
  }

  public void setID(UUID ID) {
    this.ID = ID;
  }


  public RepeatingInvoice lineAmountTypes(LineAmountTypes lineAmountTypes) {
    this.lineAmountTypes = lineAmountTypes;
    return this;
  }

  /**
   * Get lineAmountTypes
   * @return lineAmountTypes
   */
  @javax.annotation.Nullable
  public LineAmountTypes getLineAmountTypes() {
    return lineAmountTypes;
  }

  public void setLineAmountTypes(LineAmountTypes lineAmountTypes) {
    this.lineAmountTypes = lineAmountTypes;
  }


  public RepeatingInvoice lineItems(List<LineItem> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public RepeatingInvoice addLineItemsItem(LineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * See LineItems
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<LineItem> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<LineItem> lineItems) {
    this.lineItems = lineItems;
  }


  public RepeatingInvoice reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * ACCREC only â€“ additional reference number
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public RepeatingInvoice repeatingInvoiceID(UUID repeatingInvoiceID) {
    this.repeatingInvoiceID = repeatingInvoiceID;
    return this;
  }

  /**
   * Xero generated unique identifier for repeating invoice template
   * @return repeatingInvoiceID
   */
  @javax.annotation.Nullable
  public UUID getRepeatingInvoiceID() {
    return repeatingInvoiceID;
  }

  public void setRepeatingInvoiceID(UUID repeatingInvoiceID) {
    this.repeatingInvoiceID = repeatingInvoiceID;
  }


  public RepeatingInvoice schedule(Schedule schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Get schedule
   * @return schedule
   */
  @javax.annotation.Nullable
  public Schedule getSchedule() {
    return schedule;
  }

  public void setSchedule(Schedule schedule) {
    this.schedule = schedule;
  }


  public RepeatingInvoice status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * One of the following - DRAFT or AUTHORISED â€“ See Invoice Status Codes
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public RepeatingInvoice subTotal(Double subTotal) {
    this.subTotal = subTotal;
    return this;
  }

  /**
   * Total of invoice excluding taxes
   * @return subTotal
   */
  @javax.annotation.Nullable
  public Double getSubTotal() {
    return subTotal;
  }

  public void setSubTotal(Double subTotal) {
    this.subTotal = subTotal;
  }


  public RepeatingInvoice total(Double total) {
    this.total = total;
    return this;
  }

  /**
   * Total of Invoice tax inclusive (i.e. SubTotal + TotalTax)
   * @return total
   */
  @javax.annotation.Nullable
  public Double getTotal() {
    return total;
  }

  public void setTotal(Double total) {
    this.total = total;
  }


  public RepeatingInvoice totalTax(Double totalTax) {
    this.totalTax = totalTax;
    return this;
  }

  /**
   * Total tax on invoice
   * @return totalTax
   */
  @javax.annotation.Nullable
  public Double getTotalTax() {
    return totalTax;
  }

  public void setTotalTax(Double totalTax) {
    this.totalTax = totalTax;
  }


  public RepeatingInvoice type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * See Invoice Types
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepeatingInvoice repeatingInvoice = (RepeatingInvoice) o;
    return Objects.equals(this.attachments, repeatingInvoice.attachments) &&
        Objects.equals(this.brandingThemeID, repeatingInvoice.brandingThemeID) &&
        Objects.equals(this.contact, repeatingInvoice.contact) &&
        Objects.equals(this.currencyCode, repeatingInvoice.currencyCode) &&
        Objects.equals(this.hasAttachments, repeatingInvoice.hasAttachments) &&
        Objects.equals(this.ID, repeatingInvoice.ID) &&
        Objects.equals(this.lineAmountTypes, repeatingInvoice.lineAmountTypes) &&
        Objects.equals(this.lineItems, repeatingInvoice.lineItems) &&
        Objects.equals(this.reference, repeatingInvoice.reference) &&
        Objects.equals(this.repeatingInvoiceID, repeatingInvoice.repeatingInvoiceID) &&
        Objects.equals(this.schedule, repeatingInvoice.schedule) &&
        Objects.equals(this.status, repeatingInvoice.status) &&
        Objects.equals(this.subTotal, repeatingInvoice.subTotal) &&
        Objects.equals(this.total, repeatingInvoice.total) &&
        Objects.equals(this.totalTax, repeatingInvoice.totalTax) &&
        Objects.equals(this.type, repeatingInvoice.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, brandingThemeID, contact, currencyCode, hasAttachments, ID, lineAmountTypes, lineItems, reference, repeatingInvoiceID, schedule, status, subTotal, total, totalTax, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepeatingInvoice {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    brandingThemeID: ").append(toIndentedString(brandingThemeID)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    hasAttachments: ").append(toIndentedString(hasAttachments)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    lineAmountTypes: ").append(toIndentedString(lineAmountTypes)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    repeatingInvoiceID: ").append(toIndentedString(repeatingInvoiceID)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subTotal: ").append(toIndentedString(subTotal)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totalTax: ").append(toIndentedString(totalTax)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attachments");
    openapiFields.add("BrandingThemeID");
    openapiFields.add("Contact");
    openapiFields.add("CurrencyCode");
    openapiFields.add("HasAttachments");
    openapiFields.add("ID");
    openapiFields.add("LineAmountTypes");
    openapiFields.add("LineItems");
    openapiFields.add("Reference");
    openapiFields.add("RepeatingInvoiceID");
    openapiFields.add("Schedule");
    openapiFields.add("Status");
    openapiFields.add("SubTotal");
    openapiFields.add("Total");
    openapiFields.add("TotalTax");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RepeatingInvoice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepeatingInvoice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepeatingInvoice is not found in the empty JSON string", RepeatingInvoice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RepeatingInvoice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepeatingInvoice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Attachments") != null && !jsonObj.get("Attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("Attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Attachments` to be an array in the JSON string but got `%s`", jsonObj.get("Attachments").toString()));
          }

          // validate the optional field `Attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            Attachment.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if ((jsonObj.get("BrandingThemeID") != null && !jsonObj.get("BrandingThemeID").isJsonNull()) && !jsonObj.get("BrandingThemeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BrandingThemeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BrandingThemeID").toString()));
      }
      // validate the optional field `Contact`
      if (jsonObj.get("Contact") != null && !jsonObj.get("Contact").isJsonNull()) {
        Contact.validateJsonElement(jsonObj.get("Contact"));
      }
      if ((jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) && !jsonObj.get("CurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencyCode").toString()));
      }
      // validate the optional field `CurrencyCode`
      if (jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) {
        CurrencyCode.validateJsonElement(jsonObj.get("CurrencyCode"));
      }
      if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      if ((jsonObj.get("LineAmountTypes") != null && !jsonObj.get("LineAmountTypes").isJsonNull()) && !jsonObj.get("LineAmountTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LineAmountTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LineAmountTypes").toString()));
      }
      // validate the optional field `LineAmountTypes`
      if (jsonObj.get("LineAmountTypes") != null && !jsonObj.get("LineAmountTypes").isJsonNull()) {
        LineAmountTypes.validateJsonElement(jsonObj.get("LineAmountTypes"));
      }
      if (jsonObj.get("LineItems") != null && !jsonObj.get("LineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("LineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LineItems` to be an array in the JSON string but got `%s`", jsonObj.get("LineItems").toString()));
          }

          // validate the optional field `LineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            LineItem.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      if ((jsonObj.get("Reference") != null && !jsonObj.get("Reference").isJsonNull()) && !jsonObj.get("Reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Reference").toString()));
      }
      if ((jsonObj.get("RepeatingInvoiceID") != null && !jsonObj.get("RepeatingInvoiceID").isJsonNull()) && !jsonObj.get("RepeatingInvoiceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RepeatingInvoiceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RepeatingInvoiceID").toString()));
      }
      // validate the optional field `Schedule`
      if (jsonObj.get("Schedule") != null && !jsonObj.get("Schedule").isJsonNull()) {
        Schedule.validateJsonElement(jsonObj.get("Schedule"));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("Type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepeatingInvoice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepeatingInvoice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepeatingInvoice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepeatingInvoice.class));

       return (TypeAdapter<T>) new TypeAdapter<RepeatingInvoice>() {
           @Override
           public void write(JsonWriter out, RepeatingInvoice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepeatingInvoice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RepeatingInvoice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepeatingInvoice
   * @throws IOException if the JSON string is invalid with respect to RepeatingInvoice
   */
  public static RepeatingInvoice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepeatingInvoice.class);
  }

  /**
   * Convert an instance of RepeatingInvoice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

