/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.CreditNote;
import org.openapitools.client.model.Invoice;
import org.openapitools.client.model.Overpayment;
import org.openapitools.client.model.Prepayment;
import org.openapitools.client.model.ValidationError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Payment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:32.770025-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Payment {
  public static final String SERIALIZED_NAME_ACCOUNT = "Account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private Account account;

  public static final String SERIALIZED_NAME_AMOUNT = "Amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_NUMBER = "BankAccountNumber";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_NUMBER)
  private String bankAccountNumber;

  public static final String SERIALIZED_NAME_BATCH_PAYMENT_I_D = "BatchPaymentID";
  @SerializedName(SERIALIZED_NAME_BATCH_PAYMENT_I_D)
  private UUID batchPaymentID;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CREDIT_NOTE = "CreditNote";
  @SerializedName(SERIALIZED_NAME_CREDIT_NOTE)
  private CreditNote creditNote;

  public static final String SERIALIZED_NAME_CREDIT_NOTE_NUMBER = "CreditNoteNumber";
  @SerializedName(SERIALIZED_NAME_CREDIT_NOTE_NUMBER)
  private String creditNoteNumber;

  public static final String SERIALIZED_NAME_CURRENCY_RATE = "CurrencyRate";
  @SerializedName(SERIALIZED_NAME_CURRENCY_RATE)
  private Double currencyRate;

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DETAILS = "Details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private String details;

  public static final String SERIALIZED_NAME_HAS_ACCOUNT = "HasAccount";
  @SerializedName(SERIALIZED_NAME_HAS_ACCOUNT)
  private Boolean hasAccount = false;

  public static final String SERIALIZED_NAME_HAS_VALIDATION_ERRORS = "HasValidationErrors";
  @SerializedName(SERIALIZED_NAME_HAS_VALIDATION_ERRORS)
  private Boolean hasValidationErrors = false;

  public static final String SERIALIZED_NAME_INVOICE = "Invoice";
  @SerializedName(SERIALIZED_NAME_INVOICE)
  private Invoice invoice;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "InvoiceNumber";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_IS_RECONCILED = "IsReconciled";
  @SerializedName(SERIALIZED_NAME_IS_RECONCILED)
  private Boolean isReconciled;

  public static final String SERIALIZED_NAME_OVERPAYMENT = "Overpayment";
  @SerializedName(SERIALIZED_NAME_OVERPAYMENT)
  private Overpayment overpayment;

  public static final String SERIALIZED_NAME_PARTICULARS = "Particulars";
  @SerializedName(SERIALIZED_NAME_PARTICULARS)
  private String particulars;

  public static final String SERIALIZED_NAME_PAYMENT_I_D = "PaymentID";
  @SerializedName(SERIALIZED_NAME_PAYMENT_I_D)
  private UUID paymentID;

  /**
   * See Payment Types.
   */
  @JsonAdapter(PaymentTypeEnum.Adapter.class)
  public enum PaymentTypeEnum {
    ACCRECPAYMENT("ACCRECPAYMENT"),
    
    ACCPAYPAYMENT("ACCPAYPAYMENT"),
    
    ARCREDITPAYMENT("ARCREDITPAYMENT"),
    
    APCREDITPAYMENT("APCREDITPAYMENT"),
    
    AROVERPAYMENTPAYMENT("AROVERPAYMENTPAYMENT"),
    
    ARPREPAYMENTPAYMENT("ARPREPAYMENTPAYMENT"),
    
    APPREPAYMENTPAYMENT("APPREPAYMENTPAYMENT"),
    
    APOVERPAYMENTPAYMENT("APOVERPAYMENTPAYMENT");

    private String value;

    PaymentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentTypeEnum fromValue(String value) {
      for (PaymentTypeEnum b : PaymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "PaymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private PaymentTypeEnum paymentType;

  public static final String SERIALIZED_NAME_PREPAYMENT = "Prepayment";
  @SerializedName(SERIALIZED_NAME_PREPAYMENT)
  private Prepayment prepayment;

  public static final String SERIALIZED_NAME_REFERENCE = "Reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  /**
   * The status of the payment.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    AUTHORISED("AUTHORISED"),
    
    DELETED("DELETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STATUS_ATTRIBUTE_STRING = "StatusAttributeString";
  @SerializedName(SERIALIZED_NAME_STATUS_ATTRIBUTE_STRING)
  private String statusAttributeString;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "ValidationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<ValidationError> validationErrors = new ArrayList<>();

  public Payment() {
  }

  public Payment(
     PaymentTypeEnum paymentType, 
     String updatedDateUTC
  ) {
    this();
    this.paymentType = paymentType;
    this.updatedDateUTC = updatedDateUTC;
  }

  public Payment account(Account account) {
    this.account = account;
    return this;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nullable
  public Account getAccount() {
    return account;
  }

  public void setAccount(Account account) {
    this.account = account;
  }


  public Payment amount(Double amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00
   * @return amount
   */
  @javax.annotation.Nullable
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }


  public Payment bankAccountNumber(String bankAccountNumber) {
    this.bankAccountNumber = bankAccountNumber;
    return this;
  }

  /**
   * The suppliers bank account number the payment is being made to
   * @return bankAccountNumber
   */
  @javax.annotation.Nullable
  public String getBankAccountNumber() {
    return bankAccountNumber;
  }

  public void setBankAccountNumber(String bankAccountNumber) {
    this.bankAccountNumber = bankAccountNumber;
  }


  public Payment batchPaymentID(UUID batchPaymentID) {
    this.batchPaymentID = batchPaymentID;
    return this;
  }

  /**
   * Present if the payment was created as part of a batch.
   * @return batchPaymentID
   */
  @javax.annotation.Nullable
  public UUID getBatchPaymentID() {
    return batchPaymentID;
  }

  public void setBatchPaymentID(UUID batchPaymentID) {
    this.batchPaymentID = batchPaymentID;
  }


  public Payment code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Code of account you are using to make the payment e.g. 001 (note- not all accounts have a code value)
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public Payment creditNote(CreditNote creditNote) {
    this.creditNote = creditNote;
    return this;
  }

  /**
   * Get creditNote
   * @return creditNote
   */
  @javax.annotation.Nullable
  public CreditNote getCreditNote() {
    return creditNote;
  }

  public void setCreditNote(CreditNote creditNote) {
    this.creditNote = creditNote;
  }


  public Payment creditNoteNumber(String creditNoteNumber) {
    this.creditNoteNumber = creditNoteNumber;
    return this;
  }

  /**
   * Number of invoice or credit note you are applying payment to e.g. INV-4003
   * @return creditNoteNumber
   */
  @javax.annotation.Nullable
  public String getCreditNoteNumber() {
    return creditNoteNumber;
  }

  public void setCreditNoteNumber(String creditNoteNumber) {
    this.creditNoteNumber = creditNoteNumber;
  }


  public Payment currencyRate(Double currencyRate) {
    this.currencyRate = currencyRate;
    return this;
  }

  /**
   * Exchange rate when payment is received. Only used for non base currency invoices and credit notes e.g. 0.7500
   * @return currencyRate
   */
  @javax.annotation.Nullable
  public Double getCurrencyRate() {
    return currencyRate;
  }

  public void setCurrencyRate(Double currencyRate) {
    this.currencyRate = currencyRate;
  }


  public Payment date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public Payment details(String details) {
    this.details = details;
    return this;
  }

  /**
   * The information to appear on the supplier&#39;s bank account
   * @return details
   */
  @javax.annotation.Nullable
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }


  public Payment hasAccount(Boolean hasAccount) {
    this.hasAccount = hasAccount;
    return this;
  }

  /**
   * A boolean to indicate if a contact has an validation errors
   * @return hasAccount
   */
  @javax.annotation.Nullable
  public Boolean getHasAccount() {
    return hasAccount;
  }

  public void setHasAccount(Boolean hasAccount) {
    this.hasAccount = hasAccount;
  }


  public Payment hasValidationErrors(Boolean hasValidationErrors) {
    this.hasValidationErrors = hasValidationErrors;
    return this;
  }

  /**
   * A boolean to indicate if a contact has an validation errors
   * @return hasValidationErrors
   */
  @javax.annotation.Nullable
  public Boolean getHasValidationErrors() {
    return hasValidationErrors;
  }

  public void setHasValidationErrors(Boolean hasValidationErrors) {
    this.hasValidationErrors = hasValidationErrors;
  }


  public Payment invoice(Invoice invoice) {
    this.invoice = invoice;
    return this;
  }

  /**
   * Get invoice
   * @return invoice
   */
  @javax.annotation.Nullable
  public Invoice getInvoice() {
    return invoice;
  }

  public void setInvoice(Invoice invoice) {
    this.invoice = invoice;
  }


  public Payment invoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
    return this;
  }

  /**
   * Number of invoice or credit note you are applying payment to e.g.INV-4003
   * @return invoiceNumber
   */
  @javax.annotation.Nullable
  public String getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }


  public Payment isReconciled(Boolean isReconciled) {
    this.isReconciled = isReconciled;
    return this;
  }

  /**
   * An optional parameter for the payment. A boolean indicating whether you would like the payment to be created as reconciled when using PUT, or whether a payment has been reconciled when using GET
   * @return isReconciled
   */
  @javax.annotation.Nullable
  public Boolean getIsReconciled() {
    return isReconciled;
  }

  public void setIsReconciled(Boolean isReconciled) {
    this.isReconciled = isReconciled;
  }


  public Payment overpayment(Overpayment overpayment) {
    this.overpayment = overpayment;
    return this;
  }

  /**
   * Get overpayment
   * @return overpayment
   */
  @javax.annotation.Nullable
  public Overpayment getOverpayment() {
    return overpayment;
  }

  public void setOverpayment(Overpayment overpayment) {
    this.overpayment = overpayment;
  }


  public Payment particulars(String particulars) {
    this.particulars = particulars;
    return this;
  }

  /**
   * The suppliers bank account number the payment is being made to
   * @return particulars
   */
  @javax.annotation.Nullable
  public String getParticulars() {
    return particulars;
  }

  public void setParticulars(String particulars) {
    this.particulars = particulars;
  }


  public Payment paymentID(UUID paymentID) {
    this.paymentID = paymentID;
    return this;
  }

  /**
   * The Xero identifier for an Payment e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
   * @return paymentID
   */
  @javax.annotation.Nullable
  public UUID getPaymentID() {
    return paymentID;
  }

  public void setPaymentID(UUID paymentID) {
    this.paymentID = paymentID;
  }


  /**
   * See Payment Types.
   * @return paymentType
   */
  @javax.annotation.Nullable
  public PaymentTypeEnum getPaymentType() {
    return paymentType;
  }



  public Payment prepayment(Prepayment prepayment) {
    this.prepayment = prepayment;
    return this;
  }

  /**
   * Get prepayment
   * @return prepayment
   */
  @javax.annotation.Nullable
  public Prepayment getPrepayment() {
    return prepayment;
  }

  public void setPrepayment(Prepayment prepayment) {
    this.prepayment = prepayment;
  }


  public Payment reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * An optional description for the payment e.g. Direct Debit
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public Payment status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the payment.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Payment statusAttributeString(String statusAttributeString) {
    this.statusAttributeString = statusAttributeString;
    return this;
  }

  /**
   * A string to indicate if a invoice status
   * @return statusAttributeString
   */
  @javax.annotation.Nullable
  public String getStatusAttributeString() {
    return statusAttributeString;
  }

  public void setStatusAttributeString(String statusAttributeString) {
    this.statusAttributeString = statusAttributeString;
  }


  /**
   * UTC timestamp of last update to the payment
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }



  public Payment validationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public Payment addValidationErrorsItem(ValidationError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Displays array of validation error messages from the API
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<ValidationError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payment payment = (Payment) o;
    return Objects.equals(this.account, payment.account) &&
        Objects.equals(this.amount, payment.amount) &&
        Objects.equals(this.bankAccountNumber, payment.bankAccountNumber) &&
        Objects.equals(this.batchPaymentID, payment.batchPaymentID) &&
        Objects.equals(this.code, payment.code) &&
        Objects.equals(this.creditNote, payment.creditNote) &&
        Objects.equals(this.creditNoteNumber, payment.creditNoteNumber) &&
        Objects.equals(this.currencyRate, payment.currencyRate) &&
        Objects.equals(this.date, payment.date) &&
        Objects.equals(this.details, payment.details) &&
        Objects.equals(this.hasAccount, payment.hasAccount) &&
        Objects.equals(this.hasValidationErrors, payment.hasValidationErrors) &&
        Objects.equals(this.invoice, payment.invoice) &&
        Objects.equals(this.invoiceNumber, payment.invoiceNumber) &&
        Objects.equals(this.isReconciled, payment.isReconciled) &&
        Objects.equals(this.overpayment, payment.overpayment) &&
        Objects.equals(this.particulars, payment.particulars) &&
        Objects.equals(this.paymentID, payment.paymentID) &&
        Objects.equals(this.paymentType, payment.paymentType) &&
        Objects.equals(this.prepayment, payment.prepayment) &&
        Objects.equals(this.reference, payment.reference) &&
        Objects.equals(this.status, payment.status) &&
        Objects.equals(this.statusAttributeString, payment.statusAttributeString) &&
        Objects.equals(this.updatedDateUTC, payment.updatedDateUTC) &&
        Objects.equals(this.validationErrors, payment.validationErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, amount, bankAccountNumber, batchPaymentID, code, creditNote, creditNoteNumber, currencyRate, date, details, hasAccount, hasValidationErrors, invoice, invoiceNumber, isReconciled, overpayment, particulars, paymentID, paymentType, prepayment, reference, status, statusAttributeString, updatedDateUTC, validationErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payment {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    bankAccountNumber: ").append(toIndentedString(bankAccountNumber)).append("\n");
    sb.append("    batchPaymentID: ").append(toIndentedString(batchPaymentID)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    creditNote: ").append(toIndentedString(creditNote)).append("\n");
    sb.append("    creditNoteNumber: ").append(toIndentedString(creditNoteNumber)).append("\n");
    sb.append("    currencyRate: ").append(toIndentedString(currencyRate)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    hasAccount: ").append(toIndentedString(hasAccount)).append("\n");
    sb.append("    hasValidationErrors: ").append(toIndentedString(hasValidationErrors)).append("\n");
    sb.append("    invoice: ").append(toIndentedString(invoice)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    isReconciled: ").append(toIndentedString(isReconciled)).append("\n");
    sb.append("    overpayment: ").append(toIndentedString(overpayment)).append("\n");
    sb.append("    particulars: ").append(toIndentedString(particulars)).append("\n");
    sb.append("    paymentID: ").append(toIndentedString(paymentID)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    prepayment: ").append(toIndentedString(prepayment)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusAttributeString: ").append(toIndentedString(statusAttributeString)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Account");
    openapiFields.add("Amount");
    openapiFields.add("BankAccountNumber");
    openapiFields.add("BatchPaymentID");
    openapiFields.add("Code");
    openapiFields.add("CreditNote");
    openapiFields.add("CreditNoteNumber");
    openapiFields.add("CurrencyRate");
    openapiFields.add("Date");
    openapiFields.add("Details");
    openapiFields.add("HasAccount");
    openapiFields.add("HasValidationErrors");
    openapiFields.add("Invoice");
    openapiFields.add("InvoiceNumber");
    openapiFields.add("IsReconciled");
    openapiFields.add("Overpayment");
    openapiFields.add("Particulars");
    openapiFields.add("PaymentID");
    openapiFields.add("PaymentType");
    openapiFields.add("Prepayment");
    openapiFields.add("Reference");
    openapiFields.add("Status");
    openapiFields.add("StatusAttributeString");
    openapiFields.add("UpdatedDateUTC");
    openapiFields.add("ValidationErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Payment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Payment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Payment is not found in the empty JSON string", Payment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Payment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Payment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Account`
      if (jsonObj.get("Account") != null && !jsonObj.get("Account").isJsonNull()) {
        Account.validateJsonElement(jsonObj.get("Account"));
      }
      if ((jsonObj.get("BankAccountNumber") != null && !jsonObj.get("BankAccountNumber").isJsonNull()) && !jsonObj.get("BankAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BankAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BankAccountNumber").toString()));
      }
      if ((jsonObj.get("BatchPaymentID") != null && !jsonObj.get("BatchPaymentID").isJsonNull()) && !jsonObj.get("BatchPaymentID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BatchPaymentID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BatchPaymentID").toString()));
      }
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      // validate the optional field `CreditNote`
      if (jsonObj.get("CreditNote") != null && !jsonObj.get("CreditNote").isJsonNull()) {
        CreditNote.validateJsonElement(jsonObj.get("CreditNote"));
      }
      if ((jsonObj.get("CreditNoteNumber") != null && !jsonObj.get("CreditNoteNumber").isJsonNull()) && !jsonObj.get("CreditNoteNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CreditNoteNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CreditNoteNumber").toString()));
      }
      if ((jsonObj.get("Date") != null && !jsonObj.get("Date").isJsonNull()) && !jsonObj.get("Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Date").toString()));
      }
      if ((jsonObj.get("Details") != null && !jsonObj.get("Details").isJsonNull()) && !jsonObj.get("Details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Details").toString()));
      }
      // validate the optional field `Invoice`
      if (jsonObj.get("Invoice") != null && !jsonObj.get("Invoice").isJsonNull()) {
        Invoice.validateJsonElement(jsonObj.get("Invoice"));
      }
      if ((jsonObj.get("InvoiceNumber") != null && !jsonObj.get("InvoiceNumber").isJsonNull()) && !jsonObj.get("InvoiceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InvoiceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InvoiceNumber").toString()));
      }
      // validate the optional field `Overpayment`
      if (jsonObj.get("Overpayment") != null && !jsonObj.get("Overpayment").isJsonNull()) {
        Overpayment.validateJsonElement(jsonObj.get("Overpayment"));
      }
      if ((jsonObj.get("Particulars") != null && !jsonObj.get("Particulars").isJsonNull()) && !jsonObj.get("Particulars").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Particulars` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Particulars").toString()));
      }
      if ((jsonObj.get("PaymentID") != null && !jsonObj.get("PaymentID").isJsonNull()) && !jsonObj.get("PaymentID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentID").toString()));
      }
      if ((jsonObj.get("PaymentType") != null && !jsonObj.get("PaymentType").isJsonNull()) && !jsonObj.get("PaymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentType").toString()));
      }
      // validate the optional field `PaymentType`
      if (jsonObj.get("PaymentType") != null && !jsonObj.get("PaymentType").isJsonNull()) {
        PaymentTypeEnum.validateJsonElement(jsonObj.get("PaymentType"));
      }
      // validate the optional field `Prepayment`
      if (jsonObj.get("Prepayment") != null && !jsonObj.get("Prepayment").isJsonNull()) {
        Prepayment.validateJsonElement(jsonObj.get("Prepayment"));
      }
      if ((jsonObj.get("Reference") != null && !jsonObj.get("Reference").isJsonNull()) && !jsonObj.get("Reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Reference").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("StatusAttributeString") != null && !jsonObj.get("StatusAttributeString").isJsonNull()) && !jsonObj.get("StatusAttributeString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatusAttributeString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusAttributeString").toString()));
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
      if (jsonObj.get("ValidationErrors") != null && !jsonObj.get("ValidationErrors").isJsonNull()) {
        JsonArray jsonArrayvalidationErrors = jsonObj.getAsJsonArray("ValidationErrors");
        if (jsonArrayvalidationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ValidationErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ValidationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("ValidationErrors").toString()));
          }

          // validate the optional field `ValidationErrors` (array)
          for (int i = 0; i < jsonArrayvalidationErrors.size(); i++) {
            ValidationError.validateJsonElement(jsonArrayvalidationErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Payment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Payment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Payment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Payment.class));

       return (TypeAdapter<T>) new TypeAdapter<Payment>() {
           @Override
           public void write(JsonWriter out, Payment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Payment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Payment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Payment
   * @throws IOException if the JSON string is invalid with respect to Payment
   */
  public static Payment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Payment.class);
  }

  /**
   * Convert an instance of Payment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

