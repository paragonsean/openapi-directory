/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XeroAccountingApi);
  }
}(this, function(expect, XeroAccountingApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XeroAccountingApi.Invoice();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Invoice', function() {
    it('should create an instance of Invoice', function() {
      // uncomment below and update the code to test Invoice
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be.a(XeroAccountingApi.Invoice);
    });

    it('should have the property amountCredited (base name: "AmountCredited")', function() {
      // uncomment below and update the code to test the property amountCredited
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property amountDue (base name: "AmountDue")', function() {
      // uncomment below and update the code to test the property amountDue
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property amountPaid (base name: "AmountPaid")', function() {
      // uncomment below and update the code to test the property amountPaid
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property attachments (base name: "Attachments")', function() {
      // uncomment below and update the code to test the property attachments
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property brandingThemeID (base name: "BrandingThemeID")', function() {
      // uncomment below and update the code to test the property brandingThemeID
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property cISDeduction (base name: "CISDeduction")', function() {
      // uncomment below and update the code to test the property cISDeduction
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property cISRate (base name: "CISRate")', function() {
      // uncomment below and update the code to test the property cISRate
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property contact (base name: "Contact")', function() {
      // uncomment below and update the code to test the property contact
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property creditNotes (base name: "CreditNotes")', function() {
      // uncomment below and update the code to test the property creditNotes
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "CurrencyCode")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property currencyRate (base name: "CurrencyRate")', function() {
      // uncomment below and update the code to test the property currencyRate
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property date (base name: "Date")', function() {
      // uncomment below and update the code to test the property date
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property dueDate (base name: "DueDate")', function() {
      // uncomment below and update the code to test the property dueDate
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property expectedPaymentDate (base name: "ExpectedPaymentDate")', function() {
      // uncomment below and update the code to test the property expectedPaymentDate
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property fullyPaidOnDate (base name: "FullyPaidOnDate")', function() {
      // uncomment below and update the code to test the property fullyPaidOnDate
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property hasAttachments (base name: "HasAttachments")', function() {
      // uncomment below and update the code to test the property hasAttachments
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property hasErrors (base name: "HasErrors")', function() {
      // uncomment below and update the code to test the property hasErrors
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property invoiceID (base name: "InvoiceID")', function() {
      // uncomment below and update the code to test the property invoiceID
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property invoiceNumber (base name: "InvoiceNumber")', function() {
      // uncomment below and update the code to test the property invoiceNumber
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property isDiscounted (base name: "IsDiscounted")', function() {
      // uncomment below and update the code to test the property isDiscounted
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property lineAmountTypes (base name: "LineAmountTypes")', function() {
      // uncomment below and update the code to test the property lineAmountTypes
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property lineItems (base name: "LineItems")', function() {
      // uncomment below and update the code to test the property lineItems
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property overpayments (base name: "Overpayments")', function() {
      // uncomment below and update the code to test the property overpayments
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property payments (base name: "Payments")', function() {
      // uncomment below and update the code to test the property payments
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property plannedPaymentDate (base name: "PlannedPaymentDate")', function() {
      // uncomment below and update the code to test the property plannedPaymentDate
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property prepayments (base name: "Prepayments")', function() {
      // uncomment below and update the code to test the property prepayments
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property reference (base name: "Reference")', function() {
      // uncomment below and update the code to test the property reference
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property repeatingInvoiceID (base name: "RepeatingInvoiceID")', function() {
      // uncomment below and update the code to test the property repeatingInvoiceID
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property sentToContact (base name: "SentToContact")', function() {
      // uncomment below and update the code to test the property sentToContact
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property statusAttributeString (base name: "StatusAttributeString")', function() {
      // uncomment below and update the code to test the property statusAttributeString
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property subTotal (base name: "SubTotal")', function() {
      // uncomment below and update the code to test the property subTotal
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property total (base name: "Total")', function() {
      // uncomment below and update the code to test the property total
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property totalDiscount (base name: "TotalDiscount")', function() {
      // uncomment below and update the code to test the property totalDiscount
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property totalTax (base name: "TotalTax")', function() {
      // uncomment below and update the code to test the property totalTax
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property updatedDateUTC (base name: "UpdatedDateUTC")', function() {
      // uncomment below and update the code to test the property updatedDateUTC
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "Url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property validationErrors (base name: "ValidationErrors")', function() {
      // uncomment below and update the code to test the property validationErrors
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property warnings (base name: "Warnings")', function() {
      // uncomment below and update the code to test the property warnings
      //var instance = new XeroAccountingApi.Invoice();
      //expect(instance).to.be();
    });

  });

}));
