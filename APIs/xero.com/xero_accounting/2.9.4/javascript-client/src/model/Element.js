/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ValidationError from './ValidationError';

/**
 * The Element model module.
 * @module model/Element
 * @version 2.9.4
 */
class Element {
    /**
     * Constructs a new <code>Element</code>.
     * @alias module:model/Element
     */
    constructor() { 
        
        Element.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Element</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Element} obj Optional instance to populate.
     * @return {module:model/Element} The populated <code>Element</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Element();

            if (data.hasOwnProperty('BankTransactionID')) {
                obj['BankTransactionID'] = ApiClient.convertToType(data['BankTransactionID'], 'String');
            }
            if (data.hasOwnProperty('BatchPaymentID')) {
                obj['BatchPaymentID'] = ApiClient.convertToType(data['BatchPaymentID'], 'String');
            }
            if (data.hasOwnProperty('ContactID')) {
                obj['ContactID'] = ApiClient.convertToType(data['ContactID'], 'String');
            }
            if (data.hasOwnProperty('CreditNoteID')) {
                obj['CreditNoteID'] = ApiClient.convertToType(data['CreditNoteID'], 'String');
            }
            if (data.hasOwnProperty('InvoiceID')) {
                obj['InvoiceID'] = ApiClient.convertToType(data['InvoiceID'], 'String');
            }
            if (data.hasOwnProperty('ItemID')) {
                obj['ItemID'] = ApiClient.convertToType(data['ItemID'], 'String');
            }
            if (data.hasOwnProperty('PurchaseOrderID')) {
                obj['PurchaseOrderID'] = ApiClient.convertToType(data['PurchaseOrderID'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Element</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Element</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BankTransactionID'] && !(typeof data['BankTransactionID'] === 'string' || data['BankTransactionID'] instanceof String)) {
            throw new Error("Expected the field `BankTransactionID` to be a primitive type in the JSON string but got " + data['BankTransactionID']);
        }
        // ensure the json data is a string
        if (data['BatchPaymentID'] && !(typeof data['BatchPaymentID'] === 'string' || data['BatchPaymentID'] instanceof String)) {
            throw new Error("Expected the field `BatchPaymentID` to be a primitive type in the JSON string but got " + data['BatchPaymentID']);
        }
        // ensure the json data is a string
        if (data['ContactID'] && !(typeof data['ContactID'] === 'string' || data['ContactID'] instanceof String)) {
            throw new Error("Expected the field `ContactID` to be a primitive type in the JSON string but got " + data['ContactID']);
        }
        // ensure the json data is a string
        if (data['CreditNoteID'] && !(typeof data['CreditNoteID'] === 'string' || data['CreditNoteID'] instanceof String)) {
            throw new Error("Expected the field `CreditNoteID` to be a primitive type in the JSON string but got " + data['CreditNoteID']);
        }
        // ensure the json data is a string
        if (data['InvoiceID'] && !(typeof data['InvoiceID'] === 'string' || data['InvoiceID'] instanceof String)) {
            throw new Error("Expected the field `InvoiceID` to be a primitive type in the JSON string but got " + data['InvoiceID']);
        }
        // ensure the json data is a string
        if (data['ItemID'] && !(typeof data['ItemID'] === 'string' || data['ItemID'] instanceof String)) {
            throw new Error("Expected the field `ItemID` to be a primitive type in the JSON string but got " + data['ItemID']);
        }
        // ensure the json data is a string
        if (data['PurchaseOrderID'] && !(typeof data['PurchaseOrderID'] === 'string' || data['PurchaseOrderID'] instanceof String)) {
            throw new Error("Expected the field `PurchaseOrderID` to be a primitive type in the JSON string but got " + data['PurchaseOrderID']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} BankTransactionID
 */
Element.prototype['BankTransactionID'] = undefined;

/**
 * Unique ID for batch payment object with validation error
 * @member {String} BatchPaymentID
 */
Element.prototype['BatchPaymentID'] = undefined;

/**
 * @member {String} ContactID
 */
Element.prototype['ContactID'] = undefined;

/**
 * @member {String} CreditNoteID
 */
Element.prototype['CreditNoteID'] = undefined;

/**
 * @member {String} InvoiceID
 */
Element.prototype['InvoiceID'] = undefined;

/**
 * @member {String} ItemID
 */
Element.prototype['ItemID'] = undefined;

/**
 * @member {String} PurchaseOrderID
 */
Element.prototype['PurchaseOrderID'] = undefined;

/**
 * Array of Validation Error message
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
Element.prototype['ValidationErrors'] = undefined;






export default Element;

