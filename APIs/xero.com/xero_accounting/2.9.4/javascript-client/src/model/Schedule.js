/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Schedule model module.
 * @module model/Schedule
 * @version 2.9.4
 */
class Schedule {
    /**
     * Constructs a new <code>Schedule</code>.
     * @alias module:model/Schedule
     */
    constructor() { 
        
        Schedule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Schedule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Schedule} obj Optional instance to populate.
     * @return {module:model/Schedule} The populated <code>Schedule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Schedule();

            if (data.hasOwnProperty('DueDate')) {
                obj['DueDate'] = ApiClient.convertToType(data['DueDate'], 'Number');
            }
            if (data.hasOwnProperty('DueDateType')) {
                obj['DueDateType'] = ApiClient.convertToType(data['DueDateType'], 'String');
            }
            if (data.hasOwnProperty('EndDate')) {
                obj['EndDate'] = ApiClient.convertToType(data['EndDate'], 'String');
            }
            if (data.hasOwnProperty('NextScheduledDate')) {
                obj['NextScheduledDate'] = ApiClient.convertToType(data['NextScheduledDate'], 'String');
            }
            if (data.hasOwnProperty('Period')) {
                obj['Period'] = ApiClient.convertToType(data['Period'], 'Number');
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'String');
            }
            if (data.hasOwnProperty('Unit')) {
                obj['Unit'] = ApiClient.convertToType(data['Unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Schedule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Schedule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['DueDateType'] && !(typeof data['DueDateType'] === 'string' || data['DueDateType'] instanceof String)) {
            throw new Error("Expected the field `DueDateType` to be a primitive type in the JSON string but got " + data['DueDateType']);
        }
        // ensure the json data is a string
        if (data['EndDate'] && !(typeof data['EndDate'] === 'string' || data['EndDate'] instanceof String)) {
            throw new Error("Expected the field `EndDate` to be a primitive type in the JSON string but got " + data['EndDate']);
        }
        // ensure the json data is a string
        if (data['NextScheduledDate'] && !(typeof data['NextScheduledDate'] === 'string' || data['NextScheduledDate'] instanceof String)) {
            throw new Error("Expected the field `NextScheduledDate` to be a primitive type in the JSON string but got " + data['NextScheduledDate']);
        }
        // ensure the json data is a string
        if (data['StartDate'] && !(typeof data['StartDate'] === 'string' || data['StartDate'] instanceof String)) {
            throw new Error("Expected the field `StartDate` to be a primitive type in the JSON string but got " + data['StartDate']);
        }
        // ensure the json data is a string
        if (data['Unit'] && !(typeof data['Unit'] === 'string' || data['Unit'] instanceof String)) {
            throw new Error("Expected the field `Unit` to be a primitive type in the JSON string but got " + data['Unit']);
        }

        return true;
    }


}



/**
 * Integer used with due date type e.g 20 (of following month), 31 (of current month)
 * @member {Number} DueDate
 */
Schedule.prototype['DueDate'] = undefined;

/**
 * the payment terms
 * @member {module:model/Schedule.DueDateTypeEnum} DueDateType
 */
Schedule.prototype['DueDateType'] = undefined;

/**
 * Invoice end date â€“ only returned if the template has an end date set
 * @member {String} EndDate
 */
Schedule.prototype['EndDate'] = undefined;

/**
 * The calendar date of the next invoice in the schedule to be generated
 * @member {String} NextScheduledDate
 */
Schedule.prototype['NextScheduledDate'] = undefined;

/**
 * Integer used with the unit e.g. 1 (every 1 week), 2 (every 2 months)
 * @member {Number} Period
 */
Schedule.prototype['Period'] = undefined;

/**
 * Date the first invoice of the current version of the repeating schedule was generated (changes when repeating invoice is edited)
 * @member {String} StartDate
 */
Schedule.prototype['StartDate'] = undefined;

/**
 * One of the following - WEEKLY or MONTHLY
 * @member {module:model/Schedule.UnitEnum} Unit
 */
Schedule.prototype['Unit'] = undefined;





/**
 * Allowed values for the <code>DueDateType</code> property.
 * @enum {String}
 * @readonly
 */
Schedule['DueDateTypeEnum'] = {

    /**
     * value: "DAYSAFTERBILLDATE"
     * @const
     */
    "DAYSAFTERBILLDATE": "DAYSAFTERBILLDATE",

    /**
     * value: "DAYSAFTERBILLMONTH"
     * @const
     */
    "DAYSAFTERBILLMONTH": "DAYSAFTERBILLMONTH",

    /**
     * value: "DAYSAFTERINVOICEDATE"
     * @const
     */
    "DAYSAFTERINVOICEDATE": "DAYSAFTERINVOICEDATE",

    /**
     * value: "DAYSAFTERINVOICEMONTH"
     * @const
     */
    "DAYSAFTERINVOICEMONTH": "DAYSAFTERINVOICEMONTH",

    /**
     * value: "OFCURRENTMONTH"
     * @const
     */
    "OFCURRENTMONTH": "OFCURRENTMONTH",

    /**
     * value: "OFFOLLOWINGMONTH"
     * @const
     */
    "OFFOLLOWINGMONTH": "OFFOLLOWINGMONTH"
};


/**
 * Allowed values for the <code>Unit</code> property.
 * @enum {String}
 * @readonly
 */
Schedule['UnitEnum'] = {

    /**
     * value: "WEEKLY"
     * @const
     */
    "WEEKLY": "WEEKLY",

    /**
     * value: "MONTHLY"
     * @const
     */
    "MONTHLY": "MONTHLY"
};



export default Schedule;

