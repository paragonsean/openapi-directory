/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TaxComponent model module.
 * @module model/TaxComponent
 * @version 2.9.4
 */
class TaxComponent {
    /**
     * Constructs a new <code>TaxComponent</code>.
     * @alias module:model/TaxComponent
     */
    constructor() { 
        
        TaxComponent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaxComponent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaxComponent} obj Optional instance to populate.
     * @return {module:model/TaxComponent} The populated <code>TaxComponent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaxComponent();

            if (data.hasOwnProperty('IsCompound')) {
                obj['IsCompound'] = ApiClient.convertToType(data['IsCompound'], 'Boolean');
            }
            if (data.hasOwnProperty('IsNonRecoverable')) {
                obj['IsNonRecoverable'] = ApiClient.convertToType(data['IsNonRecoverable'], 'Boolean');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Rate')) {
                obj['Rate'] = ApiClient.convertToType(data['Rate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaxComponent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaxComponent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }

        return true;
    }


}



/**
 * Boolean to describe if Tax rate is compounded.
 * @member {Boolean} IsCompound
 */
TaxComponent.prototype['IsCompound'] = undefined;

/**
 * Boolean to describe if tax rate is non-recoverable. Non-recoverable rates are only applicable to Canadian organisations
 * @member {Boolean} IsNonRecoverable
 */
TaxComponent.prototype['IsNonRecoverable'] = undefined;

/**
 * Name of Tax Component
 * @member {String} Name
 */
TaxComponent.prototype['Name'] = undefined;

/**
 * Tax Rate (up to 4dp)
 * @member {Number} Rate
 */
TaxComponent.prototype['Rate'] = undefined;






export default TaxComponent;

