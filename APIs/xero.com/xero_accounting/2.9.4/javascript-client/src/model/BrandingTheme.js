/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BrandingTheme model module.
 * @module model/BrandingTheme
 * @version 2.9.4
 */
class BrandingTheme {
    /**
     * Constructs a new <code>BrandingTheme</code>.
     * @alias module:model/BrandingTheme
     */
    constructor() { 
        
        BrandingTheme.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BrandingTheme</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BrandingTheme} obj Optional instance to populate.
     * @return {module:model/BrandingTheme} The populated <code>BrandingTheme</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BrandingTheme();

            if (data.hasOwnProperty('BrandingThemeID')) {
                obj['BrandingThemeID'] = ApiClient.convertToType(data['BrandingThemeID'], 'String');
            }
            if (data.hasOwnProperty('CreatedDateUTC')) {
                obj['CreatedDateUTC'] = ApiClient.convertToType(data['CreatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('LogoUrl')) {
                obj['LogoUrl'] = ApiClient.convertToType(data['LogoUrl'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('SortOrder')) {
                obj['SortOrder'] = ApiClient.convertToType(data['SortOrder'], 'Number');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BrandingTheme</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BrandingTheme</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BrandingThemeID'] && !(typeof data['BrandingThemeID'] === 'string' || data['BrandingThemeID'] instanceof String)) {
            throw new Error("Expected the field `BrandingThemeID` to be a primitive type in the JSON string but got " + data['BrandingThemeID']);
        }
        // ensure the json data is a string
        if (data['CreatedDateUTC'] && !(typeof data['CreatedDateUTC'] === 'string' || data['CreatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `CreatedDateUTC` to be a primitive type in the JSON string but got " + data['CreatedDateUTC']);
        }
        // ensure the json data is a string
        if (data['LogoUrl'] && !(typeof data['LogoUrl'] === 'string' || data['LogoUrl'] instanceof String)) {
            throw new Error("Expected the field `LogoUrl` to be a primitive type in the JSON string but got " + data['LogoUrl']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}



/**
 * Xero identifier
 * @member {String} BrandingThemeID
 */
BrandingTheme.prototype['BrandingThemeID'] = undefined;

/**
 * UTC timestamp of creation date of branding theme
 * @member {String} CreatedDateUTC
 */
BrandingTheme.prototype['CreatedDateUTC'] = undefined;

/**
 * The location of the image file used as the logo on this branding theme
 * @member {String} LogoUrl
 */
BrandingTheme.prototype['LogoUrl'] = undefined;

/**
 * Name of branding theme
 * @member {String} Name
 */
BrandingTheme.prototype['Name'] = undefined;

/**
 * Integer â€“ ranked order of branding theme. The default branding theme has a value of 0
 * @member {Number} SortOrder
 */
BrandingTheme.prototype['SortOrder'] = undefined;

/**
 * Always INVOICE
 * @member {module:model/BrandingTheme.TypeEnum} Type
 */
BrandingTheme.prototype['Type'] = undefined;





/**
 * Allowed values for the <code>Type</code> property.
 * @enum {String}
 * @readonly
 */
BrandingTheme['TypeEnum'] = {

    /**
     * value: "INVOICE"
     * @const
     */
    "INVOICE": "INVOICE"
};



export default BrandingTheme;

