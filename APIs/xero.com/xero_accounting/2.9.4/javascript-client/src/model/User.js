/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The User model module.
 * @module model/User
 * @version 2.9.4
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('EmailAddress')) {
                obj['EmailAddress'] = ApiClient.convertToType(data['EmailAddress'], 'String');
            }
            if (data.hasOwnProperty('FirstName')) {
                obj['FirstName'] = ApiClient.convertToType(data['FirstName'], 'String');
            }
            if (data.hasOwnProperty('IsSubscriber')) {
                obj['IsSubscriber'] = ApiClient.convertToType(data['IsSubscriber'], 'Boolean');
            }
            if (data.hasOwnProperty('LastName')) {
                obj['LastName'] = ApiClient.convertToType(data['LastName'], 'String');
            }
            if (data.hasOwnProperty('OrganisationRole')) {
                obj['OrganisationRole'] = ApiClient.convertToType(data['OrganisationRole'], 'String');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('UserID')) {
                obj['UserID'] = ApiClient.convertToType(data['UserID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['EmailAddress'] && !(typeof data['EmailAddress'] === 'string' || data['EmailAddress'] instanceof String)) {
            throw new Error("Expected the field `EmailAddress` to be a primitive type in the JSON string but got " + data['EmailAddress']);
        }
        // ensure the json data is a string
        if (data['FirstName'] && !(typeof data['FirstName'] === 'string' || data['FirstName'] instanceof String)) {
            throw new Error("Expected the field `FirstName` to be a primitive type in the JSON string but got " + data['FirstName']);
        }
        // ensure the json data is a string
        if (data['LastName'] && !(typeof data['LastName'] === 'string' || data['LastName'] instanceof String)) {
            throw new Error("Expected the field `LastName` to be a primitive type in the JSON string but got " + data['LastName']);
        }
        // ensure the json data is a string
        if (data['OrganisationRole'] && !(typeof data['OrganisationRole'] === 'string' || data['OrganisationRole'] instanceof String)) {
            throw new Error("Expected the field `OrganisationRole` to be a primitive type in the JSON string but got " + data['OrganisationRole']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }
        // ensure the json data is a string
        if (data['UserID'] && !(typeof data['UserID'] === 'string' || data['UserID'] instanceof String)) {
            throw new Error("Expected the field `UserID` to be a primitive type in the JSON string but got " + data['UserID']);
        }

        return true;
    }


}



/**
 * Email address of user
 * @member {String} EmailAddress
 */
User.prototype['EmailAddress'] = undefined;

/**
 * First name of user
 * @member {String} FirstName
 */
User.prototype['FirstName'] = undefined;

/**
 * Boolean to indicate if user is the subscriber
 * @member {Boolean} IsSubscriber
 */
User.prototype['IsSubscriber'] = undefined;

/**
 * Last name of user
 * @member {String} LastName
 */
User.prototype['LastName'] = undefined;

/**
 * User role that defines permissions in Xero and via API (READONLY, INVOICEONLY, STANDARD, FINANCIALADVISER, etc)
 * @member {module:model/User.OrganisationRoleEnum} OrganisationRole
 */
User.prototype['OrganisationRole'] = undefined;

/**
 * Timestamp of last change to user
 * @member {String} UpdatedDateUTC
 */
User.prototype['UpdatedDateUTC'] = undefined;

/**
 * Xero identifier
 * @member {String} UserID
 */
User.prototype['UserID'] = undefined;





/**
 * Allowed values for the <code>OrganisationRole</code> property.
 * @enum {String}
 * @readonly
 */
User['OrganisationRoleEnum'] = {

    /**
     * value: "READONLY"
     * @const
     */
    "READONLY": "READONLY",

    /**
     * value: "INVOICEONLY"
     * @const
     */
    "INVOICEONLY": "INVOICEONLY",

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD",

    /**
     * value: "FINANCIALADVISER"
     * @const
     */
    "FINANCIALADVISER": "FINANCIALADVISER",

    /**
     * value: "MANAGEDCLIENT"
     * @const
     */
    "MANAGEDCLIENT": "MANAGEDCLIENT",

    /**
     * value: "CASHBOOKCLIENT"
     * @const
     */
    "CASHBOOKCLIENT": "CASHBOOKCLIENT",

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN"
};



export default User;

