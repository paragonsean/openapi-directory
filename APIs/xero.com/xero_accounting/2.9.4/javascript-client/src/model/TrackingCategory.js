/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TrackingOption from './TrackingOption';

/**
 * The TrackingCategory model module.
 * @module model/TrackingCategory
 * @version 2.9.4
 */
class TrackingCategory {
    /**
     * Constructs a new <code>TrackingCategory</code>.
     * @alias module:model/TrackingCategory
     */
    constructor() { 
        
        TrackingCategory.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TrackingCategory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrackingCategory} obj Optional instance to populate.
     * @return {module:model/TrackingCategory} The populated <code>TrackingCategory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrackingCategory();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Option')) {
                obj['Option'] = ApiClient.convertToType(data['Option'], 'String');
            }
            if (data.hasOwnProperty('Options')) {
                obj['Options'] = ApiClient.convertToType(data['Options'], [TrackingOption]);
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('TrackingCategoryID')) {
                obj['TrackingCategoryID'] = ApiClient.convertToType(data['TrackingCategoryID'], 'String');
            }
            if (data.hasOwnProperty('TrackingOptionID')) {
                obj['TrackingOptionID'] = ApiClient.convertToType(data['TrackingOptionID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrackingCategory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrackingCategory</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Option'] && !(typeof data['Option'] === 'string' || data['Option'] instanceof String)) {
            throw new Error("Expected the field `Option` to be a primitive type in the JSON string but got " + data['Option']);
        }
        if (data['Options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Options'])) {
                throw new Error("Expected the field `Options` to be an array in the JSON data but got " + data['Options']);
            }
            // validate the optional field `Options` (array)
            for (const item of data['Options']) {
                TrackingOption.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['TrackingCategoryID'] && !(typeof data['TrackingCategoryID'] === 'string' || data['TrackingCategoryID'] instanceof String)) {
            throw new Error("Expected the field `TrackingCategoryID` to be a primitive type in the JSON string but got " + data['TrackingCategoryID']);
        }
        // ensure the json data is a string
        if (data['TrackingOptionID'] && !(typeof data['TrackingOptionID'] === 'string' || data['TrackingOptionID'] instanceof String)) {
            throw new Error("Expected the field `TrackingOptionID` to be a primitive type in the JSON string but got " + data['TrackingOptionID']);
        }

        return true;
    }


}



/**
 * The name of the tracking category e.g. Department, Region (max length = 100)
 * @member {String} Name
 */
TrackingCategory.prototype['Name'] = undefined;

/**
 * The option name of the tracking option e.g. East, West (max length = 100)
 * @member {String} Option
 */
TrackingCategory.prototype['Option'] = undefined;

/**
 * See Tracking Options
 * @member {Array.<module:model/TrackingOption>} Options
 */
TrackingCategory.prototype['Options'] = undefined;

/**
 * The status of a tracking category
 * @member {module:model/TrackingCategory.StatusEnum} Status
 */
TrackingCategory.prototype['Status'] = undefined;

/**
 * The Xero identifier for a tracking category e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
 * @member {String} TrackingCategoryID
 */
TrackingCategory.prototype['TrackingCategoryID'] = undefined;

/**
 * The Xero identifier for a tracking option e.g. dc54c220-0140-495a-b925-3246adc0075f
 * @member {String} TrackingOptionID
 */
TrackingCategory.prototype['TrackingOptionID'] = undefined;





/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
TrackingCategory['StatusEnum'] = {

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "ARCHIVED"
     * @const
     */
    "ARCHIVED": "ARCHIVED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};



export default TrackingCategory;

