/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';
import Payment from './Payment';

/**
 * The BatchPayment model module.
 * @module model/BatchPayment
 * @version 2.9.4
 */
class BatchPayment {
    /**
     * Constructs a new <code>BatchPayment</code>.
     * @alias module:model/BatchPayment
     */
    constructor() { 
        
        BatchPayment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BatchPayment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BatchPayment} obj Optional instance to populate.
     * @return {module:model/BatchPayment} The populated <code>BatchPayment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BatchPayment();

            if (data.hasOwnProperty('Account')) {
                obj['Account'] = Account.constructFromObject(data['Account']);
            }
            if (data.hasOwnProperty('Amount')) {
                obj['Amount'] = ApiClient.convertToType(data['Amount'], 'Number');
            }
            if (data.hasOwnProperty('BatchPaymentID')) {
                obj['BatchPaymentID'] = ApiClient.convertToType(data['BatchPaymentID'], 'String');
            }
            if (data.hasOwnProperty('Code')) {
                obj['Code'] = ApiClient.convertToType(data['Code'], 'String');
            }
            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'String');
            }
            if (data.hasOwnProperty('DateString')) {
                obj['DateString'] = ApiClient.convertToType(data['DateString'], 'String');
            }
            if (data.hasOwnProperty('Details')) {
                obj['Details'] = ApiClient.convertToType(data['Details'], 'String');
            }
            if (data.hasOwnProperty('IsReconciled')) {
                obj['IsReconciled'] = ApiClient.convertToType(data['IsReconciled'], 'String');
            }
            if (data.hasOwnProperty('Narrative')) {
                obj['Narrative'] = ApiClient.convertToType(data['Narrative'], 'String');
            }
            if (data.hasOwnProperty('Particulars')) {
                obj['Particulars'] = ApiClient.convertToType(data['Particulars'], 'String');
            }
            if (data.hasOwnProperty('Payments')) {
                obj['Payments'] = ApiClient.convertToType(data['Payments'], [Payment]);
            }
            if (data.hasOwnProperty('Reference')) {
                obj['Reference'] = ApiClient.convertToType(data['Reference'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('TotalAmount')) {
                obj['TotalAmount'] = ApiClient.convertToType(data['TotalAmount'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BatchPayment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BatchPayment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Account`
        if (data['Account']) { // data not null
          Account.validateJSON(data['Account']);
        }
        // ensure the json data is a string
        if (data['BatchPaymentID'] && !(typeof data['BatchPaymentID'] === 'string' || data['BatchPaymentID'] instanceof String)) {
            throw new Error("Expected the field `BatchPaymentID` to be a primitive type in the JSON string but got " + data['BatchPaymentID']);
        }
        // ensure the json data is a string
        if (data['Code'] && !(typeof data['Code'] === 'string' || data['Code'] instanceof String)) {
            throw new Error("Expected the field `Code` to be a primitive type in the JSON string but got " + data['Code']);
        }
        // ensure the json data is a string
        if (data['Date'] && !(typeof data['Date'] === 'string' || data['Date'] instanceof String)) {
            throw new Error("Expected the field `Date` to be a primitive type in the JSON string but got " + data['Date']);
        }
        // ensure the json data is a string
        if (data['DateString'] && !(typeof data['DateString'] === 'string' || data['DateString'] instanceof String)) {
            throw new Error("Expected the field `DateString` to be a primitive type in the JSON string but got " + data['DateString']);
        }
        // ensure the json data is a string
        if (data['Details'] && !(typeof data['Details'] === 'string' || data['Details'] instanceof String)) {
            throw new Error("Expected the field `Details` to be a primitive type in the JSON string but got " + data['Details']);
        }
        // ensure the json data is a string
        if (data['IsReconciled'] && !(typeof data['IsReconciled'] === 'string' || data['IsReconciled'] instanceof String)) {
            throw new Error("Expected the field `IsReconciled` to be a primitive type in the JSON string but got " + data['IsReconciled']);
        }
        // ensure the json data is a string
        if (data['Narrative'] && !(typeof data['Narrative'] === 'string' || data['Narrative'] instanceof String)) {
            throw new Error("Expected the field `Narrative` to be a primitive type in the JSON string but got " + data['Narrative']);
        }
        // ensure the json data is a string
        if (data['Particulars'] && !(typeof data['Particulars'] === 'string' || data['Particulars'] instanceof String)) {
            throw new Error("Expected the field `Particulars` to be a primitive type in the JSON string but got " + data['Particulars']);
        }
        if (data['Payments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Payments'])) {
                throw new Error("Expected the field `Payments` to be an array in the JSON data but got " + data['Payments']);
            }
            // validate the optional field `Payments` (array)
            for (const item of data['Payments']) {
                Payment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Reference'] && !(typeof data['Reference'] === 'string' || data['Reference'] instanceof String)) {
            throw new Error("Expected the field `Reference` to be a primitive type in the JSON string but got " + data['Reference']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['TotalAmount'] && !(typeof data['TotalAmount'] === 'string' || data['TotalAmount'] instanceof String)) {
            throw new Error("Expected the field `TotalAmount` to be a primitive type in the JSON string but got " + data['TotalAmount']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }

        return true;
    }


}



/**
 * @member {module:model/Account} Account
 */
BatchPayment.prototype['Account'] = undefined;

/**
 * The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00
 * @member {Number} Amount
 */
BatchPayment.prototype['Amount'] = undefined;

/**
 * The Xero generated unique identifier for the bank transaction (read-only)
 * @member {String} BatchPaymentID
 */
BatchPayment.prototype['BatchPaymentID'] = undefined;

/**
 * (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
 * @member {String} Code
 */
BatchPayment.prototype['Code'] = undefined;

/**
 * Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
 * @member {String} Date
 */
BatchPayment.prototype['Date'] = undefined;

/**
 * Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
 * @member {String} DateString
 */
BatchPayment.prototype['DateString'] = undefined;

/**
 * (Non-NZ Only) These details are sent to the org’s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length = 18
 * @member {String} Details
 */
BatchPayment.prototype['Details'] = undefined;

/**
 * Booelan that tells you if the batch payment has been reconciled (read-only)
 * @member {String} IsReconciled
 */
BatchPayment.prototype['IsReconciled'] = undefined;

/**
 * (UK Only) Only shows on the statement line in Xero. Max length =18
 * @member {String} Narrative
 */
BatchPayment.prototype['Narrative'] = undefined;

/**
 * (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
 * @member {String} Particulars
 */
BatchPayment.prototype['Particulars'] = undefined;

/**
 * An array of payments
 * @member {Array.<module:model/Payment>} Payments
 */
BatchPayment.prototype['Payments'] = undefined;

/**
 * (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
 * @member {String} Reference
 */
BatchPayment.prototype['Reference'] = undefined;

/**
 * AUTHORISED or DELETED (read-only). New batch payments will have a status of AUTHORISED. It is not possible to delete batch payments via the API.
 * @member {module:model/BatchPayment.StatusEnum} Status
 */
BatchPayment.prototype['Status'] = undefined;

/**
 * The total of the payments that make up the batch (read-only)
 * @member {String} TotalAmount
 */
BatchPayment.prototype['TotalAmount'] = undefined;

/**
 * PAYBATCH for bill payments or RECBATCH for sales invoice payments (read-only)
 * @member {module:model/BatchPayment.TypeEnum} Type
 */
BatchPayment.prototype['Type'] = undefined;

/**
 * UTC timestamp of last update to the payment
 * @member {String} UpdatedDateUTC
 */
BatchPayment.prototype['UpdatedDateUTC'] = undefined;





/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
BatchPayment['StatusEnum'] = {

    /**
     * value: "AUTHORISED"
     * @const
     */
    "AUTHORISED": "AUTHORISED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};


/**
 * Allowed values for the <code>Type</code> property.
 * @enum {String}
 * @readonly
 */
BatchPayment['TypeEnum'] = {

    /**
     * value: "PAYBATCH"
     * @const
     */
    "PAYBATCH": "PAYBATCH",

    /**
     * value: "RECBATCH"
     * @const
     */
    "RECBATCH": "RECBATCH"
};



export default BatchPayment;

