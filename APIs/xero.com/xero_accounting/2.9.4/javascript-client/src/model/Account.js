/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountType from './AccountType';
import CurrencyCode from './CurrencyCode';
import ValidationError from './ValidationError';

/**
 * The Account model module.
 * @module model/Account
 * @version 2.9.4
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * @alias module:model/Account
     */
    constructor() { 
        
        Account.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['HasAttachments'] = false;
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('AccountID')) {
                obj['AccountID'] = ApiClient.convertToType(data['AccountID'], 'String');
            }
            if (data.hasOwnProperty('AddToWatchlist')) {
                obj['AddToWatchlist'] = ApiClient.convertToType(data['AddToWatchlist'], 'Boolean');
            }
            if (data.hasOwnProperty('BankAccountNumber')) {
                obj['BankAccountNumber'] = ApiClient.convertToType(data['BankAccountNumber'], 'String');
            }
            if (data.hasOwnProperty('BankAccountType')) {
                obj['BankAccountType'] = ApiClient.convertToType(data['BankAccountType'], 'String');
            }
            if (data.hasOwnProperty('Class')) {
                obj['Class'] = ApiClient.convertToType(data['Class'], 'String');
            }
            if (data.hasOwnProperty('Code')) {
                obj['Code'] = ApiClient.convertToType(data['Code'], 'String');
            }
            if (data.hasOwnProperty('CurrencyCode')) {
                obj['CurrencyCode'] = CurrencyCode.constructFromObject(data['CurrencyCode']);
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('EnablePaymentsToAccount')) {
                obj['EnablePaymentsToAccount'] = ApiClient.convertToType(data['EnablePaymentsToAccount'], 'Boolean');
            }
            if (data.hasOwnProperty('HasAttachments')) {
                obj['HasAttachments'] = ApiClient.convertToType(data['HasAttachments'], 'Boolean');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('ReportingCode')) {
                obj['ReportingCode'] = ApiClient.convertToType(data['ReportingCode'], 'String');
            }
            if (data.hasOwnProperty('ReportingCodeName')) {
                obj['ReportingCodeName'] = ApiClient.convertToType(data['ReportingCodeName'], 'String');
            }
            if (data.hasOwnProperty('ShowInExpenseClaims')) {
                obj['ShowInExpenseClaims'] = ApiClient.convertToType(data['ShowInExpenseClaims'], 'Boolean');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('SystemAccount')) {
                obj['SystemAccount'] = ApiClient.convertToType(data['SystemAccount'], 'String');
            }
            if (data.hasOwnProperty('TaxType')) {
                obj['TaxType'] = ApiClient.convertToType(data['TaxType'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = AccountType.constructFromObject(data['Type']);
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AccountID'] && !(typeof data['AccountID'] === 'string' || data['AccountID'] instanceof String)) {
            throw new Error("Expected the field `AccountID` to be a primitive type in the JSON string but got " + data['AccountID']);
        }
        // ensure the json data is a string
        if (data['BankAccountNumber'] && !(typeof data['BankAccountNumber'] === 'string' || data['BankAccountNumber'] instanceof String)) {
            throw new Error("Expected the field `BankAccountNumber` to be a primitive type in the JSON string but got " + data['BankAccountNumber']);
        }
        // ensure the json data is a string
        if (data['BankAccountType'] && !(typeof data['BankAccountType'] === 'string' || data['BankAccountType'] instanceof String)) {
            throw new Error("Expected the field `BankAccountType` to be a primitive type in the JSON string but got " + data['BankAccountType']);
        }
        // ensure the json data is a string
        if (data['Class'] && !(typeof data['Class'] === 'string' || data['Class'] instanceof String)) {
            throw new Error("Expected the field `Class` to be a primitive type in the JSON string but got " + data['Class']);
        }
        // ensure the json data is a string
        if (data['Code'] && !(typeof data['Code'] === 'string' || data['Code'] instanceof String)) {
            throw new Error("Expected the field `Code` to be a primitive type in the JSON string but got " + data['Code']);
        }
        // ensure the json data is a string
        if (data['CurrencyCode'] && !(typeof data['CurrencyCode'] === 'string' || data['CurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got " + data['CurrencyCode']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['ReportingCode'] && !(typeof data['ReportingCode'] === 'string' || data['ReportingCode'] instanceof String)) {
            throw new Error("Expected the field `ReportingCode` to be a primitive type in the JSON string but got " + data['ReportingCode']);
        }
        // ensure the json data is a string
        if (data['ReportingCodeName'] && !(typeof data['ReportingCodeName'] === 'string' || data['ReportingCodeName'] instanceof String)) {
            throw new Error("Expected the field `ReportingCodeName` to be a primitive type in the JSON string but got " + data['ReportingCodeName']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['SystemAccount'] && !(typeof data['SystemAccount'] === 'string' || data['SystemAccount'] instanceof String)) {
            throw new Error("Expected the field `SystemAccount` to be a primitive type in the JSON string but got " + data['SystemAccount']);
        }
        // ensure the json data is a string
        if (data['TaxType'] && !(typeof data['TaxType'] === 'string' || data['TaxType'] instanceof String)) {
            throw new Error("Expected the field `TaxType` to be a primitive type in the JSON string but got " + data['TaxType']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The Xero identifier for an account – specified as a string following  the endpoint name   e.g. /297c2dc5-cc47-4afd-8ec8-74990b8761e9
 * @member {String} AccountID
 */
Account.prototype['AccountID'] = undefined;

/**
 * Boolean – describes whether the account is shown in the watchlist widget on the dashboard
 * @member {Boolean} AddToWatchlist
 */
Account.prototype['AddToWatchlist'] = undefined;

/**
 * For bank accounts only (Account Type BANK)
 * @member {String} BankAccountNumber
 */
Account.prototype['BankAccountNumber'] = undefined;

/**
 * For bank accounts only. See Bank Account types
 * @member {module:model/Account.BankAccountTypeEnum} BankAccountType
 */
Account.prototype['BankAccountType'] = undefined;

/**
 * See Account Class Types
 * @member {module:model/Account.ClassEnum} Class
 */
Account.prototype['Class'] = undefined;

/**
 * Customer defined alpha numeric account code e.g 200 or SALES (max length = 10)
 * @member {String} Code
 */
Account.prototype['Code'] = undefined;

/**
 * @member {module:model/CurrencyCode} CurrencyCode
 */
Account.prototype['CurrencyCode'] = undefined;

/**
 * Description of the Account. Valid for all types of accounts except bank accounts (max length = 4000)
 * @member {String} Description
 */
Account.prototype['Description'] = undefined;

/**
 * Boolean – describes whether account can have payments applied to it
 * @member {Boolean} EnablePaymentsToAccount
 */
Account.prototype['EnablePaymentsToAccount'] = undefined;

/**
 * boolean to indicate if an account has an attachment (read only)
 * @member {Boolean} HasAttachments
 * @default false
 */
Account.prototype['HasAttachments'] = false;

/**
 * Name of account (max length = 150)
 * @member {String} Name
 */
Account.prototype['Name'] = undefined;

/**
 * Shown if set
 * @member {String} ReportingCode
 */
Account.prototype['ReportingCode'] = undefined;

/**
 * Shown if set
 * @member {String} ReportingCodeName
 */
Account.prototype['ReportingCodeName'] = undefined;

/**
 * Boolean – describes whether account code is available for use with expense claims
 * @member {Boolean} ShowInExpenseClaims
 */
Account.prototype['ShowInExpenseClaims'] = undefined;

/**
 * Accounts with a status of ACTIVE can be updated to ARCHIVED. See Account Status Codes
 * @member {module:model/Account.StatusEnum} Status
 */
Account.prototype['Status'] = undefined;

/**
 * If this is a system account then this element is returned. See System Account types. Note that non-system accounts may have this element set as either “” or null.
 * @member {module:model/Account.SystemAccountEnum} SystemAccount
 */
Account.prototype['SystemAccount'] = undefined;

/**
 * The tax type from TaxRates
 * @member {String} TaxType
 */
Account.prototype['TaxType'] = undefined;

/**
 * @member {module:model/AccountType} Type
 */
Account.prototype['Type'] = undefined;

/**
 * Last modified date UTC format
 * @member {String} UpdatedDateUTC
 */
Account.prototype['UpdatedDateUTC'] = undefined;

/**
 * Displays array of validation error messages from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
Account.prototype['ValidationErrors'] = undefined;





/**
 * Allowed values for the <code>BankAccountType</code> property.
 * @enum {String}
 * @readonly
 */
Account['BankAccountTypeEnum'] = {

    /**
     * value: "BANK"
     * @const
     */
    "BANK": "BANK",

    /**
     * value: "CREDITCARD"
     * @const
     */
    "CREDITCARD": "CREDITCARD",

    /**
     * value: "PAYPAL"
     * @const
     */
    "PAYPAL": "PAYPAL",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: ""
     * @const
     */
    "empty": ""
};


/**
 * Allowed values for the <code>Class</code> property.
 * @enum {String}
 * @readonly
 */
Account['ClassEnum'] = {

    /**
     * value: "ASSET"
     * @const
     */
    "ASSET": "ASSET",

    /**
     * value: "EQUITY"
     * @const
     */
    "EQUITY": "EQUITY",

    /**
     * value: "EXPENSE"
     * @const
     */
    "EXPENSE": "EXPENSE",

    /**
     * value: "LIABILITY"
     * @const
     */
    "LIABILITY": "LIABILITY",

    /**
     * value: "REVENUE"
     * @const
     */
    "REVENUE": "REVENUE"
};


/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
Account['StatusEnum'] = {

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "ARCHIVED"
     * @const
     */
    "ARCHIVED": "ARCHIVED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};


/**
 * Allowed values for the <code>SystemAccount</code> property.
 * @enum {String}
 * @readonly
 */
Account['SystemAccountEnum'] = {

    /**
     * value: "DEBTORS"
     * @const
     */
    "DEBTORS": "DEBTORS",

    /**
     * value: "CREDITORS"
     * @const
     */
    "CREDITORS": "CREDITORS",

    /**
     * value: "BANKCURRENCYGAIN"
     * @const
     */
    "BANKCURRENCYGAIN": "BANKCURRENCYGAIN",

    /**
     * value: "GST"
     * @const
     */
    "GST": "GST",

    /**
     * value: "GSTONIMPORTS"
     * @const
     */
    "GSTONIMPORTS": "GSTONIMPORTS",

    /**
     * value: "HISTORICAL"
     * @const
     */
    "HISTORICAL": "HISTORICAL",

    /**
     * value: "REALISEDCURRENCYGAIN"
     * @const
     */
    "REALISEDCURRENCYGAIN": "REALISEDCURRENCYGAIN",

    /**
     * value: "RETAINEDEARNINGS"
     * @const
     */
    "RETAINEDEARNINGS": "RETAINEDEARNINGS",

    /**
     * value: "ROUNDING"
     * @const
     */
    "ROUNDING": "ROUNDING",

    /**
     * value: "TRACKINGTRANSFERS"
     * @const
     */
    "TRACKINGTRANSFERS": "TRACKINGTRANSFERS",

    /**
     * value: "UNPAIDEXPCLM"
     * @const
     */
    "UNPAIDEXPCLM": "UNPAIDEXPCLM",

    /**
     * value: "UNREALISEDCURRENCYGAIN"
     * @const
     */
    "UNREALISEDCURRENCYGAIN": "UNREALISEDCURRENCYGAIN",

    /**
     * value: "WAGEPAYABLES"
     * @const
     */
    "WAGEPAYABLES": "WAGEPAYABLES",

    /**
     * value: "CISASSETS"
     * @const
     */
    "CISASSETS": "CISASSETS",

    /**
     * value: "CISASSET"
     * @const
     */
    "CISASSET": "CISASSET",

    /**
     * value: "CISLABOUR"
     * @const
     */
    "CISLABOUR": "CISLABOUR",

    /**
     * value: "CISLABOUREXPENSE"
     * @const
     */
    "CISLABOUREXPENSE": "CISLABOUREXPENSE",

    /**
     * value: "CISLABOURINCOME"
     * @const
     */
    "CISLABOURINCOME": "CISLABOURINCOME",

    /**
     * value: "CISLIABILITY"
     * @const
     */
    "CISLIABILITY": "CISLIABILITY",

    /**
     * value: "CISMATERIALS"
     * @const
     */
    "CISMATERIALS": "CISMATERIALS",

    /**
     * value: ""
     * @const
     */
    "empty": ""
};



export default Account;

