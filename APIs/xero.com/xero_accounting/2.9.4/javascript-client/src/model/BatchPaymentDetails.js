/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BatchPaymentDetails model module.
 * @module model/BatchPaymentDetails
 * @version 2.9.4
 */
class BatchPaymentDetails {
    /**
     * Constructs a new <code>BatchPaymentDetails</code>.
     * Bank details for use on a batch payment stored with each contact
     * @alias module:model/BatchPaymentDetails
     */
    constructor() { 
        
        BatchPaymentDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BatchPaymentDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BatchPaymentDetails} obj Optional instance to populate.
     * @return {module:model/BatchPaymentDetails} The populated <code>BatchPaymentDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BatchPaymentDetails();

            if (data.hasOwnProperty('BankAccountName')) {
                obj['BankAccountName'] = ApiClient.convertToType(data['BankAccountName'], 'String');
            }
            if (data.hasOwnProperty('BankAccountNumber')) {
                obj['BankAccountNumber'] = ApiClient.convertToType(data['BankAccountNumber'], 'String');
            }
            if (data.hasOwnProperty('Code')) {
                obj['Code'] = ApiClient.convertToType(data['Code'], 'String');
            }
            if (data.hasOwnProperty('Details')) {
                obj['Details'] = ApiClient.convertToType(data['Details'], 'String');
            }
            if (data.hasOwnProperty('Reference')) {
                obj['Reference'] = ApiClient.convertToType(data['Reference'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BatchPaymentDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BatchPaymentDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BankAccountName'] && !(typeof data['BankAccountName'] === 'string' || data['BankAccountName'] instanceof String)) {
            throw new Error("Expected the field `BankAccountName` to be a primitive type in the JSON string but got " + data['BankAccountName']);
        }
        // ensure the json data is a string
        if (data['BankAccountNumber'] && !(typeof data['BankAccountNumber'] === 'string' || data['BankAccountNumber'] instanceof String)) {
            throw new Error("Expected the field `BankAccountNumber` to be a primitive type in the JSON string but got " + data['BankAccountNumber']);
        }
        // ensure the json data is a string
        if (data['Code'] && !(typeof data['Code'] === 'string' || data['Code'] instanceof String)) {
            throw new Error("Expected the field `Code` to be a primitive type in the JSON string but got " + data['Code']);
        }
        // ensure the json data is a string
        if (data['Details'] && !(typeof data['Details'] === 'string' || data['Details'] instanceof String)) {
            throw new Error("Expected the field `Details` to be a primitive type in the JSON string but got " + data['Details']);
        }
        // ensure the json data is a string
        if (data['Reference'] && !(typeof data['Reference'] === 'string' || data['Reference'] instanceof String)) {
            throw new Error("Expected the field `Reference` to be a primitive type in the JSON string but got " + data['Reference']);
        }

        return true;
    }


}



/**
 * Name of bank for use with Batch Payments
 * @member {String} BankAccountName
 */
BatchPaymentDetails.prototype['BankAccountName'] = undefined;

/**
 * Bank account number for use with Batch Payments
 * @member {String} BankAccountNumber
 */
BatchPaymentDetails.prototype['BankAccountNumber'] = undefined;

/**
 * (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
 * @member {String} Code
 */
BatchPaymentDetails.prototype['Code'] = undefined;

/**
 * (Non-NZ Only) These details are sent to the orgâ€™s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length = 18
 * @member {String} Details
 */
BatchPaymentDetails.prototype['Details'] = undefined;

/**
 * (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
 * @member {String} Reference
 */
BatchPaymentDetails.prototype['Reference'] = undefined;






export default BatchPaymentDetails;

