/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';
import CreditNote from './CreditNote';
import Invoice from './Invoice';
import Overpayment from './Overpayment';
import Prepayment from './Prepayment';
import ValidationError from './ValidationError';

/**
 * The Payment model module.
 * @module model/Payment
 * @version 2.9.4
 */
class Payment {
    /**
     * Constructs a new <code>Payment</code>.
     * @alias module:model/Payment
     */
    constructor() { 
        
        Payment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['HasAccount'] = false;
        obj['HasValidationErrors'] = false;
    }

    /**
     * Constructs a <code>Payment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Payment} obj Optional instance to populate.
     * @return {module:model/Payment} The populated <code>Payment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Payment();

            if (data.hasOwnProperty('Account')) {
                obj['Account'] = Account.constructFromObject(data['Account']);
            }
            if (data.hasOwnProperty('Amount')) {
                obj['Amount'] = ApiClient.convertToType(data['Amount'], 'Number');
            }
            if (data.hasOwnProperty('BankAccountNumber')) {
                obj['BankAccountNumber'] = ApiClient.convertToType(data['BankAccountNumber'], 'String');
            }
            if (data.hasOwnProperty('BatchPaymentID')) {
                obj['BatchPaymentID'] = ApiClient.convertToType(data['BatchPaymentID'], 'String');
            }
            if (data.hasOwnProperty('Code')) {
                obj['Code'] = ApiClient.convertToType(data['Code'], 'String');
            }
            if (data.hasOwnProperty('CreditNote')) {
                obj['CreditNote'] = CreditNote.constructFromObject(data['CreditNote']);
            }
            if (data.hasOwnProperty('CreditNoteNumber')) {
                obj['CreditNoteNumber'] = ApiClient.convertToType(data['CreditNoteNumber'], 'String');
            }
            if (data.hasOwnProperty('CurrencyRate')) {
                obj['CurrencyRate'] = ApiClient.convertToType(data['CurrencyRate'], 'Number');
            }
            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'String');
            }
            if (data.hasOwnProperty('Details')) {
                obj['Details'] = ApiClient.convertToType(data['Details'], 'String');
            }
            if (data.hasOwnProperty('HasAccount')) {
                obj['HasAccount'] = ApiClient.convertToType(data['HasAccount'], 'Boolean');
            }
            if (data.hasOwnProperty('HasValidationErrors')) {
                obj['HasValidationErrors'] = ApiClient.convertToType(data['HasValidationErrors'], 'Boolean');
            }
            if (data.hasOwnProperty('Invoice')) {
                obj['Invoice'] = Invoice.constructFromObject(data['Invoice']);
            }
            if (data.hasOwnProperty('InvoiceNumber')) {
                obj['InvoiceNumber'] = ApiClient.convertToType(data['InvoiceNumber'], 'String');
            }
            if (data.hasOwnProperty('IsReconciled')) {
                obj['IsReconciled'] = ApiClient.convertToType(data['IsReconciled'], 'Boolean');
            }
            if (data.hasOwnProperty('Overpayment')) {
                obj['Overpayment'] = Overpayment.constructFromObject(data['Overpayment']);
            }
            if (data.hasOwnProperty('Particulars')) {
                obj['Particulars'] = ApiClient.convertToType(data['Particulars'], 'String');
            }
            if (data.hasOwnProperty('PaymentID')) {
                obj['PaymentID'] = ApiClient.convertToType(data['PaymentID'], 'String');
            }
            if (data.hasOwnProperty('PaymentType')) {
                obj['PaymentType'] = ApiClient.convertToType(data['PaymentType'], 'String');
            }
            if (data.hasOwnProperty('Prepayment')) {
                obj['Prepayment'] = Prepayment.constructFromObject(data['Prepayment']);
            }
            if (data.hasOwnProperty('Reference')) {
                obj['Reference'] = ApiClient.convertToType(data['Reference'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('StatusAttributeString')) {
                obj['StatusAttributeString'] = ApiClient.convertToType(data['StatusAttributeString'], 'String');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Payment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Payment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Account`
        if (data['Account']) { // data not null
          Account.validateJSON(data['Account']);
        }
        // ensure the json data is a string
        if (data['BankAccountNumber'] && !(typeof data['BankAccountNumber'] === 'string' || data['BankAccountNumber'] instanceof String)) {
            throw new Error("Expected the field `BankAccountNumber` to be a primitive type in the JSON string but got " + data['BankAccountNumber']);
        }
        // ensure the json data is a string
        if (data['BatchPaymentID'] && !(typeof data['BatchPaymentID'] === 'string' || data['BatchPaymentID'] instanceof String)) {
            throw new Error("Expected the field `BatchPaymentID` to be a primitive type in the JSON string but got " + data['BatchPaymentID']);
        }
        // ensure the json data is a string
        if (data['Code'] && !(typeof data['Code'] === 'string' || data['Code'] instanceof String)) {
            throw new Error("Expected the field `Code` to be a primitive type in the JSON string but got " + data['Code']);
        }
        // validate the optional field `CreditNote`
        if (data['CreditNote']) { // data not null
          CreditNote.validateJSON(data['CreditNote']);
        }
        // ensure the json data is a string
        if (data['CreditNoteNumber'] && !(typeof data['CreditNoteNumber'] === 'string' || data['CreditNoteNumber'] instanceof String)) {
            throw new Error("Expected the field `CreditNoteNumber` to be a primitive type in the JSON string but got " + data['CreditNoteNumber']);
        }
        // ensure the json data is a string
        if (data['Date'] && !(typeof data['Date'] === 'string' || data['Date'] instanceof String)) {
            throw new Error("Expected the field `Date` to be a primitive type in the JSON string but got " + data['Date']);
        }
        // ensure the json data is a string
        if (data['Details'] && !(typeof data['Details'] === 'string' || data['Details'] instanceof String)) {
            throw new Error("Expected the field `Details` to be a primitive type in the JSON string but got " + data['Details']);
        }
        // validate the optional field `Invoice`
        if (data['Invoice']) { // data not null
          Invoice.validateJSON(data['Invoice']);
        }
        // ensure the json data is a string
        if (data['InvoiceNumber'] && !(typeof data['InvoiceNumber'] === 'string' || data['InvoiceNumber'] instanceof String)) {
            throw new Error("Expected the field `InvoiceNumber` to be a primitive type in the JSON string but got " + data['InvoiceNumber']);
        }
        // validate the optional field `Overpayment`
        if (data['Overpayment']) { // data not null
          Overpayment.validateJSON(data['Overpayment']);
        }
        // ensure the json data is a string
        if (data['Particulars'] && !(typeof data['Particulars'] === 'string' || data['Particulars'] instanceof String)) {
            throw new Error("Expected the field `Particulars` to be a primitive type in the JSON string but got " + data['Particulars']);
        }
        // ensure the json data is a string
        if (data['PaymentID'] && !(typeof data['PaymentID'] === 'string' || data['PaymentID'] instanceof String)) {
            throw new Error("Expected the field `PaymentID` to be a primitive type in the JSON string but got " + data['PaymentID']);
        }
        // ensure the json data is a string
        if (data['PaymentType'] && !(typeof data['PaymentType'] === 'string' || data['PaymentType'] instanceof String)) {
            throw new Error("Expected the field `PaymentType` to be a primitive type in the JSON string but got " + data['PaymentType']);
        }
        // validate the optional field `Prepayment`
        if (data['Prepayment']) { // data not null
          Prepayment.validateJSON(data['Prepayment']);
        }
        // ensure the json data is a string
        if (data['Reference'] && !(typeof data['Reference'] === 'string' || data['Reference'] instanceof String)) {
            throw new Error("Expected the field `Reference` to be a primitive type in the JSON string but got " + data['Reference']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['StatusAttributeString'] && !(typeof data['StatusAttributeString'] === 'string' || data['StatusAttributeString'] instanceof String)) {
            throw new Error("Expected the field `StatusAttributeString` to be a primitive type in the JSON string but got " + data['StatusAttributeString']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/Account} Account
 */
Payment.prototype['Account'] = undefined;

/**
 * The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00
 * @member {Number} Amount
 */
Payment.prototype['Amount'] = undefined;

/**
 * The suppliers bank account number the payment is being made to
 * @member {String} BankAccountNumber
 */
Payment.prototype['BankAccountNumber'] = undefined;

/**
 * Present if the payment was created as part of a batch.
 * @member {String} BatchPaymentID
 */
Payment.prototype['BatchPaymentID'] = undefined;

/**
 * Code of account you are using to make the payment e.g. 001 (note- not all accounts have a code value)
 * @member {String} Code
 */
Payment.prototype['Code'] = undefined;

/**
 * @member {module:model/CreditNote} CreditNote
 */
Payment.prototype['CreditNote'] = undefined;

/**
 * Number of invoice or credit note you are applying payment to e.g. INV-4003
 * @member {String} CreditNoteNumber
 */
Payment.prototype['CreditNoteNumber'] = undefined;

/**
 * Exchange rate when payment is received. Only used for non base currency invoices and credit notes e.g. 0.7500
 * @member {Number} CurrencyRate
 */
Payment.prototype['CurrencyRate'] = undefined;

/**
 * Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
 * @member {String} Date
 */
Payment.prototype['Date'] = undefined;

/**
 * The information to appear on the supplier's bank account
 * @member {String} Details
 */
Payment.prototype['Details'] = undefined;

/**
 * A boolean to indicate if a contact has an validation errors
 * @member {Boolean} HasAccount
 * @default false
 */
Payment.prototype['HasAccount'] = false;

/**
 * A boolean to indicate if a contact has an validation errors
 * @member {Boolean} HasValidationErrors
 * @default false
 */
Payment.prototype['HasValidationErrors'] = false;

/**
 * @member {module:model/Invoice} Invoice
 */
Payment.prototype['Invoice'] = undefined;

/**
 * Number of invoice or credit note you are applying payment to e.g.INV-4003
 * @member {String} InvoiceNumber
 */
Payment.prototype['InvoiceNumber'] = undefined;

/**
 * An optional parameter for the payment. A boolean indicating whether you would like the payment to be created as reconciled when using PUT, or whether a payment has been reconciled when using GET
 * @member {Boolean} IsReconciled
 */
Payment.prototype['IsReconciled'] = undefined;

/**
 * @member {module:model/Overpayment} Overpayment
 */
Payment.prototype['Overpayment'] = undefined;

/**
 * The suppliers bank account number the payment is being made to
 * @member {String} Particulars
 */
Payment.prototype['Particulars'] = undefined;

/**
 * The Xero identifier for an Payment e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
 * @member {String} PaymentID
 */
Payment.prototype['PaymentID'] = undefined;

/**
 * See Payment Types.
 * @member {module:model/Payment.PaymentTypeEnum} PaymentType
 */
Payment.prototype['PaymentType'] = undefined;

/**
 * @member {module:model/Prepayment} Prepayment
 */
Payment.prototype['Prepayment'] = undefined;

/**
 * An optional description for the payment e.g. Direct Debit
 * @member {String} Reference
 */
Payment.prototype['Reference'] = undefined;

/**
 * The status of the payment.
 * @member {module:model/Payment.StatusEnum} Status
 */
Payment.prototype['Status'] = undefined;

/**
 * A string to indicate if a invoice status
 * @member {String} StatusAttributeString
 */
Payment.prototype['StatusAttributeString'] = undefined;

/**
 * UTC timestamp of last update to the payment
 * @member {String} UpdatedDateUTC
 */
Payment.prototype['UpdatedDateUTC'] = undefined;

/**
 * Displays array of validation error messages from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
Payment.prototype['ValidationErrors'] = undefined;





/**
 * Allowed values for the <code>PaymentType</code> property.
 * @enum {String}
 * @readonly
 */
Payment['PaymentTypeEnum'] = {

    /**
     * value: "ACCRECPAYMENT"
     * @const
     */
    "ACCRECPAYMENT": "ACCRECPAYMENT",

    /**
     * value: "ACCPAYPAYMENT"
     * @const
     */
    "ACCPAYPAYMENT": "ACCPAYPAYMENT",

    /**
     * value: "ARCREDITPAYMENT"
     * @const
     */
    "ARCREDITPAYMENT": "ARCREDITPAYMENT",

    /**
     * value: "APCREDITPAYMENT"
     * @const
     */
    "APCREDITPAYMENT": "APCREDITPAYMENT",

    /**
     * value: "AROVERPAYMENTPAYMENT"
     * @const
     */
    "AROVERPAYMENTPAYMENT": "AROVERPAYMENTPAYMENT",

    /**
     * value: "ARPREPAYMENTPAYMENT"
     * @const
     */
    "ARPREPAYMENTPAYMENT": "ARPREPAYMENTPAYMENT",

    /**
     * value: "APPREPAYMENTPAYMENT"
     * @const
     */
    "APPREPAYMENTPAYMENT": "APPREPAYMENTPAYMENT",

    /**
     * value: "APOVERPAYMENTPAYMENT"
     * @const
     */
    "APOVERPAYMENTPAYMENT": "APOVERPAYMENTPAYMENT"
};


/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
Payment['StatusEnum'] = {

    /**
     * value: "AUTHORISED"
     * @const
     */
    "AUTHORISED": "AUTHORISED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};



export default Payment;

