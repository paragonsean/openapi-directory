/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddressForOrganisation from './AddressForOrganisation';
import CountryCode from './CountryCode';
import CurrencyCode from './CurrencyCode';
import ExternalLink from './ExternalLink';
import PaymentTerm from './PaymentTerm';
import Phone from './Phone';
import TimeZone from './TimeZone';

/**
 * The Organisation model module.
 * @module model/Organisation
 * @version 2.9.4
 */
class Organisation {
    /**
     * Constructs a new <code>Organisation</code>.
     * @alias module:model/Organisation
     */
    constructor() { 
        
        Organisation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Organisation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Organisation} obj Optional instance to populate.
     * @return {module:model/Organisation} The populated <code>Organisation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Organisation();

            if (data.hasOwnProperty('APIKey')) {
                obj['APIKey'] = ApiClient.convertToType(data['APIKey'], 'String');
            }
            if (data.hasOwnProperty('Addresses')) {
                obj['Addresses'] = ApiClient.convertToType(data['Addresses'], [AddressForOrganisation]);
            }
            if (data.hasOwnProperty('BaseCurrency')) {
                obj['BaseCurrency'] = CurrencyCode.constructFromObject(data['BaseCurrency']);
            }
            if (data.hasOwnProperty('Class')) {
                obj['Class'] = ApiClient.convertToType(data['Class'], 'String');
            }
            if (data.hasOwnProperty('CountryCode')) {
                obj['CountryCode'] = CountryCode.constructFromObject(data['CountryCode']);
            }
            if (data.hasOwnProperty('CreatedDateUTC')) {
                obj['CreatedDateUTC'] = ApiClient.convertToType(data['CreatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('DefaultPurchasesTax')) {
                obj['DefaultPurchasesTax'] = ApiClient.convertToType(data['DefaultPurchasesTax'], 'String');
            }
            if (data.hasOwnProperty('DefaultSalesTax')) {
                obj['DefaultSalesTax'] = ApiClient.convertToType(data['DefaultSalesTax'], 'String');
            }
            if (data.hasOwnProperty('Edition')) {
                obj['Edition'] = ApiClient.convertToType(data['Edition'], 'String');
            }
            if (data.hasOwnProperty('EmployerIdentificationNumber')) {
                obj['EmployerIdentificationNumber'] = ApiClient.convertToType(data['EmployerIdentificationNumber'], 'String');
            }
            if (data.hasOwnProperty('EndOfYearLockDate')) {
                obj['EndOfYearLockDate'] = ApiClient.convertToType(data['EndOfYearLockDate'], 'String');
            }
            if (data.hasOwnProperty('ExternalLinks')) {
                obj['ExternalLinks'] = ApiClient.convertToType(data['ExternalLinks'], [ExternalLink]);
            }
            if (data.hasOwnProperty('FinancialYearEndDay')) {
                obj['FinancialYearEndDay'] = ApiClient.convertToType(data['FinancialYearEndDay'], 'Number');
            }
            if (data.hasOwnProperty('FinancialYearEndMonth')) {
                obj['FinancialYearEndMonth'] = ApiClient.convertToType(data['FinancialYearEndMonth'], 'Number');
            }
            if (data.hasOwnProperty('IsDemoCompany')) {
                obj['IsDemoCompany'] = ApiClient.convertToType(data['IsDemoCompany'], 'Boolean');
            }
            if (data.hasOwnProperty('LegalName')) {
                obj['LegalName'] = ApiClient.convertToType(data['LegalName'], 'String');
            }
            if (data.hasOwnProperty('LineOfBusiness')) {
                obj['LineOfBusiness'] = ApiClient.convertToType(data['LineOfBusiness'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('OrganisationEntityType')) {
                obj['OrganisationEntityType'] = ApiClient.convertToType(data['OrganisationEntityType'], 'String');
            }
            if (data.hasOwnProperty('OrganisationID')) {
                obj['OrganisationID'] = ApiClient.convertToType(data['OrganisationID'], 'String');
            }
            if (data.hasOwnProperty('OrganisationStatus')) {
                obj['OrganisationStatus'] = ApiClient.convertToType(data['OrganisationStatus'], 'String');
            }
            if (data.hasOwnProperty('OrganisationType')) {
                obj['OrganisationType'] = ApiClient.convertToType(data['OrganisationType'], 'String');
            }
            if (data.hasOwnProperty('PaymentTerms')) {
                obj['PaymentTerms'] = PaymentTerm.constructFromObject(data['PaymentTerms']);
            }
            if (data.hasOwnProperty('PaysTax')) {
                obj['PaysTax'] = ApiClient.convertToType(data['PaysTax'], 'Boolean');
            }
            if (data.hasOwnProperty('PeriodLockDate')) {
                obj['PeriodLockDate'] = ApiClient.convertToType(data['PeriodLockDate'], 'String');
            }
            if (data.hasOwnProperty('Phones')) {
                obj['Phones'] = ApiClient.convertToType(data['Phones'], [Phone]);
            }
            if (data.hasOwnProperty('RegistrationNumber')) {
                obj['RegistrationNumber'] = ApiClient.convertToType(data['RegistrationNumber'], 'String');
            }
            if (data.hasOwnProperty('SalesTaxBasis')) {
                obj['SalesTaxBasis'] = ApiClient.convertToType(data['SalesTaxBasis'], 'String');
            }
            if (data.hasOwnProperty('SalesTaxPeriod')) {
                obj['SalesTaxPeriod'] = ApiClient.convertToType(data['SalesTaxPeriod'], 'String');
            }
            if (data.hasOwnProperty('ShortCode')) {
                obj['ShortCode'] = ApiClient.convertToType(data['ShortCode'], 'String');
            }
            if (data.hasOwnProperty('TaxNumber')) {
                obj['TaxNumber'] = ApiClient.convertToType(data['TaxNumber'], 'String');
            }
            if (data.hasOwnProperty('Timezone')) {
                obj['Timezone'] = TimeZone.constructFromObject(data['Timezone']);
            }
            if (data.hasOwnProperty('Version')) {
                obj['Version'] = ApiClient.convertToType(data['Version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Organisation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Organisation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['APIKey'] && !(typeof data['APIKey'] === 'string' || data['APIKey'] instanceof String)) {
            throw new Error("Expected the field `APIKey` to be a primitive type in the JSON string but got " + data['APIKey']);
        }
        if (data['Addresses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Addresses'])) {
                throw new Error("Expected the field `Addresses` to be an array in the JSON data but got " + data['Addresses']);
            }
            // validate the optional field `Addresses` (array)
            for (const item of data['Addresses']) {
                AddressForOrganisation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['BaseCurrency'] && !(typeof data['BaseCurrency'] === 'string' || data['BaseCurrency'] instanceof String)) {
            throw new Error("Expected the field `BaseCurrency` to be a primitive type in the JSON string but got " + data['BaseCurrency']);
        }
        // ensure the json data is a string
        if (data['Class'] && !(typeof data['Class'] === 'string' || data['Class'] instanceof String)) {
            throw new Error("Expected the field `Class` to be a primitive type in the JSON string but got " + data['Class']);
        }
        // ensure the json data is a string
        if (data['CountryCode'] && !(typeof data['CountryCode'] === 'string' || data['CountryCode'] instanceof String)) {
            throw new Error("Expected the field `CountryCode` to be a primitive type in the JSON string but got " + data['CountryCode']);
        }
        // ensure the json data is a string
        if (data['CreatedDateUTC'] && !(typeof data['CreatedDateUTC'] === 'string' || data['CreatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `CreatedDateUTC` to be a primitive type in the JSON string but got " + data['CreatedDateUTC']);
        }
        // ensure the json data is a string
        if (data['DefaultPurchasesTax'] && !(typeof data['DefaultPurchasesTax'] === 'string' || data['DefaultPurchasesTax'] instanceof String)) {
            throw new Error("Expected the field `DefaultPurchasesTax` to be a primitive type in the JSON string but got " + data['DefaultPurchasesTax']);
        }
        // ensure the json data is a string
        if (data['DefaultSalesTax'] && !(typeof data['DefaultSalesTax'] === 'string' || data['DefaultSalesTax'] instanceof String)) {
            throw new Error("Expected the field `DefaultSalesTax` to be a primitive type in the JSON string but got " + data['DefaultSalesTax']);
        }
        // ensure the json data is a string
        if (data['Edition'] && !(typeof data['Edition'] === 'string' || data['Edition'] instanceof String)) {
            throw new Error("Expected the field `Edition` to be a primitive type in the JSON string but got " + data['Edition']);
        }
        // ensure the json data is a string
        if (data['EmployerIdentificationNumber'] && !(typeof data['EmployerIdentificationNumber'] === 'string' || data['EmployerIdentificationNumber'] instanceof String)) {
            throw new Error("Expected the field `EmployerIdentificationNumber` to be a primitive type in the JSON string but got " + data['EmployerIdentificationNumber']);
        }
        // ensure the json data is a string
        if (data['EndOfYearLockDate'] && !(typeof data['EndOfYearLockDate'] === 'string' || data['EndOfYearLockDate'] instanceof String)) {
            throw new Error("Expected the field `EndOfYearLockDate` to be a primitive type in the JSON string but got " + data['EndOfYearLockDate']);
        }
        if (data['ExternalLinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ExternalLinks'])) {
                throw new Error("Expected the field `ExternalLinks` to be an array in the JSON data but got " + data['ExternalLinks']);
            }
            // validate the optional field `ExternalLinks` (array)
            for (const item of data['ExternalLinks']) {
                ExternalLink.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['LegalName'] && !(typeof data['LegalName'] === 'string' || data['LegalName'] instanceof String)) {
            throw new Error("Expected the field `LegalName` to be a primitive type in the JSON string but got " + data['LegalName']);
        }
        // ensure the json data is a string
        if (data['LineOfBusiness'] && !(typeof data['LineOfBusiness'] === 'string' || data['LineOfBusiness'] instanceof String)) {
            throw new Error("Expected the field `LineOfBusiness` to be a primitive type in the JSON string but got " + data['LineOfBusiness']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['OrganisationEntityType'] && !(typeof data['OrganisationEntityType'] === 'string' || data['OrganisationEntityType'] instanceof String)) {
            throw new Error("Expected the field `OrganisationEntityType` to be a primitive type in the JSON string but got " + data['OrganisationEntityType']);
        }
        // ensure the json data is a string
        if (data['OrganisationID'] && !(typeof data['OrganisationID'] === 'string' || data['OrganisationID'] instanceof String)) {
            throw new Error("Expected the field `OrganisationID` to be a primitive type in the JSON string but got " + data['OrganisationID']);
        }
        // ensure the json data is a string
        if (data['OrganisationStatus'] && !(typeof data['OrganisationStatus'] === 'string' || data['OrganisationStatus'] instanceof String)) {
            throw new Error("Expected the field `OrganisationStatus` to be a primitive type in the JSON string but got " + data['OrganisationStatus']);
        }
        // ensure the json data is a string
        if (data['OrganisationType'] && !(typeof data['OrganisationType'] === 'string' || data['OrganisationType'] instanceof String)) {
            throw new Error("Expected the field `OrganisationType` to be a primitive type in the JSON string but got " + data['OrganisationType']);
        }
        // validate the optional field `PaymentTerms`
        if (data['PaymentTerms']) { // data not null
          PaymentTerm.validateJSON(data['PaymentTerms']);
        }
        // ensure the json data is a string
        if (data['PeriodLockDate'] && !(typeof data['PeriodLockDate'] === 'string' || data['PeriodLockDate'] instanceof String)) {
            throw new Error("Expected the field `PeriodLockDate` to be a primitive type in the JSON string but got " + data['PeriodLockDate']);
        }
        if (data['Phones']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Phones'])) {
                throw new Error("Expected the field `Phones` to be an array in the JSON data but got " + data['Phones']);
            }
            // validate the optional field `Phones` (array)
            for (const item of data['Phones']) {
                Phone.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['RegistrationNumber'] && !(typeof data['RegistrationNumber'] === 'string' || data['RegistrationNumber'] instanceof String)) {
            throw new Error("Expected the field `RegistrationNumber` to be a primitive type in the JSON string but got " + data['RegistrationNumber']);
        }
        // ensure the json data is a string
        if (data['SalesTaxBasis'] && !(typeof data['SalesTaxBasis'] === 'string' || data['SalesTaxBasis'] instanceof String)) {
            throw new Error("Expected the field `SalesTaxBasis` to be a primitive type in the JSON string but got " + data['SalesTaxBasis']);
        }
        // ensure the json data is a string
        if (data['SalesTaxPeriod'] && !(typeof data['SalesTaxPeriod'] === 'string' || data['SalesTaxPeriod'] instanceof String)) {
            throw new Error("Expected the field `SalesTaxPeriod` to be a primitive type in the JSON string but got " + data['SalesTaxPeriod']);
        }
        // ensure the json data is a string
        if (data['ShortCode'] && !(typeof data['ShortCode'] === 'string' || data['ShortCode'] instanceof String)) {
            throw new Error("Expected the field `ShortCode` to be a primitive type in the JSON string but got " + data['ShortCode']);
        }
        // ensure the json data is a string
        if (data['TaxNumber'] && !(typeof data['TaxNumber'] === 'string' || data['TaxNumber'] instanceof String)) {
            throw new Error("Expected the field `TaxNumber` to be a primitive type in the JSON string but got " + data['TaxNumber']);
        }
        // ensure the json data is a string
        if (data['Timezone'] && !(typeof data['Timezone'] === 'string' || data['Timezone'] instanceof String)) {
            throw new Error("Expected the field `Timezone` to be a primitive type in the JSON string but got " + data['Timezone']);
        }
        // ensure the json data is a string
        if (data['Version'] && !(typeof data['Version'] === 'string' || data['Version'] instanceof String)) {
            throw new Error("Expected the field `Version` to be a primitive type in the JSON string but got " + data['Version']);
        }

        return true;
    }


}



/**
 * Display a unique key used for Xero-to-Xero transactions
 * @member {String} APIKey
 */
Organisation.prototype['APIKey'] = undefined;

/**
 * Address details for organisation – see Addresses
 * @member {Array.<module:model/AddressForOrganisation>} Addresses
 */
Organisation.prototype['Addresses'] = undefined;

/**
 * @member {module:model/CurrencyCode} BaseCurrency
 */
Organisation.prototype['BaseCurrency'] = undefined;

/**
 * Organisation Classes describe which plan the Xero organisation is on (e.g. DEMO, TRIAL, PREMIUM)
 * @member {module:model/Organisation.ClassEnum} Class
 */
Organisation.prototype['Class'] = undefined;

/**
 * @member {module:model/CountryCode} CountryCode
 */
Organisation.prototype['CountryCode'] = undefined;

/**
 * Timestamp when the organisation was created in Xero
 * @member {String} CreatedDateUTC
 */
Organisation.prototype['CreatedDateUTC'] = undefined;

/**
 * The default for LineAmountTypes on purchase transactions
 * @member {String} DefaultPurchasesTax
 */
Organisation.prototype['DefaultPurchasesTax'] = undefined;

/**
 * The default for LineAmountTypes on sales transactions
 * @member {String} DefaultSalesTax
 */
Organisation.prototype['DefaultSalesTax'] = undefined;

/**
 * BUSINESS or PARTNER. Partner edition organisations are sold exclusively through accounting partners and have restricted functionality (e.g. no access to invoicing)
 * @member {module:model/Organisation.EditionEnum} Edition
 */
Organisation.prototype['Edition'] = undefined;

/**
 * Shown if set. US Only.
 * @member {String} EmployerIdentificationNumber
 */
Organisation.prototype['EmployerIdentificationNumber'] = undefined;

/**
 * Shown if set. See lock dates
 * @member {String} EndOfYearLockDate
 */
Organisation.prototype['EndOfYearLockDate'] = undefined;

/**
 * Organisation profile links for popular services such as Facebook,Twitter, GooglePlus and LinkedIn. You can also add link to your website here. Shown if Organisation settings  is updated in Xero. See ExternalLinks below
 * @member {Array.<module:model/ExternalLink>} ExternalLinks
 */
Organisation.prototype['ExternalLinks'] = undefined;

/**
 * Calendar day e.g. 0-31
 * @member {Number} FinancialYearEndDay
 */
Organisation.prototype['FinancialYearEndDay'] = undefined;

/**
 * Calendar Month e.g. 1-12
 * @member {Number} FinancialYearEndMonth
 */
Organisation.prototype['FinancialYearEndMonth'] = undefined;

/**
 * Boolean to describe if organisation is a demo company.
 * @member {Boolean} IsDemoCompany
 */
Organisation.prototype['IsDemoCompany'] = undefined;

/**
 * Organisation name shown on Reports
 * @member {String} LegalName
 */
Organisation.prototype['LegalName'] = undefined;

/**
 * Description of business type as defined in Organisation settings
 * @member {String} LineOfBusiness
 */
Organisation.prototype['LineOfBusiness'] = undefined;

/**
 * Display name of organisation shown in Xero
 * @member {String} Name
 */
Organisation.prototype['Name'] = undefined;

/**
 * Organisation Entity Type
 * @member {module:model/Organisation.OrganisationEntityTypeEnum} OrganisationEntityType
 */
Organisation.prototype['OrganisationEntityType'] = undefined;

/**
 * Unique Xero identifier
 * @member {String} OrganisationID
 */
Organisation.prototype['OrganisationID'] = undefined;

/**
 * Will be set to ACTIVE if you can connect to organisation via the Xero API
 * @member {String} OrganisationStatus
 */
Organisation.prototype['OrganisationStatus'] = undefined;

/**
 * Organisation Type
 * @member {module:model/Organisation.OrganisationTypeEnum} OrganisationType
 */
Organisation.prototype['OrganisationType'] = undefined;

/**
 * @member {module:model/PaymentTerm} PaymentTerms
 */
Organisation.prototype['PaymentTerms'] = undefined;

/**
 * Boolean to describe if organisation is registered with a local tax authority i.e. true, false
 * @member {Boolean} PaysTax
 */
Organisation.prototype['PaysTax'] = undefined;

/**
 * Shown if set. See lock dates
 * @member {String} PeriodLockDate
 */
Organisation.prototype['PeriodLockDate'] = undefined;

/**
 * Phones details for organisation – see Phones
 * @member {Array.<module:model/Phone>} Phones
 */
Organisation.prototype['Phones'] = undefined;

/**
 * Shows for New Zealand, Australian and UK organisations
 * @member {String} RegistrationNumber
 */
Organisation.prototype['RegistrationNumber'] = undefined;

/**
 * The accounting basis used for tax returns. See Sales Tax Basis
 * @member {module:model/Organisation.SalesTaxBasisEnum} SalesTaxBasis
 */
Organisation.prototype['SalesTaxBasis'] = undefined;

/**
 * The frequency with which tax returns are processed. See Sales Tax Period
 * @member {module:model/Organisation.SalesTaxPeriodEnum} SalesTaxPeriod
 */
Organisation.prototype['SalesTaxPeriod'] = undefined;

/**
 * A unique identifier for the organisation. Potential uses.
 * @member {String} ShortCode
 */
Organisation.prototype['ShortCode'] = undefined;

/**
 * Shown if set. Displays in the Xero UI as Tax File Number (AU), GST Number (NZ), VAT Number (UK) and Tax ID Number (US & Global).
 * @member {String} TaxNumber
 */
Organisation.prototype['TaxNumber'] = undefined;

/**
 * @member {module:model/TimeZone} Timezone
 */
Organisation.prototype['Timezone'] = undefined;

/**
 * See Version Types
 * @member {module:model/Organisation.VersionEnum} Version
 */
Organisation.prototype['Version'] = undefined;





/**
 * Allowed values for the <code>Class</code> property.
 * @enum {String}
 * @readonly
 */
Organisation['ClassEnum'] = {

    /**
     * value: "DEMO"
     * @const
     */
    "DEMO": "DEMO",

    /**
     * value: "TRIAL"
     * @const
     */
    "TRIAL": "TRIAL",

    /**
     * value: "STARTER"
     * @const
     */
    "STARTER": "STARTER",

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD",

    /**
     * value: "PREMIUM"
     * @const
     */
    "PREMIUM": "PREMIUM",

    /**
     * value: "PREMIUM_20"
     * @const
     */
    "PREMIUM_20": "PREMIUM_20",

    /**
     * value: "PREMIUM_50"
     * @const
     */
    "PREMIUM_50": "PREMIUM_50",

    /**
     * value: "PREMIUM_100"
     * @const
     */
    "PREMIUM_100": "PREMIUM_100",

    /**
     * value: "LEDGER"
     * @const
     */
    "LEDGER": "LEDGER",

    /**
     * value: "GST_CASHBOOK"
     * @const
     */
    "GST_CASHBOOK": "GST_CASHBOOK",

    /**
     * value: "NON_GST_CASHBOOK"
     * @const
     */
    "NON_GST_CASHBOOK": "NON_GST_CASHBOOK"
};


/**
 * Allowed values for the <code>Edition</code> property.
 * @enum {String}
 * @readonly
 */
Organisation['EditionEnum'] = {

    /**
     * value: "BUSINESS"
     * @const
     */
    "BUSINESS": "BUSINESS",

    /**
     * value: "PARTNER"
     * @const
     */
    "PARTNER": "PARTNER"
};


/**
 * Allowed values for the <code>OrganisationEntityType</code> property.
 * @enum {String}
 * @readonly
 */
Organisation['OrganisationEntityTypeEnum'] = {

    /**
     * value: "ACCOUNTING_PRACTICE"
     * @const
     */
    "ACCOUNTING_PRACTICE": "ACCOUNTING_PRACTICE",

    /**
     * value: "COMPANY"
     * @const
     */
    "COMPANY": "COMPANY",

    /**
     * value: "CHARITY"
     * @const
     */
    "CHARITY": "CHARITY",

    /**
     * value: "CLUB_OR_SOCIETY"
     * @const
     */
    "CLUB_OR_SOCIETY": "CLUB_OR_SOCIETY",

    /**
     * value: "LOOK_THROUGH_COMPANY"
     * @const
     */
    "LOOK_THROUGH_COMPANY": "LOOK_THROUGH_COMPANY",

    /**
     * value: "NOT_FOR_PROFIT"
     * @const
     */
    "NOT_FOR_PROFIT": "NOT_FOR_PROFIT",

    /**
     * value: "PARTNERSHIP"
     * @const
     */
    "PARTNERSHIP": "PARTNERSHIP",

    /**
     * value: "S_CORPORATION"
     * @const
     */
    "S_CORPORATION": "S_CORPORATION",

    /**
     * value: "SELF_MANAGED_SUPERANNUATION_FUND"
     * @const
     */
    "SELF_MANAGED_SUPERANNUATION_FUND": "SELF_MANAGED_SUPERANNUATION_FUND",

    /**
     * value: "SOLE_TRADER"
     * @const
     */
    "SOLE_TRADER": "SOLE_TRADER",

    /**
     * value: "SUPERANNUATION_FUND"
     * @const
     */
    "SUPERANNUATION_FUND": "SUPERANNUATION_FUND",

    /**
     * value: "TRUST"
     * @const
     */
    "TRUST": "TRUST"
};


/**
 * Allowed values for the <code>OrganisationType</code> property.
 * @enum {String}
 * @readonly
 */
Organisation['OrganisationTypeEnum'] = {

    /**
     * value: "ACCOUNTING_PRACTICE"
     * @const
     */
    "ACCOUNTING_PRACTICE": "ACCOUNTING_PRACTICE",

    /**
     * value: "COMPANY"
     * @const
     */
    "COMPANY": "COMPANY",

    /**
     * value: "CHARITY"
     * @const
     */
    "CHARITY": "CHARITY",

    /**
     * value: "CLUB_OR_SOCIETY"
     * @const
     */
    "CLUB_OR_SOCIETY": "CLUB_OR_SOCIETY",

    /**
     * value: "LOOK_THROUGH_COMPANY"
     * @const
     */
    "LOOK_THROUGH_COMPANY": "LOOK_THROUGH_COMPANY",

    /**
     * value: "NOT_FOR_PROFIT"
     * @const
     */
    "NOT_FOR_PROFIT": "NOT_FOR_PROFIT",

    /**
     * value: "PARTNERSHIP"
     * @const
     */
    "PARTNERSHIP": "PARTNERSHIP",

    /**
     * value: "S_CORPORATION"
     * @const
     */
    "S_CORPORATION": "S_CORPORATION",

    /**
     * value: "SELF_MANAGED_SUPERANNUATION_FUND"
     * @const
     */
    "SELF_MANAGED_SUPERANNUATION_FUND": "SELF_MANAGED_SUPERANNUATION_FUND",

    /**
     * value: "SOLE_TRADER"
     * @const
     */
    "SOLE_TRADER": "SOLE_TRADER",

    /**
     * value: "SUPERANNUATION_FUND"
     * @const
     */
    "SUPERANNUATION_FUND": "SUPERANNUATION_FUND",

    /**
     * value: "TRUST"
     * @const
     */
    "TRUST": "TRUST"
};


/**
 * Allowed values for the <code>SalesTaxBasis</code> property.
 * @enum {String}
 * @readonly
 */
Organisation['SalesTaxBasisEnum'] = {

    /**
     * value: "PAYMENTS"
     * @const
     */
    "PAYMENTS": "PAYMENTS",

    /**
     * value: "INVOICE"
     * @const
     */
    "INVOICE": "INVOICE",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "CASH"
     * @const
     */
    "CASH": "CASH",

    /**
     * value: "ACCRUAL"
     * @const
     */
    "ACCRUAL": "ACCRUAL",

    /**
     * value: "FLATRATECASH"
     * @const
     */
    "FLATRATECASH": "FLATRATECASH",

    /**
     * value: "FLATRATEACCRUAL"
     * @const
     */
    "FLATRATEACCRUAL": "FLATRATEACCRUAL",

    /**
     * value: "ACCRUALS"
     * @const
     */
    "ACCRUALS": "ACCRUALS"
};


/**
 * Allowed values for the <code>SalesTaxPeriod</code> property.
 * @enum {String}
 * @readonly
 */
Organisation['SalesTaxPeriodEnum'] = {

    /**
     * value: "MONTHLY"
     * @const
     */
    "MONTHLY": "MONTHLY",

    /**
     * value: "QUARTERLY1"
     * @const
     */
    "QUARTERLY1": "QUARTERLY1",

    /**
     * value: "QUARTERLY2"
     * @const
     */
    "QUARTERLY2": "QUARTERLY2",

    /**
     * value: "QUARTERLY3"
     * @const
     */
    "QUARTERLY3": "QUARTERLY3",

    /**
     * value: "ANNUALLY"
     * @const
     */
    "ANNUALLY": "ANNUALLY",

    /**
     * value: "ONEMONTHS"
     * @const
     */
    "ONEMONTHS": "ONEMONTHS",

    /**
     * value: "TWOMONTHS"
     * @const
     */
    "TWOMONTHS": "TWOMONTHS",

    /**
     * value: "SIXMONTHS"
     * @const
     */
    "SIXMONTHS": "SIXMONTHS",

    /**
     * value: "1MONTHLY"
     * @const
     */
    "1MONTHLY": "1MONTHLY",

    /**
     * value: "2MONTHLY"
     * @const
     */
    "2MONTHLY": "2MONTHLY",

    /**
     * value: "3MONTHLY"
     * @const
     */
    "3MONTHLY": "3MONTHLY",

    /**
     * value: "6MONTHLY"
     * @const
     */
    "6MONTHLY": "6MONTHLY",

    /**
     * value: "QUARTERLY"
     * @const
     */
    "QUARTERLY": "QUARTERLY",

    /**
     * value: "YEARLY"
     * @const
     */
    "YEARLY": "YEARLY",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE"
};


/**
 * Allowed values for the <code>Version</code> property.
 * @enum {String}
 * @readonly
 */
Organisation['VersionEnum'] = {

    /**
     * value: "AU"
     * @const
     */
    "AU": "AU",

    /**
     * value: "NZ"
     * @const
     */
    "NZ": "NZ",

    /**
     * value: "GLOBAL"
     * @const
     */
    "GLOBAL": "GLOBAL",

    /**
     * value: "UK"
     * @const
     */
    "UK": "UK",

    /**
     * value: "US"
     * @const
     */
    "US": "US",

    /**
     * value: "AUONRAMP"
     * @const
     */
    "AUONRAMP": "AUONRAMP",

    /**
     * value: "NZONRAMP"
     * @const
     */
    "NZONRAMP": "NZONRAMP",

    /**
     * value: "GLOBALONRAMP"
     * @const
     */
    "GLOBALONRAMP": "GLOBALONRAMP",

    /**
     * value: "UKONRAMP"
     * @const
     */
    "UKONRAMP": "UKONRAMP",

    /**
     * value: "USONRAMP"
     * @const
     */
    "USONRAMP": "USONRAMP"
};



export default Organisation;

