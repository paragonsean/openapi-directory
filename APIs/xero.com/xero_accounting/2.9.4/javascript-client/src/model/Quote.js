/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Contact from './Contact';
import CurrencyCode from './CurrencyCode';
import LineItem from './LineItem';
import QuoteLineAmountTypes from './QuoteLineAmountTypes';
import QuoteStatusCodes from './QuoteStatusCodes';
import ValidationError from './ValidationError';

/**
 * The Quote model module.
 * @module model/Quote
 * @version 2.9.4
 */
class Quote {
    /**
     * Constructs a new <code>Quote</code>.
     * @alias module:model/Quote
     */
    constructor() { 
        
        Quote.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Quote</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Quote} obj Optional instance to populate.
     * @return {module:model/Quote} The populated <code>Quote</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Quote();

            if (data.hasOwnProperty('BrandingThemeID')) {
                obj['BrandingThemeID'] = ApiClient.convertToType(data['BrandingThemeID'], 'String');
            }
            if (data.hasOwnProperty('Contact')) {
                obj['Contact'] = Contact.constructFromObject(data['Contact']);
            }
            if (data.hasOwnProperty('CurrencyCode')) {
                obj['CurrencyCode'] = CurrencyCode.constructFromObject(data['CurrencyCode']);
            }
            if (data.hasOwnProperty('CurrencyRate')) {
                obj['CurrencyRate'] = ApiClient.convertToType(data['CurrencyRate'], 'Number');
            }
            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'String');
            }
            if (data.hasOwnProperty('DateString')) {
                obj['DateString'] = ApiClient.convertToType(data['DateString'], 'String');
            }
            if (data.hasOwnProperty('ExpiryDate')) {
                obj['ExpiryDate'] = ApiClient.convertToType(data['ExpiryDate'], 'String');
            }
            if (data.hasOwnProperty('ExpiryDateString')) {
                obj['ExpiryDateString'] = ApiClient.convertToType(data['ExpiryDateString'], 'String');
            }
            if (data.hasOwnProperty('LineAmountTypes')) {
                obj['LineAmountTypes'] = QuoteLineAmountTypes.constructFromObject(data['LineAmountTypes']);
            }
            if (data.hasOwnProperty('LineItems')) {
                obj['LineItems'] = ApiClient.convertToType(data['LineItems'], [LineItem]);
            }
            if (data.hasOwnProperty('QuoteID')) {
                obj['QuoteID'] = ApiClient.convertToType(data['QuoteID'], 'String');
            }
            if (data.hasOwnProperty('QuoteNumber')) {
                obj['QuoteNumber'] = ApiClient.convertToType(data['QuoteNumber'], 'String');
            }
            if (data.hasOwnProperty('Reference')) {
                obj['Reference'] = ApiClient.convertToType(data['Reference'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = QuoteStatusCodes.constructFromObject(data['Status']);
            }
            if (data.hasOwnProperty('StatusAttributeString')) {
                obj['StatusAttributeString'] = ApiClient.convertToType(data['StatusAttributeString'], 'String');
            }
            if (data.hasOwnProperty('SubTotal')) {
                obj['SubTotal'] = ApiClient.convertToType(data['SubTotal'], 'Number');
            }
            if (data.hasOwnProperty('Summary')) {
                obj['Summary'] = ApiClient.convertToType(data['Summary'], 'String');
            }
            if (data.hasOwnProperty('Terms')) {
                obj['Terms'] = ApiClient.convertToType(data['Terms'], 'String');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
            if (data.hasOwnProperty('Total')) {
                obj['Total'] = ApiClient.convertToType(data['Total'], 'Number');
            }
            if (data.hasOwnProperty('TotalDiscount')) {
                obj['TotalDiscount'] = ApiClient.convertToType(data['TotalDiscount'], 'Number');
            }
            if (data.hasOwnProperty('TotalTax')) {
                obj['TotalTax'] = ApiClient.convertToType(data['TotalTax'], 'Number');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Quote</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Quote</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BrandingThemeID'] && !(typeof data['BrandingThemeID'] === 'string' || data['BrandingThemeID'] instanceof String)) {
            throw new Error("Expected the field `BrandingThemeID` to be a primitive type in the JSON string but got " + data['BrandingThemeID']);
        }
        // ensure the json data is a string
        if (data['Contact'] && !(typeof data['Contact'] === 'string' || data['Contact'] instanceof String)) {
            throw new Error("Expected the field `Contact` to be a primitive type in the JSON string but got " + data['Contact']);
        }
        // validate the optional field `Contact`
        if (data['Contact']) { // data not null
          Contact.validateJSON(data['Contact']);
        }
        // ensure the json data is a string
        if (data['CurrencyCode'] && !(typeof data['CurrencyCode'] === 'string' || data['CurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got " + data['CurrencyCode']);
        }
        // ensure the json data is a string
        if (data['Date'] && !(typeof data['Date'] === 'string' || data['Date'] instanceof String)) {
            throw new Error("Expected the field `Date` to be a primitive type in the JSON string but got " + data['Date']);
        }
        // ensure the json data is a string
        if (data['DateString'] && !(typeof data['DateString'] === 'string' || data['DateString'] instanceof String)) {
            throw new Error("Expected the field `DateString` to be a primitive type in the JSON string but got " + data['DateString']);
        }
        // ensure the json data is a string
        if (data['ExpiryDate'] && !(typeof data['ExpiryDate'] === 'string' || data['ExpiryDate'] instanceof String)) {
            throw new Error("Expected the field `ExpiryDate` to be a primitive type in the JSON string but got " + data['ExpiryDate']);
        }
        // ensure the json data is a string
        if (data['ExpiryDateString'] && !(typeof data['ExpiryDateString'] === 'string' || data['ExpiryDateString'] instanceof String)) {
            throw new Error("Expected the field `ExpiryDateString` to be a primitive type in the JSON string but got " + data['ExpiryDateString']);
        }
        // ensure the json data is a string
        if (data['LineAmountTypes'] && !(typeof data['LineAmountTypes'] === 'string' || data['LineAmountTypes'] instanceof String)) {
            throw new Error("Expected the field `LineAmountTypes` to be a primitive type in the JSON string but got " + data['LineAmountTypes']);
        }
        if (data['LineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LineItems'])) {
                throw new Error("Expected the field `LineItems` to be an array in the JSON data but got " + data['LineItems']);
            }
            // validate the optional field `LineItems` (array)
            for (const item of data['LineItems']) {
                LineItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['QuoteID'] && !(typeof data['QuoteID'] === 'string' || data['QuoteID'] instanceof String)) {
            throw new Error("Expected the field `QuoteID` to be a primitive type in the JSON string but got " + data['QuoteID']);
        }
        // ensure the json data is a string
        if (data['QuoteNumber'] && !(typeof data['QuoteNumber'] === 'string' || data['QuoteNumber'] instanceof String)) {
            throw new Error("Expected the field `QuoteNumber` to be a primitive type in the JSON string but got " + data['QuoteNumber']);
        }
        // ensure the json data is a string
        if (data['Reference'] && !(typeof data['Reference'] === 'string' || data['Reference'] instanceof String)) {
            throw new Error("Expected the field `Reference` to be a primitive type in the JSON string but got " + data['Reference']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['StatusAttributeString'] && !(typeof data['StatusAttributeString'] === 'string' || data['StatusAttributeString'] instanceof String)) {
            throw new Error("Expected the field `StatusAttributeString` to be a primitive type in the JSON string but got " + data['StatusAttributeString']);
        }
        // ensure the json data is a string
        if (data['Summary'] && !(typeof data['Summary'] === 'string' || data['Summary'] instanceof String)) {
            throw new Error("Expected the field `Summary` to be a primitive type in the JSON string but got " + data['Summary']);
        }
        // ensure the json data is a string
        if (data['Terms'] && !(typeof data['Terms'] === 'string' || data['Terms'] instanceof String)) {
            throw new Error("Expected the field `Terms` to be a primitive type in the JSON string but got " + data['Terms']);
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * See BrandingThemes
 * @member {String} BrandingThemeID
 */
Quote.prototype['BrandingThemeID'] = undefined;

/**
 * @member {module:model/Contact} Contact
 */
Quote.prototype['Contact'] = undefined;

/**
 * @member {module:model/CurrencyCode} CurrencyCode
 */
Quote.prototype['CurrencyCode'] = undefined;

/**
 * The currency rate for a multicurrency quote
 * @member {Number} CurrencyRate
 */
Quote.prototype['CurrencyRate'] = undefined;

/**
 * Date quote was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation
 * @member {String} Date
 */
Quote.prototype['Date'] = undefined;

/**
 * Date the quote was issued (YYYY-MM-DD)
 * @member {String} DateString
 */
Quote.prototype['DateString'] = undefined;

/**
 * Date the quote expires – YYYY-MM-DD.
 * @member {String} ExpiryDate
 */
Quote.prototype['ExpiryDate'] = undefined;

/**
 * Date the quote expires – YYYY-MM-DD.
 * @member {String} ExpiryDateString
 */
Quote.prototype['ExpiryDateString'] = undefined;

/**
 * @member {module:model/QuoteLineAmountTypes} LineAmountTypes
 */
Quote.prototype['LineAmountTypes'] = undefined;

/**
 * See LineItems
 * @member {Array.<module:model/LineItem>} LineItems
 */
Quote.prototype['LineItems'] = undefined;

/**
 * QuoteID GUID is automatically generated and is returned after create or GET.
 * @member {String} QuoteID
 */
Quote.prototype['QuoteID'] = undefined;

/**
 * Unique alpha numeric code identifying a quote (Max Length = 255)
 * @member {String} QuoteNumber
 */
Quote.prototype['QuoteNumber'] = undefined;

/**
 * Additional reference number
 * @member {String} Reference
 */
Quote.prototype['Reference'] = undefined;

/**
 * @member {module:model/QuoteStatusCodes} Status
 */
Quote.prototype['Status'] = undefined;

/**
 * A string to indicate if a invoice status
 * @member {String} StatusAttributeString
 */
Quote.prototype['StatusAttributeString'] = undefined;

/**
 * Total of quote excluding taxes.
 * @member {Number} SubTotal
 */
Quote.prototype['SubTotal'] = undefined;

/**
 * Summary text for the quote
 * @member {String} Summary
 */
Quote.prototype['Summary'] = undefined;

/**
 * Terms of the quote
 * @member {String} Terms
 */
Quote.prototype['Terms'] = undefined;

/**
 * Title text for the quote
 * @member {String} Title
 */
Quote.prototype['Title'] = undefined;

/**
 * Total of Quote tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts
 * @member {Number} Total
 */
Quote.prototype['Total'] = undefined;

/**
 * Total of discounts applied on the quote line items
 * @member {Number} TotalDiscount
 */
Quote.prototype['TotalDiscount'] = undefined;

/**
 * Total tax on quote
 * @member {Number} TotalTax
 */
Quote.prototype['TotalTax'] = undefined;

/**
 * Last modified date UTC format
 * @member {String} UpdatedDateUTC
 */
Quote.prototype['UpdatedDateUTC'] = undefined;

/**
 * Displays array of validation error messages from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
Quote.prototype['ValidationErrors'] = undefined;






export default Quote;

