/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Address model module.
 * @module model/Address
 * @version 2.9.4
 */
class Address {
    /**
     * Constructs a new <code>Address</code>.
     * @alias module:model/Address
     */
    constructor() { 
        
        Address.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Address</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Address} obj Optional instance to populate.
     * @return {module:model/Address} The populated <code>Address</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Address();

            if (data.hasOwnProperty('AddressLine1')) {
                obj['AddressLine1'] = ApiClient.convertToType(data['AddressLine1'], 'String');
            }
            if (data.hasOwnProperty('AddressLine2')) {
                obj['AddressLine2'] = ApiClient.convertToType(data['AddressLine2'], 'String');
            }
            if (data.hasOwnProperty('AddressLine3')) {
                obj['AddressLine3'] = ApiClient.convertToType(data['AddressLine3'], 'String');
            }
            if (data.hasOwnProperty('AddressLine4')) {
                obj['AddressLine4'] = ApiClient.convertToType(data['AddressLine4'], 'String');
            }
            if (data.hasOwnProperty('AddressType')) {
                obj['AddressType'] = ApiClient.convertToType(data['AddressType'], 'String');
            }
            if (data.hasOwnProperty('AttentionTo')) {
                obj['AttentionTo'] = ApiClient.convertToType(data['AttentionTo'], 'String');
            }
            if (data.hasOwnProperty('City')) {
                obj['City'] = ApiClient.convertToType(data['City'], 'String');
            }
            if (data.hasOwnProperty('Country')) {
                obj['Country'] = ApiClient.convertToType(data['Country'], 'String');
            }
            if (data.hasOwnProperty('PostalCode')) {
                obj['PostalCode'] = ApiClient.convertToType(data['PostalCode'], 'String');
            }
            if (data.hasOwnProperty('Region')) {
                obj['Region'] = ApiClient.convertToType(data['Region'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Address</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Address</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AddressLine1'] && !(typeof data['AddressLine1'] === 'string' || data['AddressLine1'] instanceof String)) {
            throw new Error("Expected the field `AddressLine1` to be a primitive type in the JSON string but got " + data['AddressLine1']);
        }
        // ensure the json data is a string
        if (data['AddressLine2'] && !(typeof data['AddressLine2'] === 'string' || data['AddressLine2'] instanceof String)) {
            throw new Error("Expected the field `AddressLine2` to be a primitive type in the JSON string but got " + data['AddressLine2']);
        }
        // ensure the json data is a string
        if (data['AddressLine3'] && !(typeof data['AddressLine3'] === 'string' || data['AddressLine3'] instanceof String)) {
            throw new Error("Expected the field `AddressLine3` to be a primitive type in the JSON string but got " + data['AddressLine3']);
        }
        // ensure the json data is a string
        if (data['AddressLine4'] && !(typeof data['AddressLine4'] === 'string' || data['AddressLine4'] instanceof String)) {
            throw new Error("Expected the field `AddressLine4` to be a primitive type in the JSON string but got " + data['AddressLine4']);
        }
        // ensure the json data is a string
        if (data['AddressType'] && !(typeof data['AddressType'] === 'string' || data['AddressType'] instanceof String)) {
            throw new Error("Expected the field `AddressType` to be a primitive type in the JSON string but got " + data['AddressType']);
        }
        // ensure the json data is a string
        if (data['AttentionTo'] && !(typeof data['AttentionTo'] === 'string' || data['AttentionTo'] instanceof String)) {
            throw new Error("Expected the field `AttentionTo` to be a primitive type in the JSON string but got " + data['AttentionTo']);
        }
        // ensure the json data is a string
        if (data['City'] && !(typeof data['City'] === 'string' || data['City'] instanceof String)) {
            throw new Error("Expected the field `City` to be a primitive type in the JSON string but got " + data['City']);
        }
        // ensure the json data is a string
        if (data['Country'] && !(typeof data['Country'] === 'string' || data['Country'] instanceof String)) {
            throw new Error("Expected the field `Country` to be a primitive type in the JSON string but got " + data['Country']);
        }
        // ensure the json data is a string
        if (data['PostalCode'] && !(typeof data['PostalCode'] === 'string' || data['PostalCode'] instanceof String)) {
            throw new Error("Expected the field `PostalCode` to be a primitive type in the JSON string but got " + data['PostalCode']);
        }
        // ensure the json data is a string
        if (data['Region'] && !(typeof data['Region'] === 'string' || data['Region'] instanceof String)) {
            throw new Error("Expected the field `Region` to be a primitive type in the JSON string but got " + data['Region']);
        }

        return true;
    }


}



/**
 * max length = 500
 * @member {String} AddressLine1
 */
Address.prototype['AddressLine1'] = undefined;

/**
 * max length = 500
 * @member {String} AddressLine2
 */
Address.prototype['AddressLine2'] = undefined;

/**
 * max length = 500
 * @member {String} AddressLine3
 */
Address.prototype['AddressLine3'] = undefined;

/**
 * max length = 500
 * @member {String} AddressLine4
 */
Address.prototype['AddressLine4'] = undefined;

/**
 * define the type of address
 * @member {module:model/Address.AddressTypeEnum} AddressType
 */
Address.prototype['AddressType'] = undefined;

/**
 * max length = 255
 * @member {String} AttentionTo
 */
Address.prototype['AttentionTo'] = undefined;

/**
 * max length = 255
 * @member {String} City
 */
Address.prototype['City'] = undefined;

/**
 * max length = 50, [A-Z], [a-z] only
 * @member {String} Country
 */
Address.prototype['Country'] = undefined;

/**
 * max length = 50
 * @member {String} PostalCode
 */
Address.prototype['PostalCode'] = undefined;

/**
 * max length = 255
 * @member {String} Region
 */
Address.prototype['Region'] = undefined;





/**
 * Allowed values for the <code>AddressType</code> property.
 * @enum {String}
 * @readonly
 */
Address['AddressTypeEnum'] = {

    /**
     * value: "POBOX"
     * @const
     */
    "POBOX": "POBOX",

    /**
     * value: "STREET"
     * @const
     */
    "STREET": "STREET"
};



export default Address;

