/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountType from './AccountType';
import TrackingCategory from './TrackingCategory';

/**
 * The JournalLine model module.
 * @module model/JournalLine
 * @version 2.9.4
 */
class JournalLine {
    /**
     * Constructs a new <code>JournalLine</code>.
     * @alias module:model/JournalLine
     */
    constructor() { 
        
        JournalLine.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JournalLine</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JournalLine} obj Optional instance to populate.
     * @return {module:model/JournalLine} The populated <code>JournalLine</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JournalLine();

            if (data.hasOwnProperty('AccountCode')) {
                obj['AccountCode'] = ApiClient.convertToType(data['AccountCode'], 'String');
            }
            if (data.hasOwnProperty('AccountID')) {
                obj['AccountID'] = ApiClient.convertToType(data['AccountID'], 'String');
            }
            if (data.hasOwnProperty('AccountName')) {
                obj['AccountName'] = ApiClient.convertToType(data['AccountName'], 'String');
            }
            if (data.hasOwnProperty('AccountType')) {
                obj['AccountType'] = AccountType.constructFromObject(data['AccountType']);
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('GrossAmount')) {
                obj['GrossAmount'] = ApiClient.convertToType(data['GrossAmount'], 'Number');
            }
            if (data.hasOwnProperty('JournalLineID')) {
                obj['JournalLineID'] = ApiClient.convertToType(data['JournalLineID'], 'String');
            }
            if (data.hasOwnProperty('NetAmount')) {
                obj['NetAmount'] = ApiClient.convertToType(data['NetAmount'], 'Number');
            }
            if (data.hasOwnProperty('TaxAmount')) {
                obj['TaxAmount'] = ApiClient.convertToType(data['TaxAmount'], 'Number');
            }
            if (data.hasOwnProperty('TaxName')) {
                obj['TaxName'] = ApiClient.convertToType(data['TaxName'], 'String');
            }
            if (data.hasOwnProperty('TaxType')) {
                obj['TaxType'] = ApiClient.convertToType(data['TaxType'], 'String');
            }
            if (data.hasOwnProperty('TrackingCategories')) {
                obj['TrackingCategories'] = ApiClient.convertToType(data['TrackingCategories'], [TrackingCategory]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JournalLine</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JournalLine</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AccountCode'] && !(typeof data['AccountCode'] === 'string' || data['AccountCode'] instanceof String)) {
            throw new Error("Expected the field `AccountCode` to be a primitive type in the JSON string but got " + data['AccountCode']);
        }
        // ensure the json data is a string
        if (data['AccountID'] && !(typeof data['AccountID'] === 'string' || data['AccountID'] instanceof String)) {
            throw new Error("Expected the field `AccountID` to be a primitive type in the JSON string but got " + data['AccountID']);
        }
        // ensure the json data is a string
        if (data['AccountName'] && !(typeof data['AccountName'] === 'string' || data['AccountName'] instanceof String)) {
            throw new Error("Expected the field `AccountName` to be a primitive type in the JSON string but got " + data['AccountName']);
        }
        // ensure the json data is a string
        if (data['AccountType'] && !(typeof data['AccountType'] === 'string' || data['AccountType'] instanceof String)) {
            throw new Error("Expected the field `AccountType` to be a primitive type in the JSON string but got " + data['AccountType']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['JournalLineID'] && !(typeof data['JournalLineID'] === 'string' || data['JournalLineID'] instanceof String)) {
            throw new Error("Expected the field `JournalLineID` to be a primitive type in the JSON string but got " + data['JournalLineID']);
        }
        // ensure the json data is a string
        if (data['TaxName'] && !(typeof data['TaxName'] === 'string' || data['TaxName'] instanceof String)) {
            throw new Error("Expected the field `TaxName` to be a primitive type in the JSON string but got " + data['TaxName']);
        }
        // ensure the json data is a string
        if (data['TaxType'] && !(typeof data['TaxType'] === 'string' || data['TaxType'] instanceof String)) {
            throw new Error("Expected the field `TaxType` to be a primitive type in the JSON string but got " + data['TaxType']);
        }
        if (data['TrackingCategories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['TrackingCategories'])) {
                throw new Error("Expected the field `TrackingCategories` to be an array in the JSON data but got " + data['TrackingCategories']);
            }
            // validate the optional field `TrackingCategories` (array)
            for (const item of data['TrackingCategories']) {
                TrackingCategory.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * See Accounts
 * @member {String} AccountCode
 */
JournalLine.prototype['AccountCode'] = undefined;

/**
 * See Accounts
 * @member {String} AccountID
 */
JournalLine.prototype['AccountID'] = undefined;

/**
 * See AccountCodes
 * @member {String} AccountName
 */
JournalLine.prototype['AccountName'] = undefined;

/**
 * @member {module:model/AccountType} AccountType
 */
JournalLine.prototype['AccountType'] = undefined;

/**
 * The description from the source transaction line item. Only returned if populated.
 * @member {String} Description
 */
JournalLine.prototype['Description'] = undefined;

/**
 * Gross amount of journal line (NetAmount + TaxAmount).
 * @member {Number} GrossAmount
 */
JournalLine.prototype['GrossAmount'] = undefined;

/**
 * Xero identifier for Journal
 * @member {String} JournalLineID
 */
JournalLine.prototype['JournalLineID'] = undefined;

/**
 * Net amount of journal line. This will be a positive value for a debit and negative for a credit
 * @member {Number} NetAmount
 */
JournalLine.prototype['NetAmount'] = undefined;

/**
 * Total tax on a journal line
 * @member {Number} TaxAmount
 */
JournalLine.prototype['TaxAmount'] = undefined;

/**
 * see TaxRates
 * @member {String} TaxName
 */
JournalLine.prototype['TaxName'] = undefined;

/**
 * The tax type from TaxRates
 * @member {String} TaxType
 */
JournalLine.prototype['TaxType'] = undefined;

/**
 * Optional Tracking Category â€“ see Tracking. Any JournalLine can have a maximum of 2 <TrackingCategory> elements.
 * @member {Array.<module:model/TrackingCategory>} TrackingCategories
 */
JournalLine.prototype['TrackingCategories'] = undefined;






export default JournalLine;

