/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';
import Contact from './Contact';
import CurrencyCode from './CurrencyCode';
import LineAmountTypes from './LineAmountTypes';
import LineItem from './LineItem';
import ValidationError from './ValidationError';

/**
 * The BankTransaction model module.
 * @module model/BankTransaction
 * @version 2.9.4
 */
class BankTransaction {
    /**
     * Constructs a new <code>BankTransaction</code>.
     * @alias module:model/BankTransaction
     * @param bankAccount {module:model/Account} 
     * @param lineItems {Array.<module:model/LineItem>} See LineItems
     * @param type {module:model/BankTransaction.TypeEnum} See Bank Transaction Types
     */
    constructor(bankAccount, lineItems, type) { 
        
        BankTransaction.initialize(this, bankAccount, lineItems, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bankAccount, lineItems, type) { 
        obj['BankAccount'] = bankAccount;
        obj['HasAttachments'] = false;
        obj['LineItems'] = lineItems;
        obj['Type'] = type;
    }

    /**
     * Constructs a <code>BankTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BankTransaction} obj Optional instance to populate.
     * @return {module:model/BankTransaction} The populated <code>BankTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BankTransaction();

            if (data.hasOwnProperty('BankAccount')) {
                obj['BankAccount'] = Account.constructFromObject(data['BankAccount']);
            }
            if (data.hasOwnProperty('BankTransactionID')) {
                obj['BankTransactionID'] = ApiClient.convertToType(data['BankTransactionID'], 'String');
            }
            if (data.hasOwnProperty('Contact')) {
                obj['Contact'] = Contact.constructFromObject(data['Contact']);
            }
            if (data.hasOwnProperty('CurrencyCode')) {
                obj['CurrencyCode'] = CurrencyCode.constructFromObject(data['CurrencyCode']);
            }
            if (data.hasOwnProperty('CurrencyRate')) {
                obj['CurrencyRate'] = ApiClient.convertToType(data['CurrencyRate'], 'Number');
            }
            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'String');
            }
            if (data.hasOwnProperty('HasAttachments')) {
                obj['HasAttachments'] = ApiClient.convertToType(data['HasAttachments'], 'Boolean');
            }
            if (data.hasOwnProperty('IsReconciled')) {
                obj['IsReconciled'] = ApiClient.convertToType(data['IsReconciled'], 'Boolean');
            }
            if (data.hasOwnProperty('LineAmountTypes')) {
                obj['LineAmountTypes'] = LineAmountTypes.constructFromObject(data['LineAmountTypes']);
            }
            if (data.hasOwnProperty('LineItems')) {
                obj['LineItems'] = ApiClient.convertToType(data['LineItems'], [LineItem]);
            }
            if (data.hasOwnProperty('OverpaymentID')) {
                obj['OverpaymentID'] = ApiClient.convertToType(data['OverpaymentID'], 'String');
            }
            if (data.hasOwnProperty('PrepaymentID')) {
                obj['PrepaymentID'] = ApiClient.convertToType(data['PrepaymentID'], 'String');
            }
            if (data.hasOwnProperty('Reference')) {
                obj['Reference'] = ApiClient.convertToType(data['Reference'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('StatusAttributeString')) {
                obj['StatusAttributeString'] = ApiClient.convertToType(data['StatusAttributeString'], 'String');
            }
            if (data.hasOwnProperty('SubTotal')) {
                obj['SubTotal'] = ApiClient.convertToType(data['SubTotal'], 'Number');
            }
            if (data.hasOwnProperty('Total')) {
                obj['Total'] = ApiClient.convertToType(data['Total'], 'Number');
            }
            if (data.hasOwnProperty('TotalTax')) {
                obj['TotalTax'] = ApiClient.convertToType(data['TotalTax'], 'Number');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('Url')) {
                obj['Url'] = ApiClient.convertToType(data['Url'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BankTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BankTransaction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BankTransaction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `BankAccount`
        if (data['BankAccount']) { // data not null
          Account.validateJSON(data['BankAccount']);
        }
        // ensure the json data is a string
        if (data['BankTransactionID'] && !(typeof data['BankTransactionID'] === 'string' || data['BankTransactionID'] instanceof String)) {
            throw new Error("Expected the field `BankTransactionID` to be a primitive type in the JSON string but got " + data['BankTransactionID']);
        }
        // validate the optional field `Contact`
        if (data['Contact']) { // data not null
          Contact.validateJSON(data['Contact']);
        }
        // ensure the json data is a string
        if (data['CurrencyCode'] && !(typeof data['CurrencyCode'] === 'string' || data['CurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got " + data['CurrencyCode']);
        }
        // ensure the json data is a string
        if (data['Date'] && !(typeof data['Date'] === 'string' || data['Date'] instanceof String)) {
            throw new Error("Expected the field `Date` to be a primitive type in the JSON string but got " + data['Date']);
        }
        // ensure the json data is a string
        if (data['LineAmountTypes'] && !(typeof data['LineAmountTypes'] === 'string' || data['LineAmountTypes'] instanceof String)) {
            throw new Error("Expected the field `LineAmountTypes` to be a primitive type in the JSON string but got " + data['LineAmountTypes']);
        }
        if (data['LineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LineItems'])) {
                throw new Error("Expected the field `LineItems` to be an array in the JSON data but got " + data['LineItems']);
            }
            // validate the optional field `LineItems` (array)
            for (const item of data['LineItems']) {
                LineItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['OverpaymentID'] && !(typeof data['OverpaymentID'] === 'string' || data['OverpaymentID'] instanceof String)) {
            throw new Error("Expected the field `OverpaymentID` to be a primitive type in the JSON string but got " + data['OverpaymentID']);
        }
        // ensure the json data is a string
        if (data['PrepaymentID'] && !(typeof data['PrepaymentID'] === 'string' || data['PrepaymentID'] instanceof String)) {
            throw new Error("Expected the field `PrepaymentID` to be a primitive type in the JSON string but got " + data['PrepaymentID']);
        }
        // ensure the json data is a string
        if (data['Reference'] && !(typeof data['Reference'] === 'string' || data['Reference'] instanceof String)) {
            throw new Error("Expected the field `Reference` to be a primitive type in the JSON string but got " + data['Reference']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['StatusAttributeString'] && !(typeof data['StatusAttributeString'] === 'string' || data['StatusAttributeString'] instanceof String)) {
            throw new Error("Expected the field `StatusAttributeString` to be a primitive type in the JSON string but got " + data['StatusAttributeString']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }
        // ensure the json data is a string
        if (data['Url'] && !(typeof data['Url'] === 'string' || data['Url'] instanceof String)) {
            throw new Error("Expected the field `Url` to be a primitive type in the JSON string but got " + data['Url']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}

BankTransaction.RequiredProperties = ["BankAccount", "LineItems", "Type"];

/**
 * @member {module:model/Account} BankAccount
 */
BankTransaction.prototype['BankAccount'] = undefined;

/**
 * Xero generated unique identifier for bank transaction
 * @member {String} BankTransactionID
 */
BankTransaction.prototype['BankTransactionID'] = undefined;

/**
 * @member {module:model/Contact} Contact
 */
BankTransaction.prototype['Contact'] = undefined;

/**
 * @member {module:model/CurrencyCode} CurrencyCode
 */
BankTransaction.prototype['CurrencyCode'] = undefined;

/**
 * Exchange rate to base currency when money is spent or received. e.g.0.7500 Only used for bank transactions in non base currency. If this isn’t specified for non base currency accounts then either the user-defined rate (preference) or the XE.com day rate will be used. Setting currency is only supported on overpayments.
 * @member {Number} CurrencyRate
 */
BankTransaction.prototype['CurrencyRate'] = undefined;

/**
 * Date of transaction – YYYY-MM-DD
 * @member {String} Date
 */
BankTransaction.prototype['Date'] = undefined;

/**
 * Boolean to indicate if a bank transaction has an attachment
 * @member {Boolean} HasAttachments
 * @default false
 */
BankTransaction.prototype['HasAttachments'] = false;

/**
 * Boolean to show if transaction is reconciled
 * @member {Boolean} IsReconciled
 */
BankTransaction.prototype['IsReconciled'] = undefined;

/**
 * @member {module:model/LineAmountTypes} LineAmountTypes
 */
BankTransaction.prototype['LineAmountTypes'] = undefined;

/**
 * See LineItems
 * @member {Array.<module:model/LineItem>} LineItems
 */
BankTransaction.prototype['LineItems'] = undefined;

/**
 * Xero generated unique identifier for an Overpayment. This will be returned on BankTransactions with a Type of SPEND-OVERPAYMENT or RECEIVE-OVERPAYMENT
 * @member {String} OverpaymentID
 */
BankTransaction.prototype['OverpaymentID'] = undefined;

/**
 * Xero generated unique identifier for a Prepayment. This will be returned on BankTransactions with a Type of SPEND-PREPAYMENT or RECEIVE-PREPAYMENT
 * @member {String} PrepaymentID
 */
BankTransaction.prototype['PrepaymentID'] = undefined;

/**
 * Reference for the transaction. Only supported for SPEND and RECEIVE transactions.
 * @member {String} Reference
 */
BankTransaction.prototype['Reference'] = undefined;

/**
 * See Bank Transaction Status Codes
 * @member {module:model/BankTransaction.StatusEnum} Status
 */
BankTransaction.prototype['Status'] = undefined;

/**
 * A string to indicate if a invoice status
 * @member {String} StatusAttributeString
 */
BankTransaction.prototype['StatusAttributeString'] = undefined;

/**
 * Total of bank transaction excluding taxes
 * @member {Number} SubTotal
 */
BankTransaction.prototype['SubTotal'] = undefined;

/**
 * Total of bank transaction tax inclusive
 * @member {Number} Total
 */
BankTransaction.prototype['Total'] = undefined;

/**
 * Total tax on bank transaction
 * @member {Number} TotalTax
 */
BankTransaction.prototype['TotalTax'] = undefined;

/**
 * See Bank Transaction Types
 * @member {module:model/BankTransaction.TypeEnum} Type
 */
BankTransaction.prototype['Type'] = undefined;

/**
 * Last modified date UTC format
 * @member {String} UpdatedDateUTC
 */
BankTransaction.prototype['UpdatedDateUTC'] = undefined;

/**
 * URL link to a source document – shown as “Go to App Name”
 * @member {String} Url
 */
BankTransaction.prototype['Url'] = undefined;

/**
 * Displays array of validation error messages from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
BankTransaction.prototype['ValidationErrors'] = undefined;





/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
BankTransaction['StatusEnum'] = {

    /**
     * value: "AUTHORISED"
     * @const
     */
    "AUTHORISED": "AUTHORISED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED",

    /**
     * value: "VOIDED"
     * @const
     */
    "VOIDED": "VOIDED"
};


/**
 * Allowed values for the <code>Type</code> property.
 * @enum {String}
 * @readonly
 */
BankTransaction['TypeEnum'] = {

    /**
     * value: "RECEIVE"
     * @const
     */
    "RECEIVE": "RECEIVE",

    /**
     * value: "RECEIVE-OVERPAYMENT"
     * @const
     */
    "RECEIVE-OVERPAYMENT": "RECEIVE-OVERPAYMENT",

    /**
     * value: "RECEIVE-PREPAYMENT"
     * @const
     */
    "RECEIVE-PREPAYMENT": "RECEIVE-PREPAYMENT",

    /**
     * value: "SPEND"
     * @const
     */
    "SPEND": "SPEND",

    /**
     * value: "SPEND-OVERPAYMENT"
     * @const
     */
    "SPEND-OVERPAYMENT": "SPEND-OVERPAYMENT",

    /**
     * value: "SPEND-PREPAYMENT"
     * @const
     */
    "SPEND-PREPAYMENT": "SPEND-PREPAYMENT",

    /**
     * value: "RECEIVE-TRANSFER"
     * @const
     */
    "RECEIVE-TRANSFER": "RECEIVE-TRANSFER",

    /**
     * value: "SPEND-TRANSFER"
     * @const
     */
    "SPEND-TRANSFER": "SPEND-TRANSFER"
};



export default BankTransaction;

