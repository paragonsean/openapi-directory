/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attachment from './Attachment';
import Contact from './Contact';
import CurrencyCode from './CurrencyCode';
import LineAmountTypes from './LineAmountTypes';
import LineItem from './LineItem';
import Schedule from './Schedule';

/**
 * The RepeatingInvoice model module.
 * @module model/RepeatingInvoice
 * @version 2.9.4
 */
class RepeatingInvoice {
    /**
     * Constructs a new <code>RepeatingInvoice</code>.
     * @alias module:model/RepeatingInvoice
     */
    constructor() { 
        
        RepeatingInvoice.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['HasAttachments'] = false;
    }

    /**
     * Constructs a <code>RepeatingInvoice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepeatingInvoice} obj Optional instance to populate.
     * @return {module:model/RepeatingInvoice} The populated <code>RepeatingInvoice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepeatingInvoice();

            if (data.hasOwnProperty('Attachments')) {
                obj['Attachments'] = ApiClient.convertToType(data['Attachments'], [Attachment]);
            }
            if (data.hasOwnProperty('BrandingThemeID')) {
                obj['BrandingThemeID'] = ApiClient.convertToType(data['BrandingThemeID'], 'String');
            }
            if (data.hasOwnProperty('Contact')) {
                obj['Contact'] = Contact.constructFromObject(data['Contact']);
            }
            if (data.hasOwnProperty('CurrencyCode')) {
                obj['CurrencyCode'] = CurrencyCode.constructFromObject(data['CurrencyCode']);
            }
            if (data.hasOwnProperty('HasAttachments')) {
                obj['HasAttachments'] = ApiClient.convertToType(data['HasAttachments'], 'Boolean');
            }
            if (data.hasOwnProperty('ID')) {
                obj['ID'] = ApiClient.convertToType(data['ID'], 'String');
            }
            if (data.hasOwnProperty('LineAmountTypes')) {
                obj['LineAmountTypes'] = LineAmountTypes.constructFromObject(data['LineAmountTypes']);
            }
            if (data.hasOwnProperty('LineItems')) {
                obj['LineItems'] = ApiClient.convertToType(data['LineItems'], [LineItem]);
            }
            if (data.hasOwnProperty('Reference')) {
                obj['Reference'] = ApiClient.convertToType(data['Reference'], 'String');
            }
            if (data.hasOwnProperty('RepeatingInvoiceID')) {
                obj['RepeatingInvoiceID'] = ApiClient.convertToType(data['RepeatingInvoiceID'], 'String');
            }
            if (data.hasOwnProperty('Schedule')) {
                obj['Schedule'] = Schedule.constructFromObject(data['Schedule']);
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('SubTotal')) {
                obj['SubTotal'] = ApiClient.convertToType(data['SubTotal'], 'Number');
            }
            if (data.hasOwnProperty('Total')) {
                obj['Total'] = ApiClient.convertToType(data['Total'], 'Number');
            }
            if (data.hasOwnProperty('TotalTax')) {
                obj['TotalTax'] = ApiClient.convertToType(data['TotalTax'], 'Number');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepeatingInvoice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepeatingInvoice</code>.
     */
    static validateJSON(data) {
        if (data['Attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Attachments'])) {
                throw new Error("Expected the field `Attachments` to be an array in the JSON data but got " + data['Attachments']);
            }
            // validate the optional field `Attachments` (array)
            for (const item of data['Attachments']) {
                Attachment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['BrandingThemeID'] && !(typeof data['BrandingThemeID'] === 'string' || data['BrandingThemeID'] instanceof String)) {
            throw new Error("Expected the field `BrandingThemeID` to be a primitive type in the JSON string but got " + data['BrandingThemeID']);
        }
        // validate the optional field `Contact`
        if (data['Contact']) { // data not null
          Contact.validateJSON(data['Contact']);
        }
        // ensure the json data is a string
        if (data['CurrencyCode'] && !(typeof data['CurrencyCode'] === 'string' || data['CurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got " + data['CurrencyCode']);
        }
        // ensure the json data is a string
        if (data['ID'] && !(typeof data['ID'] === 'string' || data['ID'] instanceof String)) {
            throw new Error("Expected the field `ID` to be a primitive type in the JSON string but got " + data['ID']);
        }
        // ensure the json data is a string
        if (data['LineAmountTypes'] && !(typeof data['LineAmountTypes'] === 'string' || data['LineAmountTypes'] instanceof String)) {
            throw new Error("Expected the field `LineAmountTypes` to be a primitive type in the JSON string but got " + data['LineAmountTypes']);
        }
        if (data['LineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LineItems'])) {
                throw new Error("Expected the field `LineItems` to be an array in the JSON data but got " + data['LineItems']);
            }
            // validate the optional field `LineItems` (array)
            for (const item of data['LineItems']) {
                LineItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Reference'] && !(typeof data['Reference'] === 'string' || data['Reference'] instanceof String)) {
            throw new Error("Expected the field `Reference` to be a primitive type in the JSON string but got " + data['Reference']);
        }
        // ensure the json data is a string
        if (data['RepeatingInvoiceID'] && !(typeof data['RepeatingInvoiceID'] === 'string' || data['RepeatingInvoiceID'] instanceof String)) {
            throw new Error("Expected the field `RepeatingInvoiceID` to be a primitive type in the JSON string but got " + data['RepeatingInvoiceID']);
        }
        // validate the optional field `Schedule`
        if (data['Schedule']) { // data not null
          Schedule.validateJSON(data['Schedule']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}



/**
 * Displays array of attachments from the API
 * @member {Array.<module:model/Attachment>} Attachments
 */
RepeatingInvoice.prototype['Attachments'] = undefined;

/**
 * See BrandingThemes
 * @member {String} BrandingThemeID
 */
RepeatingInvoice.prototype['BrandingThemeID'] = undefined;

/**
 * @member {module:model/Contact} Contact
 */
RepeatingInvoice.prototype['Contact'] = undefined;

/**
 * @member {module:model/CurrencyCode} CurrencyCode
 */
RepeatingInvoice.prototype['CurrencyCode'] = undefined;

/**
 * boolean to indicate if an invoice has an attachment
 * @member {Boolean} HasAttachments
 * @default false
 */
RepeatingInvoice.prototype['HasAttachments'] = false;

/**
 * Xero generated unique identifier for repeating invoice template
 * @member {String} ID
 */
RepeatingInvoice.prototype['ID'] = undefined;

/**
 * @member {module:model/LineAmountTypes} LineAmountTypes
 */
RepeatingInvoice.prototype['LineAmountTypes'] = undefined;

/**
 * See LineItems
 * @member {Array.<module:model/LineItem>} LineItems
 */
RepeatingInvoice.prototype['LineItems'] = undefined;

/**
 * ACCREC only â€“ additional reference number
 * @member {String} Reference
 */
RepeatingInvoice.prototype['Reference'] = undefined;

/**
 * Xero generated unique identifier for repeating invoice template
 * @member {String} RepeatingInvoiceID
 */
RepeatingInvoice.prototype['RepeatingInvoiceID'] = undefined;

/**
 * @member {module:model/Schedule} Schedule
 */
RepeatingInvoice.prototype['Schedule'] = undefined;

/**
 * One of the following - DRAFT or AUTHORISED â€“ See Invoice Status Codes
 * @member {module:model/RepeatingInvoice.StatusEnum} Status
 */
RepeatingInvoice.prototype['Status'] = undefined;

/**
 * Total of invoice excluding taxes
 * @member {Number} SubTotal
 */
RepeatingInvoice.prototype['SubTotal'] = undefined;

/**
 * Total of Invoice tax inclusive (i.e. SubTotal + TotalTax)
 * @member {Number} Total
 */
RepeatingInvoice.prototype['Total'] = undefined;

/**
 * Total tax on invoice
 * @member {Number} TotalTax
 */
RepeatingInvoice.prototype['TotalTax'] = undefined;

/**
 * See Invoice Types
 * @member {module:model/RepeatingInvoice.TypeEnum} Type
 */
RepeatingInvoice.prototype['Type'] = undefined;





/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
RepeatingInvoice['StatusEnum'] = {

    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",

    /**
     * value: "AUTHORISED"
     * @const
     */
    "AUTHORISED": "AUTHORISED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};


/**
 * Allowed values for the <code>Type</code> property.
 * @enum {String}
 * @readonly
 */
RepeatingInvoice['TypeEnum'] = {

    /**
     * value: "ACCPAY"
     * @const
     */
    "ACCPAY": "ACCPAY",

    /**
     * value: "ACCREC"
     * @const
     */
    "ACCREC": "ACCREC"
};



export default RepeatingInvoice;

