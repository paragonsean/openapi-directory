/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';
import ValidationError from './ValidationError';

/**
 * The BankTransfer model module.
 * @module model/BankTransfer
 * @version 2.9.4
 */
class BankTransfer {
    /**
     * Constructs a new <code>BankTransfer</code>.
     * @alias module:model/BankTransfer
     * @param amount {Number} amount of the transaction
     * @param fromBankAccount {module:model/Account} 
     * @param toBankAccount {module:model/Account} 
     */
    constructor(amount, fromBankAccount, toBankAccount) { 
        
        BankTransfer.initialize(this, amount, fromBankAccount, toBankAccount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, fromBankAccount, toBankAccount) { 
        obj['Amount'] = amount;
        obj['FromBankAccount'] = fromBankAccount;
        obj['HasAttachments'] = false;
        obj['ToBankAccount'] = toBankAccount;
    }

    /**
     * Constructs a <code>BankTransfer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BankTransfer} obj Optional instance to populate.
     * @return {module:model/BankTransfer} The populated <code>BankTransfer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BankTransfer();

            if (data.hasOwnProperty('Amount')) {
                obj['Amount'] = ApiClient.convertToType(data['Amount'], 'Number');
            }
            if (data.hasOwnProperty('BankTransferID')) {
                obj['BankTransferID'] = ApiClient.convertToType(data['BankTransferID'], 'String');
            }
            if (data.hasOwnProperty('CreatedDateUTC')) {
                obj['CreatedDateUTC'] = ApiClient.convertToType(data['CreatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('CurrencyRate')) {
                obj['CurrencyRate'] = ApiClient.convertToType(data['CurrencyRate'], 'Number');
            }
            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'String');
            }
            if (data.hasOwnProperty('FromBankAccount')) {
                obj['FromBankAccount'] = Account.constructFromObject(data['FromBankAccount']);
            }
            if (data.hasOwnProperty('FromBankTransactionID')) {
                obj['FromBankTransactionID'] = ApiClient.convertToType(data['FromBankTransactionID'], 'String');
            }
            if (data.hasOwnProperty('HasAttachments')) {
                obj['HasAttachments'] = ApiClient.convertToType(data['HasAttachments'], 'Boolean');
            }
            if (data.hasOwnProperty('ToBankAccount')) {
                obj['ToBankAccount'] = Account.constructFromObject(data['ToBankAccount']);
            }
            if (data.hasOwnProperty('ToBankTransactionID')) {
                obj['ToBankTransactionID'] = ApiClient.convertToType(data['ToBankTransactionID'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BankTransfer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BankTransfer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BankTransfer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['BankTransferID'] && !(typeof data['BankTransferID'] === 'string' || data['BankTransferID'] instanceof String)) {
            throw new Error("Expected the field `BankTransferID` to be a primitive type in the JSON string but got " + data['BankTransferID']);
        }
        // ensure the json data is a string
        if (data['CreatedDateUTC'] && !(typeof data['CreatedDateUTC'] === 'string' || data['CreatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `CreatedDateUTC` to be a primitive type in the JSON string but got " + data['CreatedDateUTC']);
        }
        // ensure the json data is a string
        if (data['Date'] && !(typeof data['Date'] === 'string' || data['Date'] instanceof String)) {
            throw new Error("Expected the field `Date` to be a primitive type in the JSON string but got " + data['Date']);
        }
        // validate the optional field `FromBankAccount`
        if (data['FromBankAccount']) { // data not null
          Account.validateJSON(data['FromBankAccount']);
        }
        // ensure the json data is a string
        if (data['FromBankTransactionID'] && !(typeof data['FromBankTransactionID'] === 'string' || data['FromBankTransactionID'] instanceof String)) {
            throw new Error("Expected the field `FromBankTransactionID` to be a primitive type in the JSON string but got " + data['FromBankTransactionID']);
        }
        // validate the optional field `ToBankAccount`
        if (data['ToBankAccount']) { // data not null
          Account.validateJSON(data['ToBankAccount']);
        }
        // ensure the json data is a string
        if (data['ToBankTransactionID'] && !(typeof data['ToBankTransactionID'] === 'string' || data['ToBankTransactionID'] instanceof String)) {
            throw new Error("Expected the field `ToBankTransactionID` to be a primitive type in the JSON string but got " + data['ToBankTransactionID']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}

BankTransfer.RequiredProperties = ["Amount", "FromBankAccount", "ToBankAccount"];

/**
 * amount of the transaction
 * @member {Number} Amount
 */
BankTransfer.prototype['Amount'] = undefined;

/**
 * The identifier of the Bank Transfer
 * @member {String} BankTransferID
 */
BankTransfer.prototype['BankTransferID'] = undefined;

/**
 * UTC timestamp of creation date of bank transfer
 * @member {String} CreatedDateUTC
 */
BankTransfer.prototype['CreatedDateUTC'] = undefined;

/**
 * The currency rate
 * @member {Number} CurrencyRate
 */
BankTransfer.prototype['CurrencyRate'] = undefined;

/**
 * The date of the Transfer YYYY-MM-DD
 * @member {String} Date
 */
BankTransfer.prototype['Date'] = undefined;

/**
 * @member {module:model/Account} FromBankAccount
 */
BankTransfer.prototype['FromBankAccount'] = undefined;

/**
 * The Bank Transaction ID for the source account
 * @member {String} FromBankTransactionID
 */
BankTransfer.prototype['FromBankTransactionID'] = undefined;

/**
 * Boolean to indicate if a Bank Transfer has an attachment
 * @member {Boolean} HasAttachments
 * @default false
 */
BankTransfer.prototype['HasAttachments'] = false;

/**
 * @member {module:model/Account} ToBankAccount
 */
BankTransfer.prototype['ToBankAccount'] = undefined;

/**
 * The Bank Transaction ID for the destination account
 * @member {String} ToBankTransactionID
 */
BankTransfer.prototype['ToBankTransactionID'] = undefined;

/**
 * Displays array of validation error messages from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
BankTransfer.prototype['ValidationErrors'] = undefined;






export default BankTransfer;

