/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TrackingCategory from './TrackingCategory';

/**
 * The ManualJournalLine model module.
 * @module model/ManualJournalLine
 * @version 2.9.4
 */
class ManualJournalLine {
    /**
     * Constructs a new <code>ManualJournalLine</code>.
     * @alias module:model/ManualJournalLine
     */
    constructor() { 
        
        ManualJournalLine.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManualJournalLine</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManualJournalLine} obj Optional instance to populate.
     * @return {module:model/ManualJournalLine} The populated <code>ManualJournalLine</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManualJournalLine();

            if (data.hasOwnProperty('AccountCode')) {
                obj['AccountCode'] = ApiClient.convertToType(data['AccountCode'], 'String');
            }
            if (data.hasOwnProperty('AccountID')) {
                obj['AccountID'] = ApiClient.convertToType(data['AccountID'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('IsBlank')) {
                obj['IsBlank'] = ApiClient.convertToType(data['IsBlank'], 'Boolean');
            }
            if (data.hasOwnProperty('LineAmount')) {
                obj['LineAmount'] = ApiClient.convertToType(data['LineAmount'], 'Number');
            }
            if (data.hasOwnProperty('TaxAmount')) {
                obj['TaxAmount'] = ApiClient.convertToType(data['TaxAmount'], 'Number');
            }
            if (data.hasOwnProperty('TaxType')) {
                obj['TaxType'] = ApiClient.convertToType(data['TaxType'], 'String');
            }
            if (data.hasOwnProperty('Tracking')) {
                obj['Tracking'] = ApiClient.convertToType(data['Tracking'], [TrackingCategory]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManualJournalLine</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManualJournalLine</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AccountCode'] && !(typeof data['AccountCode'] === 'string' || data['AccountCode'] instanceof String)) {
            throw new Error("Expected the field `AccountCode` to be a primitive type in the JSON string but got " + data['AccountCode']);
        }
        // ensure the json data is a string
        if (data['AccountID'] && !(typeof data['AccountID'] === 'string' || data['AccountID'] instanceof String)) {
            throw new Error("Expected the field `AccountID` to be a primitive type in the JSON string but got " + data['AccountID']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['TaxType'] && !(typeof data['TaxType'] === 'string' || data['TaxType'] instanceof String)) {
            throw new Error("Expected the field `TaxType` to be a primitive type in the JSON string but got " + data['TaxType']);
        }
        if (data['Tracking']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Tracking'])) {
                throw new Error("Expected the field `Tracking` to be an array in the JSON data but got " + data['Tracking']);
            }
            // validate the optional field `Tracking` (array)
            for (const item of data['Tracking']) {
                TrackingCategory.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * See Accounts
 * @member {String} AccountCode
 */
ManualJournalLine.prototype['AccountCode'] = undefined;

/**
 * See Accounts
 * @member {String} AccountID
 */
ManualJournalLine.prototype['AccountID'] = undefined;

/**
 * Description for journal line
 * @member {String} Description
 */
ManualJournalLine.prototype['Description'] = undefined;

/**
 * is the line blank
 * @member {Boolean} IsBlank
 */
ManualJournalLine.prototype['IsBlank'] = undefined;

/**
 * total for line. Debits are positive, credits are negative value
 * @member {Number} LineAmount
 */
ManualJournalLine.prototype['LineAmount'] = undefined;

/**
 * The calculated tax amount based on the TaxType and LineAmount
 * @member {Number} TaxAmount
 */
ManualJournalLine.prototype['TaxAmount'] = undefined;

/**
 * The tax type from TaxRates
 * @member {String} TaxType
 */
ManualJournalLine.prototype['TaxType'] = undefined;

/**
 * Optional Tracking Category â€“ see Tracking. Any JournalLine can have a maximum of 2 <TrackingCategory> elements.
 * @member {Array.<module:model/TrackingCategory>} Tracking
 */
ManualJournalLine.prototype['Tracking'] = undefined;






export default ManualJournalLine;

