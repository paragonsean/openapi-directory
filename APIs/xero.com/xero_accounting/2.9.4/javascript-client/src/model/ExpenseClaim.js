/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Payment from './Payment';
import Receipt from './Receipt';
import User from './User';

/**
 * The ExpenseClaim model module.
 * @module model/ExpenseClaim
 * @version 2.9.4
 */
class ExpenseClaim {
    /**
     * Constructs a new <code>ExpenseClaim</code>.
     * @alias module:model/ExpenseClaim
     */
    constructor() { 
        
        ExpenseClaim.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExpenseClaim</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExpenseClaim} obj Optional instance to populate.
     * @return {module:model/ExpenseClaim} The populated <code>ExpenseClaim</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExpenseClaim();

            if (data.hasOwnProperty('AmountDue')) {
                obj['AmountDue'] = ApiClient.convertToType(data['AmountDue'], 'Number');
            }
            if (data.hasOwnProperty('AmountPaid')) {
                obj['AmountPaid'] = ApiClient.convertToType(data['AmountPaid'], 'Number');
            }
            if (data.hasOwnProperty('ExpenseClaimID')) {
                obj['ExpenseClaimID'] = ApiClient.convertToType(data['ExpenseClaimID'], 'String');
            }
            if (data.hasOwnProperty('PaymentDueDate')) {
                obj['PaymentDueDate'] = ApiClient.convertToType(data['PaymentDueDate'], 'String');
            }
            if (data.hasOwnProperty('Payments')) {
                obj['Payments'] = ApiClient.convertToType(data['Payments'], [Payment]);
            }
            if (data.hasOwnProperty('ReceiptID')) {
                obj['ReceiptID'] = ApiClient.convertToType(data['ReceiptID'], 'String');
            }
            if (data.hasOwnProperty('Receipts')) {
                obj['Receipts'] = ApiClient.convertToType(data['Receipts'], [Receipt]);
            }
            if (data.hasOwnProperty('ReportingDate')) {
                obj['ReportingDate'] = ApiClient.convertToType(data['ReportingDate'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('Total')) {
                obj['Total'] = ApiClient.convertToType(data['Total'], 'Number');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('User')) {
                obj['User'] = User.constructFromObject(data['User']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExpenseClaim</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExpenseClaim</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ExpenseClaimID'] && !(typeof data['ExpenseClaimID'] === 'string' || data['ExpenseClaimID'] instanceof String)) {
            throw new Error("Expected the field `ExpenseClaimID` to be a primitive type in the JSON string but got " + data['ExpenseClaimID']);
        }
        // ensure the json data is a string
        if (data['PaymentDueDate'] && !(typeof data['PaymentDueDate'] === 'string' || data['PaymentDueDate'] instanceof String)) {
            throw new Error("Expected the field `PaymentDueDate` to be a primitive type in the JSON string but got " + data['PaymentDueDate']);
        }
        if (data['Payments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Payments'])) {
                throw new Error("Expected the field `Payments` to be an array in the JSON data but got " + data['Payments']);
            }
            // validate the optional field `Payments` (array)
            for (const item of data['Payments']) {
                Payment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ReceiptID'] && !(typeof data['ReceiptID'] === 'string' || data['ReceiptID'] instanceof String)) {
            throw new Error("Expected the field `ReceiptID` to be a primitive type in the JSON string but got " + data['ReceiptID']);
        }
        if (data['Receipts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Receipts'])) {
                throw new Error("Expected the field `Receipts` to be an array in the JSON data but got " + data['Receipts']);
            }
            // validate the optional field `Receipts` (array)
            for (const item of data['Receipts']) {
                Receipt.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ReportingDate'] && !(typeof data['ReportingDate'] === 'string' || data['ReportingDate'] instanceof String)) {
            throw new Error("Expected the field `ReportingDate` to be a primitive type in the JSON string but got " + data['ReportingDate']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }
        // validate the optional field `User`
        if (data['User']) { // data not null
          User.validateJSON(data['User']);
        }

        return true;
    }


}



/**
 * The amount due to be paid for an expense claim
 * @member {Number} AmountDue
 */
ExpenseClaim.prototype['AmountDue'] = undefined;

/**
 * The amount still to pay for an expense claim
 * @member {Number} AmountPaid
 */
ExpenseClaim.prototype['AmountPaid'] = undefined;

/**
 * Xero generated unique identifier for an expense claim
 * @member {String} ExpenseClaimID
 */
ExpenseClaim.prototype['ExpenseClaimID'] = undefined;

/**
 * The date when the expense claim is due to be paid YYYY-MM-DD
 * @member {String} PaymentDueDate
 */
ExpenseClaim.prototype['PaymentDueDate'] = undefined;

/**
 * See Payments
 * @member {Array.<module:model/Payment>} Payments
 */
ExpenseClaim.prototype['Payments'] = undefined;

/**
 * The Xero identifier for the Receipt e.g. e59a2c7f-1306-4078-a0f3-73537afcbba9
 * @member {String} ReceiptID
 */
ExpenseClaim.prototype['ReceiptID'] = undefined;

/**
 * @member {Array.<module:model/Receipt>} Receipts
 */
ExpenseClaim.prototype['Receipts'] = undefined;

/**
 * The date the expense claim will be reported in Xero YYYY-MM-DD
 * @member {String} ReportingDate
 */
ExpenseClaim.prototype['ReportingDate'] = undefined;

/**
 * Current status of an expense claim â€“ see status types
 * @member {module:model/ExpenseClaim.StatusEnum} Status
 */
ExpenseClaim.prototype['Status'] = undefined;

/**
 * The total of an expense claim being paid
 * @member {Number} Total
 */
ExpenseClaim.prototype['Total'] = undefined;

/**
 * Last modified date UTC format
 * @member {String} UpdatedDateUTC
 */
ExpenseClaim.prototype['UpdatedDateUTC'] = undefined;

/**
 * @member {module:model/User} User
 */
ExpenseClaim.prototype['User'] = undefined;





/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
ExpenseClaim['StatusEnum'] = {

    /**
     * value: "SUBMITTED"
     * @const
     */
    "SUBMITTED": "SUBMITTED",

    /**
     * value: "AUTHORISED"
     * @const
     */
    "AUTHORISED": "AUTHORISED",

    /**
     * value: "PAID"
     * @const
     */
    "PAID": "PAID",

    /**
     * value: "VOIDED"
     * @const
     */
    "VOIDED": "VOIDED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};



export default ExpenseClaim;

