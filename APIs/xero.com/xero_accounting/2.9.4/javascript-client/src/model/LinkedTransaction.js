/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ValidationError from './ValidationError';

/**
 * The LinkedTransaction model module.
 * @module model/LinkedTransaction
 * @version 2.9.4
 */
class LinkedTransaction {
    /**
     * Constructs a new <code>LinkedTransaction</code>.
     * @alias module:model/LinkedTransaction
     */
    constructor() { 
        
        LinkedTransaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LinkedTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinkedTransaction} obj Optional instance to populate.
     * @return {module:model/LinkedTransaction} The populated <code>LinkedTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinkedTransaction();

            if (data.hasOwnProperty('ContactID')) {
                obj['ContactID'] = ApiClient.convertToType(data['ContactID'], 'String');
            }
            if (data.hasOwnProperty('LinkedTransactionID')) {
                obj['LinkedTransactionID'] = ApiClient.convertToType(data['LinkedTransactionID'], 'String');
            }
            if (data.hasOwnProperty('SourceLineItemID')) {
                obj['SourceLineItemID'] = ApiClient.convertToType(data['SourceLineItemID'], 'String');
            }
            if (data.hasOwnProperty('SourceTransactionID')) {
                obj['SourceTransactionID'] = ApiClient.convertToType(data['SourceTransactionID'], 'String');
            }
            if (data.hasOwnProperty('SourceTransactionTypeCode')) {
                obj['SourceTransactionTypeCode'] = ApiClient.convertToType(data['SourceTransactionTypeCode'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('TargetLineItemID')) {
                obj['TargetLineItemID'] = ApiClient.convertToType(data['TargetLineItemID'], 'String');
            }
            if (data.hasOwnProperty('TargetTransactionID')) {
                obj['TargetTransactionID'] = ApiClient.convertToType(data['TargetTransactionID'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinkedTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinkedTransaction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ContactID'] && !(typeof data['ContactID'] === 'string' || data['ContactID'] instanceof String)) {
            throw new Error("Expected the field `ContactID` to be a primitive type in the JSON string but got " + data['ContactID']);
        }
        // ensure the json data is a string
        if (data['LinkedTransactionID'] && !(typeof data['LinkedTransactionID'] === 'string' || data['LinkedTransactionID'] instanceof String)) {
            throw new Error("Expected the field `LinkedTransactionID` to be a primitive type in the JSON string but got " + data['LinkedTransactionID']);
        }
        // ensure the json data is a string
        if (data['SourceLineItemID'] && !(typeof data['SourceLineItemID'] === 'string' || data['SourceLineItemID'] instanceof String)) {
            throw new Error("Expected the field `SourceLineItemID` to be a primitive type in the JSON string but got " + data['SourceLineItemID']);
        }
        // ensure the json data is a string
        if (data['SourceTransactionID'] && !(typeof data['SourceTransactionID'] === 'string' || data['SourceTransactionID'] instanceof String)) {
            throw new Error("Expected the field `SourceTransactionID` to be a primitive type in the JSON string but got " + data['SourceTransactionID']);
        }
        // ensure the json data is a string
        if (data['SourceTransactionTypeCode'] && !(typeof data['SourceTransactionTypeCode'] === 'string' || data['SourceTransactionTypeCode'] instanceof String)) {
            throw new Error("Expected the field `SourceTransactionTypeCode` to be a primitive type in the JSON string but got " + data['SourceTransactionTypeCode']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['TargetLineItemID'] && !(typeof data['TargetLineItemID'] === 'string' || data['TargetLineItemID'] instanceof String)) {
            throw new Error("Expected the field `TargetLineItemID` to be a primitive type in the JSON string but got " + data['TargetLineItemID']);
        }
        // ensure the json data is a string
        if (data['TargetTransactionID'] && !(typeof data['TargetTransactionID'] === 'string' || data['TargetTransactionID'] instanceof String)) {
            throw new Error("Expected the field `TargetTransactionID` to be a primitive type in the JSON string but got " + data['TargetTransactionID']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID=4bb34b03-3378-4bb2-a0ed-6345abf3224e&Status=APPROVED.
 * @member {String} ContactID
 */
LinkedTransaction.prototype['ContactID'] = undefined;

/**
 * The Xero identifier for an Linked Transaction e.g./LinkedTransactions/297c2dc5-cc47-4afd-8ec8-74990b8761e9
 * @member {String} LinkedTransactionID
 */
LinkedTransaction.prototype['LinkedTransactionID'] = undefined;

/**
 * The line item identifier from the source transaction.
 * @member {String} SourceLineItemID
 */
LinkedTransaction.prototype['SourceLineItemID'] = undefined;

/**
 * Filter by the SourceTransactionID. Get all the linked transactions created from a particular ACCPAY invoice
 * @member {String} SourceTransactionID
 */
LinkedTransaction.prototype['SourceTransactionID'] = undefined;

/**
 * The Type of the source tranasction. This will be ACCPAY if the linked transaction was created from an invoice and SPEND if it was created from a bank transaction.
 * @member {module:model/LinkedTransaction.SourceTransactionTypeCodeEnum} SourceTransactionTypeCode
 */
LinkedTransaction.prototype['SourceTransactionTypeCode'] = undefined;

/**
 * Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID=4bb34b03-3378-4bb2-a0ed-6345abf3224e&Status=APPROVED.
 * @member {module:model/LinkedTransaction.StatusEnum} Status
 */
LinkedTransaction.prototype['Status'] = undefined;

/**
 * The line item identifier from the target transaction. It is possible  to link multiple billable expenses to the same TargetLineItemID.
 * @member {String} TargetLineItemID
 */
LinkedTransaction.prototype['TargetLineItemID'] = undefined;

/**
 * Filter by the TargetTransactionID. Get all the linked transactions  allocated to a particular ACCREC invoice
 * @member {String} TargetTransactionID
 */
LinkedTransaction.prototype['TargetTransactionID'] = undefined;

/**
 * This will always be BILLABLEEXPENSE. More types may be added in future.
 * @member {module:model/LinkedTransaction.TypeEnum} Type
 */
LinkedTransaction.prototype['Type'] = undefined;

/**
 * The last modified date in UTC format
 * @member {String} UpdatedDateUTC
 */
LinkedTransaction.prototype['UpdatedDateUTC'] = undefined;

/**
 * Displays array of validation error messages from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
LinkedTransaction.prototype['ValidationErrors'] = undefined;





/**
 * Allowed values for the <code>SourceTransactionTypeCode</code> property.
 * @enum {String}
 * @readonly
 */
LinkedTransaction['SourceTransactionTypeCodeEnum'] = {

    /**
     * value: "ACCPAY"
     * @const
     */
    "ACCPAY": "ACCPAY",

    /**
     * value: "SPEND"
     * @const
     */
    "SPEND": "SPEND"
};


/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
LinkedTransaction['StatusEnum'] = {

    /**
     * value: "APPROVED"
     * @const
     */
    "APPROVED": "APPROVED",

    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",

    /**
     * value: "ONDRAFT"
     * @const
     */
    "ONDRAFT": "ONDRAFT",

    /**
     * value: "BILLED"
     * @const
     */
    "BILLED": "BILLED",

    /**
     * value: "VOIDED"
     * @const
     */
    "VOIDED": "VOIDED"
};


/**
 * Allowed values for the <code>Type</code> property.
 * @enum {String}
 * @readonly
 */
LinkedTransaction['TypeEnum'] = {

    /**
     * value: "BILLABLEEXPENSE"
     * @const
     */
    "BILLABLEEXPENSE": "BILLABLEEXPENSE"
};



export default LinkedTransaction;

