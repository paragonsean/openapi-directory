/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Purchase from './Purchase';
import ValidationError from './ValidationError';

/**
 * The Item model module.
 * @module model/Item
 * @version 2.9.4
 */
class Item {
    /**
     * Constructs a new <code>Item</code>.
     * @alias module:model/Item
     * @param code {String} User defined item code (max length = 30)
     */
    constructor(code) { 
        
        Item.initialize(this, code);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code) { 
        obj['Code'] = code;
    }

    /**
     * Constructs a <code>Item</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Item} obj Optional instance to populate.
     * @return {module:model/Item} The populated <code>Item</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Item();

            if (data.hasOwnProperty('Code')) {
                obj['Code'] = ApiClient.convertToType(data['Code'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('InventoryAssetAccountCode')) {
                obj['InventoryAssetAccountCode'] = ApiClient.convertToType(data['InventoryAssetAccountCode'], 'String');
            }
            if (data.hasOwnProperty('IsPurchased')) {
                obj['IsPurchased'] = ApiClient.convertToType(data['IsPurchased'], 'Boolean');
            }
            if (data.hasOwnProperty('IsSold')) {
                obj['IsSold'] = ApiClient.convertToType(data['IsSold'], 'Boolean');
            }
            if (data.hasOwnProperty('IsTrackedAsInventory')) {
                obj['IsTrackedAsInventory'] = ApiClient.convertToType(data['IsTrackedAsInventory'], 'Boolean');
            }
            if (data.hasOwnProperty('ItemID')) {
                obj['ItemID'] = ApiClient.convertToType(data['ItemID'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PurchaseDescription')) {
                obj['PurchaseDescription'] = ApiClient.convertToType(data['PurchaseDescription'], 'String');
            }
            if (data.hasOwnProperty('PurchaseDetails')) {
                obj['PurchaseDetails'] = Purchase.constructFromObject(data['PurchaseDetails']);
            }
            if (data.hasOwnProperty('QuantityOnHand')) {
                obj['QuantityOnHand'] = ApiClient.convertToType(data['QuantityOnHand'], 'Number');
            }
            if (data.hasOwnProperty('SalesDetails')) {
                obj['SalesDetails'] = Purchase.constructFromObject(data['SalesDetails']);
            }
            if (data.hasOwnProperty('StatusAttributeString')) {
                obj['StatusAttributeString'] = ApiClient.convertToType(data['StatusAttributeString'], 'String');
            }
            if (data.hasOwnProperty('TotalCostPool')) {
                obj['TotalCostPool'] = ApiClient.convertToType(data['TotalCostPool'], 'Number');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Item</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Item</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Item.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Code'] && !(typeof data['Code'] === 'string' || data['Code'] instanceof String)) {
            throw new Error("Expected the field `Code` to be a primitive type in the JSON string but got " + data['Code']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['InventoryAssetAccountCode'] && !(typeof data['InventoryAssetAccountCode'] === 'string' || data['InventoryAssetAccountCode'] instanceof String)) {
            throw new Error("Expected the field `InventoryAssetAccountCode` to be a primitive type in the JSON string but got " + data['InventoryAssetAccountCode']);
        }
        // ensure the json data is a string
        if (data['ItemID'] && !(typeof data['ItemID'] === 'string' || data['ItemID'] instanceof String)) {
            throw new Error("Expected the field `ItemID` to be a primitive type in the JSON string but got " + data['ItemID']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['PurchaseDescription'] && !(typeof data['PurchaseDescription'] === 'string' || data['PurchaseDescription'] instanceof String)) {
            throw new Error("Expected the field `PurchaseDescription` to be a primitive type in the JSON string but got " + data['PurchaseDescription']);
        }
        // validate the optional field `PurchaseDetails`
        if (data['PurchaseDetails']) { // data not null
          Purchase.validateJSON(data['PurchaseDetails']);
        }
        // validate the optional field `SalesDetails`
        if (data['SalesDetails']) { // data not null
          Purchase.validateJSON(data['SalesDetails']);
        }
        // ensure the json data is a string
        if (data['StatusAttributeString'] && !(typeof data['StatusAttributeString'] === 'string' || data['StatusAttributeString'] instanceof String)) {
            throw new Error("Expected the field `StatusAttributeString` to be a primitive type in the JSON string but got " + data['StatusAttributeString']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}

Item.RequiredProperties = ["Code"];

/**
 * User defined item code (max length = 30)
 * @member {String} Code
 */
Item.prototype['Code'] = undefined;

/**
 * The sales description of the item (max length = 4000)
 * @member {String} Description
 */
Item.prototype['Description'] = undefined;

/**
 * The inventory asset account for the item. The account must be of type INVENTORY. The  COGSAccountCode in PurchaseDetails is also required to create a tracked item
 * @member {String} InventoryAssetAccountCode
 */
Item.prototype['InventoryAssetAccountCode'] = undefined;

/**
 * Boolean value, defaults to true. When IsPurchased is true the item is available for purchase transactions in the Xero UI. If IsPurchased is updated to false then PurchaseDescription and PurchaseDetails values will be nulled.
 * @member {Boolean} IsPurchased
 */
Item.prototype['IsPurchased'] = undefined;

/**
 * Boolean value, defaults to true. When IsSold is true the item will be available on sales transactions in the Xero UI. If IsSold is updated to false then Description and SalesDetails values will be nulled.
 * @member {Boolean} IsSold
 */
Item.prototype['IsSold'] = undefined;

/**
 * True for items that are tracked as inventory. An item will be tracked as inventory if the InventoryAssetAccountCode and COGSAccountCode are set.
 * @member {Boolean} IsTrackedAsInventory
 */
Item.prototype['IsTrackedAsInventory'] = undefined;

/**
 * The Xero identifier for an Item
 * @member {String} ItemID
 */
Item.prototype['ItemID'] = undefined;

/**
 * The name of the item (max length = 50)
 * @member {String} Name
 */
Item.prototype['Name'] = undefined;

/**
 * The purchase description of the item (max length = 4000)
 * @member {String} PurchaseDescription
 */
Item.prototype['PurchaseDescription'] = undefined;

/**
 * @member {module:model/Purchase} PurchaseDetails
 */
Item.prototype['PurchaseDetails'] = undefined;

/**
 * The quantity of the item on hand
 * @member {Number} QuantityOnHand
 */
Item.prototype['QuantityOnHand'] = undefined;

/**
 * @member {module:model/Purchase} SalesDetails
 */
Item.prototype['SalesDetails'] = undefined;

/**
 * Status of object
 * @member {String} StatusAttributeString
 */
Item.prototype['StatusAttributeString'] = undefined;

/**
 * The value of the item on hand. Calculated using average cost accounting.
 * @member {Number} TotalCostPool
 */
Item.prototype['TotalCostPool'] = undefined;

/**
 * Last modified date in UTC format
 * @member {String} UpdatedDateUTC
 */
Item.prototype['UpdatedDateUTC'] = undefined;

/**
 * Displays array of validation error messages from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
Item.prototype['ValidationErrors'] = undefined;






export default Item;

