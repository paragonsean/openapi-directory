/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Phone model module.
 * @module model/Phone
 * @version 2.9.4
 */
class Phone {
    /**
     * Constructs a new <code>Phone</code>.
     * @alias module:model/Phone
     */
    constructor() { 
        
        Phone.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Phone</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Phone} obj Optional instance to populate.
     * @return {module:model/Phone} The populated <code>Phone</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Phone();

            if (data.hasOwnProperty('PhoneAreaCode')) {
                obj['PhoneAreaCode'] = ApiClient.convertToType(data['PhoneAreaCode'], 'String');
            }
            if (data.hasOwnProperty('PhoneCountryCode')) {
                obj['PhoneCountryCode'] = ApiClient.convertToType(data['PhoneCountryCode'], 'String');
            }
            if (data.hasOwnProperty('PhoneNumber')) {
                obj['PhoneNumber'] = ApiClient.convertToType(data['PhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('PhoneType')) {
                obj['PhoneType'] = ApiClient.convertToType(data['PhoneType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Phone</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Phone</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['PhoneAreaCode'] && !(typeof data['PhoneAreaCode'] === 'string' || data['PhoneAreaCode'] instanceof String)) {
            throw new Error("Expected the field `PhoneAreaCode` to be a primitive type in the JSON string but got " + data['PhoneAreaCode']);
        }
        // ensure the json data is a string
        if (data['PhoneCountryCode'] && !(typeof data['PhoneCountryCode'] === 'string' || data['PhoneCountryCode'] instanceof String)) {
            throw new Error("Expected the field `PhoneCountryCode` to be a primitive type in the JSON string but got " + data['PhoneCountryCode']);
        }
        // ensure the json data is a string
        if (data['PhoneNumber'] && !(typeof data['PhoneNumber'] === 'string' || data['PhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got " + data['PhoneNumber']);
        }
        // ensure the json data is a string
        if (data['PhoneType'] && !(typeof data['PhoneType'] === 'string' || data['PhoneType'] instanceof String)) {
            throw new Error("Expected the field `PhoneType` to be a primitive type in the JSON string but got " + data['PhoneType']);
        }

        return true;
    }


}



/**
 * max length = 10
 * @member {String} PhoneAreaCode
 */
Phone.prototype['PhoneAreaCode'] = undefined;

/**
 * max length = 20
 * @member {String} PhoneCountryCode
 */
Phone.prototype['PhoneCountryCode'] = undefined;

/**
 * max length = 50
 * @member {String} PhoneNumber
 */
Phone.prototype['PhoneNumber'] = undefined;

/**
 * @member {module:model/Phone.PhoneTypeEnum} PhoneType
 */
Phone.prototype['PhoneType'] = undefined;





/**
 * Allowed values for the <code>PhoneType</code> property.
 * @enum {String}
 * @readonly
 */
Phone['PhoneTypeEnum'] = {

    /**
     * value: "DEFAULT"
     * @const
     */
    "DEFAULT": "DEFAULT",

    /**
     * value: "DDI"
     * @const
     */
    "DDI": "DDI",

    /**
     * value: "MOBILE"
     * @const
     */
    "MOBILE": "MOBILE",

    /**
     * value: "FAX"
     * @const
     */
    "FAX": "FAX",

    /**
     * value: "OFFICE"
     * @const
     */
    "OFFICE": "OFFICE"
};



export default Phone;

