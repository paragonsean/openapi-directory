/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attachment from './Attachment';
import LineAmountTypes from './LineAmountTypes';
import ManualJournalLine from './ManualJournalLine';
import ValidationError from './ValidationError';

/**
 * The ManualJournal model module.
 * @module model/ManualJournal
 * @version 2.9.4
 */
class ManualJournal {
    /**
     * Constructs a new <code>ManualJournal</code>.
     * @alias module:model/ManualJournal
     * @param narration {String} Description of journal being posted
     */
    constructor(narration) { 
        
        ManualJournal.initialize(this, narration);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, narration) { 
        obj['HasAttachments'] = false;
        obj['Narration'] = narration;
    }

    /**
     * Constructs a <code>ManualJournal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManualJournal} obj Optional instance to populate.
     * @return {module:model/ManualJournal} The populated <code>ManualJournal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManualJournal();

            if (data.hasOwnProperty('Attachments')) {
                obj['Attachments'] = ApiClient.convertToType(data['Attachments'], [Attachment]);
            }
            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'String');
            }
            if (data.hasOwnProperty('HasAttachments')) {
                obj['HasAttachments'] = ApiClient.convertToType(data['HasAttachments'], 'Boolean');
            }
            if (data.hasOwnProperty('JournalLines')) {
                obj['JournalLines'] = ApiClient.convertToType(data['JournalLines'], [ManualJournalLine]);
            }
            if (data.hasOwnProperty('LineAmountTypes')) {
                obj['LineAmountTypes'] = LineAmountTypes.constructFromObject(data['LineAmountTypes']);
            }
            if (data.hasOwnProperty('ManualJournalID')) {
                obj['ManualJournalID'] = ApiClient.convertToType(data['ManualJournalID'], 'String');
            }
            if (data.hasOwnProperty('Narration')) {
                obj['Narration'] = ApiClient.convertToType(data['Narration'], 'String');
            }
            if (data.hasOwnProperty('ShowOnCashBasisReports')) {
                obj['ShowOnCashBasisReports'] = ApiClient.convertToType(data['ShowOnCashBasisReports'], 'Boolean');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('StatusAttributeString')) {
                obj['StatusAttributeString'] = ApiClient.convertToType(data['StatusAttributeString'], 'String');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('Url')) {
                obj['Url'] = ApiClient.convertToType(data['Url'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
            if (data.hasOwnProperty('Warnings')) {
                obj['Warnings'] = ApiClient.convertToType(data['Warnings'], [ValidationError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManualJournal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManualJournal</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ManualJournal.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['Attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Attachments'])) {
                throw new Error("Expected the field `Attachments` to be an array in the JSON data but got " + data['Attachments']);
            }
            // validate the optional field `Attachments` (array)
            for (const item of data['Attachments']) {
                Attachment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Date'] && !(typeof data['Date'] === 'string' || data['Date'] instanceof String)) {
            throw new Error("Expected the field `Date` to be a primitive type in the JSON string but got " + data['Date']);
        }
        if (data['JournalLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['JournalLines'])) {
                throw new Error("Expected the field `JournalLines` to be an array in the JSON data but got " + data['JournalLines']);
            }
            // validate the optional field `JournalLines` (array)
            for (const item of data['JournalLines']) {
                ManualJournalLine.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['LineAmountTypes'] && !(typeof data['LineAmountTypes'] === 'string' || data['LineAmountTypes'] instanceof String)) {
            throw new Error("Expected the field `LineAmountTypes` to be a primitive type in the JSON string but got " + data['LineAmountTypes']);
        }
        // ensure the json data is a string
        if (data['ManualJournalID'] && !(typeof data['ManualJournalID'] === 'string' || data['ManualJournalID'] instanceof String)) {
            throw new Error("Expected the field `ManualJournalID` to be a primitive type in the JSON string but got " + data['ManualJournalID']);
        }
        // ensure the json data is a string
        if (data['Narration'] && !(typeof data['Narration'] === 'string' || data['Narration'] instanceof String)) {
            throw new Error("Expected the field `Narration` to be a primitive type in the JSON string but got " + data['Narration']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['StatusAttributeString'] && !(typeof data['StatusAttributeString'] === 'string' || data['StatusAttributeString'] instanceof String)) {
            throw new Error("Expected the field `StatusAttributeString` to be a primitive type in the JSON string but got " + data['StatusAttributeString']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }
        // ensure the json data is a string
        if (data['Url'] && !(typeof data['Url'] === 'string' || data['Url'] instanceof String)) {
            throw new Error("Expected the field `Url` to be a primitive type in the JSON string but got " + data['Url']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }
        if (data['Warnings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Warnings'])) {
                throw new Error("Expected the field `Warnings` to be an array in the JSON data but got " + data['Warnings']);
            }
            // validate the optional field `Warnings` (array)
            for (const item of data['Warnings']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}

ManualJournal.RequiredProperties = ["Narration"];

/**
 * Displays array of attachments from the API
 * @member {Array.<module:model/Attachment>} Attachments
 */
ManualJournal.prototype['Attachments'] = undefined;

/**
 * Date journal was posted – YYYY-MM-DD
 * @member {String} Date
 */
ManualJournal.prototype['Date'] = undefined;

/**
 * Boolean to indicate if a manual journal has an attachment
 * @member {Boolean} HasAttachments
 * @default false
 */
ManualJournal.prototype['HasAttachments'] = false;

/**
 * See JournalLines
 * @member {Array.<module:model/ManualJournalLine>} JournalLines
 */
ManualJournal.prototype['JournalLines'] = undefined;

/**
 * @member {module:model/LineAmountTypes} LineAmountTypes
 */
ManualJournal.prototype['LineAmountTypes'] = undefined;

/**
 * The Xero identifier for a Manual Journal
 * @member {String} ManualJournalID
 */
ManualJournal.prototype['ManualJournalID'] = undefined;

/**
 * Description of journal being posted
 * @member {String} Narration
 */
ManualJournal.prototype['Narration'] = undefined;

/**
 * Boolean – default is true if not specified
 * @member {Boolean} ShowOnCashBasisReports
 */
ManualJournal.prototype['ShowOnCashBasisReports'] = undefined;

/**
 * See Manual Journal Status Codes
 * @member {module:model/ManualJournal.StatusEnum} Status
 */
ManualJournal.prototype['Status'] = undefined;

/**
 * A string to indicate if a invoice status
 * @member {String} StatusAttributeString
 */
ManualJournal.prototype['StatusAttributeString'] = undefined;

/**
 * Last modified date UTC format
 * @member {String} UpdatedDateUTC
 */
ManualJournal.prototype['UpdatedDateUTC'] = undefined;

/**
 * Url link to a source document – shown as “Go to [appName]” in the Xero app
 * @member {String} Url
 */
ManualJournal.prototype['Url'] = undefined;

/**
 * Displays array of validation error messages from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
ManualJournal.prototype['ValidationErrors'] = undefined;

/**
 * Displays array of warning messages from the API
 * @member {Array.<module:model/ValidationError>} Warnings
 */
ManualJournal.prototype['Warnings'] = undefined;





/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
ManualJournal['StatusEnum'] = {

    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",

    /**
     * value: "POSTED"
     * @const
     */
    "POSTED": "POSTED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED",

    /**
     * value: "VOIDED"
     * @const
     */
    "VOIDED": "VOIDED",

    /**
     * value: "ARCHIVED"
     * @const
     */
    "ARCHIVED": "ARCHIVED"
};



export default ManualJournal;

