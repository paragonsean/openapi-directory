/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaxComponent from './TaxComponent';

/**
 * The TaxRate model module.
 * @module model/TaxRate
 * @version 2.9.4
 */
class TaxRate {
    /**
     * Constructs a new <code>TaxRate</code>.
     * @alias module:model/TaxRate
     */
    constructor() { 
        
        TaxRate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaxRate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaxRate} obj Optional instance to populate.
     * @return {module:model/TaxRate} The populated <code>TaxRate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaxRate();

            if (data.hasOwnProperty('CanApplyToAssets')) {
                obj['CanApplyToAssets'] = ApiClient.convertToType(data['CanApplyToAssets'], 'Boolean');
            }
            if (data.hasOwnProperty('CanApplyToEquity')) {
                obj['CanApplyToEquity'] = ApiClient.convertToType(data['CanApplyToEquity'], 'Boolean');
            }
            if (data.hasOwnProperty('CanApplyToExpenses')) {
                obj['CanApplyToExpenses'] = ApiClient.convertToType(data['CanApplyToExpenses'], 'Boolean');
            }
            if (data.hasOwnProperty('CanApplyToLiabilities')) {
                obj['CanApplyToLiabilities'] = ApiClient.convertToType(data['CanApplyToLiabilities'], 'Boolean');
            }
            if (data.hasOwnProperty('CanApplyToRevenue')) {
                obj['CanApplyToRevenue'] = ApiClient.convertToType(data['CanApplyToRevenue'], 'Boolean');
            }
            if (data.hasOwnProperty('DisplayTaxRate')) {
                obj['DisplayTaxRate'] = ApiClient.convertToType(data['DisplayTaxRate'], 'Number');
            }
            if (data.hasOwnProperty('EffectiveRate')) {
                obj['EffectiveRate'] = ApiClient.convertToType(data['EffectiveRate'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('ReportTaxType')) {
                obj['ReportTaxType'] = ApiClient.convertToType(data['ReportTaxType'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('TaxComponents')) {
                obj['TaxComponents'] = ApiClient.convertToType(data['TaxComponents'], [TaxComponent]);
            }
            if (data.hasOwnProperty('TaxType')) {
                obj['TaxType'] = ApiClient.convertToType(data['TaxType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaxRate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaxRate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['ReportTaxType'] && !(typeof data['ReportTaxType'] === 'string' || data['ReportTaxType'] instanceof String)) {
            throw new Error("Expected the field `ReportTaxType` to be a primitive type in the JSON string but got " + data['ReportTaxType']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        if (data['TaxComponents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['TaxComponents'])) {
                throw new Error("Expected the field `TaxComponents` to be an array in the JSON data but got " + data['TaxComponents']);
            }
            // validate the optional field `TaxComponents` (array)
            for (const item of data['TaxComponents']) {
                TaxComponent.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['TaxType'] && !(typeof data['TaxType'] === 'string' || data['TaxType'] instanceof String)) {
            throw new Error("Expected the field `TaxType` to be a primitive type in the JSON string but got " + data['TaxType']);
        }

        return true;
    }


}



/**
 * Boolean to describe if tax rate can be used for asset accounts i.e.  true,false
 * @member {Boolean} CanApplyToAssets
 */
TaxRate.prototype['CanApplyToAssets'] = undefined;

/**
 * Boolean to describe if tax rate can be used for equity accounts i.e true,false
 * @member {Boolean} CanApplyToEquity
 */
TaxRate.prototype['CanApplyToEquity'] = undefined;

/**
 * Boolean to describe if tax rate can be used for expense accounts  i.e. true,false
 * @member {Boolean} CanApplyToExpenses
 */
TaxRate.prototype['CanApplyToExpenses'] = undefined;

/**
 * Boolean to describe if tax rate can be used for liability accounts  i.e. true,false
 * @member {Boolean} CanApplyToLiabilities
 */
TaxRate.prototype['CanApplyToLiabilities'] = undefined;

/**
 * Boolean to describe if tax rate can be used for revenue accounts i.e. true,false
 * @member {Boolean} CanApplyToRevenue
 */
TaxRate.prototype['CanApplyToRevenue'] = undefined;

/**
 * Tax Rate (decimal to 4dp) e.g 12.5000
 * @member {Number} DisplayTaxRate
 */
TaxRate.prototype['DisplayTaxRate'] = undefined;

/**
 * Effective Tax Rate (decimal to 4dp) e.g 12.5000
 * @member {Number} EffectiveRate
 */
TaxRate.prototype['EffectiveRate'] = undefined;

/**
 * Name of tax rate
 * @member {String} Name
 */
TaxRate.prototype['Name'] = undefined;

/**
 * See ReportTaxTypes
 * @member {module:model/TaxRate.ReportTaxTypeEnum} ReportTaxType
 */
TaxRate.prototype['ReportTaxType'] = undefined;

/**
 * See Status Codes
 * @member {module:model/TaxRate.StatusEnum} Status
 */
TaxRate.prototype['Status'] = undefined;

/**
 * See TaxComponents
 * @member {Array.<module:model/TaxComponent>} TaxComponents
 */
TaxRate.prototype['TaxComponents'] = undefined;

/**
 * The tax type
 * @member {String} TaxType
 */
TaxRate.prototype['TaxType'] = undefined;





/**
 * Allowed values for the <code>ReportTaxType</code> property.
 * @enum {String}
 * @readonly
 */
TaxRate['ReportTaxTypeEnum'] = {

    /**
     * value: "AVALARA"
     * @const
     */
    "AVALARA": "AVALARA",

    /**
     * value: "BASEXCLUDED"
     * @const
     */
    "BASEXCLUDED": "BASEXCLUDED",

    /**
     * value: "CAPITALSALESOUTPUT"
     * @const
     */
    "CAPITALSALESOUTPUT": "CAPITALSALESOUTPUT",

    /**
     * value: "CAPITALEXPENSESINPUT"
     * @const
     */
    "CAPITALEXPENSESINPUT": "CAPITALEXPENSESINPUT",

    /**
     * value: "ECOUTPUT"
     * @const
     */
    "ECOUTPUT": "ECOUTPUT",

    /**
     * value: "ECOUTPUTSERVICES"
     * @const
     */
    "ECOUTPUTSERVICES": "ECOUTPUTSERVICES",

    /**
     * value: "ECINPUT"
     * @const
     */
    "ECINPUT": "ECINPUT",

    /**
     * value: "ECACQUISITIONS"
     * @const
     */
    "ECACQUISITIONS": "ECACQUISITIONS",

    /**
     * value: "EXEMPTEXPENSES"
     * @const
     */
    "EXEMPTEXPENSES": "EXEMPTEXPENSES",

    /**
     * value: "EXEMPTINPUT"
     * @const
     */
    "EXEMPTINPUT": "EXEMPTINPUT",

    /**
     * value: "EXEMPTOUTPUT"
     * @const
     */
    "EXEMPTOUTPUT": "EXEMPTOUTPUT",

    /**
     * value: "GSTONIMPORTS"
     * @const
     */
    "GSTONIMPORTS": "GSTONIMPORTS",

    /**
     * value: "INPUT"
     * @const
     */
    "INPUT": "INPUT",

    /**
     * value: "INPUTTAXED"
     * @const
     */
    "INPUTTAXED": "INPUTTAXED",

    /**
     * value: "MOSSSALES"
     * @const
     */
    "MOSSSALES": "MOSSSALES",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "NONEOUTPUT"
     * @const
     */
    "NONEOUTPUT": "NONEOUTPUT",

    /**
     * value: "OUTPUT"
     * @const
     */
    "OUTPUT": "OUTPUT",

    /**
     * value: "PURCHASESINPUT"
     * @const
     */
    "PURCHASESINPUT": "PURCHASESINPUT",

    /**
     * value: "SALESOUTPUT"
     * @const
     */
    "SALESOUTPUT": "SALESOUTPUT",

    /**
     * value: "EXEMPTCAPITAL"
     * @const
     */
    "EXEMPTCAPITAL": "EXEMPTCAPITAL",

    /**
     * value: "EXEMPTEXPORT"
     * @const
     */
    "EXEMPTEXPORT": "EXEMPTEXPORT",

    /**
     * value: "CAPITALEXINPUT"
     * @const
     */
    "CAPITALEXINPUT": "CAPITALEXINPUT",

    /**
     * value: "GSTONCAPIMPORTS"
     * @const
     */
    "GSTONCAPIMPORTS": "GSTONCAPIMPORTS",

    /**
     * value: "GSTONCAPITALIMPORTS"
     * @const
     */
    "GSTONCAPITALIMPORTS": "GSTONCAPITALIMPORTS",

    /**
     * value: "REVERSECHARGES"
     * @const
     */
    "REVERSECHARGES": "REVERSECHARGES",

    /**
     * value: "PAYMENTS"
     * @const
     */
    "PAYMENTS": "PAYMENTS",

    /**
     * value: "INVOICE"
     * @const
     */
    "INVOICE": "INVOICE",

    /**
     * value: "CASH"
     * @const
     */
    "CASH": "CASH",

    /**
     * value: "ACCRUAL"
     * @const
     */
    "ACCRUAL": "ACCRUAL",

    /**
     * value: "FLATRATECASH"
     * @const
     */
    "FLATRATECASH": "FLATRATECASH",

    /**
     * value: "FLATRATEACCRUAL"
     * @const
     */
    "FLATRATEACCRUAL": "FLATRATEACCRUAL",

    /**
     * value: "ACCRUALS"
     * @const
     */
    "ACCRUALS": "ACCRUALS",

    /**
     * value: "TXCA"
     * @const
     */
    "TXCA": "TXCA",

    /**
     * value: "SRCAS"
     * @const
     */
    "SRCAS": "SRCAS",

    /**
     * value: "DSOUTPUT"
     * @const
     */
    "DSOUTPUT": "DSOUTPUT",

    /**
     * value: "BLINPUT2"
     * @const
     */
    "BLINPUT2": "BLINPUT2",

    /**
     * value: "EPINPUT"
     * @const
     */
    "EPINPUT": "EPINPUT",

    /**
     * value: "IMINPUT2"
     * @const
     */
    "IMINPUT2": "IMINPUT2",

    /**
     * value: "MEINPUT"
     * @const
     */
    "MEINPUT": "MEINPUT",

    /**
     * value: "IGDSINPUT2"
     * @const
     */
    "IGDSINPUT2": "IGDSINPUT2",

    /**
     * value: "ESN33OUTPUT"
     * @const
     */
    "ESN33OUTPUT": "ESN33OUTPUT",

    /**
     * value: "OPINPUT"
     * @const
     */
    "OPINPUT": "OPINPUT",

    /**
     * value: "OSOUTPUT"
     * @const
     */
    "OSOUTPUT": "OSOUTPUT",

    /**
     * value: "TXN33INPUT"
     * @const
     */
    "TXN33INPUT": "TXN33INPUT",

    /**
     * value: "TXESSINPUT"
     * @const
     */
    "TXESSINPUT": "TXESSINPUT",

    /**
     * value: "TXREINPUT"
     * @const
     */
    "TXREINPUT": "TXREINPUT",

    /**
     * value: "TXPETINPUT"
     * @const
     */
    "TXPETINPUT": "TXPETINPUT",

    /**
     * value: "NRINPUT"
     * @const
     */
    "NRINPUT": "NRINPUT",

    /**
     * value: "ES33OUTPUT"
     * @const
     */
    "ES33OUTPUT": "ES33OUTPUT",

    /**
     * value: "ZERORATEDINPUT"
     * @const
     */
    "ZERORATEDINPUT": "ZERORATEDINPUT",

    /**
     * value: "ZERORATEDOUTPUT"
     * @const
     */
    "ZERORATEDOUTPUT": "ZERORATEDOUTPUT",

    /**
     * value: "DRCHARGESUPPLY"
     * @const
     */
    "DRCHARGESUPPLY": "DRCHARGESUPPLY",

    /**
     * value: "DRCHARGE"
     * @const
     */
    "DRCHARGE": "DRCHARGE",

    /**
     * value: "CAPINPUT"
     * @const
     */
    "CAPINPUT": "CAPINPUT",

    /**
     * value: "CAPIMPORTS"
     * @const
     */
    "CAPIMPORTS": "CAPIMPORTS",

    /**
     * value: "IMINPUT"
     * @const
     */
    "IMINPUT": "IMINPUT",

    /**
     * value: "INPUT2"
     * @const
     */
    "INPUT2": "INPUT2",

    /**
     * value: "CIUINPUT"
     * @const
     */
    "CIUINPUT": "CIUINPUT",

    /**
     * value: "SRINPUT"
     * @const
     */
    "SRINPUT": "SRINPUT",

    /**
     * value: "OUTPUT2"
     * @const
     */
    "OUTPUT2": "OUTPUT2",

    /**
     * value: "SROUTPUT"
     * @const
     */
    "SROUTPUT": "SROUTPUT",

    /**
     * value: "CAPOUTPUT"
     * @const
     */
    "CAPOUTPUT": "CAPOUTPUT",

    /**
     * value: "SROUTPUT2"
     * @const
     */
    "SROUTPUT2": "SROUTPUT2",

    /**
     * value: "CIUOUTPUT"
     * @const
     */
    "CIUOUTPUT": "CIUOUTPUT",

    /**
     * value: "ZROUTPUT"
     * @const
     */
    "ZROUTPUT": "ZROUTPUT",

    /**
     * value: "ZREXPORT"
     * @const
     */
    "ZREXPORT": "ZREXPORT",

    /**
     * value: "ACC28PLUS"
     * @const
     */
    "ACC28PLUS": "ACC28PLUS",

    /**
     * value: "ACCUPTO28"
     * @const
     */
    "ACCUPTO28": "ACCUPTO28",

    /**
     * value: "OTHEROUTPUT"
     * @const
     */
    "OTHEROUTPUT": "OTHEROUTPUT",

    /**
     * value: "SHOUTPUT"
     * @const
     */
    "SHOUTPUT": "SHOUTPUT",

    /**
     * value: "ZRINPUT"
     * @const
     */
    "ZRINPUT": "ZRINPUT",

    /**
     * value: "BADDEBT"
     * @const
     */
    "BADDEBT": "BADDEBT",

    /**
     * value: "OTHERINPUT"
     * @const
     */
    "OTHERINPUT": "OTHERINPUT"
};


/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
TaxRate['StatusEnum'] = {

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED",

    /**
     * value: "ARCHIVED"
     * @const
     */
    "ARCHIVED": "ARCHIVED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING"
};



export default TaxRate;

