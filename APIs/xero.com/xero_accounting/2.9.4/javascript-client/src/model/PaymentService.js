/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ValidationError from './ValidationError';

/**
 * The PaymentService model module.
 * @module model/PaymentService
 * @version 2.9.4
 */
class PaymentService {
    /**
     * Constructs a new <code>PaymentService</code>.
     * @alias module:model/PaymentService
     */
    constructor() { 
        
        PaymentService.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentService</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentService} obj Optional instance to populate.
     * @return {module:model/PaymentService} The populated <code>PaymentService</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentService();

            if (data.hasOwnProperty('PayNowText')) {
                obj['PayNowText'] = ApiClient.convertToType(data['PayNowText'], 'String');
            }
            if (data.hasOwnProperty('PaymentServiceID')) {
                obj['PaymentServiceID'] = ApiClient.convertToType(data['PaymentServiceID'], 'String');
            }
            if (data.hasOwnProperty('PaymentServiceName')) {
                obj['PaymentServiceName'] = ApiClient.convertToType(data['PaymentServiceName'], 'String');
            }
            if (data.hasOwnProperty('PaymentServiceType')) {
                obj['PaymentServiceType'] = ApiClient.convertToType(data['PaymentServiceType'], 'String');
            }
            if (data.hasOwnProperty('PaymentServiceUrl')) {
                obj['PaymentServiceUrl'] = ApiClient.convertToType(data['PaymentServiceUrl'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentService</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentService</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['PayNowText'] && !(typeof data['PayNowText'] === 'string' || data['PayNowText'] instanceof String)) {
            throw new Error("Expected the field `PayNowText` to be a primitive type in the JSON string but got " + data['PayNowText']);
        }
        // ensure the json data is a string
        if (data['PaymentServiceID'] && !(typeof data['PaymentServiceID'] === 'string' || data['PaymentServiceID'] instanceof String)) {
            throw new Error("Expected the field `PaymentServiceID` to be a primitive type in the JSON string but got " + data['PaymentServiceID']);
        }
        // ensure the json data is a string
        if (data['PaymentServiceName'] && !(typeof data['PaymentServiceName'] === 'string' || data['PaymentServiceName'] instanceof String)) {
            throw new Error("Expected the field `PaymentServiceName` to be a primitive type in the JSON string but got " + data['PaymentServiceName']);
        }
        // ensure the json data is a string
        if (data['PaymentServiceType'] && !(typeof data['PaymentServiceType'] === 'string' || data['PaymentServiceType'] instanceof String)) {
            throw new Error("Expected the field `PaymentServiceType` to be a primitive type in the JSON string but got " + data['PaymentServiceType']);
        }
        // ensure the json data is a string
        if (data['PaymentServiceUrl'] && !(typeof data['PaymentServiceUrl'] === 'string' || data['PaymentServiceUrl'] instanceof String)) {
            throw new Error("Expected the field `PaymentServiceUrl` to be a primitive type in the JSON string but got " + data['PaymentServiceUrl']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The text displayed on the Pay Now button in Xero Online Invoicing. If this is not set it will default to Pay by credit card
 * @member {String} PayNowText
 */
PaymentService.prototype['PayNowText'] = undefined;

/**
 * Xero identifier
 * @member {String} PaymentServiceID
 */
PaymentService.prototype['PaymentServiceID'] = undefined;

/**
 * Name of payment service
 * @member {String} PaymentServiceName
 */
PaymentService.prototype['PaymentServiceName'] = undefined;

/**
 * This will always be CUSTOM for payment services created via the API.
 * @member {String} PaymentServiceType
 */
PaymentService.prototype['PaymentServiceType'] = undefined;

/**
 * The custom payment URL
 * @member {String} PaymentServiceUrl
 */
PaymentService.prototype['PaymentServiceUrl'] = undefined;

/**
 * Displays array of validation error messages from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
PaymentService.prototype['ValidationErrors'] = undefined;






export default PaymentService;

