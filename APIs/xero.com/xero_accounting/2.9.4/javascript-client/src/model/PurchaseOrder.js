/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attachment from './Attachment';
import Contact from './Contact';
import CurrencyCode from './CurrencyCode';
import LineAmountTypes from './LineAmountTypes';
import LineItem from './LineItem';
import ValidationError from './ValidationError';

/**
 * The PurchaseOrder model module.
 * @module model/PurchaseOrder
 * @version 2.9.4
 */
class PurchaseOrder {
    /**
     * Constructs a new <code>PurchaseOrder</code>.
     * @alias module:model/PurchaseOrder
     */
    constructor() { 
        
        PurchaseOrder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['HasAttachments'] = false;
    }

    /**
     * Constructs a <code>PurchaseOrder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PurchaseOrder} obj Optional instance to populate.
     * @return {module:model/PurchaseOrder} The populated <code>PurchaseOrder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PurchaseOrder();

            if (data.hasOwnProperty('Attachments')) {
                obj['Attachments'] = ApiClient.convertToType(data['Attachments'], [Attachment]);
            }
            if (data.hasOwnProperty('AttentionTo')) {
                obj['AttentionTo'] = ApiClient.convertToType(data['AttentionTo'], 'String');
            }
            if (data.hasOwnProperty('BrandingThemeID')) {
                obj['BrandingThemeID'] = ApiClient.convertToType(data['BrandingThemeID'], 'String');
            }
            if (data.hasOwnProperty('Contact')) {
                obj['Contact'] = Contact.constructFromObject(data['Contact']);
            }
            if (data.hasOwnProperty('CurrencyCode')) {
                obj['CurrencyCode'] = CurrencyCode.constructFromObject(data['CurrencyCode']);
            }
            if (data.hasOwnProperty('CurrencyRate')) {
                obj['CurrencyRate'] = ApiClient.convertToType(data['CurrencyRate'], 'Number');
            }
            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'String');
            }
            if (data.hasOwnProperty('DeliveryAddress')) {
                obj['DeliveryAddress'] = ApiClient.convertToType(data['DeliveryAddress'], 'String');
            }
            if (data.hasOwnProperty('DeliveryDate')) {
                obj['DeliveryDate'] = ApiClient.convertToType(data['DeliveryDate'], 'String');
            }
            if (data.hasOwnProperty('DeliveryInstructions')) {
                obj['DeliveryInstructions'] = ApiClient.convertToType(data['DeliveryInstructions'], 'String');
            }
            if (data.hasOwnProperty('ExpectedArrivalDate')) {
                obj['ExpectedArrivalDate'] = ApiClient.convertToType(data['ExpectedArrivalDate'], 'String');
            }
            if (data.hasOwnProperty('HasAttachments')) {
                obj['HasAttachments'] = ApiClient.convertToType(data['HasAttachments'], 'Boolean');
            }
            if (data.hasOwnProperty('LineAmountTypes')) {
                obj['LineAmountTypes'] = LineAmountTypes.constructFromObject(data['LineAmountTypes']);
            }
            if (data.hasOwnProperty('LineItems')) {
                obj['LineItems'] = ApiClient.convertToType(data['LineItems'], [LineItem]);
            }
            if (data.hasOwnProperty('PurchaseOrderID')) {
                obj['PurchaseOrderID'] = ApiClient.convertToType(data['PurchaseOrderID'], 'String');
            }
            if (data.hasOwnProperty('PurchaseOrderNumber')) {
                obj['PurchaseOrderNumber'] = ApiClient.convertToType(data['PurchaseOrderNumber'], 'String');
            }
            if (data.hasOwnProperty('Reference')) {
                obj['Reference'] = ApiClient.convertToType(data['Reference'], 'String');
            }
            if (data.hasOwnProperty('SentToContact')) {
                obj['SentToContact'] = ApiClient.convertToType(data['SentToContact'], 'Boolean');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('StatusAttributeString')) {
                obj['StatusAttributeString'] = ApiClient.convertToType(data['StatusAttributeString'], 'String');
            }
            if (data.hasOwnProperty('SubTotal')) {
                obj['SubTotal'] = ApiClient.convertToType(data['SubTotal'], 'Number');
            }
            if (data.hasOwnProperty('Telephone')) {
                obj['Telephone'] = ApiClient.convertToType(data['Telephone'], 'String');
            }
            if (data.hasOwnProperty('Total')) {
                obj['Total'] = ApiClient.convertToType(data['Total'], 'Number');
            }
            if (data.hasOwnProperty('TotalDiscount')) {
                obj['TotalDiscount'] = ApiClient.convertToType(data['TotalDiscount'], 'Number');
            }
            if (data.hasOwnProperty('TotalTax')) {
                obj['TotalTax'] = ApiClient.convertToType(data['TotalTax'], 'Number');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
            if (data.hasOwnProperty('Warnings')) {
                obj['Warnings'] = ApiClient.convertToType(data['Warnings'], [ValidationError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PurchaseOrder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PurchaseOrder</code>.
     */
    static validateJSON(data) {
        if (data['Attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Attachments'])) {
                throw new Error("Expected the field `Attachments` to be an array in the JSON data but got " + data['Attachments']);
            }
            // validate the optional field `Attachments` (array)
            for (const item of data['Attachments']) {
                Attachment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['AttentionTo'] && !(typeof data['AttentionTo'] === 'string' || data['AttentionTo'] instanceof String)) {
            throw new Error("Expected the field `AttentionTo` to be a primitive type in the JSON string but got " + data['AttentionTo']);
        }
        // ensure the json data is a string
        if (data['BrandingThemeID'] && !(typeof data['BrandingThemeID'] === 'string' || data['BrandingThemeID'] instanceof String)) {
            throw new Error("Expected the field `BrandingThemeID` to be a primitive type in the JSON string but got " + data['BrandingThemeID']);
        }
        // validate the optional field `Contact`
        if (data['Contact']) { // data not null
          Contact.validateJSON(data['Contact']);
        }
        // ensure the json data is a string
        if (data['CurrencyCode'] && !(typeof data['CurrencyCode'] === 'string' || data['CurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got " + data['CurrencyCode']);
        }
        // ensure the json data is a string
        if (data['Date'] && !(typeof data['Date'] === 'string' || data['Date'] instanceof String)) {
            throw new Error("Expected the field `Date` to be a primitive type in the JSON string but got " + data['Date']);
        }
        // ensure the json data is a string
        if (data['DeliveryAddress'] && !(typeof data['DeliveryAddress'] === 'string' || data['DeliveryAddress'] instanceof String)) {
            throw new Error("Expected the field `DeliveryAddress` to be a primitive type in the JSON string but got " + data['DeliveryAddress']);
        }
        // ensure the json data is a string
        if (data['DeliveryDate'] && !(typeof data['DeliveryDate'] === 'string' || data['DeliveryDate'] instanceof String)) {
            throw new Error("Expected the field `DeliveryDate` to be a primitive type in the JSON string but got " + data['DeliveryDate']);
        }
        // ensure the json data is a string
        if (data['DeliveryInstructions'] && !(typeof data['DeliveryInstructions'] === 'string' || data['DeliveryInstructions'] instanceof String)) {
            throw new Error("Expected the field `DeliveryInstructions` to be a primitive type in the JSON string but got " + data['DeliveryInstructions']);
        }
        // ensure the json data is a string
        if (data['ExpectedArrivalDate'] && !(typeof data['ExpectedArrivalDate'] === 'string' || data['ExpectedArrivalDate'] instanceof String)) {
            throw new Error("Expected the field `ExpectedArrivalDate` to be a primitive type in the JSON string but got " + data['ExpectedArrivalDate']);
        }
        // ensure the json data is a string
        if (data['LineAmountTypes'] && !(typeof data['LineAmountTypes'] === 'string' || data['LineAmountTypes'] instanceof String)) {
            throw new Error("Expected the field `LineAmountTypes` to be a primitive type in the JSON string but got " + data['LineAmountTypes']);
        }
        if (data['LineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LineItems'])) {
                throw new Error("Expected the field `LineItems` to be an array in the JSON data but got " + data['LineItems']);
            }
            // validate the optional field `LineItems` (array)
            for (const item of data['LineItems']) {
                LineItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['PurchaseOrderID'] && !(typeof data['PurchaseOrderID'] === 'string' || data['PurchaseOrderID'] instanceof String)) {
            throw new Error("Expected the field `PurchaseOrderID` to be a primitive type in the JSON string but got " + data['PurchaseOrderID']);
        }
        // ensure the json data is a string
        if (data['PurchaseOrderNumber'] && !(typeof data['PurchaseOrderNumber'] === 'string' || data['PurchaseOrderNumber'] instanceof String)) {
            throw new Error("Expected the field `PurchaseOrderNumber` to be a primitive type in the JSON string but got " + data['PurchaseOrderNumber']);
        }
        // ensure the json data is a string
        if (data['Reference'] && !(typeof data['Reference'] === 'string' || data['Reference'] instanceof String)) {
            throw new Error("Expected the field `Reference` to be a primitive type in the JSON string but got " + data['Reference']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['StatusAttributeString'] && !(typeof data['StatusAttributeString'] === 'string' || data['StatusAttributeString'] instanceof String)) {
            throw new Error("Expected the field `StatusAttributeString` to be a primitive type in the JSON string but got " + data['StatusAttributeString']);
        }
        // ensure the json data is a string
        if (data['Telephone'] && !(typeof data['Telephone'] === 'string' || data['Telephone'] instanceof String)) {
            throw new Error("Expected the field `Telephone` to be a primitive type in the JSON string but got " + data['Telephone']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }
        if (data['Warnings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Warnings'])) {
                throw new Error("Expected the field `Warnings` to be an array in the JSON data but got " + data['Warnings']);
            }
            // validate the optional field `Warnings` (array)
            for (const item of data['Warnings']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Displays array of attachments from the API
 * @member {Array.<module:model/Attachment>} Attachments
 */
PurchaseOrder.prototype['Attachments'] = undefined;

/**
 * The person that the delivery is going to
 * @member {String} AttentionTo
 */
PurchaseOrder.prototype['AttentionTo'] = undefined;

/**
 * See BrandingThemes
 * @member {String} BrandingThemeID
 */
PurchaseOrder.prototype['BrandingThemeID'] = undefined;

/**
 * @member {module:model/Contact} Contact
 */
PurchaseOrder.prototype['Contact'] = undefined;

/**
 * @member {module:model/CurrencyCode} CurrencyCode
 */
PurchaseOrder.prototype['CurrencyCode'] = undefined;

/**
 * The currency rate for a multicurrency purchase order. If no rate is specified, the XE.com day rate is used.
 * @member {Number} CurrencyRate
 */
PurchaseOrder.prototype['CurrencyRate'] = undefined;

/**
 * Date purchase order was issued – YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation
 * @member {String} Date
 */
PurchaseOrder.prototype['Date'] = undefined;

/**
 * The address the goods are to be delivered to
 * @member {String} DeliveryAddress
 */
PurchaseOrder.prototype['DeliveryAddress'] = undefined;

/**
 * Date the goods are to be delivered – YYYY-MM-DD
 * @member {String} DeliveryDate
 */
PurchaseOrder.prototype['DeliveryDate'] = undefined;

/**
 * A free text feild for instructions (500 characters max)
 * @member {String} DeliveryInstructions
 */
PurchaseOrder.prototype['DeliveryInstructions'] = undefined;

/**
 * The date the goods are expected to arrive.
 * @member {String} ExpectedArrivalDate
 */
PurchaseOrder.prototype['ExpectedArrivalDate'] = undefined;

/**
 * boolean to indicate if a purchase order has an attachment
 * @member {Boolean} HasAttachments
 * @default false
 */
PurchaseOrder.prototype['HasAttachments'] = false;

/**
 * @member {module:model/LineAmountTypes} LineAmountTypes
 */
PurchaseOrder.prototype['LineAmountTypes'] = undefined;

/**
 * See LineItems
 * @member {Array.<module:model/LineItem>} LineItems
 */
PurchaseOrder.prototype['LineItems'] = undefined;

/**
 * Xero generated unique identifier for purchase order
 * @member {String} PurchaseOrderID
 */
PurchaseOrder.prototype['PurchaseOrderID'] = undefined;

/**
 * Unique alpha numeric code identifying purchase order (when missing will auto-generate from your Organisation Invoice Settings)
 * @member {String} PurchaseOrderNumber
 */
PurchaseOrder.prototype['PurchaseOrderNumber'] = undefined;

/**
 * Additional reference number
 * @member {String} Reference
 */
PurchaseOrder.prototype['Reference'] = undefined;

/**
 * Boolean to set whether the purchase order should be marked as “sent”. This can be set only on purchase orders that have been approved or billed
 * @member {Boolean} SentToContact
 */
PurchaseOrder.prototype['SentToContact'] = undefined;

/**
 * See Purchase Order Status Codes
 * @member {module:model/PurchaseOrder.StatusEnum} Status
 */
PurchaseOrder.prototype['Status'] = undefined;

/**
 * A string to indicate if a invoice status
 * @member {String} StatusAttributeString
 */
PurchaseOrder.prototype['StatusAttributeString'] = undefined;

/**
 * Total of purchase order excluding taxes
 * @member {Number} SubTotal
 */
PurchaseOrder.prototype['SubTotal'] = undefined;

/**
 * The phone number for the person accepting the delivery
 * @member {String} Telephone
 */
PurchaseOrder.prototype['Telephone'] = undefined;

/**
 * Total of Purchase Order tax inclusive (i.e. SubTotal + TotalTax)
 * @member {Number} Total
 */
PurchaseOrder.prototype['Total'] = undefined;

/**
 * Total of discounts applied on the purchase order line items
 * @member {Number} TotalDiscount
 */
PurchaseOrder.prototype['TotalDiscount'] = undefined;

/**
 * Total tax on purchase order
 * @member {Number} TotalTax
 */
PurchaseOrder.prototype['TotalTax'] = undefined;

/**
 * Last modified date UTC format
 * @member {String} UpdatedDateUTC
 */
PurchaseOrder.prototype['UpdatedDateUTC'] = undefined;

/**
 * Displays array of validation error messages from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
PurchaseOrder.prototype['ValidationErrors'] = undefined;

/**
 * Displays array of warning messages from the API
 * @member {Array.<module:model/ValidationError>} Warnings
 */
PurchaseOrder.prototype['Warnings'] = undefined;





/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
PurchaseOrder['StatusEnum'] = {

    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",

    /**
     * value: "SUBMITTED"
     * @const
     */
    "SUBMITTED": "SUBMITTED",

    /**
     * value: "AUTHORISED"
     * @const
     */
    "AUTHORISED": "AUTHORISED",

    /**
     * value: "BILLED"
     * @const
     */
    "BILLED": "BILLED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};



export default PurchaseOrder;

