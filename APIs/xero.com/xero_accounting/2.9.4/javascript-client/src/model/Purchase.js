/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Purchase model module.
 * @module model/Purchase
 * @version 2.9.4
 */
class Purchase {
    /**
     * Constructs a new <code>Purchase</code>.
     * @alias module:model/Purchase
     */
    constructor() { 
        
        Purchase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Purchase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Purchase} obj Optional instance to populate.
     * @return {module:model/Purchase} The populated <code>Purchase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Purchase();

            if (data.hasOwnProperty('AccountCode')) {
                obj['AccountCode'] = ApiClient.convertToType(data['AccountCode'], 'String');
            }
            if (data.hasOwnProperty('COGSAccountCode')) {
                obj['COGSAccountCode'] = ApiClient.convertToType(data['COGSAccountCode'], 'String');
            }
            if (data.hasOwnProperty('TaxType')) {
                obj['TaxType'] = ApiClient.convertToType(data['TaxType'], 'String');
            }
            if (data.hasOwnProperty('UnitPrice')) {
                obj['UnitPrice'] = ApiClient.convertToType(data['UnitPrice'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Purchase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Purchase</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AccountCode'] && !(typeof data['AccountCode'] === 'string' || data['AccountCode'] instanceof String)) {
            throw new Error("Expected the field `AccountCode` to be a primitive type in the JSON string but got " + data['AccountCode']);
        }
        // ensure the json data is a string
        if (data['COGSAccountCode'] && !(typeof data['COGSAccountCode'] === 'string' || data['COGSAccountCode'] instanceof String)) {
            throw new Error("Expected the field `COGSAccountCode` to be a primitive type in the JSON string but got " + data['COGSAccountCode']);
        }
        // ensure the json data is a string
        if (data['TaxType'] && !(typeof data['TaxType'] === 'string' || data['TaxType'] instanceof String)) {
            throw new Error("Expected the field `TaxType` to be a primitive type in the JSON string but got " + data['TaxType']);
        }

        return true;
    }


}



/**
 * Default account code to be used for purchased/sale. Not applicable to the purchase details of tracked items
 * @member {String} AccountCode
 */
Purchase.prototype['AccountCode'] = undefined;

/**
 * Cost of goods sold account. Only applicable to the purchase details of tracked items.
 * @member {String} COGSAccountCode
 */
Purchase.prototype['COGSAccountCode'] = undefined;

/**
 * The tax type from TaxRates
 * @member {String} TaxType
 */
Purchase.prototype['TaxType'] = undefined;

/**
 * Unit Price of the item. By default UnitPrice is rounded to two decimal places. You can use 4 decimal places by adding the unitdp=4 querystring parameter to your request.
 * @member {Number} UnitPrice
 */
Purchase.prototype['UnitPrice'] = undefined;






export default Purchase;

