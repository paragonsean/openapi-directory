/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Attachment from './Attachment';
import Balances from './Balances';
import BatchPaymentDetails from './BatchPaymentDetails';
import BrandingTheme from './BrandingTheme';
import ContactGroup from './ContactGroup';
import ContactPerson from './ContactPerson';
import CurrencyCode from './CurrencyCode';
import PaymentTerm from './PaymentTerm';
import Phone from './Phone';
import SalesTrackingCategory from './SalesTrackingCategory';
import ValidationError from './ValidationError';

/**
 * The Contact model module.
 * @module model/Contact
 * @version 2.9.4
 */
class Contact {
    /**
     * Constructs a new <code>Contact</code>.
     * @alias module:model/Contact
     */
    constructor() { 
        
        Contact.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['HasAttachments'] = false;
        obj['HasValidationErrors'] = false;
    }

    /**
     * Constructs a <code>Contact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Contact} obj Optional instance to populate.
     * @return {module:model/Contact} The populated <code>Contact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Contact();

            if (data.hasOwnProperty('AccountNumber')) {
                obj['AccountNumber'] = ApiClient.convertToType(data['AccountNumber'], 'String');
            }
            if (data.hasOwnProperty('AccountsPayableTaxType')) {
                obj['AccountsPayableTaxType'] = ApiClient.convertToType(data['AccountsPayableTaxType'], 'String');
            }
            if (data.hasOwnProperty('AccountsReceivableTaxType')) {
                obj['AccountsReceivableTaxType'] = ApiClient.convertToType(data['AccountsReceivableTaxType'], 'String');
            }
            if (data.hasOwnProperty('Addresses')) {
                obj['Addresses'] = ApiClient.convertToType(data['Addresses'], [Address]);
            }
            if (data.hasOwnProperty('Attachments')) {
                obj['Attachments'] = ApiClient.convertToType(data['Attachments'], [Attachment]);
            }
            if (data.hasOwnProperty('Balances')) {
                obj['Balances'] = Balances.constructFromObject(data['Balances']);
            }
            if (data.hasOwnProperty('BankAccountDetails')) {
                obj['BankAccountDetails'] = ApiClient.convertToType(data['BankAccountDetails'], 'String');
            }
            if (data.hasOwnProperty('BatchPayments')) {
                obj['BatchPayments'] = BatchPaymentDetails.constructFromObject(data['BatchPayments']);
            }
            if (data.hasOwnProperty('BrandingTheme')) {
                obj['BrandingTheme'] = BrandingTheme.constructFromObject(data['BrandingTheme']);
            }
            if (data.hasOwnProperty('ContactGroups')) {
                obj['ContactGroups'] = ApiClient.convertToType(data['ContactGroups'], [ContactGroup]);
            }
            if (data.hasOwnProperty('ContactID')) {
                obj['ContactID'] = ApiClient.convertToType(data['ContactID'], 'String');
            }
            if (data.hasOwnProperty('ContactNumber')) {
                obj['ContactNumber'] = ApiClient.convertToType(data['ContactNumber'], 'String');
            }
            if (data.hasOwnProperty('ContactPersons')) {
                obj['ContactPersons'] = ApiClient.convertToType(data['ContactPersons'], [ContactPerson]);
            }
            if (data.hasOwnProperty('ContactStatus')) {
                obj['ContactStatus'] = ApiClient.convertToType(data['ContactStatus'], 'String');
            }
            if (data.hasOwnProperty('DefaultCurrency')) {
                obj['DefaultCurrency'] = CurrencyCode.constructFromObject(data['DefaultCurrency']);
            }
            if (data.hasOwnProperty('Discount')) {
                obj['Discount'] = ApiClient.convertToType(data['Discount'], 'Number');
            }
            if (data.hasOwnProperty('EmailAddress')) {
                obj['EmailAddress'] = ApiClient.convertToType(data['EmailAddress'], 'String');
            }
            if (data.hasOwnProperty('FirstName')) {
                obj['FirstName'] = ApiClient.convertToType(data['FirstName'], 'String');
            }
            if (data.hasOwnProperty('HasAttachments')) {
                obj['HasAttachments'] = ApiClient.convertToType(data['HasAttachments'], 'Boolean');
            }
            if (data.hasOwnProperty('HasValidationErrors')) {
                obj['HasValidationErrors'] = ApiClient.convertToType(data['HasValidationErrors'], 'Boolean');
            }
            if (data.hasOwnProperty('IsCustomer')) {
                obj['IsCustomer'] = ApiClient.convertToType(data['IsCustomer'], 'Boolean');
            }
            if (data.hasOwnProperty('IsSupplier')) {
                obj['IsSupplier'] = ApiClient.convertToType(data['IsSupplier'], 'Boolean');
            }
            if (data.hasOwnProperty('LastName')) {
                obj['LastName'] = ApiClient.convertToType(data['LastName'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PaymentTerms')) {
                obj['PaymentTerms'] = PaymentTerm.constructFromObject(data['PaymentTerms']);
            }
            if (data.hasOwnProperty('Phones')) {
                obj['Phones'] = ApiClient.convertToType(data['Phones'], [Phone]);
            }
            if (data.hasOwnProperty('PurchasesDefaultAccountCode')) {
                obj['PurchasesDefaultAccountCode'] = ApiClient.convertToType(data['PurchasesDefaultAccountCode'], 'String');
            }
            if (data.hasOwnProperty('PurchasesTrackingCategories')) {
                obj['PurchasesTrackingCategories'] = ApiClient.convertToType(data['PurchasesTrackingCategories'], [SalesTrackingCategory]);
            }
            if (data.hasOwnProperty('SalesDefaultAccountCode')) {
                obj['SalesDefaultAccountCode'] = ApiClient.convertToType(data['SalesDefaultAccountCode'], 'String');
            }
            if (data.hasOwnProperty('SalesTrackingCategories')) {
                obj['SalesTrackingCategories'] = ApiClient.convertToType(data['SalesTrackingCategories'], [SalesTrackingCategory]);
            }
            if (data.hasOwnProperty('SkypeUserName')) {
                obj['SkypeUserName'] = ApiClient.convertToType(data['SkypeUserName'], 'String');
            }
            if (data.hasOwnProperty('StatusAttributeString')) {
                obj['StatusAttributeString'] = ApiClient.convertToType(data['StatusAttributeString'], 'String');
            }
            if (data.hasOwnProperty('TaxNumber')) {
                obj['TaxNumber'] = ApiClient.convertToType(data['TaxNumber'], 'String');
            }
            if (data.hasOwnProperty('TrackingCategoryName')) {
                obj['TrackingCategoryName'] = ApiClient.convertToType(data['TrackingCategoryName'], 'String');
            }
            if (data.hasOwnProperty('TrackingCategoryOption')) {
                obj['TrackingCategoryOption'] = ApiClient.convertToType(data['TrackingCategoryOption'], 'String');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
            if (data.hasOwnProperty('Website')) {
                obj['Website'] = ApiClient.convertToType(data['Website'], 'String');
            }
            if (data.hasOwnProperty('XeroNetworkKey')) {
                obj['XeroNetworkKey'] = ApiClient.convertToType(data['XeroNetworkKey'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Contact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Contact</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AccountNumber'] && !(typeof data['AccountNumber'] === 'string' || data['AccountNumber'] instanceof String)) {
            throw new Error("Expected the field `AccountNumber` to be a primitive type in the JSON string but got " + data['AccountNumber']);
        }
        // ensure the json data is a string
        if (data['AccountsPayableTaxType'] && !(typeof data['AccountsPayableTaxType'] === 'string' || data['AccountsPayableTaxType'] instanceof String)) {
            throw new Error("Expected the field `AccountsPayableTaxType` to be a primitive type in the JSON string but got " + data['AccountsPayableTaxType']);
        }
        // ensure the json data is a string
        if (data['AccountsReceivableTaxType'] && !(typeof data['AccountsReceivableTaxType'] === 'string' || data['AccountsReceivableTaxType'] instanceof String)) {
            throw new Error("Expected the field `AccountsReceivableTaxType` to be a primitive type in the JSON string but got " + data['AccountsReceivableTaxType']);
        }
        if (data['Addresses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Addresses'])) {
                throw new Error("Expected the field `Addresses` to be an array in the JSON data but got " + data['Addresses']);
            }
            // validate the optional field `Addresses` (array)
            for (const item of data['Addresses']) {
                Address.validateJSON(item);
            };
        }
        if (data['Attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Attachments'])) {
                throw new Error("Expected the field `Attachments` to be an array in the JSON data but got " + data['Attachments']);
            }
            // validate the optional field `Attachments` (array)
            for (const item of data['Attachments']) {
                Attachment.validateJSON(item);
            };
        }
        // validate the optional field `Balances`
        if (data['Balances']) { // data not null
          Balances.validateJSON(data['Balances']);
        }
        // ensure the json data is a string
        if (data['BankAccountDetails'] && !(typeof data['BankAccountDetails'] === 'string' || data['BankAccountDetails'] instanceof String)) {
            throw new Error("Expected the field `BankAccountDetails` to be a primitive type in the JSON string but got " + data['BankAccountDetails']);
        }
        // validate the optional field `BatchPayments`
        if (data['BatchPayments']) { // data not null
          BatchPaymentDetails.validateJSON(data['BatchPayments']);
        }
        // validate the optional field `BrandingTheme`
        if (data['BrandingTheme']) { // data not null
          BrandingTheme.validateJSON(data['BrandingTheme']);
        }
        if (data['ContactGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ContactGroups'])) {
                throw new Error("Expected the field `ContactGroups` to be an array in the JSON data but got " + data['ContactGroups']);
            }
            // validate the optional field `ContactGroups` (array)
            for (const item of data['ContactGroups']) {
                ContactGroup.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ContactID'] && !(typeof data['ContactID'] === 'string' || data['ContactID'] instanceof String)) {
            throw new Error("Expected the field `ContactID` to be a primitive type in the JSON string but got " + data['ContactID']);
        }
        // ensure the json data is a string
        if (data['ContactNumber'] && !(typeof data['ContactNumber'] === 'string' || data['ContactNumber'] instanceof String)) {
            throw new Error("Expected the field `ContactNumber` to be a primitive type in the JSON string but got " + data['ContactNumber']);
        }
        if (data['ContactPersons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ContactPersons'])) {
                throw new Error("Expected the field `ContactPersons` to be an array in the JSON data but got " + data['ContactPersons']);
            }
            // validate the optional field `ContactPersons` (array)
            for (const item of data['ContactPersons']) {
                ContactPerson.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ContactStatus'] && !(typeof data['ContactStatus'] === 'string' || data['ContactStatus'] instanceof String)) {
            throw new Error("Expected the field `ContactStatus` to be a primitive type in the JSON string but got " + data['ContactStatus']);
        }
        // ensure the json data is a string
        if (data['DefaultCurrency'] && !(typeof data['DefaultCurrency'] === 'string' || data['DefaultCurrency'] instanceof String)) {
            throw new Error("Expected the field `DefaultCurrency` to be a primitive type in the JSON string but got " + data['DefaultCurrency']);
        }
        // ensure the json data is a string
        if (data['EmailAddress'] && !(typeof data['EmailAddress'] === 'string' || data['EmailAddress'] instanceof String)) {
            throw new Error("Expected the field `EmailAddress` to be a primitive type in the JSON string but got " + data['EmailAddress']);
        }
        // ensure the json data is a string
        if (data['FirstName'] && !(typeof data['FirstName'] === 'string' || data['FirstName'] instanceof String)) {
            throw new Error("Expected the field `FirstName` to be a primitive type in the JSON string but got " + data['FirstName']);
        }
        // ensure the json data is a string
        if (data['LastName'] && !(typeof data['LastName'] === 'string' || data['LastName'] instanceof String)) {
            throw new Error("Expected the field `LastName` to be a primitive type in the JSON string but got " + data['LastName']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // validate the optional field `PaymentTerms`
        if (data['PaymentTerms']) { // data not null
          PaymentTerm.validateJSON(data['PaymentTerms']);
        }
        if (data['Phones']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Phones'])) {
                throw new Error("Expected the field `Phones` to be an array in the JSON data but got " + data['Phones']);
            }
            // validate the optional field `Phones` (array)
            for (const item of data['Phones']) {
                Phone.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['PurchasesDefaultAccountCode'] && !(typeof data['PurchasesDefaultAccountCode'] === 'string' || data['PurchasesDefaultAccountCode'] instanceof String)) {
            throw new Error("Expected the field `PurchasesDefaultAccountCode` to be a primitive type in the JSON string but got " + data['PurchasesDefaultAccountCode']);
        }
        if (data['PurchasesTrackingCategories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PurchasesTrackingCategories'])) {
                throw new Error("Expected the field `PurchasesTrackingCategories` to be an array in the JSON data but got " + data['PurchasesTrackingCategories']);
            }
            // validate the optional field `PurchasesTrackingCategories` (array)
            for (const item of data['PurchasesTrackingCategories']) {
                SalesTrackingCategory.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['SalesDefaultAccountCode'] && !(typeof data['SalesDefaultAccountCode'] === 'string' || data['SalesDefaultAccountCode'] instanceof String)) {
            throw new Error("Expected the field `SalesDefaultAccountCode` to be a primitive type in the JSON string but got " + data['SalesDefaultAccountCode']);
        }
        if (data['SalesTrackingCategories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['SalesTrackingCategories'])) {
                throw new Error("Expected the field `SalesTrackingCategories` to be an array in the JSON data but got " + data['SalesTrackingCategories']);
            }
            // validate the optional field `SalesTrackingCategories` (array)
            for (const item of data['SalesTrackingCategories']) {
                SalesTrackingCategory.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['SkypeUserName'] && !(typeof data['SkypeUserName'] === 'string' || data['SkypeUserName'] instanceof String)) {
            throw new Error("Expected the field `SkypeUserName` to be a primitive type in the JSON string but got " + data['SkypeUserName']);
        }
        // ensure the json data is a string
        if (data['StatusAttributeString'] && !(typeof data['StatusAttributeString'] === 'string' || data['StatusAttributeString'] instanceof String)) {
            throw new Error("Expected the field `StatusAttributeString` to be a primitive type in the JSON string but got " + data['StatusAttributeString']);
        }
        // ensure the json data is a string
        if (data['TaxNumber'] && !(typeof data['TaxNumber'] === 'string' || data['TaxNumber'] instanceof String)) {
            throw new Error("Expected the field `TaxNumber` to be a primitive type in the JSON string but got " + data['TaxNumber']);
        }
        // ensure the json data is a string
        if (data['TrackingCategoryName'] && !(typeof data['TrackingCategoryName'] === 'string' || data['TrackingCategoryName'] instanceof String)) {
            throw new Error("Expected the field `TrackingCategoryName` to be a primitive type in the JSON string but got " + data['TrackingCategoryName']);
        }
        // ensure the json data is a string
        if (data['TrackingCategoryOption'] && !(typeof data['TrackingCategoryOption'] === 'string' || data['TrackingCategoryOption'] instanceof String)) {
            throw new Error("Expected the field `TrackingCategoryOption` to be a primitive type in the JSON string but got " + data['TrackingCategoryOption']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Website'] && !(typeof data['Website'] === 'string' || data['Website'] instanceof String)) {
            throw new Error("Expected the field `Website` to be a primitive type in the JSON string but got " + data['Website']);
        }
        // ensure the json data is a string
        if (data['XeroNetworkKey'] && !(typeof data['XeroNetworkKey'] === 'string' || data['XeroNetworkKey'] instanceof String)) {
            throw new Error("Expected the field `XeroNetworkKey` to be a primitive type in the JSON string but got " + data['XeroNetworkKey']);
        }

        return true;
    }


}



/**
 * A user defined account number. This can be updated via the API and the Xero UI (max length = 50)
 * @member {String} AccountNumber
 */
Contact.prototype['AccountNumber'] = undefined;

/**
 * The tax type from TaxRates
 * @member {String} AccountsPayableTaxType
 */
Contact.prototype['AccountsPayableTaxType'] = undefined;

/**
 * The tax type from TaxRates
 * @member {String} AccountsReceivableTaxType
 */
Contact.prototype['AccountsReceivableTaxType'] = undefined;

/**
 * Store certain address types for a contact – see address types
 * @member {Array.<module:model/Address>} Addresses
 */
Contact.prototype['Addresses'] = undefined;

/**
 * Displays array of attachments from the API
 * @member {Array.<module:model/Attachment>} Attachments
 */
Contact.prototype['Attachments'] = undefined;

/**
 * @member {module:model/Balances} Balances
 */
Contact.prototype['Balances'] = undefined;

/**
 * Bank account number of contact
 * @member {String} BankAccountDetails
 */
Contact.prototype['BankAccountDetails'] = undefined;

/**
 * @member {module:model/BatchPaymentDetails} BatchPayments
 */
Contact.prototype['BatchPayments'] = undefined;

/**
 * @member {module:model/BrandingTheme} BrandingTheme
 */
Contact.prototype['BrandingTheme'] = undefined;

/**
 * Displays which contact groups a contact is included in
 * @member {Array.<module:model/ContactGroup>} ContactGroups
 */
Contact.prototype['ContactGroups'] = undefined;

/**
 * Xero identifier
 * @member {String} ContactID
 */
Contact.prototype['ContactID'] = undefined;

/**
 * This can be updated via the API only i.e. This field is read only on the Xero contact screen, used to identify contacts in external systems (max length = 50). If the Contact Number is used, this is displayed as Contact Code in the Contacts UI in Xero.
 * @member {String} ContactNumber
 */
Contact.prototype['ContactNumber'] = undefined;

/**
 * See contact persons
 * @member {Array.<module:model/ContactPerson>} ContactPersons
 */
Contact.prototype['ContactPersons'] = undefined;

/**
 * Current status of a contact – see contact status types
 * @member {module:model/Contact.ContactStatusEnum} ContactStatus
 */
Contact.prototype['ContactStatus'] = undefined;

/**
 * @member {module:model/CurrencyCode} DefaultCurrency
 */
Contact.prototype['DefaultCurrency'] = undefined;

/**
 * The default discount rate for the contact (read only)
 * @member {Number} Discount
 */
Contact.prototype['Discount'] = undefined;

/**
 * Email address of contact person (umlauts not supported) (max length  = 255)
 * @member {String} EmailAddress
 */
Contact.prototype['EmailAddress'] = undefined;

/**
 * First name of contact person (max length = 255)
 * @member {String} FirstName
 */
Contact.prototype['FirstName'] = undefined;

/**
 * A boolean to indicate if a contact has an attachment
 * @member {Boolean} HasAttachments
 * @default false
 */
Contact.prototype['HasAttachments'] = false;

/**
 * A boolean to indicate if a contact has an validation errors
 * @member {Boolean} HasValidationErrors
 * @default false
 */
Contact.prototype['HasValidationErrors'] = false;

/**
 * true or false – Boolean that describes if a contact has any AR invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts receivable invoice is generated against this contact.
 * @member {Boolean} IsCustomer
 */
Contact.prototype['IsCustomer'] = undefined;

/**
 * true or false – Boolean that describes if a contact that has any AP  invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts payable invoice is generated against this contact.
 * @member {Boolean} IsSupplier
 */
Contact.prototype['IsSupplier'] = undefined;

/**
 * Last name of contact person (max length = 255)
 * @member {String} LastName
 */
Contact.prototype['LastName'] = undefined;

/**
 * Full name of contact/organisation (max length = 255)
 * @member {String} Name
 */
Contact.prototype['Name'] = undefined;

/**
 * @member {module:model/PaymentTerm} PaymentTerms
 */
Contact.prototype['PaymentTerms'] = undefined;

/**
 * Store certain phone types for a contact – see phone types
 * @member {Array.<module:model/Phone>} Phones
 */
Contact.prototype['Phones'] = undefined;

/**
 * The default purchases account code for contacts
 * @member {String} PurchasesDefaultAccountCode
 */
Contact.prototype['PurchasesDefaultAccountCode'] = undefined;

/**
 * The default purchases tracking categories for contacts
 * @member {Array.<module:model/SalesTrackingCategory>} PurchasesTrackingCategories
 */
Contact.prototype['PurchasesTrackingCategories'] = undefined;

/**
 * The default sales account code for contacts
 * @member {String} SalesDefaultAccountCode
 */
Contact.prototype['SalesDefaultAccountCode'] = undefined;

/**
 * The default sales tracking categories for contacts
 * @member {Array.<module:model/SalesTrackingCategory>} SalesTrackingCategories
 */
Contact.prototype['SalesTrackingCategories'] = undefined;

/**
 * Skype user name of contact
 * @member {String} SkypeUserName
 */
Contact.prototype['SkypeUserName'] = undefined;

/**
 * Status of object
 * @member {String} StatusAttributeString
 */
Contact.prototype['StatusAttributeString'] = undefined;

/**
 * Tax number of contact – this is also known as the ABN (Australia), GST Number (New Zealand), VAT Number (UK) or Tax ID Number (US and global) in the Xero UI depending on which regionalized version of Xero you are using (max length = 50)
 * @member {String} TaxNumber
 */
Contact.prototype['TaxNumber'] = undefined;

/**
 * The name of the Tracking Category assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories
 * @member {String} TrackingCategoryName
 */
Contact.prototype['TrackingCategoryName'] = undefined;

/**
 * The name of the Tracking Option assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories
 * @member {String} TrackingCategoryOption
 */
Contact.prototype['TrackingCategoryOption'] = undefined;

/**
 * UTC timestamp of last update to contact
 * @member {String} UpdatedDateUTC
 */
Contact.prototype['UpdatedDateUTC'] = undefined;

/**
 * Displays validation errors returned from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
Contact.prototype['ValidationErrors'] = undefined;

/**
 * Website address for contact (read only)
 * @member {String} Website
 */
Contact.prototype['Website'] = undefined;

/**
 * Store XeroNetworkKey for contacts.
 * @member {String} XeroNetworkKey
 */
Contact.prototype['XeroNetworkKey'] = undefined;





/**
 * Allowed values for the <code>ContactStatus</code> property.
 * @enum {String}
 * @readonly
 */
Contact['ContactStatusEnum'] = {

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "ARCHIVED"
     * @const
     */
    "ARCHIVED": "ARCHIVED",

    /**
     * value: "GDPRREQUEST"
     * @const
     */
    "GDPRREQUEST": "GDPRREQUEST"
};



export default Contact;

