/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attachment from './Attachment';
import Contact from './Contact';
import CreditNote from './CreditNote';
import CurrencyCode from './CurrencyCode';
import LineAmountTypes from './LineAmountTypes';
import LineItem from './LineItem';
import Overpayment from './Overpayment';
import Payment from './Payment';
import Prepayment from './Prepayment';
import ValidationError from './ValidationError';

/**
 * The Invoice model module.
 * @module model/Invoice
 * @version 2.9.4
 */
class Invoice {
    /**
     * Constructs a new <code>Invoice</code>.
     * @alias module:model/Invoice
     */
    constructor() { 
        
        Invoice.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['HasAttachments'] = false;
        obj['HasErrors'] = false;
    }

    /**
     * Constructs a <code>Invoice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Invoice} obj Optional instance to populate.
     * @return {module:model/Invoice} The populated <code>Invoice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Invoice();

            if (data.hasOwnProperty('AmountCredited')) {
                obj['AmountCredited'] = ApiClient.convertToType(data['AmountCredited'], 'Number');
            }
            if (data.hasOwnProperty('AmountDue')) {
                obj['AmountDue'] = ApiClient.convertToType(data['AmountDue'], 'Number');
            }
            if (data.hasOwnProperty('AmountPaid')) {
                obj['AmountPaid'] = ApiClient.convertToType(data['AmountPaid'], 'Number');
            }
            if (data.hasOwnProperty('Attachments')) {
                obj['Attachments'] = ApiClient.convertToType(data['Attachments'], [Attachment]);
            }
            if (data.hasOwnProperty('BrandingThemeID')) {
                obj['BrandingThemeID'] = ApiClient.convertToType(data['BrandingThemeID'], 'String');
            }
            if (data.hasOwnProperty('CISDeduction')) {
                obj['CISDeduction'] = ApiClient.convertToType(data['CISDeduction'], 'Number');
            }
            if (data.hasOwnProperty('CISRate')) {
                obj['CISRate'] = ApiClient.convertToType(data['CISRate'], 'Number');
            }
            if (data.hasOwnProperty('Contact')) {
                obj['Contact'] = Contact.constructFromObject(data['Contact']);
            }
            if (data.hasOwnProperty('CreditNotes')) {
                obj['CreditNotes'] = ApiClient.convertToType(data['CreditNotes'], [CreditNote]);
            }
            if (data.hasOwnProperty('CurrencyCode')) {
                obj['CurrencyCode'] = CurrencyCode.constructFromObject(data['CurrencyCode']);
            }
            if (data.hasOwnProperty('CurrencyRate')) {
                obj['CurrencyRate'] = ApiClient.convertToType(data['CurrencyRate'], 'Number');
            }
            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'String');
            }
            if (data.hasOwnProperty('DueDate')) {
                obj['DueDate'] = ApiClient.convertToType(data['DueDate'], 'String');
            }
            if (data.hasOwnProperty('ExpectedPaymentDate')) {
                obj['ExpectedPaymentDate'] = ApiClient.convertToType(data['ExpectedPaymentDate'], 'String');
            }
            if (data.hasOwnProperty('FullyPaidOnDate')) {
                obj['FullyPaidOnDate'] = ApiClient.convertToType(data['FullyPaidOnDate'], 'String');
            }
            if (data.hasOwnProperty('HasAttachments')) {
                obj['HasAttachments'] = ApiClient.convertToType(data['HasAttachments'], 'Boolean');
            }
            if (data.hasOwnProperty('HasErrors')) {
                obj['HasErrors'] = ApiClient.convertToType(data['HasErrors'], 'Boolean');
            }
            if (data.hasOwnProperty('InvoiceID')) {
                obj['InvoiceID'] = ApiClient.convertToType(data['InvoiceID'], 'String');
            }
            if (data.hasOwnProperty('InvoiceNumber')) {
                obj['InvoiceNumber'] = ApiClient.convertToType(data['InvoiceNumber'], 'String');
            }
            if (data.hasOwnProperty('IsDiscounted')) {
                obj['IsDiscounted'] = ApiClient.convertToType(data['IsDiscounted'], 'Boolean');
            }
            if (data.hasOwnProperty('LineAmountTypes')) {
                obj['LineAmountTypes'] = LineAmountTypes.constructFromObject(data['LineAmountTypes']);
            }
            if (data.hasOwnProperty('LineItems')) {
                obj['LineItems'] = ApiClient.convertToType(data['LineItems'], [LineItem]);
            }
            if (data.hasOwnProperty('Overpayments')) {
                obj['Overpayments'] = ApiClient.convertToType(data['Overpayments'], [Overpayment]);
            }
            if (data.hasOwnProperty('Payments')) {
                obj['Payments'] = ApiClient.convertToType(data['Payments'], [Payment]);
            }
            if (data.hasOwnProperty('PlannedPaymentDate')) {
                obj['PlannedPaymentDate'] = ApiClient.convertToType(data['PlannedPaymentDate'], 'String');
            }
            if (data.hasOwnProperty('Prepayments')) {
                obj['Prepayments'] = ApiClient.convertToType(data['Prepayments'], [Prepayment]);
            }
            if (data.hasOwnProperty('Reference')) {
                obj['Reference'] = ApiClient.convertToType(data['Reference'], 'String');
            }
            if (data.hasOwnProperty('RepeatingInvoiceID')) {
                obj['RepeatingInvoiceID'] = ApiClient.convertToType(data['RepeatingInvoiceID'], 'String');
            }
            if (data.hasOwnProperty('SentToContact')) {
                obj['SentToContact'] = ApiClient.convertToType(data['SentToContact'], 'Boolean');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('StatusAttributeString')) {
                obj['StatusAttributeString'] = ApiClient.convertToType(data['StatusAttributeString'], 'String');
            }
            if (data.hasOwnProperty('SubTotal')) {
                obj['SubTotal'] = ApiClient.convertToType(data['SubTotal'], 'Number');
            }
            if (data.hasOwnProperty('Total')) {
                obj['Total'] = ApiClient.convertToType(data['Total'], 'Number');
            }
            if (data.hasOwnProperty('TotalDiscount')) {
                obj['TotalDiscount'] = ApiClient.convertToType(data['TotalDiscount'], 'Number');
            }
            if (data.hasOwnProperty('TotalTax')) {
                obj['TotalTax'] = ApiClient.convertToType(data['TotalTax'], 'Number');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('Url')) {
                obj['Url'] = ApiClient.convertToType(data['Url'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
            if (data.hasOwnProperty('Warnings')) {
                obj['Warnings'] = ApiClient.convertToType(data['Warnings'], [ValidationError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Invoice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Invoice</code>.
     */
    static validateJSON(data) {
        if (data['Attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Attachments'])) {
                throw new Error("Expected the field `Attachments` to be an array in the JSON data but got " + data['Attachments']);
            }
            // validate the optional field `Attachments` (array)
            for (const item of data['Attachments']) {
                Attachment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['BrandingThemeID'] && !(typeof data['BrandingThemeID'] === 'string' || data['BrandingThemeID'] instanceof String)) {
            throw new Error("Expected the field `BrandingThemeID` to be a primitive type in the JSON string but got " + data['BrandingThemeID']);
        }
        // validate the optional field `Contact`
        if (data['Contact']) { // data not null
          Contact.validateJSON(data['Contact']);
        }
        if (data['CreditNotes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['CreditNotes'])) {
                throw new Error("Expected the field `CreditNotes` to be an array in the JSON data but got " + data['CreditNotes']);
            }
            // validate the optional field `CreditNotes` (array)
            for (const item of data['CreditNotes']) {
                CreditNote.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['CurrencyCode'] && !(typeof data['CurrencyCode'] === 'string' || data['CurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got " + data['CurrencyCode']);
        }
        // ensure the json data is a string
        if (data['Date'] && !(typeof data['Date'] === 'string' || data['Date'] instanceof String)) {
            throw new Error("Expected the field `Date` to be a primitive type in the JSON string but got " + data['Date']);
        }
        // ensure the json data is a string
        if (data['DueDate'] && !(typeof data['DueDate'] === 'string' || data['DueDate'] instanceof String)) {
            throw new Error("Expected the field `DueDate` to be a primitive type in the JSON string but got " + data['DueDate']);
        }
        // ensure the json data is a string
        if (data['ExpectedPaymentDate'] && !(typeof data['ExpectedPaymentDate'] === 'string' || data['ExpectedPaymentDate'] instanceof String)) {
            throw new Error("Expected the field `ExpectedPaymentDate` to be a primitive type in the JSON string but got " + data['ExpectedPaymentDate']);
        }
        // ensure the json data is a string
        if (data['FullyPaidOnDate'] && !(typeof data['FullyPaidOnDate'] === 'string' || data['FullyPaidOnDate'] instanceof String)) {
            throw new Error("Expected the field `FullyPaidOnDate` to be a primitive type in the JSON string but got " + data['FullyPaidOnDate']);
        }
        // ensure the json data is a string
        if (data['InvoiceID'] && !(typeof data['InvoiceID'] === 'string' || data['InvoiceID'] instanceof String)) {
            throw new Error("Expected the field `InvoiceID` to be a primitive type in the JSON string but got " + data['InvoiceID']);
        }
        // ensure the json data is a string
        if (data['InvoiceNumber'] && !(typeof data['InvoiceNumber'] === 'string' || data['InvoiceNumber'] instanceof String)) {
            throw new Error("Expected the field `InvoiceNumber` to be a primitive type in the JSON string but got " + data['InvoiceNumber']);
        }
        // ensure the json data is a string
        if (data['LineAmountTypes'] && !(typeof data['LineAmountTypes'] === 'string' || data['LineAmountTypes'] instanceof String)) {
            throw new Error("Expected the field `LineAmountTypes` to be a primitive type in the JSON string but got " + data['LineAmountTypes']);
        }
        if (data['LineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LineItems'])) {
                throw new Error("Expected the field `LineItems` to be an array in the JSON data but got " + data['LineItems']);
            }
            // validate the optional field `LineItems` (array)
            for (const item of data['LineItems']) {
                LineItem.validateJSON(item);
            };
        }
        if (data['Overpayments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Overpayments'])) {
                throw new Error("Expected the field `Overpayments` to be an array in the JSON data but got " + data['Overpayments']);
            }
            // validate the optional field `Overpayments` (array)
            for (const item of data['Overpayments']) {
                Overpayment.validateJSON(item);
            };
        }
        if (data['Payments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Payments'])) {
                throw new Error("Expected the field `Payments` to be an array in the JSON data but got " + data['Payments']);
            }
            // validate the optional field `Payments` (array)
            for (const item of data['Payments']) {
                Payment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['PlannedPaymentDate'] && !(typeof data['PlannedPaymentDate'] === 'string' || data['PlannedPaymentDate'] instanceof String)) {
            throw new Error("Expected the field `PlannedPaymentDate` to be a primitive type in the JSON string but got " + data['PlannedPaymentDate']);
        }
        if (data['Prepayments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Prepayments'])) {
                throw new Error("Expected the field `Prepayments` to be an array in the JSON data but got " + data['Prepayments']);
            }
            // validate the optional field `Prepayments` (array)
            for (const item of data['Prepayments']) {
                Prepayment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Reference'] && !(typeof data['Reference'] === 'string' || data['Reference'] instanceof String)) {
            throw new Error("Expected the field `Reference` to be a primitive type in the JSON string but got " + data['Reference']);
        }
        // ensure the json data is a string
        if (data['RepeatingInvoiceID'] && !(typeof data['RepeatingInvoiceID'] === 'string' || data['RepeatingInvoiceID'] instanceof String)) {
            throw new Error("Expected the field `RepeatingInvoiceID` to be a primitive type in the JSON string but got " + data['RepeatingInvoiceID']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['StatusAttributeString'] && !(typeof data['StatusAttributeString'] === 'string' || data['StatusAttributeString'] instanceof String)) {
            throw new Error("Expected the field `StatusAttributeString` to be a primitive type in the JSON string but got " + data['StatusAttributeString']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }
        // ensure the json data is a string
        if (data['Url'] && !(typeof data['Url'] === 'string' || data['Url'] instanceof String)) {
            throw new Error("Expected the field `Url` to be a primitive type in the JSON string but got " + data['Url']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }
        if (data['Warnings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Warnings'])) {
                throw new Error("Expected the field `Warnings` to be an array in the JSON data but got " + data['Warnings']);
            }
            // validate the optional field `Warnings` (array)
            for (const item of data['Warnings']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Sum of all credit notes, over-payments and pre-payments applied to invoice
 * @member {Number} AmountCredited
 */
Invoice.prototype['AmountCredited'] = undefined;

/**
 * Amount remaining to be paid on invoice
 * @member {Number} AmountDue
 */
Invoice.prototype['AmountDue'] = undefined;

/**
 * Sum of payments received for invoice
 * @member {Number} AmountPaid
 */
Invoice.prototype['AmountPaid'] = undefined;

/**
 * Displays array of attachments from the API
 * @member {Array.<module:model/Attachment>} Attachments
 */
Invoice.prototype['Attachments'] = undefined;

/**
 * See BrandingThemes
 * @member {String} BrandingThemeID
 */
Invoice.prototype['BrandingThemeID'] = undefined;

/**
 * CIS deduction for UK contractors
 * @member {Number} CISDeduction
 */
Invoice.prototype['CISDeduction'] = undefined;

/**
 * CIS Deduction rate for the organisation
 * @member {Number} CISRate
 */
Invoice.prototype['CISRate'] = undefined;

/**
 * @member {module:model/Contact} Contact
 */
Invoice.prototype['Contact'] = undefined;

/**
 * Details of credit notes that have been applied to an invoice
 * @member {Array.<module:model/CreditNote>} CreditNotes
 */
Invoice.prototype['CreditNotes'] = undefined;

/**
 * @member {module:model/CurrencyCode} CurrencyCode
 */
Invoice.prototype['CurrencyCode'] = undefined;

/**
 * The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used. (max length = [18].[6])
 * @member {Number} CurrencyRate
 */
Invoice.prototype['CurrencyRate'] = undefined;

/**
 * Date invoice was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation
 * @member {String} Date
 */
Invoice.prototype['Date'] = undefined;

/**
 * Date invoice is due – YYYY-MM-DD
 * @member {String} DueDate
 */
Invoice.prototype['DueDate'] = undefined;

/**
 * Shown on sales invoices (Accounts Receivable) when this has been set
 * @member {String} ExpectedPaymentDate
 */
Invoice.prototype['ExpectedPaymentDate'] = undefined;

/**
 * The date the invoice was fully paid. Only returned on fully paid invoices
 * @member {String} FullyPaidOnDate
 */
Invoice.prototype['FullyPaidOnDate'] = undefined;

/**
 * boolean to indicate if an invoice has an attachment
 * @member {Boolean} HasAttachments
 * @default false
 */
Invoice.prototype['HasAttachments'] = false;

/**
 * A boolean to indicate if a invoice has an validation errors
 * @member {Boolean} HasErrors
 * @default false
 */
Invoice.prototype['HasErrors'] = false;

/**
 * Xero generated unique identifier for invoice
 * @member {String} InvoiceID
 */
Invoice.prototype['InvoiceID'] = undefined;

/**
 * ACCREC – Unique alpha numeric code identifying invoice (when missing will auto-generate from your Organisation Invoice Settings) (max length = 255)
 * @member {String} InvoiceNumber
 */
Invoice.prototype['InvoiceNumber'] = undefined;

/**
 * boolean to indicate if an invoice has a discount
 * @member {Boolean} IsDiscounted
 */
Invoice.prototype['IsDiscounted'] = undefined;

/**
 * @member {module:model/LineAmountTypes} LineAmountTypes
 */
Invoice.prototype['LineAmountTypes'] = undefined;

/**
 * See LineItems
 * @member {Array.<module:model/LineItem>} LineItems
 */
Invoice.prototype['LineItems'] = undefined;

/**
 * See Overpayments
 * @member {Array.<module:model/Overpayment>} Overpayments
 */
Invoice.prototype['Overpayments'] = undefined;

/**
 * See Payments
 * @member {Array.<module:model/Payment>} Payments
 */
Invoice.prototype['Payments'] = undefined;

/**
 * Shown on bills (Accounts Payable) when this has been set
 * @member {String} PlannedPaymentDate
 */
Invoice.prototype['PlannedPaymentDate'] = undefined;

/**
 * See Prepayments
 * @member {Array.<module:model/Prepayment>} Prepayments
 */
Invoice.prototype['Prepayments'] = undefined;

/**
 * ACCREC only – additional reference number
 * @member {String} Reference
 */
Invoice.prototype['Reference'] = undefined;

/**
 * Xero generated unique identifier for repeating invoices
 * @member {String} RepeatingInvoiceID
 */
Invoice.prototype['RepeatingInvoiceID'] = undefined;

/**
 * Boolean to set whether the invoice in the Xero app should be marked as “sent”. This can be set only on invoices that have been approved
 * @member {Boolean} SentToContact
 */
Invoice.prototype['SentToContact'] = undefined;

/**
 * See Invoice Status Codes
 * @member {module:model/Invoice.StatusEnum} Status
 */
Invoice.prototype['Status'] = undefined;

/**
 * A string to indicate if a invoice status
 * @member {String} StatusAttributeString
 */
Invoice.prototype['StatusAttributeString'] = undefined;

/**
 * Total of invoice excluding taxes
 * @member {Number} SubTotal
 */
Invoice.prototype['SubTotal'] = undefined;

/**
 * Total of Invoice tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts
 * @member {Number} Total
 */
Invoice.prototype['Total'] = undefined;

/**
 * Total of discounts applied on the invoice line items
 * @member {Number} TotalDiscount
 */
Invoice.prototype['TotalDiscount'] = undefined;

/**
 * Total tax on invoice
 * @member {Number} TotalTax
 */
Invoice.prototype['TotalTax'] = undefined;

/**
 * See Invoice Types
 * @member {module:model/Invoice.TypeEnum} Type
 */
Invoice.prototype['Type'] = undefined;

/**
 * Last modified date UTC format
 * @member {String} UpdatedDateUTC
 */
Invoice.prototype['UpdatedDateUTC'] = undefined;

/**
 * URL link to a source document – shown as “Go to [appName]” in the Xero app
 * @member {String} Url
 */
Invoice.prototype['Url'] = undefined;

/**
 * Displays array of validation error messages from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
Invoice.prototype['ValidationErrors'] = undefined;

/**
 * Displays array of warning messages from the API
 * @member {Array.<module:model/ValidationError>} Warnings
 */
Invoice.prototype['Warnings'] = undefined;





/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
Invoice['StatusEnum'] = {

    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",

    /**
     * value: "SUBMITTED"
     * @const
     */
    "SUBMITTED": "SUBMITTED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED",

    /**
     * value: "AUTHORISED"
     * @const
     */
    "AUTHORISED": "AUTHORISED",

    /**
     * value: "PAID"
     * @const
     */
    "PAID": "PAID",

    /**
     * value: "VOIDED"
     * @const
     */
    "VOIDED": "VOIDED"
};


/**
 * Allowed values for the <code>Type</code> property.
 * @enum {String}
 * @readonly
 */
Invoice['TypeEnum'] = {

    /**
     * value: "ACCPAY"
     * @const
     */
    "ACCPAY": "ACCPAY",

    /**
     * value: "ACCPAYCREDIT"
     * @const
     */
    "ACCPAYCREDIT": "ACCPAYCREDIT",

    /**
     * value: "APOVERPAYMENT"
     * @const
     */
    "APOVERPAYMENT": "APOVERPAYMENT",

    /**
     * value: "APPREPAYMENT"
     * @const
     */
    "APPREPAYMENT": "APPREPAYMENT",

    /**
     * value: "ACCREC"
     * @const
     */
    "ACCREC": "ACCREC",

    /**
     * value: "ACCRECCREDIT"
     * @const
     */
    "ACCRECCREDIT": "ACCRECCREDIT",

    /**
     * value: "AROVERPAYMENT"
     * @const
     */
    "AROVERPAYMENT": "AROVERPAYMENT",

    /**
     * value: "ARPREPAYMENT"
     * @const
     */
    "ARPREPAYMENT": "ARPREPAYMENT"
};



export default Invoice;

