/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Attachment model module.
 * @module model/Attachment
 * @version 2.9.4
 */
class Attachment {
    /**
     * Constructs a new <code>Attachment</code>.
     * @alias module:model/Attachment
     */
    constructor() { 
        
        Attachment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attachment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attachment} obj Optional instance to populate.
     * @return {module:model/Attachment} The populated <code>Attachment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attachment();

            if (data.hasOwnProperty('AttachmentID')) {
                obj['AttachmentID'] = ApiClient.convertToType(data['AttachmentID'], 'String');
            }
            if (data.hasOwnProperty('ContentLength')) {
                obj['ContentLength'] = ApiClient.convertToType(data['ContentLength'], 'Number');
            }
            if (data.hasOwnProperty('FileName')) {
                obj['FileName'] = ApiClient.convertToType(data['FileName'], 'String');
            }
            if (data.hasOwnProperty('IncludeOnline')) {
                obj['IncludeOnline'] = ApiClient.convertToType(data['IncludeOnline'], 'Boolean');
            }
            if (data.hasOwnProperty('MimeType')) {
                obj['MimeType'] = ApiClient.convertToType(data['MimeType'], 'String');
            }
            if (data.hasOwnProperty('Url')) {
                obj['Url'] = ApiClient.convertToType(data['Url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attachment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attachment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AttachmentID'] && !(typeof data['AttachmentID'] === 'string' || data['AttachmentID'] instanceof String)) {
            throw new Error("Expected the field `AttachmentID` to be a primitive type in the JSON string but got " + data['AttachmentID']);
        }
        // ensure the json data is a string
        if (data['FileName'] && !(typeof data['FileName'] === 'string' || data['FileName'] instanceof String)) {
            throw new Error("Expected the field `FileName` to be a primitive type in the JSON string but got " + data['FileName']);
        }
        // ensure the json data is a string
        if (data['MimeType'] && !(typeof data['MimeType'] === 'string' || data['MimeType'] instanceof String)) {
            throw new Error("Expected the field `MimeType` to be a primitive type in the JSON string but got " + data['MimeType']);
        }
        // ensure the json data is a string
        if (data['Url'] && !(typeof data['Url'] === 'string' || data['Url'] instanceof String)) {
            throw new Error("Expected the field `Url` to be a primitive type in the JSON string but got " + data['Url']);
        }

        return true;
    }


}



/**
 * Unique ID for the file
 * @member {String} AttachmentID
 */
Attachment.prototype['AttachmentID'] = undefined;

/**
 * Length of the file content
 * @member {Number} ContentLength
 */
Attachment.prototype['ContentLength'] = undefined;

/**
 * Name of the file
 * @member {String} FileName
 */
Attachment.prototype['FileName'] = undefined;

/**
 * Include the file with the online invoice
 * @member {Boolean} IncludeOnline
 */
Attachment.prototype['IncludeOnline'] = undefined;

/**
 * Type of file
 * @member {String} MimeType
 */
Attachment.prototype['MimeType'] = undefined;

/**
 * URL to the file on xero.com
 * @member {String} Url
 */
Attachment.prototype['Url'] = undefined;






export default Attachment;

