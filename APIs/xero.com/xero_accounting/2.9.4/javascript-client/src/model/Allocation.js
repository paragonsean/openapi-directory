/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreditNote from './CreditNote';
import Invoice from './Invoice';
import Overpayment from './Overpayment';
import Prepayment from './Prepayment';
import ValidationError from './ValidationError';

/**
 * The Allocation model module.
 * @module model/Allocation
 * @version 2.9.4
 */
class Allocation {
    /**
     * Constructs a new <code>Allocation</code>.
     * @alias module:model/Allocation
     * @param amount {Number} the amount being applied to the invoice
     * @param date {String} the date the allocation is applied YYYY-MM-DD.
     * @param invoice {module:model/Invoice} 
     */
    constructor(amount, date, invoice) { 
        
        Allocation.initialize(this, amount, date, invoice);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, date, invoice) { 
        obj['Amount'] = amount;
        obj['Date'] = date;
        obj['Invoice'] = invoice;
    }

    /**
     * Constructs a <code>Allocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Allocation} obj Optional instance to populate.
     * @return {module:model/Allocation} The populated <code>Allocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Allocation();

            if (data.hasOwnProperty('Amount')) {
                obj['Amount'] = ApiClient.convertToType(data['Amount'], 'Number');
            }
            if (data.hasOwnProperty('CreditNote')) {
                obj['CreditNote'] = CreditNote.constructFromObject(data['CreditNote']);
            }
            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'String');
            }
            if (data.hasOwnProperty('Invoice')) {
                obj['Invoice'] = Invoice.constructFromObject(data['Invoice']);
            }
            if (data.hasOwnProperty('Overpayment')) {
                obj['Overpayment'] = Overpayment.constructFromObject(data['Overpayment']);
            }
            if (data.hasOwnProperty('Prepayment')) {
                obj['Prepayment'] = Prepayment.constructFromObject(data['Prepayment']);
            }
            if (data.hasOwnProperty('StatusAttributeString')) {
                obj['StatusAttributeString'] = ApiClient.convertToType(data['StatusAttributeString'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Allocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Allocation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Allocation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `CreditNote`
        if (data['CreditNote']) { // data not null
          CreditNote.validateJSON(data['CreditNote']);
        }
        // ensure the json data is a string
        if (data['Date'] && !(typeof data['Date'] === 'string' || data['Date'] instanceof String)) {
            throw new Error("Expected the field `Date` to be a primitive type in the JSON string but got " + data['Date']);
        }
        // validate the optional field `Invoice`
        if (data['Invoice']) { // data not null
          Invoice.validateJSON(data['Invoice']);
        }
        // validate the optional field `Overpayment`
        if (data['Overpayment']) { // data not null
          Overpayment.validateJSON(data['Overpayment']);
        }
        // validate the optional field `Prepayment`
        if (data['Prepayment']) { // data not null
          Prepayment.validateJSON(data['Prepayment']);
        }
        // ensure the json data is a string
        if (data['StatusAttributeString'] && !(typeof data['StatusAttributeString'] === 'string' || data['StatusAttributeString'] instanceof String)) {
            throw new Error("Expected the field `StatusAttributeString` to be a primitive type in the JSON string but got " + data['StatusAttributeString']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}

Allocation.RequiredProperties = ["Amount", "Date", "Invoice"];

/**
 * the amount being applied to the invoice
 * @member {Number} Amount
 */
Allocation.prototype['Amount'] = undefined;

/**
 * @member {module:model/CreditNote} CreditNote
 */
Allocation.prototype['CreditNote'] = undefined;

/**
 * the date the allocation is applied YYYY-MM-DD.
 * @member {String} Date
 */
Allocation.prototype['Date'] = undefined;

/**
 * @member {module:model/Invoice} Invoice
 */
Allocation.prototype['Invoice'] = undefined;

/**
 * @member {module:model/Overpayment} Overpayment
 */
Allocation.prototype['Overpayment'] = undefined;

/**
 * @member {module:model/Prepayment} Prepayment
 */
Allocation.prototype['Prepayment'] = undefined;

/**
 * A string to indicate if a invoice status
 * @member {String} StatusAttributeString
 */
Allocation.prototype['StatusAttributeString'] = undefined;

/**
 * Displays array of validation error messages from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
Allocation.prototype['ValidationErrors'] = undefined;






export default Allocation;

