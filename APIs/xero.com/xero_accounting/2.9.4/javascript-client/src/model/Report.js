/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TenNinetyNineContact from './TenNinetyNineContact';

/**
 * The Report model module.
 * @module model/Report
 * @version 2.9.4
 */
class Report {
    /**
     * Constructs a new <code>Report</code>.
     * @alias module:model/Report
     */
    constructor() { 
        
        Report.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Report</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Report} obj Optional instance to populate.
     * @return {module:model/Report} The populated <code>Report</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Report();

            if (data.hasOwnProperty('Contacts')) {
                obj['Contacts'] = ApiClient.convertToType(data['Contacts'], [TenNinetyNineContact]);
            }
            if (data.hasOwnProperty('ReportDate')) {
                obj['ReportDate'] = ApiClient.convertToType(data['ReportDate'], 'String');
            }
            if (data.hasOwnProperty('ReportID')) {
                obj['ReportID'] = ApiClient.convertToType(data['ReportID'], 'String');
            }
            if (data.hasOwnProperty('ReportName')) {
                obj['ReportName'] = ApiClient.convertToType(data['ReportName'], 'String');
            }
            if (data.hasOwnProperty('ReportTitle')) {
                obj['ReportTitle'] = ApiClient.convertToType(data['ReportTitle'], 'String');
            }
            if (data.hasOwnProperty('ReportType')) {
                obj['ReportType'] = ApiClient.convertToType(data['ReportType'], 'String');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Report</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Report</code>.
     */
    static validateJSON(data) {
        if (data['Contacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Contacts'])) {
                throw new Error("Expected the field `Contacts` to be an array in the JSON data but got " + data['Contacts']);
            }
            // validate the optional field `Contacts` (array)
            for (const item of data['Contacts']) {
                TenNinetyNineContact.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ReportDate'] && !(typeof data['ReportDate'] === 'string' || data['ReportDate'] instanceof String)) {
            throw new Error("Expected the field `ReportDate` to be a primitive type in the JSON string but got " + data['ReportDate']);
        }
        // ensure the json data is a string
        if (data['ReportID'] && !(typeof data['ReportID'] === 'string' || data['ReportID'] instanceof String)) {
            throw new Error("Expected the field `ReportID` to be a primitive type in the JSON string but got " + data['ReportID']);
        }
        // ensure the json data is a string
        if (data['ReportName'] && !(typeof data['ReportName'] === 'string' || data['ReportName'] instanceof String)) {
            throw new Error("Expected the field `ReportName` to be a primitive type in the JSON string but got " + data['ReportName']);
        }
        // ensure the json data is a string
        if (data['ReportTitle'] && !(typeof data['ReportTitle'] === 'string' || data['ReportTitle'] instanceof String)) {
            throw new Error("Expected the field `ReportTitle` to be a primitive type in the JSON string but got " + data['ReportTitle']);
        }
        // ensure the json data is a string
        if (data['ReportType'] && !(typeof data['ReportType'] === 'string' || data['ReportType'] instanceof String)) {
            throw new Error("Expected the field `ReportType` to be a primitive type in the JSON string but got " + data['ReportType']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/TenNinetyNineContact>} Contacts
 */
Report.prototype['Contacts'] = undefined;

/**
 * Date of report
 * @member {String} ReportDate
 */
Report.prototype['ReportDate'] = undefined;

/**
 * See Prepayment Types
 * @member {String} ReportID
 */
Report.prototype['ReportID'] = undefined;

/**
 * See Prepayment Types
 * @member {String} ReportName
 */
Report.prototype['ReportName'] = undefined;

/**
 * See Prepayment Types
 * @member {String} ReportTitle
 */
Report.prototype['ReportTitle'] = undefined;

/**
 * See Prepayment Types
 * @member {module:model/Report.ReportTypeEnum} ReportType
 */
Report.prototype['ReportType'] = undefined;

/**
 * Updated Date
 * @member {String} UpdatedDateUTC
 */
Report.prototype['UpdatedDateUTC'] = undefined;





/**
 * Allowed values for the <code>ReportType</code> property.
 * @enum {String}
 * @readonly
 */
Report['ReportTypeEnum'] = {

    /**
     * value: "AgedPayablesByContact"
     * @const
     */
    "AgedPayablesByContact": "AgedPayablesByContact"
};



export default Report;

