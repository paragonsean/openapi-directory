/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LineItemTracking from './LineItemTracking';

/**
 * The LineItem model module.
 * @module model/LineItem
 * @version 2.9.4
 */
class LineItem {
    /**
     * Constructs a new <code>LineItem</code>.
     * @alias module:model/LineItem
     */
    constructor() { 
        
        LineItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LineItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LineItem} obj Optional instance to populate.
     * @return {module:model/LineItem} The populated <code>LineItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LineItem();

            if (data.hasOwnProperty('AccountCode')) {
                obj['AccountCode'] = ApiClient.convertToType(data['AccountCode'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('DiscountAmount')) {
                obj['DiscountAmount'] = ApiClient.convertToType(data['DiscountAmount'], 'Number');
            }
            if (data.hasOwnProperty('DiscountRate')) {
                obj['DiscountRate'] = ApiClient.convertToType(data['DiscountRate'], 'Number');
            }
            if (data.hasOwnProperty('ItemCode')) {
                obj['ItemCode'] = ApiClient.convertToType(data['ItemCode'], 'String');
            }
            if (data.hasOwnProperty('LineAmount')) {
                obj['LineAmount'] = ApiClient.convertToType(data['LineAmount'], 'Number');
            }
            if (data.hasOwnProperty('LineItemID')) {
                obj['LineItemID'] = ApiClient.convertToType(data['LineItemID'], 'String');
            }
            if (data.hasOwnProperty('Quantity')) {
                obj['Quantity'] = ApiClient.convertToType(data['Quantity'], 'Number');
            }
            if (data.hasOwnProperty('RepeatingInvoiceID')) {
                obj['RepeatingInvoiceID'] = ApiClient.convertToType(data['RepeatingInvoiceID'], 'String');
            }
            if (data.hasOwnProperty('TaxAmount')) {
                obj['TaxAmount'] = ApiClient.convertToType(data['TaxAmount'], 'Number');
            }
            if (data.hasOwnProperty('TaxType')) {
                obj['TaxType'] = ApiClient.convertToType(data['TaxType'], 'String');
            }
            if (data.hasOwnProperty('Tracking')) {
                obj['Tracking'] = ApiClient.convertToType(data['Tracking'], [LineItemTracking]);
            }
            if (data.hasOwnProperty('UnitAmount')) {
                obj['UnitAmount'] = ApiClient.convertToType(data['UnitAmount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LineItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LineItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AccountCode'] && !(typeof data['AccountCode'] === 'string' || data['AccountCode'] instanceof String)) {
            throw new Error("Expected the field `AccountCode` to be a primitive type in the JSON string but got " + data['AccountCode']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['ItemCode'] && !(typeof data['ItemCode'] === 'string' || data['ItemCode'] instanceof String)) {
            throw new Error("Expected the field `ItemCode` to be a primitive type in the JSON string but got " + data['ItemCode']);
        }
        // ensure the json data is a string
        if (data['LineItemID'] && !(typeof data['LineItemID'] === 'string' || data['LineItemID'] instanceof String)) {
            throw new Error("Expected the field `LineItemID` to be a primitive type in the JSON string but got " + data['LineItemID']);
        }
        // ensure the json data is a string
        if (data['RepeatingInvoiceID'] && !(typeof data['RepeatingInvoiceID'] === 'string' || data['RepeatingInvoiceID'] instanceof String)) {
            throw new Error("Expected the field `RepeatingInvoiceID` to be a primitive type in the JSON string but got " + data['RepeatingInvoiceID']);
        }
        // ensure the json data is a string
        if (data['TaxType'] && !(typeof data['TaxType'] === 'string' || data['TaxType'] instanceof String)) {
            throw new Error("Expected the field `TaxType` to be a primitive type in the JSON string but got " + data['TaxType']);
        }
        if (data['Tracking']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Tracking'])) {
                throw new Error("Expected the field `Tracking` to be an array in the JSON data but got " + data['Tracking']);
            }
            // validate the optional field `Tracking` (array)
            for (const item of data['Tracking']) {
                LineItemTracking.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * See Accounts
 * @member {String} AccountCode
 */
LineItem.prototype['AccountCode'] = undefined;

/**
 * Description needs to be at least 1 char long. A line item with just a description (i.e no unit amount or quantity) can be created by specifying just a <Description> element that contains at least 1 character
 * @member {String} Description
 */
LineItem.prototype['Description'] = undefined;

/**
 * Discount amount being applied to a line item. Only supported on ACCREC invoices - ACCPAY invoices and credit notes in Xero do not support discounts.
 * @member {Number} DiscountAmount
 */
LineItem.prototype['DiscountAmount'] = undefined;

/**
 * Percentage discount being applied to a line item (only supported on  ACCREC invoices – ACC PAY invoices and credit notes in Xero do not support discounts
 * @member {Number} DiscountRate
 */
LineItem.prototype['DiscountRate'] = undefined;

/**
 * See Items
 * @member {String} ItemCode
 */
LineItem.prototype['ItemCode'] = undefined;

/**
 * If you wish to omit either of the <Quantity> or <UnitAmount> you can provide a LineAmount and Xero will calculate the missing amount for you. The line amount reflects the discounted price if a DiscountRate has been used . i.e LineAmount = Quantity * Unit Amount * ((100 – DiscountRate)/100)
 * @member {Number} LineAmount
 */
LineItem.prototype['LineAmount'] = undefined;

/**
 * LineItem unique ID
 * @member {String} LineItemID
 */
LineItem.prototype['LineItemID'] = undefined;

/**
 * LineItem Quantity
 * @member {Number} Quantity
 */
LineItem.prototype['Quantity'] = undefined;

/**
 * The Xero identifier for a Repeating Invoice
 * @member {String} RepeatingInvoiceID
 */
LineItem.prototype['RepeatingInvoiceID'] = undefined;

/**
 * The tax amount is auto calculated as a percentage of the line amount (see below) based on the tax rate. This value can be overriden if the calculated <TaxAmount> is not correct.
 * @member {Number} TaxAmount
 */
LineItem.prototype['TaxAmount'] = undefined;

/**
 * The tax type from TaxRates
 * @member {String} TaxType
 */
LineItem.prototype['TaxType'] = undefined;

/**
 * Optional Tracking Category – see Tracking.  Any LineItem can have a  maximum of 2 <TrackingCategory> elements.
 * @member {Array.<module:model/LineItemTracking>} Tracking
 */
LineItem.prototype['Tracking'] = undefined;

/**
 * LineItem Unit Amount
 * @member {Number} UnitAmount
 */
LineItem.prototype['UnitAmount'] = undefined;






export default LineItem;

