/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JournalLine from './JournalLine';

/**
 * The Journal model module.
 * @module model/Journal
 * @version 2.9.4
 */
class Journal {
    /**
     * Constructs a new <code>Journal</code>.
     * @alias module:model/Journal
     */
    constructor() { 
        
        Journal.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Journal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Journal} obj Optional instance to populate.
     * @return {module:model/Journal} The populated <code>Journal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Journal();

            if (data.hasOwnProperty('CreatedDateUTC')) {
                obj['CreatedDateUTC'] = ApiClient.convertToType(data['CreatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('JournalDate')) {
                obj['JournalDate'] = ApiClient.convertToType(data['JournalDate'], 'String');
            }
            if (data.hasOwnProperty('JournalID')) {
                obj['JournalID'] = ApiClient.convertToType(data['JournalID'], 'String');
            }
            if (data.hasOwnProperty('JournalLines')) {
                obj['JournalLines'] = ApiClient.convertToType(data['JournalLines'], [JournalLine]);
            }
            if (data.hasOwnProperty('JournalNumber')) {
                obj['JournalNumber'] = ApiClient.convertToType(data['JournalNumber'], 'Number');
            }
            if (data.hasOwnProperty('Reference')) {
                obj['Reference'] = ApiClient.convertToType(data['Reference'], 'String');
            }
            if (data.hasOwnProperty('SourceID')) {
                obj['SourceID'] = ApiClient.convertToType(data['SourceID'], 'String');
            }
            if (data.hasOwnProperty('SourceType')) {
                obj['SourceType'] = ApiClient.convertToType(data['SourceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Journal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Journal</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CreatedDateUTC'] && !(typeof data['CreatedDateUTC'] === 'string' || data['CreatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `CreatedDateUTC` to be a primitive type in the JSON string but got " + data['CreatedDateUTC']);
        }
        // ensure the json data is a string
        if (data['JournalDate'] && !(typeof data['JournalDate'] === 'string' || data['JournalDate'] instanceof String)) {
            throw new Error("Expected the field `JournalDate` to be a primitive type in the JSON string but got " + data['JournalDate']);
        }
        // ensure the json data is a string
        if (data['JournalID'] && !(typeof data['JournalID'] === 'string' || data['JournalID'] instanceof String)) {
            throw new Error("Expected the field `JournalID` to be a primitive type in the JSON string but got " + data['JournalID']);
        }
        if (data['JournalLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['JournalLines'])) {
                throw new Error("Expected the field `JournalLines` to be an array in the JSON data but got " + data['JournalLines']);
            }
            // validate the optional field `JournalLines` (array)
            for (const item of data['JournalLines']) {
                JournalLine.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Reference'] && !(typeof data['Reference'] === 'string' || data['Reference'] instanceof String)) {
            throw new Error("Expected the field `Reference` to be a primitive type in the JSON string but got " + data['Reference']);
        }
        // ensure the json data is a string
        if (data['SourceID'] && !(typeof data['SourceID'] === 'string' || data['SourceID'] instanceof String)) {
            throw new Error("Expected the field `SourceID` to be a primitive type in the JSON string but got " + data['SourceID']);
        }
        // ensure the json data is a string
        if (data['SourceType'] && !(typeof data['SourceType'] === 'string' || data['SourceType'] instanceof String)) {
            throw new Error("Expected the field `SourceType` to be a primitive type in the JSON string but got " + data['SourceType']);
        }

        return true;
    }


}



/**
 * Created date UTC format
 * @member {String} CreatedDateUTC
 */
Journal.prototype['CreatedDateUTC'] = undefined;

/**
 * Date the journal was posted
 * @member {String} JournalDate
 */
Journal.prototype['JournalDate'] = undefined;

/**
 * Xero identifier
 * @member {String} JournalID
 */
Journal.prototype['JournalID'] = undefined;

/**
 * See JournalLines
 * @member {Array.<module:model/JournalLine>} JournalLines
 */
Journal.prototype['JournalLines'] = undefined;

/**
 * Xero generated journal number
 * @member {Number} JournalNumber
 */
Journal.prototype['JournalNumber'] = undefined;

/**
 * reference field for additional indetifying information
 * @member {String} Reference
 */
Journal.prototype['Reference'] = undefined;

/**
 * The identifier for the source transaction (e.g. InvoiceID)
 * @member {String} SourceID
 */
Journal.prototype['SourceID'] = undefined;

/**
 * The journal source type. The type of transaction that created the journal
 * @member {module:model/Journal.SourceTypeEnum} SourceType
 */
Journal.prototype['SourceType'] = undefined;





/**
 * Allowed values for the <code>SourceType</code> property.
 * @enum {String}
 * @readonly
 */
Journal['SourceTypeEnum'] = {

    /**
     * value: "ACCREC"
     * @const
     */
    "ACCREC": "ACCREC",

    /**
     * value: "ACCPAY"
     * @const
     */
    "ACCPAY": "ACCPAY",

    /**
     * value: "ACCRECCREDIT"
     * @const
     */
    "ACCRECCREDIT": "ACCRECCREDIT",

    /**
     * value: "ACCPAYCREDIT"
     * @const
     */
    "ACCPAYCREDIT": "ACCPAYCREDIT",

    /**
     * value: "ACCRECPAYMENT"
     * @const
     */
    "ACCRECPAYMENT": "ACCRECPAYMENT",

    /**
     * value: "ACCPAYPAYMENT"
     * @const
     */
    "ACCPAYPAYMENT": "ACCPAYPAYMENT",

    /**
     * value: "ARCREDITPAYMENT"
     * @const
     */
    "ARCREDITPAYMENT": "ARCREDITPAYMENT",

    /**
     * value: "APCREDITPAYMENT"
     * @const
     */
    "APCREDITPAYMENT": "APCREDITPAYMENT",

    /**
     * value: "CASHREC"
     * @const
     */
    "CASHREC": "CASHREC",

    /**
     * value: "CASHPAID"
     * @const
     */
    "CASHPAID": "CASHPAID",

    /**
     * value: "TRANSFER"
     * @const
     */
    "TRANSFER": "TRANSFER",

    /**
     * value: "ARPREPAYMENT"
     * @const
     */
    "ARPREPAYMENT": "ARPREPAYMENT",

    /**
     * value: "APPREPAYMENT"
     * @const
     */
    "APPREPAYMENT": "APPREPAYMENT",

    /**
     * value: "AROVERPAYMENT"
     * @const
     */
    "AROVERPAYMENT": "AROVERPAYMENT",

    /**
     * value: "APOVERPAYMENT"
     * @const
     */
    "APOVERPAYMENT": "APOVERPAYMENT",

    /**
     * value: "EXPCLAIM"
     * @const
     */
    "EXPCLAIM": "EXPCLAIM",

    /**
     * value: "EXPPAYMENT"
     * @const
     */
    "EXPPAYMENT": "EXPPAYMENT",

    /**
     * value: "MANJOURNAL"
     * @const
     */
    "MANJOURNAL": "MANJOURNAL",

    /**
     * value: "PAYSLIP"
     * @const
     */
    "PAYSLIP": "PAYSLIP",

    /**
     * value: "WAGEPAYABLE"
     * @const
     */
    "WAGEPAYABLE": "WAGEPAYABLE",

    /**
     * value: "INTEGRATEDPAYROLLPE"
     * @const
     */
    "INTEGRATEDPAYROLLPE": "INTEGRATEDPAYROLLPE",

    /**
     * value: "INTEGRATEDPAYROLLPT"
     * @const
     */
    "INTEGRATEDPAYROLLPT": "INTEGRATEDPAYROLLPT",

    /**
     * value: "EXTERNALSPENDMONEY"
     * @const
     */
    "EXTERNALSPENDMONEY": "EXTERNALSPENDMONEY",

    /**
     * value: "INTEGRATEDPAYROLLPTPAYMENT"
     * @const
     */
    "INTEGRATEDPAYROLLPTPAYMENT": "INTEGRATEDPAYROLLPTPAYMENT",

    /**
     * value: "INTEGRATEDPAYROLLCN"
     * @const
     */
    "INTEGRATEDPAYROLLCN": "INTEGRATEDPAYROLLCN"
};



export default Journal;

