/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Contact from './Contact';

/**
 * The ContactGroup model module.
 * @module model/ContactGroup
 * @version 2.9.4
 */
class ContactGroup {
    /**
     * Constructs a new <code>ContactGroup</code>.
     * @alias module:model/ContactGroup
     */
    constructor() { 
        
        ContactGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContactGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactGroup} obj Optional instance to populate.
     * @return {module:model/ContactGroup} The populated <code>ContactGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactGroup();

            if (data.hasOwnProperty('ContactGroupID')) {
                obj['ContactGroupID'] = ApiClient.convertToType(data['ContactGroupID'], 'String');
            }
            if (data.hasOwnProperty('Contacts')) {
                obj['Contacts'] = ApiClient.convertToType(data['Contacts'], [Contact]);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactGroup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ContactGroupID'] && !(typeof data['ContactGroupID'] === 'string' || data['ContactGroupID'] instanceof String)) {
            throw new Error("Expected the field `ContactGroupID` to be a primitive type in the JSON string but got " + data['ContactGroupID']);
        }
        if (data['Contacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Contacts'])) {
                throw new Error("Expected the field `Contacts` to be an array in the JSON data but got " + data['Contacts']);
            }
            // validate the optional field `Contacts` (array)
            for (const item of data['Contacts']) {
                Contact.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }

        return true;
    }


}



/**
 * The Xero identifier for an contact group â€“ specified as a string following the endpoint name. e.g. /297c2dc5-cc47-4afd-8ec8-74990b8761e9
 * @member {String} ContactGroupID
 */
ContactGroup.prototype['ContactGroupID'] = undefined;

/**
 * The ContactID and Name of Contacts in a contact group. Returned on GETs when the ContactGroupID is supplied in the URL.
 * @member {Array.<module:model/Contact>} Contacts
 */
ContactGroup.prototype['Contacts'] = undefined;

/**
 * The Name of the contact group. Required when creating a new contact  group
 * @member {String} Name
 */
ContactGroup.prototype['Name'] = undefined;

/**
 * The Status of a contact group. To delete a contact group update the status to DELETED. Only contact groups with a status of ACTIVE are returned on GETs.
 * @member {module:model/ContactGroup.StatusEnum} Status
 */
ContactGroup.prototype['Status'] = undefined;





/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
ContactGroup['StatusEnum'] = {

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};



export default ContactGroup;

