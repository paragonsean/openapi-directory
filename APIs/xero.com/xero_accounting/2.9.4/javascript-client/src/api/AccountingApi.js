/**
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import Accounts from '../model/Accounts';
import Actions from '../model/Actions';
import Allocations from '../model/Allocations';
import Attachments from '../model/Attachments';
import BankTransactions from '../model/BankTransactions';
import BankTransfers from '../model/BankTransfers';
import BatchPayments from '../model/BatchPayments';
import BrandingThemes from '../model/BrandingThemes';
import CISOrgSettings from '../model/CISOrgSettings';
import CISSettings from '../model/CISSettings';
import ContactGroups from '../model/ContactGroups';
import Contacts from '../model/Contacts';
import CreditNotes from '../model/CreditNotes';
import Currencies from '../model/Currencies';
import Currency from '../model/Currency';
import Employees from '../model/Employees';
import Error from '../model/Error';
import ExpenseClaims from '../model/ExpenseClaims';
import HistoryRecords from '../model/HistoryRecords';
import ImportSummaryObject from '../model/ImportSummaryObject';
import InvoiceReminders from '../model/InvoiceReminders';
import Invoices from '../model/Invoices';
import Items from '../model/Items';
import Journals from '../model/Journals';
import LinkedTransaction from '../model/LinkedTransaction';
import LinkedTransactions from '../model/LinkedTransactions';
import ManualJournals from '../model/ManualJournals';
import OnlineInvoices from '../model/OnlineInvoices';
import Organisations from '../model/Organisations';
import Overpayments from '../model/Overpayments';
import Payment from '../model/Payment';
import PaymentDelete from '../model/PaymentDelete';
import PaymentService from '../model/PaymentService';
import PaymentServices from '../model/PaymentServices';
import Payments from '../model/Payments';
import Prepayments from '../model/Prepayments';
import PurchaseOrders from '../model/PurchaseOrders';
import Quotes from '../model/Quotes';
import Receipts from '../model/Receipts';
import RepeatingInvoices from '../model/RepeatingInvoices';
import ReportWithRows from '../model/ReportWithRows';
import Reports from '../model/Reports';
import RequestEmpty from '../model/RequestEmpty';
import Setup from '../model/Setup';
import TaxRates from '../model/TaxRates';
import TrackingCategories from '../model/TrackingCategories';
import TrackingCategory from '../model/TrackingCategory';
import TrackingOption from '../model/TrackingOption';
import TrackingOptions from '../model/TrackingOptions';
import Users from '../model/Users';

/**
* Accounting service.
* @module api/AccountingApi
* @version 2.9.4
*/
export default class AccountingApi {

    /**
    * Constructs a new AccountingApi. 
    * @alias module:api/AccountingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAccount operation.
     * @callback module:api/AccountingApi~createAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Accounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new chart of accounts
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/Account} account Account object in body of request
     * @param {module:api/AccountingApi~createAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Accounts}
     */
    createAccount(xeroTenantId, account, callback) {
      let postBody = account;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createAccount");
      }
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling createAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Accounts;
      return this.apiClient.callApi(
        '/Accounts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccountAttachmentByFileName operation.
     * @callback module:api/AccountingApi~createAccountAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an attachment on a specific account
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} accountID Unique identifier for Account object
     * @param {String} fileName Name of the attachment
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~createAccountAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    createAccountAttachmentByFileName(xeroTenantId, accountID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createAccountAttachmentByFileName");
      }
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling createAccountAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling createAccountAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAccountAttachmentByFileName");
      }

      let pathParams = {
        'AccountID': accountID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/Accounts/{AccountID}/Attachments/{FileName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBankTransactionAttachmentByFileName operation.
     * @callback module:api/AccountingApi~createBankTransactionAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an attachment for a specific bank transaction by filename
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} bankTransactionID Xero generated unique identifier for a bank transaction
     * @param {String} fileName The name of the file being attached
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~createBankTransactionAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    createBankTransactionAttachmentByFileName(xeroTenantId, bankTransactionID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createBankTransactionAttachmentByFileName");
      }
      // verify the required parameter 'bankTransactionID' is set
      if (bankTransactionID === undefined || bankTransactionID === null) {
        throw new Error("Missing the required parameter 'bankTransactionID' when calling createBankTransactionAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling createBankTransactionAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBankTransactionAttachmentByFileName");
      }

      let pathParams = {
        'BankTransactionID': bankTransactionID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/BankTransactions/{BankTransactionID}/Attachments/{FileName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBankTransactionHistoryRecord operation.
     * @callback module:api/AccountingApi~createBankTransactionHistoryRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a history record for a specific bank transactions
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} bankTransactionID Xero generated unique identifier for a bank transaction
     * @param {module:model/HistoryRecords} historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     * @param {module:api/AccountingApi~createBankTransactionHistoryRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    createBankTransactionHistoryRecord(xeroTenantId, bankTransactionID, historyRecords, callback) {
      let postBody = historyRecords;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createBankTransactionHistoryRecord");
      }
      // verify the required parameter 'bankTransactionID' is set
      if (bankTransactionID === undefined || bankTransactionID === null) {
        throw new Error("Missing the required parameter 'bankTransactionID' when calling createBankTransactionHistoryRecord");
      }
      // verify the required parameter 'historyRecords' is set
      if (historyRecords === undefined || historyRecords === null) {
        throw new Error("Missing the required parameter 'historyRecords' when calling createBankTransactionHistoryRecord");
      }

      let pathParams = {
        'BankTransactionID': bankTransactionID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/BankTransactions/{BankTransactionID}/History', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBankTransactions operation.
     * @callback module:api/AccountingApi~createBankTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankTransactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates one or more spent or received money transaction
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/BankTransactions} bankTransactions BankTransactions with an array of BankTransaction objects in body of request
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~createBankTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankTransactions}
     */
    createBankTransactions(xeroTenantId, bankTransactions, opts, callback) {
      opts = opts || {};
      let postBody = bankTransactions;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createBankTransactions");
      }
      // verify the required parameter 'bankTransactions' is set
      if (bankTransactions === undefined || bankTransactions === null) {
        throw new Error("Missing the required parameter 'bankTransactions' when calling createBankTransactions");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors'],
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BankTransactions;
      return this.apiClient.callApi(
        '/BankTransactions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBankTransfer operation.
     * @callback module:api/AccountingApi~createBankTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankTransfers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a bank transfer
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/BankTransfers} bankTransfers BankTransfers with array of BankTransfer objects in request body
     * @param {module:api/AccountingApi~createBankTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankTransfers}
     */
    createBankTransfer(xeroTenantId, bankTransfers, callback) {
      let postBody = bankTransfers;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createBankTransfer");
      }
      // verify the required parameter 'bankTransfers' is set
      if (bankTransfers === undefined || bankTransfers === null) {
        throw new Error("Missing the required parameter 'bankTransfers' when calling createBankTransfer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BankTransfers;
      return this.apiClient.callApi(
        '/BankTransfers', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBankTransferAttachmentByFileName operation.
     * @callback module:api/AccountingApi~createBankTransferAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} bankTransferID Xero generated unique identifier for a bank transfer
     * @param {String} fileName The name of the file being attached to a Bank Transfer
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~createBankTransferAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    createBankTransferAttachmentByFileName(xeroTenantId, bankTransferID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createBankTransferAttachmentByFileName");
      }
      // verify the required parameter 'bankTransferID' is set
      if (bankTransferID === undefined || bankTransferID === null) {
        throw new Error("Missing the required parameter 'bankTransferID' when calling createBankTransferAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling createBankTransferAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBankTransferAttachmentByFileName");
      }

      let pathParams = {
        'BankTransferID': bankTransferID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/BankTransfers/{BankTransferID}/Attachments/{FileName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBankTransferHistoryRecord operation.
     * @callback module:api/AccountingApi~createBankTransferHistoryRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a history record for a specific bank transfer
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} bankTransferID Xero generated unique identifier for a bank transfer
     * @param {module:model/HistoryRecords} historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     * @param {module:api/AccountingApi~createBankTransferHistoryRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    createBankTransferHistoryRecord(xeroTenantId, bankTransferID, historyRecords, callback) {
      let postBody = historyRecords;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createBankTransferHistoryRecord");
      }
      // verify the required parameter 'bankTransferID' is set
      if (bankTransferID === undefined || bankTransferID === null) {
        throw new Error("Missing the required parameter 'bankTransferID' when calling createBankTransferHistoryRecord");
      }
      // verify the required parameter 'historyRecords' is set
      if (historyRecords === undefined || historyRecords === null) {
        throw new Error("Missing the required parameter 'historyRecords' when calling createBankTransferHistoryRecord");
      }

      let pathParams = {
        'BankTransferID': bankTransferID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/BankTransfers/{BankTransferID}/History', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBatchPayment operation.
     * @callback module:api/AccountingApi~createBatchPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPayments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates one or many batch payments for invoices
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/BatchPayments} batchPayments BatchPayments with an array of Payments in body of request
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {module:api/AccountingApi~createBatchPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPayments}
     */
    createBatchPayment(xeroTenantId, batchPayments, opts, callback) {
      opts = opts || {};
      let postBody = batchPayments;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createBatchPayment");
      }
      // verify the required parameter 'batchPayments' is set
      if (batchPayments === undefined || batchPayments === null) {
        throw new Error("Missing the required parameter 'batchPayments' when calling createBatchPayment");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchPayments;
      return this.apiClient.callApi(
        '/BatchPayments', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBatchPaymentHistoryRecord operation.
     * @callback module:api/AccountingApi~createBatchPaymentHistoryRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a history record for a specific batch payment
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} batchPaymentID Unique identifier for BatchPayment
     * @param {module:model/HistoryRecords} historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     * @param {module:api/AccountingApi~createBatchPaymentHistoryRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    createBatchPaymentHistoryRecord(xeroTenantId, batchPaymentID, historyRecords, callback) {
      let postBody = historyRecords;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createBatchPaymentHistoryRecord");
      }
      // verify the required parameter 'batchPaymentID' is set
      if (batchPaymentID === undefined || batchPaymentID === null) {
        throw new Error("Missing the required parameter 'batchPaymentID' when calling createBatchPaymentHistoryRecord");
      }
      // verify the required parameter 'historyRecords' is set
      if (historyRecords === undefined || historyRecords === null) {
        throw new Error("Missing the required parameter 'historyRecords' when calling createBatchPaymentHistoryRecord");
      }

      let pathParams = {
        'BatchPaymentID': batchPaymentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/BatchPayments/{BatchPaymentID}/History', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBrandingThemePaymentServices operation.
     * @callback module:api/AccountingApi~createBrandingThemePaymentServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentServices} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new custom payment service for a specific branding theme
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} brandingThemeID Unique identifier for a Branding Theme
     * @param {module:model/PaymentService} paymentService PaymentService object in body of request
     * @param {module:api/AccountingApi~createBrandingThemePaymentServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentServices}
     */
    createBrandingThemePaymentServices(xeroTenantId, brandingThemeID, paymentService, callback) {
      let postBody = paymentService;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createBrandingThemePaymentServices");
      }
      // verify the required parameter 'brandingThemeID' is set
      if (brandingThemeID === undefined || brandingThemeID === null) {
        throw new Error("Missing the required parameter 'brandingThemeID' when calling createBrandingThemePaymentServices");
      }
      // verify the required parameter 'paymentService' is set
      if (paymentService === undefined || paymentService === null) {
        throw new Error("Missing the required parameter 'paymentService' when calling createBrandingThemePaymentServices");
      }

      let pathParams = {
        'BrandingThemeID': brandingThemeID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentServices;
      return this.apiClient.callApi(
        '/BrandingThemes/{BrandingThemeID}/PaymentServices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContactAttachmentByFileName operation.
     * @callback module:api/AccountingApi~createContactAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} contactID Unique identifier for a Contact
     * @param {String} fileName Name for the file you are attaching
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~createContactAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    createContactAttachmentByFileName(xeroTenantId, contactID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createContactAttachmentByFileName");
      }
      // verify the required parameter 'contactID' is set
      if (contactID === undefined || contactID === null) {
        throw new Error("Missing the required parameter 'contactID' when calling createContactAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling createContactAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createContactAttachmentByFileName");
      }

      let pathParams = {
        'ContactID': contactID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/Contacts/{ContactID}/Attachments/{FileName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContactGroup operation.
     * @callback module:api/AccountingApi~createContactGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactGroups} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a contact group
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/ContactGroups} contactGroups ContactGroups with an array of names in request body
     * @param {module:api/AccountingApi~createContactGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactGroups}
     */
    createContactGroup(xeroTenantId, contactGroups, callback) {
      let postBody = contactGroups;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createContactGroup");
      }
      // verify the required parameter 'contactGroups' is set
      if (contactGroups === undefined || contactGroups === null) {
        throw new Error("Missing the required parameter 'contactGroups' when calling createContactGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactGroups;
      return this.apiClient.callApi(
        '/ContactGroups', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContactGroupContacts operation.
     * @callback module:api/AccountingApi~createContactGroupContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contacts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates contacts to a specific contact group
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} contactGroupID Unique identifier for a Contact Group
     * @param {module:model/Contacts} contacts Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request
     * @param {module:api/AccountingApi~createContactGroupContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contacts}
     */
    createContactGroupContacts(xeroTenantId, contactGroupID, contacts, callback) {
      let postBody = contacts;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createContactGroupContacts");
      }
      // verify the required parameter 'contactGroupID' is set
      if (contactGroupID === undefined || contactGroupID === null) {
        throw new Error("Missing the required parameter 'contactGroupID' when calling createContactGroupContacts");
      }
      // verify the required parameter 'contacts' is set
      if (contacts === undefined || contacts === null) {
        throw new Error("Missing the required parameter 'contacts' when calling createContactGroupContacts");
      }

      let pathParams = {
        'ContactGroupID': contactGroupID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Contacts;
      return this.apiClient.callApi(
        '/ContactGroups/{ContactGroupID}/Contacts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContactHistory operation.
     * @callback module:api/AccountingApi~createContactHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new history record for a specific contact
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} contactID Unique identifier for a Contact
     * @param {module:model/HistoryRecords} historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     * @param {module:api/AccountingApi~createContactHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    createContactHistory(xeroTenantId, contactID, historyRecords, callback) {
      let postBody = historyRecords;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createContactHistory");
      }
      // verify the required parameter 'contactID' is set
      if (contactID === undefined || contactID === null) {
        throw new Error("Missing the required parameter 'contactID' when calling createContactHistory");
      }
      // verify the required parameter 'historyRecords' is set
      if (historyRecords === undefined || historyRecords === null) {
        throw new Error("Missing the required parameter 'historyRecords' when calling createContactHistory");
      }

      let pathParams = {
        'ContactID': contactID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/Contacts/{ContactID}/History', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContacts operation.
     * @callback module:api/AccountingApi~createContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contacts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates multiple contacts (bulk) in a Xero organisation
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/Contacts} contacts Contacts with an array of Contact objects to create in body of request
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {module:api/AccountingApi~createContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contacts}
     */
    createContacts(xeroTenantId, contacts, opts, callback) {
      opts = opts || {};
      let postBody = contacts;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createContacts");
      }
      // verify the required parameter 'contacts' is set
      if (contacts === undefined || contacts === null) {
        throw new Error("Missing the required parameter 'contacts' when calling createContacts");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Contacts;
      return this.apiClient.callApi(
        '/Contacts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCreditNoteAllocation operation.
     * @callback module:api/AccountingApi~createCreditNoteAllocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Allocations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates allocation for a specific credit note
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} creditNoteID Unique identifier for a Credit Note
     * @param {module:model/Allocations} allocations Allocations with array of Allocation object in body of request.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {module:api/AccountingApi~createCreditNoteAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Allocations}
     */
    createCreditNoteAllocation(xeroTenantId, creditNoteID, allocations, opts, callback) {
      opts = opts || {};
      let postBody = allocations;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createCreditNoteAllocation");
      }
      // verify the required parameter 'creditNoteID' is set
      if (creditNoteID === undefined || creditNoteID === null) {
        throw new Error("Missing the required parameter 'creditNoteID' when calling createCreditNoteAllocation");
      }
      // verify the required parameter 'allocations' is set
      if (allocations === undefined || allocations === null) {
        throw new Error("Missing the required parameter 'allocations' when calling createCreditNoteAllocation");
      }

      let pathParams = {
        'CreditNoteID': creditNoteID
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Allocations;
      return this.apiClient.callApi(
        '/CreditNotes/{CreditNoteID}/Allocations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCreditNoteAttachmentByFileName operation.
     * @callback module:api/AccountingApi~createCreditNoteAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an attachment for a specific credit note
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} creditNoteID Unique identifier for a Credit Note
     * @param {String} fileName Name of the file you are attaching to Credit Note
     * @param {Blob} body Byte array of file in body of request
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeOnline = false)] Allows an attachment to be seen by the end customer within their online invoice
     * @param {module:api/AccountingApi~createCreditNoteAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    createCreditNoteAttachmentByFileName(xeroTenantId, creditNoteID, fileName, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createCreditNoteAttachmentByFileName");
      }
      // verify the required parameter 'creditNoteID' is set
      if (creditNoteID === undefined || creditNoteID === null) {
        throw new Error("Missing the required parameter 'creditNoteID' when calling createCreditNoteAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling createCreditNoteAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCreditNoteAttachmentByFileName");
      }

      let pathParams = {
        'CreditNoteID': creditNoteID,
        'FileName': fileName
      };
      let queryParams = {
        'IncludeOnline': opts['includeOnline']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/CreditNotes/{CreditNoteID}/Attachments/{FileName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCreditNoteHistory operation.
     * @callback module:api/AccountingApi~createCreditNoteHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves history records of a specific credit note
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} creditNoteID Unique identifier for a Credit Note
     * @param {module:model/HistoryRecords} historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     * @param {module:api/AccountingApi~createCreditNoteHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    createCreditNoteHistory(xeroTenantId, creditNoteID, historyRecords, callback) {
      let postBody = historyRecords;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createCreditNoteHistory");
      }
      // verify the required parameter 'creditNoteID' is set
      if (creditNoteID === undefined || creditNoteID === null) {
        throw new Error("Missing the required parameter 'creditNoteID' when calling createCreditNoteHistory");
      }
      // verify the required parameter 'historyRecords' is set
      if (historyRecords === undefined || historyRecords === null) {
        throw new Error("Missing the required parameter 'historyRecords' when calling createCreditNoteHistory");
      }

      let pathParams = {
        'CreditNoteID': creditNoteID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/CreditNotes/{CreditNoteID}/History', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCreditNotes operation.
     * @callback module:api/AccountingApi~createCreditNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditNotes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new credit note
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/CreditNotes} creditNotes Credit Notes with array of CreditNote object in body of request
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~createCreditNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditNotes}
     */
    createCreditNotes(xeroTenantId, creditNotes, opts, callback) {
      opts = opts || {};
      let postBody = creditNotes;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createCreditNotes");
      }
      // verify the required parameter 'creditNotes' is set
      if (creditNotes === undefined || creditNotes === null) {
        throw new Error("Missing the required parameter 'creditNotes' when calling createCreditNotes");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors'],
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreditNotes;
      return this.apiClient.callApi(
        '/CreditNotes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCurrency operation.
     * @callback module:api/AccountingApi~createCurrencyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Currencies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new currency for a Xero organisation
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/Currency} currency Currency object in the body of request
     * @param {module:api/AccountingApi~createCurrencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Currencies}
     */
    createCurrency(xeroTenantId, currency, callback) {
      let postBody = currency;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createCurrency");
      }
      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling createCurrency");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Currencies;
      return this.apiClient.callApi(
        '/Currencies', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEmployees operation.
     * @callback module:api/AccountingApi~createEmployeesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Employees} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new employees used in Xero payrun
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/Employees} employees Employees with array of Employee object in body of request
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {module:api/AccountingApi~createEmployeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Employees}
     */
    createEmployees(xeroTenantId, employees, opts, callback) {
      opts = opts || {};
      let postBody = employees;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createEmployees");
      }
      // verify the required parameter 'employees' is set
      if (employees === undefined || employees === null) {
        throw new Error("Missing the required parameter 'employees' when calling createEmployees");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Employees;
      return this.apiClient.callApi(
        '/Employees', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createExpenseClaimHistory operation.
     * @callback module:api/AccountingApi~createExpenseClaimHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a history record for a specific expense claim
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} expenseClaimID Unique identifier for a ExpenseClaim
     * @param {module:model/HistoryRecords} historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     * @param {module:api/AccountingApi~createExpenseClaimHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    createExpenseClaimHistory(xeroTenantId, expenseClaimID, historyRecords, callback) {
      let postBody = historyRecords;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createExpenseClaimHistory");
      }
      // verify the required parameter 'expenseClaimID' is set
      if (expenseClaimID === undefined || expenseClaimID === null) {
        throw new Error("Missing the required parameter 'expenseClaimID' when calling createExpenseClaimHistory");
      }
      // verify the required parameter 'historyRecords' is set
      if (historyRecords === undefined || historyRecords === null) {
        throw new Error("Missing the required parameter 'historyRecords' when calling createExpenseClaimHistory");
      }

      let pathParams = {
        'ExpenseClaimID': expenseClaimID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/ExpenseClaims/{ExpenseClaimID}/History', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createExpenseClaims operation.
     * @callback module:api/AccountingApi~createExpenseClaimsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpenseClaims} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates expense claims
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/ExpenseClaims} expenseClaims ExpenseClaims with array of ExpenseClaim object in body of request
     * @param {module:api/AccountingApi~createExpenseClaimsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpenseClaims}
     */
    createExpenseClaims(xeroTenantId, expenseClaims, callback) {
      let postBody = expenseClaims;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createExpenseClaims");
      }
      // verify the required parameter 'expenseClaims' is set
      if (expenseClaims === undefined || expenseClaims === null) {
        throw new Error("Missing the required parameter 'expenseClaims' when calling createExpenseClaims");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExpenseClaims;
      return this.apiClient.callApi(
        '/ExpenseClaims', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInvoiceAttachmentByFileName operation.
     * @callback module:api/AccountingApi~createInvoiceAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an attachment for a specific invoice or purchase bill by filename
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} invoiceID Unique identifier for an Invoice
     * @param {String} fileName Name of the file you are attaching
     * @param {Blob} body Byte array of file in body of request
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeOnline = false)] Allows an attachment to be seen by the end customer within their online invoice
     * @param {module:api/AccountingApi~createInvoiceAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    createInvoiceAttachmentByFileName(xeroTenantId, invoiceID, fileName, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createInvoiceAttachmentByFileName");
      }
      // verify the required parameter 'invoiceID' is set
      if (invoiceID === undefined || invoiceID === null) {
        throw new Error("Missing the required parameter 'invoiceID' when calling createInvoiceAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling createInvoiceAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createInvoiceAttachmentByFileName");
      }

      let pathParams = {
        'InvoiceID': invoiceID,
        'FileName': fileName
      };
      let queryParams = {
        'IncludeOnline': opts['includeOnline']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/Invoices/{InvoiceID}/Attachments/{FileName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInvoiceHistory operation.
     * @callback module:api/AccountingApi~createInvoiceHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a history record for a specific invoice
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} invoiceID Unique identifier for an Invoice
     * @param {module:model/HistoryRecords} historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     * @param {module:api/AccountingApi~createInvoiceHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    createInvoiceHistory(xeroTenantId, invoiceID, historyRecords, callback) {
      let postBody = historyRecords;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createInvoiceHistory");
      }
      // verify the required parameter 'invoiceID' is set
      if (invoiceID === undefined || invoiceID === null) {
        throw new Error("Missing the required parameter 'invoiceID' when calling createInvoiceHistory");
      }
      // verify the required parameter 'historyRecords' is set
      if (historyRecords === undefined || historyRecords === null) {
        throw new Error("Missing the required parameter 'historyRecords' when calling createInvoiceHistory");
      }

      let pathParams = {
        'InvoiceID': invoiceID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/Invoices/{InvoiceID}/History', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInvoices operation.
     * @callback module:api/AccountingApi~createInvoicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invoices} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates one or more sales invoices or purchase bills
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/Invoices} invoices Invoices with an array of invoice objects in body of request
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~createInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invoices}
     */
    createInvoices(xeroTenantId, invoices, opts, callback) {
      opts = opts || {};
      let postBody = invoices;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createInvoices");
      }
      // verify the required parameter 'invoices' is set
      if (invoices === undefined || invoices === null) {
        throw new Error("Missing the required parameter 'invoices' when calling createInvoices");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors'],
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Invoices;
      return this.apiClient.callApi(
        '/Invoices', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createItemHistory operation.
     * @callback module:api/AccountingApi~createItemHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a history record for a specific item
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} itemID Unique identifier for an Item
     * @param {module:model/HistoryRecords} historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     * @param {module:api/AccountingApi~createItemHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    createItemHistory(xeroTenantId, itemID, historyRecords, callback) {
      let postBody = historyRecords;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createItemHistory");
      }
      // verify the required parameter 'itemID' is set
      if (itemID === undefined || itemID === null) {
        throw new Error("Missing the required parameter 'itemID' when calling createItemHistory");
      }
      // verify the required parameter 'historyRecords' is set
      if (historyRecords === undefined || historyRecords === null) {
        throw new Error("Missing the required parameter 'historyRecords' when calling createItemHistory");
      }

      let pathParams = {
        'ItemID': itemID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/Items/{ItemID}/History', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createItems operation.
     * @callback module:api/AccountingApi~createItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Items} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates one or more items
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/Items} items Items with an array of Item objects in body of request
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~createItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Items}
     */
    createItems(xeroTenantId, items, opts, callback) {
      opts = opts || {};
      let postBody = items;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createItems");
      }
      // verify the required parameter 'items' is set
      if (items === undefined || items === null) {
        throw new Error("Missing the required parameter 'items' when calling createItems");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors'],
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Items;
      return this.apiClient.callApi(
        '/Items', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLinkedTransaction operation.
     * @callback module:api/AccountingApi~createLinkedTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkedTransactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates linked transactions (billable expenses)
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/LinkedTransaction} linkedTransaction LinkedTransaction object in body of request
     * @param {module:api/AccountingApi~createLinkedTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkedTransactions}
     */
    createLinkedTransaction(xeroTenantId, linkedTransaction, callback) {
      let postBody = linkedTransaction;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createLinkedTransaction");
      }
      // verify the required parameter 'linkedTransaction' is set
      if (linkedTransaction === undefined || linkedTransaction === null) {
        throw new Error("Missing the required parameter 'linkedTransaction' when calling createLinkedTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LinkedTransactions;
      return this.apiClient.callApi(
        '/LinkedTransactions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createManualJournalAttachmentByFileName operation.
     * @callback module:api/AccountingApi~createManualJournalAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a specific attachment for a specific manual journal by file name
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} manualJournalID Unique identifier for a ManualJournal
     * @param {String} fileName The name of the file being attached to a ManualJournal
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~createManualJournalAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    createManualJournalAttachmentByFileName(xeroTenantId, manualJournalID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createManualJournalAttachmentByFileName");
      }
      // verify the required parameter 'manualJournalID' is set
      if (manualJournalID === undefined || manualJournalID === null) {
        throw new Error("Missing the required parameter 'manualJournalID' when calling createManualJournalAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling createManualJournalAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createManualJournalAttachmentByFileName");
      }

      let pathParams = {
        'ManualJournalID': manualJournalID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/ManualJournals/{ManualJournalID}/Attachments/{FileName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createManualJournalHistoryRecord operation.
     * @callback module:api/AccountingApi~createManualJournalHistoryRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a history record for a specific manual journal
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} manualJournalID Xero generated unique identifier for a manual journal
     * @param {module:model/HistoryRecords} historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     * @param {module:api/AccountingApi~createManualJournalHistoryRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    createManualJournalHistoryRecord(xeroTenantId, manualJournalID, historyRecords, callback) {
      let postBody = historyRecords;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createManualJournalHistoryRecord");
      }
      // verify the required parameter 'manualJournalID' is set
      if (manualJournalID === undefined || manualJournalID === null) {
        throw new Error("Missing the required parameter 'manualJournalID' when calling createManualJournalHistoryRecord");
      }
      // verify the required parameter 'historyRecords' is set
      if (historyRecords === undefined || historyRecords === null) {
        throw new Error("Missing the required parameter 'historyRecords' when calling createManualJournalHistoryRecord");
      }

      let pathParams = {
        'ManualJournalID': manualJournalID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/ManualJournals/{ManualJournalID}/History', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createManualJournals operation.
     * @callback module:api/AccountingApi~createManualJournalsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManualJournals} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates one or more manual journals
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/ManualJournals} manualJournals ManualJournals array with ManualJournal object in body of request
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {module:api/AccountingApi~createManualJournalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManualJournals}
     */
    createManualJournals(xeroTenantId, manualJournals, opts, callback) {
      opts = opts || {};
      let postBody = manualJournals;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createManualJournals");
      }
      // verify the required parameter 'manualJournals' is set
      if (manualJournals === undefined || manualJournals === null) {
        throw new Error("Missing the required parameter 'manualJournals' when calling createManualJournals");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManualJournals;
      return this.apiClient.callApi(
        '/ManualJournals', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOverpaymentAllocations operation.
     * @callback module:api/AccountingApi~createOverpaymentAllocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Allocations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a single allocation for a specific overpayment
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} overpaymentID Unique identifier for a Overpayment
     * @param {module:model/Allocations} allocations Allocations array with Allocation object in body of request
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {module:api/AccountingApi~createOverpaymentAllocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Allocations}
     */
    createOverpaymentAllocations(xeroTenantId, overpaymentID, allocations, opts, callback) {
      opts = opts || {};
      let postBody = allocations;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createOverpaymentAllocations");
      }
      // verify the required parameter 'overpaymentID' is set
      if (overpaymentID === undefined || overpaymentID === null) {
        throw new Error("Missing the required parameter 'overpaymentID' when calling createOverpaymentAllocations");
      }
      // verify the required parameter 'allocations' is set
      if (allocations === undefined || allocations === null) {
        throw new Error("Missing the required parameter 'allocations' when calling createOverpaymentAllocations");
      }

      let pathParams = {
        'OverpaymentID': overpaymentID
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Allocations;
      return this.apiClient.callApi(
        '/Overpayments/{OverpaymentID}/Allocations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOverpaymentHistory operation.
     * @callback module:api/AccountingApi~createOverpaymentHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a history record for a specific overpayment
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} overpaymentID Unique identifier for a Overpayment
     * @param {module:model/HistoryRecords} historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     * @param {module:api/AccountingApi~createOverpaymentHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    createOverpaymentHistory(xeroTenantId, overpaymentID, historyRecords, callback) {
      let postBody = historyRecords;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createOverpaymentHistory");
      }
      // verify the required parameter 'overpaymentID' is set
      if (overpaymentID === undefined || overpaymentID === null) {
        throw new Error("Missing the required parameter 'overpaymentID' when calling createOverpaymentHistory");
      }
      // verify the required parameter 'historyRecords' is set
      if (historyRecords === undefined || historyRecords === null) {
        throw new Error("Missing the required parameter 'historyRecords' when calling createOverpaymentHistory");
      }

      let pathParams = {
        'OverpaymentID': overpaymentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/Overpayments/{OverpaymentID}/History', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPayment operation.
     * @callback module:api/AccountingApi~createPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a single payment for invoice or credit notes
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/Payment} payment Request body with a single Payment object
     * @param {module:api/AccountingApi~createPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Payments}
     */
    createPayment(xeroTenantId, payment, callback) {
      let postBody = payment;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createPayment");
      }
      // verify the required parameter 'payment' is set
      if (payment === undefined || payment === null) {
        throw new Error("Missing the required parameter 'payment' when calling createPayment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Payments;
      return this.apiClient.callApi(
        '/Payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPaymentHistory operation.
     * @callback module:api/AccountingApi~createPaymentHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a history record for a specific payment
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} paymentID Unique identifier for a Payment
     * @param {module:model/HistoryRecords} historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     * @param {module:api/AccountingApi~createPaymentHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    createPaymentHistory(xeroTenantId, paymentID, historyRecords, callback) {
      let postBody = historyRecords;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createPaymentHistory");
      }
      // verify the required parameter 'paymentID' is set
      if (paymentID === undefined || paymentID === null) {
        throw new Error("Missing the required parameter 'paymentID' when calling createPaymentHistory");
      }
      // verify the required parameter 'historyRecords' is set
      if (historyRecords === undefined || historyRecords === null) {
        throw new Error("Missing the required parameter 'historyRecords' when calling createPaymentHistory");
      }

      let pathParams = {
        'PaymentID': paymentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/Payments/{PaymentID}/History', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPaymentService operation.
     * @callback module:api/AccountingApi~createPaymentServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentServices} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a payment service
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/PaymentServices} paymentServices PaymentServices array with PaymentService object in body of request
     * @param {module:api/AccountingApi~createPaymentServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentServices}
     */
    createPaymentService(xeroTenantId, paymentServices, callback) {
      let postBody = paymentServices;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createPaymentService");
      }
      // verify the required parameter 'paymentServices' is set
      if (paymentServices === undefined || paymentServices === null) {
        throw new Error("Missing the required parameter 'paymentServices' when calling createPaymentService");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentServices;
      return this.apiClient.callApi(
        '/PaymentServices', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPayments operation.
     * @callback module:api/AccountingApi~createPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates multiple payments for invoices or credit notes
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/Payments} payments Payments array with Payment object in body of request
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {module:api/AccountingApi~createPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Payments}
     */
    createPayments(xeroTenantId, payments, opts, callback) {
      opts = opts || {};
      let postBody = payments;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createPayments");
      }
      // verify the required parameter 'payments' is set
      if (payments === undefined || payments === null) {
        throw new Error("Missing the required parameter 'payments' when calling createPayments");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Payments;
      return this.apiClient.callApi(
        '/Payments', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPrepaymentAllocations operation.
     * @callback module:api/AccountingApi~createPrepaymentAllocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Allocations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows you to create an Allocation for prepayments
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} prepaymentID Unique identifier for Prepayment
     * @param {module:model/Allocations} allocations Allocations with an array of Allocation object in body of request
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {module:api/AccountingApi~createPrepaymentAllocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Allocations}
     */
    createPrepaymentAllocations(xeroTenantId, prepaymentID, allocations, opts, callback) {
      opts = opts || {};
      let postBody = allocations;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createPrepaymentAllocations");
      }
      // verify the required parameter 'prepaymentID' is set
      if (prepaymentID === undefined || prepaymentID === null) {
        throw new Error("Missing the required parameter 'prepaymentID' when calling createPrepaymentAllocations");
      }
      // verify the required parameter 'allocations' is set
      if (allocations === undefined || allocations === null) {
        throw new Error("Missing the required parameter 'allocations' when calling createPrepaymentAllocations");
      }

      let pathParams = {
        'PrepaymentID': prepaymentID
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Allocations;
      return this.apiClient.callApi(
        '/Prepayments/{PrepaymentID}/Allocations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPrepaymentHistory operation.
     * @callback module:api/AccountingApi~createPrepaymentHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a history record for a specific prepayment
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} prepaymentID Unique identifier for a PrePayment
     * @param {module:model/HistoryRecords} historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     * @param {module:api/AccountingApi~createPrepaymentHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    createPrepaymentHistory(xeroTenantId, prepaymentID, historyRecords, callback) {
      let postBody = historyRecords;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createPrepaymentHistory");
      }
      // verify the required parameter 'prepaymentID' is set
      if (prepaymentID === undefined || prepaymentID === null) {
        throw new Error("Missing the required parameter 'prepaymentID' when calling createPrepaymentHistory");
      }
      // verify the required parameter 'historyRecords' is set
      if (historyRecords === undefined || historyRecords === null) {
        throw new Error("Missing the required parameter 'historyRecords' when calling createPrepaymentHistory");
      }

      let pathParams = {
        'PrepaymentID': prepaymentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/Prepayments/{PrepaymentID}/History', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPurchaseOrderAttachmentByFileName operation.
     * @callback module:api/AccountingApi~createPurchaseOrderAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates attachment for a specific purchase order
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} purchaseOrderID Unique identifier for Purchase Order object
     * @param {String} fileName Name of the attachment
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~createPurchaseOrderAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    createPurchaseOrderAttachmentByFileName(xeroTenantId, purchaseOrderID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createPurchaseOrderAttachmentByFileName");
      }
      // verify the required parameter 'purchaseOrderID' is set
      if (purchaseOrderID === undefined || purchaseOrderID === null) {
        throw new Error("Missing the required parameter 'purchaseOrderID' when calling createPurchaseOrderAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling createPurchaseOrderAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPurchaseOrderAttachmentByFileName");
      }

      let pathParams = {
        'PurchaseOrderID': purchaseOrderID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPurchaseOrderHistory operation.
     * @callback module:api/AccountingApi~createPurchaseOrderHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a history record for a specific purchase orders
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} purchaseOrderID Unique identifier for a PurchaseOrder
     * @param {module:model/HistoryRecords} historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     * @param {module:api/AccountingApi~createPurchaseOrderHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    createPurchaseOrderHistory(xeroTenantId, purchaseOrderID, historyRecords, callback) {
      let postBody = historyRecords;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createPurchaseOrderHistory");
      }
      // verify the required parameter 'purchaseOrderID' is set
      if (purchaseOrderID === undefined || purchaseOrderID === null) {
        throw new Error("Missing the required parameter 'purchaseOrderID' when calling createPurchaseOrderHistory");
      }
      // verify the required parameter 'historyRecords' is set
      if (historyRecords === undefined || historyRecords === null) {
        throw new Error("Missing the required parameter 'historyRecords' when calling createPurchaseOrderHistory");
      }

      let pathParams = {
        'PurchaseOrderID': purchaseOrderID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/PurchaseOrders/{PurchaseOrderID}/History', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPurchaseOrders operation.
     * @callback module:api/AccountingApi~createPurchaseOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates one or more purchase orders
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/PurchaseOrders} purchaseOrders PurchaseOrders with an array of PurchaseOrder object in body of request
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {module:api/AccountingApi~createPurchaseOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseOrders}
     */
    createPurchaseOrders(xeroTenantId, purchaseOrders, opts, callback) {
      opts = opts || {};
      let postBody = purchaseOrders;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createPurchaseOrders");
      }
      // verify the required parameter 'purchaseOrders' is set
      if (purchaseOrders === undefined || purchaseOrders === null) {
        throw new Error("Missing the required parameter 'purchaseOrders' when calling createPurchaseOrders");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseOrders;
      return this.apiClient.callApi(
        '/PurchaseOrders', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createQuoteAttachmentByFileName operation.
     * @callback module:api/AccountingApi~createQuoteAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates attachment for a specific quote
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} quoteID Unique identifier for Quote object
     * @param {String} fileName Name of the attachment
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~createQuoteAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    createQuoteAttachmentByFileName(xeroTenantId, quoteID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createQuoteAttachmentByFileName");
      }
      // verify the required parameter 'quoteID' is set
      if (quoteID === undefined || quoteID === null) {
        throw new Error("Missing the required parameter 'quoteID' when calling createQuoteAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling createQuoteAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createQuoteAttachmentByFileName");
      }

      let pathParams = {
        'QuoteID': quoteID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/Quotes/{QuoteID}/Attachments/{FileName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createQuoteHistory operation.
     * @callback module:api/AccountingApi~createQuoteHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a history record for a specific quote
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} quoteID Unique identifier for an Quote
     * @param {module:model/HistoryRecords} historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     * @param {module:api/AccountingApi~createQuoteHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    createQuoteHistory(xeroTenantId, quoteID, historyRecords, callback) {
      let postBody = historyRecords;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createQuoteHistory");
      }
      // verify the required parameter 'quoteID' is set
      if (quoteID === undefined || quoteID === null) {
        throw new Error("Missing the required parameter 'quoteID' when calling createQuoteHistory");
      }
      // verify the required parameter 'historyRecords' is set
      if (historyRecords === undefined || historyRecords === null) {
        throw new Error("Missing the required parameter 'historyRecords' when calling createQuoteHistory");
      }

      let pathParams = {
        'QuoteID': quoteID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/Quotes/{QuoteID}/History', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createQuotes operation.
     * @callback module:api/AccountingApi~createQuotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Quotes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create one or more quotes
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/Quotes} quotes Quotes with an array of Quote object in body of request
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {module:api/AccountingApi~createQuotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Quotes}
     */
    createQuotes(xeroTenantId, quotes, opts, callback) {
      opts = opts || {};
      let postBody = quotes;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createQuotes");
      }
      // verify the required parameter 'quotes' is set
      if (quotes === undefined || quotes === null) {
        throw new Error("Missing the required parameter 'quotes' when calling createQuotes");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Quotes;
      return this.apiClient.callApi(
        '/Quotes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createReceipt operation.
     * @callback module:api/AccountingApi~createReceiptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Receipts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates draft expense claim receipts for any user
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/Receipts} receipts Receipts with an array of Receipt object in body of request
     * @param {Object} opts Optional parameters
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~createReceiptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Receipts}
     */
    createReceipt(xeroTenantId, receipts, opts, callback) {
      opts = opts || {};
      let postBody = receipts;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createReceipt");
      }
      // verify the required parameter 'receipts' is set
      if (receipts === undefined || receipts === null) {
        throw new Error("Missing the required parameter 'receipts' when calling createReceipt");
      }

      let pathParams = {
      };
      let queryParams = {
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Receipts;
      return this.apiClient.callApi(
        '/Receipts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createReceiptAttachmentByFileName operation.
     * @callback module:api/AccountingApi~createReceiptAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an attachment on a specific expense claim receipts by file name
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} receiptID Unique identifier for a Receipt
     * @param {String} fileName The name of the file being attached to the Receipt
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~createReceiptAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    createReceiptAttachmentByFileName(xeroTenantId, receiptID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createReceiptAttachmentByFileName");
      }
      // verify the required parameter 'receiptID' is set
      if (receiptID === undefined || receiptID === null) {
        throw new Error("Missing the required parameter 'receiptID' when calling createReceiptAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling createReceiptAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createReceiptAttachmentByFileName");
      }

      let pathParams = {
        'ReceiptID': receiptID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/Receipts/{ReceiptID}/Attachments/{FileName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createReceiptHistory operation.
     * @callback module:api/AccountingApi~createReceiptHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a history record for a specific receipt
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} receiptID Unique identifier for a Receipt
     * @param {module:model/HistoryRecords} historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     * @param {module:api/AccountingApi~createReceiptHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    createReceiptHistory(xeroTenantId, receiptID, historyRecords, callback) {
      let postBody = historyRecords;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createReceiptHistory");
      }
      // verify the required parameter 'receiptID' is set
      if (receiptID === undefined || receiptID === null) {
        throw new Error("Missing the required parameter 'receiptID' when calling createReceiptHistory");
      }
      // verify the required parameter 'historyRecords' is set
      if (historyRecords === undefined || historyRecords === null) {
        throw new Error("Missing the required parameter 'historyRecords' when calling createReceiptHistory");
      }

      let pathParams = {
        'ReceiptID': receiptID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/Receipts/{ReceiptID}/History', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRepeatingInvoiceAttachmentByFileName operation.
     * @callback module:api/AccountingApi~createRepeatingInvoiceAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an attachment from a specific repeating invoices by file name
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} repeatingInvoiceID Unique identifier for a Repeating Invoice
     * @param {String} fileName The name of the file being attached to a Repeating Invoice
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~createRepeatingInvoiceAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    createRepeatingInvoiceAttachmentByFileName(xeroTenantId, repeatingInvoiceID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createRepeatingInvoiceAttachmentByFileName");
      }
      // verify the required parameter 'repeatingInvoiceID' is set
      if (repeatingInvoiceID === undefined || repeatingInvoiceID === null) {
        throw new Error("Missing the required parameter 'repeatingInvoiceID' when calling createRepeatingInvoiceAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling createRepeatingInvoiceAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRepeatingInvoiceAttachmentByFileName");
      }

      let pathParams = {
        'RepeatingInvoiceID': repeatingInvoiceID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRepeatingInvoiceHistory operation.
     * @callback module:api/AccountingApi~createRepeatingInvoiceHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a  history record for a specific repeating invoice
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} repeatingInvoiceID Unique identifier for a Repeating Invoice
     * @param {module:model/HistoryRecords} historyRecords HistoryRecords containing an array of HistoryRecord objects in body of request
     * @param {module:api/AccountingApi~createRepeatingInvoiceHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    createRepeatingInvoiceHistory(xeroTenantId, repeatingInvoiceID, historyRecords, callback) {
      let postBody = historyRecords;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createRepeatingInvoiceHistory");
      }
      // verify the required parameter 'repeatingInvoiceID' is set
      if (repeatingInvoiceID === undefined || repeatingInvoiceID === null) {
        throw new Error("Missing the required parameter 'repeatingInvoiceID' when calling createRepeatingInvoiceHistory");
      }
      // verify the required parameter 'historyRecords' is set
      if (historyRecords === undefined || historyRecords === null) {
        throw new Error("Missing the required parameter 'historyRecords' when calling createRepeatingInvoiceHistory");
      }

      let pathParams = {
        'RepeatingInvoiceID': repeatingInvoiceID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/RepeatingInvoices/{RepeatingInvoiceID}/History', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTaxRates operation.
     * @callback module:api/AccountingApi~createTaxRatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxRates} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates one or more tax rates
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/TaxRates} taxRates TaxRates array with TaxRate object in body of request
     * @param {module:api/AccountingApi~createTaxRatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxRates}
     */
    createTaxRates(xeroTenantId, taxRates, callback) {
      let postBody = taxRates;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createTaxRates");
      }
      // verify the required parameter 'taxRates' is set
      if (taxRates === undefined || taxRates === null) {
        throw new Error("Missing the required parameter 'taxRates' when calling createTaxRates");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TaxRates;
      return this.apiClient.callApi(
        '/TaxRates', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTrackingCategory operation.
     * @callback module:api/AccountingApi~createTrackingCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackingCategories} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create tracking categories
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/TrackingCategory} trackingCategory TrackingCategory object in body of request
     * @param {module:api/AccountingApi~createTrackingCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackingCategories}
     */
    createTrackingCategory(xeroTenantId, trackingCategory, callback) {
      let postBody = trackingCategory;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createTrackingCategory");
      }
      // verify the required parameter 'trackingCategory' is set
      if (trackingCategory === undefined || trackingCategory === null) {
        throw new Error("Missing the required parameter 'trackingCategory' when calling createTrackingCategory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackingCategories;
      return this.apiClient.callApi(
        '/TrackingCategories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTrackingOptions operation.
     * @callback module:api/AccountingApi~createTrackingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackingOptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates options for a specific tracking category
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} trackingCategoryID Unique identifier for a TrackingCategory
     * @param {module:model/TrackingOption} trackingOption TrackingOption object in body of request
     * @param {module:api/AccountingApi~createTrackingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackingOptions}
     */
    createTrackingOptions(xeroTenantId, trackingCategoryID, trackingOption, callback) {
      let postBody = trackingOption;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createTrackingOptions");
      }
      // verify the required parameter 'trackingCategoryID' is set
      if (trackingCategoryID === undefined || trackingCategoryID === null) {
        throw new Error("Missing the required parameter 'trackingCategoryID' when calling createTrackingOptions");
      }
      // verify the required parameter 'trackingOption' is set
      if (trackingOption === undefined || trackingOption === null) {
        throw new Error("Missing the required parameter 'trackingOption' when calling createTrackingOptions");
      }

      let pathParams = {
        'TrackingCategoryID': trackingCategoryID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackingOptions;
      return this.apiClient.callApi(
        '/TrackingCategories/{TrackingCategoryID}/Options', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccount operation.
     * @callback module:api/AccountingApi~deleteAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Accounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a chart of accounts
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} accountID Unique identifier for retrieving single object
     * @param {module:api/AccountingApi~deleteAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Accounts}
     */
    deleteAccount(xeroTenantId, accountID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling deleteAccount");
      }
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling deleteAccount");
      }

      let pathParams = {
        'AccountID': accountID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Accounts;
      return this.apiClient.callApi(
        '/Accounts/{AccountID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContactGroupContact operation.
     * @callback module:api/AccountingApi~deleteContactGroupContactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specific contact from a contact group using a unique contact Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} contactGroupID Unique identifier for a Contact Group
     * @param {String} contactID Unique identifier for a Contact
     * @param {module:api/AccountingApi~deleteContactGroupContactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteContactGroupContact(xeroTenantId, contactGroupID, contactID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling deleteContactGroupContact");
      }
      // verify the required parameter 'contactGroupID' is set
      if (contactGroupID === undefined || contactGroupID === null) {
        throw new Error("Missing the required parameter 'contactGroupID' when calling deleteContactGroupContact");
      }
      // verify the required parameter 'contactID' is set
      if (contactID === undefined || contactID === null) {
        throw new Error("Missing the required parameter 'contactID' when calling deleteContactGroupContact");
      }

      let pathParams = {
        'ContactGroupID': contactGroupID,
        'ContactID': contactID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ContactGroups/{ContactGroupID}/Contacts/{ContactID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContactGroupContacts operation.
     * @callback module:api/AccountingApi~deleteContactGroupContactsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all contacts from a specific contact group
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} contactGroupID Unique identifier for a Contact Group
     * @param {module:api/AccountingApi~deleteContactGroupContactsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteContactGroupContacts(xeroTenantId, contactGroupID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling deleteContactGroupContacts");
      }
      // verify the required parameter 'contactGroupID' is set
      if (contactGroupID === undefined || contactGroupID === null) {
        throw new Error("Missing the required parameter 'contactGroupID' when calling deleteContactGroupContacts");
      }

      let pathParams = {
        'ContactGroupID': contactGroupID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ContactGroups/{ContactGroupID}/Contacts', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItem operation.
     * @callback module:api/AccountingApi~deleteItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specific item
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} itemID Unique identifier for an Item
     * @param {module:api/AccountingApi~deleteItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteItem(xeroTenantId, itemID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling deleteItem");
      }
      // verify the required parameter 'itemID' is set
      if (itemID === undefined || itemID === null) {
        throw new Error("Missing the required parameter 'itemID' when calling deleteItem");
      }

      let pathParams = {
        'ItemID': itemID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Items/{ItemID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLinkedTransaction operation.
     * @callback module:api/AccountingApi~deleteLinkedTransactionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specific linked transactions (billable expenses)
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} linkedTransactionID Unique identifier for a LinkedTransaction
     * @param {module:api/AccountingApi~deleteLinkedTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLinkedTransaction(xeroTenantId, linkedTransactionID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling deleteLinkedTransaction");
      }
      // verify the required parameter 'linkedTransactionID' is set
      if (linkedTransactionID === undefined || linkedTransactionID === null) {
        throw new Error("Missing the required parameter 'linkedTransactionID' when calling deleteLinkedTransaction");
      }

      let pathParams = {
        'LinkedTransactionID': linkedTransactionID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/LinkedTransactions/{LinkedTransactionID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayment operation.
     * @callback module:api/AccountingApi~deletePaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific payment for invoices and credit notes
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} paymentID Unique identifier for a Payment
     * @param {module:model/PaymentDelete} paymentDelete 
     * @param {module:api/AccountingApi~deletePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Payments}
     */
    deletePayment(xeroTenantId, paymentID, paymentDelete, callback) {
      let postBody = paymentDelete;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling deletePayment");
      }
      // verify the required parameter 'paymentID' is set
      if (paymentID === undefined || paymentID === null) {
        throw new Error("Missing the required parameter 'paymentID' when calling deletePayment");
      }
      // verify the required parameter 'paymentDelete' is set
      if (paymentDelete === undefined || paymentDelete === null) {
        throw new Error("Missing the required parameter 'paymentDelete' when calling deletePayment");
      }

      let pathParams = {
        'PaymentID': paymentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Payments;
      return this.apiClient.callApi(
        '/Payments/{PaymentID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTrackingCategory operation.
     * @callback module:api/AccountingApi~deleteTrackingCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackingCategories} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specific tracking category
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} trackingCategoryID Unique identifier for a TrackingCategory
     * @param {module:api/AccountingApi~deleteTrackingCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackingCategories}
     */
    deleteTrackingCategory(xeroTenantId, trackingCategoryID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling deleteTrackingCategory");
      }
      // verify the required parameter 'trackingCategoryID' is set
      if (trackingCategoryID === undefined || trackingCategoryID === null) {
        throw new Error("Missing the required parameter 'trackingCategoryID' when calling deleteTrackingCategory");
      }

      let pathParams = {
        'TrackingCategoryID': trackingCategoryID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackingCategories;
      return this.apiClient.callApi(
        '/TrackingCategories/{TrackingCategoryID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTrackingOptions operation.
     * @callback module:api/AccountingApi~deleteTrackingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackingOptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specific option for a specific tracking category
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} trackingCategoryID Unique identifier for a TrackingCategory
     * @param {String} trackingOptionID Unique identifier for a Tracking Option
     * @param {module:api/AccountingApi~deleteTrackingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackingOptions}
     */
    deleteTrackingOptions(xeroTenantId, trackingCategoryID, trackingOptionID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling deleteTrackingOptions");
      }
      // verify the required parameter 'trackingCategoryID' is set
      if (trackingCategoryID === undefined || trackingCategoryID === null) {
        throw new Error("Missing the required parameter 'trackingCategoryID' when calling deleteTrackingOptions");
      }
      // verify the required parameter 'trackingOptionID' is set
      if (trackingOptionID === undefined || trackingOptionID === null) {
        throw new Error("Missing the required parameter 'trackingOptionID' when calling deleteTrackingOptions");
      }

      let pathParams = {
        'TrackingCategoryID': trackingCategoryID,
        'TrackingOptionID': trackingOptionID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackingOptions;
      return this.apiClient.callApi(
        '/TrackingCategories/{TrackingCategoryID}/Options/{TrackingOptionID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the emailInvoice operation.
     * @callback module:api/AccountingApi~emailInvoiceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a copy of a specific invoice to related contact via email
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} invoiceID Unique identifier for an Invoice
     * @param {module:model/RequestEmpty} requestEmpty 
     * @param {module:api/AccountingApi~emailInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    emailInvoice(xeroTenantId, invoiceID, requestEmpty, callback) {
      let postBody = requestEmpty;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling emailInvoice");
      }
      // verify the required parameter 'invoiceID' is set
      if (invoiceID === undefined || invoiceID === null) {
        throw new Error("Missing the required parameter 'invoiceID' when calling emailInvoice");
      }
      // verify the required parameter 'requestEmpty' is set
      if (requestEmpty === undefined || requestEmpty === null) {
        throw new Error("Missing the required parameter 'requestEmpty' when calling emailInvoice");
      }

      let pathParams = {
        'InvoiceID': invoiceID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Invoices/{InvoiceID}/Email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccount operation.
     * @callback module:api/AccountingApi~getAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Accounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a single chart of accounts by using a unique account Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} accountID Unique identifier for retrieving single object
     * @param {module:api/AccountingApi~getAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Accounts}
     */
    getAccount(xeroTenantId, accountID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getAccount");
      }
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling getAccount");
      }

      let pathParams = {
        'AccountID': accountID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Accounts;
      return this.apiClient.callApi(
        '/Accounts/{AccountID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountAttachmentByFileName operation.
     * @callback module:api/AccountingApi~getAccountAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an attachment for a specific account by filename
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} accountID Unique identifier for Account object
     * @param {String} fileName Name of the attachment
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getAccountAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getAccountAttachmentByFileName(xeroTenantId, accountID, fileName, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getAccountAttachmentByFileName");
      }
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling getAccountAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getAccountAttachmentByFileName");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getAccountAttachmentByFileName");
      }

      let pathParams = {
        'AccountID': accountID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Accounts/{AccountID}/Attachments/{FileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountAttachmentById operation.
     * @callback module:api/AccountingApi~getAccountAttachmentByIdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific attachment from a specific account using a unique attachment Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} accountID Unique identifier for Account object
     * @param {String} attachmentID Unique identifier for Attachment object
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getAccountAttachmentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getAccountAttachmentById(xeroTenantId, accountID, attachmentID, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getAccountAttachmentById");
      }
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling getAccountAttachmentById");
      }
      // verify the required parameter 'attachmentID' is set
      if (attachmentID === undefined || attachmentID === null) {
        throw new Error("Missing the required parameter 'attachmentID' when calling getAccountAttachmentById");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getAccountAttachmentById");
      }

      let pathParams = {
        'AccountID': accountID,
        'AttachmentID': attachmentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Accounts/{AccountID}/Attachments/{AttachmentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountAttachments operation.
     * @callback module:api/AccountingApi~getAccountAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves attachments for a specific accounts by using a unique account Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} accountID Unique identifier for Account object
     * @param {module:api/AccountingApi~getAccountAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    getAccountAttachments(xeroTenantId, accountID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getAccountAttachments");
      }
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling getAccountAttachments");
      }

      let pathParams = {
        'AccountID': accountID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/Accounts/{AccountID}/Attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccounts operation.
     * @callback module:api/AccountingApi~getAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Accounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the full chart of accounts
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {module:api/AccountingApi~getAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Accounts}
     */
    getAccounts(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getAccounts");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Accounts;
      return this.apiClient.callApi(
        '/Accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankTransaction operation.
     * @callback module:api/AccountingApi~getBankTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankTransactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a single spent or received money transaction by using a unique bank transaction Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} bankTransactionID Xero generated unique identifier for a bank transaction
     * @param {Object} opts Optional parameters
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~getBankTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankTransactions}
     */
    getBankTransaction(xeroTenantId, bankTransactionID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getBankTransaction");
      }
      // verify the required parameter 'bankTransactionID' is set
      if (bankTransactionID === undefined || bankTransactionID === null) {
        throw new Error("Missing the required parameter 'bankTransactionID' when calling getBankTransaction");
      }

      let pathParams = {
        'BankTransactionID': bankTransactionID
      };
      let queryParams = {
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BankTransactions;
      return this.apiClient.callApi(
        '/BankTransactions/{BankTransactionID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankTransactionAttachmentByFileName operation.
     * @callback module:api/AccountingApi~getBankTransactionAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific attachment from a specific bank transaction by filename
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} bankTransactionID Xero generated unique identifier for a bank transaction
     * @param {String} fileName The name of the file being attached
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getBankTransactionAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getBankTransactionAttachmentByFileName(xeroTenantId, bankTransactionID, fileName, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getBankTransactionAttachmentByFileName");
      }
      // verify the required parameter 'bankTransactionID' is set
      if (bankTransactionID === undefined || bankTransactionID === null) {
        throw new Error("Missing the required parameter 'bankTransactionID' when calling getBankTransactionAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getBankTransactionAttachmentByFileName");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getBankTransactionAttachmentByFileName");
      }

      let pathParams = {
        'BankTransactionID': bankTransactionID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/BankTransactions/{BankTransactionID}/Attachments/{FileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankTransactionAttachmentById operation.
     * @callback module:api/AccountingApi~getBankTransactionAttachmentByIdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves specific attachments from a specific BankTransaction using a unique attachment Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} bankTransactionID Xero generated unique identifier for a bank transaction
     * @param {String} attachmentID Xero generated unique identifier for an attachment
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getBankTransactionAttachmentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getBankTransactionAttachmentById(xeroTenantId, bankTransactionID, attachmentID, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getBankTransactionAttachmentById");
      }
      // verify the required parameter 'bankTransactionID' is set
      if (bankTransactionID === undefined || bankTransactionID === null) {
        throw new Error("Missing the required parameter 'bankTransactionID' when calling getBankTransactionAttachmentById");
      }
      // verify the required parameter 'attachmentID' is set
      if (attachmentID === undefined || attachmentID === null) {
        throw new Error("Missing the required parameter 'attachmentID' when calling getBankTransactionAttachmentById");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getBankTransactionAttachmentById");
      }

      let pathParams = {
        'BankTransactionID': bankTransactionID,
        'AttachmentID': attachmentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/BankTransactions/{BankTransactionID}/Attachments/{AttachmentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankTransactionAttachments operation.
     * @callback module:api/AccountingApi~getBankTransactionAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves any attachments from a specific bank transactions
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} bankTransactionID Xero generated unique identifier for a bank transaction
     * @param {module:api/AccountingApi~getBankTransactionAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    getBankTransactionAttachments(xeroTenantId, bankTransactionID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getBankTransactionAttachments");
      }
      // verify the required parameter 'bankTransactionID' is set
      if (bankTransactionID === undefined || bankTransactionID === null) {
        throw new Error("Missing the required parameter 'bankTransactionID' when calling getBankTransactionAttachments");
      }

      let pathParams = {
        'BankTransactionID': bankTransactionID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/BankTransactions/{BankTransactionID}/Attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankTransactions operation.
     * @callback module:api/AccountingApi~getBankTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankTransactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves any spent or received money transactions
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {Number} [page] Up to 100 bank transactions will be returned in a single API call with line items details
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~getBankTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankTransactions}
     */
    getBankTransactions(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getBankTransactions");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'page': opts['page'],
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BankTransactions;
      return this.apiClient.callApi(
        '/BankTransactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankTransactionsHistory operation.
     * @callback module:api/AccountingApi~getBankTransactionsHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves history from a specific bank transaction using a unique bank transaction Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} bankTransactionID Xero generated unique identifier for a bank transaction
     * @param {module:api/AccountingApi~getBankTransactionsHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    getBankTransactionsHistory(xeroTenantId, bankTransactionID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getBankTransactionsHistory");
      }
      // verify the required parameter 'bankTransactionID' is set
      if (bankTransactionID === undefined || bankTransactionID === null) {
        throw new Error("Missing the required parameter 'bankTransactionID' when calling getBankTransactionsHistory");
      }

      let pathParams = {
        'BankTransactionID': bankTransactionID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/BankTransactions/{BankTransactionID}/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankTransfer operation.
     * @callback module:api/AccountingApi~getBankTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankTransfers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves specific bank transfers by using a unique bank transfer Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} bankTransferID Xero generated unique identifier for a bank transfer
     * @param {module:api/AccountingApi~getBankTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankTransfers}
     */
    getBankTransfer(xeroTenantId, bankTransferID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getBankTransfer");
      }
      // verify the required parameter 'bankTransferID' is set
      if (bankTransferID === undefined || bankTransferID === null) {
        throw new Error("Missing the required parameter 'bankTransferID' when calling getBankTransfer");
      }

      let pathParams = {
        'BankTransferID': bankTransferID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BankTransfers;
      return this.apiClient.callApi(
        '/BankTransfers/{BankTransferID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankTransferAttachmentByFileName operation.
     * @callback module:api/AccountingApi~getBankTransferAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific attachment on a specific bank transfer by file name
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} bankTransferID Xero generated unique identifier for a bank transfer
     * @param {String} fileName The name of the file being attached to a Bank Transfer
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getBankTransferAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getBankTransferAttachmentByFileName(xeroTenantId, bankTransferID, fileName, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getBankTransferAttachmentByFileName");
      }
      // verify the required parameter 'bankTransferID' is set
      if (bankTransferID === undefined || bankTransferID === null) {
        throw new Error("Missing the required parameter 'bankTransferID' when calling getBankTransferAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getBankTransferAttachmentByFileName");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getBankTransferAttachmentByFileName");
      }

      let pathParams = {
        'BankTransferID': bankTransferID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/BankTransfers/{BankTransferID}/Attachments/{FileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankTransferAttachmentById operation.
     * @callback module:api/AccountingApi~getBankTransferAttachmentByIdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific attachment from a specific bank transfer using a unique attachment ID
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} bankTransferID Xero generated unique identifier for a bank transfer
     * @param {String} attachmentID Xero generated unique identifier for an Attachment to a bank transfer
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getBankTransferAttachmentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getBankTransferAttachmentById(xeroTenantId, bankTransferID, attachmentID, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getBankTransferAttachmentById");
      }
      // verify the required parameter 'bankTransferID' is set
      if (bankTransferID === undefined || bankTransferID === null) {
        throw new Error("Missing the required parameter 'bankTransferID' when calling getBankTransferAttachmentById");
      }
      // verify the required parameter 'attachmentID' is set
      if (attachmentID === undefined || attachmentID === null) {
        throw new Error("Missing the required parameter 'attachmentID' when calling getBankTransferAttachmentById");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getBankTransferAttachmentById");
      }

      let pathParams = {
        'BankTransferID': bankTransferID,
        'AttachmentID': attachmentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/BankTransfers/{BankTransferID}/Attachments/{AttachmentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankTransferAttachments operation.
     * @callback module:api/AccountingApi~getBankTransferAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves attachments from a specific bank transfer
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} bankTransferID Xero generated unique identifier for a bank transfer
     * @param {module:api/AccountingApi~getBankTransferAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    getBankTransferAttachments(xeroTenantId, bankTransferID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getBankTransferAttachments");
      }
      // verify the required parameter 'bankTransferID' is set
      if (bankTransferID === undefined || bankTransferID === null) {
        throw new Error("Missing the required parameter 'bankTransferID' when calling getBankTransferAttachments");
      }

      let pathParams = {
        'BankTransferID': bankTransferID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/BankTransfers/{BankTransferID}/Attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankTransferHistory operation.
     * @callback module:api/AccountingApi~getBankTransferHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves history from a specific bank transfer using a unique bank transfer Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} bankTransferID Xero generated unique identifier for a bank transfer
     * @param {module:api/AccountingApi~getBankTransferHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    getBankTransferHistory(xeroTenantId, bankTransferID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getBankTransferHistory");
      }
      // verify the required parameter 'bankTransferID' is set
      if (bankTransferID === undefined || bankTransferID === null) {
        throw new Error("Missing the required parameter 'bankTransferID' when calling getBankTransferHistory");
      }

      let pathParams = {
        'BankTransferID': bankTransferID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/BankTransfers/{BankTransferID}/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankTransfers operation.
     * @callback module:api/AccountingApi~getBankTransfersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankTransfers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all bank transfers
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {module:api/AccountingApi~getBankTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankTransfers}
     */
    getBankTransfers(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getBankTransfers");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BankTransfers;
      return this.apiClient.callApi(
        '/BankTransfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBatchPaymentHistory operation.
     * @callback module:api/AccountingApi~getBatchPaymentHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves history from a specific batch payment
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} batchPaymentID Unique identifier for BatchPayment
     * @param {module:api/AccountingApi~getBatchPaymentHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    getBatchPaymentHistory(xeroTenantId, batchPaymentID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getBatchPaymentHistory");
      }
      // verify the required parameter 'batchPaymentID' is set
      if (batchPaymentID === undefined || batchPaymentID === null) {
        throw new Error("Missing the required parameter 'batchPaymentID' when calling getBatchPaymentHistory");
      }

      let pathParams = {
        'BatchPaymentID': batchPaymentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/BatchPayments/{BatchPaymentID}/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBatchPayments operation.
     * @callback module:api/AccountingApi~getBatchPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPayments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves either one or many batch payments for invoices
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {module:api/AccountingApi~getBatchPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPayments}
     */
    getBatchPayments(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getBatchPayments");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatchPayments;
      return this.apiClient.callApi(
        '/BatchPayments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBrandingTheme operation.
     * @callback module:api/AccountingApi~getBrandingThemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrandingThemes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific branding theme using a unique branding theme Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} brandingThemeID Unique identifier for a Branding Theme
     * @param {module:api/AccountingApi~getBrandingThemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrandingThemes}
     */
    getBrandingTheme(xeroTenantId, brandingThemeID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getBrandingTheme");
      }
      // verify the required parameter 'brandingThemeID' is set
      if (brandingThemeID === undefined || brandingThemeID === null) {
        throw new Error("Missing the required parameter 'brandingThemeID' when calling getBrandingTheme");
      }

      let pathParams = {
        'BrandingThemeID': brandingThemeID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BrandingThemes;
      return this.apiClient.callApi(
        '/BrandingThemes/{BrandingThemeID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBrandingThemePaymentServices operation.
     * @callback module:api/AccountingApi~getBrandingThemePaymentServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentServices} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the payment services for a specific branding theme
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} brandingThemeID Unique identifier for a Branding Theme
     * @param {module:api/AccountingApi~getBrandingThemePaymentServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentServices}
     */
    getBrandingThemePaymentServices(xeroTenantId, brandingThemeID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getBrandingThemePaymentServices");
      }
      // verify the required parameter 'brandingThemeID' is set
      if (brandingThemeID === undefined || brandingThemeID === null) {
        throw new Error("Missing the required parameter 'brandingThemeID' when calling getBrandingThemePaymentServices");
      }

      let pathParams = {
        'BrandingThemeID': brandingThemeID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentServices;
      return this.apiClient.callApi(
        '/BrandingThemes/{BrandingThemeID}/PaymentServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBrandingThemes operation.
     * @callback module:api/AccountingApi~getBrandingThemesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrandingThemes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all the branding themes
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:api/AccountingApi~getBrandingThemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrandingThemes}
     */
    getBrandingThemes(xeroTenantId, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getBrandingThemes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BrandingThemes;
      return this.apiClient.callApi(
        '/BrandingThemes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContact operation.
     * @callback module:api/AccountingApi~getContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contacts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific contacts in a Xero organisation using a unique contact Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} contactID Unique identifier for a Contact
     * @param {module:api/AccountingApi~getContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contacts}
     */
    getContact(xeroTenantId, contactID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getContact");
      }
      // verify the required parameter 'contactID' is set
      if (contactID === undefined || contactID === null) {
        throw new Error("Missing the required parameter 'contactID' when calling getContact");
      }

      let pathParams = {
        'ContactID': contactID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Contacts;
      return this.apiClient.callApi(
        '/Contacts/{ContactID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactAttachmentByFileName operation.
     * @callback module:api/AccountingApi~getContactAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific attachment from a specific contact by file name
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} contactID Unique identifier for a Contact
     * @param {String} fileName Name for the file you are attaching
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getContactAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getContactAttachmentByFileName(xeroTenantId, contactID, fileName, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getContactAttachmentByFileName");
      }
      // verify the required parameter 'contactID' is set
      if (contactID === undefined || contactID === null) {
        throw new Error("Missing the required parameter 'contactID' when calling getContactAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getContactAttachmentByFileName");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getContactAttachmentByFileName");
      }

      let pathParams = {
        'ContactID': contactID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Contacts/{ContactID}/Attachments/{FileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactAttachmentById operation.
     * @callback module:api/AccountingApi~getContactAttachmentByIdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific attachment from a specific contact using a unique attachment Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} contactID Unique identifier for a Contact
     * @param {String} attachmentID Unique identifier for a Attachment
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getContactAttachmentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getContactAttachmentById(xeroTenantId, contactID, attachmentID, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getContactAttachmentById");
      }
      // verify the required parameter 'contactID' is set
      if (contactID === undefined || contactID === null) {
        throw new Error("Missing the required parameter 'contactID' when calling getContactAttachmentById");
      }
      // verify the required parameter 'attachmentID' is set
      if (attachmentID === undefined || attachmentID === null) {
        throw new Error("Missing the required parameter 'attachmentID' when calling getContactAttachmentById");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getContactAttachmentById");
      }

      let pathParams = {
        'ContactID': contactID,
        'AttachmentID': attachmentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Contacts/{ContactID}/Attachments/{AttachmentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactAttachments operation.
     * @callback module:api/AccountingApi~getContactAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves attachments for a specific contact in a Xero organisation
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} contactID Unique identifier for a Contact
     * @param {module:api/AccountingApi~getContactAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    getContactAttachments(xeroTenantId, contactID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getContactAttachments");
      }
      // verify the required parameter 'contactID' is set
      if (contactID === undefined || contactID === null) {
        throw new Error("Missing the required parameter 'contactID' when calling getContactAttachments");
      }

      let pathParams = {
        'ContactID': contactID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/Contacts/{ContactID}/Attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactByContactNumber operation.
     * @callback module:api/AccountingApi~getContactByContactNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contacts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific contact by contact number in a Xero organisation
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} contactNumber This field is read only on the Xero contact screen, used to identify contacts in external systems (max length = 50).
     * @param {module:api/AccountingApi~getContactByContactNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contacts}
     */
    getContactByContactNumber(xeroTenantId, contactNumber, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getContactByContactNumber");
      }
      // verify the required parameter 'contactNumber' is set
      if (contactNumber === undefined || contactNumber === null) {
        throw new Error("Missing the required parameter 'contactNumber' when calling getContactByContactNumber");
      }

      let pathParams = {
        'ContactNumber': contactNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Contacts;
      return this.apiClient.callApi(
        '/Contacts/{ContactNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactCISSettings operation.
     * @callback module:api/AccountingApi~getContactCISSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CISSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves CIS settings for a specific contact in a Xero organisation
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} contactID Unique identifier for a Contact
     * @param {module:api/AccountingApi~getContactCISSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CISSettings}
     */
    getContactCISSettings(xeroTenantId, contactID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getContactCISSettings");
      }
      // verify the required parameter 'contactID' is set
      if (contactID === undefined || contactID === null) {
        throw new Error("Missing the required parameter 'contactID' when calling getContactCISSettings");
      }

      let pathParams = {
        'ContactID': contactID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CISSettings;
      return this.apiClient.callApi(
        '/Contacts/{ContactID}/CISSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactGroup operation.
     * @callback module:api/AccountingApi~getContactGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactGroups} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific contact group by using a unique contact group Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} contactGroupID Unique identifier for a Contact Group
     * @param {module:api/AccountingApi~getContactGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactGroups}
     */
    getContactGroup(xeroTenantId, contactGroupID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getContactGroup");
      }
      // verify the required parameter 'contactGroupID' is set
      if (contactGroupID === undefined || contactGroupID === null) {
        throw new Error("Missing the required parameter 'contactGroupID' when calling getContactGroup");
      }

      let pathParams = {
        'ContactGroupID': contactGroupID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactGroups;
      return this.apiClient.callApi(
        '/ContactGroups/{ContactGroupID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactGroups operation.
     * @callback module:api/AccountingApi~getContactGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactGroups} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the contact Id and name of all the contacts in a contact group
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {module:api/AccountingApi~getContactGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactGroups}
     */
    getContactGroups(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getContactGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactGroups;
      return this.apiClient.callApi(
        '/ContactGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactHistory operation.
     * @callback module:api/AccountingApi~getContactHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves history records for a specific contact
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} contactID Unique identifier for a Contact
     * @param {module:api/AccountingApi~getContactHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    getContactHistory(xeroTenantId, contactID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getContactHistory");
      }
      // verify the required parameter 'contactID' is set
      if (contactID === undefined || contactID === null) {
        throw new Error("Missing the required parameter 'contactID' when calling getContactHistory");
      }

      let pathParams = {
        'ContactID': contactID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/Contacts/{ContactID}/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContacts operation.
     * @callback module:api/AccountingApi~getContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contacts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all contacts in a Xero organisation
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {Array.<String>} [iDs] Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call.
     * @param {Number} [page] e.g. page=1 - Up to 100 contacts will be returned in a single API call.
     * @param {Boolean} [includeArchived] e.g. includeArchived=true - Contacts with a status of ARCHIVED will be included in the response
     * @param {module:api/AccountingApi~getContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contacts}
     */
    getContacts(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getContacts");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'IDs': this.apiClient.buildCollectionParam(opts['iDs'], 'csv'),
        'page': opts['page'],
        'includeArchived': opts['includeArchived']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Contacts;
      return this.apiClient.callApi(
        '/Contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditNote operation.
     * @callback module:api/AccountingApi~getCreditNoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditNotes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific credit note using a unique credit note Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} creditNoteID Unique identifier for a Credit Note
     * @param {Object} opts Optional parameters
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~getCreditNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditNotes}
     */
    getCreditNote(xeroTenantId, creditNoteID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getCreditNote");
      }
      // verify the required parameter 'creditNoteID' is set
      if (creditNoteID === undefined || creditNoteID === null) {
        throw new Error("Missing the required parameter 'creditNoteID' when calling getCreditNote");
      }

      let pathParams = {
        'CreditNoteID': creditNoteID
      };
      let queryParams = {
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreditNotes;
      return this.apiClient.callApi(
        '/CreditNotes/{CreditNoteID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditNoteAsPdf operation.
     * @callback module:api/AccountingApi~getCreditNoteAsPdfCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves credit notes as PDF files
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} creditNoteID Unique identifier for a Credit Note
     * @param {module:api/AccountingApi~getCreditNoteAsPdfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getCreditNoteAsPdf(xeroTenantId, creditNoteID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getCreditNoteAsPdf");
      }
      // verify the required parameter 'creditNoteID' is set
      if (creditNoteID === undefined || creditNoteID === null) {
        throw new Error("Missing the required parameter 'creditNoteID' when calling getCreditNoteAsPdf");
      }

      let pathParams = {
        'CreditNoteID': creditNoteID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/pdf'];
      let returnType = File;
      return this.apiClient.callApi(
        '/CreditNotes/{CreditNoteID}/pdf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditNoteAttachmentByFileName operation.
     * @callback module:api/AccountingApi~getCreditNoteAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific attachment on a specific credit note by file name
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} creditNoteID Unique identifier for a Credit Note
     * @param {String} fileName Name of the file you are attaching to Credit Note
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getCreditNoteAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getCreditNoteAttachmentByFileName(xeroTenantId, creditNoteID, fileName, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getCreditNoteAttachmentByFileName");
      }
      // verify the required parameter 'creditNoteID' is set
      if (creditNoteID === undefined || creditNoteID === null) {
        throw new Error("Missing the required parameter 'creditNoteID' when calling getCreditNoteAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getCreditNoteAttachmentByFileName");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getCreditNoteAttachmentByFileName");
      }

      let pathParams = {
        'CreditNoteID': creditNoteID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/CreditNotes/{CreditNoteID}/Attachments/{FileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditNoteAttachmentById operation.
     * @callback module:api/AccountingApi~getCreditNoteAttachmentByIdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific attachment from a specific credit note using a unique attachment Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} creditNoteID Unique identifier for a Credit Note
     * @param {String} attachmentID Unique identifier for a Attachment
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getCreditNoteAttachmentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getCreditNoteAttachmentById(xeroTenantId, creditNoteID, attachmentID, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getCreditNoteAttachmentById");
      }
      // verify the required parameter 'creditNoteID' is set
      if (creditNoteID === undefined || creditNoteID === null) {
        throw new Error("Missing the required parameter 'creditNoteID' when calling getCreditNoteAttachmentById");
      }
      // verify the required parameter 'attachmentID' is set
      if (attachmentID === undefined || attachmentID === null) {
        throw new Error("Missing the required parameter 'attachmentID' when calling getCreditNoteAttachmentById");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getCreditNoteAttachmentById");
      }

      let pathParams = {
        'CreditNoteID': creditNoteID,
        'AttachmentID': attachmentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/CreditNotes/{CreditNoteID}/Attachments/{AttachmentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditNoteAttachments operation.
     * @callback module:api/AccountingApi~getCreditNoteAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves attachments for a specific credit notes
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} creditNoteID Unique identifier for a Credit Note
     * @param {module:api/AccountingApi~getCreditNoteAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    getCreditNoteAttachments(xeroTenantId, creditNoteID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getCreditNoteAttachments");
      }
      // verify the required parameter 'creditNoteID' is set
      if (creditNoteID === undefined || creditNoteID === null) {
        throw new Error("Missing the required parameter 'creditNoteID' when calling getCreditNoteAttachments");
      }

      let pathParams = {
        'CreditNoteID': creditNoteID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/CreditNotes/{CreditNoteID}/Attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditNoteHistory operation.
     * @callback module:api/AccountingApi~getCreditNoteHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves history records of a specific credit note
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} creditNoteID Unique identifier for a Credit Note
     * @param {module:api/AccountingApi~getCreditNoteHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    getCreditNoteHistory(xeroTenantId, creditNoteID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getCreditNoteHistory");
      }
      // verify the required parameter 'creditNoteID' is set
      if (creditNoteID === undefined || creditNoteID === null) {
        throw new Error("Missing the required parameter 'creditNoteID' when calling getCreditNoteHistory");
      }

      let pathParams = {
        'CreditNoteID': creditNoteID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/CreditNotes/{CreditNoteID}/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditNotes operation.
     * @callback module:api/AccountingApi~getCreditNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditNotes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves any credit notes
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {Number} [page] e.g. page=1 – Up to 100 credit notes will be returned in a single API call with line items shown for each credit note
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~getCreditNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditNotes}
     */
    getCreditNotes(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getCreditNotes");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'page': opts['page'],
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreditNotes;
      return this.apiClient.callApi(
        '/CreditNotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrencies operation.
     * @callback module:api/AccountingApi~getCurrenciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Currencies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves currencies for your Xero organisation
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {module:api/AccountingApi~getCurrenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Currencies}
     */
    getCurrencies(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getCurrencies");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Currencies;
      return this.apiClient.callApi(
        '/Currencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployee operation.
     * @callback module:api/AccountingApi~getEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Employees} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific employee used in Xero payrun using a unique employee Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} employeeID Unique identifier for a Employee
     * @param {module:api/AccountingApi~getEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Employees}
     */
    getEmployee(xeroTenantId, employeeID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getEmployee");
      }
      // verify the required parameter 'employeeID' is set
      if (employeeID === undefined || employeeID === null) {
        throw new Error("Missing the required parameter 'employeeID' when calling getEmployee");
      }

      let pathParams = {
        'EmployeeID': employeeID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Employees;
      return this.apiClient.callApi(
        '/Employees/{EmployeeID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployees operation.
     * @callback module:api/AccountingApi~getEmployeesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Employees} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves employees used in Xero payrun
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {module:api/AccountingApi~getEmployeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Employees}
     */
    getEmployees(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getEmployees");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Employees;
      return this.apiClient.callApi(
        '/Employees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpenseClaim operation.
     * @callback module:api/AccountingApi~getExpenseClaimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpenseClaims} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific expense claim using a unique expense claim Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} expenseClaimID Unique identifier for a ExpenseClaim
     * @param {module:api/AccountingApi~getExpenseClaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpenseClaims}
     */
    getExpenseClaim(xeroTenantId, expenseClaimID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getExpenseClaim");
      }
      // verify the required parameter 'expenseClaimID' is set
      if (expenseClaimID === undefined || expenseClaimID === null) {
        throw new Error("Missing the required parameter 'expenseClaimID' when calling getExpenseClaim");
      }

      let pathParams = {
        'ExpenseClaimID': expenseClaimID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExpenseClaims;
      return this.apiClient.callApi(
        '/ExpenseClaims/{ExpenseClaimID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpenseClaimHistory operation.
     * @callback module:api/AccountingApi~getExpenseClaimHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves history records of a specific expense claim
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} expenseClaimID Unique identifier for a ExpenseClaim
     * @param {module:api/AccountingApi~getExpenseClaimHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    getExpenseClaimHistory(xeroTenantId, expenseClaimID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getExpenseClaimHistory");
      }
      // verify the required parameter 'expenseClaimID' is set
      if (expenseClaimID === undefined || expenseClaimID === null) {
        throw new Error("Missing the required parameter 'expenseClaimID' when calling getExpenseClaimHistory");
      }

      let pathParams = {
        'ExpenseClaimID': expenseClaimID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/ExpenseClaims/{ExpenseClaimID}/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpenseClaims operation.
     * @callback module:api/AccountingApi~getExpenseClaimsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpenseClaims} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves expense claims
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {module:api/AccountingApi~getExpenseClaimsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpenseClaims}
     */
    getExpenseClaims(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getExpenseClaims");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExpenseClaims;
      return this.apiClient.callApi(
        '/ExpenseClaims', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvoice operation.
     * @callback module:api/AccountingApi~getInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invoices} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific sales invoice or purchase bill using a unique invoice Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} invoiceID Unique identifier for an Invoice
     * @param {Object} opts Optional parameters
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~getInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invoices}
     */
    getInvoice(xeroTenantId, invoiceID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getInvoice");
      }
      // verify the required parameter 'invoiceID' is set
      if (invoiceID === undefined || invoiceID === null) {
        throw new Error("Missing the required parameter 'invoiceID' when calling getInvoice");
      }

      let pathParams = {
        'InvoiceID': invoiceID
      };
      let queryParams = {
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Invoices;
      return this.apiClient.callApi(
        '/Invoices/{InvoiceID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvoiceAsPdf operation.
     * @callback module:api/AccountingApi~getInvoiceAsPdfCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves invoices or purchase bills as PDF files
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} invoiceID Unique identifier for an Invoice
     * @param {module:api/AccountingApi~getInvoiceAsPdfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getInvoiceAsPdf(xeroTenantId, invoiceID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getInvoiceAsPdf");
      }
      // verify the required parameter 'invoiceID' is set
      if (invoiceID === undefined || invoiceID === null) {
        throw new Error("Missing the required parameter 'invoiceID' when calling getInvoiceAsPdf");
      }

      let pathParams = {
        'InvoiceID': invoiceID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/pdf'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Invoices/{InvoiceID}/pdf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvoiceAttachmentByFileName operation.
     * @callback module:api/AccountingApi~getInvoiceAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an attachment from a specific invoice or purchase bill by filename
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} invoiceID Unique identifier for an Invoice
     * @param {String} fileName Name of the file you are attaching
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getInvoiceAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getInvoiceAttachmentByFileName(xeroTenantId, invoiceID, fileName, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getInvoiceAttachmentByFileName");
      }
      // verify the required parameter 'invoiceID' is set
      if (invoiceID === undefined || invoiceID === null) {
        throw new Error("Missing the required parameter 'invoiceID' when calling getInvoiceAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getInvoiceAttachmentByFileName");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getInvoiceAttachmentByFileName");
      }

      let pathParams = {
        'InvoiceID': invoiceID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Invoices/{InvoiceID}/Attachments/{FileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvoiceAttachmentById operation.
     * @callback module:api/AccountingApi~getInvoiceAttachmentByIdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} invoiceID Unique identifier for an Invoice
     * @param {String} attachmentID Unique identifier for an Attachment
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getInvoiceAttachmentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getInvoiceAttachmentById(xeroTenantId, invoiceID, attachmentID, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getInvoiceAttachmentById");
      }
      // verify the required parameter 'invoiceID' is set
      if (invoiceID === undefined || invoiceID === null) {
        throw new Error("Missing the required parameter 'invoiceID' when calling getInvoiceAttachmentById");
      }
      // verify the required parameter 'attachmentID' is set
      if (attachmentID === undefined || attachmentID === null) {
        throw new Error("Missing the required parameter 'attachmentID' when calling getInvoiceAttachmentById");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getInvoiceAttachmentById");
      }

      let pathParams = {
        'InvoiceID': invoiceID,
        'AttachmentID': attachmentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Invoices/{InvoiceID}/Attachments/{AttachmentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvoiceAttachments operation.
     * @callback module:api/AccountingApi~getInvoiceAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves attachments for a specific invoice or purchase bill
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} invoiceID Unique identifier for an Invoice
     * @param {module:api/AccountingApi~getInvoiceAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    getInvoiceAttachments(xeroTenantId, invoiceID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getInvoiceAttachments");
      }
      // verify the required parameter 'invoiceID' is set
      if (invoiceID === undefined || invoiceID === null) {
        throw new Error("Missing the required parameter 'invoiceID' when calling getInvoiceAttachments");
      }

      let pathParams = {
        'InvoiceID': invoiceID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/Invoices/{InvoiceID}/Attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvoiceHistory operation.
     * @callback module:api/AccountingApi~getInvoiceHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves history records for a specific invoice
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} invoiceID Unique identifier for an Invoice
     * @param {module:api/AccountingApi~getInvoiceHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    getInvoiceHistory(xeroTenantId, invoiceID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getInvoiceHistory");
      }
      // verify the required parameter 'invoiceID' is set
      if (invoiceID === undefined || invoiceID === null) {
        throw new Error("Missing the required parameter 'invoiceID' when calling getInvoiceHistory");
      }

      let pathParams = {
        'InvoiceID': invoiceID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/Invoices/{InvoiceID}/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvoiceReminders operation.
     * @callback module:api/AccountingApi~getInvoiceRemindersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceReminders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves invoice reminder settings
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:api/AccountingApi~getInvoiceRemindersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceReminders}
     */
    getInvoiceReminders(xeroTenantId, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getInvoiceReminders");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InvoiceReminders;
      return this.apiClient.callApi(
        '/InvoiceReminders/Settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvoices operation.
     * @callback module:api/AccountingApi~getInvoicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invoices} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves sales invoices or purchase bills
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {Array.<String>} [iDs] Filter by a comma-separated list of InvoicesIDs.
     * @param {Array.<String>} [invoiceNumbers] Filter by a comma-separated list of InvoiceNumbers.
     * @param {Array.<String>} [contactIDs] Filter by a comma-separated list of ContactIDs.
     * @param {Array.<String>} [statuses] Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter.
     * @param {Number} [page] e.g. page=1 – Up to 100 invoices will be returned in a single API call with line items shown for each invoice
     * @param {Boolean} [includeArchived] e.g. includeArchived=true - Contacts with a status of ARCHIVED will be included in the response
     * @param {Boolean} [createdByMyApp] When set to true you'll only retrieve Invoices created by your app
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~getInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invoices}
     */
    getInvoices(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getInvoices");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'IDs': this.apiClient.buildCollectionParam(opts['iDs'], 'csv'),
        'InvoiceNumbers': this.apiClient.buildCollectionParam(opts['invoiceNumbers'], 'csv'),
        'ContactIDs': this.apiClient.buildCollectionParam(opts['contactIDs'], 'csv'),
        'Statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'csv'),
        'page': opts['page'],
        'includeArchived': opts['includeArchived'],
        'createdByMyApp': opts['createdByMyApp'],
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Invoices;
      return this.apiClient.callApi(
        '/Invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getItem operation.
     * @callback module:api/AccountingApi~getItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Items} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific item using a unique item Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} itemID Unique identifier for an Item
     * @param {Object} opts Optional parameters
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~getItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Items}
     */
    getItem(xeroTenantId, itemID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getItem");
      }
      // verify the required parameter 'itemID' is set
      if (itemID === undefined || itemID === null) {
        throw new Error("Missing the required parameter 'itemID' when calling getItem");
      }

      let pathParams = {
        'ItemID': itemID
      };
      let queryParams = {
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Items;
      return this.apiClient.callApi(
        '/Items/{ItemID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemHistory operation.
     * @callback module:api/AccountingApi~getItemHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves history for a specific item
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} itemID Unique identifier for an Item
     * @param {module:api/AccountingApi~getItemHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    getItemHistory(xeroTenantId, itemID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getItemHistory");
      }
      // verify the required parameter 'itemID' is set
      if (itemID === undefined || itemID === null) {
        throw new Error("Missing the required parameter 'itemID' when calling getItemHistory");
      }

      let pathParams = {
        'ItemID': itemID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/Items/{ItemID}/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getItems operation.
     * @callback module:api/AccountingApi~getItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Items} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves items
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~getItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Items}
     */
    getItems(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getItems");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Items;
      return this.apiClient.callApi(
        '/Items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJournal operation.
     * @callback module:api/AccountingApi~getJournalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Journals} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific journal using a unique journal Id.
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} journalID Unique identifier for a Journal
     * @param {module:api/AccountingApi~getJournalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Journals}
     */
    getJournal(xeroTenantId, journalID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getJournal");
      }
      // verify the required parameter 'journalID' is set
      if (journalID === undefined || journalID === null) {
        throw new Error("Missing the required parameter 'journalID' when calling getJournal");
      }

      let pathParams = {
        'JournalID': journalID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Journals;
      return this.apiClient.callApi(
        '/Journals/{JournalID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJournals operation.
     * @callback module:api/AccountingApi~getJournalsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Journals} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves journals
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {Number} [offset] Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned
     * @param {Boolean} [paymentsOnly] Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default.
     * @param {module:api/AccountingApi~getJournalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Journals}
     */
    getJournals(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getJournals");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'paymentsOnly': opts['paymentsOnly']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Journals;
      return this.apiClient.callApi(
        '/Journals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLinkedTransaction operation.
     * @callback module:api/AccountingApi~getLinkedTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkedTransactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} linkedTransactionID Unique identifier for a LinkedTransaction
     * @param {module:api/AccountingApi~getLinkedTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkedTransactions}
     */
    getLinkedTransaction(xeroTenantId, linkedTransactionID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getLinkedTransaction");
      }
      // verify the required parameter 'linkedTransactionID' is set
      if (linkedTransactionID === undefined || linkedTransactionID === null) {
        throw new Error("Missing the required parameter 'linkedTransactionID' when calling getLinkedTransaction");
      }

      let pathParams = {
        'LinkedTransactionID': linkedTransactionID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkedTransactions;
      return this.apiClient.callApi(
        '/LinkedTransactions/{LinkedTransactionID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLinkedTransactions operation.
     * @callback module:api/AccountingApi~getLinkedTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkedTransactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves linked transactions (billable expenses)
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page=1.
     * @param {String} [linkedTransactionID] The Xero identifier for an Linked Transaction
     * @param {String} [sourceTransactionID] Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice
     * @param {String} [contactID] Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer.
     * @param {String} [status] Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status
     * @param {String} [targetTransactionID] Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice
     * @param {module:api/AccountingApi~getLinkedTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkedTransactions}
     */
    getLinkedTransactions(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getLinkedTransactions");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'LinkedTransactionID': opts['linkedTransactionID'],
        'SourceTransactionID': opts['sourceTransactionID'],
        'ContactID': opts['contactID'],
        'Status': opts['status'],
        'TargetTransactionID': opts['targetTransactionID']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkedTransactions;
      return this.apiClient.callApi(
        '/LinkedTransactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getManualJournal operation.
     * @callback module:api/AccountingApi~getManualJournalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManualJournals} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific manual journal
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} manualJournalID Unique identifier for a ManualJournal
     * @param {module:api/AccountingApi~getManualJournalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManualJournals}
     */
    getManualJournal(xeroTenantId, manualJournalID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getManualJournal");
      }
      // verify the required parameter 'manualJournalID' is set
      if (manualJournalID === undefined || manualJournalID === null) {
        throw new Error("Missing the required parameter 'manualJournalID' when calling getManualJournal");
      }

      let pathParams = {
        'ManualJournalID': manualJournalID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManualJournals;
      return this.apiClient.callApi(
        '/ManualJournals/{ManualJournalID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getManualJournalAttachmentByFileName operation.
     * @callback module:api/AccountingApi~getManualJournalAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific attachment from a specific manual journal by file name
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} manualJournalID Unique identifier for a ManualJournal
     * @param {String} fileName The name of the file being attached to a ManualJournal
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getManualJournalAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getManualJournalAttachmentByFileName(xeroTenantId, manualJournalID, fileName, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getManualJournalAttachmentByFileName");
      }
      // verify the required parameter 'manualJournalID' is set
      if (manualJournalID === undefined || manualJournalID === null) {
        throw new Error("Missing the required parameter 'manualJournalID' when calling getManualJournalAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getManualJournalAttachmentByFileName");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getManualJournalAttachmentByFileName");
      }

      let pathParams = {
        'ManualJournalID': manualJournalID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/ManualJournals/{ManualJournalID}/Attachments/{FileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getManualJournalAttachmentById operation.
     * @callback module:api/AccountingApi~getManualJournalAttachmentByIdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} manualJournalID Unique identifier for a ManualJournal
     * @param {String} attachmentID Unique identifier for a Attachment
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getManualJournalAttachmentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getManualJournalAttachmentById(xeroTenantId, manualJournalID, attachmentID, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getManualJournalAttachmentById");
      }
      // verify the required parameter 'manualJournalID' is set
      if (manualJournalID === undefined || manualJournalID === null) {
        throw new Error("Missing the required parameter 'manualJournalID' when calling getManualJournalAttachmentById");
      }
      // verify the required parameter 'attachmentID' is set
      if (attachmentID === undefined || attachmentID === null) {
        throw new Error("Missing the required parameter 'attachmentID' when calling getManualJournalAttachmentById");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getManualJournalAttachmentById");
      }

      let pathParams = {
        'ManualJournalID': manualJournalID,
        'AttachmentID': attachmentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/ManualJournals/{ManualJournalID}/Attachments/{AttachmentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getManualJournalAttachments operation.
     * @callback module:api/AccountingApi~getManualJournalAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves attachment for a specific manual journal
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} manualJournalID Unique identifier for a ManualJournal
     * @param {module:api/AccountingApi~getManualJournalAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    getManualJournalAttachments(xeroTenantId, manualJournalID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getManualJournalAttachments");
      }
      // verify the required parameter 'manualJournalID' is set
      if (manualJournalID === undefined || manualJournalID === null) {
        throw new Error("Missing the required parameter 'manualJournalID' when calling getManualJournalAttachments");
      }

      let pathParams = {
        'ManualJournalID': manualJournalID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/ManualJournals/{ManualJournalID}/Attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getManualJournals operation.
     * @callback module:api/AccountingApi~getManualJournalsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManualJournals} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves manual journals
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {Number} [page] e.g. page=1 – Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment
     * @param {module:api/AccountingApi~getManualJournalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManualJournals}
     */
    getManualJournals(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getManualJournals");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'page': opts['page']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManualJournals;
      return this.apiClient.callApi(
        '/ManualJournals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getManualJournalsHistory operation.
     * @callback module:api/AccountingApi~getManualJournalsHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves history for a specific manual journal
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} manualJournalID Xero generated unique identifier for a manual journal
     * @param {module:api/AccountingApi~getManualJournalsHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    getManualJournalsHistory(xeroTenantId, manualJournalID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getManualJournalsHistory");
      }
      // verify the required parameter 'manualJournalID' is set
      if (manualJournalID === undefined || manualJournalID === null) {
        throw new Error("Missing the required parameter 'manualJournalID' when calling getManualJournalsHistory");
      }

      let pathParams = {
        'ManualJournalID': manualJournalID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/ManualJournals/{ManualJournalID}/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOnlineInvoice operation.
     * @callback module:api/AccountingApi~getOnlineInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnlineInvoices} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a URL to an online invoice
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} invoiceID Unique identifier for an Invoice
     * @param {module:api/AccountingApi~getOnlineInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnlineInvoices}
     */
    getOnlineInvoice(xeroTenantId, invoiceID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getOnlineInvoice");
      }
      // verify the required parameter 'invoiceID' is set
      if (invoiceID === undefined || invoiceID === null) {
        throw new Error("Missing the required parameter 'invoiceID' when calling getOnlineInvoice");
      }

      let pathParams = {
        'InvoiceID': invoiceID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OnlineInvoices;
      return this.apiClient.callApi(
        '/Invoices/{InvoiceID}/OnlineInvoice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationActions operation.
     * @callback module:api/AccountingApi~getOrganisationActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Actions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation.
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:api/AccountingApi~getOrganisationActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Actions}
     */
    getOrganisationActions(xeroTenantId, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getOrganisationActions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Actions;
      return this.apiClient.callApi(
        '/Organisation/Actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisationCISSettings operation.
     * @callback module:api/AccountingApi~getOrganisationCISSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CISOrgSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the CIS settings for the Xero organistaion.
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} organisationID The unique Xero identifier for an organisation
     * @param {module:api/AccountingApi~getOrganisationCISSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CISOrgSettings}
     */
    getOrganisationCISSettings(xeroTenantId, organisationID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getOrganisationCISSettings");
      }
      // verify the required parameter 'organisationID' is set
      if (organisationID === undefined || organisationID === null) {
        throw new Error("Missing the required parameter 'organisationID' when calling getOrganisationCISSettings");
      }

      let pathParams = {
        'OrganisationID': organisationID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CISOrgSettings;
      return this.apiClient.callApi(
        '/Organisation/{OrganisationID}/CISSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisations operation.
     * @callback module:api/AccountingApi~getOrganisationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organisations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves Xero organisation details
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:api/AccountingApi~getOrganisationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organisations}
     */
    getOrganisations(xeroTenantId, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getOrganisations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Organisations;
      return this.apiClient.callApi(
        '/Organisation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOverpayment operation.
     * @callback module:api/AccountingApi~getOverpaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Overpayments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific overpayment using a unique overpayment Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} overpaymentID Unique identifier for a Overpayment
     * @param {module:api/AccountingApi~getOverpaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Overpayments}
     */
    getOverpayment(xeroTenantId, overpaymentID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getOverpayment");
      }
      // verify the required parameter 'overpaymentID' is set
      if (overpaymentID === undefined || overpaymentID === null) {
        throw new Error("Missing the required parameter 'overpaymentID' when calling getOverpayment");
      }

      let pathParams = {
        'OverpaymentID': overpaymentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Overpayments;
      return this.apiClient.callApi(
        '/Overpayments/{OverpaymentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOverpaymentHistory operation.
     * @callback module:api/AccountingApi~getOverpaymentHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves history records of a specific overpayment
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} overpaymentID Unique identifier for a Overpayment
     * @param {module:api/AccountingApi~getOverpaymentHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    getOverpaymentHistory(xeroTenantId, overpaymentID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getOverpaymentHistory");
      }
      // verify the required parameter 'overpaymentID' is set
      if (overpaymentID === undefined || overpaymentID === null) {
        throw new Error("Missing the required parameter 'overpaymentID' when calling getOverpaymentHistory");
      }

      let pathParams = {
        'OverpaymentID': overpaymentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/Overpayments/{OverpaymentID}/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOverpayments operation.
     * @callback module:api/AccountingApi~getOverpaymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Overpayments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves overpayments
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {Number} [page] e.g. page=1 – Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~getOverpaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Overpayments}
     */
    getOverpayments(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getOverpayments");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'page': opts['page'],
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Overpayments;
      return this.apiClient.callApi(
        '/Overpayments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayment operation.
     * @callback module:api/AccountingApi~getPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific payment for invoices and credit notes using a unique payment Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} paymentID Unique identifier for a Payment
     * @param {module:api/AccountingApi~getPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Payments}
     */
    getPayment(xeroTenantId, paymentID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPayment");
      }
      // verify the required parameter 'paymentID' is set
      if (paymentID === undefined || paymentID === null) {
        throw new Error("Missing the required parameter 'paymentID' when calling getPayment");
      }

      let pathParams = {
        'PaymentID': paymentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Payments;
      return this.apiClient.callApi(
        '/Payments/{PaymentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentHistory operation.
     * @callback module:api/AccountingApi~getPaymentHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves history records of a specific payment
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} paymentID Unique identifier for a Payment
     * @param {module:api/AccountingApi~getPaymentHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    getPaymentHistory(xeroTenantId, paymentID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPaymentHistory");
      }
      // verify the required parameter 'paymentID' is set
      if (paymentID === undefined || paymentID === null) {
        throw new Error("Missing the required parameter 'paymentID' when calling getPaymentHistory");
      }

      let pathParams = {
        'PaymentID': paymentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/Payments/{PaymentID}/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentServices operation.
     * @callback module:api/AccountingApi~getPaymentServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentServices} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves payment services
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:api/AccountingApi~getPaymentServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentServices}
     */
    getPaymentServices(xeroTenantId, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPaymentServices");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentServices;
      return this.apiClient.callApi(
        '/PaymentServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayments operation.
     * @callback module:api/AccountingApi~getPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves payments for invoices and credit notes
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {Number} [page] Up to 100 payments will be returned in a single API call
     * @param {module:api/AccountingApi~getPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Payments}
     */
    getPayments(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPayments");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'page': opts['page']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Payments;
      return this.apiClient.callApi(
        '/Payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPrepayment operation.
     * @callback module:api/AccountingApi~getPrepaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prepayments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows you to retrieve a specified prepayments
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} prepaymentID Unique identifier for a PrePayment
     * @param {module:api/AccountingApi~getPrepaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prepayments}
     */
    getPrepayment(xeroTenantId, prepaymentID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPrepayment");
      }
      // verify the required parameter 'prepaymentID' is set
      if (prepaymentID === undefined || prepaymentID === null) {
        throw new Error("Missing the required parameter 'prepaymentID' when calling getPrepayment");
      }

      let pathParams = {
        'PrepaymentID': prepaymentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Prepayments;
      return this.apiClient.callApi(
        '/Prepayments/{PrepaymentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPrepaymentHistory operation.
     * @callback module:api/AccountingApi~getPrepaymentHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves history record for a specific prepayment
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} prepaymentID Unique identifier for a PrePayment
     * @param {module:api/AccountingApi~getPrepaymentHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    getPrepaymentHistory(xeroTenantId, prepaymentID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPrepaymentHistory");
      }
      // verify the required parameter 'prepaymentID' is set
      if (prepaymentID === undefined || prepaymentID === null) {
        throw new Error("Missing the required parameter 'prepaymentID' when calling getPrepaymentHistory");
      }

      let pathParams = {
        'PrepaymentID': prepaymentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/Prepayments/{PrepaymentID}/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPrepayments operation.
     * @callback module:api/AccountingApi~getPrepaymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prepayments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves prepayments
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {Number} [page] e.g. page=1 – Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~getPrepaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prepayments}
     */
    getPrepayments(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPrepayments");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'page': opts['page'],
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Prepayments;
      return this.apiClient.callApi(
        '/Prepayments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseOrder operation.
     * @callback module:api/AccountingApi~getPurchaseOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific purchase order using a unique purchase order Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} purchaseOrderID Unique identifier for a PurchaseOrder
     * @param {module:api/AccountingApi~getPurchaseOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseOrders}
     */
    getPurchaseOrder(xeroTenantId, purchaseOrderID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPurchaseOrder");
      }
      // verify the required parameter 'purchaseOrderID' is set
      if (purchaseOrderID === undefined || purchaseOrderID === null) {
        throw new Error("Missing the required parameter 'purchaseOrderID' when calling getPurchaseOrder");
      }

      let pathParams = {
        'PurchaseOrderID': purchaseOrderID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PurchaseOrders;
      return this.apiClient.callApi(
        '/PurchaseOrders/{PurchaseOrderID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseOrderAsPdf operation.
     * @callback module:api/AccountingApi~getPurchaseOrderAsPdfCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves specific purchase order as PDF files using a unique purchase order Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} purchaseOrderID Unique identifier for an Purchase Order
     * @param {module:api/AccountingApi~getPurchaseOrderAsPdfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getPurchaseOrderAsPdf(xeroTenantId, purchaseOrderID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPurchaseOrderAsPdf");
      }
      // verify the required parameter 'purchaseOrderID' is set
      if (purchaseOrderID === undefined || purchaseOrderID === null) {
        throw new Error("Missing the required parameter 'purchaseOrderID' when calling getPurchaseOrderAsPdf");
      }

      let pathParams = {
        'PurchaseOrderID': purchaseOrderID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/pdf'];
      let returnType = File;
      return this.apiClient.callApi(
        '/PurchaseOrders/{PurchaseOrderID}/pdf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseOrderAttachmentByFileName operation.
     * @callback module:api/AccountingApi~getPurchaseOrderAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific attachment for a specific purchase order by filename
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} purchaseOrderID Unique identifier for Purchase Order object
     * @param {String} fileName Name of the attachment
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getPurchaseOrderAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getPurchaseOrderAttachmentByFileName(xeroTenantId, purchaseOrderID, fileName, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPurchaseOrderAttachmentByFileName");
      }
      // verify the required parameter 'purchaseOrderID' is set
      if (purchaseOrderID === undefined || purchaseOrderID === null) {
        throw new Error("Missing the required parameter 'purchaseOrderID' when calling getPurchaseOrderAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getPurchaseOrderAttachmentByFileName");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getPurchaseOrderAttachmentByFileName");
      }

      let pathParams = {
        'PurchaseOrderID': purchaseOrderID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseOrderAttachmentById operation.
     * @callback module:api/AccountingApi~getPurchaseOrderAttachmentByIdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves specific attachment for a specific purchase order using a unique attachment Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} purchaseOrderID Unique identifier for Purchase Order object
     * @param {String} attachmentID Unique identifier for Attachment object
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getPurchaseOrderAttachmentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getPurchaseOrderAttachmentById(xeroTenantId, purchaseOrderID, attachmentID, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPurchaseOrderAttachmentById");
      }
      // verify the required parameter 'purchaseOrderID' is set
      if (purchaseOrderID === undefined || purchaseOrderID === null) {
        throw new Error("Missing the required parameter 'purchaseOrderID' when calling getPurchaseOrderAttachmentById");
      }
      // verify the required parameter 'attachmentID' is set
      if (attachmentID === undefined || attachmentID === null) {
        throw new Error("Missing the required parameter 'attachmentID' when calling getPurchaseOrderAttachmentById");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getPurchaseOrderAttachmentById");
      }

      let pathParams = {
        'PurchaseOrderID': purchaseOrderID,
        'AttachmentID': attachmentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/PurchaseOrders/{PurchaseOrderID}/Attachments/{AttachmentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseOrderAttachments operation.
     * @callback module:api/AccountingApi~getPurchaseOrderAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves attachments for a specific purchase order
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} purchaseOrderID Unique identifier for Purchase Orders object
     * @param {module:api/AccountingApi~getPurchaseOrderAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    getPurchaseOrderAttachments(xeroTenantId, purchaseOrderID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPurchaseOrderAttachments");
      }
      // verify the required parameter 'purchaseOrderID' is set
      if (purchaseOrderID === undefined || purchaseOrderID === null) {
        throw new Error("Missing the required parameter 'purchaseOrderID' when calling getPurchaseOrderAttachments");
      }

      let pathParams = {
        'PurchaseOrderID': purchaseOrderID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/PurchaseOrders/{PurchaseOrderID}/Attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseOrderByNumber operation.
     * @callback module:api/AccountingApi~getPurchaseOrderByNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific purchase order using purchase order number
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} purchaseOrderNumber Unique identifier for a PurchaseOrder
     * @param {module:api/AccountingApi~getPurchaseOrderByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseOrders}
     */
    getPurchaseOrderByNumber(xeroTenantId, purchaseOrderNumber, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPurchaseOrderByNumber");
      }
      // verify the required parameter 'purchaseOrderNumber' is set
      if (purchaseOrderNumber === undefined || purchaseOrderNumber === null) {
        throw new Error("Missing the required parameter 'purchaseOrderNumber' when calling getPurchaseOrderByNumber");
      }

      let pathParams = {
        'PurchaseOrderNumber': purchaseOrderNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PurchaseOrders;
      return this.apiClient.callApi(
        '/PurchaseOrders/{PurchaseOrderNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseOrderHistory operation.
     * @callback module:api/AccountingApi~getPurchaseOrderHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves history for a specific purchase order
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} purchaseOrderID Unique identifier for a PurchaseOrder
     * @param {module:api/AccountingApi~getPurchaseOrderHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    getPurchaseOrderHistory(xeroTenantId, purchaseOrderID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPurchaseOrderHistory");
      }
      // verify the required parameter 'purchaseOrderID' is set
      if (purchaseOrderID === undefined || purchaseOrderID === null) {
        throw new Error("Missing the required parameter 'purchaseOrderID' when calling getPurchaseOrderHistory");
      }

      let pathParams = {
        'PurchaseOrderID': purchaseOrderID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/PurchaseOrders/{PurchaseOrderID}/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPurchaseOrders operation.
     * @callback module:api/AccountingApi~getPurchaseOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves purchase orders
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {module:model/String} [status] Filter by purchase order status
     * @param {String} [dateFrom] Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom=2015-12-01&DateTo=2015-12-31
     * @param {String} [dateTo] Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom=2015-12-01&DateTo=2015-12-31
     * @param {String} [order] Order by an any element
     * @param {Number} [page] To specify a page, append the page parameter to the URL e.g. ?page=1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page=2 and continuing this process until no more results are returned.
     * @param {module:api/AccountingApi~getPurchaseOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseOrders}
     */
    getPurchaseOrders(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPurchaseOrders");
      }

      let pathParams = {
      };
      let queryParams = {
        'Status': opts['status'],
        'DateFrom': opts['dateFrom'],
        'DateTo': opts['dateTo'],
        'order': opts['order'],
        'page': opts['page']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PurchaseOrders;
      return this.apiClient.callApi(
        '/PurchaseOrders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuote operation.
     * @callback module:api/AccountingApi~getQuoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Quotes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific quote using a unique quote Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} quoteID Unique identifier for an Quote
     * @param {module:api/AccountingApi~getQuoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Quotes}
     */
    getQuote(xeroTenantId, quoteID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getQuote");
      }
      // verify the required parameter 'quoteID' is set
      if (quoteID === undefined || quoteID === null) {
        throw new Error("Missing the required parameter 'quoteID' when calling getQuote");
      }

      let pathParams = {
        'QuoteID': quoteID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Quotes;
      return this.apiClient.callApi(
        '/Quotes/{QuoteID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuoteAsPdf operation.
     * @callback module:api/AccountingApi~getQuoteAsPdfCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific quote as a PDF file using a unique quote Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} quoteID Unique identifier for an Quote
     * @param {module:api/AccountingApi~getQuoteAsPdfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getQuoteAsPdf(xeroTenantId, quoteID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getQuoteAsPdf");
      }
      // verify the required parameter 'quoteID' is set
      if (quoteID === undefined || quoteID === null) {
        throw new Error("Missing the required parameter 'quoteID' when calling getQuoteAsPdf");
      }

      let pathParams = {
        'QuoteID': quoteID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/pdf'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Quotes/{QuoteID}/pdf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuoteAttachmentByFileName operation.
     * @callback module:api/AccountingApi~getQuoteAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific attachment from a specific quote by filename
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} quoteID Unique identifier for Quote object
     * @param {String} fileName Name of the attachment
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getQuoteAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getQuoteAttachmentByFileName(xeroTenantId, quoteID, fileName, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getQuoteAttachmentByFileName");
      }
      // verify the required parameter 'quoteID' is set
      if (quoteID === undefined || quoteID === null) {
        throw new Error("Missing the required parameter 'quoteID' when calling getQuoteAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getQuoteAttachmentByFileName");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getQuoteAttachmentByFileName");
      }

      let pathParams = {
        'QuoteID': quoteID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Quotes/{QuoteID}/Attachments/{FileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuoteAttachmentById operation.
     * @callback module:api/AccountingApi~getQuoteAttachmentByIdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific attachment from a specific quote using a unique attachment Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} quoteID Unique identifier for Quote object
     * @param {String} attachmentID Unique identifier for Attachment object
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getQuoteAttachmentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getQuoteAttachmentById(xeroTenantId, quoteID, attachmentID, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getQuoteAttachmentById");
      }
      // verify the required parameter 'quoteID' is set
      if (quoteID === undefined || quoteID === null) {
        throw new Error("Missing the required parameter 'quoteID' when calling getQuoteAttachmentById");
      }
      // verify the required parameter 'attachmentID' is set
      if (attachmentID === undefined || attachmentID === null) {
        throw new Error("Missing the required parameter 'attachmentID' when calling getQuoteAttachmentById");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getQuoteAttachmentById");
      }

      let pathParams = {
        'QuoteID': quoteID,
        'AttachmentID': attachmentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Quotes/{QuoteID}/Attachments/{AttachmentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuoteAttachments operation.
     * @callback module:api/AccountingApi~getQuoteAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves attachments for a specific quote
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} quoteID Unique identifier for Quote object
     * @param {module:api/AccountingApi~getQuoteAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    getQuoteAttachments(xeroTenantId, quoteID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getQuoteAttachments");
      }
      // verify the required parameter 'quoteID' is set
      if (quoteID === undefined || quoteID === null) {
        throw new Error("Missing the required parameter 'quoteID' when calling getQuoteAttachments");
      }

      let pathParams = {
        'QuoteID': quoteID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/Quotes/{QuoteID}/Attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuoteHistory operation.
     * @callback module:api/AccountingApi~getQuoteHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves history records of a specific quote
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} quoteID Unique identifier for an Quote
     * @param {module:api/AccountingApi~getQuoteHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    getQuoteHistory(xeroTenantId, quoteID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getQuoteHistory");
      }
      // verify the required parameter 'quoteID' is set
      if (quoteID === undefined || quoteID === null) {
        throw new Error("Missing the required parameter 'quoteID' when calling getQuoteHistory");
      }

      let pathParams = {
        'QuoteID': quoteID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/Quotes/{QuoteID}/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuotes operation.
     * @callback module:api/AccountingApi~getQuotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Quotes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves sales quotes
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {Date} [dateFrom] Filter for quotes after a particular date
     * @param {Date} [dateTo] Filter for quotes before a particular date
     * @param {Date} [expiryDateFrom] Filter for quotes expiring after a particular date
     * @param {Date} [expiryDateTo] Filter for quotes before a particular date
     * @param {String} [contactID] Filter for quotes belonging to a particular contact
     * @param {String} [status] Filter for quotes of a particular Status
     * @param {Number} [page] e.g. page=1 – Up to 100 Quotes will be returned in a single API call with line items shown for each quote
     * @param {String} [order] Order by an any element
     * @param {String} [quoteNumber] Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber=QU-0001)
     * @param {module:api/AccountingApi~getQuotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Quotes}
     */
    getQuotes(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getQuotes");
      }

      let pathParams = {
      };
      let queryParams = {
        'DateFrom': opts['dateFrom'],
        'DateTo': opts['dateTo'],
        'ExpiryDateFrom': opts['expiryDateFrom'],
        'ExpiryDateTo': opts['expiryDateTo'],
        'ContactID': opts['contactID'],
        'Status': opts['status'],
        'page': opts['page'],
        'order': opts['order'],
        'QuoteNumber': opts['quoteNumber']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Quotes;
      return this.apiClient.callApi(
        '/Quotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceipt operation.
     * @callback module:api/AccountingApi~getReceiptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Receipts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific draft expense claim receipt by using a unique receipt Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} receiptID Unique identifier for a Receipt
     * @param {Object} opts Optional parameters
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~getReceiptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Receipts}
     */
    getReceipt(xeroTenantId, receiptID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getReceipt");
      }
      // verify the required parameter 'receiptID' is set
      if (receiptID === undefined || receiptID === null) {
        throw new Error("Missing the required parameter 'receiptID' when calling getReceipt");
      }

      let pathParams = {
        'ReceiptID': receiptID
      };
      let queryParams = {
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Receipts;
      return this.apiClient.callApi(
        '/Receipts/{ReceiptID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceiptAttachmentByFileName operation.
     * @callback module:api/AccountingApi~getReceiptAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific attachment from a specific expense claim receipts by file name
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} receiptID Unique identifier for a Receipt
     * @param {String} fileName The name of the file being attached to the Receipt
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getReceiptAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getReceiptAttachmentByFileName(xeroTenantId, receiptID, fileName, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getReceiptAttachmentByFileName");
      }
      // verify the required parameter 'receiptID' is set
      if (receiptID === undefined || receiptID === null) {
        throw new Error("Missing the required parameter 'receiptID' when calling getReceiptAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getReceiptAttachmentByFileName");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getReceiptAttachmentByFileName");
      }

      let pathParams = {
        'ReceiptID': receiptID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Receipts/{ReceiptID}/Attachments/{FileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceiptAttachmentById operation.
     * @callback module:api/AccountingApi~getReceiptAttachmentByIdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} receiptID Unique identifier for a Receipt
     * @param {String} attachmentID Unique identifier for a Attachment
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getReceiptAttachmentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getReceiptAttachmentById(xeroTenantId, receiptID, attachmentID, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getReceiptAttachmentById");
      }
      // verify the required parameter 'receiptID' is set
      if (receiptID === undefined || receiptID === null) {
        throw new Error("Missing the required parameter 'receiptID' when calling getReceiptAttachmentById");
      }
      // verify the required parameter 'attachmentID' is set
      if (attachmentID === undefined || attachmentID === null) {
        throw new Error("Missing the required parameter 'attachmentID' when calling getReceiptAttachmentById");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getReceiptAttachmentById");
      }

      let pathParams = {
        'ReceiptID': receiptID,
        'AttachmentID': attachmentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Receipts/{ReceiptID}/Attachments/{AttachmentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceiptAttachments operation.
     * @callback module:api/AccountingApi~getReceiptAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves attachments for a specific expense claim receipt
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} receiptID Unique identifier for a Receipt
     * @param {module:api/AccountingApi~getReceiptAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    getReceiptAttachments(xeroTenantId, receiptID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getReceiptAttachments");
      }
      // verify the required parameter 'receiptID' is set
      if (receiptID === undefined || receiptID === null) {
        throw new Error("Missing the required parameter 'receiptID' when calling getReceiptAttachments");
      }

      let pathParams = {
        'ReceiptID': receiptID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/Receipts/{ReceiptID}/Attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceiptHistory operation.
     * @callback module:api/AccountingApi~getReceiptHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a history record for a specific receipt
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} receiptID Unique identifier for a Receipt
     * @param {module:api/AccountingApi~getReceiptHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    getReceiptHistory(xeroTenantId, receiptID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getReceiptHistory");
      }
      // verify the required parameter 'receiptID' is set
      if (receiptID === undefined || receiptID === null) {
        throw new Error("Missing the required parameter 'receiptID' when calling getReceiptHistory");
      }

      let pathParams = {
        'ReceiptID': receiptID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/Receipts/{ReceiptID}/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceipts operation.
     * @callback module:api/AccountingApi~getReceiptsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Receipts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves draft expense claim receipts for any user
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~getReceiptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Receipts}
     */
    getReceipts(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getReceipts");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Receipts;
      return this.apiClient.callApi(
        '/Receipts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepeatingInvoice operation.
     * @callback module:api/AccountingApi~getRepeatingInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepeatingInvoices} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific repeating invoice by using a unique repeating invoice Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} repeatingInvoiceID Unique identifier for a Repeating Invoice
     * @param {module:api/AccountingApi~getRepeatingInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepeatingInvoices}
     */
    getRepeatingInvoice(xeroTenantId, repeatingInvoiceID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getRepeatingInvoice");
      }
      // verify the required parameter 'repeatingInvoiceID' is set
      if (repeatingInvoiceID === undefined || repeatingInvoiceID === null) {
        throw new Error("Missing the required parameter 'repeatingInvoiceID' when calling getRepeatingInvoice");
      }

      let pathParams = {
        'RepeatingInvoiceID': repeatingInvoiceID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepeatingInvoices;
      return this.apiClient.callApi(
        '/RepeatingInvoices/{RepeatingInvoiceID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepeatingInvoiceAttachmentByFileName operation.
     * @callback module:api/AccountingApi~getRepeatingInvoiceAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific attachment from a specific repeating invoices by file name
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} repeatingInvoiceID Unique identifier for a Repeating Invoice
     * @param {String} fileName The name of the file being attached to a Repeating Invoice
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getRepeatingInvoiceAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getRepeatingInvoiceAttachmentByFileName(xeroTenantId, repeatingInvoiceID, fileName, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getRepeatingInvoiceAttachmentByFileName");
      }
      // verify the required parameter 'repeatingInvoiceID' is set
      if (repeatingInvoiceID === undefined || repeatingInvoiceID === null) {
        throw new Error("Missing the required parameter 'repeatingInvoiceID' when calling getRepeatingInvoiceAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getRepeatingInvoiceAttachmentByFileName");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getRepeatingInvoiceAttachmentByFileName");
      }

      let pathParams = {
        'RepeatingInvoiceID': repeatingInvoiceID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepeatingInvoiceAttachmentById operation.
     * @callback module:api/AccountingApi~getRepeatingInvoiceAttachmentByIdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific attachment from a specific repeating invoice
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} repeatingInvoiceID Unique identifier for a Repeating Invoice
     * @param {String} attachmentID Unique identifier for a Attachment
     * @param {String} contentType The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
     * @param {module:api/AccountingApi~getRepeatingInvoiceAttachmentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getRepeatingInvoiceAttachmentById(xeroTenantId, repeatingInvoiceID, attachmentID, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getRepeatingInvoiceAttachmentById");
      }
      // verify the required parameter 'repeatingInvoiceID' is set
      if (repeatingInvoiceID === undefined || repeatingInvoiceID === null) {
        throw new Error("Missing the required parameter 'repeatingInvoiceID' when calling getRepeatingInvoiceAttachmentById");
      }
      // verify the required parameter 'attachmentID' is set
      if (attachmentID === undefined || attachmentID === null) {
        throw new Error("Missing the required parameter 'attachmentID' when calling getRepeatingInvoiceAttachmentById");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getRepeatingInvoiceAttachmentById");
      }

      let pathParams = {
        'RepeatingInvoiceID': repeatingInvoiceID,
        'AttachmentID': attachmentID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'contentType': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{AttachmentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepeatingInvoiceAttachments operation.
     * @callback module:api/AccountingApi~getRepeatingInvoiceAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves attachments from a specific repeating invoice
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} repeatingInvoiceID Unique identifier for a Repeating Invoice
     * @param {module:api/AccountingApi~getRepeatingInvoiceAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    getRepeatingInvoiceAttachments(xeroTenantId, repeatingInvoiceID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getRepeatingInvoiceAttachments");
      }
      // verify the required parameter 'repeatingInvoiceID' is set
      if (repeatingInvoiceID === undefined || repeatingInvoiceID === null) {
        throw new Error("Missing the required parameter 'repeatingInvoiceID' when calling getRepeatingInvoiceAttachments");
      }

      let pathParams = {
        'RepeatingInvoiceID': repeatingInvoiceID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/RepeatingInvoices/{RepeatingInvoiceID}/Attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepeatingInvoiceHistory operation.
     * @callback module:api/AccountingApi~getRepeatingInvoiceHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryRecords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves history record for a specific repeating invoice
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} repeatingInvoiceID Unique identifier for a Repeating Invoice
     * @param {module:api/AccountingApi~getRepeatingInvoiceHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryRecords}
     */
    getRepeatingInvoiceHistory(xeroTenantId, repeatingInvoiceID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getRepeatingInvoiceHistory");
      }
      // verify the required parameter 'repeatingInvoiceID' is set
      if (repeatingInvoiceID === undefined || repeatingInvoiceID === null) {
        throw new Error("Missing the required parameter 'repeatingInvoiceID' when calling getRepeatingInvoiceHistory");
      }

      let pathParams = {
        'RepeatingInvoiceID': repeatingInvoiceID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoryRecords;
      return this.apiClient.callApi(
        '/RepeatingInvoices/{RepeatingInvoiceID}/History', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepeatingInvoices operation.
     * @callback module:api/AccountingApi~getRepeatingInvoicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepeatingInvoices} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves repeating invoices
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {module:api/AccountingApi~getRepeatingInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepeatingInvoices}
     */
    getRepeatingInvoices(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getRepeatingInvoices");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepeatingInvoices;
      return this.apiClient.callApi(
        '/RepeatingInvoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportAgedPayablesByContact operation.
     * @callback module:api/AccountingApi~getReportAgedPayablesByContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportWithRows} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves report for aged payables by contact
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} contactId Unique identifier for a Contact
     * @param {Object} opts Optional parameters
     * @param {Date} [date] The date of the Aged Payables By Contact report
     * @param {Date} [fromDate] The from date of the Aged Payables By Contact report
     * @param {Date} [toDate] The to date of the Aged Payables By Contact report
     * @param {module:api/AccountingApi~getReportAgedPayablesByContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportWithRows}
     */
    getReportAgedPayablesByContact(xeroTenantId, contactId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getReportAgedPayablesByContact");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling getReportAgedPayablesByContact");
      }

      let pathParams = {
      };
      let queryParams = {
        'contactId': contactId,
        'date': opts['date'],
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportWithRows;
      return this.apiClient.callApi(
        '/Reports/AgedPayablesByContact', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportAgedReceivablesByContact operation.
     * @callback module:api/AccountingApi~getReportAgedReceivablesByContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportWithRows} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves report for aged receivables by contact
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} contactId Unique identifier for a Contact
     * @param {Object} opts Optional parameters
     * @param {Date} [date] The date of the Aged Receivables By Contact report
     * @param {Date} [fromDate] The from date of the Aged Receivables By Contact report
     * @param {Date} [toDate] The to date of the Aged Receivables By Contact report
     * @param {module:api/AccountingApi~getReportAgedReceivablesByContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportWithRows}
     */
    getReportAgedReceivablesByContact(xeroTenantId, contactId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getReportAgedReceivablesByContact");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling getReportAgedReceivablesByContact");
      }

      let pathParams = {
      };
      let queryParams = {
        'contactId': contactId,
        'date': opts['date'],
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportWithRows;
      return this.apiClient.callApi(
        '/Reports/AgedReceivablesByContact', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportBASorGST operation.
     * @callback module:api/AccountingApi~getReportBASorGSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportWithRows} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific report for BAS using a unique report Id (only valid for AU orgs)
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} reportID Unique identifier for a Report
     * @param {module:api/AccountingApi~getReportBASorGSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportWithRows}
     */
    getReportBASorGST(xeroTenantId, reportID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getReportBASorGST");
      }
      // verify the required parameter 'reportID' is set
      if (reportID === undefined || reportID === null) {
        throw new Error("Missing the required parameter 'reportID' when calling getReportBASorGST");
      }

      let pathParams = {
        'ReportID': reportID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportWithRows;
      return this.apiClient.callApi(
        '/Reports/{ReportID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportBASorGSTList operation.
     * @callback module:api/AccountingApi~getReportBASorGSTListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportWithRows} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves report for BAS (only valid for AU orgs)
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:api/AccountingApi~getReportBASorGSTListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportWithRows}
     */
    getReportBASorGSTList(xeroTenantId, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getReportBASorGSTList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportWithRows;
      return this.apiClient.callApi(
        '/Reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportBalanceSheet operation.
     * @callback module:api/AccountingApi~getReportBalanceSheetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportWithRows} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves report for balancesheet
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [date] The date of the Balance Sheet report
     * @param {Number} [periods] The number of periods for the Balance Sheet report
     * @param {module:model/String} [timeframe] The period size to compare to (MONTH, QUARTER, YEAR)
     * @param {String} [trackingOptionID1] The tracking option 1 for the Balance Sheet report
     * @param {String} [trackingOptionID2] The tracking option 2 for the Balance Sheet report
     * @param {Boolean} [standardLayout] The standard layout boolean for the Balance Sheet report
     * @param {Boolean} [paymentsOnly] return a cash basis for the Balance Sheet report
     * @param {module:api/AccountingApi~getReportBalanceSheetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportWithRows}
     */
    getReportBalanceSheet(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getReportBalanceSheet");
      }

      let pathParams = {
      };
      let queryParams = {
        'date': opts['date'],
        'periods': opts['periods'],
        'timeframe': opts['timeframe'],
        'trackingOptionID1': opts['trackingOptionID1'],
        'trackingOptionID2': opts['trackingOptionID2'],
        'standardLayout': opts['standardLayout'],
        'paymentsOnly': opts['paymentsOnly']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportWithRows;
      return this.apiClient.callApi(
        '/Reports/BalanceSheet', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportBankSummary operation.
     * @callback module:api/AccountingApi~getReportBankSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportWithRows} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves report for bank summary
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [fromDate] The from date for the Bank Summary report e.g. 2018-03-31
     * @param {Date} [toDate] The to date for the Bank Summary report e.g. 2018-03-31
     * @param {module:api/AccountingApi~getReportBankSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportWithRows}
     */
    getReportBankSummary(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getReportBankSummary");
      }

      let pathParams = {
      };
      let queryParams = {
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportWithRows;
      return this.apiClient.callApi(
        '/Reports/BankSummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportBudgetSummary operation.
     * @callback module:api/AccountingApi~getReportBudgetSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportWithRows} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves report for budget summary
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [date] The date for the Bank Summary report e.g. 2018-03-31
     * @param {Number} [period] The number of periods to compare (integer between 1 and 12)
     * @param {Number} [timeframe] The period size to compare to (1=month, 3=quarter, 12=year)
     * @param {module:api/AccountingApi~getReportBudgetSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportWithRows}
     */
    getReportBudgetSummary(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getReportBudgetSummary");
      }

      let pathParams = {
      };
      let queryParams = {
        'date': opts['date'],
        'period': opts['period'],
        'timeframe': opts['timeframe']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportWithRows;
      return this.apiClient.callApi(
        '/Reports/BudgetSummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportExecutiveSummary operation.
     * @callback module:api/AccountingApi~getReportExecutiveSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportWithRows} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves report for executive summary
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [date] The date for the Bank Summary report e.g. 2018-03-31
     * @param {module:api/AccountingApi~getReportExecutiveSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportWithRows}
     */
    getReportExecutiveSummary(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getReportExecutiveSummary");
      }

      let pathParams = {
      };
      let queryParams = {
        'date': opts['date']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportWithRows;
      return this.apiClient.callApi(
        '/Reports/ExecutiveSummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportProfitAndLoss operation.
     * @callback module:api/AccountingApi~getReportProfitAndLossCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportWithRows} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves report for profit and loss
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [fromDate] The from date for the ProfitAndLoss report e.g. 2018-03-31
     * @param {Date} [toDate] The to date for the ProfitAndLoss report e.g. 2018-03-31
     * @param {Number} [periods] The number of periods to compare (integer between 1 and 12)
     * @param {module:model/String} [timeframe] The period size to compare to (MONTH, QUARTER, YEAR)
     * @param {String} [trackingCategoryID] The trackingCategory 1 for the ProfitAndLoss report
     * @param {String} [trackingCategoryID2] The trackingCategory 2 for the ProfitAndLoss report
     * @param {String} [trackingOptionID] The tracking option 1 for the ProfitAndLoss report
     * @param {String} [trackingOptionID2] The tracking option 2 for the ProfitAndLoss report
     * @param {Boolean} [standardLayout] Return the standard layout for the ProfitAndLoss report
     * @param {Boolean} [paymentsOnly] Return cash only basis for the ProfitAndLoss report
     * @param {module:api/AccountingApi~getReportProfitAndLossCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportWithRows}
     */
    getReportProfitAndLoss(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getReportProfitAndLoss");
      }

      let pathParams = {
      };
      let queryParams = {
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'periods': opts['periods'],
        'timeframe': opts['timeframe'],
        'trackingCategoryID': opts['trackingCategoryID'],
        'trackingCategoryID2': opts['trackingCategoryID2'],
        'trackingOptionID': opts['trackingOptionID'],
        'trackingOptionID2': opts['trackingOptionID2'],
        'standardLayout': opts['standardLayout'],
        'paymentsOnly': opts['paymentsOnly']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportWithRows;
      return this.apiClient.callApi(
        '/Reports/ProfitAndLoss', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportTenNinetyNine operation.
     * @callback module:api/AccountingApi~getReportTenNinetyNineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reports} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve reports for 1099
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {String} [reportYear] The year of the 1099 report
     * @param {module:api/AccountingApi~getReportTenNinetyNineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reports}
     */
    getReportTenNinetyNine(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getReportTenNinetyNine");
      }

      let pathParams = {
      };
      let queryParams = {
        'reportYear': opts['reportYear']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Reports;
      return this.apiClient.callApi(
        '/Reports/TenNinetyNine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportTrialBalance operation.
     * @callback module:api/AccountingApi~getReportTrialBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportWithRows} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves report for trial balance
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [date] The date for the Trial Balance report e.g. 2018-03-31
     * @param {Boolean} [paymentsOnly] Return cash only basis for the Trial Balance report
     * @param {module:api/AccountingApi~getReportTrialBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportWithRows}
     */
    getReportTrialBalance(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getReportTrialBalance");
      }

      let pathParams = {
      };
      let queryParams = {
        'date': opts['date'],
        'paymentsOnly': opts['paymentsOnly']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportWithRows;
      return this.apiClient.callApi(
        '/Reports/TrialBalance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxRates operation.
     * @callback module:api/AccountingApi~getTaxRatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxRates} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves tax rates
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {String} [taxType] Filter by tax type
     * @param {module:api/AccountingApi~getTaxRatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxRates}
     */
    getTaxRates(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getTaxRates");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'TaxType': opts['taxType']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaxRates;
      return this.apiClient.callApi(
        '/TaxRates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrackingCategories operation.
     * @callback module:api/AccountingApi~getTrackingCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackingCategories} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves tracking categories and options
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {Boolean} [includeArchived] e.g. includeArchived=true - Categories and options with a status of ARCHIVED will be included in the response
     * @param {module:api/AccountingApi~getTrackingCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackingCategories}
     */
    getTrackingCategories(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getTrackingCategories");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'includeArchived': opts['includeArchived']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackingCategories;
      return this.apiClient.callApi(
        '/TrackingCategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrackingCategory operation.
     * @callback module:api/AccountingApi~getTrackingCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackingCategories} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves specific tracking categories and options using a unique tracking category Id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} trackingCategoryID Unique identifier for a TrackingCategory
     * @param {module:api/AccountingApi~getTrackingCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackingCategories}
     */
    getTrackingCategory(xeroTenantId, trackingCategoryID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getTrackingCategory");
      }
      // verify the required parameter 'trackingCategoryID' is set
      if (trackingCategoryID === undefined || trackingCategoryID === null) {
        throw new Error("Missing the required parameter 'trackingCategoryID' when calling getTrackingCategory");
      }

      let pathParams = {
        'TrackingCategoryID': trackingCategoryID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackingCategories;
      return this.apiClient.callApi(
        '/TrackingCategories/{TrackingCategoryID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/AccountingApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Users} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific user
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} userID Unique identifier for a User
     * @param {module:api/AccountingApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Users}
     */
    getUser(xeroTenantId, userID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getUser");
      }
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling getUser");
      }

      let pathParams = {
        'UserID': userID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Users;
      return this.apiClient.callApi(
        '/Users/{UserID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsers operation.
     * @callback module:api/AccountingApi~getUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Users} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves users
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Date} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {module:api/AccountingApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Users}
     */
    getUsers(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Users;
      return this.apiClient.callApi(
        '/Users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSetup operation.
     * @callback module:api/AccountingApi~postSetupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportSummaryObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the chart of accounts, the conversion date and conversion balances
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/Setup} setup Object including an accounts array, a conversion balances array and a conversion date object in body of request
     * @param {module:api/AccountingApi~postSetupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportSummaryObject}
     */
    postSetup(xeroTenantId, setup, callback) {
      let postBody = setup;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling postSetup");
      }
      // verify the required parameter 'setup' is set
      if (setup === undefined || setup === null) {
        throw new Error("Missing the required parameter 'setup' when calling postSetup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportSummaryObject;
      return this.apiClient.callApi(
        '/Setup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccount operation.
     * @callback module:api/AccountingApi~updateAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Accounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a chart of accounts
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} accountID Unique identifier for retrieving single object
     * @param {module:model/Accounts} accounts Request of type Accounts array with one Account
     * @param {module:api/AccountingApi~updateAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Accounts}
     */
    updateAccount(xeroTenantId, accountID, accounts, callback) {
      let postBody = accounts;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateAccount");
      }
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling updateAccount");
      }
      // verify the required parameter 'accounts' is set
      if (accounts === undefined || accounts === null) {
        throw new Error("Missing the required parameter 'accounts' when calling updateAccount");
      }

      let pathParams = {
        'AccountID': accountID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Accounts;
      return this.apiClient.callApi(
        '/Accounts/{AccountID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountAttachmentByFileName operation.
     * @callback module:api/AccountingApi~updateAccountAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates attachment on a specific account by filename
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} accountID Unique identifier for Account object
     * @param {String} fileName Name of the attachment
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~updateAccountAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    updateAccountAttachmentByFileName(xeroTenantId, accountID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateAccountAttachmentByFileName");
      }
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling updateAccountAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling updateAccountAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAccountAttachmentByFileName");
      }

      let pathParams = {
        'AccountID': accountID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/Accounts/{AccountID}/Attachments/{FileName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBankTransaction operation.
     * @callback module:api/AccountingApi~updateBankTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankTransactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a single spent or received money transaction
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} bankTransactionID Xero generated unique identifier for a bank transaction
     * @param {module:model/BankTransactions} bankTransactions 
     * @param {Object} opts Optional parameters
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~updateBankTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankTransactions}
     */
    updateBankTransaction(xeroTenantId, bankTransactionID, bankTransactions, opts, callback) {
      opts = opts || {};
      let postBody = bankTransactions;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateBankTransaction");
      }
      // verify the required parameter 'bankTransactionID' is set
      if (bankTransactionID === undefined || bankTransactionID === null) {
        throw new Error("Missing the required parameter 'bankTransactionID' when calling updateBankTransaction");
      }
      // verify the required parameter 'bankTransactions' is set
      if (bankTransactions === undefined || bankTransactions === null) {
        throw new Error("Missing the required parameter 'bankTransactions' when calling updateBankTransaction");
      }

      let pathParams = {
        'BankTransactionID': bankTransactionID
      };
      let queryParams = {
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BankTransactions;
      return this.apiClient.callApi(
        '/BankTransactions/{BankTransactionID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBankTransactionAttachmentByFileName operation.
     * @callback module:api/AccountingApi~updateBankTransactionAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific attachment from a specific bank transaction by filename
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} bankTransactionID Xero generated unique identifier for a bank transaction
     * @param {String} fileName The name of the file being attached
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~updateBankTransactionAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    updateBankTransactionAttachmentByFileName(xeroTenantId, bankTransactionID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateBankTransactionAttachmentByFileName");
      }
      // verify the required parameter 'bankTransactionID' is set
      if (bankTransactionID === undefined || bankTransactionID === null) {
        throw new Error("Missing the required parameter 'bankTransactionID' when calling updateBankTransactionAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling updateBankTransactionAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBankTransactionAttachmentByFileName");
      }

      let pathParams = {
        'BankTransactionID': bankTransactionID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/BankTransactions/{BankTransactionID}/Attachments/{FileName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBankTransferAttachmentByFileName operation.
     * @callback module:api/AccountingApi~updateBankTransferAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} bankTransferID Xero generated unique identifier for a bank transfer
     * @param {String} fileName The name of the file being attached to a Bank Transfer
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~updateBankTransferAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    updateBankTransferAttachmentByFileName(xeroTenantId, bankTransferID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateBankTransferAttachmentByFileName");
      }
      // verify the required parameter 'bankTransferID' is set
      if (bankTransferID === undefined || bankTransferID === null) {
        throw new Error("Missing the required parameter 'bankTransferID' when calling updateBankTransferAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling updateBankTransferAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBankTransferAttachmentByFileName");
      }

      let pathParams = {
        'BankTransferID': bankTransferID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/BankTransfers/{BankTransferID}/Attachments/{FileName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContact operation.
     * @callback module:api/AccountingApi~updateContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contacts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific contact in a Xero organisation
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} contactID Unique identifier for a Contact
     * @param {module:model/Contacts} contacts an array of Contacts containing single Contact object with properties to update
     * @param {module:api/AccountingApi~updateContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contacts}
     */
    updateContact(xeroTenantId, contactID, contacts, callback) {
      let postBody = contacts;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateContact");
      }
      // verify the required parameter 'contactID' is set
      if (contactID === undefined || contactID === null) {
        throw new Error("Missing the required parameter 'contactID' when calling updateContact");
      }
      // verify the required parameter 'contacts' is set
      if (contacts === undefined || contacts === null) {
        throw new Error("Missing the required parameter 'contacts' when calling updateContact");
      }

      let pathParams = {
        'ContactID': contactID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Contacts;
      return this.apiClient.callApi(
        '/Contacts/{ContactID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContactAttachmentByFileName operation.
     * @callback module:api/AccountingApi~updateContactAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} contactID Unique identifier for a Contact
     * @param {String} fileName Name for the file you are attaching
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~updateContactAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    updateContactAttachmentByFileName(xeroTenantId, contactID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateContactAttachmentByFileName");
      }
      // verify the required parameter 'contactID' is set
      if (contactID === undefined || contactID === null) {
        throw new Error("Missing the required parameter 'contactID' when calling updateContactAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling updateContactAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateContactAttachmentByFileName");
      }

      let pathParams = {
        'ContactID': contactID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/Contacts/{ContactID}/Attachments/{FileName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContactGroup operation.
     * @callback module:api/AccountingApi~updateContactGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactGroups} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific contact group
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} contactGroupID Unique identifier for a Contact Group
     * @param {module:model/ContactGroups} contactGroups an array of Contact groups with Name of specific group to update
     * @param {module:api/AccountingApi~updateContactGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactGroups}
     */
    updateContactGroup(xeroTenantId, contactGroupID, contactGroups, callback) {
      let postBody = contactGroups;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateContactGroup");
      }
      // verify the required parameter 'contactGroupID' is set
      if (contactGroupID === undefined || contactGroupID === null) {
        throw new Error("Missing the required parameter 'contactGroupID' when calling updateContactGroup");
      }
      // verify the required parameter 'contactGroups' is set
      if (contactGroups === undefined || contactGroups === null) {
        throw new Error("Missing the required parameter 'contactGroups' when calling updateContactGroup");
      }

      let pathParams = {
        'ContactGroupID': contactGroupID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactGroups;
      return this.apiClient.callApi(
        '/ContactGroups/{ContactGroupID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCreditNote operation.
     * @callback module:api/AccountingApi~updateCreditNoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditNotes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific credit note
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} creditNoteID Unique identifier for a Credit Note
     * @param {module:model/CreditNotes} creditNotes an array of Credit Notes containing credit note details to update
     * @param {Object} opts Optional parameters
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~updateCreditNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditNotes}
     */
    updateCreditNote(xeroTenantId, creditNoteID, creditNotes, opts, callback) {
      opts = opts || {};
      let postBody = creditNotes;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateCreditNote");
      }
      // verify the required parameter 'creditNoteID' is set
      if (creditNoteID === undefined || creditNoteID === null) {
        throw new Error("Missing the required parameter 'creditNoteID' when calling updateCreditNote");
      }
      // verify the required parameter 'creditNotes' is set
      if (creditNotes === undefined || creditNotes === null) {
        throw new Error("Missing the required parameter 'creditNotes' when calling updateCreditNote");
      }

      let pathParams = {
        'CreditNoteID': creditNoteID
      };
      let queryParams = {
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreditNotes;
      return this.apiClient.callApi(
        '/CreditNotes/{CreditNoteID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCreditNoteAttachmentByFileName operation.
     * @callback module:api/AccountingApi~updateCreditNoteAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates attachments on a specific credit note by file name
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} creditNoteID Unique identifier for a Credit Note
     * @param {String} fileName Name of the file you are attaching to Credit Note
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~updateCreditNoteAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    updateCreditNoteAttachmentByFileName(xeroTenantId, creditNoteID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateCreditNoteAttachmentByFileName");
      }
      // verify the required parameter 'creditNoteID' is set
      if (creditNoteID === undefined || creditNoteID === null) {
        throw new Error("Missing the required parameter 'creditNoteID' when calling updateCreditNoteAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling updateCreditNoteAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCreditNoteAttachmentByFileName");
      }

      let pathParams = {
        'CreditNoteID': creditNoteID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/CreditNotes/{CreditNoteID}/Attachments/{FileName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExpenseClaim operation.
     * @callback module:api/AccountingApi~updateExpenseClaimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpenseClaims} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific expense claims
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} expenseClaimID Unique identifier for a ExpenseClaim
     * @param {module:model/ExpenseClaims} expenseClaims 
     * @param {module:api/AccountingApi~updateExpenseClaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpenseClaims}
     */
    updateExpenseClaim(xeroTenantId, expenseClaimID, expenseClaims, callback) {
      let postBody = expenseClaims;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateExpenseClaim");
      }
      // verify the required parameter 'expenseClaimID' is set
      if (expenseClaimID === undefined || expenseClaimID === null) {
        throw new Error("Missing the required parameter 'expenseClaimID' when calling updateExpenseClaim");
      }
      // verify the required parameter 'expenseClaims' is set
      if (expenseClaims === undefined || expenseClaims === null) {
        throw new Error("Missing the required parameter 'expenseClaims' when calling updateExpenseClaim");
      }

      let pathParams = {
        'ExpenseClaimID': expenseClaimID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExpenseClaims;
      return this.apiClient.callApi(
        '/ExpenseClaims/{ExpenseClaimID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInvoice operation.
     * @callback module:api/AccountingApi~updateInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invoices} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific sales invoices or purchase bills
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} invoiceID Unique identifier for an Invoice
     * @param {module:model/Invoices} invoices 
     * @param {Object} opts Optional parameters
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~updateInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invoices}
     */
    updateInvoice(xeroTenantId, invoiceID, invoices, opts, callback) {
      opts = opts || {};
      let postBody = invoices;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateInvoice");
      }
      // verify the required parameter 'invoiceID' is set
      if (invoiceID === undefined || invoiceID === null) {
        throw new Error("Missing the required parameter 'invoiceID' when calling updateInvoice");
      }
      // verify the required parameter 'invoices' is set
      if (invoices === undefined || invoices === null) {
        throw new Error("Missing the required parameter 'invoices' when calling updateInvoice");
      }

      let pathParams = {
        'InvoiceID': invoiceID
      };
      let queryParams = {
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Invoices;
      return this.apiClient.callApi(
        '/Invoices/{InvoiceID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInvoiceAttachmentByFileName operation.
     * @callback module:api/AccountingApi~updateInvoiceAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an attachment from a specific invoices or purchase bill by filename
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} invoiceID Unique identifier for an Invoice
     * @param {String} fileName Name of the file you are attaching
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~updateInvoiceAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    updateInvoiceAttachmentByFileName(xeroTenantId, invoiceID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateInvoiceAttachmentByFileName");
      }
      // verify the required parameter 'invoiceID' is set
      if (invoiceID === undefined || invoiceID === null) {
        throw new Error("Missing the required parameter 'invoiceID' when calling updateInvoiceAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling updateInvoiceAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateInvoiceAttachmentByFileName");
      }

      let pathParams = {
        'InvoiceID': invoiceID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/Invoices/{InvoiceID}/Attachments/{FileName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateItem operation.
     * @callback module:api/AccountingApi~updateItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Items} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific item
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} itemID Unique identifier for an Item
     * @param {module:model/Items} items 
     * @param {Object} opts Optional parameters
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~updateItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Items}
     */
    updateItem(xeroTenantId, itemID, items, opts, callback) {
      opts = opts || {};
      let postBody = items;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateItem");
      }
      // verify the required parameter 'itemID' is set
      if (itemID === undefined || itemID === null) {
        throw new Error("Missing the required parameter 'itemID' when calling updateItem");
      }
      // verify the required parameter 'items' is set
      if (items === undefined || items === null) {
        throw new Error("Missing the required parameter 'items' when calling updateItem");
      }

      let pathParams = {
        'ItemID': itemID
      };
      let queryParams = {
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Items;
      return this.apiClient.callApi(
        '/Items/{ItemID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLinkedTransaction operation.
     * @callback module:api/AccountingApi~updateLinkedTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkedTransactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific linked transactions (billable expenses)
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} linkedTransactionID Unique identifier for a LinkedTransaction
     * @param {module:model/LinkedTransactions} linkedTransactions 
     * @param {module:api/AccountingApi~updateLinkedTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkedTransactions}
     */
    updateLinkedTransaction(xeroTenantId, linkedTransactionID, linkedTransactions, callback) {
      let postBody = linkedTransactions;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateLinkedTransaction");
      }
      // verify the required parameter 'linkedTransactionID' is set
      if (linkedTransactionID === undefined || linkedTransactionID === null) {
        throw new Error("Missing the required parameter 'linkedTransactionID' when calling updateLinkedTransaction");
      }
      // verify the required parameter 'linkedTransactions' is set
      if (linkedTransactions === undefined || linkedTransactions === null) {
        throw new Error("Missing the required parameter 'linkedTransactions' when calling updateLinkedTransaction");
      }

      let pathParams = {
        'LinkedTransactionID': linkedTransactionID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LinkedTransactions;
      return this.apiClient.callApi(
        '/LinkedTransactions/{LinkedTransactionID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateManualJournal operation.
     * @callback module:api/AccountingApi~updateManualJournalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManualJournals} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific manual journal
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} manualJournalID Unique identifier for a ManualJournal
     * @param {module:model/ManualJournals} manualJournals 
     * @param {module:api/AccountingApi~updateManualJournalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManualJournals}
     */
    updateManualJournal(xeroTenantId, manualJournalID, manualJournals, callback) {
      let postBody = manualJournals;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateManualJournal");
      }
      // verify the required parameter 'manualJournalID' is set
      if (manualJournalID === undefined || manualJournalID === null) {
        throw new Error("Missing the required parameter 'manualJournalID' when calling updateManualJournal");
      }
      // verify the required parameter 'manualJournals' is set
      if (manualJournals === undefined || manualJournals === null) {
        throw new Error("Missing the required parameter 'manualJournals' when calling updateManualJournal");
      }

      let pathParams = {
        'ManualJournalID': manualJournalID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManualJournals;
      return this.apiClient.callApi(
        '/ManualJournals/{ManualJournalID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateManualJournalAttachmentByFileName operation.
     * @callback module:api/AccountingApi~updateManualJournalAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific attachment from a specific manual journal by file name
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} manualJournalID Unique identifier for a ManualJournal
     * @param {String} fileName The name of the file being attached to a ManualJournal
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~updateManualJournalAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    updateManualJournalAttachmentByFileName(xeroTenantId, manualJournalID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateManualJournalAttachmentByFileName");
      }
      // verify the required parameter 'manualJournalID' is set
      if (manualJournalID === undefined || manualJournalID === null) {
        throw new Error("Missing the required parameter 'manualJournalID' when calling updateManualJournalAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling updateManualJournalAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateManualJournalAttachmentByFileName");
      }

      let pathParams = {
        'ManualJournalID': manualJournalID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/ManualJournals/{ManualJournalID}/Attachments/{FileName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrCreateBankTransactions operation.
     * @callback module:api/AccountingApi~updateOrCreateBankTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankTransactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates or creates one or more spent or received money transaction
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/BankTransactions} bankTransactions 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~updateOrCreateBankTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankTransactions}
     */
    updateOrCreateBankTransactions(xeroTenantId, bankTransactions, opts, callback) {
      opts = opts || {};
      let postBody = bankTransactions;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateOrCreateBankTransactions");
      }
      // verify the required parameter 'bankTransactions' is set
      if (bankTransactions === undefined || bankTransactions === null) {
        throw new Error("Missing the required parameter 'bankTransactions' when calling updateOrCreateBankTransactions");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors'],
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BankTransactions;
      return this.apiClient.callApi(
        '/BankTransactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrCreateContacts operation.
     * @callback module:api/AccountingApi~updateOrCreateContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contacts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates or creates one or more contacts in a Xero organisation
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/Contacts} contacts 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {module:api/AccountingApi~updateOrCreateContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contacts}
     */
    updateOrCreateContacts(xeroTenantId, contacts, opts, callback) {
      opts = opts || {};
      let postBody = contacts;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateOrCreateContacts");
      }
      // verify the required parameter 'contacts' is set
      if (contacts === undefined || contacts === null) {
        throw new Error("Missing the required parameter 'contacts' when calling updateOrCreateContacts");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Contacts;
      return this.apiClient.callApi(
        '/Contacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrCreateCreditNotes operation.
     * @callback module:api/AccountingApi~updateOrCreateCreditNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditNotes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates or creates one or more credit notes
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/CreditNotes} creditNotes an array of Credit Notes with a single CreditNote object.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~updateOrCreateCreditNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditNotes}
     */
    updateOrCreateCreditNotes(xeroTenantId, creditNotes, opts, callback) {
      opts = opts || {};
      let postBody = creditNotes;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateOrCreateCreditNotes");
      }
      // verify the required parameter 'creditNotes' is set
      if (creditNotes === undefined || creditNotes === null) {
        throw new Error("Missing the required parameter 'creditNotes' when calling updateOrCreateCreditNotes");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors'],
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreditNotes;
      return this.apiClient.callApi(
        '/CreditNotes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrCreateEmployees operation.
     * @callback module:api/AccountingApi~updateOrCreateEmployeesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Employees} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a single new employees used in Xero payrun
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/Employees} employees Employees with array of Employee object in body of request
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {module:api/AccountingApi~updateOrCreateEmployeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Employees}
     */
    updateOrCreateEmployees(xeroTenantId, employees, opts, callback) {
      opts = opts || {};
      let postBody = employees;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateOrCreateEmployees");
      }
      // verify the required parameter 'employees' is set
      if (employees === undefined || employees === null) {
        throw new Error("Missing the required parameter 'employees' when calling updateOrCreateEmployees");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Employees;
      return this.apiClient.callApi(
        '/Employees', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrCreateInvoices operation.
     * @callback module:api/AccountingApi~updateOrCreateInvoicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invoices} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates or creates one or more sales invoices or purchase bills
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/Invoices} invoices 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~updateOrCreateInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invoices}
     */
    updateOrCreateInvoices(xeroTenantId, invoices, opts, callback) {
      opts = opts || {};
      let postBody = invoices;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateOrCreateInvoices");
      }
      // verify the required parameter 'invoices' is set
      if (invoices === undefined || invoices === null) {
        throw new Error("Missing the required parameter 'invoices' when calling updateOrCreateInvoices");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors'],
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Invoices;
      return this.apiClient.callApi(
        '/Invoices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrCreateItems operation.
     * @callback module:api/AccountingApi~updateOrCreateItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Items} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates or creates one or more items
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/Items} items 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~updateOrCreateItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Items}
     */
    updateOrCreateItems(xeroTenantId, items, opts, callback) {
      opts = opts || {};
      let postBody = items;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateOrCreateItems");
      }
      // verify the required parameter 'items' is set
      if (items === undefined || items === null) {
        throw new Error("Missing the required parameter 'items' when calling updateOrCreateItems");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors'],
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Items;
      return this.apiClient.callApi(
        '/Items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrCreateManualJournals operation.
     * @callback module:api/AccountingApi~updateOrCreateManualJournalsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManualJournals} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates or creates a single manual journal
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/ManualJournals} manualJournals ManualJournals array with ManualJournal object in body of request
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {module:api/AccountingApi~updateOrCreateManualJournalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManualJournals}
     */
    updateOrCreateManualJournals(xeroTenantId, manualJournals, opts, callback) {
      opts = opts || {};
      let postBody = manualJournals;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateOrCreateManualJournals");
      }
      // verify the required parameter 'manualJournals' is set
      if (manualJournals === undefined || manualJournals === null) {
        throw new Error("Missing the required parameter 'manualJournals' when calling updateOrCreateManualJournals");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManualJournals;
      return this.apiClient.callApi(
        '/ManualJournals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrCreatePurchaseOrders operation.
     * @callback module:api/AccountingApi~updateOrCreatePurchaseOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates or creates one or more purchase orders
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/PurchaseOrders} purchaseOrders 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {module:api/AccountingApi~updateOrCreatePurchaseOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseOrders}
     */
    updateOrCreatePurchaseOrders(xeroTenantId, purchaseOrders, opts, callback) {
      opts = opts || {};
      let postBody = purchaseOrders;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateOrCreatePurchaseOrders");
      }
      // verify the required parameter 'purchaseOrders' is set
      if (purchaseOrders === undefined || purchaseOrders === null) {
        throw new Error("Missing the required parameter 'purchaseOrders' when calling updateOrCreatePurchaseOrders");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseOrders;
      return this.apiClient.callApi(
        '/PurchaseOrders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrCreateQuotes operation.
     * @callback module:api/AccountingApi~updateOrCreateQuotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Quotes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates or creates one or more quotes
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/Quotes} quotes 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [summarizeErrors = false)] If false return 200 OK and mix of successfully created objects and any with validation errors
     * @param {module:api/AccountingApi~updateOrCreateQuotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Quotes}
     */
    updateOrCreateQuotes(xeroTenantId, quotes, opts, callback) {
      opts = opts || {};
      let postBody = quotes;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateOrCreateQuotes");
      }
      // verify the required parameter 'quotes' is set
      if (quotes === undefined || quotes === null) {
        throw new Error("Missing the required parameter 'quotes' when calling updateOrCreateQuotes");
      }

      let pathParams = {
      };
      let queryParams = {
        'summarizeErrors': opts['summarizeErrors']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Quotes;
      return this.apiClient.callApi(
        '/Quotes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePurchaseOrder operation.
     * @callback module:api/AccountingApi~updatePurchaseOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific purchase order
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} purchaseOrderID Unique identifier for a PurchaseOrder
     * @param {module:model/PurchaseOrders} purchaseOrders 
     * @param {module:api/AccountingApi~updatePurchaseOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseOrders}
     */
    updatePurchaseOrder(xeroTenantId, purchaseOrderID, purchaseOrders, callback) {
      let postBody = purchaseOrders;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updatePurchaseOrder");
      }
      // verify the required parameter 'purchaseOrderID' is set
      if (purchaseOrderID === undefined || purchaseOrderID === null) {
        throw new Error("Missing the required parameter 'purchaseOrderID' when calling updatePurchaseOrder");
      }
      // verify the required parameter 'purchaseOrders' is set
      if (purchaseOrders === undefined || purchaseOrders === null) {
        throw new Error("Missing the required parameter 'purchaseOrders' when calling updatePurchaseOrder");
      }

      let pathParams = {
        'PurchaseOrderID': purchaseOrderID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseOrders;
      return this.apiClient.callApi(
        '/PurchaseOrders/{PurchaseOrderID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePurchaseOrderAttachmentByFileName operation.
     * @callback module:api/AccountingApi~updatePurchaseOrderAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific attachment for a specific purchase order by filename
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} purchaseOrderID Unique identifier for Purchase Order object
     * @param {String} fileName Name of the attachment
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~updatePurchaseOrderAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    updatePurchaseOrderAttachmentByFileName(xeroTenantId, purchaseOrderID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updatePurchaseOrderAttachmentByFileName");
      }
      // verify the required parameter 'purchaseOrderID' is set
      if (purchaseOrderID === undefined || purchaseOrderID === null) {
        throw new Error("Missing the required parameter 'purchaseOrderID' when calling updatePurchaseOrderAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling updatePurchaseOrderAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePurchaseOrderAttachmentByFileName");
      }

      let pathParams = {
        'PurchaseOrderID': purchaseOrderID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQuote operation.
     * @callback module:api/AccountingApi~updateQuoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Quotes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific quote
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} quoteID Unique identifier for an Quote
     * @param {module:model/Quotes} quotes 
     * @param {module:api/AccountingApi~updateQuoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Quotes}
     */
    updateQuote(xeroTenantId, quoteID, quotes, callback) {
      let postBody = quotes;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateQuote");
      }
      // verify the required parameter 'quoteID' is set
      if (quoteID === undefined || quoteID === null) {
        throw new Error("Missing the required parameter 'quoteID' when calling updateQuote");
      }
      // verify the required parameter 'quotes' is set
      if (quotes === undefined || quotes === null) {
        throw new Error("Missing the required parameter 'quotes' when calling updateQuote");
      }

      let pathParams = {
        'QuoteID': quoteID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Quotes;
      return this.apiClient.callApi(
        '/Quotes/{QuoteID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQuoteAttachmentByFileName operation.
     * @callback module:api/AccountingApi~updateQuoteAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific attachment from a specific quote by filename
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} quoteID Unique identifier for Quote object
     * @param {String} fileName Name of the attachment
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~updateQuoteAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    updateQuoteAttachmentByFileName(xeroTenantId, quoteID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateQuoteAttachmentByFileName");
      }
      // verify the required parameter 'quoteID' is set
      if (quoteID === undefined || quoteID === null) {
        throw new Error("Missing the required parameter 'quoteID' when calling updateQuoteAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling updateQuoteAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateQuoteAttachmentByFileName");
      }

      let pathParams = {
        'QuoteID': quoteID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/Quotes/{QuoteID}/Attachments/{FileName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReceipt operation.
     * @callback module:api/AccountingApi~updateReceiptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Receipts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific draft expense claim receipts
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} receiptID Unique identifier for a Receipt
     * @param {module:model/Receipts} receipts 
     * @param {Object} opts Optional parameters
     * @param {Number} [unitdp] e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
     * @param {module:api/AccountingApi~updateReceiptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Receipts}
     */
    updateReceipt(xeroTenantId, receiptID, receipts, opts, callback) {
      opts = opts || {};
      let postBody = receipts;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateReceipt");
      }
      // verify the required parameter 'receiptID' is set
      if (receiptID === undefined || receiptID === null) {
        throw new Error("Missing the required parameter 'receiptID' when calling updateReceipt");
      }
      // verify the required parameter 'receipts' is set
      if (receipts === undefined || receipts === null) {
        throw new Error("Missing the required parameter 'receipts' when calling updateReceipt");
      }

      let pathParams = {
        'ReceiptID': receiptID
      };
      let queryParams = {
        'unitdp': opts['unitdp']
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Receipts;
      return this.apiClient.callApi(
        '/Receipts/{ReceiptID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReceiptAttachmentByFileName operation.
     * @callback module:api/AccountingApi~updateReceiptAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific attachment on a specific expense claim receipts by file name
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} receiptID Unique identifier for a Receipt
     * @param {String} fileName The name of the file being attached to the Receipt
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~updateReceiptAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    updateReceiptAttachmentByFileName(xeroTenantId, receiptID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateReceiptAttachmentByFileName");
      }
      // verify the required parameter 'receiptID' is set
      if (receiptID === undefined || receiptID === null) {
        throw new Error("Missing the required parameter 'receiptID' when calling updateReceiptAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling updateReceiptAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateReceiptAttachmentByFileName");
      }

      let pathParams = {
        'ReceiptID': receiptID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/Receipts/{ReceiptID}/Attachments/{FileName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepeatingInvoiceAttachmentByFileName operation.
     * @callback module:api/AccountingApi~updateRepeatingInvoiceAttachmentByFileNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific attachment from a specific repeating invoices by file name
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} repeatingInvoiceID Unique identifier for a Repeating Invoice
     * @param {String} fileName The name of the file being attached to a Repeating Invoice
     * @param {Blob} body Byte array of file in body of request
     * @param {module:api/AccountingApi~updateRepeatingInvoiceAttachmentByFileNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    updateRepeatingInvoiceAttachmentByFileName(xeroTenantId, repeatingInvoiceID, fileName, body, callback) {
      let postBody = body;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateRepeatingInvoiceAttachmentByFileName");
      }
      // verify the required parameter 'repeatingInvoiceID' is set
      if (repeatingInvoiceID === undefined || repeatingInvoiceID === null) {
        throw new Error("Missing the required parameter 'repeatingInvoiceID' when calling updateRepeatingInvoiceAttachmentByFileName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling updateRepeatingInvoiceAttachmentByFileName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRepeatingInvoiceAttachmentByFileName");
      }

      let pathParams = {
        'RepeatingInvoiceID': repeatingInvoiceID,
        'FileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Attachments;
      return this.apiClient.callApi(
        '/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaxRate operation.
     * @callback module:api/AccountingApi~updateTaxRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxRates} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates tax rates
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/TaxRates} taxRates 
     * @param {module:api/AccountingApi~updateTaxRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxRates}
     */
    updateTaxRate(xeroTenantId, taxRates, callback) {
      let postBody = taxRates;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateTaxRate");
      }
      // verify the required parameter 'taxRates' is set
      if (taxRates === undefined || taxRates === null) {
        throw new Error("Missing the required parameter 'taxRates' when calling updateTaxRate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TaxRates;
      return this.apiClient.callApi(
        '/TaxRates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTrackingCategory operation.
     * @callback module:api/AccountingApi~updateTrackingCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackingCategories} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific tracking category
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} trackingCategoryID Unique identifier for a TrackingCategory
     * @param {module:model/TrackingCategory} trackingCategory 
     * @param {module:api/AccountingApi~updateTrackingCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackingCategories}
     */
    updateTrackingCategory(xeroTenantId, trackingCategoryID, trackingCategory, callback) {
      let postBody = trackingCategory;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateTrackingCategory");
      }
      // verify the required parameter 'trackingCategoryID' is set
      if (trackingCategoryID === undefined || trackingCategoryID === null) {
        throw new Error("Missing the required parameter 'trackingCategoryID' when calling updateTrackingCategory");
      }
      // verify the required parameter 'trackingCategory' is set
      if (trackingCategory === undefined || trackingCategory === null) {
        throw new Error("Missing the required parameter 'trackingCategory' when calling updateTrackingCategory");
      }

      let pathParams = {
        'TrackingCategoryID': trackingCategoryID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackingCategories;
      return this.apiClient.callApi(
        '/TrackingCategories/{TrackingCategoryID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTrackingOptions operation.
     * @callback module:api/AccountingApi~updateTrackingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackingOptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific option for a specific tracking category
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} trackingCategoryID Unique identifier for a TrackingCategory
     * @param {String} trackingOptionID Unique identifier for a Tracking Option
     * @param {module:model/TrackingOption} trackingOption 
     * @param {module:api/AccountingApi~updateTrackingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackingOptions}
     */
    updateTrackingOptions(xeroTenantId, trackingCategoryID, trackingOptionID, trackingOption, callback) {
      let postBody = trackingOption;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateTrackingOptions");
      }
      // verify the required parameter 'trackingCategoryID' is set
      if (trackingCategoryID === undefined || trackingCategoryID === null) {
        throw new Error("Missing the required parameter 'trackingCategoryID' when calling updateTrackingOptions");
      }
      // verify the required parameter 'trackingOptionID' is set
      if (trackingOptionID === undefined || trackingOptionID === null) {
        throw new Error("Missing the required parameter 'trackingOptionID' when calling updateTrackingOptions");
      }
      // verify the required parameter 'trackingOption' is set
      if (trackingOption === undefined || trackingOption === null) {
        throw new Error("Missing the required parameter 'trackingOption' when calling updateTrackingOptions");
      }

      let pathParams = {
        'TrackingCategoryID': trackingCategoryID,
        'TrackingOptionID': trackingOptionID
      };
      let queryParams = {
      };
      let headerParams = {
        'xero-tenant-id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackingOptions;
      return this.apiClient.callApi(
        '/TrackingCategories/{TrackingCategoryID}/Options/{TrackingOptionID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
