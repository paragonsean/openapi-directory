# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BankAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, account_number: str=None, amount: float=None, bsb: str=None, remainder: bool=None, statement_text: str=None):
        """BankAccount - a model defined in OpenAPI

        :param account_name: The account_name of this BankAccount.
        :param account_number: The account_number of this BankAccount.
        :param amount: The amount of this BankAccount.
        :param bsb: The bsb of this BankAccount.
        :param remainder: The remainder of this BankAccount.
        :param statement_text: The statement_text of this BankAccount.
        """
        self.openapi_types = {
            'account_name': str,
            'account_number': str,
            'amount': float,
            'bsb': str,
            'remainder': bool,
            'statement_text': str
        }

        self.attribute_map = {
            'account_name': 'AccountName',
            'account_number': 'AccountNumber',
            'amount': 'Amount',
            'bsb': 'BSB',
            'remainder': 'Remainder',
            'statement_text': 'StatementText'
        }

        self._account_name = account_name
        self._account_number = account_number
        self._amount = amount
        self._bsb = bsb
        self._remainder = remainder
        self._statement_text = statement_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankAccount of this BankAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this BankAccount.

        The name of the account

        :return: The account_name of this BankAccount.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this BankAccount.

        The name of the account

        :param account_name: The account_name of this BankAccount.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this BankAccount.

        The account number

        :return: The account_number of this BankAccount.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BankAccount.

        The account number

        :param account_number: The account_number of this BankAccount.
        :type account_number: str
        """

        self._account_number = account_number

    @property
    def amount(self):
        """Gets the amount of this BankAccount.

        Fixed amounts (for example, if an employee wants to have $100 of their salary transferred to one account, and the remaining amount to another)

        :return: The amount of this BankAccount.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BankAccount.

        Fixed amounts (for example, if an employee wants to have $100 of their salary transferred to one account, and the remaining amount to another)

        :param amount: The amount of this BankAccount.
        :type amount: float
        """

        self._amount = amount

    @property
    def bsb(self):
        """Gets the bsb of this BankAccount.

        The BSB number of the account

        :return: The bsb of this BankAccount.
        :rtype: str
        """
        return self._bsb

    @bsb.setter
    def bsb(self, bsb):
        """Sets the bsb of this BankAccount.

        The BSB number of the account

        :param bsb: The bsb of this BankAccount.
        :type bsb: str
        """

        self._bsb = bsb

    @property
    def remainder(self):
        """Gets the remainder of this BankAccount.

        If this account is the Remaining bank account

        :return: The remainder of this BankAccount.
        :rtype: bool
        """
        return self._remainder

    @remainder.setter
    def remainder(self, remainder):
        """Sets the remainder of this BankAccount.

        If this account is the Remaining bank account

        :param remainder: The remainder of this BankAccount.
        :type remainder: bool
        """

        self._remainder = remainder

    @property
    def statement_text(self):
        """Gets the statement_text of this BankAccount.

        The text that will appear on your employee's bank statement when they receive payment

        :return: The statement_text of this BankAccount.
        :rtype: str
        """
        return self._statement_text

    @statement_text.setter
    def statement_text(self, statement_text):
        """Sets the statement_text of this BankAccount.

        The text that will appear on your employee's bank statement when they receive payment

        :param statement_text: The statement_text of this BankAccount.
        :type statement_text: str
        """

        self._statement_text = statement_text
