# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.employment_basis import EmploymentBasis
from openapi_server.models.residency_status import ResidencyStatus
from openapi_server.models.tfn_exemption_type import TFNExemptionType
from openapi_server import util


class TaxDeclaration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approved_withholding_variation_percentage: float=None, australian_resident_for_tax_purposes: bool=None, eligible_to_receive_leave_loading: bool=None, employee_id: str=None, employment_basis: EmploymentBasis=None, has_help_debt: bool=None, has_sfss_debt: bool=None, has_student_startup_loan: bool=None, has_trade_support_loan_debt: bool=None, residency_status: ResidencyStatus=None, tfn_exemption_type: TFNExemptionType=None, tax_file_number: str=None, tax_free_threshold_claimed: bool=None, tax_offset_estimated_amount: float=None, updated_date_utc: str=None, upward_variation_tax_withholding_amount: float=None):
        """TaxDeclaration - a model defined in OpenAPI

        :param approved_withholding_variation_percentage: The approved_withholding_variation_percentage of this TaxDeclaration.
        :param australian_resident_for_tax_purposes: The australian_resident_for_tax_purposes of this TaxDeclaration.
        :param eligible_to_receive_leave_loading: The eligible_to_receive_leave_loading of this TaxDeclaration.
        :param employee_id: The employee_id of this TaxDeclaration.
        :param employment_basis: The employment_basis of this TaxDeclaration.
        :param has_help_debt: The has_help_debt of this TaxDeclaration.
        :param has_sfss_debt: The has_sfss_debt of this TaxDeclaration.
        :param has_student_startup_loan: The has_student_startup_loan of this TaxDeclaration.
        :param has_trade_support_loan_debt: The has_trade_support_loan_debt of this TaxDeclaration.
        :param residency_status: The residency_status of this TaxDeclaration.
        :param tfn_exemption_type: The tfn_exemption_type of this TaxDeclaration.
        :param tax_file_number: The tax_file_number of this TaxDeclaration.
        :param tax_free_threshold_claimed: The tax_free_threshold_claimed of this TaxDeclaration.
        :param tax_offset_estimated_amount: The tax_offset_estimated_amount of this TaxDeclaration.
        :param updated_date_utc: The updated_date_utc of this TaxDeclaration.
        :param upward_variation_tax_withholding_amount: The upward_variation_tax_withholding_amount of this TaxDeclaration.
        """
        self.openapi_types = {
            'approved_withholding_variation_percentage': float,
            'australian_resident_for_tax_purposes': bool,
            'eligible_to_receive_leave_loading': bool,
            'employee_id': str,
            'employment_basis': EmploymentBasis,
            'has_help_debt': bool,
            'has_sfss_debt': bool,
            'has_student_startup_loan': bool,
            'has_trade_support_loan_debt': bool,
            'residency_status': ResidencyStatus,
            'tfn_exemption_type': TFNExemptionType,
            'tax_file_number': str,
            'tax_free_threshold_claimed': bool,
            'tax_offset_estimated_amount': float,
            'updated_date_utc': str,
            'upward_variation_tax_withholding_amount': float
        }

        self.attribute_map = {
            'approved_withholding_variation_percentage': 'ApprovedWithholdingVariationPercentage',
            'australian_resident_for_tax_purposes': 'AustralianResidentForTaxPurposes',
            'eligible_to_receive_leave_loading': 'EligibleToReceiveLeaveLoading',
            'employee_id': 'EmployeeID',
            'employment_basis': 'EmploymentBasis',
            'has_help_debt': 'HasHELPDebt',
            'has_sfss_debt': 'HasSFSSDebt',
            'has_student_startup_loan': 'HasStudentStartupLoan',
            'has_trade_support_loan_debt': 'HasTradeSupportLoanDebt',
            'residency_status': 'ResidencyStatus',
            'tfn_exemption_type': 'TFNExemptionType',
            'tax_file_number': 'TaxFileNumber',
            'tax_free_threshold_claimed': 'TaxFreeThresholdClaimed',
            'tax_offset_estimated_amount': 'TaxOffsetEstimatedAmount',
            'updated_date_utc': 'UpdatedDateUTC',
            'upward_variation_tax_withholding_amount': 'UpwardVariationTaxWithholdingAmount'
        }

        self._approved_withholding_variation_percentage = approved_withholding_variation_percentage
        self._australian_resident_for_tax_purposes = australian_resident_for_tax_purposes
        self._eligible_to_receive_leave_loading = eligible_to_receive_leave_loading
        self._employee_id = employee_id
        self._employment_basis = employment_basis
        self._has_help_debt = has_help_debt
        self._has_sfss_debt = has_sfss_debt
        self._has_student_startup_loan = has_student_startup_loan
        self._has_trade_support_loan_debt = has_trade_support_loan_debt
        self._residency_status = residency_status
        self._tfn_exemption_type = tfn_exemption_type
        self._tax_file_number = tax_file_number
        self._tax_free_threshold_claimed = tax_free_threshold_claimed
        self._tax_offset_estimated_amount = tax_offset_estimated_amount
        self._updated_date_utc = updated_date_utc
        self._upward_variation_tax_withholding_amount = upward_variation_tax_withholding_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxDeclaration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaxDeclaration of this TaxDeclaration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approved_withholding_variation_percentage(self):
        """Gets the approved_withholding_variation_percentage of this TaxDeclaration.

        If the employee has approved withholding variation. e.g (0 - 100)

        :return: The approved_withholding_variation_percentage of this TaxDeclaration.
        :rtype: float
        """
        return self._approved_withholding_variation_percentage

    @approved_withholding_variation_percentage.setter
    def approved_withholding_variation_percentage(self, approved_withholding_variation_percentage):
        """Sets the approved_withholding_variation_percentage of this TaxDeclaration.

        If the employee has approved withholding variation. e.g (0 - 100)

        :param approved_withholding_variation_percentage: The approved_withholding_variation_percentage of this TaxDeclaration.
        :type approved_withholding_variation_percentage: float
        """

        self._approved_withholding_variation_percentage = approved_withholding_variation_percentage

    @property
    def australian_resident_for_tax_purposes(self):
        """Gets the australian_resident_for_tax_purposes of this TaxDeclaration.

        If the employee is Australian resident for tax purposes. e.g true or false

        :return: The australian_resident_for_tax_purposes of this TaxDeclaration.
        :rtype: bool
        """
        return self._australian_resident_for_tax_purposes

    @australian_resident_for_tax_purposes.setter
    def australian_resident_for_tax_purposes(self, australian_resident_for_tax_purposes):
        """Sets the australian_resident_for_tax_purposes of this TaxDeclaration.

        If the employee is Australian resident for tax purposes. e.g true or false

        :param australian_resident_for_tax_purposes: The australian_resident_for_tax_purposes of this TaxDeclaration.
        :type australian_resident_for_tax_purposes: bool
        """

        self._australian_resident_for_tax_purposes = australian_resident_for_tax_purposes

    @property
    def eligible_to_receive_leave_loading(self):
        """Gets the eligible_to_receive_leave_loading of this TaxDeclaration.

        If the employee is eligible to receive an additional percentage on top of ordinary earnings when they take leave (typically 17.5%). e.g true or false

        :return: The eligible_to_receive_leave_loading of this TaxDeclaration.
        :rtype: bool
        """
        return self._eligible_to_receive_leave_loading

    @eligible_to_receive_leave_loading.setter
    def eligible_to_receive_leave_loading(self, eligible_to_receive_leave_loading):
        """Sets the eligible_to_receive_leave_loading of this TaxDeclaration.

        If the employee is eligible to receive an additional percentage on top of ordinary earnings when they take leave (typically 17.5%). e.g true or false

        :param eligible_to_receive_leave_loading: The eligible_to_receive_leave_loading of this TaxDeclaration.
        :type eligible_to_receive_leave_loading: bool
        """

        self._eligible_to_receive_leave_loading = eligible_to_receive_leave_loading

    @property
    def employee_id(self):
        """Gets the employee_id of this TaxDeclaration.

        Address line 1 for employee home address

        :return: The employee_id of this TaxDeclaration.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this TaxDeclaration.

        Address line 1 for employee home address

        :param employee_id: The employee_id of this TaxDeclaration.
        :type employee_id: str
        """

        self._employee_id = employee_id

    @property
    def employment_basis(self):
        """Gets the employment_basis of this TaxDeclaration.


        :return: The employment_basis of this TaxDeclaration.
        :rtype: EmploymentBasis
        """
        return self._employment_basis

    @employment_basis.setter
    def employment_basis(self, employment_basis):
        """Sets the employment_basis of this TaxDeclaration.


        :param employment_basis: The employment_basis of this TaxDeclaration.
        :type employment_basis: EmploymentBasis
        """

        self._employment_basis = employment_basis

    @property
    def has_help_debt(self):
        """Gets the has_help_debt of this TaxDeclaration.

        If employee has HECS or HELP debt. e.g true or false

        :return: The has_help_debt of this TaxDeclaration.
        :rtype: bool
        """
        return self._has_help_debt

    @has_help_debt.setter
    def has_help_debt(self, has_help_debt):
        """Sets the has_help_debt of this TaxDeclaration.

        If employee has HECS or HELP debt. e.g true or false

        :param has_help_debt: The has_help_debt of this TaxDeclaration.
        :type has_help_debt: bool
        """

        self._has_help_debt = has_help_debt

    @property
    def has_sfss_debt(self):
        """Gets the has_sfss_debt of this TaxDeclaration.

        If employee has financial supplement debt. e.g true or false

        :return: The has_sfss_debt of this TaxDeclaration.
        :rtype: bool
        """
        return self._has_sfss_debt

    @has_sfss_debt.setter
    def has_sfss_debt(self, has_sfss_debt):
        """Sets the has_sfss_debt of this TaxDeclaration.

        If employee has financial supplement debt. e.g true or false

        :param has_sfss_debt: The has_sfss_debt of this TaxDeclaration.
        :type has_sfss_debt: bool
        """

        self._has_sfss_debt = has_sfss_debt

    @property
    def has_student_startup_loan(self):
        """Gets the has_student_startup_loan of this TaxDeclaration.

        If the employee is eligible for student startup loan rules

        :return: The has_student_startup_loan of this TaxDeclaration.
        :rtype: bool
        """
        return self._has_student_startup_loan

    @has_student_startup_loan.setter
    def has_student_startup_loan(self, has_student_startup_loan):
        """Sets the has_student_startup_loan of this TaxDeclaration.

        If the employee is eligible for student startup loan rules

        :param has_student_startup_loan: The has_student_startup_loan of this TaxDeclaration.
        :type has_student_startup_loan: bool
        """

        self._has_student_startup_loan = has_student_startup_loan

    @property
    def has_trade_support_loan_debt(self):
        """Gets the has_trade_support_loan_debt of this TaxDeclaration.

        If employee has trade support loan. e.g true or false

        :return: The has_trade_support_loan_debt of this TaxDeclaration.
        :rtype: bool
        """
        return self._has_trade_support_loan_debt

    @has_trade_support_loan_debt.setter
    def has_trade_support_loan_debt(self, has_trade_support_loan_debt):
        """Sets the has_trade_support_loan_debt of this TaxDeclaration.

        If employee has trade support loan. e.g true or false

        :param has_trade_support_loan_debt: The has_trade_support_loan_debt of this TaxDeclaration.
        :type has_trade_support_loan_debt: bool
        """

        self._has_trade_support_loan_debt = has_trade_support_loan_debt

    @property
    def residency_status(self):
        """Gets the residency_status of this TaxDeclaration.


        :return: The residency_status of this TaxDeclaration.
        :rtype: ResidencyStatus
        """
        return self._residency_status

    @residency_status.setter
    def residency_status(self, residency_status):
        """Sets the residency_status of this TaxDeclaration.


        :param residency_status: The residency_status of this TaxDeclaration.
        :type residency_status: ResidencyStatus
        """

        self._residency_status = residency_status

    @property
    def tfn_exemption_type(self):
        """Gets the tfn_exemption_type of this TaxDeclaration.


        :return: The tfn_exemption_type of this TaxDeclaration.
        :rtype: TFNExemptionType
        """
        return self._tfn_exemption_type

    @tfn_exemption_type.setter
    def tfn_exemption_type(self, tfn_exemption_type):
        """Sets the tfn_exemption_type of this TaxDeclaration.


        :param tfn_exemption_type: The tfn_exemption_type of this TaxDeclaration.
        :type tfn_exemption_type: TFNExemptionType
        """

        self._tfn_exemption_type = tfn_exemption_type

    @property
    def tax_file_number(self):
        """Gets the tax_file_number of this TaxDeclaration.

        The tax file number e.g 123123123.

        :return: The tax_file_number of this TaxDeclaration.
        :rtype: str
        """
        return self._tax_file_number

    @tax_file_number.setter
    def tax_file_number(self, tax_file_number):
        """Sets the tax_file_number of this TaxDeclaration.

        The tax file number e.g 123123123.

        :param tax_file_number: The tax_file_number of this TaxDeclaration.
        :type tax_file_number: str
        """

        self._tax_file_number = tax_file_number

    @property
    def tax_free_threshold_claimed(self):
        """Gets the tax_free_threshold_claimed of this TaxDeclaration.

        If tax free threshold claimed. e.g true or false

        :return: The tax_free_threshold_claimed of this TaxDeclaration.
        :rtype: bool
        """
        return self._tax_free_threshold_claimed

    @tax_free_threshold_claimed.setter
    def tax_free_threshold_claimed(self, tax_free_threshold_claimed):
        """Sets the tax_free_threshold_claimed of this TaxDeclaration.

        If tax free threshold claimed. e.g true or false

        :param tax_free_threshold_claimed: The tax_free_threshold_claimed of this TaxDeclaration.
        :type tax_free_threshold_claimed: bool
        """

        self._tax_free_threshold_claimed = tax_free_threshold_claimed

    @property
    def tax_offset_estimated_amount(self):
        """Gets the tax_offset_estimated_amount of this TaxDeclaration.

        If has tax offset estimated then the tax offset estimated amount. e.g 100

        :return: The tax_offset_estimated_amount of this TaxDeclaration.
        :rtype: float
        """
        return self._tax_offset_estimated_amount

    @tax_offset_estimated_amount.setter
    def tax_offset_estimated_amount(self, tax_offset_estimated_amount):
        """Sets the tax_offset_estimated_amount of this TaxDeclaration.

        If has tax offset estimated then the tax offset estimated amount. e.g 100

        :param tax_offset_estimated_amount: The tax_offset_estimated_amount of this TaxDeclaration.
        :type tax_offset_estimated_amount: float
        """

        self._tax_offset_estimated_amount = tax_offset_estimated_amount

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this TaxDeclaration.

        Last modified timestamp

        :return: The updated_date_utc of this TaxDeclaration.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this TaxDeclaration.

        Last modified timestamp

        :param updated_date_utc: The updated_date_utc of this TaxDeclaration.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc

    @property
    def upward_variation_tax_withholding_amount(self):
        """Gets the upward_variation_tax_withholding_amount of this TaxDeclaration.

        If the employee has requested that additional tax be withheld each pay run. e.g 50

        :return: The upward_variation_tax_withholding_amount of this TaxDeclaration.
        :rtype: float
        """
        return self._upward_variation_tax_withholding_amount

    @upward_variation_tax_withholding_amount.setter
    def upward_variation_tax_withholding_amount(self, upward_variation_tax_withholding_amount):
        """Sets the upward_variation_tax_withholding_amount of this TaxDeclaration.

        If the employee has requested that additional tax be withheld each pay run. e.g 50

        :param upward_variation_tax_withholding_amount: The upward_variation_tax_withholding_amount of this TaxDeclaration.
        :type upward_variation_tax_withholding_amount: float
        """

        self._upward_variation_tax_withholding_amount = upward_variation_tax_withholding_amount
