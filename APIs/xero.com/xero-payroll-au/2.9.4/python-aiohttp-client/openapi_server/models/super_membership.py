# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SuperMembership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, employee_number: str=None, super_fund_id: str=None, super_membership_id: str=None):
        """SuperMembership - a model defined in OpenAPI

        :param employee_number: The employee_number of this SuperMembership.
        :param super_fund_id: The super_fund_id of this SuperMembership.
        :param super_membership_id: The super_membership_id of this SuperMembership.
        """
        self.openapi_types = {
            'employee_number': str,
            'super_fund_id': str,
            'super_membership_id': str
        }

        self.attribute_map = {
            'employee_number': 'EmployeeNumber',
            'super_fund_id': 'SuperFundID',
            'super_membership_id': 'SuperMembershipID'
        }

        self._employee_number = employee_number
        self._super_fund_id = super_fund_id
        self._super_membership_id = super_membership_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuperMembership':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuperMembership of this SuperMembership.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def employee_number(self):
        """Gets the employee_number of this SuperMembership.

        The membership number assigned to the employee by the super fund.

        :return: The employee_number of this SuperMembership.
        :rtype: str
        """
        return self._employee_number

    @employee_number.setter
    def employee_number(self, employee_number):
        """Sets the employee_number of this SuperMembership.

        The membership number assigned to the employee by the super fund.

        :param employee_number: The employee_number of this SuperMembership.
        :type employee_number: str
        """
        if employee_number is None:
            raise ValueError("Invalid value for `employee_number`, must not be `None`")

        self._employee_number = employee_number

    @property
    def super_fund_id(self):
        """Gets the super_fund_id of this SuperMembership.

        Xero identifier for super fund

        :return: The super_fund_id of this SuperMembership.
        :rtype: str
        """
        return self._super_fund_id

    @super_fund_id.setter
    def super_fund_id(self, super_fund_id):
        """Sets the super_fund_id of this SuperMembership.

        Xero identifier for super fund

        :param super_fund_id: The super_fund_id of this SuperMembership.
        :type super_fund_id: str
        """
        if super_fund_id is None:
            raise ValueError("Invalid value for `super_fund_id`, must not be `None`")

        self._super_fund_id = super_fund_id

    @property
    def super_membership_id(self):
        """Gets the super_membership_id of this SuperMembership.

        Xero unique identifier for Super membership

        :return: The super_membership_id of this SuperMembership.
        :rtype: str
        """
        return self._super_membership_id

    @super_membership_id.setter
    def super_membership_id(self, super_membership_id):
        """Sets the super_membership_id of this SuperMembership.

        Xero unique identifier for Super membership

        :param super_membership_id: The super_membership_id of this SuperMembership.
        :type super_membership_id: str
        """

        self._super_membership_id = super_membership_id
