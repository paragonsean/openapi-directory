# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allowance_type import AllowanceType
from openapi_server.models.earnings_type import EarningsType
from openapi_server.models.employment_termination_payment_type import EmploymentTerminationPaymentType
from openapi_server.models.rate_type import RateType
from openapi_server import util


class EarningsRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, accrue_leave: bool=None, allowance_type: AllowanceType=None, amount: float=None, current_record: bool=None, earnings_rate_id: str=None, earnings_type: EarningsType=None, employment_termination_payment_type: EmploymentTerminationPaymentType=None, is_exempt_from_super: bool=None, is_exempt_from_tax: bool=None, is_reportable_as_w1: bool=None, multiplier: float=None, name: str=None, rate_per_unit: str=None, rate_type: RateType=None, type_of_units: str=None, updated_date_utc: str=None):
        """EarningsRate - a model defined in OpenAPI

        :param account_code: The account_code of this EarningsRate.
        :param accrue_leave: The accrue_leave of this EarningsRate.
        :param allowance_type: The allowance_type of this EarningsRate.
        :param amount: The amount of this EarningsRate.
        :param current_record: The current_record of this EarningsRate.
        :param earnings_rate_id: The earnings_rate_id of this EarningsRate.
        :param earnings_type: The earnings_type of this EarningsRate.
        :param employment_termination_payment_type: The employment_termination_payment_type of this EarningsRate.
        :param is_exempt_from_super: The is_exempt_from_super of this EarningsRate.
        :param is_exempt_from_tax: The is_exempt_from_tax of this EarningsRate.
        :param is_reportable_as_w1: The is_reportable_as_w1 of this EarningsRate.
        :param multiplier: The multiplier of this EarningsRate.
        :param name: The name of this EarningsRate.
        :param rate_per_unit: The rate_per_unit of this EarningsRate.
        :param rate_type: The rate_type of this EarningsRate.
        :param type_of_units: The type_of_units of this EarningsRate.
        :param updated_date_utc: The updated_date_utc of this EarningsRate.
        """
        self.openapi_types = {
            'account_code': str,
            'accrue_leave': bool,
            'allowance_type': AllowanceType,
            'amount': float,
            'current_record': bool,
            'earnings_rate_id': str,
            'earnings_type': EarningsType,
            'employment_termination_payment_type': EmploymentTerminationPaymentType,
            'is_exempt_from_super': bool,
            'is_exempt_from_tax': bool,
            'is_reportable_as_w1': bool,
            'multiplier': float,
            'name': str,
            'rate_per_unit': str,
            'rate_type': RateType,
            'type_of_units': str,
            'updated_date_utc': str
        }

        self.attribute_map = {
            'account_code': 'AccountCode',
            'accrue_leave': 'AccrueLeave',
            'allowance_type': 'AllowanceType',
            'amount': 'Amount',
            'current_record': 'CurrentRecord',
            'earnings_rate_id': 'EarningsRateID',
            'earnings_type': 'EarningsType',
            'employment_termination_payment_type': 'EmploymentTerminationPaymentType',
            'is_exempt_from_super': 'IsExemptFromSuper',
            'is_exempt_from_tax': 'IsExemptFromTax',
            'is_reportable_as_w1': 'IsReportableAsW1',
            'multiplier': 'Multiplier',
            'name': 'Name',
            'rate_per_unit': 'RatePerUnit',
            'rate_type': 'RateType',
            'type_of_units': 'TypeOfUnits',
            'updated_date_utc': 'UpdatedDateUTC'
        }

        self._account_code = account_code
        self._accrue_leave = accrue_leave
        self._allowance_type = allowance_type
        self._amount = amount
        self._current_record = current_record
        self._earnings_rate_id = earnings_rate_id
        self._earnings_type = earnings_type
        self._employment_termination_payment_type = employment_termination_payment_type
        self._is_exempt_from_super = is_exempt_from_super
        self._is_exempt_from_tax = is_exempt_from_tax
        self._is_reportable_as_w1 = is_reportable_as_w1
        self._multiplier = multiplier
        self._name = name
        self._rate_per_unit = rate_per_unit
        self._rate_type = rate_type
        self._type_of_units = type_of_units
        self._updated_date_utc = updated_date_utc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EarningsRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EarningsRate of this EarningsRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this EarningsRate.

        See Accounts

        :return: The account_code of this EarningsRate.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this EarningsRate.

        See Accounts

        :param account_code: The account_code of this EarningsRate.
        :type account_code: str
        """

        self._account_code = account_code

    @property
    def accrue_leave(self):
        """Gets the accrue_leave of this EarningsRate.

        Indicates that this earnings rate should accrue leave. Only applicable if RateType is MULTIPLE

        :return: The accrue_leave of this EarningsRate.
        :rtype: bool
        """
        return self._accrue_leave

    @accrue_leave.setter
    def accrue_leave(self, accrue_leave):
        """Sets the accrue_leave of this EarningsRate.

        Indicates that this earnings rate should accrue leave. Only applicable if RateType is MULTIPLE

        :param accrue_leave: The accrue_leave of this EarningsRate.
        :type accrue_leave: bool
        """

        self._accrue_leave = accrue_leave

    @property
    def allowance_type(self):
        """Gets the allowance_type of this EarningsRate.


        :return: The allowance_type of this EarningsRate.
        :rtype: AllowanceType
        """
        return self._allowance_type

    @allowance_type.setter
    def allowance_type(self, allowance_type):
        """Sets the allowance_type of this EarningsRate.


        :param allowance_type: The allowance_type of this EarningsRate.
        :type allowance_type: AllowanceType
        """

        self._allowance_type = allowance_type

    @property
    def amount(self):
        """Gets the amount of this EarningsRate.

        Optional Amount for FIXEDAMOUNT RateType EarningsRate

        :return: The amount of this EarningsRate.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this EarningsRate.

        Optional Amount for FIXEDAMOUNT RateType EarningsRate

        :param amount: The amount of this EarningsRate.
        :type amount: float
        """

        self._amount = amount

    @property
    def current_record(self):
        """Gets the current_record of this EarningsRate.

        Is the current record

        :return: The current_record of this EarningsRate.
        :rtype: bool
        """
        return self._current_record

    @current_record.setter
    def current_record(self, current_record):
        """Sets the current_record of this EarningsRate.

        Is the current record

        :param current_record: The current_record of this EarningsRate.
        :type current_record: bool
        """

        self._current_record = current_record

    @property
    def earnings_rate_id(self):
        """Gets the earnings_rate_id of this EarningsRate.

        Xero identifier

        :return: The earnings_rate_id of this EarningsRate.
        :rtype: str
        """
        return self._earnings_rate_id

    @earnings_rate_id.setter
    def earnings_rate_id(self, earnings_rate_id):
        """Sets the earnings_rate_id of this EarningsRate.

        Xero identifier

        :param earnings_rate_id: The earnings_rate_id of this EarningsRate.
        :type earnings_rate_id: str
        """

        self._earnings_rate_id = earnings_rate_id

    @property
    def earnings_type(self):
        """Gets the earnings_type of this EarningsRate.


        :return: The earnings_type of this EarningsRate.
        :rtype: EarningsType
        """
        return self._earnings_type

    @earnings_type.setter
    def earnings_type(self, earnings_type):
        """Sets the earnings_type of this EarningsRate.


        :param earnings_type: The earnings_type of this EarningsRate.
        :type earnings_type: EarningsType
        """

        self._earnings_type = earnings_type

    @property
    def employment_termination_payment_type(self):
        """Gets the employment_termination_payment_type of this EarningsRate.


        :return: The employment_termination_payment_type of this EarningsRate.
        :rtype: EmploymentTerminationPaymentType
        """
        return self._employment_termination_payment_type

    @employment_termination_payment_type.setter
    def employment_termination_payment_type(self, employment_termination_payment_type):
        """Sets the employment_termination_payment_type of this EarningsRate.


        :param employment_termination_payment_type: The employment_termination_payment_type of this EarningsRate.
        :type employment_termination_payment_type: EmploymentTerminationPaymentType
        """

        self._employment_termination_payment_type = employment_termination_payment_type

    @property
    def is_exempt_from_super(self):
        """Gets the is_exempt_from_super of this EarningsRate.

        See the ATO website for details of which payments are exempt from SGC

        :return: The is_exempt_from_super of this EarningsRate.
        :rtype: bool
        """
        return self._is_exempt_from_super

    @is_exempt_from_super.setter
    def is_exempt_from_super(self, is_exempt_from_super):
        """Sets the is_exempt_from_super of this EarningsRate.

        See the ATO website for details of which payments are exempt from SGC

        :param is_exempt_from_super: The is_exempt_from_super of this EarningsRate.
        :type is_exempt_from_super: bool
        """

        self._is_exempt_from_super = is_exempt_from_super

    @property
    def is_exempt_from_tax(self):
        """Gets the is_exempt_from_tax of this EarningsRate.

        Most payments are subject to tax, so you should only set this value if you are sure that a payment is exempt from PAYG withholding

        :return: The is_exempt_from_tax of this EarningsRate.
        :rtype: bool
        """
        return self._is_exempt_from_tax

    @is_exempt_from_tax.setter
    def is_exempt_from_tax(self, is_exempt_from_tax):
        """Sets the is_exempt_from_tax of this EarningsRate.

        Most payments are subject to tax, so you should only set this value if you are sure that a payment is exempt from PAYG withholding

        :param is_exempt_from_tax: The is_exempt_from_tax of this EarningsRate.
        :type is_exempt_from_tax: bool
        """

        self._is_exempt_from_tax = is_exempt_from_tax

    @property
    def is_reportable_as_w1(self):
        """Gets the is_reportable_as_w1 of this EarningsRate.

        Boolean to determine if the earnings rate is reportable or exempt from W1

        :return: The is_reportable_as_w1 of this EarningsRate.
        :rtype: bool
        """
        return self._is_reportable_as_w1

    @is_reportable_as_w1.setter
    def is_reportable_as_w1(self, is_reportable_as_w1):
        """Sets the is_reportable_as_w1 of this EarningsRate.

        Boolean to determine if the earnings rate is reportable or exempt from W1

        :param is_reportable_as_w1: The is_reportable_as_w1 of this EarningsRate.
        :type is_reportable_as_w1: bool
        """

        self._is_reportable_as_w1 = is_reportable_as_w1

    @property
    def multiplier(self):
        """Gets the multiplier of this EarningsRate.

        This is the multiplier used to calculate the rate per unit, based on the employee’s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MULTIPLE

        :return: The multiplier of this EarningsRate.
        :rtype: float
        """
        return self._multiplier

    @multiplier.setter
    def multiplier(self, multiplier):
        """Sets the multiplier of this EarningsRate.

        This is the multiplier used to calculate the rate per unit, based on the employee’s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MULTIPLE

        :param multiplier: The multiplier of this EarningsRate.
        :type multiplier: float
        """

        self._multiplier = multiplier

    @property
    def name(self):
        """Gets the name of this EarningsRate.

        Name of the earnings rate (max length = 100)

        :return: The name of this EarningsRate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EarningsRate.

        Name of the earnings rate (max length = 100)

        :param name: The name of this EarningsRate.
        :type name: str
        """
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")

        self._name = name

    @property
    def rate_per_unit(self):
        """Gets the rate_per_unit of this EarningsRate.

        Default rate per unit (optional). Only applicable if RateType is RATEPERUNIT.

        :return: The rate_per_unit of this EarningsRate.
        :rtype: str
        """
        return self._rate_per_unit

    @rate_per_unit.setter
    def rate_per_unit(self, rate_per_unit):
        """Sets the rate_per_unit of this EarningsRate.

        Default rate per unit (optional). Only applicable if RateType is RATEPERUNIT.

        :param rate_per_unit: The rate_per_unit of this EarningsRate.
        :type rate_per_unit: str
        """

        self._rate_per_unit = rate_per_unit

    @property
    def rate_type(self):
        """Gets the rate_type of this EarningsRate.


        :return: The rate_type of this EarningsRate.
        :rtype: RateType
        """
        return self._rate_type

    @rate_type.setter
    def rate_type(self, rate_type):
        """Sets the rate_type of this EarningsRate.


        :param rate_type: The rate_type of this EarningsRate.
        :type rate_type: RateType
        """

        self._rate_type = rate_type

    @property
    def type_of_units(self):
        """Gets the type_of_units of this EarningsRate.

        Type of units used to record earnings (max length = 50). Only When RateType is RATEPERUNIT

        :return: The type_of_units of this EarningsRate.
        :rtype: str
        """
        return self._type_of_units

    @type_of_units.setter
    def type_of_units(self, type_of_units):
        """Sets the type_of_units of this EarningsRate.

        Type of units used to record earnings (max length = 50). Only When RateType is RATEPERUNIT

        :param type_of_units: The type_of_units of this EarningsRate.
        :type type_of_units: str
        """
        if type_of_units is not None and len(type_of_units) > 50:
            raise ValueError("Invalid value for `type_of_units`, length must be less than or equal to `50`")

        self._type_of_units = type_of_units

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this EarningsRate.

        Last modified timestamp

        :return: The updated_date_utc of this EarningsRate.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this EarningsRate.

        Last modified timestamp

        :param updated_date_utc: The updated_date_utc of this EarningsRate.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc
