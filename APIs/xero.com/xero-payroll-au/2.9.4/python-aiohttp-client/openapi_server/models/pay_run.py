# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pay_run_status import PayRunStatus
from openapi_server.models.payslip_summary import PayslipSummary
from openapi_server.models.validation_error import ValidationError
from openapi_server import util


class PayRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deductions: float=None, net_pay: float=None, pay_run_id: str=None, pay_run_period_end_date: str=None, pay_run_period_start_date: str=None, pay_run_status: PayRunStatus=None, payment_date: str=None, payroll_calendar_id: str=None, payslip_message: str=None, payslips: List[PayslipSummary]=None, reimbursement: float=None, super: float=None, tax: float=None, updated_date_utc: str=None, validation_errors: List[ValidationError]=None, wages: float=None):
        """PayRun - a model defined in OpenAPI

        :param deductions: The deductions of this PayRun.
        :param net_pay: The net_pay of this PayRun.
        :param pay_run_id: The pay_run_id of this PayRun.
        :param pay_run_period_end_date: The pay_run_period_end_date of this PayRun.
        :param pay_run_period_start_date: The pay_run_period_start_date of this PayRun.
        :param pay_run_status: The pay_run_status of this PayRun.
        :param payment_date: The payment_date of this PayRun.
        :param payroll_calendar_id: The payroll_calendar_id of this PayRun.
        :param payslip_message: The payslip_message of this PayRun.
        :param payslips: The payslips of this PayRun.
        :param reimbursement: The reimbursement of this PayRun.
        :param super: The super of this PayRun.
        :param tax: The tax of this PayRun.
        :param updated_date_utc: The updated_date_utc of this PayRun.
        :param validation_errors: The validation_errors of this PayRun.
        :param wages: The wages of this PayRun.
        """
        self.openapi_types = {
            'deductions': float,
            'net_pay': float,
            'pay_run_id': str,
            'pay_run_period_end_date': str,
            'pay_run_period_start_date': str,
            'pay_run_status': PayRunStatus,
            'payment_date': str,
            'payroll_calendar_id': str,
            'payslip_message': str,
            'payslips': List[PayslipSummary],
            'reimbursement': float,
            'super': float,
            'tax': float,
            'updated_date_utc': str,
            'validation_errors': List[ValidationError],
            'wages': float
        }

        self.attribute_map = {
            'deductions': 'Deductions',
            'net_pay': 'NetPay',
            'pay_run_id': 'PayRunID',
            'pay_run_period_end_date': 'PayRunPeriodEndDate',
            'pay_run_period_start_date': 'PayRunPeriodStartDate',
            'pay_run_status': 'PayRunStatus',
            'payment_date': 'PaymentDate',
            'payroll_calendar_id': 'PayrollCalendarID',
            'payslip_message': 'PayslipMessage',
            'payslips': 'Payslips',
            'reimbursement': 'Reimbursement',
            'super': 'Super',
            'tax': 'Tax',
            'updated_date_utc': 'UpdatedDateUTC',
            'validation_errors': 'ValidationErrors',
            'wages': 'Wages'
        }

        self._deductions = deductions
        self._net_pay = net_pay
        self._pay_run_id = pay_run_id
        self._pay_run_period_end_date = pay_run_period_end_date
        self._pay_run_period_start_date = pay_run_period_start_date
        self._pay_run_status = pay_run_status
        self._payment_date = payment_date
        self._payroll_calendar_id = payroll_calendar_id
        self._payslip_message = payslip_message
        self._payslips = payslips
        self._reimbursement = reimbursement
        self._super = super
        self._tax = tax
        self._updated_date_utc = updated_date_utc
        self._validation_errors = validation_errors
        self._wages = wages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayRun of this PayRun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deductions(self):
        """Gets the deductions of this PayRun.

        The total Deductions for the Payrun

        :return: The deductions of this PayRun.
        :rtype: float
        """
        return self._deductions

    @deductions.setter
    def deductions(self, deductions):
        """Sets the deductions of this PayRun.

        The total Deductions for the Payrun

        :param deductions: The deductions of this PayRun.
        :type deductions: float
        """

        self._deductions = deductions

    @property
    def net_pay(self):
        """Gets the net_pay of this PayRun.

        The total NetPay for the Payrun

        :return: The net_pay of this PayRun.
        :rtype: float
        """
        return self._net_pay

    @net_pay.setter
    def net_pay(self, net_pay):
        """Sets the net_pay of this PayRun.

        The total NetPay for the Payrun

        :param net_pay: The net_pay of this PayRun.
        :type net_pay: float
        """

        self._net_pay = net_pay

    @property
    def pay_run_id(self):
        """Gets the pay_run_id of this PayRun.

        Xero identifier for pay run

        :return: The pay_run_id of this PayRun.
        :rtype: str
        """
        return self._pay_run_id

    @pay_run_id.setter
    def pay_run_id(self, pay_run_id):
        """Sets the pay_run_id of this PayRun.

        Xero identifier for pay run

        :param pay_run_id: The pay_run_id of this PayRun.
        :type pay_run_id: str
        """

        self._pay_run_id = pay_run_id

    @property
    def pay_run_period_end_date(self):
        """Gets the pay_run_period_end_date of this PayRun.

        Period End Date for the PayRun (YYYY-MM-DD)

        :return: The pay_run_period_end_date of this PayRun.
        :rtype: str
        """
        return self._pay_run_period_end_date

    @pay_run_period_end_date.setter
    def pay_run_period_end_date(self, pay_run_period_end_date):
        """Sets the pay_run_period_end_date of this PayRun.

        Period End Date for the PayRun (YYYY-MM-DD)

        :param pay_run_period_end_date: The pay_run_period_end_date of this PayRun.
        :type pay_run_period_end_date: str
        """

        self._pay_run_period_end_date = pay_run_period_end_date

    @property
    def pay_run_period_start_date(self):
        """Gets the pay_run_period_start_date of this PayRun.

        Period Start Date for the PayRun (YYYY-MM-DD)

        :return: The pay_run_period_start_date of this PayRun.
        :rtype: str
        """
        return self._pay_run_period_start_date

    @pay_run_period_start_date.setter
    def pay_run_period_start_date(self, pay_run_period_start_date):
        """Sets the pay_run_period_start_date of this PayRun.

        Period Start Date for the PayRun (YYYY-MM-DD)

        :param pay_run_period_start_date: The pay_run_period_start_date of this PayRun.
        :type pay_run_period_start_date: str
        """

        self._pay_run_period_start_date = pay_run_period_start_date

    @property
    def pay_run_status(self):
        """Gets the pay_run_status of this PayRun.


        :return: The pay_run_status of this PayRun.
        :rtype: PayRunStatus
        """
        return self._pay_run_status

    @pay_run_status.setter
    def pay_run_status(self, pay_run_status):
        """Sets the pay_run_status of this PayRun.


        :param pay_run_status: The pay_run_status of this PayRun.
        :type pay_run_status: PayRunStatus
        """

        self._pay_run_status = pay_run_status

    @property
    def payment_date(self):
        """Gets the payment_date of this PayRun.

        Payment Date for the PayRun (YYYY-MM-DD)

        :return: The payment_date of this PayRun.
        :rtype: str
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this PayRun.

        Payment Date for the PayRun (YYYY-MM-DD)

        :param payment_date: The payment_date of this PayRun.
        :type payment_date: str
        """

        self._payment_date = payment_date

    @property
    def payroll_calendar_id(self):
        """Gets the payroll_calendar_id of this PayRun.

        Xero identifier for pay run

        :return: The payroll_calendar_id of this PayRun.
        :rtype: str
        """
        return self._payroll_calendar_id

    @payroll_calendar_id.setter
    def payroll_calendar_id(self, payroll_calendar_id):
        """Sets the payroll_calendar_id of this PayRun.

        Xero identifier for pay run

        :param payroll_calendar_id: The payroll_calendar_id of this PayRun.
        :type payroll_calendar_id: str
        """
        if payroll_calendar_id is None:
            raise ValueError("Invalid value for `payroll_calendar_id`, must not be `None`")

        self._payroll_calendar_id = payroll_calendar_id

    @property
    def payslip_message(self):
        """Gets the payslip_message of this PayRun.

        Payslip message for the PayRun

        :return: The payslip_message of this PayRun.
        :rtype: str
        """
        return self._payslip_message

    @payslip_message.setter
    def payslip_message(self, payslip_message):
        """Sets the payslip_message of this PayRun.

        Payslip message for the PayRun

        :param payslip_message: The payslip_message of this PayRun.
        :type payslip_message: str
        """

        self._payslip_message = payslip_message

    @property
    def payslips(self):
        """Gets the payslips of this PayRun.

        The payslips in the payrun

        :return: The payslips of this PayRun.
        :rtype: List[PayslipSummary]
        """
        return self._payslips

    @payslips.setter
    def payslips(self, payslips):
        """Sets the payslips of this PayRun.

        The payslips in the payrun

        :param payslips: The payslips of this PayRun.
        :type payslips: List[PayslipSummary]
        """

        self._payslips = payslips

    @property
    def reimbursement(self):
        """Gets the reimbursement of this PayRun.

        The total Reimbursements for the Payrun

        :return: The reimbursement of this PayRun.
        :rtype: float
        """
        return self._reimbursement

    @reimbursement.setter
    def reimbursement(self, reimbursement):
        """Sets the reimbursement of this PayRun.

        The total Reimbursements for the Payrun

        :param reimbursement: The reimbursement of this PayRun.
        :type reimbursement: float
        """

        self._reimbursement = reimbursement

    @property
    def super(self):
        """Gets the super of this PayRun.

        The total Super for the Payrun

        :return: The super of this PayRun.
        :rtype: float
        """
        return self._super

    @super.setter
    def super(self, super):
        """Sets the super of this PayRun.

        The total Super for the Payrun

        :param super: The super of this PayRun.
        :type super: float
        """

        self._super = super

    @property
    def tax(self):
        """Gets the tax of this PayRun.

        The total Tax for the Payrun

        :return: The tax of this PayRun.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this PayRun.

        The total Tax for the Payrun

        :param tax: The tax of this PayRun.
        :type tax: float
        """

        self._tax = tax

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this PayRun.

        Last modified timestamp

        :return: The updated_date_utc of this PayRun.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this PayRun.

        Last modified timestamp

        :param updated_date_utc: The updated_date_utc of this PayRun.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc

    @property
    def validation_errors(self):
        """Gets the validation_errors of this PayRun.

        Displays array of validation error messages from the API

        :return: The validation_errors of this PayRun.
        :rtype: List[ValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this PayRun.

        Displays array of validation error messages from the API

        :param validation_errors: The validation_errors of this PayRun.
        :type validation_errors: List[ValidationError]
        """

        self._validation_errors = validation_errors

    @property
    def wages(self):
        """Gets the wages of this PayRun.

        The total Wages for the Payrun

        :return: The wages of this PayRun.
        :rtype: float
        """
        return self._wages

    @wages.setter
    def wages(self, wages):
        """Sets the wages of this PayRun.

        The total Wages for the Payrun

        :param wages: The wages of this PayRun.
        :type wages: float
        """

        self._wages = wages
