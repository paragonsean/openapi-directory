# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LeaveType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_record: bool=None, is_paid_leave: bool=None, leave_loading_rate: float=None, leave_type_id: str=None, name: str=None, normal_entitlement: float=None, show_on_payslip: bool=None, type_of_units: str=None, updated_date_utc: str=None):
        """LeaveType - a model defined in OpenAPI

        :param current_record: The current_record of this LeaveType.
        :param is_paid_leave: The is_paid_leave of this LeaveType.
        :param leave_loading_rate: The leave_loading_rate of this LeaveType.
        :param leave_type_id: The leave_type_id of this LeaveType.
        :param name: The name of this LeaveType.
        :param normal_entitlement: The normal_entitlement of this LeaveType.
        :param show_on_payslip: The show_on_payslip of this LeaveType.
        :param type_of_units: The type_of_units of this LeaveType.
        :param updated_date_utc: The updated_date_utc of this LeaveType.
        """
        self.openapi_types = {
            'current_record': bool,
            'is_paid_leave': bool,
            'leave_loading_rate': float,
            'leave_type_id': str,
            'name': str,
            'normal_entitlement': float,
            'show_on_payslip': bool,
            'type_of_units': str,
            'updated_date_utc': str
        }

        self.attribute_map = {
            'current_record': 'CurrentRecord',
            'is_paid_leave': 'IsPaidLeave',
            'leave_loading_rate': 'LeaveLoadingRate',
            'leave_type_id': 'LeaveTypeID',
            'name': 'Name',
            'normal_entitlement': 'NormalEntitlement',
            'show_on_payslip': 'ShowOnPayslip',
            'type_of_units': 'TypeOfUnits',
            'updated_date_utc': 'UpdatedDateUTC'
        }

        self._current_record = current_record
        self._is_paid_leave = is_paid_leave
        self._leave_loading_rate = leave_loading_rate
        self._leave_type_id = leave_type_id
        self._name = name
        self._normal_entitlement = normal_entitlement
        self._show_on_payslip = show_on_payslip
        self._type_of_units = type_of_units
        self._updated_date_utc = updated_date_utc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LeaveType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LeaveType of this LeaveType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_record(self):
        """Gets the current_record of this LeaveType.

        Is the current record

        :return: The current_record of this LeaveType.
        :rtype: bool
        """
        return self._current_record

    @current_record.setter
    def current_record(self, current_record):
        """Sets the current_record of this LeaveType.

        Is the current record

        :param current_record: The current_record of this LeaveType.
        :type current_record: bool
        """

        self._current_record = current_record

    @property
    def is_paid_leave(self):
        """Gets the is_paid_leave of this LeaveType.

        Set this to indicate that an employee will be paid when taking this type of leave

        :return: The is_paid_leave of this LeaveType.
        :rtype: bool
        """
        return self._is_paid_leave

    @is_paid_leave.setter
    def is_paid_leave(self, is_paid_leave):
        """Sets the is_paid_leave of this LeaveType.

        Set this to indicate that an employee will be paid when taking this type of leave

        :param is_paid_leave: The is_paid_leave of this LeaveType.
        :type is_paid_leave: bool
        """

        self._is_paid_leave = is_paid_leave

    @property
    def leave_loading_rate(self):
        """Gets the leave_loading_rate of this LeaveType.

        Enter an amount here if your organisation pays an additional percentage on top of ordinary earnings when your employees take leave (typically 17.5%)

        :return: The leave_loading_rate of this LeaveType.
        :rtype: float
        """
        return self._leave_loading_rate

    @leave_loading_rate.setter
    def leave_loading_rate(self, leave_loading_rate):
        """Sets the leave_loading_rate of this LeaveType.

        Enter an amount here if your organisation pays an additional percentage on top of ordinary earnings when your employees take leave (typically 17.5%)

        :param leave_loading_rate: The leave_loading_rate of this LeaveType.
        :type leave_loading_rate: float
        """

        self._leave_loading_rate = leave_loading_rate

    @property
    def leave_type_id(self):
        """Gets the leave_type_id of this LeaveType.

        Xero identifier

        :return: The leave_type_id of this LeaveType.
        :rtype: str
        """
        return self._leave_type_id

    @leave_type_id.setter
    def leave_type_id(self, leave_type_id):
        """Sets the leave_type_id of this LeaveType.

        Xero identifier

        :param leave_type_id: The leave_type_id of this LeaveType.
        :type leave_type_id: str
        """

        self._leave_type_id = leave_type_id

    @property
    def name(self):
        """Gets the name of this LeaveType.

        Name of the earnings rate (max length = 100)

        :return: The name of this LeaveType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LeaveType.

        Name of the earnings rate (max length = 100)

        :param name: The name of this LeaveType.
        :type name: str
        """
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")

        self._name = name

    @property
    def normal_entitlement(self):
        """Gets the normal_entitlement of this LeaveType.

        The number of units the employee is entitled to each year

        :return: The normal_entitlement of this LeaveType.
        :rtype: float
        """
        return self._normal_entitlement

    @normal_entitlement.setter
    def normal_entitlement(self, normal_entitlement):
        """Sets the normal_entitlement of this LeaveType.

        The number of units the employee is entitled to each year

        :param normal_entitlement: The normal_entitlement of this LeaveType.
        :type normal_entitlement: float
        """

        self._normal_entitlement = normal_entitlement

    @property
    def show_on_payslip(self):
        """Gets the show_on_payslip of this LeaveType.

        Set this if you want a balance for this leave type to be shown on your employee’s payslips

        :return: The show_on_payslip of this LeaveType.
        :rtype: bool
        """
        return self._show_on_payslip

    @show_on_payslip.setter
    def show_on_payslip(self, show_on_payslip):
        """Sets the show_on_payslip of this LeaveType.

        Set this if you want a balance for this leave type to be shown on your employee’s payslips

        :param show_on_payslip: The show_on_payslip of this LeaveType.
        :type show_on_payslip: bool
        """

        self._show_on_payslip = show_on_payslip

    @property
    def type_of_units(self):
        """Gets the type_of_units of this LeaveType.

        The type of units by which leave entitlements are normally tracked. These are typically the same as the type of units used for the employee’s ordinary earnings rate

        :return: The type_of_units of this LeaveType.
        :rtype: str
        """
        return self._type_of_units

    @type_of_units.setter
    def type_of_units(self, type_of_units):
        """Sets the type_of_units of this LeaveType.

        The type of units by which leave entitlements are normally tracked. These are typically the same as the type of units used for the employee’s ordinary earnings rate

        :param type_of_units: The type_of_units of this LeaveType.
        :type type_of_units: str
        """

        self._type_of_units = type_of_units

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this LeaveType.

        Last modified timestamp

        :return: The updated_date_utc of this LeaveType.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this LeaveType.

        Last modified timestamp

        :param updated_date_utc: The updated_date_utc of this LeaveType.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc
