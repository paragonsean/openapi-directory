# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bank_account import BankAccount
from openapi_server.models.employee_status import EmployeeStatus
from openapi_server.models.home_address import HomeAddress
from openapi_server.models.leave_balance import LeaveBalance
from openapi_server.models.leave_line import LeaveLine
from openapi_server.models.opening_balances import OpeningBalances
from openapi_server.models.pay_template import PayTemplate
from openapi_server.models.super_membership import SuperMembership
from openapi_server.models.tax_declaration import TaxDeclaration
from openapi_server.models.validation_error import ValidationError
from openapi_server import util


class Employee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bank_accounts: List[BankAccount]=None, classification: str=None, date_of_birth: str=None, email: str=None, employee_group_name: str=None, employee_id: str=None, first_name: str=None, gender: str=None, home_address: HomeAddress=None, is_authorised_to_approve_leave: bool=None, is_authorised_to_approve_timesheets: bool=None, job_title: str=None, last_name: str=None, leave_balances: List[LeaveBalance]=None, leave_lines: List[LeaveLine]=None, middle_names: str=None, mobile: str=None, opening_balances: OpeningBalances=None, ordinary_earnings_rate_id: str=None, pay_template: PayTemplate=None, payroll_calendar_id: str=None, phone: str=None, start_date: str=None, status: EmployeeStatus=None, super_memberships: List[SuperMembership]=None, tax_declaration: TaxDeclaration=None, termination_date: str=None, title: str=None, twitter_user_name: str=None, updated_date_utc: str=None, validation_errors: List[ValidationError]=None):
        """Employee - a model defined in OpenAPI

        :param bank_accounts: The bank_accounts of this Employee.
        :param classification: The classification of this Employee.
        :param date_of_birth: The date_of_birth of this Employee.
        :param email: The email of this Employee.
        :param employee_group_name: The employee_group_name of this Employee.
        :param employee_id: The employee_id of this Employee.
        :param first_name: The first_name of this Employee.
        :param gender: The gender of this Employee.
        :param home_address: The home_address of this Employee.
        :param is_authorised_to_approve_leave: The is_authorised_to_approve_leave of this Employee.
        :param is_authorised_to_approve_timesheets: The is_authorised_to_approve_timesheets of this Employee.
        :param job_title: The job_title of this Employee.
        :param last_name: The last_name of this Employee.
        :param leave_balances: The leave_balances of this Employee.
        :param leave_lines: The leave_lines of this Employee.
        :param middle_names: The middle_names of this Employee.
        :param mobile: The mobile of this Employee.
        :param opening_balances: The opening_balances of this Employee.
        :param ordinary_earnings_rate_id: The ordinary_earnings_rate_id of this Employee.
        :param pay_template: The pay_template of this Employee.
        :param payroll_calendar_id: The payroll_calendar_id of this Employee.
        :param phone: The phone of this Employee.
        :param start_date: The start_date of this Employee.
        :param status: The status of this Employee.
        :param super_memberships: The super_memberships of this Employee.
        :param tax_declaration: The tax_declaration of this Employee.
        :param termination_date: The termination_date of this Employee.
        :param title: The title of this Employee.
        :param twitter_user_name: The twitter_user_name of this Employee.
        :param updated_date_utc: The updated_date_utc of this Employee.
        :param validation_errors: The validation_errors of this Employee.
        """
        self.openapi_types = {
            'bank_accounts': List[BankAccount],
            'classification': str,
            'date_of_birth': str,
            'email': str,
            'employee_group_name': str,
            'employee_id': str,
            'first_name': str,
            'gender': str,
            'home_address': HomeAddress,
            'is_authorised_to_approve_leave': bool,
            'is_authorised_to_approve_timesheets': bool,
            'job_title': str,
            'last_name': str,
            'leave_balances': List[LeaveBalance],
            'leave_lines': List[LeaveLine],
            'middle_names': str,
            'mobile': str,
            'opening_balances': OpeningBalances,
            'ordinary_earnings_rate_id': str,
            'pay_template': PayTemplate,
            'payroll_calendar_id': str,
            'phone': str,
            'start_date': str,
            'status': EmployeeStatus,
            'super_memberships': List[SuperMembership],
            'tax_declaration': TaxDeclaration,
            'termination_date': str,
            'title': str,
            'twitter_user_name': str,
            'updated_date_utc': str,
            'validation_errors': List[ValidationError]
        }

        self.attribute_map = {
            'bank_accounts': 'BankAccounts',
            'classification': 'Classification',
            'date_of_birth': 'DateOfBirth',
            'email': 'Email',
            'employee_group_name': 'EmployeeGroupName',
            'employee_id': 'EmployeeID',
            'first_name': 'FirstName',
            'gender': 'Gender',
            'home_address': 'HomeAddress',
            'is_authorised_to_approve_leave': 'IsAuthorisedToApproveLeave',
            'is_authorised_to_approve_timesheets': 'IsAuthorisedToApproveTimesheets',
            'job_title': 'JobTitle',
            'last_name': 'LastName',
            'leave_balances': 'LeaveBalances',
            'leave_lines': 'LeaveLines',
            'middle_names': 'MiddleNames',
            'mobile': 'Mobile',
            'opening_balances': 'OpeningBalances',
            'ordinary_earnings_rate_id': 'OrdinaryEarningsRateID',
            'pay_template': 'PayTemplate',
            'payroll_calendar_id': 'PayrollCalendarID',
            'phone': 'Phone',
            'start_date': 'StartDate',
            'status': 'Status',
            'super_memberships': 'SuperMemberships',
            'tax_declaration': 'TaxDeclaration',
            'termination_date': 'TerminationDate',
            'title': 'Title',
            'twitter_user_name': 'TwitterUserName',
            'updated_date_utc': 'UpdatedDateUTC',
            'validation_errors': 'ValidationErrors'
        }

        self._bank_accounts = bank_accounts
        self._classification = classification
        self._date_of_birth = date_of_birth
        self._email = email
        self._employee_group_name = employee_group_name
        self._employee_id = employee_id
        self._first_name = first_name
        self._gender = gender
        self._home_address = home_address
        self._is_authorised_to_approve_leave = is_authorised_to_approve_leave
        self._is_authorised_to_approve_timesheets = is_authorised_to_approve_timesheets
        self._job_title = job_title
        self._last_name = last_name
        self._leave_balances = leave_balances
        self._leave_lines = leave_lines
        self._middle_names = middle_names
        self._mobile = mobile
        self._opening_balances = opening_balances
        self._ordinary_earnings_rate_id = ordinary_earnings_rate_id
        self._pay_template = pay_template
        self._payroll_calendar_id = payroll_calendar_id
        self._phone = phone
        self._start_date = start_date
        self._status = status
        self._super_memberships = super_memberships
        self._tax_declaration = tax_declaration
        self._termination_date = termination_date
        self._title = title
        self._twitter_user_name = twitter_user_name
        self._updated_date_utc = updated_date_utc
        self._validation_errors = validation_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Employee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Employee of this Employee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bank_accounts(self):
        """Gets the bank_accounts of this Employee.


        :return: The bank_accounts of this Employee.
        :rtype: List[BankAccount]
        """
        return self._bank_accounts

    @bank_accounts.setter
    def bank_accounts(self, bank_accounts):
        """Sets the bank_accounts of this Employee.


        :param bank_accounts: The bank_accounts of this Employee.
        :type bank_accounts: List[BankAccount]
        """

        self._bank_accounts = bank_accounts

    @property
    def classification(self):
        """Gets the classification of this Employee.

        Employees classification

        :return: The classification of this Employee.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this Employee.

        Employees classification

        :param classification: The classification of this Employee.
        :type classification: str
        """

        self._classification = classification

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Employee.

        Date of birth of the employee (YYYY-MM-DD)

        :return: The date_of_birth of this Employee.
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Employee.

        Date of birth of the employee (YYYY-MM-DD)

        :param date_of_birth: The date_of_birth of this Employee.
        :type date_of_birth: str
        """
        if date_of_birth is None:
            raise ValueError("Invalid value for `date_of_birth`, must not be `None`")

        self._date_of_birth = date_of_birth

    @property
    def email(self):
        """Gets the email of this Employee.

        The email address for the employee

        :return: The email of this Employee.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Employee.

        The email address for the employee

        :param email: The email of this Employee.
        :type email: str
        """

        self._email = email

    @property
    def employee_group_name(self):
        """Gets the employee_group_name of this Employee.

        The Employee Group allows you to report on payroll expenses and liabilities for each group of employees

        :return: The employee_group_name of this Employee.
        :rtype: str
        """
        return self._employee_group_name

    @employee_group_name.setter
    def employee_group_name(self, employee_group_name):
        """Sets the employee_group_name of this Employee.

        The Employee Group allows you to report on payroll expenses and liabilities for each group of employees

        :param employee_group_name: The employee_group_name of this Employee.
        :type employee_group_name: str
        """

        self._employee_group_name = employee_group_name

    @property
    def employee_id(self):
        """Gets the employee_id of this Employee.

        Xero unique identifier for an Employee

        :return: The employee_id of this Employee.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this Employee.

        Xero unique identifier for an Employee

        :param employee_id: The employee_id of this Employee.
        :type employee_id: str
        """

        self._employee_id = employee_id

    @property
    def first_name(self):
        """Gets the first_name of this Employee.

        First name of employee

        :return: The first_name of this Employee.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Employee.

        First name of employee

        :param first_name: The first_name of this Employee.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this Employee.

        The employee’s gender. See Employee Gender

        :return: The gender of this Employee.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Employee.

        The employee’s gender. See Employee Gender

        :param gender: The gender of this Employee.
        :type gender: str
        """
        allowed_values = ["N", "M", "F", "I"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def home_address(self):
        """Gets the home_address of this Employee.


        :return: The home_address of this Employee.
        :rtype: HomeAddress
        """
        return self._home_address

    @home_address.setter
    def home_address(self, home_address):
        """Sets the home_address of this Employee.


        :param home_address: The home_address of this Employee.
        :type home_address: HomeAddress
        """

        self._home_address = home_address

    @property
    def is_authorised_to_approve_leave(self):
        """Gets the is_authorised_to_approve_leave of this Employee.

        Authorised to approve other employees' leave requests

        :return: The is_authorised_to_approve_leave of this Employee.
        :rtype: bool
        """
        return self._is_authorised_to_approve_leave

    @is_authorised_to_approve_leave.setter
    def is_authorised_to_approve_leave(self, is_authorised_to_approve_leave):
        """Sets the is_authorised_to_approve_leave of this Employee.

        Authorised to approve other employees' leave requests

        :param is_authorised_to_approve_leave: The is_authorised_to_approve_leave of this Employee.
        :type is_authorised_to_approve_leave: bool
        """

        self._is_authorised_to_approve_leave = is_authorised_to_approve_leave

    @property
    def is_authorised_to_approve_timesheets(self):
        """Gets the is_authorised_to_approve_timesheets of this Employee.

        Authorised to approve timesheets

        :return: The is_authorised_to_approve_timesheets of this Employee.
        :rtype: bool
        """
        return self._is_authorised_to_approve_timesheets

    @is_authorised_to_approve_timesheets.setter
    def is_authorised_to_approve_timesheets(self, is_authorised_to_approve_timesheets):
        """Sets the is_authorised_to_approve_timesheets of this Employee.

        Authorised to approve timesheets

        :param is_authorised_to_approve_timesheets: The is_authorised_to_approve_timesheets of this Employee.
        :type is_authorised_to_approve_timesheets: bool
        """

        self._is_authorised_to_approve_timesheets = is_authorised_to_approve_timesheets

    @property
    def job_title(self):
        """Gets the job_title of this Employee.

        JobTitle of the employee

        :return: The job_title of this Employee.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this Employee.

        JobTitle of the employee

        :param job_title: The job_title of this Employee.
        :type job_title: str
        """

        self._job_title = job_title

    @property
    def last_name(self):
        """Gets the last_name of this Employee.

        Last name of employee

        :return: The last_name of this Employee.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Employee.

        Last name of employee

        :param last_name: The last_name of this Employee.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def leave_balances(self):
        """Gets the leave_balances of this Employee.


        :return: The leave_balances of this Employee.
        :rtype: List[LeaveBalance]
        """
        return self._leave_balances

    @leave_balances.setter
    def leave_balances(self, leave_balances):
        """Sets the leave_balances of this Employee.


        :param leave_balances: The leave_balances of this Employee.
        :type leave_balances: List[LeaveBalance]
        """

        self._leave_balances = leave_balances

    @property
    def leave_lines(self):
        """Gets the leave_lines of this Employee.


        :return: The leave_lines of this Employee.
        :rtype: List[LeaveLine]
        """
        return self._leave_lines

    @leave_lines.setter
    def leave_lines(self, leave_lines):
        """Sets the leave_lines of this Employee.


        :param leave_lines: The leave_lines of this Employee.
        :type leave_lines: List[LeaveLine]
        """

        self._leave_lines = leave_lines

    @property
    def middle_names(self):
        """Gets the middle_names of this Employee.

        Middle name(s) of the employee

        :return: The middle_names of this Employee.
        :rtype: str
        """
        return self._middle_names

    @middle_names.setter
    def middle_names(self, middle_names):
        """Sets the middle_names of this Employee.

        Middle name(s) of the employee

        :param middle_names: The middle_names of this Employee.
        :type middle_names: str
        """

        self._middle_names = middle_names

    @property
    def mobile(self):
        """Gets the mobile of this Employee.

        Employee mobile number

        :return: The mobile of this Employee.
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Employee.

        Employee mobile number

        :param mobile: The mobile of this Employee.
        :type mobile: str
        """

        self._mobile = mobile

    @property
    def opening_balances(self):
        """Gets the opening_balances of this Employee.


        :return: The opening_balances of this Employee.
        :rtype: OpeningBalances
        """
        return self._opening_balances

    @opening_balances.setter
    def opening_balances(self, opening_balances):
        """Sets the opening_balances of this Employee.


        :param opening_balances: The opening_balances of this Employee.
        :type opening_balances: OpeningBalances
        """

        self._opening_balances = opening_balances

    @property
    def ordinary_earnings_rate_id(self):
        """Gets the ordinary_earnings_rate_id of this Employee.

        Xero unique identifier for earnings rate

        :return: The ordinary_earnings_rate_id of this Employee.
        :rtype: str
        """
        return self._ordinary_earnings_rate_id

    @ordinary_earnings_rate_id.setter
    def ordinary_earnings_rate_id(self, ordinary_earnings_rate_id):
        """Sets the ordinary_earnings_rate_id of this Employee.

        Xero unique identifier for earnings rate

        :param ordinary_earnings_rate_id: The ordinary_earnings_rate_id of this Employee.
        :type ordinary_earnings_rate_id: str
        """

        self._ordinary_earnings_rate_id = ordinary_earnings_rate_id

    @property
    def pay_template(self):
        """Gets the pay_template of this Employee.


        :return: The pay_template of this Employee.
        :rtype: PayTemplate
        """
        return self._pay_template

    @pay_template.setter
    def pay_template(self, pay_template):
        """Sets the pay_template of this Employee.


        :param pay_template: The pay_template of this Employee.
        :type pay_template: PayTemplate
        """

        self._pay_template = pay_template

    @property
    def payroll_calendar_id(self):
        """Gets the payroll_calendar_id of this Employee.

        Xero unique identifier for payroll calendar for the employee

        :return: The payroll_calendar_id of this Employee.
        :rtype: str
        """
        return self._payroll_calendar_id

    @payroll_calendar_id.setter
    def payroll_calendar_id(self, payroll_calendar_id):
        """Sets the payroll_calendar_id of this Employee.

        Xero unique identifier for payroll calendar for the employee

        :param payroll_calendar_id: The payroll_calendar_id of this Employee.
        :type payroll_calendar_id: str
        """

        self._payroll_calendar_id = payroll_calendar_id

    @property
    def phone(self):
        """Gets the phone of this Employee.

        Employee phone number

        :return: The phone of this Employee.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Employee.

        Employee phone number

        :param phone: The phone of this Employee.
        :type phone: str
        """

        self._phone = phone

    @property
    def start_date(self):
        """Gets the start_date of this Employee.

        Start date for an employee (YYYY-MM-DD)

        :return: The start_date of this Employee.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Employee.

        Start date for an employee (YYYY-MM-DD)

        :param start_date: The start_date of this Employee.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this Employee.


        :return: The status of this Employee.
        :rtype: EmployeeStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Employee.


        :param status: The status of this Employee.
        :type status: EmployeeStatus
        """

        self._status = status

    @property
    def super_memberships(self):
        """Gets the super_memberships of this Employee.


        :return: The super_memberships of this Employee.
        :rtype: List[SuperMembership]
        """
        return self._super_memberships

    @super_memberships.setter
    def super_memberships(self, super_memberships):
        """Sets the super_memberships of this Employee.


        :param super_memberships: The super_memberships of this Employee.
        :type super_memberships: List[SuperMembership]
        """

        self._super_memberships = super_memberships

    @property
    def tax_declaration(self):
        """Gets the tax_declaration of this Employee.


        :return: The tax_declaration of this Employee.
        :rtype: TaxDeclaration
        """
        return self._tax_declaration

    @tax_declaration.setter
    def tax_declaration(self, tax_declaration):
        """Sets the tax_declaration of this Employee.


        :param tax_declaration: The tax_declaration of this Employee.
        :type tax_declaration: TaxDeclaration
        """

        self._tax_declaration = tax_declaration

    @property
    def termination_date(self):
        """Gets the termination_date of this Employee.

        Employee Termination Date (YYYY-MM-DD)

        :return: The termination_date of this Employee.
        :rtype: str
        """
        return self._termination_date

    @termination_date.setter
    def termination_date(self, termination_date):
        """Sets the termination_date of this Employee.

        Employee Termination Date (YYYY-MM-DD)

        :param termination_date: The termination_date of this Employee.
        :type termination_date: str
        """

        self._termination_date = termination_date

    @property
    def title(self):
        """Gets the title of this Employee.

        Title of the employee

        :return: The title of this Employee.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Employee.

        Title of the employee

        :param title: The title of this Employee.
        :type title: str
        """

        self._title = title

    @property
    def twitter_user_name(self):
        """Gets the twitter_user_name of this Employee.

        Employee’s twitter name

        :return: The twitter_user_name of this Employee.
        :rtype: str
        """
        return self._twitter_user_name

    @twitter_user_name.setter
    def twitter_user_name(self, twitter_user_name):
        """Sets the twitter_user_name of this Employee.

        Employee’s twitter name

        :param twitter_user_name: The twitter_user_name of this Employee.
        :type twitter_user_name: str
        """

        self._twitter_user_name = twitter_user_name

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this Employee.

        Last modified timestamp

        :return: The updated_date_utc of this Employee.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this Employee.

        Last modified timestamp

        :param updated_date_utc: The updated_date_utc of this Employee.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc

    @property
    def validation_errors(self):
        """Gets the validation_errors of this Employee.

        Displays array of validation error messages from the API

        :return: The validation_errors of this Employee.
        :rtype: List[ValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this Employee.

        Displays array of validation error messages from the API

        :param validation_errors: The validation_errors of this Employee.
        :type validation_errors: List[ValidationError]
        """

        self._validation_errors = validation_errors
