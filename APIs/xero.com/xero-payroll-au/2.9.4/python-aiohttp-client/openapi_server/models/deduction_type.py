# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeductionType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, current_record: bool=None, deduction_category: str=None, deduction_type_id: str=None, is_exempt_from_w1: bool=None, name: str=None, reduces_super: bool=None, reduces_tax: bool=None, updated_date_utc: str=None):
        """DeductionType - a model defined in OpenAPI

        :param account_code: The account_code of this DeductionType.
        :param current_record: The current_record of this DeductionType.
        :param deduction_category: The deduction_category of this DeductionType.
        :param deduction_type_id: The deduction_type_id of this DeductionType.
        :param is_exempt_from_w1: The is_exempt_from_w1 of this DeductionType.
        :param name: The name of this DeductionType.
        :param reduces_super: The reduces_super of this DeductionType.
        :param reduces_tax: The reduces_tax of this DeductionType.
        :param updated_date_utc: The updated_date_utc of this DeductionType.
        """
        self.openapi_types = {
            'account_code': str,
            'current_record': bool,
            'deduction_category': str,
            'deduction_type_id': str,
            'is_exempt_from_w1': bool,
            'name': str,
            'reduces_super': bool,
            'reduces_tax': bool,
            'updated_date_utc': str
        }

        self.attribute_map = {
            'account_code': 'AccountCode',
            'current_record': 'CurrentRecord',
            'deduction_category': 'DeductionCategory',
            'deduction_type_id': 'DeductionTypeID',
            'is_exempt_from_w1': 'IsExemptFromW1',
            'name': 'Name',
            'reduces_super': 'ReducesSuper',
            'reduces_tax': 'ReducesTax',
            'updated_date_utc': 'UpdatedDateUTC'
        }

        self._account_code = account_code
        self._current_record = current_record
        self._deduction_category = deduction_category
        self._deduction_type_id = deduction_type_id
        self._is_exempt_from_w1 = is_exempt_from_w1
        self._name = name
        self._reduces_super = reduces_super
        self._reduces_tax = reduces_tax
        self._updated_date_utc = updated_date_utc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeductionType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeductionType of this DeductionType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this DeductionType.

        See Accounts

        :return: The account_code of this DeductionType.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this DeductionType.

        See Accounts

        :param account_code: The account_code of this DeductionType.
        :type account_code: str
        """

        self._account_code = account_code

    @property
    def current_record(self):
        """Gets the current_record of this DeductionType.

        Is the current record

        :return: The current_record of this DeductionType.
        :rtype: bool
        """
        return self._current_record

    @current_record.setter
    def current_record(self, current_record):
        """Sets the current_record of this DeductionType.

        Is the current record

        :param current_record: The current_record of this DeductionType.
        :type current_record: bool
        """

        self._current_record = current_record

    @property
    def deduction_category(self):
        """Gets the deduction_category of this DeductionType.


        :return: The deduction_category of this DeductionType.
        :rtype: str
        """
        return self._deduction_category

    @deduction_category.setter
    def deduction_category(self, deduction_category):
        """Sets the deduction_category of this DeductionType.


        :param deduction_category: The deduction_category of this DeductionType.
        :type deduction_category: str
        """
        allowed_values = ["NONE", "UNIONFEES", "WORKPLACEGIVING"]  # noqa: E501
        if deduction_category not in allowed_values:
            raise ValueError(
                "Invalid value for `deduction_category` ({0}), must be one of {1}"
                .format(deduction_category, allowed_values)
            )

        self._deduction_category = deduction_category

    @property
    def deduction_type_id(self):
        """Gets the deduction_type_id of this DeductionType.

        Xero identifier

        :return: The deduction_type_id of this DeductionType.
        :rtype: str
        """
        return self._deduction_type_id

    @deduction_type_id.setter
    def deduction_type_id(self, deduction_type_id):
        """Sets the deduction_type_id of this DeductionType.

        Xero identifier

        :param deduction_type_id: The deduction_type_id of this DeductionType.
        :type deduction_type_id: str
        """

        self._deduction_type_id = deduction_type_id

    @property
    def is_exempt_from_w1(self):
        """Gets the is_exempt_from_w1 of this DeductionType.

        Boolean to determine if the deduction type is reportable or exempt from W1

        :return: The is_exempt_from_w1 of this DeductionType.
        :rtype: bool
        """
        return self._is_exempt_from_w1

    @is_exempt_from_w1.setter
    def is_exempt_from_w1(self, is_exempt_from_w1):
        """Sets the is_exempt_from_w1 of this DeductionType.

        Boolean to determine if the deduction type is reportable or exempt from W1

        :param is_exempt_from_w1: The is_exempt_from_w1 of this DeductionType.
        :type is_exempt_from_w1: bool
        """

        self._is_exempt_from_w1 = is_exempt_from_w1

    @property
    def name(self):
        """Gets the name of this DeductionType.

        Name of the earnings rate (max length = 100)

        :return: The name of this DeductionType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeductionType.

        Name of the earnings rate (max length = 100)

        :param name: The name of this DeductionType.
        :type name: str
        """
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")

        self._name = name

    @property
    def reduces_super(self):
        """Gets the reduces_super of this DeductionType.

        Most deductions don’t reduce your superannuation guarantee contribution liability, so typically you will not set any value for this.

        :return: The reduces_super of this DeductionType.
        :rtype: bool
        """
        return self._reduces_super

    @reduces_super.setter
    def reduces_super(self, reduces_super):
        """Sets the reduces_super of this DeductionType.

        Most deductions don’t reduce your superannuation guarantee contribution liability, so typically you will not set any value for this.

        :param reduces_super: The reduces_super of this DeductionType.
        :type reduces_super: bool
        """

        self._reduces_super = reduces_super

    @property
    def reduces_tax(self):
        """Gets the reduces_tax of this DeductionType.

        Indicates that this is a pre-tax deduction that will reduce the amount of tax you withhold from an employee.

        :return: The reduces_tax of this DeductionType.
        :rtype: bool
        """
        return self._reduces_tax

    @reduces_tax.setter
    def reduces_tax(self, reduces_tax):
        """Sets the reduces_tax of this DeductionType.

        Indicates that this is a pre-tax deduction that will reduce the amount of tax you withhold from an employee.

        :param reduces_tax: The reduces_tax of this DeductionType.
        :type reduces_tax: bool
        """

        self._reduces_tax = reduces_tax

    @property
    def updated_date_utc(self):
        """Gets the updated_date_utc of this DeductionType.

        Last modified timestamp

        :return: The updated_date_utc of this DeductionType.
        :rtype: str
        """
        return self._updated_date_utc

    @updated_date_utc.setter
    def updated_date_utc(self, updated_date_utc):
        """Sets the updated_date_utc of this DeductionType.

        Last modified timestamp

        :param updated_date_utc: The updated_date_utc of this DeductionType.
        :type updated_date_utc: str
        """

        self._updated_date_utc = updated_date_utc
