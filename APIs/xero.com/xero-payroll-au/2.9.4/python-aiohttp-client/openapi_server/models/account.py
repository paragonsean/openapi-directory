# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_type import AccountType
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, code: str=None, name: str=None, type: AccountType=None):
        """Account - a model defined in OpenAPI

        :param account_id: The account_id of this Account.
        :param code: The code of this Account.
        :param name: The name of this Account.
        :param type: The type of this Account.
        """
        self.openapi_types = {
            'account_id': str,
            'code': str,
            'name': str,
            'type': AccountType
        }

        self.attribute_map = {
            'account_id': 'AccountID',
            'code': 'Code',
            'name': 'Name',
            'type': 'Type'
        }

        self._account_id = account_id
        self._code = code
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Account.

        Xero identifier for accounts

        :return: The account_id of this Account.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Account.

        Xero identifier for accounts

        :param account_id: The account_id of this Account.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def code(self):
        """Gets the code of this Account.

        Customer defined account code

        :return: The code of this Account.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Account.

        Customer defined account code

        :param code: The code of this Account.
        :type code: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this Account.

        Name of account

        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.

        Name of account

        :param name: The name of this Account.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Account.


        :return: The type of this Account.
        :rtype: AccountType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Account.


        :param type: The type of this Account.
        :type type: AccountType
        """

        self._type = type
