# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deduction_type_calculation_type import DeductionTypeCalculationType
from openapi_server import util


class DeductionLine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, calculation_type: DeductionTypeCalculationType=None, deduction_type_id: str=None, number_of_units: float=None, percentage: float=None):
        """DeductionLine - a model defined in OpenAPI

        :param amount: The amount of this DeductionLine.
        :param calculation_type: The calculation_type of this DeductionLine.
        :param deduction_type_id: The deduction_type_id of this DeductionLine.
        :param number_of_units: The number_of_units of this DeductionLine.
        :param percentage: The percentage of this DeductionLine.
        """
        self.openapi_types = {
            'amount': float,
            'calculation_type': DeductionTypeCalculationType,
            'deduction_type_id': str,
            'number_of_units': float,
            'percentage': float
        }

        self.attribute_map = {
            'amount': 'Amount',
            'calculation_type': 'CalculationType',
            'deduction_type_id': 'DeductionTypeID',
            'number_of_units': 'NumberOfUnits',
            'percentage': 'Percentage'
        }

        self._amount = amount
        self._calculation_type = calculation_type
        self._deduction_type_id = deduction_type_id
        self._number_of_units = number_of_units
        self._percentage = percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeductionLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeductionLine of this DeductionLine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this DeductionLine.

        Deduction type amount

        :return: The amount of this DeductionLine.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DeductionLine.

        Deduction type amount

        :param amount: The amount of this DeductionLine.
        :type amount: float
        """

        self._amount = amount

    @property
    def calculation_type(self):
        """Gets the calculation_type of this DeductionLine.


        :return: The calculation_type of this DeductionLine.
        :rtype: DeductionTypeCalculationType
        """
        return self._calculation_type

    @calculation_type.setter
    def calculation_type(self, calculation_type):
        """Sets the calculation_type of this DeductionLine.


        :param calculation_type: The calculation_type of this DeductionLine.
        :type calculation_type: DeductionTypeCalculationType
        """
        if calculation_type is None:
            raise ValueError("Invalid value for `calculation_type`, must not be `None`")

        self._calculation_type = calculation_type

    @property
    def deduction_type_id(self):
        """Gets the deduction_type_id of this DeductionLine.

        Xero deduction type identifier

        :return: The deduction_type_id of this DeductionLine.
        :rtype: str
        """
        return self._deduction_type_id

    @deduction_type_id.setter
    def deduction_type_id(self, deduction_type_id):
        """Sets the deduction_type_id of this DeductionLine.

        Xero deduction type identifier

        :param deduction_type_id: The deduction_type_id of this DeductionLine.
        :type deduction_type_id: str
        """
        if deduction_type_id is None:
            raise ValueError("Invalid value for `deduction_type_id`, must not be `None`")

        self._deduction_type_id = deduction_type_id

    @property
    def number_of_units(self):
        """Gets the number_of_units of this DeductionLine.

        Deduction number of units

        :return: The number_of_units of this DeductionLine.
        :rtype: float
        """
        return self._number_of_units

    @number_of_units.setter
    def number_of_units(self, number_of_units):
        """Sets the number_of_units of this DeductionLine.

        Deduction number of units

        :param number_of_units: The number_of_units of this DeductionLine.
        :type number_of_units: float
        """

        self._number_of_units = number_of_units

    @property
    def percentage(self):
        """Gets the percentage of this DeductionLine.

        The Percentage of the Deduction

        :return: The percentage of this DeductionLine.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this DeductionLine.

        The Percentage of the Deduction

        :param percentage: The percentage of this DeductionLine.
        :type percentage: float
        """

        self._percentage = percentage
