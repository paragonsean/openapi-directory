# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.earnings_rate_calculation_type import EarningsRateCalculationType
from openapi_server import util


class EarningsLine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, annual_salary: float=None, calculation_type: EarningsRateCalculationType=None, earnings_rate_id: str=None, fixed_amount: float=None, normal_number_of_units: float=None, number_of_units: float=None, number_of_units_per_week: float=None, rate_per_unit: float=None):
        """EarningsLine - a model defined in OpenAPI

        :param amount: The amount of this EarningsLine.
        :param annual_salary: The annual_salary of this EarningsLine.
        :param calculation_type: The calculation_type of this EarningsLine.
        :param earnings_rate_id: The earnings_rate_id of this EarningsLine.
        :param fixed_amount: The fixed_amount of this EarningsLine.
        :param normal_number_of_units: The normal_number_of_units of this EarningsLine.
        :param number_of_units: The number_of_units of this EarningsLine.
        :param number_of_units_per_week: The number_of_units_per_week of this EarningsLine.
        :param rate_per_unit: The rate_per_unit of this EarningsLine.
        """
        self.openapi_types = {
            'amount': float,
            'annual_salary': float,
            'calculation_type': EarningsRateCalculationType,
            'earnings_rate_id': str,
            'fixed_amount': float,
            'normal_number_of_units': float,
            'number_of_units': float,
            'number_of_units_per_week': float,
            'rate_per_unit': float
        }

        self.attribute_map = {
            'amount': 'Amount',
            'annual_salary': 'AnnualSalary',
            'calculation_type': 'CalculationType',
            'earnings_rate_id': 'EarningsRateID',
            'fixed_amount': 'FixedAmount',
            'normal_number_of_units': 'NormalNumberOfUnits',
            'number_of_units': 'NumberOfUnits',
            'number_of_units_per_week': 'NumberOfUnitsPerWeek',
            'rate_per_unit': 'RatePerUnit'
        }

        self._amount = amount
        self._annual_salary = annual_salary
        self._calculation_type = calculation_type
        self._earnings_rate_id = earnings_rate_id
        self._fixed_amount = fixed_amount
        self._normal_number_of_units = normal_number_of_units
        self._number_of_units = number_of_units
        self._number_of_units_per_week = number_of_units_per_week
        self._rate_per_unit = rate_per_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EarningsLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EarningsLine of this EarningsLine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this EarningsLine.

        Earnings rate amount

        :return: The amount of this EarningsLine.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this EarningsLine.

        Earnings rate amount

        :param amount: The amount of this EarningsLine.
        :type amount: float
        """

        self._amount = amount

    @property
    def annual_salary(self):
        """Gets the annual_salary of this EarningsLine.

        Annual salary for earnings line

        :return: The annual_salary of this EarningsLine.
        :rtype: float
        """
        return self._annual_salary

    @annual_salary.setter
    def annual_salary(self, annual_salary):
        """Sets the annual_salary of this EarningsLine.

        Annual salary for earnings line

        :param annual_salary: The annual_salary of this EarningsLine.
        :type annual_salary: float
        """

        self._annual_salary = annual_salary

    @property
    def calculation_type(self):
        """Gets the calculation_type of this EarningsLine.


        :return: The calculation_type of this EarningsLine.
        :rtype: EarningsRateCalculationType
        """
        return self._calculation_type

    @calculation_type.setter
    def calculation_type(self, calculation_type):
        """Sets the calculation_type of this EarningsLine.


        :param calculation_type: The calculation_type of this EarningsLine.
        :type calculation_type: EarningsRateCalculationType
        """

        self._calculation_type = calculation_type

    @property
    def earnings_rate_id(self):
        """Gets the earnings_rate_id of this EarningsLine.

        Xero unique id for earnings rate

        :return: The earnings_rate_id of this EarningsLine.
        :rtype: str
        """
        return self._earnings_rate_id

    @earnings_rate_id.setter
    def earnings_rate_id(self, earnings_rate_id):
        """Sets the earnings_rate_id of this EarningsLine.

        Xero unique id for earnings rate

        :param earnings_rate_id: The earnings_rate_id of this EarningsLine.
        :type earnings_rate_id: str
        """
        if earnings_rate_id is None:
            raise ValueError("Invalid value for `earnings_rate_id`, must not be `None`")

        self._earnings_rate_id = earnings_rate_id

    @property
    def fixed_amount(self):
        """Gets the fixed_amount of this EarningsLine.

        Earnings rate amount. Only applicable if the EarningsRate RateType is Fixed

        :return: The fixed_amount of this EarningsLine.
        :rtype: float
        """
        return self._fixed_amount

    @fixed_amount.setter
    def fixed_amount(self, fixed_amount):
        """Sets the fixed_amount of this EarningsLine.

        Earnings rate amount. Only applicable if the EarningsRate RateType is Fixed

        :param fixed_amount: The fixed_amount of this EarningsLine.
        :type fixed_amount: float
        """

        self._fixed_amount = fixed_amount

    @property
    def normal_number_of_units(self):
        """Gets the normal_number_of_units of this EarningsLine.

        Normal number of units for EarningsLine. Applicable when RateType is \"MULTIPLE\"

        :return: The normal_number_of_units of this EarningsLine.
        :rtype: float
        """
        return self._normal_number_of_units

    @normal_number_of_units.setter
    def normal_number_of_units(self, normal_number_of_units):
        """Sets the normal_number_of_units of this EarningsLine.

        Normal number of units for EarningsLine. Applicable when RateType is \"MULTIPLE\"

        :param normal_number_of_units: The normal_number_of_units of this EarningsLine.
        :type normal_number_of_units: float
        """

        self._normal_number_of_units = normal_number_of_units

    @property
    def number_of_units(self):
        """Gets the number_of_units of this EarningsLine.

        Earnings rate number of units.

        :return: The number_of_units of this EarningsLine.
        :rtype: float
        """
        return self._number_of_units

    @number_of_units.setter
    def number_of_units(self, number_of_units):
        """Sets the number_of_units of this EarningsLine.

        Earnings rate number of units.

        :param number_of_units: The number_of_units of this EarningsLine.
        :type number_of_units: float
        """

        self._number_of_units = number_of_units

    @property
    def number_of_units_per_week(self):
        """Gets the number_of_units_per_week of this EarningsLine.

        number of units for earning line

        :return: The number_of_units_per_week of this EarningsLine.
        :rtype: float
        """
        return self._number_of_units_per_week

    @number_of_units_per_week.setter
    def number_of_units_per_week(self, number_of_units_per_week):
        """Sets the number_of_units_per_week of this EarningsLine.

        number of units for earning line

        :param number_of_units_per_week: The number_of_units_per_week of this EarningsLine.
        :type number_of_units_per_week: float
        """

        self._number_of_units_per_week = number_of_units_per_week

    @property
    def rate_per_unit(self):
        """Gets the rate_per_unit of this EarningsLine.

        Rate per unit of the EarningsLine.

        :return: The rate_per_unit of this EarningsLine.
        :rtype: float
        """
        return self._rate_per_unit

    @rate_per_unit.setter
    def rate_per_unit(self, rate_per_unit):
        """Sets the rate_per_unit of this EarningsLine.

        Rate per unit of the EarningsLine.

        :param rate_per_unit: The rate_per_unit of this EarningsLine.
        :type rate_per_unit: float
        """

        self._rate_per_unit = rate_per_unit
