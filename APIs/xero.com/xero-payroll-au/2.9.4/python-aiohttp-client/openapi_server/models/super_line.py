# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.superannuation_calculation_type import SuperannuationCalculationType
from openapi_server.models.superannuation_contribution_type import SuperannuationContributionType
from openapi_server import util


class SuperLine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, calculation_type: SuperannuationCalculationType=None, contribution_type: SuperannuationContributionType=None, expense_account_code: str=None, liability_account_code: str=None, minimum_monthly_earnings: float=None, percentage: float=None, super_membership_id: str=None):
        """SuperLine - a model defined in OpenAPI

        :param amount: The amount of this SuperLine.
        :param calculation_type: The calculation_type of this SuperLine.
        :param contribution_type: The contribution_type of this SuperLine.
        :param expense_account_code: The expense_account_code of this SuperLine.
        :param liability_account_code: The liability_account_code of this SuperLine.
        :param minimum_monthly_earnings: The minimum_monthly_earnings of this SuperLine.
        :param percentage: The percentage of this SuperLine.
        :param super_membership_id: The super_membership_id of this SuperLine.
        """
        self.openapi_types = {
            'amount': float,
            'calculation_type': SuperannuationCalculationType,
            'contribution_type': SuperannuationContributionType,
            'expense_account_code': str,
            'liability_account_code': str,
            'minimum_monthly_earnings': float,
            'percentage': float,
            'super_membership_id': str
        }

        self.attribute_map = {
            'amount': 'Amount',
            'calculation_type': 'CalculationType',
            'contribution_type': 'ContributionType',
            'expense_account_code': 'ExpenseAccountCode',
            'liability_account_code': 'LiabilityAccountCode',
            'minimum_monthly_earnings': 'MinimumMonthlyEarnings',
            'percentage': 'Percentage',
            'super_membership_id': 'SuperMembershipID'
        }

        self._amount = amount
        self._calculation_type = calculation_type
        self._contribution_type = contribution_type
        self._expense_account_code = expense_account_code
        self._liability_account_code = liability_account_code
        self._minimum_monthly_earnings = minimum_monthly_earnings
        self._percentage = percentage
        self._super_membership_id = super_membership_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuperLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuperLine of this SuperLine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this SuperLine.

        Super membership amount

        :return: The amount of this SuperLine.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SuperLine.

        Super membership amount

        :param amount: The amount of this SuperLine.
        :type amount: float
        """

        self._amount = amount

    @property
    def calculation_type(self):
        """Gets the calculation_type of this SuperLine.


        :return: The calculation_type of this SuperLine.
        :rtype: SuperannuationCalculationType
        """
        return self._calculation_type

    @calculation_type.setter
    def calculation_type(self, calculation_type):
        """Sets the calculation_type of this SuperLine.


        :param calculation_type: The calculation_type of this SuperLine.
        :type calculation_type: SuperannuationCalculationType
        """

        self._calculation_type = calculation_type

    @property
    def contribution_type(self):
        """Gets the contribution_type of this SuperLine.


        :return: The contribution_type of this SuperLine.
        :rtype: SuperannuationContributionType
        """
        return self._contribution_type

    @contribution_type.setter
    def contribution_type(self, contribution_type):
        """Sets the contribution_type of this SuperLine.


        :param contribution_type: The contribution_type of this SuperLine.
        :type contribution_type: SuperannuationContributionType
        """

        self._contribution_type = contribution_type

    @property
    def expense_account_code(self):
        """Gets the expense_account_code of this SuperLine.

        expense account code

        :return: The expense_account_code of this SuperLine.
        :rtype: str
        """
        return self._expense_account_code

    @expense_account_code.setter
    def expense_account_code(self, expense_account_code):
        """Sets the expense_account_code of this SuperLine.

        expense account code

        :param expense_account_code: The expense_account_code of this SuperLine.
        :type expense_account_code: str
        """

        self._expense_account_code = expense_account_code

    @property
    def liability_account_code(self):
        """Gets the liability_account_code of this SuperLine.

        liabilty account code

        :return: The liability_account_code of this SuperLine.
        :rtype: str
        """
        return self._liability_account_code

    @liability_account_code.setter
    def liability_account_code(self, liability_account_code):
        """Sets the liability_account_code of this SuperLine.

        liabilty account code

        :param liability_account_code: The liability_account_code of this SuperLine.
        :type liability_account_code: str
        """

        self._liability_account_code = liability_account_code

    @property
    def minimum_monthly_earnings(self):
        """Gets the minimum_monthly_earnings of this SuperLine.

        amount of minimum earnings

        :return: The minimum_monthly_earnings of this SuperLine.
        :rtype: float
        """
        return self._minimum_monthly_earnings

    @minimum_monthly_earnings.setter
    def minimum_monthly_earnings(self, minimum_monthly_earnings):
        """Sets the minimum_monthly_earnings of this SuperLine.

        amount of minimum earnings

        :param minimum_monthly_earnings: The minimum_monthly_earnings of this SuperLine.
        :type minimum_monthly_earnings: float
        """

        self._minimum_monthly_earnings = minimum_monthly_earnings

    @property
    def percentage(self):
        """Gets the percentage of this SuperLine.

        percentage for super line

        :return: The percentage of this SuperLine.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this SuperLine.

        percentage for super line

        :param percentage: The percentage of this SuperLine.
        :type percentage: float
        """

        self._percentage = percentage

    @property
    def super_membership_id(self):
        """Gets the super_membership_id of this SuperLine.

        Xero super membership ID

        :return: The super_membership_id of this SuperLine.
        :rtype: str
        """
        return self._super_membership_id

    @super_membership_id.setter
    def super_membership_id(self, super_membership_id):
        """Sets the super_membership_id of this SuperLine.

        Xero super membership ID

        :param super_membership_id: The super_membership_id of this SuperLine.
        :type super_membership_id: str
        """

        self._super_membership_id = super_membership_id
