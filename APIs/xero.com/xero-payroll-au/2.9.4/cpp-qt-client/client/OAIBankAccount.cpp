/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBankAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBankAccount::OAIBankAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBankAccount::OAIBankAccount() {
    this->initializeModel();
}

OAIBankAccount::~OAIBankAccount() {}

void OAIBankAccount::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_bsb_isSet = false;
    m_bsb_isValid = false;

    m_remainder_isSet = false;
    m_remainder_isValid = false;

    m_statement_text_isSet = false;
    m_statement_text_isValid = false;
}

void OAIBankAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBankAccount::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("AccountName")]);
    m_account_name_isSet = !json[QString("AccountName")].isNull() && m_account_name_isValid;

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("AccountNumber")]);
    m_account_number_isSet = !json[QString("AccountNumber")].isNull() && m_account_number_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("Amount")]);
    m_amount_isSet = !json[QString("Amount")].isNull() && m_amount_isValid;

    m_bsb_isValid = ::OpenAPI::fromJsonValue(m_bsb, json[QString("BSB")]);
    m_bsb_isSet = !json[QString("BSB")].isNull() && m_bsb_isValid;

    m_remainder_isValid = ::OpenAPI::fromJsonValue(m_remainder, json[QString("Remainder")]);
    m_remainder_isSet = !json[QString("Remainder")].isNull() && m_remainder_isValid;

    m_statement_text_isValid = ::OpenAPI::fromJsonValue(m_statement_text, json[QString("StatementText")]);
    m_statement_text_isSet = !json[QString("StatementText")].isNull() && m_statement_text_isValid;
}

QString OAIBankAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBankAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("AccountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_account_number_isSet) {
        obj.insert(QString("AccountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_amount_isSet) {
        obj.insert(QString("Amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_bsb_isSet) {
        obj.insert(QString("BSB"), ::OpenAPI::toJsonValue(m_bsb));
    }
    if (m_remainder_isSet) {
        obj.insert(QString("Remainder"), ::OpenAPI::toJsonValue(m_remainder));
    }
    if (m_statement_text_isSet) {
        obj.insert(QString("StatementText"), ::OpenAPI::toJsonValue(m_statement_text));
    }
    return obj;
}

QString OAIBankAccount::getAccountName() const {
    return m_account_name;
}
void OAIBankAccount::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIBankAccount::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIBankAccount::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIBankAccount::getAccountNumber() const {
    return m_account_number;
}
void OAIBankAccount::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIBankAccount::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIBankAccount::is_account_number_Valid() const{
    return m_account_number_isValid;
}

double OAIBankAccount::getAmount() const {
    return m_amount;
}
void OAIBankAccount::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIBankAccount::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIBankAccount::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIBankAccount::getBsb() const {
    return m_bsb;
}
void OAIBankAccount::setBsb(const QString &bsb) {
    m_bsb = bsb;
    m_bsb_isSet = true;
}

bool OAIBankAccount::is_bsb_Set() const{
    return m_bsb_isSet;
}

bool OAIBankAccount::is_bsb_Valid() const{
    return m_bsb_isValid;
}

bool OAIBankAccount::isRemainder() const {
    return m_remainder;
}
void OAIBankAccount::setRemainder(const bool &remainder) {
    m_remainder = remainder;
    m_remainder_isSet = true;
}

bool OAIBankAccount::is_remainder_Set() const{
    return m_remainder_isSet;
}

bool OAIBankAccount::is_remainder_Valid() const{
    return m_remainder_isValid;
}

QString OAIBankAccount::getStatementText() const {
    return m_statement_text;
}
void OAIBankAccount::setStatementText(const QString &statement_text) {
    m_statement_text = statement_text;
    m_statement_text_isSet = true;
}

bool OAIBankAccount::is_statement_text_Set() const{
    return m_statement_text_isSet;
}

bool OAIBankAccount::is_statement_text_Valid() const{
    return m_statement_text_isValid;
}

bool OAIBankAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bsb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remainder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBankAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
