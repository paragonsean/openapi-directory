/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITFNExemptionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITFNExemptionType::OAITFNExemptionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITFNExemptionType::OAITFNExemptionType() {
    this->initializeModel();
}

OAITFNExemptionType::~OAITFNExemptionType() {}

void OAITFNExemptionType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITFNExemptionType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITFNExemptionType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NOTQUOTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITFNExemptionType::NOTQUOTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITFNExemptionType::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENSIONER", Qt::CaseInsensitive) == 0) {
        m_value = eOAITFNExemptionType::PENSIONER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNDER18", Qt::CaseInsensitive) == 0) {
        m_value = eOAITFNExemptionType::UNDER18;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITFNExemptionType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITFNExemptionType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITFNExemptionType::NOTQUOTED:
            val = "NOTQUOTED";
            break;
        case eOAITFNExemptionType::PENDING:
            val = "PENDING";
            break;
        case eOAITFNExemptionType::PENSIONER:
            val = "PENSIONER";
            break;
        case eOAITFNExemptionType::UNDER18:
            val = "UNDER18";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITFNExemptionType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITFNExemptionType::eOAITFNExemptionType OAITFNExemptionType::getValue() const {
    return m_value;
}

void OAITFNExemptionType::setValue(const OAITFNExemptionType::eOAITFNExemptionType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITFNExemptionType::isSet() const {
    
    return m_value_isSet;
}

bool OAITFNExemptionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
