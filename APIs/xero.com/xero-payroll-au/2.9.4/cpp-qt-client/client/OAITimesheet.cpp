/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimesheet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimesheet::OAITimesheet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimesheet::OAITimesheet() {
    this->initializeModel();
}

OAITimesheet::~OAITimesheet() {}

void OAITimesheet::initializeModel() {

    m_employee_id_isSet = false;
    m_employee_id_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_hours_isSet = false;
    m_hours_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timesheet_id_isSet = false;
    m_timesheet_id_isValid = false;

    m_timesheet_lines_isSet = false;
    m_timesheet_lines_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAITimesheet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimesheet::fromJsonObject(QJsonObject json) {

    m_employee_id_isValid = ::OpenAPI::fromJsonValue(m_employee_id, json[QString("EmployeeID")]);
    m_employee_id_isSet = !json[QString("EmployeeID")].isNull() && m_employee_id_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_hours_isValid = ::OpenAPI::fromJsonValue(m_hours, json[QString("Hours")]);
    m_hours_isSet = !json[QString("Hours")].isNull() && m_hours_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_timesheet_id_isValid = ::OpenAPI::fromJsonValue(m_timesheet_id, json[QString("TimesheetID")]);
    m_timesheet_id_isSet = !json[QString("TimesheetID")].isNull() && m_timesheet_id_isValid;

    m_timesheet_lines_isValid = ::OpenAPI::fromJsonValue(m_timesheet_lines, json[QString("TimesheetLines")]);
    m_timesheet_lines_isSet = !json[QString("TimesheetLines")].isNull() && m_timesheet_lines_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;
}

QString OAITimesheet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimesheet::asJsonObject() const {
    QJsonObject obj;
    if (m_employee_id_isSet) {
        obj.insert(QString("EmployeeID"), ::OpenAPI::toJsonValue(m_employee_id));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_hours_isSet) {
        obj.insert(QString("Hours"), ::OpenAPI::toJsonValue(m_hours));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timesheet_id_isSet) {
        obj.insert(QString("TimesheetID"), ::OpenAPI::toJsonValue(m_timesheet_id));
    }
    if (m_timesheet_lines.size() > 0) {
        obj.insert(QString("TimesheetLines"), ::OpenAPI::toJsonValue(m_timesheet_lines));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

QString OAITimesheet::getEmployeeId() const {
    return m_employee_id;
}
void OAITimesheet::setEmployeeId(const QString &employee_id) {
    m_employee_id = employee_id;
    m_employee_id_isSet = true;
}

bool OAITimesheet::is_employee_id_Set() const{
    return m_employee_id_isSet;
}

bool OAITimesheet::is_employee_id_Valid() const{
    return m_employee_id_isValid;
}

QString OAITimesheet::getEndDate() const {
    return m_end_date;
}
void OAITimesheet::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAITimesheet::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAITimesheet::is_end_date_Valid() const{
    return m_end_date_isValid;
}

double OAITimesheet::getHours() const {
    return m_hours;
}
void OAITimesheet::setHours(const double &hours) {
    m_hours = hours;
    m_hours_isSet = true;
}

bool OAITimesheet::is_hours_Set() const{
    return m_hours_isSet;
}

bool OAITimesheet::is_hours_Valid() const{
    return m_hours_isValid;
}

QString OAITimesheet::getStartDate() const {
    return m_start_date;
}
void OAITimesheet::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAITimesheet::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAITimesheet::is_start_date_Valid() const{
    return m_start_date_isValid;
}

OAITimesheetStatus OAITimesheet::getStatus() const {
    return m_status;
}
void OAITimesheet::setStatus(const OAITimesheetStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITimesheet::is_status_Set() const{
    return m_status_isSet;
}

bool OAITimesheet::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITimesheet::getTimesheetId() const {
    return m_timesheet_id;
}
void OAITimesheet::setTimesheetId(const QString &timesheet_id) {
    m_timesheet_id = timesheet_id;
    m_timesheet_id_isSet = true;
}

bool OAITimesheet::is_timesheet_id_Set() const{
    return m_timesheet_id_isSet;
}

bool OAITimesheet::is_timesheet_id_Valid() const{
    return m_timesheet_id_isValid;
}

QList<OAITimesheetLine> OAITimesheet::getTimesheetLines() const {
    return m_timesheet_lines;
}
void OAITimesheet::setTimesheetLines(const QList<OAITimesheetLine> &timesheet_lines) {
    m_timesheet_lines = timesheet_lines;
    m_timesheet_lines_isSet = true;
}

bool OAITimesheet::is_timesheet_lines_Set() const{
    return m_timesheet_lines_isSet;
}

bool OAITimesheet::is_timesheet_lines_Valid() const{
    return m_timesheet_lines_isValid;
}

QString OAITimesheet::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAITimesheet::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAITimesheet::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAITimesheet::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

QList<OAIValidationError> OAITimesheet::getValidationErrors() const {
    return m_validation_errors;
}
void OAITimesheet::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAITimesheet::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAITimesheet::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAITimesheet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_employee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timesheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timesheet_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimesheet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_employee_id_isValid && m_end_date_isValid && m_start_date_isValid && true;
}

} // namespace OpenAPI
