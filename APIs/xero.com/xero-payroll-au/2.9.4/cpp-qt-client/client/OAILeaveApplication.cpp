/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeaveApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeaveApplication::OAILeaveApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeaveApplication::OAILeaveApplication() {
    this->initializeModel();
}

OAILeaveApplication::~OAILeaveApplication() {}

void OAILeaveApplication::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_employee_id_isSet = false;
    m_employee_id_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_leave_application_id_isSet = false;
    m_leave_application_id_isValid = false;

    m_leave_periods_isSet = false;
    m_leave_periods_isValid = false;

    m_leave_type_id_isSet = false;
    m_leave_type_id_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAILeaveApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeaveApplication::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_employee_id_isValid = ::OpenAPI::fromJsonValue(m_employee_id, json[QString("EmployeeID")]);
    m_employee_id_isSet = !json[QString("EmployeeID")].isNull() && m_employee_id_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_leave_application_id_isValid = ::OpenAPI::fromJsonValue(m_leave_application_id, json[QString("LeaveApplicationID")]);
    m_leave_application_id_isSet = !json[QString("LeaveApplicationID")].isNull() && m_leave_application_id_isValid;

    m_leave_periods_isValid = ::OpenAPI::fromJsonValue(m_leave_periods, json[QString("LeavePeriods")]);
    m_leave_periods_isSet = !json[QString("LeavePeriods")].isNull() && m_leave_periods_isValid;

    m_leave_type_id_isValid = ::OpenAPI::fromJsonValue(m_leave_type_id, json[QString("LeaveTypeID")]);
    m_leave_type_id_isSet = !json[QString("LeaveTypeID")].isNull() && m_leave_type_id_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;
}

QString OAILeaveApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeaveApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_employee_id_isSet) {
        obj.insert(QString("EmployeeID"), ::OpenAPI::toJsonValue(m_employee_id));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_leave_application_id_isSet) {
        obj.insert(QString("LeaveApplicationID"), ::OpenAPI::toJsonValue(m_leave_application_id));
    }
    if (m_leave_periods.size() > 0) {
        obj.insert(QString("LeavePeriods"), ::OpenAPI::toJsonValue(m_leave_periods));
    }
    if (m_leave_type_id_isSet) {
        obj.insert(QString("LeaveTypeID"), ::OpenAPI::toJsonValue(m_leave_type_id));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

QString OAILeaveApplication::getDescription() const {
    return m_description;
}
void OAILeaveApplication::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILeaveApplication::is_description_Set() const{
    return m_description_isSet;
}

bool OAILeaveApplication::is_description_Valid() const{
    return m_description_isValid;
}

QString OAILeaveApplication::getEmployeeId() const {
    return m_employee_id;
}
void OAILeaveApplication::setEmployeeId(const QString &employee_id) {
    m_employee_id = employee_id;
    m_employee_id_isSet = true;
}

bool OAILeaveApplication::is_employee_id_Set() const{
    return m_employee_id_isSet;
}

bool OAILeaveApplication::is_employee_id_Valid() const{
    return m_employee_id_isValid;
}

QString OAILeaveApplication::getEndDate() const {
    return m_end_date;
}
void OAILeaveApplication::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAILeaveApplication::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAILeaveApplication::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAILeaveApplication::getLeaveApplicationId() const {
    return m_leave_application_id;
}
void OAILeaveApplication::setLeaveApplicationId(const QString &leave_application_id) {
    m_leave_application_id = leave_application_id;
    m_leave_application_id_isSet = true;
}

bool OAILeaveApplication::is_leave_application_id_Set() const{
    return m_leave_application_id_isSet;
}

bool OAILeaveApplication::is_leave_application_id_Valid() const{
    return m_leave_application_id_isValid;
}

QList<OAILeavePeriod> OAILeaveApplication::getLeavePeriods() const {
    return m_leave_periods;
}
void OAILeaveApplication::setLeavePeriods(const QList<OAILeavePeriod> &leave_periods) {
    m_leave_periods = leave_periods;
    m_leave_periods_isSet = true;
}

bool OAILeaveApplication::is_leave_periods_Set() const{
    return m_leave_periods_isSet;
}

bool OAILeaveApplication::is_leave_periods_Valid() const{
    return m_leave_periods_isValid;
}

QString OAILeaveApplication::getLeaveTypeId() const {
    return m_leave_type_id;
}
void OAILeaveApplication::setLeaveTypeId(const QString &leave_type_id) {
    m_leave_type_id = leave_type_id;
    m_leave_type_id_isSet = true;
}

bool OAILeaveApplication::is_leave_type_id_Set() const{
    return m_leave_type_id_isSet;
}

bool OAILeaveApplication::is_leave_type_id_Valid() const{
    return m_leave_type_id_isValid;
}

QString OAILeaveApplication::getStartDate() const {
    return m_start_date;
}
void OAILeaveApplication::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAILeaveApplication::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAILeaveApplication::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAILeaveApplication::getTitle() const {
    return m_title;
}
void OAILeaveApplication::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAILeaveApplication::is_title_Set() const{
    return m_title_isSet;
}

bool OAILeaveApplication::is_title_Valid() const{
    return m_title_isValid;
}

QString OAILeaveApplication::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAILeaveApplication::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAILeaveApplication::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAILeaveApplication::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

QList<OAIValidationError> OAILeaveApplication::getValidationErrors() const {
    return m_validation_errors;
}
void OAILeaveApplication::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAILeaveApplication::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAILeaveApplication::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAILeaveApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leave_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leave_periods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_leave_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeaveApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
