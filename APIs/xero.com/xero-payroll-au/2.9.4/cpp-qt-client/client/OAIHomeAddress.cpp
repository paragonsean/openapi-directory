/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHomeAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHomeAddress::OAIHomeAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHomeAddress::OAIHomeAddress() {
    this->initializeModel();
}

OAIHomeAddress::~OAIHomeAddress() {}

void OAIHomeAddress::initializeModel() {

    m_address_line1_isSet = false;
    m_address_line1_isValid = false;

    m_address_line2_isSet = false;
    m_address_line2_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;
}

void OAIHomeAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHomeAddress::fromJsonObject(QJsonObject json) {

    m_address_line1_isValid = ::OpenAPI::fromJsonValue(m_address_line1, json[QString("AddressLine1")]);
    m_address_line1_isSet = !json[QString("AddressLine1")].isNull() && m_address_line1_isValid;

    m_address_line2_isValid = ::OpenAPI::fromJsonValue(m_address_line2, json[QString("AddressLine2")]);
    m_address_line2_isSet = !json[QString("AddressLine2")].isNull() && m_address_line2_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("City")]);
    m_city_isSet = !json[QString("City")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("PostalCode")]);
    m_postal_code_isSet = !json[QString("PostalCode")].isNull() && m_postal_code_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;
}

QString OAIHomeAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHomeAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address_line1_isSet) {
        obj.insert(QString("AddressLine1"), ::OpenAPI::toJsonValue(m_address_line1));
    }
    if (m_address_line2_isSet) {
        obj.insert(QString("AddressLine2"), ::OpenAPI::toJsonValue(m_address_line2));
    }
    if (m_city_isSet) {
        obj.insert(QString("City"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("PostalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_region.isSet()) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    return obj;
}

QString OAIHomeAddress::getAddressLine1() const {
    return m_address_line1;
}
void OAIHomeAddress::setAddressLine1(const QString &address_line1) {
    m_address_line1 = address_line1;
    m_address_line1_isSet = true;
}

bool OAIHomeAddress::is_address_line1_Set() const{
    return m_address_line1_isSet;
}

bool OAIHomeAddress::is_address_line1_Valid() const{
    return m_address_line1_isValid;
}

QString OAIHomeAddress::getAddressLine2() const {
    return m_address_line2;
}
void OAIHomeAddress::setAddressLine2(const QString &address_line2) {
    m_address_line2 = address_line2;
    m_address_line2_isSet = true;
}

bool OAIHomeAddress::is_address_line2_Set() const{
    return m_address_line2_isSet;
}

bool OAIHomeAddress::is_address_line2_Valid() const{
    return m_address_line2_isValid;
}

QString OAIHomeAddress::getCity() const {
    return m_city;
}
void OAIHomeAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIHomeAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIHomeAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIHomeAddress::getCountry() const {
    return m_country;
}
void OAIHomeAddress::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIHomeAddress::is_country_Set() const{
    return m_country_isSet;
}

bool OAIHomeAddress::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIHomeAddress::getPostalCode() const {
    return m_postal_code;
}
void OAIHomeAddress::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIHomeAddress::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIHomeAddress::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

OAIState OAIHomeAddress::getRegion() const {
    return m_region;
}
void OAIHomeAddress::setRegion(const OAIState &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIHomeAddress::is_region_Set() const{
    return m_region_isSet;
}

bool OAIHomeAddress::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIHomeAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHomeAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_line1_isValid && true;
}

} // namespace OpenAPI
