/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeductionLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeductionLine::OAIDeductionLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeductionLine::OAIDeductionLine() {
    this->initializeModel();
}

OAIDeductionLine::~OAIDeductionLine() {}

void OAIDeductionLine::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_calculation_type_isSet = false;
    m_calculation_type_isValid = false;

    m_deduction_type_id_isSet = false;
    m_deduction_type_id_isValid = false;

    m_number_of_units_isSet = false;
    m_number_of_units_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;
}

void OAIDeductionLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeductionLine::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("Amount")]);
    m_amount_isSet = !json[QString("Amount")].isNull() && m_amount_isValid;

    m_calculation_type_isValid = ::OpenAPI::fromJsonValue(m_calculation_type, json[QString("CalculationType")]);
    m_calculation_type_isSet = !json[QString("CalculationType")].isNull() && m_calculation_type_isValid;

    m_deduction_type_id_isValid = ::OpenAPI::fromJsonValue(m_deduction_type_id, json[QString("DeductionTypeID")]);
    m_deduction_type_id_isSet = !json[QString("DeductionTypeID")].isNull() && m_deduction_type_id_isValid;

    m_number_of_units_isValid = ::OpenAPI::fromJsonValue(m_number_of_units, json[QString("NumberOfUnits")]);
    m_number_of_units_isSet = !json[QString("NumberOfUnits")].isNull() && m_number_of_units_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("Percentage")]);
    m_percentage_isSet = !json[QString("Percentage")].isNull() && m_percentage_isValid;
}

QString OAIDeductionLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeductionLine::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("Amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_calculation_type.isSet()) {
        obj.insert(QString("CalculationType"), ::OpenAPI::toJsonValue(m_calculation_type));
    }
    if (m_deduction_type_id_isSet) {
        obj.insert(QString("DeductionTypeID"), ::OpenAPI::toJsonValue(m_deduction_type_id));
    }
    if (m_number_of_units_isSet) {
        obj.insert(QString("NumberOfUnits"), ::OpenAPI::toJsonValue(m_number_of_units));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("Percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    return obj;
}

double OAIDeductionLine::getAmount() const {
    return m_amount;
}
void OAIDeductionLine::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIDeductionLine::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIDeductionLine::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIDeductionTypeCalculationType OAIDeductionLine::getCalculationType() const {
    return m_calculation_type;
}
void OAIDeductionLine::setCalculationType(const OAIDeductionTypeCalculationType &calculation_type) {
    m_calculation_type = calculation_type;
    m_calculation_type_isSet = true;
}

bool OAIDeductionLine::is_calculation_type_Set() const{
    return m_calculation_type_isSet;
}

bool OAIDeductionLine::is_calculation_type_Valid() const{
    return m_calculation_type_isValid;
}

QString OAIDeductionLine::getDeductionTypeId() const {
    return m_deduction_type_id;
}
void OAIDeductionLine::setDeductionTypeId(const QString &deduction_type_id) {
    m_deduction_type_id = deduction_type_id;
    m_deduction_type_id_isSet = true;
}

bool OAIDeductionLine::is_deduction_type_id_Set() const{
    return m_deduction_type_id_isSet;
}

bool OAIDeductionLine::is_deduction_type_id_Valid() const{
    return m_deduction_type_id_isValid;
}

double OAIDeductionLine::getNumberOfUnits() const {
    return m_number_of_units;
}
void OAIDeductionLine::setNumberOfUnits(const double &number_of_units) {
    m_number_of_units = number_of_units;
    m_number_of_units_isSet = true;
}

bool OAIDeductionLine::is_number_of_units_Set() const{
    return m_number_of_units_isSet;
}

bool OAIDeductionLine::is_number_of_units_Valid() const{
    return m_number_of_units_isValid;
}

double OAIDeductionLine::getPercentage() const {
    return m_percentage;
}
void OAIDeductionLine::setPercentage(const double &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIDeductionLine::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIDeductionLine::is_percentage_Valid() const{
    return m_percentage_isValid;
}

bool OAIDeductionLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deduction_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeductionLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_calculation_type_isValid && m_deduction_type_id_isValid && true;
}

} // namespace OpenAPI
