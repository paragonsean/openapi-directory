/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayrollCalendar.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayrollCalendar::OAIPayrollCalendar(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayrollCalendar::OAIPayrollCalendar() {
    this->initializeModel();
}

OAIPayrollCalendar::~OAIPayrollCalendar() {}

void OAIPayrollCalendar::initializeModel() {

    m_calendar_type_isSet = false;
    m_calendar_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_payment_date_isSet = false;
    m_payment_date_isValid = false;

    m_payroll_calendar_id_isSet = false;
    m_payroll_calendar_id_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAIPayrollCalendar::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayrollCalendar::fromJsonObject(QJsonObject json) {

    m_calendar_type_isValid = ::OpenAPI::fromJsonValue(m_calendar_type, json[QString("CalendarType")]);
    m_calendar_type_isSet = !json[QString("CalendarType")].isNull() && m_calendar_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_payment_date_isValid = ::OpenAPI::fromJsonValue(m_payment_date, json[QString("PaymentDate")]);
    m_payment_date_isSet = !json[QString("PaymentDate")].isNull() && m_payment_date_isValid;

    m_payroll_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_payroll_calendar_id, json[QString("PayrollCalendarID")]);
    m_payroll_calendar_id_isSet = !json[QString("PayrollCalendarID")].isNull() && m_payroll_calendar_id_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;
}

QString OAIPayrollCalendar::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayrollCalendar::asJsonObject() const {
    QJsonObject obj;
    if (m_calendar_type.isSet()) {
        obj.insert(QString("CalendarType"), ::OpenAPI::toJsonValue(m_calendar_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_payment_date_isSet) {
        obj.insert(QString("PaymentDate"), ::OpenAPI::toJsonValue(m_payment_date));
    }
    if (m_payroll_calendar_id_isSet) {
        obj.insert(QString("PayrollCalendarID"), ::OpenAPI::toJsonValue(m_payroll_calendar_id));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

OAICalendarType OAIPayrollCalendar::getCalendarType() const {
    return m_calendar_type;
}
void OAIPayrollCalendar::setCalendarType(const OAICalendarType &calendar_type) {
    m_calendar_type = calendar_type;
    m_calendar_type_isSet = true;
}

bool OAIPayrollCalendar::is_calendar_type_Set() const{
    return m_calendar_type_isSet;
}

bool OAIPayrollCalendar::is_calendar_type_Valid() const{
    return m_calendar_type_isValid;
}

QString OAIPayrollCalendar::getName() const {
    return m_name;
}
void OAIPayrollCalendar::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPayrollCalendar::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPayrollCalendar::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPayrollCalendar::getPaymentDate() const {
    return m_payment_date;
}
void OAIPayrollCalendar::setPaymentDate(const QString &payment_date) {
    m_payment_date = payment_date;
    m_payment_date_isSet = true;
}

bool OAIPayrollCalendar::is_payment_date_Set() const{
    return m_payment_date_isSet;
}

bool OAIPayrollCalendar::is_payment_date_Valid() const{
    return m_payment_date_isValid;
}

QString OAIPayrollCalendar::getPayrollCalendarId() const {
    return m_payroll_calendar_id;
}
void OAIPayrollCalendar::setPayrollCalendarId(const QString &payroll_calendar_id) {
    m_payroll_calendar_id = payroll_calendar_id;
    m_payroll_calendar_id_isSet = true;
}

bool OAIPayrollCalendar::is_payroll_calendar_id_Set() const{
    return m_payroll_calendar_id_isSet;
}

bool OAIPayrollCalendar::is_payroll_calendar_id_Valid() const{
    return m_payroll_calendar_id_isValid;
}

QString OAIPayrollCalendar::getStartDate() const {
    return m_start_date;
}
void OAIPayrollCalendar::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIPayrollCalendar::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIPayrollCalendar::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIPayrollCalendar::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIPayrollCalendar::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIPayrollCalendar::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIPayrollCalendar::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

QList<OAIValidationError> OAIPayrollCalendar::getValidationErrors() const {
    return m_validation_errors;
}
void OAIPayrollCalendar::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIPayrollCalendar::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIPayrollCalendar::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAIPayrollCalendar::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calendar_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payroll_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayrollCalendar::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
