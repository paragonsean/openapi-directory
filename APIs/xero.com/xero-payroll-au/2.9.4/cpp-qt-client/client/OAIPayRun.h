/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPayRun.h
 *
 * 
 */

#ifndef OAIPayRun_H
#define OAIPayRun_H

#include <QJsonObject>

#include "OAIPayRunStatus.h"
#include "OAIPayslipSummary.h"
#include "OAIValidationError.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPayslipSummary;
class OAIValidationError;

class OAIPayRun : public OAIObject {
public:
    OAIPayRun();
    OAIPayRun(QString json);
    ~OAIPayRun() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getDeductions() const;
    void setDeductions(const double &deductions);
    bool is_deductions_Set() const;
    bool is_deductions_Valid() const;

    double getNetPay() const;
    void setNetPay(const double &net_pay);
    bool is_net_pay_Set() const;
    bool is_net_pay_Valid() const;

    QString getPayRunId() const;
    void setPayRunId(const QString &pay_run_id);
    bool is_pay_run_id_Set() const;
    bool is_pay_run_id_Valid() const;

    QString getPayRunPeriodEndDate() const;
    void setPayRunPeriodEndDate(const QString &pay_run_period_end_date);
    bool is_pay_run_period_end_date_Set() const;
    bool is_pay_run_period_end_date_Valid() const;

    QString getPayRunPeriodStartDate() const;
    void setPayRunPeriodStartDate(const QString &pay_run_period_start_date);
    bool is_pay_run_period_start_date_Set() const;
    bool is_pay_run_period_start_date_Valid() const;

    OAIPayRunStatus getPayRunStatus() const;
    void setPayRunStatus(const OAIPayRunStatus &pay_run_status);
    bool is_pay_run_status_Set() const;
    bool is_pay_run_status_Valid() const;

    QString getPaymentDate() const;
    void setPaymentDate(const QString &payment_date);
    bool is_payment_date_Set() const;
    bool is_payment_date_Valid() const;

    QString getPayrollCalendarId() const;
    void setPayrollCalendarId(const QString &payroll_calendar_id);
    bool is_payroll_calendar_id_Set() const;
    bool is_payroll_calendar_id_Valid() const;

    QString getPayslipMessage() const;
    void setPayslipMessage(const QString &payslip_message);
    bool is_payslip_message_Set() const;
    bool is_payslip_message_Valid() const;

    QList<OAIPayslipSummary> getPayslips() const;
    void setPayslips(const QList<OAIPayslipSummary> &payslips);
    bool is_payslips_Set() const;
    bool is_payslips_Valid() const;

    double getReimbursement() const;
    void setReimbursement(const double &reimbursement);
    bool is_reimbursement_Set() const;
    bool is_reimbursement_Valid() const;

    double getSuper() const;
    void setSuper(const double &super);
    bool is_super_Set() const;
    bool is_super_Valid() const;

    double getTax() const;
    void setTax(const double &tax);
    bool is_tax_Set() const;
    bool is_tax_Valid() const;

    QString getUpdatedDateUtc() const;
    void setUpdatedDateUtc(const QString &updated_date_utc);
    bool is_updated_date_utc_Set() const;
    bool is_updated_date_utc_Valid() const;

    QList<OAIValidationError> getValidationErrors() const;
    void setValidationErrors(const QList<OAIValidationError> &validation_errors);
    bool is_validation_errors_Set() const;
    bool is_validation_errors_Valid() const;

    double getWages() const;
    void setWages(const double &wages);
    bool is_wages_Set() const;
    bool is_wages_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_deductions;
    bool m_deductions_isSet;
    bool m_deductions_isValid;

    double m_net_pay;
    bool m_net_pay_isSet;
    bool m_net_pay_isValid;

    QString m_pay_run_id;
    bool m_pay_run_id_isSet;
    bool m_pay_run_id_isValid;

    QString m_pay_run_period_end_date;
    bool m_pay_run_period_end_date_isSet;
    bool m_pay_run_period_end_date_isValid;

    QString m_pay_run_period_start_date;
    bool m_pay_run_period_start_date_isSet;
    bool m_pay_run_period_start_date_isValid;

    OAIPayRunStatus m_pay_run_status;
    bool m_pay_run_status_isSet;
    bool m_pay_run_status_isValid;

    QString m_payment_date;
    bool m_payment_date_isSet;
    bool m_payment_date_isValid;

    QString m_payroll_calendar_id;
    bool m_payroll_calendar_id_isSet;
    bool m_payroll_calendar_id_isValid;

    QString m_payslip_message;
    bool m_payslip_message_isSet;
    bool m_payslip_message_isValid;

    QList<OAIPayslipSummary> m_payslips;
    bool m_payslips_isSet;
    bool m_payslips_isValid;

    double m_reimbursement;
    bool m_reimbursement_isSet;
    bool m_reimbursement_isValid;

    double m_super;
    bool m_super_isSet;
    bool m_super_isValid;

    double m_tax;
    bool m_tax_isSet;
    bool m_tax_isValid;

    QString m_updated_date_utc;
    bool m_updated_date_utc_isSet;
    bool m_updated_date_utc_isValid;

    QList<OAIValidationError> m_validation_errors;
    bool m_validation_errors_isSet;
    bool m_validation_errors_isValid;

    double m_wages;
    bool m_wages_isSet;
    bool m_wages_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPayRun)

#endif // OAIPayRun_H
