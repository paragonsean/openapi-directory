/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaxDeclaration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaxDeclaration::OAITaxDeclaration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaxDeclaration::OAITaxDeclaration() {
    this->initializeModel();
}

OAITaxDeclaration::~OAITaxDeclaration() {}

void OAITaxDeclaration::initializeModel() {

    m_approved_withholding_variation_percentage_isSet = false;
    m_approved_withholding_variation_percentage_isValid = false;

    m_australian_resident_for_tax_purposes_isSet = false;
    m_australian_resident_for_tax_purposes_isValid = false;

    m_eligible_to_receive_leave_loading_isSet = false;
    m_eligible_to_receive_leave_loading_isValid = false;

    m_employee_id_isSet = false;
    m_employee_id_isValid = false;

    m_employment_basis_isSet = false;
    m_employment_basis_isValid = false;

    m_has_help_debt_isSet = false;
    m_has_help_debt_isValid = false;

    m_has_sfss_debt_isSet = false;
    m_has_sfss_debt_isValid = false;

    m_has_student_startup_loan_isSet = false;
    m_has_student_startup_loan_isValid = false;

    m_has_trade_support_loan_debt_isSet = false;
    m_has_trade_support_loan_debt_isValid = false;

    m_residency_status_isSet = false;
    m_residency_status_isValid = false;

    m_tfn_exemption_type_isSet = false;
    m_tfn_exemption_type_isValid = false;

    m_tax_file_number_isSet = false;
    m_tax_file_number_isValid = false;

    m_tax_free_threshold_claimed_isSet = false;
    m_tax_free_threshold_claimed_isValid = false;

    m_tax_offset_estimated_amount_isSet = false;
    m_tax_offset_estimated_amount_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_upward_variation_tax_withholding_amount_isSet = false;
    m_upward_variation_tax_withholding_amount_isValid = false;
}

void OAITaxDeclaration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaxDeclaration::fromJsonObject(QJsonObject json) {

    m_approved_withholding_variation_percentage_isValid = ::OpenAPI::fromJsonValue(m_approved_withholding_variation_percentage, json[QString("ApprovedWithholdingVariationPercentage")]);
    m_approved_withholding_variation_percentage_isSet = !json[QString("ApprovedWithholdingVariationPercentage")].isNull() && m_approved_withholding_variation_percentage_isValid;

    m_australian_resident_for_tax_purposes_isValid = ::OpenAPI::fromJsonValue(m_australian_resident_for_tax_purposes, json[QString("AustralianResidentForTaxPurposes")]);
    m_australian_resident_for_tax_purposes_isSet = !json[QString("AustralianResidentForTaxPurposes")].isNull() && m_australian_resident_for_tax_purposes_isValid;

    m_eligible_to_receive_leave_loading_isValid = ::OpenAPI::fromJsonValue(m_eligible_to_receive_leave_loading, json[QString("EligibleToReceiveLeaveLoading")]);
    m_eligible_to_receive_leave_loading_isSet = !json[QString("EligibleToReceiveLeaveLoading")].isNull() && m_eligible_to_receive_leave_loading_isValid;

    m_employee_id_isValid = ::OpenAPI::fromJsonValue(m_employee_id, json[QString("EmployeeID")]);
    m_employee_id_isSet = !json[QString("EmployeeID")].isNull() && m_employee_id_isValid;

    m_employment_basis_isValid = ::OpenAPI::fromJsonValue(m_employment_basis, json[QString("EmploymentBasis")]);
    m_employment_basis_isSet = !json[QString("EmploymentBasis")].isNull() && m_employment_basis_isValid;

    m_has_help_debt_isValid = ::OpenAPI::fromJsonValue(m_has_help_debt, json[QString("HasHELPDebt")]);
    m_has_help_debt_isSet = !json[QString("HasHELPDebt")].isNull() && m_has_help_debt_isValid;

    m_has_sfss_debt_isValid = ::OpenAPI::fromJsonValue(m_has_sfss_debt, json[QString("HasSFSSDebt")]);
    m_has_sfss_debt_isSet = !json[QString("HasSFSSDebt")].isNull() && m_has_sfss_debt_isValid;

    m_has_student_startup_loan_isValid = ::OpenAPI::fromJsonValue(m_has_student_startup_loan, json[QString("HasStudentStartupLoan")]);
    m_has_student_startup_loan_isSet = !json[QString("HasStudentStartupLoan")].isNull() && m_has_student_startup_loan_isValid;

    m_has_trade_support_loan_debt_isValid = ::OpenAPI::fromJsonValue(m_has_trade_support_loan_debt, json[QString("HasTradeSupportLoanDebt")]);
    m_has_trade_support_loan_debt_isSet = !json[QString("HasTradeSupportLoanDebt")].isNull() && m_has_trade_support_loan_debt_isValid;

    m_residency_status_isValid = ::OpenAPI::fromJsonValue(m_residency_status, json[QString("ResidencyStatus")]);
    m_residency_status_isSet = !json[QString("ResidencyStatus")].isNull() && m_residency_status_isValid;

    m_tfn_exemption_type_isValid = ::OpenAPI::fromJsonValue(m_tfn_exemption_type, json[QString("TFNExemptionType")]);
    m_tfn_exemption_type_isSet = !json[QString("TFNExemptionType")].isNull() && m_tfn_exemption_type_isValid;

    m_tax_file_number_isValid = ::OpenAPI::fromJsonValue(m_tax_file_number, json[QString("TaxFileNumber")]);
    m_tax_file_number_isSet = !json[QString("TaxFileNumber")].isNull() && m_tax_file_number_isValid;

    m_tax_free_threshold_claimed_isValid = ::OpenAPI::fromJsonValue(m_tax_free_threshold_claimed, json[QString("TaxFreeThresholdClaimed")]);
    m_tax_free_threshold_claimed_isSet = !json[QString("TaxFreeThresholdClaimed")].isNull() && m_tax_free_threshold_claimed_isValid;

    m_tax_offset_estimated_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_offset_estimated_amount, json[QString("TaxOffsetEstimatedAmount")]);
    m_tax_offset_estimated_amount_isSet = !json[QString("TaxOffsetEstimatedAmount")].isNull() && m_tax_offset_estimated_amount_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_upward_variation_tax_withholding_amount_isValid = ::OpenAPI::fromJsonValue(m_upward_variation_tax_withholding_amount, json[QString("UpwardVariationTaxWithholdingAmount")]);
    m_upward_variation_tax_withholding_amount_isSet = !json[QString("UpwardVariationTaxWithholdingAmount")].isNull() && m_upward_variation_tax_withholding_amount_isValid;
}

QString OAITaxDeclaration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaxDeclaration::asJsonObject() const {
    QJsonObject obj;
    if (m_approved_withholding_variation_percentage_isSet) {
        obj.insert(QString("ApprovedWithholdingVariationPercentage"), ::OpenAPI::toJsonValue(m_approved_withholding_variation_percentage));
    }
    if (m_australian_resident_for_tax_purposes_isSet) {
        obj.insert(QString("AustralianResidentForTaxPurposes"), ::OpenAPI::toJsonValue(m_australian_resident_for_tax_purposes));
    }
    if (m_eligible_to_receive_leave_loading_isSet) {
        obj.insert(QString("EligibleToReceiveLeaveLoading"), ::OpenAPI::toJsonValue(m_eligible_to_receive_leave_loading));
    }
    if (m_employee_id_isSet) {
        obj.insert(QString("EmployeeID"), ::OpenAPI::toJsonValue(m_employee_id));
    }
    if (m_employment_basis.isSet()) {
        obj.insert(QString("EmploymentBasis"), ::OpenAPI::toJsonValue(m_employment_basis));
    }
    if (m_has_help_debt_isSet) {
        obj.insert(QString("HasHELPDebt"), ::OpenAPI::toJsonValue(m_has_help_debt));
    }
    if (m_has_sfss_debt_isSet) {
        obj.insert(QString("HasSFSSDebt"), ::OpenAPI::toJsonValue(m_has_sfss_debt));
    }
    if (m_has_student_startup_loan_isSet) {
        obj.insert(QString("HasStudentStartupLoan"), ::OpenAPI::toJsonValue(m_has_student_startup_loan));
    }
    if (m_has_trade_support_loan_debt_isSet) {
        obj.insert(QString("HasTradeSupportLoanDebt"), ::OpenAPI::toJsonValue(m_has_trade_support_loan_debt));
    }
    if (m_residency_status.isSet()) {
        obj.insert(QString("ResidencyStatus"), ::OpenAPI::toJsonValue(m_residency_status));
    }
    if (m_tfn_exemption_type.isSet()) {
        obj.insert(QString("TFNExemptionType"), ::OpenAPI::toJsonValue(m_tfn_exemption_type));
    }
    if (m_tax_file_number_isSet) {
        obj.insert(QString("TaxFileNumber"), ::OpenAPI::toJsonValue(m_tax_file_number));
    }
    if (m_tax_free_threshold_claimed_isSet) {
        obj.insert(QString("TaxFreeThresholdClaimed"), ::OpenAPI::toJsonValue(m_tax_free_threshold_claimed));
    }
    if (m_tax_offset_estimated_amount_isSet) {
        obj.insert(QString("TaxOffsetEstimatedAmount"), ::OpenAPI::toJsonValue(m_tax_offset_estimated_amount));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_upward_variation_tax_withholding_amount_isSet) {
        obj.insert(QString("UpwardVariationTaxWithholdingAmount"), ::OpenAPI::toJsonValue(m_upward_variation_tax_withholding_amount));
    }
    return obj;
}

double OAITaxDeclaration::getApprovedWithholdingVariationPercentage() const {
    return m_approved_withholding_variation_percentage;
}
void OAITaxDeclaration::setApprovedWithholdingVariationPercentage(const double &approved_withholding_variation_percentage) {
    m_approved_withholding_variation_percentage = approved_withholding_variation_percentage;
    m_approved_withholding_variation_percentage_isSet = true;
}

bool OAITaxDeclaration::is_approved_withholding_variation_percentage_Set() const{
    return m_approved_withholding_variation_percentage_isSet;
}

bool OAITaxDeclaration::is_approved_withholding_variation_percentage_Valid() const{
    return m_approved_withholding_variation_percentage_isValid;
}

bool OAITaxDeclaration::isAustralianResidentForTaxPurposes() const {
    return m_australian_resident_for_tax_purposes;
}
void OAITaxDeclaration::setAustralianResidentForTaxPurposes(const bool &australian_resident_for_tax_purposes) {
    m_australian_resident_for_tax_purposes = australian_resident_for_tax_purposes;
    m_australian_resident_for_tax_purposes_isSet = true;
}

bool OAITaxDeclaration::is_australian_resident_for_tax_purposes_Set() const{
    return m_australian_resident_for_tax_purposes_isSet;
}

bool OAITaxDeclaration::is_australian_resident_for_tax_purposes_Valid() const{
    return m_australian_resident_for_tax_purposes_isValid;
}

bool OAITaxDeclaration::isEligibleToReceiveLeaveLoading() const {
    return m_eligible_to_receive_leave_loading;
}
void OAITaxDeclaration::setEligibleToReceiveLeaveLoading(const bool &eligible_to_receive_leave_loading) {
    m_eligible_to_receive_leave_loading = eligible_to_receive_leave_loading;
    m_eligible_to_receive_leave_loading_isSet = true;
}

bool OAITaxDeclaration::is_eligible_to_receive_leave_loading_Set() const{
    return m_eligible_to_receive_leave_loading_isSet;
}

bool OAITaxDeclaration::is_eligible_to_receive_leave_loading_Valid() const{
    return m_eligible_to_receive_leave_loading_isValid;
}

QString OAITaxDeclaration::getEmployeeId() const {
    return m_employee_id;
}
void OAITaxDeclaration::setEmployeeId(const QString &employee_id) {
    m_employee_id = employee_id;
    m_employee_id_isSet = true;
}

bool OAITaxDeclaration::is_employee_id_Set() const{
    return m_employee_id_isSet;
}

bool OAITaxDeclaration::is_employee_id_Valid() const{
    return m_employee_id_isValid;
}

OAIEmploymentBasis OAITaxDeclaration::getEmploymentBasis() const {
    return m_employment_basis;
}
void OAITaxDeclaration::setEmploymentBasis(const OAIEmploymentBasis &employment_basis) {
    m_employment_basis = employment_basis;
    m_employment_basis_isSet = true;
}

bool OAITaxDeclaration::is_employment_basis_Set() const{
    return m_employment_basis_isSet;
}

bool OAITaxDeclaration::is_employment_basis_Valid() const{
    return m_employment_basis_isValid;
}

bool OAITaxDeclaration::isHasHelpDebt() const {
    return m_has_help_debt;
}
void OAITaxDeclaration::setHasHelpDebt(const bool &has_help_debt) {
    m_has_help_debt = has_help_debt;
    m_has_help_debt_isSet = true;
}

bool OAITaxDeclaration::is_has_help_debt_Set() const{
    return m_has_help_debt_isSet;
}

bool OAITaxDeclaration::is_has_help_debt_Valid() const{
    return m_has_help_debt_isValid;
}

bool OAITaxDeclaration::isHasSfssDebt() const {
    return m_has_sfss_debt;
}
void OAITaxDeclaration::setHasSfssDebt(const bool &has_sfss_debt) {
    m_has_sfss_debt = has_sfss_debt;
    m_has_sfss_debt_isSet = true;
}

bool OAITaxDeclaration::is_has_sfss_debt_Set() const{
    return m_has_sfss_debt_isSet;
}

bool OAITaxDeclaration::is_has_sfss_debt_Valid() const{
    return m_has_sfss_debt_isValid;
}

bool OAITaxDeclaration::isHasStudentStartupLoan() const {
    return m_has_student_startup_loan;
}
void OAITaxDeclaration::setHasStudentStartupLoan(const bool &has_student_startup_loan) {
    m_has_student_startup_loan = has_student_startup_loan;
    m_has_student_startup_loan_isSet = true;
}

bool OAITaxDeclaration::is_has_student_startup_loan_Set() const{
    return m_has_student_startup_loan_isSet;
}

bool OAITaxDeclaration::is_has_student_startup_loan_Valid() const{
    return m_has_student_startup_loan_isValid;
}

bool OAITaxDeclaration::isHasTradeSupportLoanDebt() const {
    return m_has_trade_support_loan_debt;
}
void OAITaxDeclaration::setHasTradeSupportLoanDebt(const bool &has_trade_support_loan_debt) {
    m_has_trade_support_loan_debt = has_trade_support_loan_debt;
    m_has_trade_support_loan_debt_isSet = true;
}

bool OAITaxDeclaration::is_has_trade_support_loan_debt_Set() const{
    return m_has_trade_support_loan_debt_isSet;
}

bool OAITaxDeclaration::is_has_trade_support_loan_debt_Valid() const{
    return m_has_trade_support_loan_debt_isValid;
}

OAIResidencyStatus OAITaxDeclaration::getResidencyStatus() const {
    return m_residency_status;
}
void OAITaxDeclaration::setResidencyStatus(const OAIResidencyStatus &residency_status) {
    m_residency_status = residency_status;
    m_residency_status_isSet = true;
}

bool OAITaxDeclaration::is_residency_status_Set() const{
    return m_residency_status_isSet;
}

bool OAITaxDeclaration::is_residency_status_Valid() const{
    return m_residency_status_isValid;
}

OAITFNExemptionType OAITaxDeclaration::getTfnExemptionType() const {
    return m_tfn_exemption_type;
}
void OAITaxDeclaration::setTfnExemptionType(const OAITFNExemptionType &tfn_exemption_type) {
    m_tfn_exemption_type = tfn_exemption_type;
    m_tfn_exemption_type_isSet = true;
}

bool OAITaxDeclaration::is_tfn_exemption_type_Set() const{
    return m_tfn_exemption_type_isSet;
}

bool OAITaxDeclaration::is_tfn_exemption_type_Valid() const{
    return m_tfn_exemption_type_isValid;
}

QString OAITaxDeclaration::getTaxFileNumber() const {
    return m_tax_file_number;
}
void OAITaxDeclaration::setTaxFileNumber(const QString &tax_file_number) {
    m_tax_file_number = tax_file_number;
    m_tax_file_number_isSet = true;
}

bool OAITaxDeclaration::is_tax_file_number_Set() const{
    return m_tax_file_number_isSet;
}

bool OAITaxDeclaration::is_tax_file_number_Valid() const{
    return m_tax_file_number_isValid;
}

bool OAITaxDeclaration::isTaxFreeThresholdClaimed() const {
    return m_tax_free_threshold_claimed;
}
void OAITaxDeclaration::setTaxFreeThresholdClaimed(const bool &tax_free_threshold_claimed) {
    m_tax_free_threshold_claimed = tax_free_threshold_claimed;
    m_tax_free_threshold_claimed_isSet = true;
}

bool OAITaxDeclaration::is_tax_free_threshold_claimed_Set() const{
    return m_tax_free_threshold_claimed_isSet;
}

bool OAITaxDeclaration::is_tax_free_threshold_claimed_Valid() const{
    return m_tax_free_threshold_claimed_isValid;
}

double OAITaxDeclaration::getTaxOffsetEstimatedAmount() const {
    return m_tax_offset_estimated_amount;
}
void OAITaxDeclaration::setTaxOffsetEstimatedAmount(const double &tax_offset_estimated_amount) {
    m_tax_offset_estimated_amount = tax_offset_estimated_amount;
    m_tax_offset_estimated_amount_isSet = true;
}

bool OAITaxDeclaration::is_tax_offset_estimated_amount_Set() const{
    return m_tax_offset_estimated_amount_isSet;
}

bool OAITaxDeclaration::is_tax_offset_estimated_amount_Valid() const{
    return m_tax_offset_estimated_amount_isValid;
}

QString OAITaxDeclaration::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAITaxDeclaration::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAITaxDeclaration::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAITaxDeclaration::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

double OAITaxDeclaration::getUpwardVariationTaxWithholdingAmount() const {
    return m_upward_variation_tax_withholding_amount;
}
void OAITaxDeclaration::setUpwardVariationTaxWithholdingAmount(const double &upward_variation_tax_withholding_amount) {
    m_upward_variation_tax_withholding_amount = upward_variation_tax_withholding_amount;
    m_upward_variation_tax_withholding_amount_isSet = true;
}

bool OAITaxDeclaration::is_upward_variation_tax_withholding_amount_Set() const{
    return m_upward_variation_tax_withholding_amount_isSet;
}

bool OAITaxDeclaration::is_upward_variation_tax_withholding_amount_Valid() const{
    return m_upward_variation_tax_withholding_amount_isValid;
}

bool OAITaxDeclaration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approved_withholding_variation_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_australian_resident_for_tax_purposes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eligible_to_receive_leave_loading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employment_basis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_help_debt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_sfss_debt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_student_startup_loan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_trade_support_loan_debt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_residency_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tfn_exemption_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_file_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_free_threshold_claimed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_offset_estimated_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upward_variation_tax_withholding_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaxDeclaration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
