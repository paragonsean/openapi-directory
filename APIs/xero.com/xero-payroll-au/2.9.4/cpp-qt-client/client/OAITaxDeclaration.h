/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITaxDeclaration.h
 *
 * 
 */

#ifndef OAITaxDeclaration_H
#define OAITaxDeclaration_H

#include <QJsonObject>

#include "OAIEmploymentBasis.h"
#include "OAIResidencyStatus.h"
#include "OAITFNExemptionType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITaxDeclaration : public OAIObject {
public:
    OAITaxDeclaration();
    OAITaxDeclaration(QString json);
    ~OAITaxDeclaration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getApprovedWithholdingVariationPercentage() const;
    void setApprovedWithholdingVariationPercentage(const double &approved_withholding_variation_percentage);
    bool is_approved_withholding_variation_percentage_Set() const;
    bool is_approved_withholding_variation_percentage_Valid() const;

    bool isAustralianResidentForTaxPurposes() const;
    void setAustralianResidentForTaxPurposes(const bool &australian_resident_for_tax_purposes);
    bool is_australian_resident_for_tax_purposes_Set() const;
    bool is_australian_resident_for_tax_purposes_Valid() const;

    bool isEligibleToReceiveLeaveLoading() const;
    void setEligibleToReceiveLeaveLoading(const bool &eligible_to_receive_leave_loading);
    bool is_eligible_to_receive_leave_loading_Set() const;
    bool is_eligible_to_receive_leave_loading_Valid() const;

    QString getEmployeeId() const;
    void setEmployeeId(const QString &employee_id);
    bool is_employee_id_Set() const;
    bool is_employee_id_Valid() const;

    OAIEmploymentBasis getEmploymentBasis() const;
    void setEmploymentBasis(const OAIEmploymentBasis &employment_basis);
    bool is_employment_basis_Set() const;
    bool is_employment_basis_Valid() const;

    bool isHasHelpDebt() const;
    void setHasHelpDebt(const bool &has_help_debt);
    bool is_has_help_debt_Set() const;
    bool is_has_help_debt_Valid() const;

    bool isHasSfssDebt() const;
    void setHasSfssDebt(const bool &has_sfss_debt);
    bool is_has_sfss_debt_Set() const;
    bool is_has_sfss_debt_Valid() const;

    bool isHasStudentStartupLoan() const;
    void setHasStudentStartupLoan(const bool &has_student_startup_loan);
    bool is_has_student_startup_loan_Set() const;
    bool is_has_student_startup_loan_Valid() const;

    bool isHasTradeSupportLoanDebt() const;
    void setHasTradeSupportLoanDebt(const bool &has_trade_support_loan_debt);
    bool is_has_trade_support_loan_debt_Set() const;
    bool is_has_trade_support_loan_debt_Valid() const;

    OAIResidencyStatus getResidencyStatus() const;
    void setResidencyStatus(const OAIResidencyStatus &residency_status);
    bool is_residency_status_Set() const;
    bool is_residency_status_Valid() const;

    OAITFNExemptionType getTfnExemptionType() const;
    void setTfnExemptionType(const OAITFNExemptionType &tfn_exemption_type);
    bool is_tfn_exemption_type_Set() const;
    bool is_tfn_exemption_type_Valid() const;

    QString getTaxFileNumber() const;
    void setTaxFileNumber(const QString &tax_file_number);
    bool is_tax_file_number_Set() const;
    bool is_tax_file_number_Valid() const;

    bool isTaxFreeThresholdClaimed() const;
    void setTaxFreeThresholdClaimed(const bool &tax_free_threshold_claimed);
    bool is_tax_free_threshold_claimed_Set() const;
    bool is_tax_free_threshold_claimed_Valid() const;

    double getTaxOffsetEstimatedAmount() const;
    void setTaxOffsetEstimatedAmount(const double &tax_offset_estimated_amount);
    bool is_tax_offset_estimated_amount_Set() const;
    bool is_tax_offset_estimated_amount_Valid() const;

    QString getUpdatedDateUtc() const;
    void setUpdatedDateUtc(const QString &updated_date_utc);
    bool is_updated_date_utc_Set() const;
    bool is_updated_date_utc_Valid() const;

    double getUpwardVariationTaxWithholdingAmount() const;
    void setUpwardVariationTaxWithholdingAmount(const double &upward_variation_tax_withholding_amount);
    bool is_upward_variation_tax_withholding_amount_Set() const;
    bool is_upward_variation_tax_withholding_amount_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_approved_withholding_variation_percentage;
    bool m_approved_withholding_variation_percentage_isSet;
    bool m_approved_withholding_variation_percentage_isValid;

    bool m_australian_resident_for_tax_purposes;
    bool m_australian_resident_for_tax_purposes_isSet;
    bool m_australian_resident_for_tax_purposes_isValid;

    bool m_eligible_to_receive_leave_loading;
    bool m_eligible_to_receive_leave_loading_isSet;
    bool m_eligible_to_receive_leave_loading_isValid;

    QString m_employee_id;
    bool m_employee_id_isSet;
    bool m_employee_id_isValid;

    OAIEmploymentBasis m_employment_basis;
    bool m_employment_basis_isSet;
    bool m_employment_basis_isValid;

    bool m_has_help_debt;
    bool m_has_help_debt_isSet;
    bool m_has_help_debt_isValid;

    bool m_has_sfss_debt;
    bool m_has_sfss_debt_isSet;
    bool m_has_sfss_debt_isValid;

    bool m_has_student_startup_loan;
    bool m_has_student_startup_loan_isSet;
    bool m_has_student_startup_loan_isValid;

    bool m_has_trade_support_loan_debt;
    bool m_has_trade_support_loan_debt_isSet;
    bool m_has_trade_support_loan_debt_isValid;

    OAIResidencyStatus m_residency_status;
    bool m_residency_status_isSet;
    bool m_residency_status_isValid;

    OAITFNExemptionType m_tfn_exemption_type;
    bool m_tfn_exemption_type_isSet;
    bool m_tfn_exemption_type_isValid;

    QString m_tax_file_number;
    bool m_tax_file_number_isSet;
    bool m_tax_file_number_isValid;

    bool m_tax_free_threshold_claimed;
    bool m_tax_free_threshold_claimed_isSet;
    bool m_tax_free_threshold_claimed_isValid;

    double m_tax_offset_estimated_amount;
    bool m_tax_offset_estimated_amount_isSet;
    bool m_tax_offset_estimated_amount_isValid;

    QString m_updated_date_utc;
    bool m_updated_date_utc_isSet;
    bool m_updated_date_utc_isValid;

    double m_upward_variation_tax_withholding_amount;
    bool m_upward_variation_tax_withholding_amount_isSet;
    bool m_upward_variation_tax_withholding_amount_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITaxDeclaration)

#endif // OAITaxDeclaration_H
