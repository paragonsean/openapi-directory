/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuperFund.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuperFund::OAISuperFund(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuperFund::OAISuperFund() {
    this->initializeModel();
}

OAISuperFund::~OAISuperFund() {}

void OAISuperFund::initializeModel() {

    m_abn_isSet = false;
    m_abn_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_bsb_isSet = false;
    m_bsb_isValid = false;

    m_electronic_service_address_isSet = false;
    m_electronic_service_address_isValid = false;

    m_employer_number_isSet = false;
    m_employer_number_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_spin_isSet = false;
    m_spin_isValid = false;

    m_super_fund_id_isSet = false;
    m_super_fund_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_usi_isSet = false;
    m_usi_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAISuperFund::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuperFund::fromJsonObject(QJsonObject json) {

    m_abn_isValid = ::OpenAPI::fromJsonValue(m_abn, json[QString("ABN")]);
    m_abn_isSet = !json[QString("ABN")].isNull() && m_abn_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("AccountName")]);
    m_account_name_isSet = !json[QString("AccountName")].isNull() && m_account_name_isValid;

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("AccountNumber")]);
    m_account_number_isSet = !json[QString("AccountNumber")].isNull() && m_account_number_isValid;

    m_bsb_isValid = ::OpenAPI::fromJsonValue(m_bsb, json[QString("BSB")]);
    m_bsb_isSet = !json[QString("BSB")].isNull() && m_bsb_isValid;

    m_electronic_service_address_isValid = ::OpenAPI::fromJsonValue(m_electronic_service_address, json[QString("ElectronicServiceAddress")]);
    m_electronic_service_address_isSet = !json[QString("ElectronicServiceAddress")].isNull() && m_electronic_service_address_isValid;

    m_employer_number_isValid = ::OpenAPI::fromJsonValue(m_employer_number, json[QString("EmployerNumber")]);
    m_employer_number_isSet = !json[QString("EmployerNumber")].isNull() && m_employer_number_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_spin_isValid = ::OpenAPI::fromJsonValue(m_spin, json[QString("SPIN")]);
    m_spin_isSet = !json[QString("SPIN")].isNull() && m_spin_isValid;

    m_super_fund_id_isValid = ::OpenAPI::fromJsonValue(m_super_fund_id, json[QString("SuperFundID")]);
    m_super_fund_id_isSet = !json[QString("SuperFundID")].isNull() && m_super_fund_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_usi_isValid = ::OpenAPI::fromJsonValue(m_usi, json[QString("USI")]);
    m_usi_isSet = !json[QString("USI")].isNull() && m_usi_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;
}

QString OAISuperFund::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuperFund::asJsonObject() const {
    QJsonObject obj;
    if (m_abn_isSet) {
        obj.insert(QString("ABN"), ::OpenAPI::toJsonValue(m_abn));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("AccountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_account_number_isSet) {
        obj.insert(QString("AccountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_bsb_isSet) {
        obj.insert(QString("BSB"), ::OpenAPI::toJsonValue(m_bsb));
    }
    if (m_electronic_service_address_isSet) {
        obj.insert(QString("ElectronicServiceAddress"), ::OpenAPI::toJsonValue(m_electronic_service_address));
    }
    if (m_employer_number_isSet) {
        obj.insert(QString("EmployerNumber"), ::OpenAPI::toJsonValue(m_employer_number));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_spin_isSet) {
        obj.insert(QString("SPIN"), ::OpenAPI::toJsonValue(m_spin));
    }
    if (m_super_fund_id_isSet) {
        obj.insert(QString("SuperFundID"), ::OpenAPI::toJsonValue(m_super_fund_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_usi_isSet) {
        obj.insert(QString("USI"), ::OpenAPI::toJsonValue(m_usi));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

QString OAISuperFund::getAbn() const {
    return m_abn;
}
void OAISuperFund::setAbn(const QString &abn) {
    m_abn = abn;
    m_abn_isSet = true;
}

bool OAISuperFund::is_abn_Set() const{
    return m_abn_isSet;
}

bool OAISuperFund::is_abn_Valid() const{
    return m_abn_isValid;
}

QString OAISuperFund::getAccountName() const {
    return m_account_name;
}
void OAISuperFund::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAISuperFund::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAISuperFund::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAISuperFund::getAccountNumber() const {
    return m_account_number;
}
void OAISuperFund::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAISuperFund::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAISuperFund::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QString OAISuperFund::getBsb() const {
    return m_bsb;
}
void OAISuperFund::setBsb(const QString &bsb) {
    m_bsb = bsb;
    m_bsb_isSet = true;
}

bool OAISuperFund::is_bsb_Set() const{
    return m_bsb_isSet;
}

bool OAISuperFund::is_bsb_Valid() const{
    return m_bsb_isValid;
}

QString OAISuperFund::getElectronicServiceAddress() const {
    return m_electronic_service_address;
}
void OAISuperFund::setElectronicServiceAddress(const QString &electronic_service_address) {
    m_electronic_service_address = electronic_service_address;
    m_electronic_service_address_isSet = true;
}

bool OAISuperFund::is_electronic_service_address_Set() const{
    return m_electronic_service_address_isSet;
}

bool OAISuperFund::is_electronic_service_address_Valid() const{
    return m_electronic_service_address_isValid;
}

QString OAISuperFund::getEmployerNumber() const {
    return m_employer_number;
}
void OAISuperFund::setEmployerNumber(const QString &employer_number) {
    m_employer_number = employer_number;
    m_employer_number_isSet = true;
}

bool OAISuperFund::is_employer_number_Set() const{
    return m_employer_number_isSet;
}

bool OAISuperFund::is_employer_number_Valid() const{
    return m_employer_number_isValid;
}

QString OAISuperFund::getName() const {
    return m_name;
}
void OAISuperFund::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISuperFund::is_name_Set() const{
    return m_name_isSet;
}

bool OAISuperFund::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISuperFund::getSpin() const {
    return m_spin;
}
void OAISuperFund::setSpin(const QString &spin) {
    m_spin = spin;
    m_spin_isSet = true;
}

bool OAISuperFund::is_spin_Set() const{
    return m_spin_isSet;
}

bool OAISuperFund::is_spin_Valid() const{
    return m_spin_isValid;
}

QString OAISuperFund::getSuperFundId() const {
    return m_super_fund_id;
}
void OAISuperFund::setSuperFundId(const QString &super_fund_id) {
    m_super_fund_id = super_fund_id;
    m_super_fund_id_isSet = true;
}

bool OAISuperFund::is_super_fund_id_Set() const{
    return m_super_fund_id_isSet;
}

bool OAISuperFund::is_super_fund_id_Valid() const{
    return m_super_fund_id_isValid;
}

OAISuperFundType OAISuperFund::getType() const {
    return m_type;
}
void OAISuperFund::setType(const OAISuperFundType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISuperFund::is_type_Set() const{
    return m_type_isSet;
}

bool OAISuperFund::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISuperFund::getUsi() const {
    return m_usi;
}
void OAISuperFund::setUsi(const QString &usi) {
    m_usi = usi;
    m_usi_isSet = true;
}

bool OAISuperFund::is_usi_Set() const{
    return m_usi_isSet;
}

bool OAISuperFund::is_usi_Valid() const{
    return m_usi_isValid;
}

QString OAISuperFund::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAISuperFund::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAISuperFund::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAISuperFund::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

QList<OAIValidationError> OAISuperFund::getValidationErrors() const {
    return m_validation_errors;
}
void OAISuperFund::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAISuperFund::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAISuperFund::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAISuperFund::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bsb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_electronic_service_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_super_fund_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuperFund::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
