/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayslipLines.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayslipLines::OAIPayslipLines(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayslipLines::OAIPayslipLines() {
    this->initializeModel();
}

OAIPayslipLines::~OAIPayslipLines() {}

void OAIPayslipLines::initializeModel() {

    m_deduction_lines_isSet = false;
    m_deduction_lines_isValid = false;

    m_earnings_lines_isSet = false;
    m_earnings_lines_isValid = false;

    m_leave_accrual_lines_isSet = false;
    m_leave_accrual_lines_isValid = false;

    m_leave_earnings_lines_isSet = false;
    m_leave_earnings_lines_isValid = false;

    m_reimbursement_lines_isSet = false;
    m_reimbursement_lines_isValid = false;

    m_superannuation_lines_isSet = false;
    m_superannuation_lines_isValid = false;

    m_tax_lines_isSet = false;
    m_tax_lines_isValid = false;

    m_timesheet_earnings_lines_isSet = false;
    m_timesheet_earnings_lines_isValid = false;
}

void OAIPayslipLines::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayslipLines::fromJsonObject(QJsonObject json) {

    m_deduction_lines_isValid = ::OpenAPI::fromJsonValue(m_deduction_lines, json[QString("DeductionLines")]);
    m_deduction_lines_isSet = !json[QString("DeductionLines")].isNull() && m_deduction_lines_isValid;

    m_earnings_lines_isValid = ::OpenAPI::fromJsonValue(m_earnings_lines, json[QString("EarningsLines")]);
    m_earnings_lines_isSet = !json[QString("EarningsLines")].isNull() && m_earnings_lines_isValid;

    m_leave_accrual_lines_isValid = ::OpenAPI::fromJsonValue(m_leave_accrual_lines, json[QString("LeaveAccrualLines")]);
    m_leave_accrual_lines_isSet = !json[QString("LeaveAccrualLines")].isNull() && m_leave_accrual_lines_isValid;

    m_leave_earnings_lines_isValid = ::OpenAPI::fromJsonValue(m_leave_earnings_lines, json[QString("LeaveEarningsLines")]);
    m_leave_earnings_lines_isSet = !json[QString("LeaveEarningsLines")].isNull() && m_leave_earnings_lines_isValid;

    m_reimbursement_lines_isValid = ::OpenAPI::fromJsonValue(m_reimbursement_lines, json[QString("ReimbursementLines")]);
    m_reimbursement_lines_isSet = !json[QString("ReimbursementLines")].isNull() && m_reimbursement_lines_isValid;

    m_superannuation_lines_isValid = ::OpenAPI::fromJsonValue(m_superannuation_lines, json[QString("SuperannuationLines")]);
    m_superannuation_lines_isSet = !json[QString("SuperannuationLines")].isNull() && m_superannuation_lines_isValid;

    m_tax_lines_isValid = ::OpenAPI::fromJsonValue(m_tax_lines, json[QString("TaxLines")]);
    m_tax_lines_isSet = !json[QString("TaxLines")].isNull() && m_tax_lines_isValid;

    m_timesheet_earnings_lines_isValid = ::OpenAPI::fromJsonValue(m_timesheet_earnings_lines, json[QString("TimesheetEarningsLines")]);
    m_timesheet_earnings_lines_isSet = !json[QString("TimesheetEarningsLines")].isNull() && m_timesheet_earnings_lines_isValid;
}

QString OAIPayslipLines::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayslipLines::asJsonObject() const {
    QJsonObject obj;
    if (m_deduction_lines.size() > 0) {
        obj.insert(QString("DeductionLines"), ::OpenAPI::toJsonValue(m_deduction_lines));
    }
    if (m_earnings_lines.size() > 0) {
        obj.insert(QString("EarningsLines"), ::OpenAPI::toJsonValue(m_earnings_lines));
    }
    if (m_leave_accrual_lines.size() > 0) {
        obj.insert(QString("LeaveAccrualLines"), ::OpenAPI::toJsonValue(m_leave_accrual_lines));
    }
    if (m_leave_earnings_lines.size() > 0) {
        obj.insert(QString("LeaveEarningsLines"), ::OpenAPI::toJsonValue(m_leave_earnings_lines));
    }
    if (m_reimbursement_lines.size() > 0) {
        obj.insert(QString("ReimbursementLines"), ::OpenAPI::toJsonValue(m_reimbursement_lines));
    }
    if (m_superannuation_lines.size() > 0) {
        obj.insert(QString("SuperannuationLines"), ::OpenAPI::toJsonValue(m_superannuation_lines));
    }
    if (m_tax_lines.size() > 0) {
        obj.insert(QString("TaxLines"), ::OpenAPI::toJsonValue(m_tax_lines));
    }
    if (m_timesheet_earnings_lines.size() > 0) {
        obj.insert(QString("TimesheetEarningsLines"), ::OpenAPI::toJsonValue(m_timesheet_earnings_lines));
    }
    return obj;
}

QList<OAIDeductionLine> OAIPayslipLines::getDeductionLines() const {
    return m_deduction_lines;
}
void OAIPayslipLines::setDeductionLines(const QList<OAIDeductionLine> &deduction_lines) {
    m_deduction_lines = deduction_lines;
    m_deduction_lines_isSet = true;
}

bool OAIPayslipLines::is_deduction_lines_Set() const{
    return m_deduction_lines_isSet;
}

bool OAIPayslipLines::is_deduction_lines_Valid() const{
    return m_deduction_lines_isValid;
}

QList<OAIEarningsLine> OAIPayslipLines::getEarningsLines() const {
    return m_earnings_lines;
}
void OAIPayslipLines::setEarningsLines(const QList<OAIEarningsLine> &earnings_lines) {
    m_earnings_lines = earnings_lines;
    m_earnings_lines_isSet = true;
}

bool OAIPayslipLines::is_earnings_lines_Set() const{
    return m_earnings_lines_isSet;
}

bool OAIPayslipLines::is_earnings_lines_Valid() const{
    return m_earnings_lines_isValid;
}

QList<OAILeaveAccrualLine> OAIPayslipLines::getLeaveAccrualLines() const {
    return m_leave_accrual_lines;
}
void OAIPayslipLines::setLeaveAccrualLines(const QList<OAILeaveAccrualLine> &leave_accrual_lines) {
    m_leave_accrual_lines = leave_accrual_lines;
    m_leave_accrual_lines_isSet = true;
}

bool OAIPayslipLines::is_leave_accrual_lines_Set() const{
    return m_leave_accrual_lines_isSet;
}

bool OAIPayslipLines::is_leave_accrual_lines_Valid() const{
    return m_leave_accrual_lines_isValid;
}

QList<OAILeaveEarningsLine> OAIPayslipLines::getLeaveEarningsLines() const {
    return m_leave_earnings_lines;
}
void OAIPayslipLines::setLeaveEarningsLines(const QList<OAILeaveEarningsLine> &leave_earnings_lines) {
    m_leave_earnings_lines = leave_earnings_lines;
    m_leave_earnings_lines_isSet = true;
}

bool OAIPayslipLines::is_leave_earnings_lines_Set() const{
    return m_leave_earnings_lines_isSet;
}

bool OAIPayslipLines::is_leave_earnings_lines_Valid() const{
    return m_leave_earnings_lines_isValid;
}

QList<OAIReimbursementLine> OAIPayslipLines::getReimbursementLines() const {
    return m_reimbursement_lines;
}
void OAIPayslipLines::setReimbursementLines(const QList<OAIReimbursementLine> &reimbursement_lines) {
    m_reimbursement_lines = reimbursement_lines;
    m_reimbursement_lines_isSet = true;
}

bool OAIPayslipLines::is_reimbursement_lines_Set() const{
    return m_reimbursement_lines_isSet;
}

bool OAIPayslipLines::is_reimbursement_lines_Valid() const{
    return m_reimbursement_lines_isValid;
}

QList<OAISuperannuationLine> OAIPayslipLines::getSuperannuationLines() const {
    return m_superannuation_lines;
}
void OAIPayslipLines::setSuperannuationLines(const QList<OAISuperannuationLine> &superannuation_lines) {
    m_superannuation_lines = superannuation_lines;
    m_superannuation_lines_isSet = true;
}

bool OAIPayslipLines::is_superannuation_lines_Set() const{
    return m_superannuation_lines_isSet;
}

bool OAIPayslipLines::is_superannuation_lines_Valid() const{
    return m_superannuation_lines_isValid;
}

QList<OAITaxLine> OAIPayslipLines::getTaxLines() const {
    return m_tax_lines;
}
void OAIPayslipLines::setTaxLines(const QList<OAITaxLine> &tax_lines) {
    m_tax_lines = tax_lines;
    m_tax_lines_isSet = true;
}

bool OAIPayslipLines::is_tax_lines_Set() const{
    return m_tax_lines_isSet;
}

bool OAIPayslipLines::is_tax_lines_Valid() const{
    return m_tax_lines_isValid;
}

QList<OAIEarningsLine> OAIPayslipLines::getTimesheetEarningsLines() const {
    return m_timesheet_earnings_lines;
}
void OAIPayslipLines::setTimesheetEarningsLines(const QList<OAIEarningsLine> &timesheet_earnings_lines) {
    m_timesheet_earnings_lines = timesheet_earnings_lines;
    m_timesheet_earnings_lines_isSet = true;
}

bool OAIPayslipLines::is_timesheet_earnings_lines_Set() const{
    return m_timesheet_earnings_lines_isSet;
}

bool OAIPayslipLines::is_timesheet_earnings_lines_Valid() const{
    return m_timesheet_earnings_lines_isValid;
}

bool OAIPayslipLines::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deduction_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_earnings_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_leave_accrual_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_leave_earnings_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reimbursement_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_superannuation_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timesheet_earnings_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayslipLines::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
