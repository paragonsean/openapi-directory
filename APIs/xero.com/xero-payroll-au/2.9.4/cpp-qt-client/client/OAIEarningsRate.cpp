/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEarningsRate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEarningsRate::OAIEarningsRate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEarningsRate::OAIEarningsRate() {
    this->initializeModel();
}

OAIEarningsRate::~OAIEarningsRate() {}

void OAIEarningsRate::initializeModel() {

    m_account_code_isSet = false;
    m_account_code_isValid = false;

    m_accrue_leave_isSet = false;
    m_accrue_leave_isValid = false;

    m_allowance_type_isSet = false;
    m_allowance_type_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_current_record_isSet = false;
    m_current_record_isValid = false;

    m_earnings_rate_id_isSet = false;
    m_earnings_rate_id_isValid = false;

    m_earnings_type_isSet = false;
    m_earnings_type_isValid = false;

    m_employment_termination_payment_type_isSet = false;
    m_employment_termination_payment_type_isValid = false;

    m_is_exempt_from_super_isSet = false;
    m_is_exempt_from_super_isValid = false;

    m_is_exempt_from_tax_isSet = false;
    m_is_exempt_from_tax_isValid = false;

    m_is_reportable_as_w1_isSet = false;
    m_is_reportable_as_w1_isValid = false;

    m_multiplier_isSet = false;
    m_multiplier_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rate_per_unit_isSet = false;
    m_rate_per_unit_isValid = false;

    m_rate_type_isSet = false;
    m_rate_type_isValid = false;

    m_type_of_units_isSet = false;
    m_type_of_units_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;
}

void OAIEarningsRate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEarningsRate::fromJsonObject(QJsonObject json) {

    m_account_code_isValid = ::OpenAPI::fromJsonValue(m_account_code, json[QString("AccountCode")]);
    m_account_code_isSet = !json[QString("AccountCode")].isNull() && m_account_code_isValid;

    m_accrue_leave_isValid = ::OpenAPI::fromJsonValue(m_accrue_leave, json[QString("AccrueLeave")]);
    m_accrue_leave_isSet = !json[QString("AccrueLeave")].isNull() && m_accrue_leave_isValid;

    m_allowance_type_isValid = ::OpenAPI::fromJsonValue(m_allowance_type, json[QString("AllowanceType")]);
    m_allowance_type_isSet = !json[QString("AllowanceType")].isNull() && m_allowance_type_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("Amount")]);
    m_amount_isSet = !json[QString("Amount")].isNull() && m_amount_isValid;

    m_current_record_isValid = ::OpenAPI::fromJsonValue(m_current_record, json[QString("CurrentRecord")]);
    m_current_record_isSet = !json[QString("CurrentRecord")].isNull() && m_current_record_isValid;

    m_earnings_rate_id_isValid = ::OpenAPI::fromJsonValue(m_earnings_rate_id, json[QString("EarningsRateID")]);
    m_earnings_rate_id_isSet = !json[QString("EarningsRateID")].isNull() && m_earnings_rate_id_isValid;

    m_earnings_type_isValid = ::OpenAPI::fromJsonValue(m_earnings_type, json[QString("EarningsType")]);
    m_earnings_type_isSet = !json[QString("EarningsType")].isNull() && m_earnings_type_isValid;

    m_employment_termination_payment_type_isValid = ::OpenAPI::fromJsonValue(m_employment_termination_payment_type, json[QString("EmploymentTerminationPaymentType")]);
    m_employment_termination_payment_type_isSet = !json[QString("EmploymentTerminationPaymentType")].isNull() && m_employment_termination_payment_type_isValid;

    m_is_exempt_from_super_isValid = ::OpenAPI::fromJsonValue(m_is_exempt_from_super, json[QString("IsExemptFromSuper")]);
    m_is_exempt_from_super_isSet = !json[QString("IsExemptFromSuper")].isNull() && m_is_exempt_from_super_isValid;

    m_is_exempt_from_tax_isValid = ::OpenAPI::fromJsonValue(m_is_exempt_from_tax, json[QString("IsExemptFromTax")]);
    m_is_exempt_from_tax_isSet = !json[QString("IsExemptFromTax")].isNull() && m_is_exempt_from_tax_isValid;

    m_is_reportable_as_w1_isValid = ::OpenAPI::fromJsonValue(m_is_reportable_as_w1, json[QString("IsReportableAsW1")]);
    m_is_reportable_as_w1_isSet = !json[QString("IsReportableAsW1")].isNull() && m_is_reportable_as_w1_isValid;

    m_multiplier_isValid = ::OpenAPI::fromJsonValue(m_multiplier, json[QString("Multiplier")]);
    m_multiplier_isSet = !json[QString("Multiplier")].isNull() && m_multiplier_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_rate_per_unit_isValid = ::OpenAPI::fromJsonValue(m_rate_per_unit, json[QString("RatePerUnit")]);
    m_rate_per_unit_isSet = !json[QString("RatePerUnit")].isNull() && m_rate_per_unit_isValid;

    m_rate_type_isValid = ::OpenAPI::fromJsonValue(m_rate_type, json[QString("RateType")]);
    m_rate_type_isSet = !json[QString("RateType")].isNull() && m_rate_type_isValid;

    m_type_of_units_isValid = ::OpenAPI::fromJsonValue(m_type_of_units, json[QString("TypeOfUnits")]);
    m_type_of_units_isSet = !json[QString("TypeOfUnits")].isNull() && m_type_of_units_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;
}

QString OAIEarningsRate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEarningsRate::asJsonObject() const {
    QJsonObject obj;
    if (m_account_code_isSet) {
        obj.insert(QString("AccountCode"), ::OpenAPI::toJsonValue(m_account_code));
    }
    if (m_accrue_leave_isSet) {
        obj.insert(QString("AccrueLeave"), ::OpenAPI::toJsonValue(m_accrue_leave));
    }
    if (m_allowance_type.isSet()) {
        obj.insert(QString("AllowanceType"), ::OpenAPI::toJsonValue(m_allowance_type));
    }
    if (m_amount_isSet) {
        obj.insert(QString("Amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_current_record_isSet) {
        obj.insert(QString("CurrentRecord"), ::OpenAPI::toJsonValue(m_current_record));
    }
    if (m_earnings_rate_id_isSet) {
        obj.insert(QString("EarningsRateID"), ::OpenAPI::toJsonValue(m_earnings_rate_id));
    }
    if (m_earnings_type.isSet()) {
        obj.insert(QString("EarningsType"), ::OpenAPI::toJsonValue(m_earnings_type));
    }
    if (m_employment_termination_payment_type.isSet()) {
        obj.insert(QString("EmploymentTerminationPaymentType"), ::OpenAPI::toJsonValue(m_employment_termination_payment_type));
    }
    if (m_is_exempt_from_super_isSet) {
        obj.insert(QString("IsExemptFromSuper"), ::OpenAPI::toJsonValue(m_is_exempt_from_super));
    }
    if (m_is_exempt_from_tax_isSet) {
        obj.insert(QString("IsExemptFromTax"), ::OpenAPI::toJsonValue(m_is_exempt_from_tax));
    }
    if (m_is_reportable_as_w1_isSet) {
        obj.insert(QString("IsReportableAsW1"), ::OpenAPI::toJsonValue(m_is_reportable_as_w1));
    }
    if (m_multiplier_isSet) {
        obj.insert(QString("Multiplier"), ::OpenAPI::toJsonValue(m_multiplier));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rate_per_unit_isSet) {
        obj.insert(QString("RatePerUnit"), ::OpenAPI::toJsonValue(m_rate_per_unit));
    }
    if (m_rate_type.isSet()) {
        obj.insert(QString("RateType"), ::OpenAPI::toJsonValue(m_rate_type));
    }
    if (m_type_of_units_isSet) {
        obj.insert(QString("TypeOfUnits"), ::OpenAPI::toJsonValue(m_type_of_units));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    return obj;
}

QString OAIEarningsRate::getAccountCode() const {
    return m_account_code;
}
void OAIEarningsRate::setAccountCode(const QString &account_code) {
    m_account_code = account_code;
    m_account_code_isSet = true;
}

bool OAIEarningsRate::is_account_code_Set() const{
    return m_account_code_isSet;
}

bool OAIEarningsRate::is_account_code_Valid() const{
    return m_account_code_isValid;
}

bool OAIEarningsRate::isAccrueLeave() const {
    return m_accrue_leave;
}
void OAIEarningsRate::setAccrueLeave(const bool &accrue_leave) {
    m_accrue_leave = accrue_leave;
    m_accrue_leave_isSet = true;
}

bool OAIEarningsRate::is_accrue_leave_Set() const{
    return m_accrue_leave_isSet;
}

bool OAIEarningsRate::is_accrue_leave_Valid() const{
    return m_accrue_leave_isValid;
}

OAIAllowanceType OAIEarningsRate::getAllowanceType() const {
    return m_allowance_type;
}
void OAIEarningsRate::setAllowanceType(const OAIAllowanceType &allowance_type) {
    m_allowance_type = allowance_type;
    m_allowance_type_isSet = true;
}

bool OAIEarningsRate::is_allowance_type_Set() const{
    return m_allowance_type_isSet;
}

bool OAIEarningsRate::is_allowance_type_Valid() const{
    return m_allowance_type_isValid;
}

double OAIEarningsRate::getAmount() const {
    return m_amount;
}
void OAIEarningsRate::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIEarningsRate::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIEarningsRate::is_amount_Valid() const{
    return m_amount_isValid;
}

bool OAIEarningsRate::isCurrentRecord() const {
    return m_current_record;
}
void OAIEarningsRate::setCurrentRecord(const bool &current_record) {
    m_current_record = current_record;
    m_current_record_isSet = true;
}

bool OAIEarningsRate::is_current_record_Set() const{
    return m_current_record_isSet;
}

bool OAIEarningsRate::is_current_record_Valid() const{
    return m_current_record_isValid;
}

QString OAIEarningsRate::getEarningsRateId() const {
    return m_earnings_rate_id;
}
void OAIEarningsRate::setEarningsRateId(const QString &earnings_rate_id) {
    m_earnings_rate_id = earnings_rate_id;
    m_earnings_rate_id_isSet = true;
}

bool OAIEarningsRate::is_earnings_rate_id_Set() const{
    return m_earnings_rate_id_isSet;
}

bool OAIEarningsRate::is_earnings_rate_id_Valid() const{
    return m_earnings_rate_id_isValid;
}

OAIEarningsType OAIEarningsRate::getEarningsType() const {
    return m_earnings_type;
}
void OAIEarningsRate::setEarningsType(const OAIEarningsType &earnings_type) {
    m_earnings_type = earnings_type;
    m_earnings_type_isSet = true;
}

bool OAIEarningsRate::is_earnings_type_Set() const{
    return m_earnings_type_isSet;
}

bool OAIEarningsRate::is_earnings_type_Valid() const{
    return m_earnings_type_isValid;
}

OAIEmploymentTerminationPaymentType OAIEarningsRate::getEmploymentTerminationPaymentType() const {
    return m_employment_termination_payment_type;
}
void OAIEarningsRate::setEmploymentTerminationPaymentType(const OAIEmploymentTerminationPaymentType &employment_termination_payment_type) {
    m_employment_termination_payment_type = employment_termination_payment_type;
    m_employment_termination_payment_type_isSet = true;
}

bool OAIEarningsRate::is_employment_termination_payment_type_Set() const{
    return m_employment_termination_payment_type_isSet;
}

bool OAIEarningsRate::is_employment_termination_payment_type_Valid() const{
    return m_employment_termination_payment_type_isValid;
}

bool OAIEarningsRate::isIsExemptFromSuper() const {
    return m_is_exempt_from_super;
}
void OAIEarningsRate::setIsExemptFromSuper(const bool &is_exempt_from_super) {
    m_is_exempt_from_super = is_exempt_from_super;
    m_is_exempt_from_super_isSet = true;
}

bool OAIEarningsRate::is_is_exempt_from_super_Set() const{
    return m_is_exempt_from_super_isSet;
}

bool OAIEarningsRate::is_is_exempt_from_super_Valid() const{
    return m_is_exempt_from_super_isValid;
}

bool OAIEarningsRate::isIsExemptFromTax() const {
    return m_is_exempt_from_tax;
}
void OAIEarningsRate::setIsExemptFromTax(const bool &is_exempt_from_tax) {
    m_is_exempt_from_tax = is_exempt_from_tax;
    m_is_exempt_from_tax_isSet = true;
}

bool OAIEarningsRate::is_is_exempt_from_tax_Set() const{
    return m_is_exempt_from_tax_isSet;
}

bool OAIEarningsRate::is_is_exempt_from_tax_Valid() const{
    return m_is_exempt_from_tax_isValid;
}

bool OAIEarningsRate::isIsReportableAsW1() const {
    return m_is_reportable_as_w1;
}
void OAIEarningsRate::setIsReportableAsW1(const bool &is_reportable_as_w1) {
    m_is_reportable_as_w1 = is_reportable_as_w1;
    m_is_reportable_as_w1_isSet = true;
}

bool OAIEarningsRate::is_is_reportable_as_w1_Set() const{
    return m_is_reportable_as_w1_isSet;
}

bool OAIEarningsRate::is_is_reportable_as_w1_Valid() const{
    return m_is_reportable_as_w1_isValid;
}

double OAIEarningsRate::getMultiplier() const {
    return m_multiplier;
}
void OAIEarningsRate::setMultiplier(const double &multiplier) {
    m_multiplier = multiplier;
    m_multiplier_isSet = true;
}

bool OAIEarningsRate::is_multiplier_Set() const{
    return m_multiplier_isSet;
}

bool OAIEarningsRate::is_multiplier_Valid() const{
    return m_multiplier_isValid;
}

QString OAIEarningsRate::getName() const {
    return m_name;
}
void OAIEarningsRate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEarningsRate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEarningsRate::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEarningsRate::getRatePerUnit() const {
    return m_rate_per_unit;
}
void OAIEarningsRate::setRatePerUnit(const QString &rate_per_unit) {
    m_rate_per_unit = rate_per_unit;
    m_rate_per_unit_isSet = true;
}

bool OAIEarningsRate::is_rate_per_unit_Set() const{
    return m_rate_per_unit_isSet;
}

bool OAIEarningsRate::is_rate_per_unit_Valid() const{
    return m_rate_per_unit_isValid;
}

OAIRateType OAIEarningsRate::getRateType() const {
    return m_rate_type;
}
void OAIEarningsRate::setRateType(const OAIRateType &rate_type) {
    m_rate_type = rate_type;
    m_rate_type_isSet = true;
}

bool OAIEarningsRate::is_rate_type_Set() const{
    return m_rate_type_isSet;
}

bool OAIEarningsRate::is_rate_type_Valid() const{
    return m_rate_type_isValid;
}

QString OAIEarningsRate::getTypeOfUnits() const {
    return m_type_of_units;
}
void OAIEarningsRate::setTypeOfUnits(const QString &type_of_units) {
    m_type_of_units = type_of_units;
    m_type_of_units_isSet = true;
}

bool OAIEarningsRate::is_type_of_units_Set() const{
    return m_type_of_units_isSet;
}

bool OAIEarningsRate::is_type_of_units_Valid() const{
    return m_type_of_units_isValid;
}

QString OAIEarningsRate::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIEarningsRate::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIEarningsRate::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIEarningsRate::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

bool OAIEarningsRate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accrue_leave_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earnings_rate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earnings_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employment_termination_payment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_exempt_from_super_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_exempt_from_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_reportable_as_w1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_per_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEarningsRate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
