/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayRun::OAIPayRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayRun::OAIPayRun() {
    this->initializeModel();
}

OAIPayRun::~OAIPayRun() {}

void OAIPayRun::initializeModel() {

    m_deductions_isSet = false;
    m_deductions_isValid = false;

    m_net_pay_isSet = false;
    m_net_pay_isValid = false;

    m_pay_run_id_isSet = false;
    m_pay_run_id_isValid = false;

    m_pay_run_period_end_date_isSet = false;
    m_pay_run_period_end_date_isValid = false;

    m_pay_run_period_start_date_isSet = false;
    m_pay_run_period_start_date_isValid = false;

    m_pay_run_status_isSet = false;
    m_pay_run_status_isValid = false;

    m_payment_date_isSet = false;
    m_payment_date_isValid = false;

    m_payroll_calendar_id_isSet = false;
    m_payroll_calendar_id_isValid = false;

    m_payslip_message_isSet = false;
    m_payslip_message_isValid = false;

    m_payslips_isSet = false;
    m_payslips_isValid = false;

    m_reimbursement_isSet = false;
    m_reimbursement_isValid = false;

    m_super_isSet = false;
    m_super_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;

    m_wages_isSet = false;
    m_wages_isValid = false;
}

void OAIPayRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayRun::fromJsonObject(QJsonObject json) {

    m_deductions_isValid = ::OpenAPI::fromJsonValue(m_deductions, json[QString("Deductions")]);
    m_deductions_isSet = !json[QString("Deductions")].isNull() && m_deductions_isValid;

    m_net_pay_isValid = ::OpenAPI::fromJsonValue(m_net_pay, json[QString("NetPay")]);
    m_net_pay_isSet = !json[QString("NetPay")].isNull() && m_net_pay_isValid;

    m_pay_run_id_isValid = ::OpenAPI::fromJsonValue(m_pay_run_id, json[QString("PayRunID")]);
    m_pay_run_id_isSet = !json[QString("PayRunID")].isNull() && m_pay_run_id_isValid;

    m_pay_run_period_end_date_isValid = ::OpenAPI::fromJsonValue(m_pay_run_period_end_date, json[QString("PayRunPeriodEndDate")]);
    m_pay_run_period_end_date_isSet = !json[QString("PayRunPeriodEndDate")].isNull() && m_pay_run_period_end_date_isValid;

    m_pay_run_period_start_date_isValid = ::OpenAPI::fromJsonValue(m_pay_run_period_start_date, json[QString("PayRunPeriodStartDate")]);
    m_pay_run_period_start_date_isSet = !json[QString("PayRunPeriodStartDate")].isNull() && m_pay_run_period_start_date_isValid;

    m_pay_run_status_isValid = ::OpenAPI::fromJsonValue(m_pay_run_status, json[QString("PayRunStatus")]);
    m_pay_run_status_isSet = !json[QString("PayRunStatus")].isNull() && m_pay_run_status_isValid;

    m_payment_date_isValid = ::OpenAPI::fromJsonValue(m_payment_date, json[QString("PaymentDate")]);
    m_payment_date_isSet = !json[QString("PaymentDate")].isNull() && m_payment_date_isValid;

    m_payroll_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_payroll_calendar_id, json[QString("PayrollCalendarID")]);
    m_payroll_calendar_id_isSet = !json[QString("PayrollCalendarID")].isNull() && m_payroll_calendar_id_isValid;

    m_payslip_message_isValid = ::OpenAPI::fromJsonValue(m_payslip_message, json[QString("PayslipMessage")]);
    m_payslip_message_isSet = !json[QString("PayslipMessage")].isNull() && m_payslip_message_isValid;

    m_payslips_isValid = ::OpenAPI::fromJsonValue(m_payslips, json[QString("Payslips")]);
    m_payslips_isSet = !json[QString("Payslips")].isNull() && m_payslips_isValid;

    m_reimbursement_isValid = ::OpenAPI::fromJsonValue(m_reimbursement, json[QString("Reimbursement")]);
    m_reimbursement_isSet = !json[QString("Reimbursement")].isNull() && m_reimbursement_isValid;

    m_super_isValid = ::OpenAPI::fromJsonValue(m_super, json[QString("Super")]);
    m_super_isSet = !json[QString("Super")].isNull() && m_super_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("Tax")]);
    m_tax_isSet = !json[QString("Tax")].isNull() && m_tax_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;

    m_wages_isValid = ::OpenAPI::fromJsonValue(m_wages, json[QString("Wages")]);
    m_wages_isSet = !json[QString("Wages")].isNull() && m_wages_isValid;
}

QString OAIPayRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayRun::asJsonObject() const {
    QJsonObject obj;
    if (m_deductions_isSet) {
        obj.insert(QString("Deductions"), ::OpenAPI::toJsonValue(m_deductions));
    }
    if (m_net_pay_isSet) {
        obj.insert(QString("NetPay"), ::OpenAPI::toJsonValue(m_net_pay));
    }
    if (m_pay_run_id_isSet) {
        obj.insert(QString("PayRunID"), ::OpenAPI::toJsonValue(m_pay_run_id));
    }
    if (m_pay_run_period_end_date_isSet) {
        obj.insert(QString("PayRunPeriodEndDate"), ::OpenAPI::toJsonValue(m_pay_run_period_end_date));
    }
    if (m_pay_run_period_start_date_isSet) {
        obj.insert(QString("PayRunPeriodStartDate"), ::OpenAPI::toJsonValue(m_pay_run_period_start_date));
    }
    if (m_pay_run_status.isSet()) {
        obj.insert(QString("PayRunStatus"), ::OpenAPI::toJsonValue(m_pay_run_status));
    }
    if (m_payment_date_isSet) {
        obj.insert(QString("PaymentDate"), ::OpenAPI::toJsonValue(m_payment_date));
    }
    if (m_payroll_calendar_id_isSet) {
        obj.insert(QString("PayrollCalendarID"), ::OpenAPI::toJsonValue(m_payroll_calendar_id));
    }
    if (m_payslip_message_isSet) {
        obj.insert(QString("PayslipMessage"), ::OpenAPI::toJsonValue(m_payslip_message));
    }
    if (m_payslips.size() > 0) {
        obj.insert(QString("Payslips"), ::OpenAPI::toJsonValue(m_payslips));
    }
    if (m_reimbursement_isSet) {
        obj.insert(QString("Reimbursement"), ::OpenAPI::toJsonValue(m_reimbursement));
    }
    if (m_super_isSet) {
        obj.insert(QString("Super"), ::OpenAPI::toJsonValue(m_super));
    }
    if (m_tax_isSet) {
        obj.insert(QString("Tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    if (m_wages_isSet) {
        obj.insert(QString("Wages"), ::OpenAPI::toJsonValue(m_wages));
    }
    return obj;
}

double OAIPayRun::getDeductions() const {
    return m_deductions;
}
void OAIPayRun::setDeductions(const double &deductions) {
    m_deductions = deductions;
    m_deductions_isSet = true;
}

bool OAIPayRun::is_deductions_Set() const{
    return m_deductions_isSet;
}

bool OAIPayRun::is_deductions_Valid() const{
    return m_deductions_isValid;
}

double OAIPayRun::getNetPay() const {
    return m_net_pay;
}
void OAIPayRun::setNetPay(const double &net_pay) {
    m_net_pay = net_pay;
    m_net_pay_isSet = true;
}

bool OAIPayRun::is_net_pay_Set() const{
    return m_net_pay_isSet;
}

bool OAIPayRun::is_net_pay_Valid() const{
    return m_net_pay_isValid;
}

QString OAIPayRun::getPayRunId() const {
    return m_pay_run_id;
}
void OAIPayRun::setPayRunId(const QString &pay_run_id) {
    m_pay_run_id = pay_run_id;
    m_pay_run_id_isSet = true;
}

bool OAIPayRun::is_pay_run_id_Set() const{
    return m_pay_run_id_isSet;
}

bool OAIPayRun::is_pay_run_id_Valid() const{
    return m_pay_run_id_isValid;
}

QString OAIPayRun::getPayRunPeriodEndDate() const {
    return m_pay_run_period_end_date;
}
void OAIPayRun::setPayRunPeriodEndDate(const QString &pay_run_period_end_date) {
    m_pay_run_period_end_date = pay_run_period_end_date;
    m_pay_run_period_end_date_isSet = true;
}

bool OAIPayRun::is_pay_run_period_end_date_Set() const{
    return m_pay_run_period_end_date_isSet;
}

bool OAIPayRun::is_pay_run_period_end_date_Valid() const{
    return m_pay_run_period_end_date_isValid;
}

QString OAIPayRun::getPayRunPeriodStartDate() const {
    return m_pay_run_period_start_date;
}
void OAIPayRun::setPayRunPeriodStartDate(const QString &pay_run_period_start_date) {
    m_pay_run_period_start_date = pay_run_period_start_date;
    m_pay_run_period_start_date_isSet = true;
}

bool OAIPayRun::is_pay_run_period_start_date_Set() const{
    return m_pay_run_period_start_date_isSet;
}

bool OAIPayRun::is_pay_run_period_start_date_Valid() const{
    return m_pay_run_period_start_date_isValid;
}

OAIPayRunStatus OAIPayRun::getPayRunStatus() const {
    return m_pay_run_status;
}
void OAIPayRun::setPayRunStatus(const OAIPayRunStatus &pay_run_status) {
    m_pay_run_status = pay_run_status;
    m_pay_run_status_isSet = true;
}

bool OAIPayRun::is_pay_run_status_Set() const{
    return m_pay_run_status_isSet;
}

bool OAIPayRun::is_pay_run_status_Valid() const{
    return m_pay_run_status_isValid;
}

QString OAIPayRun::getPaymentDate() const {
    return m_payment_date;
}
void OAIPayRun::setPaymentDate(const QString &payment_date) {
    m_payment_date = payment_date;
    m_payment_date_isSet = true;
}

bool OAIPayRun::is_payment_date_Set() const{
    return m_payment_date_isSet;
}

bool OAIPayRun::is_payment_date_Valid() const{
    return m_payment_date_isValid;
}

QString OAIPayRun::getPayrollCalendarId() const {
    return m_payroll_calendar_id;
}
void OAIPayRun::setPayrollCalendarId(const QString &payroll_calendar_id) {
    m_payroll_calendar_id = payroll_calendar_id;
    m_payroll_calendar_id_isSet = true;
}

bool OAIPayRun::is_payroll_calendar_id_Set() const{
    return m_payroll_calendar_id_isSet;
}

bool OAIPayRun::is_payroll_calendar_id_Valid() const{
    return m_payroll_calendar_id_isValid;
}

QString OAIPayRun::getPayslipMessage() const {
    return m_payslip_message;
}
void OAIPayRun::setPayslipMessage(const QString &payslip_message) {
    m_payslip_message = payslip_message;
    m_payslip_message_isSet = true;
}

bool OAIPayRun::is_payslip_message_Set() const{
    return m_payslip_message_isSet;
}

bool OAIPayRun::is_payslip_message_Valid() const{
    return m_payslip_message_isValid;
}

QList<OAIPayslipSummary> OAIPayRun::getPayslips() const {
    return m_payslips;
}
void OAIPayRun::setPayslips(const QList<OAIPayslipSummary> &payslips) {
    m_payslips = payslips;
    m_payslips_isSet = true;
}

bool OAIPayRun::is_payslips_Set() const{
    return m_payslips_isSet;
}

bool OAIPayRun::is_payslips_Valid() const{
    return m_payslips_isValid;
}

double OAIPayRun::getReimbursement() const {
    return m_reimbursement;
}
void OAIPayRun::setReimbursement(const double &reimbursement) {
    m_reimbursement = reimbursement;
    m_reimbursement_isSet = true;
}

bool OAIPayRun::is_reimbursement_Set() const{
    return m_reimbursement_isSet;
}

bool OAIPayRun::is_reimbursement_Valid() const{
    return m_reimbursement_isValid;
}

double OAIPayRun::getSuper() const {
    return m_super;
}
void OAIPayRun::setSuper(const double &super) {
    m_super = super;
    m_super_isSet = true;
}

bool OAIPayRun::is_super_Set() const{
    return m_super_isSet;
}

bool OAIPayRun::is_super_Valid() const{
    return m_super_isValid;
}

double OAIPayRun::getTax() const {
    return m_tax;
}
void OAIPayRun::setTax(const double &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIPayRun::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIPayRun::is_tax_Valid() const{
    return m_tax_isValid;
}

QString OAIPayRun::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIPayRun::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIPayRun::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIPayRun::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

QList<OAIValidationError> OAIPayRun::getValidationErrors() const {
    return m_validation_errors;
}
void OAIPayRun::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIPayRun::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIPayRun::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

double OAIPayRun::getWages() const {
    return m_wages;
}
void OAIPayRun::setWages(const double &wages) {
    m_wages = wages;
    m_wages_isSet = true;
}

bool OAIPayRun::is_wages_Set() const{
    return m_wages_isSet;
}

bool OAIPayRun::is_wages_Valid() const{
    return m_wages_isValid;
}

bool OAIPayRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deductions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_pay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_run_period_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_run_period_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_run_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payroll_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payslip_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payslips.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reimbursement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_super_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_wages_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_payroll_calendar_id_isValid && true;
}

} // namespace OpenAPI
