/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPayrollAuApi_H
#define OAI_OAIPayrollAuApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIException.h"
#include "OAIEmployee.h"
#include "OAIEmployees.h"
#include "OAILeaveApplication.h"
#include "OAILeaveApplications.h"
#include "OAIPayItem.h"
#include "OAIPayItems.h"
#include "OAIPayRun.h"
#include "OAIPayRuns.h"
#include "OAIPayrollCalendar.h"
#include "OAIPayrollCalendars.h"
#include "OAIPayslipLines.h"
#include "OAIPayslipObject.h"
#include "OAIPayslips.h"
#include "OAISettingsObject.h"
#include "OAISuperFund.h"
#include "OAISuperFundProducts.h"
#include "OAISuperFunds.h"
#include "OAITimesheet.h"
#include "OAITimesheetObject.h"
#include "OAITimesheets.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPayrollAuApi : public QObject {
    Q_OBJECT

public:
    OAIPayrollAuApi(const int timeOut = 0);
    ~OAIPayrollAuApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_employee QList<OAIEmployee> [required]
    */
    virtual void createEmployee(const QString &xero_tenant_id, const QList<OAIEmployee> &oai_employee);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_leave_application QList<OAILeaveApplication> [required]
    */
    virtual void createLeaveApplication(const QString &xero_tenant_id, const QList<OAILeaveApplication> &oai_leave_application);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_pay_item OAIPayItem [required]
    */
    virtual void createPayItem(const QString &xero_tenant_id, const OAIPayItem &oai_pay_item);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_pay_run QList<OAIPayRun> [required]
    */
    virtual void createPayRun(const QString &xero_tenant_id, const QList<OAIPayRun> &oai_pay_run);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_payroll_calendar QList<OAIPayrollCalendar> [required]
    */
    virtual void createPayrollCalendar(const QString &xero_tenant_id, const QList<OAIPayrollCalendar> &oai_payroll_calendar);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_super_fund QList<OAISuperFund> [required]
    */
    virtual void createSuperfund(const QString &xero_tenant_id, const QList<OAISuperFund> &oai_super_fund);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_timesheet QList<OAITimesheet> [required]
    */
    virtual void createTimesheet(const QString &xero_tenant_id, const QList<OAITimesheet> &oai_timesheet);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  employee_id QString [required]
    */
    virtual void getEmployee(const QString &xero_tenant_id, const QString &employee_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getEmployees(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  leave_application_id QString [required]
    */
    virtual void getLeaveApplication(const QString &xero_tenant_id, const QString &leave_application_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getLeaveApplications(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getPayItems(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  pay_run_id QString [required]
    */
    virtual void getPayRun(const QString &xero_tenant_id, const QString &pay_run_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getPayRuns(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  payroll_calendar_id QString [required]
    */
    virtual void getPayrollCalendar(const QString &xero_tenant_id, const QString &payroll_calendar_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getPayrollCalendars(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  payslip_id QString [required]
    */
    virtual void getPayslip(const QString &xero_tenant_id, const QString &payslip_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    */
    virtual void getSettings(const QString &xero_tenant_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  super_fund_id QString [required]
    */
    virtual void getSuperfund(const QString &xero_tenant_id, const QString &super_fund_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  abn QString [optional]
    * @param[in]  usi QString [optional]
    */
    virtual void getSuperfundProducts(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QString> &abn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usi = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getSuperfunds(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  timesheet_id QString [required]
    */
    virtual void getTimesheet(const QString &xero_tenant_id, const QString &timesheet_id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  where QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getTimesheets(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  oai_employee QList<OAIEmployee> [optional]
    */
    virtual void updateEmployee(const QString &xero_tenant_id, const QString &employee_id, const ::OpenAPI::OptionalParam<QList<OAIEmployee>> &oai_employee = ::OpenAPI::OptionalParam<QList<OAIEmployee>>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  leave_application_id QString [required]
    * @param[in]  oai_leave_application QList<OAILeaveApplication> [required]
    */
    virtual void updateLeaveApplication(const QString &xero_tenant_id, const QString &leave_application_id, const QList<OAILeaveApplication> &oai_leave_application);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  pay_run_id QString [required]
    * @param[in]  oai_pay_run QList<OAIPayRun> [optional]
    */
    virtual void updatePayRun(const QString &xero_tenant_id, const QString &pay_run_id, const ::OpenAPI::OptionalParam<QList<OAIPayRun>> &oai_pay_run = ::OpenAPI::OptionalParam<QList<OAIPayRun>>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  payslip_id QString [required]
    * @param[in]  oai_payslip_lines QList<OAIPayslipLines> [optional]
    */
    virtual void updatePayslip(const QString &xero_tenant_id, const QString &payslip_id, const ::OpenAPI::OptionalParam<QList<OAIPayslipLines>> &oai_payslip_lines = ::OpenAPI::OptionalParam<QList<OAIPayslipLines>>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  super_fund_id QString [required]
    * @param[in]  oai_super_fund QList<OAISuperFund> [optional]
    */
    virtual void updateSuperfund(const QString &xero_tenant_id, const QString &super_fund_id, const ::OpenAPI::OptionalParam<QList<OAISuperFund>> &oai_super_fund = ::OpenAPI::OptionalParam<QList<OAISuperFund>>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  timesheet_id QString [required]
    * @param[in]  oai_timesheet QList<OAITimesheet> [optional]
    */
    virtual void updateTimesheet(const QString &xero_tenant_id, const QString &timesheet_id, const ::OpenAPI::OptionalParam<QList<OAITimesheet>> &oai_timesheet = ::OpenAPI::OptionalParam<QList<OAITimesheet>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createEmployeeCallback(OAIHttpRequestWorker *worker);
    void createLeaveApplicationCallback(OAIHttpRequestWorker *worker);
    void createPayItemCallback(OAIHttpRequestWorker *worker);
    void createPayRunCallback(OAIHttpRequestWorker *worker);
    void createPayrollCalendarCallback(OAIHttpRequestWorker *worker);
    void createSuperfundCallback(OAIHttpRequestWorker *worker);
    void createTimesheetCallback(OAIHttpRequestWorker *worker);
    void getEmployeeCallback(OAIHttpRequestWorker *worker);
    void getEmployeesCallback(OAIHttpRequestWorker *worker);
    void getLeaveApplicationCallback(OAIHttpRequestWorker *worker);
    void getLeaveApplicationsCallback(OAIHttpRequestWorker *worker);
    void getPayItemsCallback(OAIHttpRequestWorker *worker);
    void getPayRunCallback(OAIHttpRequestWorker *worker);
    void getPayRunsCallback(OAIHttpRequestWorker *worker);
    void getPayrollCalendarCallback(OAIHttpRequestWorker *worker);
    void getPayrollCalendarsCallback(OAIHttpRequestWorker *worker);
    void getPayslipCallback(OAIHttpRequestWorker *worker);
    void getSettingsCallback(OAIHttpRequestWorker *worker);
    void getSuperfundCallback(OAIHttpRequestWorker *worker);
    void getSuperfundProductsCallback(OAIHttpRequestWorker *worker);
    void getSuperfundsCallback(OAIHttpRequestWorker *worker);
    void getTimesheetCallback(OAIHttpRequestWorker *worker);
    void getTimesheetsCallback(OAIHttpRequestWorker *worker);
    void updateEmployeeCallback(OAIHttpRequestWorker *worker);
    void updateLeaveApplicationCallback(OAIHttpRequestWorker *worker);
    void updatePayRunCallback(OAIHttpRequestWorker *worker);
    void updatePayslipCallback(OAIHttpRequestWorker *worker);
    void updateSuperfundCallback(OAIHttpRequestWorker *worker);
    void updateTimesheetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createEmployeeSignal(OAIEmployees summary);
    void createLeaveApplicationSignal(OAILeaveApplications summary);
    void createPayItemSignal(OAIPayItems summary);
    void createPayRunSignal(OAIPayRuns summary);
    void createPayrollCalendarSignal(OAIPayrollCalendars summary);
    void createSuperfundSignal(OAISuperFunds summary);
    void createTimesheetSignal(OAITimesheets summary);
    void getEmployeeSignal(OAIEmployees summary);
    void getEmployeesSignal(OAIEmployees summary);
    void getLeaveApplicationSignal(OAILeaveApplications summary);
    void getLeaveApplicationsSignal(OAILeaveApplications summary);
    void getPayItemsSignal(OAIPayItems summary);
    void getPayRunSignal(OAIPayRuns summary);
    void getPayRunsSignal(OAIPayRuns summary);
    void getPayrollCalendarSignal(OAIPayrollCalendars summary);
    void getPayrollCalendarsSignal(OAIPayrollCalendars summary);
    void getPayslipSignal(OAIPayslipObject summary);
    void getSettingsSignal(OAISettingsObject summary);
    void getSuperfundSignal(OAISuperFunds summary);
    void getSuperfundProductsSignal(OAISuperFundProducts summary);
    void getSuperfundsSignal(OAISuperFunds summary);
    void getTimesheetSignal(OAITimesheetObject summary);
    void getTimesheetsSignal(OAITimesheets summary);
    void updateEmployeeSignal(OAIEmployees summary);
    void updateLeaveApplicationSignal(OAILeaveApplications summary);
    void updatePayRunSignal(OAIPayRuns summary);
    void updatePayslipSignal(OAIPayslips summary);
    void updateSuperfundSignal(OAISuperFunds summary);
    void updateTimesheetSignal(OAITimesheets summary);


    void createEmployeeSignalFull(OAIHttpRequestWorker *worker, OAIEmployees summary);
    void createLeaveApplicationSignalFull(OAIHttpRequestWorker *worker, OAILeaveApplications summary);
    void createPayItemSignalFull(OAIHttpRequestWorker *worker, OAIPayItems summary);
    void createPayRunSignalFull(OAIHttpRequestWorker *worker, OAIPayRuns summary);
    void createPayrollCalendarSignalFull(OAIHttpRequestWorker *worker, OAIPayrollCalendars summary);
    void createSuperfundSignalFull(OAIHttpRequestWorker *worker, OAISuperFunds summary);
    void createTimesheetSignalFull(OAIHttpRequestWorker *worker, OAITimesheets summary);
    void getEmployeeSignalFull(OAIHttpRequestWorker *worker, OAIEmployees summary);
    void getEmployeesSignalFull(OAIHttpRequestWorker *worker, OAIEmployees summary);
    void getLeaveApplicationSignalFull(OAIHttpRequestWorker *worker, OAILeaveApplications summary);
    void getLeaveApplicationsSignalFull(OAIHttpRequestWorker *worker, OAILeaveApplications summary);
    void getPayItemsSignalFull(OAIHttpRequestWorker *worker, OAIPayItems summary);
    void getPayRunSignalFull(OAIHttpRequestWorker *worker, OAIPayRuns summary);
    void getPayRunsSignalFull(OAIHttpRequestWorker *worker, OAIPayRuns summary);
    void getPayrollCalendarSignalFull(OAIHttpRequestWorker *worker, OAIPayrollCalendars summary);
    void getPayrollCalendarsSignalFull(OAIHttpRequestWorker *worker, OAIPayrollCalendars summary);
    void getPayslipSignalFull(OAIHttpRequestWorker *worker, OAIPayslipObject summary);
    void getSettingsSignalFull(OAIHttpRequestWorker *worker, OAISettingsObject summary);
    void getSuperfundSignalFull(OAIHttpRequestWorker *worker, OAISuperFunds summary);
    void getSuperfundProductsSignalFull(OAIHttpRequestWorker *worker, OAISuperFundProducts summary);
    void getSuperfundsSignalFull(OAIHttpRequestWorker *worker, OAISuperFunds summary);
    void getTimesheetSignalFull(OAIHttpRequestWorker *worker, OAITimesheetObject summary);
    void getTimesheetsSignalFull(OAIHttpRequestWorker *worker, OAITimesheets summary);
    void updateEmployeeSignalFull(OAIHttpRequestWorker *worker, OAIEmployees summary);
    void updateLeaveApplicationSignalFull(OAIHttpRequestWorker *worker, OAILeaveApplications summary);
    void updatePayRunSignalFull(OAIHttpRequestWorker *worker, OAIPayRuns summary);
    void updatePayslipSignalFull(OAIHttpRequestWorker *worker, OAIPayslips summary);
    void updateSuperfundSignalFull(OAIHttpRequestWorker *worker, OAISuperFunds summary);
    void updateTimesheetSignalFull(OAIHttpRequestWorker *worker, OAITimesheets summary);

    Q_DECL_DEPRECATED_X("Use createEmployeeSignalError() instead")
    void createEmployeeSignalE(OAIEmployees summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createEmployeeSignalError(OAIEmployees summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLeaveApplicationSignalError() instead")
    void createLeaveApplicationSignalE(OAILeaveApplications summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLeaveApplicationSignalError(OAILeaveApplications summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPayItemSignalError() instead")
    void createPayItemSignalE(OAIPayItems summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPayItemSignalError(OAIPayItems summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPayRunSignalError() instead")
    void createPayRunSignalE(OAIPayRuns summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPayRunSignalError(OAIPayRuns summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPayrollCalendarSignalError() instead")
    void createPayrollCalendarSignalE(OAIPayrollCalendars summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPayrollCalendarSignalError(OAIPayrollCalendars summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSuperfundSignalError() instead")
    void createSuperfundSignalE(OAISuperFunds summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSuperfundSignalError(OAISuperFunds summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTimesheetSignalError() instead")
    void createTimesheetSignalE(OAITimesheets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTimesheetSignalError(OAITimesheets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeSignalError() instead")
    void getEmployeeSignalE(OAIEmployees summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeSignalError(OAIEmployees summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesSignalError() instead")
    void getEmployeesSignalE(OAIEmployees summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesSignalError(OAIEmployees summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLeaveApplicationSignalError() instead")
    void getLeaveApplicationSignalE(OAILeaveApplications summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLeaveApplicationSignalError(OAILeaveApplications summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLeaveApplicationsSignalError() instead")
    void getLeaveApplicationsSignalE(OAILeaveApplications summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLeaveApplicationsSignalError(OAILeaveApplications summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayItemsSignalError() instead")
    void getPayItemsSignalE(OAIPayItems summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayItemsSignalError(OAIPayItems summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunSignalError() instead")
    void getPayRunSignalE(OAIPayRuns summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunSignalError(OAIPayRuns summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunsSignalError() instead")
    void getPayRunsSignalE(OAIPayRuns summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunsSignalError(OAIPayRuns summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayrollCalendarSignalError() instead")
    void getPayrollCalendarSignalE(OAIPayrollCalendars summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayrollCalendarSignalError(OAIPayrollCalendars summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayrollCalendarsSignalError() instead")
    void getPayrollCalendarsSignalE(OAIPayrollCalendars summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayrollCalendarsSignalError(OAIPayrollCalendars summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayslipSignalError() instead")
    void getPayslipSignalE(OAIPayslipObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayslipSignalError(OAIPayslipObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSettingsSignalError() instead")
    void getSettingsSignalE(OAISettingsObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSettingsSignalError(OAISettingsObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuperfundSignalError() instead")
    void getSuperfundSignalE(OAISuperFunds summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuperfundSignalError(OAISuperFunds summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuperfundProductsSignalError() instead")
    void getSuperfundProductsSignalE(OAISuperFundProducts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuperfundProductsSignalError(OAISuperFundProducts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuperfundsSignalError() instead")
    void getSuperfundsSignalE(OAISuperFunds summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuperfundsSignalError(OAISuperFunds summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimesheetSignalError() instead")
    void getTimesheetSignalE(OAITimesheetObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimesheetSignalError(OAITimesheetObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimesheetsSignalError() instead")
    void getTimesheetsSignalE(OAITimesheets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimesheetsSignalError(OAITimesheets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEmployeeSignalError() instead")
    void updateEmployeeSignalE(OAIEmployees summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEmployeeSignalError(OAIEmployees summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLeaveApplicationSignalError() instead")
    void updateLeaveApplicationSignalE(OAILeaveApplications summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLeaveApplicationSignalError(OAILeaveApplications summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePayRunSignalError() instead")
    void updatePayRunSignalE(OAIPayRuns summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePayRunSignalError(OAIPayRuns summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePayslipSignalError() instead")
    void updatePayslipSignalE(OAIPayslips summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePayslipSignalError(OAIPayslips summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSuperfundSignalError() instead")
    void updateSuperfundSignalE(OAISuperFunds summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSuperfundSignalError(OAISuperFunds summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTimesheetSignalError() instead")
    void updateTimesheetSignalE(OAITimesheets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTimesheetSignalError(OAITimesheets summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createEmployeeSignalErrorFull() instead")
    void createEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLeaveApplicationSignalErrorFull() instead")
    void createLeaveApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLeaveApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPayItemSignalErrorFull() instead")
    void createPayItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPayItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPayRunSignalErrorFull() instead")
    void createPayRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPayRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPayrollCalendarSignalErrorFull() instead")
    void createPayrollCalendarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPayrollCalendarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSuperfundSignalErrorFull() instead")
    void createSuperfundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSuperfundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTimesheetSignalErrorFull() instead")
    void createTimesheetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTimesheetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeeSignalErrorFull() instead")
    void getEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesSignalErrorFull() instead")
    void getEmployeesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLeaveApplicationSignalErrorFull() instead")
    void getLeaveApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLeaveApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLeaveApplicationsSignalErrorFull() instead")
    void getLeaveApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLeaveApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayItemsSignalErrorFull() instead")
    void getPayItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunSignalErrorFull() instead")
    void getPayRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunsSignalErrorFull() instead")
    void getPayRunsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayrollCalendarSignalErrorFull() instead")
    void getPayrollCalendarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayrollCalendarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayrollCalendarsSignalErrorFull() instead")
    void getPayrollCalendarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayrollCalendarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayslipSignalErrorFull() instead")
    void getPayslipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayslipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSettingsSignalErrorFull() instead")
    void getSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuperfundSignalErrorFull() instead")
    void getSuperfundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuperfundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuperfundProductsSignalErrorFull() instead")
    void getSuperfundProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuperfundProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuperfundsSignalErrorFull() instead")
    void getSuperfundsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuperfundsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimesheetSignalErrorFull() instead")
    void getTimesheetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimesheetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimesheetsSignalErrorFull() instead")
    void getTimesheetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimesheetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEmployeeSignalErrorFull() instead")
    void updateEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLeaveApplicationSignalErrorFull() instead")
    void updateLeaveApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLeaveApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePayRunSignalErrorFull() instead")
    void updatePayRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePayRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePayslipSignalErrorFull() instead")
    void updatePayslipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePayslipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSuperfundSignalErrorFull() instead")
    void updateSuperfundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSuperfundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTimesheetSignalErrorFull() instead")
    void updateTimesheetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTimesheetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
