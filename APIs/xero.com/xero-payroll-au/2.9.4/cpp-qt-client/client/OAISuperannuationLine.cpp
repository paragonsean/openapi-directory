/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuperannuationLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuperannuationLine::OAISuperannuationLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuperannuationLine::OAISuperannuationLine() {
    this->initializeModel();
}

OAISuperannuationLine::~OAISuperannuationLine() {}

void OAISuperannuationLine::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_calculation_type_isSet = false;
    m_calculation_type_isValid = false;

    m_contribution_type_isSet = false;
    m_contribution_type_isValid = false;

    m_expense_account_code_isSet = false;
    m_expense_account_code_isValid = false;

    m_liability_account_code_isSet = false;
    m_liability_account_code_isValid = false;

    m_minimum_monthly_earnings_isSet = false;
    m_minimum_monthly_earnings_isValid = false;

    m_payment_date_for_this_period_isSet = false;
    m_payment_date_for_this_period_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;

    m_super_membership_id_isSet = false;
    m_super_membership_id_isValid = false;
}

void OAISuperannuationLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuperannuationLine::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("Amount")]);
    m_amount_isSet = !json[QString("Amount")].isNull() && m_amount_isValid;

    m_calculation_type_isValid = ::OpenAPI::fromJsonValue(m_calculation_type, json[QString("CalculationType")]);
    m_calculation_type_isSet = !json[QString("CalculationType")].isNull() && m_calculation_type_isValid;

    m_contribution_type_isValid = ::OpenAPI::fromJsonValue(m_contribution_type, json[QString("ContributionType")]);
    m_contribution_type_isSet = !json[QString("ContributionType")].isNull() && m_contribution_type_isValid;

    m_expense_account_code_isValid = ::OpenAPI::fromJsonValue(m_expense_account_code, json[QString("ExpenseAccountCode")]);
    m_expense_account_code_isSet = !json[QString("ExpenseAccountCode")].isNull() && m_expense_account_code_isValid;

    m_liability_account_code_isValid = ::OpenAPI::fromJsonValue(m_liability_account_code, json[QString("LiabilityAccountCode")]);
    m_liability_account_code_isSet = !json[QString("LiabilityAccountCode")].isNull() && m_liability_account_code_isValid;

    m_minimum_monthly_earnings_isValid = ::OpenAPI::fromJsonValue(m_minimum_monthly_earnings, json[QString("MinimumMonthlyEarnings")]);
    m_minimum_monthly_earnings_isSet = !json[QString("MinimumMonthlyEarnings")].isNull() && m_minimum_monthly_earnings_isValid;

    m_payment_date_for_this_period_isValid = ::OpenAPI::fromJsonValue(m_payment_date_for_this_period, json[QString("PaymentDateForThisPeriod")]);
    m_payment_date_for_this_period_isSet = !json[QString("PaymentDateForThisPeriod")].isNull() && m_payment_date_for_this_period_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("Percentage")]);
    m_percentage_isSet = !json[QString("Percentage")].isNull() && m_percentage_isValid;

    m_super_membership_id_isValid = ::OpenAPI::fromJsonValue(m_super_membership_id, json[QString("SuperMembershipID")]);
    m_super_membership_id_isSet = !json[QString("SuperMembershipID")].isNull() && m_super_membership_id_isValid;
}

QString OAISuperannuationLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuperannuationLine::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("Amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_calculation_type.isSet()) {
        obj.insert(QString("CalculationType"), ::OpenAPI::toJsonValue(m_calculation_type));
    }
    if (m_contribution_type.isSet()) {
        obj.insert(QString("ContributionType"), ::OpenAPI::toJsonValue(m_contribution_type));
    }
    if (m_expense_account_code_isSet) {
        obj.insert(QString("ExpenseAccountCode"), ::OpenAPI::toJsonValue(m_expense_account_code));
    }
    if (m_liability_account_code_isSet) {
        obj.insert(QString("LiabilityAccountCode"), ::OpenAPI::toJsonValue(m_liability_account_code));
    }
    if (m_minimum_monthly_earnings_isSet) {
        obj.insert(QString("MinimumMonthlyEarnings"), ::OpenAPI::toJsonValue(m_minimum_monthly_earnings));
    }
    if (m_payment_date_for_this_period_isSet) {
        obj.insert(QString("PaymentDateForThisPeriod"), ::OpenAPI::toJsonValue(m_payment_date_for_this_period));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("Percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    if (m_super_membership_id_isSet) {
        obj.insert(QString("SuperMembershipID"), ::OpenAPI::toJsonValue(m_super_membership_id));
    }
    return obj;
}

double OAISuperannuationLine::getAmount() const {
    return m_amount;
}
void OAISuperannuationLine::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAISuperannuationLine::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAISuperannuationLine::is_amount_Valid() const{
    return m_amount_isValid;
}

OAISuperannuationCalculationType OAISuperannuationLine::getCalculationType() const {
    return m_calculation_type;
}
void OAISuperannuationLine::setCalculationType(const OAISuperannuationCalculationType &calculation_type) {
    m_calculation_type = calculation_type;
    m_calculation_type_isSet = true;
}

bool OAISuperannuationLine::is_calculation_type_Set() const{
    return m_calculation_type_isSet;
}

bool OAISuperannuationLine::is_calculation_type_Valid() const{
    return m_calculation_type_isValid;
}

OAISuperannuationContributionType OAISuperannuationLine::getContributionType() const {
    return m_contribution_type;
}
void OAISuperannuationLine::setContributionType(const OAISuperannuationContributionType &contribution_type) {
    m_contribution_type = contribution_type;
    m_contribution_type_isSet = true;
}

bool OAISuperannuationLine::is_contribution_type_Set() const{
    return m_contribution_type_isSet;
}

bool OAISuperannuationLine::is_contribution_type_Valid() const{
    return m_contribution_type_isValid;
}

QString OAISuperannuationLine::getExpenseAccountCode() const {
    return m_expense_account_code;
}
void OAISuperannuationLine::setExpenseAccountCode(const QString &expense_account_code) {
    m_expense_account_code = expense_account_code;
    m_expense_account_code_isSet = true;
}

bool OAISuperannuationLine::is_expense_account_code_Set() const{
    return m_expense_account_code_isSet;
}

bool OAISuperannuationLine::is_expense_account_code_Valid() const{
    return m_expense_account_code_isValid;
}

QString OAISuperannuationLine::getLiabilityAccountCode() const {
    return m_liability_account_code;
}
void OAISuperannuationLine::setLiabilityAccountCode(const QString &liability_account_code) {
    m_liability_account_code = liability_account_code;
    m_liability_account_code_isSet = true;
}

bool OAISuperannuationLine::is_liability_account_code_Set() const{
    return m_liability_account_code_isSet;
}

bool OAISuperannuationLine::is_liability_account_code_Valid() const{
    return m_liability_account_code_isValid;
}

double OAISuperannuationLine::getMinimumMonthlyEarnings() const {
    return m_minimum_monthly_earnings;
}
void OAISuperannuationLine::setMinimumMonthlyEarnings(const double &minimum_monthly_earnings) {
    m_minimum_monthly_earnings = minimum_monthly_earnings;
    m_minimum_monthly_earnings_isSet = true;
}

bool OAISuperannuationLine::is_minimum_monthly_earnings_Set() const{
    return m_minimum_monthly_earnings_isSet;
}

bool OAISuperannuationLine::is_minimum_monthly_earnings_Valid() const{
    return m_minimum_monthly_earnings_isValid;
}

QString OAISuperannuationLine::getPaymentDateForThisPeriod() const {
    return m_payment_date_for_this_period;
}
void OAISuperannuationLine::setPaymentDateForThisPeriod(const QString &payment_date_for_this_period) {
    m_payment_date_for_this_period = payment_date_for_this_period;
    m_payment_date_for_this_period_isSet = true;
}

bool OAISuperannuationLine::is_payment_date_for_this_period_Set() const{
    return m_payment_date_for_this_period_isSet;
}

bool OAISuperannuationLine::is_payment_date_for_this_period_Valid() const{
    return m_payment_date_for_this_period_isValid;
}

double OAISuperannuationLine::getPercentage() const {
    return m_percentage;
}
void OAISuperannuationLine::setPercentage(const double &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAISuperannuationLine::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAISuperannuationLine::is_percentage_Valid() const{
    return m_percentage_isValid;
}

QString OAISuperannuationLine::getSuperMembershipId() const {
    return m_super_membership_id;
}
void OAISuperannuationLine::setSuperMembershipId(const QString &super_membership_id) {
    m_super_membership_id = super_membership_id;
    m_super_membership_id_isSet = true;
}

bool OAISuperannuationLine::is_super_membership_id_Set() const{
    return m_super_membership_id_isSet;
}

bool OAISuperannuationLine::is_super_membership_id_Valid() const{
    return m_super_membership_id_isValid;
}

bool OAISuperannuationLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contribution_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liability_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_monthly_earnings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_date_for_this_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_super_membership_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuperannuationLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
