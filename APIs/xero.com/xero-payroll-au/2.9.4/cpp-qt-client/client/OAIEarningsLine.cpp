/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEarningsLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEarningsLine::OAIEarningsLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEarningsLine::OAIEarningsLine() {
    this->initializeModel();
}

OAIEarningsLine::~OAIEarningsLine() {}

void OAIEarningsLine::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_annual_salary_isSet = false;
    m_annual_salary_isValid = false;

    m_calculation_type_isSet = false;
    m_calculation_type_isValid = false;

    m_earnings_rate_id_isSet = false;
    m_earnings_rate_id_isValid = false;

    m_fixed_amount_isSet = false;
    m_fixed_amount_isValid = false;

    m_normal_number_of_units_isSet = false;
    m_normal_number_of_units_isValid = false;

    m_number_of_units_isSet = false;
    m_number_of_units_isValid = false;

    m_number_of_units_per_week_isSet = false;
    m_number_of_units_per_week_isValid = false;

    m_rate_per_unit_isSet = false;
    m_rate_per_unit_isValid = false;
}

void OAIEarningsLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEarningsLine::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("Amount")]);
    m_amount_isSet = !json[QString("Amount")].isNull() && m_amount_isValid;

    m_annual_salary_isValid = ::OpenAPI::fromJsonValue(m_annual_salary, json[QString("AnnualSalary")]);
    m_annual_salary_isSet = !json[QString("AnnualSalary")].isNull() && m_annual_salary_isValid;

    m_calculation_type_isValid = ::OpenAPI::fromJsonValue(m_calculation_type, json[QString("CalculationType")]);
    m_calculation_type_isSet = !json[QString("CalculationType")].isNull() && m_calculation_type_isValid;

    m_earnings_rate_id_isValid = ::OpenAPI::fromJsonValue(m_earnings_rate_id, json[QString("EarningsRateID")]);
    m_earnings_rate_id_isSet = !json[QString("EarningsRateID")].isNull() && m_earnings_rate_id_isValid;

    m_fixed_amount_isValid = ::OpenAPI::fromJsonValue(m_fixed_amount, json[QString("FixedAmount")]);
    m_fixed_amount_isSet = !json[QString("FixedAmount")].isNull() && m_fixed_amount_isValid;

    m_normal_number_of_units_isValid = ::OpenAPI::fromJsonValue(m_normal_number_of_units, json[QString("NormalNumberOfUnits")]);
    m_normal_number_of_units_isSet = !json[QString("NormalNumberOfUnits")].isNull() && m_normal_number_of_units_isValid;

    m_number_of_units_isValid = ::OpenAPI::fromJsonValue(m_number_of_units, json[QString("NumberOfUnits")]);
    m_number_of_units_isSet = !json[QString("NumberOfUnits")].isNull() && m_number_of_units_isValid;

    m_number_of_units_per_week_isValid = ::OpenAPI::fromJsonValue(m_number_of_units_per_week, json[QString("NumberOfUnitsPerWeek")]);
    m_number_of_units_per_week_isSet = !json[QString("NumberOfUnitsPerWeek")].isNull() && m_number_of_units_per_week_isValid;

    m_rate_per_unit_isValid = ::OpenAPI::fromJsonValue(m_rate_per_unit, json[QString("RatePerUnit")]);
    m_rate_per_unit_isSet = !json[QString("RatePerUnit")].isNull() && m_rate_per_unit_isValid;
}

QString OAIEarningsLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEarningsLine::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("Amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_annual_salary_isSet) {
        obj.insert(QString("AnnualSalary"), ::OpenAPI::toJsonValue(m_annual_salary));
    }
    if (m_calculation_type.isSet()) {
        obj.insert(QString("CalculationType"), ::OpenAPI::toJsonValue(m_calculation_type));
    }
    if (m_earnings_rate_id_isSet) {
        obj.insert(QString("EarningsRateID"), ::OpenAPI::toJsonValue(m_earnings_rate_id));
    }
    if (m_fixed_amount_isSet) {
        obj.insert(QString("FixedAmount"), ::OpenAPI::toJsonValue(m_fixed_amount));
    }
    if (m_normal_number_of_units_isSet) {
        obj.insert(QString("NormalNumberOfUnits"), ::OpenAPI::toJsonValue(m_normal_number_of_units));
    }
    if (m_number_of_units_isSet) {
        obj.insert(QString("NumberOfUnits"), ::OpenAPI::toJsonValue(m_number_of_units));
    }
    if (m_number_of_units_per_week_isSet) {
        obj.insert(QString("NumberOfUnitsPerWeek"), ::OpenAPI::toJsonValue(m_number_of_units_per_week));
    }
    if (m_rate_per_unit_isSet) {
        obj.insert(QString("RatePerUnit"), ::OpenAPI::toJsonValue(m_rate_per_unit));
    }
    return obj;
}

double OAIEarningsLine::getAmount() const {
    return m_amount;
}
void OAIEarningsLine::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIEarningsLine::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIEarningsLine::is_amount_Valid() const{
    return m_amount_isValid;
}

double OAIEarningsLine::getAnnualSalary() const {
    return m_annual_salary;
}
void OAIEarningsLine::setAnnualSalary(const double &annual_salary) {
    m_annual_salary = annual_salary;
    m_annual_salary_isSet = true;
}

bool OAIEarningsLine::is_annual_salary_Set() const{
    return m_annual_salary_isSet;
}

bool OAIEarningsLine::is_annual_salary_Valid() const{
    return m_annual_salary_isValid;
}

OAIEarningsRateCalculationType OAIEarningsLine::getCalculationType() const {
    return m_calculation_type;
}
void OAIEarningsLine::setCalculationType(const OAIEarningsRateCalculationType &calculation_type) {
    m_calculation_type = calculation_type;
    m_calculation_type_isSet = true;
}

bool OAIEarningsLine::is_calculation_type_Set() const{
    return m_calculation_type_isSet;
}

bool OAIEarningsLine::is_calculation_type_Valid() const{
    return m_calculation_type_isValid;
}

QString OAIEarningsLine::getEarningsRateId() const {
    return m_earnings_rate_id;
}
void OAIEarningsLine::setEarningsRateId(const QString &earnings_rate_id) {
    m_earnings_rate_id = earnings_rate_id;
    m_earnings_rate_id_isSet = true;
}

bool OAIEarningsLine::is_earnings_rate_id_Set() const{
    return m_earnings_rate_id_isSet;
}

bool OAIEarningsLine::is_earnings_rate_id_Valid() const{
    return m_earnings_rate_id_isValid;
}

double OAIEarningsLine::getFixedAmount() const {
    return m_fixed_amount;
}
void OAIEarningsLine::setFixedAmount(const double &fixed_amount) {
    m_fixed_amount = fixed_amount;
    m_fixed_amount_isSet = true;
}

bool OAIEarningsLine::is_fixed_amount_Set() const{
    return m_fixed_amount_isSet;
}

bool OAIEarningsLine::is_fixed_amount_Valid() const{
    return m_fixed_amount_isValid;
}

double OAIEarningsLine::getNormalNumberOfUnits() const {
    return m_normal_number_of_units;
}
void OAIEarningsLine::setNormalNumberOfUnits(const double &normal_number_of_units) {
    m_normal_number_of_units = normal_number_of_units;
    m_normal_number_of_units_isSet = true;
}

bool OAIEarningsLine::is_normal_number_of_units_Set() const{
    return m_normal_number_of_units_isSet;
}

bool OAIEarningsLine::is_normal_number_of_units_Valid() const{
    return m_normal_number_of_units_isValid;
}

double OAIEarningsLine::getNumberOfUnits() const {
    return m_number_of_units;
}
void OAIEarningsLine::setNumberOfUnits(const double &number_of_units) {
    m_number_of_units = number_of_units;
    m_number_of_units_isSet = true;
}

bool OAIEarningsLine::is_number_of_units_Set() const{
    return m_number_of_units_isSet;
}

bool OAIEarningsLine::is_number_of_units_Valid() const{
    return m_number_of_units_isValid;
}

double OAIEarningsLine::getNumberOfUnitsPerWeek() const {
    return m_number_of_units_per_week;
}
void OAIEarningsLine::setNumberOfUnitsPerWeek(const double &number_of_units_per_week) {
    m_number_of_units_per_week = number_of_units_per_week;
    m_number_of_units_per_week_isSet = true;
}

bool OAIEarningsLine::is_number_of_units_per_week_Set() const{
    return m_number_of_units_per_week_isSet;
}

bool OAIEarningsLine::is_number_of_units_per_week_Valid() const{
    return m_number_of_units_per_week_isValid;
}

double OAIEarningsLine::getRatePerUnit() const {
    return m_rate_per_unit;
}
void OAIEarningsLine::setRatePerUnit(const double &rate_per_unit) {
    m_rate_per_unit = rate_per_unit;
    m_rate_per_unit_isSet = true;
}

bool OAIEarningsLine::is_rate_per_unit_Set() const{
    return m_rate_per_unit_isSet;
}

bool OAIEarningsLine::is_rate_per_unit_Valid() const{
    return m_rate_per_unit_isValid;
}

bool OAIEarningsLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annual_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_earnings_rate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_normal_number_of_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_units_per_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_per_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEarningsLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_earnings_rate_id_isValid && true;
}

} // namespace OpenAPI
