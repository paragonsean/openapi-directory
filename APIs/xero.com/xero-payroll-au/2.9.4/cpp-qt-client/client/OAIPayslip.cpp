/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayslip.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayslip::OAIPayslip(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayslip::OAIPayslip() {
    this->initializeModel();
}

OAIPayslip::~OAIPayslip() {}

void OAIPayslip::initializeModel() {

    m_deduction_lines_isSet = false;
    m_deduction_lines_isValid = false;

    m_deductions_isSet = false;
    m_deductions_isValid = false;

    m_earnings_lines_isSet = false;
    m_earnings_lines_isValid = false;

    m_employee_id_isSet = false;
    m_employee_id_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_leave_accrual_lines_isSet = false;
    m_leave_accrual_lines_isValid = false;

    m_leave_earnings_lines_isSet = false;
    m_leave_earnings_lines_isValid = false;

    m_net_pay_isSet = false;
    m_net_pay_isValid = false;

    m_payslip_id_isSet = false;
    m_payslip_id_isValid = false;

    m_reimbursement_lines_isSet = false;
    m_reimbursement_lines_isValid = false;

    m_reimbursements_isSet = false;
    m_reimbursements_isValid = false;

    m_super_isSet = false;
    m_super_isValid = false;

    m_superannuation_lines_isSet = false;
    m_superannuation_lines_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_tax_lines_isSet = false;
    m_tax_lines_isValid = false;

    m_timesheet_earnings_lines_isSet = false;
    m_timesheet_earnings_lines_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_wages_isSet = false;
    m_wages_isValid = false;
}

void OAIPayslip::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayslip::fromJsonObject(QJsonObject json) {

    m_deduction_lines_isValid = ::OpenAPI::fromJsonValue(m_deduction_lines, json[QString("DeductionLines")]);
    m_deduction_lines_isSet = !json[QString("DeductionLines")].isNull() && m_deduction_lines_isValid;

    m_deductions_isValid = ::OpenAPI::fromJsonValue(m_deductions, json[QString("Deductions")]);
    m_deductions_isSet = !json[QString("Deductions")].isNull() && m_deductions_isValid;

    m_earnings_lines_isValid = ::OpenAPI::fromJsonValue(m_earnings_lines, json[QString("EarningsLines")]);
    m_earnings_lines_isSet = !json[QString("EarningsLines")].isNull() && m_earnings_lines_isValid;

    m_employee_id_isValid = ::OpenAPI::fromJsonValue(m_employee_id, json[QString("EmployeeID")]);
    m_employee_id_isSet = !json[QString("EmployeeID")].isNull() && m_employee_id_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("FirstName")]);
    m_first_name_isSet = !json[QString("FirstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("LastName")]);
    m_last_name_isSet = !json[QString("LastName")].isNull() && m_last_name_isValid;

    m_leave_accrual_lines_isValid = ::OpenAPI::fromJsonValue(m_leave_accrual_lines, json[QString("LeaveAccrualLines")]);
    m_leave_accrual_lines_isSet = !json[QString("LeaveAccrualLines")].isNull() && m_leave_accrual_lines_isValid;

    m_leave_earnings_lines_isValid = ::OpenAPI::fromJsonValue(m_leave_earnings_lines, json[QString("LeaveEarningsLines")]);
    m_leave_earnings_lines_isSet = !json[QString("LeaveEarningsLines")].isNull() && m_leave_earnings_lines_isValid;

    m_net_pay_isValid = ::OpenAPI::fromJsonValue(m_net_pay, json[QString("NetPay")]);
    m_net_pay_isSet = !json[QString("NetPay")].isNull() && m_net_pay_isValid;

    m_payslip_id_isValid = ::OpenAPI::fromJsonValue(m_payslip_id, json[QString("PayslipID")]);
    m_payslip_id_isSet = !json[QString("PayslipID")].isNull() && m_payslip_id_isValid;

    m_reimbursement_lines_isValid = ::OpenAPI::fromJsonValue(m_reimbursement_lines, json[QString("ReimbursementLines")]);
    m_reimbursement_lines_isSet = !json[QString("ReimbursementLines")].isNull() && m_reimbursement_lines_isValid;

    m_reimbursements_isValid = ::OpenAPI::fromJsonValue(m_reimbursements, json[QString("Reimbursements")]);
    m_reimbursements_isSet = !json[QString("Reimbursements")].isNull() && m_reimbursements_isValid;

    m_super_isValid = ::OpenAPI::fromJsonValue(m_super, json[QString("Super")]);
    m_super_isSet = !json[QString("Super")].isNull() && m_super_isValid;

    m_superannuation_lines_isValid = ::OpenAPI::fromJsonValue(m_superannuation_lines, json[QString("SuperannuationLines")]);
    m_superannuation_lines_isSet = !json[QString("SuperannuationLines")].isNull() && m_superannuation_lines_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("Tax")]);
    m_tax_isSet = !json[QString("Tax")].isNull() && m_tax_isValid;

    m_tax_lines_isValid = ::OpenAPI::fromJsonValue(m_tax_lines, json[QString("TaxLines")]);
    m_tax_lines_isSet = !json[QString("TaxLines")].isNull() && m_tax_lines_isValid;

    m_timesheet_earnings_lines_isValid = ::OpenAPI::fromJsonValue(m_timesheet_earnings_lines, json[QString("TimesheetEarningsLines")]);
    m_timesheet_earnings_lines_isSet = !json[QString("TimesheetEarningsLines")].isNull() && m_timesheet_earnings_lines_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_wages_isValid = ::OpenAPI::fromJsonValue(m_wages, json[QString("Wages")]);
    m_wages_isSet = !json[QString("Wages")].isNull() && m_wages_isValid;
}

QString OAIPayslip::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayslip::asJsonObject() const {
    QJsonObject obj;
    if (m_deduction_lines.size() > 0) {
        obj.insert(QString("DeductionLines"), ::OpenAPI::toJsonValue(m_deduction_lines));
    }
    if (m_deductions_isSet) {
        obj.insert(QString("Deductions"), ::OpenAPI::toJsonValue(m_deductions));
    }
    if (m_earnings_lines.size() > 0) {
        obj.insert(QString("EarningsLines"), ::OpenAPI::toJsonValue(m_earnings_lines));
    }
    if (m_employee_id_isSet) {
        obj.insert(QString("EmployeeID"), ::OpenAPI::toJsonValue(m_employee_id));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("FirstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("LastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_leave_accrual_lines.size() > 0) {
        obj.insert(QString("LeaveAccrualLines"), ::OpenAPI::toJsonValue(m_leave_accrual_lines));
    }
    if (m_leave_earnings_lines.size() > 0) {
        obj.insert(QString("LeaveEarningsLines"), ::OpenAPI::toJsonValue(m_leave_earnings_lines));
    }
    if (m_net_pay_isSet) {
        obj.insert(QString("NetPay"), ::OpenAPI::toJsonValue(m_net_pay));
    }
    if (m_payslip_id_isSet) {
        obj.insert(QString("PayslipID"), ::OpenAPI::toJsonValue(m_payslip_id));
    }
    if (m_reimbursement_lines.size() > 0) {
        obj.insert(QString("ReimbursementLines"), ::OpenAPI::toJsonValue(m_reimbursement_lines));
    }
    if (m_reimbursements_isSet) {
        obj.insert(QString("Reimbursements"), ::OpenAPI::toJsonValue(m_reimbursements));
    }
    if (m_super_isSet) {
        obj.insert(QString("Super"), ::OpenAPI::toJsonValue(m_super));
    }
    if (m_superannuation_lines.size() > 0) {
        obj.insert(QString("SuperannuationLines"), ::OpenAPI::toJsonValue(m_superannuation_lines));
    }
    if (m_tax_isSet) {
        obj.insert(QString("Tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_tax_lines.size() > 0) {
        obj.insert(QString("TaxLines"), ::OpenAPI::toJsonValue(m_tax_lines));
    }
    if (m_timesheet_earnings_lines.size() > 0) {
        obj.insert(QString("TimesheetEarningsLines"), ::OpenAPI::toJsonValue(m_timesheet_earnings_lines));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_wages_isSet) {
        obj.insert(QString("Wages"), ::OpenAPI::toJsonValue(m_wages));
    }
    return obj;
}

QList<OAIDeductionLine> OAIPayslip::getDeductionLines() const {
    return m_deduction_lines;
}
void OAIPayslip::setDeductionLines(const QList<OAIDeductionLine> &deduction_lines) {
    m_deduction_lines = deduction_lines;
    m_deduction_lines_isSet = true;
}

bool OAIPayslip::is_deduction_lines_Set() const{
    return m_deduction_lines_isSet;
}

bool OAIPayslip::is_deduction_lines_Valid() const{
    return m_deduction_lines_isValid;
}

double OAIPayslip::getDeductions() const {
    return m_deductions;
}
void OAIPayslip::setDeductions(const double &deductions) {
    m_deductions = deductions;
    m_deductions_isSet = true;
}

bool OAIPayslip::is_deductions_Set() const{
    return m_deductions_isSet;
}

bool OAIPayslip::is_deductions_Valid() const{
    return m_deductions_isValid;
}

QList<OAIEarningsLine> OAIPayslip::getEarningsLines() const {
    return m_earnings_lines;
}
void OAIPayslip::setEarningsLines(const QList<OAIEarningsLine> &earnings_lines) {
    m_earnings_lines = earnings_lines;
    m_earnings_lines_isSet = true;
}

bool OAIPayslip::is_earnings_lines_Set() const{
    return m_earnings_lines_isSet;
}

bool OAIPayslip::is_earnings_lines_Valid() const{
    return m_earnings_lines_isValid;
}

QString OAIPayslip::getEmployeeId() const {
    return m_employee_id;
}
void OAIPayslip::setEmployeeId(const QString &employee_id) {
    m_employee_id = employee_id;
    m_employee_id_isSet = true;
}

bool OAIPayslip::is_employee_id_Set() const{
    return m_employee_id_isSet;
}

bool OAIPayslip::is_employee_id_Valid() const{
    return m_employee_id_isValid;
}

QString OAIPayslip::getFirstName() const {
    return m_first_name;
}
void OAIPayslip::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIPayslip::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIPayslip::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIPayslip::getLastName() const {
    return m_last_name;
}
void OAIPayslip::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIPayslip::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIPayslip::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QList<OAILeaveAccrualLine> OAIPayslip::getLeaveAccrualLines() const {
    return m_leave_accrual_lines;
}
void OAIPayslip::setLeaveAccrualLines(const QList<OAILeaveAccrualLine> &leave_accrual_lines) {
    m_leave_accrual_lines = leave_accrual_lines;
    m_leave_accrual_lines_isSet = true;
}

bool OAIPayslip::is_leave_accrual_lines_Set() const{
    return m_leave_accrual_lines_isSet;
}

bool OAIPayslip::is_leave_accrual_lines_Valid() const{
    return m_leave_accrual_lines_isValid;
}

QList<OAILeaveEarningsLine> OAIPayslip::getLeaveEarningsLines() const {
    return m_leave_earnings_lines;
}
void OAIPayslip::setLeaveEarningsLines(const QList<OAILeaveEarningsLine> &leave_earnings_lines) {
    m_leave_earnings_lines = leave_earnings_lines;
    m_leave_earnings_lines_isSet = true;
}

bool OAIPayslip::is_leave_earnings_lines_Set() const{
    return m_leave_earnings_lines_isSet;
}

bool OAIPayslip::is_leave_earnings_lines_Valid() const{
    return m_leave_earnings_lines_isValid;
}

double OAIPayslip::getNetPay() const {
    return m_net_pay;
}
void OAIPayslip::setNetPay(const double &net_pay) {
    m_net_pay = net_pay;
    m_net_pay_isSet = true;
}

bool OAIPayslip::is_net_pay_Set() const{
    return m_net_pay_isSet;
}

bool OAIPayslip::is_net_pay_Valid() const{
    return m_net_pay_isValid;
}

QString OAIPayslip::getPayslipId() const {
    return m_payslip_id;
}
void OAIPayslip::setPayslipId(const QString &payslip_id) {
    m_payslip_id = payslip_id;
    m_payslip_id_isSet = true;
}

bool OAIPayslip::is_payslip_id_Set() const{
    return m_payslip_id_isSet;
}

bool OAIPayslip::is_payslip_id_Valid() const{
    return m_payslip_id_isValid;
}

QList<OAIReimbursementLine> OAIPayslip::getReimbursementLines() const {
    return m_reimbursement_lines;
}
void OAIPayslip::setReimbursementLines(const QList<OAIReimbursementLine> &reimbursement_lines) {
    m_reimbursement_lines = reimbursement_lines;
    m_reimbursement_lines_isSet = true;
}

bool OAIPayslip::is_reimbursement_lines_Set() const{
    return m_reimbursement_lines_isSet;
}

bool OAIPayslip::is_reimbursement_lines_Valid() const{
    return m_reimbursement_lines_isValid;
}

double OAIPayslip::getReimbursements() const {
    return m_reimbursements;
}
void OAIPayslip::setReimbursements(const double &reimbursements) {
    m_reimbursements = reimbursements;
    m_reimbursements_isSet = true;
}

bool OAIPayslip::is_reimbursements_Set() const{
    return m_reimbursements_isSet;
}

bool OAIPayslip::is_reimbursements_Valid() const{
    return m_reimbursements_isValid;
}

double OAIPayslip::getSuper() const {
    return m_super;
}
void OAIPayslip::setSuper(const double &super) {
    m_super = super;
    m_super_isSet = true;
}

bool OAIPayslip::is_super_Set() const{
    return m_super_isSet;
}

bool OAIPayslip::is_super_Valid() const{
    return m_super_isValid;
}

QList<OAISuperannuationLine> OAIPayslip::getSuperannuationLines() const {
    return m_superannuation_lines;
}
void OAIPayslip::setSuperannuationLines(const QList<OAISuperannuationLine> &superannuation_lines) {
    m_superannuation_lines = superannuation_lines;
    m_superannuation_lines_isSet = true;
}

bool OAIPayslip::is_superannuation_lines_Set() const{
    return m_superannuation_lines_isSet;
}

bool OAIPayslip::is_superannuation_lines_Valid() const{
    return m_superannuation_lines_isValid;
}

double OAIPayslip::getTax() const {
    return m_tax;
}
void OAIPayslip::setTax(const double &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIPayslip::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIPayslip::is_tax_Valid() const{
    return m_tax_isValid;
}

QList<OAITaxLine> OAIPayslip::getTaxLines() const {
    return m_tax_lines;
}
void OAIPayslip::setTaxLines(const QList<OAITaxLine> &tax_lines) {
    m_tax_lines = tax_lines;
    m_tax_lines_isSet = true;
}

bool OAIPayslip::is_tax_lines_Set() const{
    return m_tax_lines_isSet;
}

bool OAIPayslip::is_tax_lines_Valid() const{
    return m_tax_lines_isValid;
}

QList<OAIEarningsLine> OAIPayslip::getTimesheetEarningsLines() const {
    return m_timesheet_earnings_lines;
}
void OAIPayslip::setTimesheetEarningsLines(const QList<OAIEarningsLine> &timesheet_earnings_lines) {
    m_timesheet_earnings_lines = timesheet_earnings_lines;
    m_timesheet_earnings_lines_isSet = true;
}

bool OAIPayslip::is_timesheet_earnings_lines_Set() const{
    return m_timesheet_earnings_lines_isSet;
}

bool OAIPayslip::is_timesheet_earnings_lines_Valid() const{
    return m_timesheet_earnings_lines_isValid;
}

QString OAIPayslip::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIPayslip::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIPayslip::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIPayslip::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

double OAIPayslip::getWages() const {
    return m_wages;
}
void OAIPayslip::setWages(const double &wages) {
    m_wages = wages;
    m_wages_isSet = true;
}

bool OAIPayslip::is_wages_Set() const{
    return m_wages_isSet;
}

bool OAIPayslip::is_wages_Valid() const{
    return m_wages_isValid;
}

bool OAIPayslip::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deduction_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deductions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earnings_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leave_accrual_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_leave_earnings_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_pay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payslip_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reimbursement_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reimbursements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_super_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_superannuation_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timesheet_earnings_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wages_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayslip::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
