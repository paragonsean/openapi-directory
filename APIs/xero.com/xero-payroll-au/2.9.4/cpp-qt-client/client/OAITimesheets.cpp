/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimesheets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimesheets::OAITimesheets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimesheets::OAITimesheets() {
    this->initializeModel();
}

OAITimesheets::~OAITimesheets() {}

void OAITimesheets::initializeModel() {

    m_timesheets_isSet = false;
    m_timesheets_isValid = false;
}

void OAITimesheets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimesheets::fromJsonObject(QJsonObject json) {

    m_timesheets_isValid = ::OpenAPI::fromJsonValue(m_timesheets, json[QString("Timesheets")]);
    m_timesheets_isSet = !json[QString("Timesheets")].isNull() && m_timesheets_isValid;
}

QString OAITimesheets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimesheets::asJsonObject() const {
    QJsonObject obj;
    if (m_timesheets.size() > 0) {
        obj.insert(QString("Timesheets"), ::OpenAPI::toJsonValue(m_timesheets));
    }
    return obj;
}

QList<OAITimesheet> OAITimesheets::getTimesheets() const {
    return m_timesheets;
}
void OAITimesheets::setTimesheets(const QList<OAITimesheet> &timesheets) {
    m_timesheets = timesheets;
    m_timesheets_isSet = true;
}

bool OAITimesheets::is_timesheets_Set() const{
    return m_timesheets_isSet;
}

bool OAITimesheets::is_timesheets_Valid() const{
    return m_timesheets_isValid;
}

bool OAITimesheets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timesheets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimesheets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
