/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeductionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeductionType::OAIDeductionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeductionType::OAIDeductionType() {
    this->initializeModel();
}

OAIDeductionType::~OAIDeductionType() {}

void OAIDeductionType::initializeModel() {

    m_account_code_isSet = false;
    m_account_code_isValid = false;

    m_current_record_isSet = false;
    m_current_record_isValid = false;

    m_deduction_category_isSet = false;
    m_deduction_category_isValid = false;

    m_deduction_type_id_isSet = false;
    m_deduction_type_id_isValid = false;

    m_is_exempt_from_w1_isSet = false;
    m_is_exempt_from_w1_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reduces_super_isSet = false;
    m_reduces_super_isValid = false;

    m_reduces_tax_isSet = false;
    m_reduces_tax_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;
}

void OAIDeductionType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeductionType::fromJsonObject(QJsonObject json) {

    m_account_code_isValid = ::OpenAPI::fromJsonValue(m_account_code, json[QString("AccountCode")]);
    m_account_code_isSet = !json[QString("AccountCode")].isNull() && m_account_code_isValid;

    m_current_record_isValid = ::OpenAPI::fromJsonValue(m_current_record, json[QString("CurrentRecord")]);
    m_current_record_isSet = !json[QString("CurrentRecord")].isNull() && m_current_record_isValid;

    m_deduction_category_isValid = ::OpenAPI::fromJsonValue(m_deduction_category, json[QString("DeductionCategory")]);
    m_deduction_category_isSet = !json[QString("DeductionCategory")].isNull() && m_deduction_category_isValid;

    m_deduction_type_id_isValid = ::OpenAPI::fromJsonValue(m_deduction_type_id, json[QString("DeductionTypeID")]);
    m_deduction_type_id_isSet = !json[QString("DeductionTypeID")].isNull() && m_deduction_type_id_isValid;

    m_is_exempt_from_w1_isValid = ::OpenAPI::fromJsonValue(m_is_exempt_from_w1, json[QString("IsExemptFromW1")]);
    m_is_exempt_from_w1_isSet = !json[QString("IsExemptFromW1")].isNull() && m_is_exempt_from_w1_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_reduces_super_isValid = ::OpenAPI::fromJsonValue(m_reduces_super, json[QString("ReducesSuper")]);
    m_reduces_super_isSet = !json[QString("ReducesSuper")].isNull() && m_reduces_super_isValid;

    m_reduces_tax_isValid = ::OpenAPI::fromJsonValue(m_reduces_tax, json[QString("ReducesTax")]);
    m_reduces_tax_isSet = !json[QString("ReducesTax")].isNull() && m_reduces_tax_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;
}

QString OAIDeductionType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeductionType::asJsonObject() const {
    QJsonObject obj;
    if (m_account_code_isSet) {
        obj.insert(QString("AccountCode"), ::OpenAPI::toJsonValue(m_account_code));
    }
    if (m_current_record_isSet) {
        obj.insert(QString("CurrentRecord"), ::OpenAPI::toJsonValue(m_current_record));
    }
    if (m_deduction_category_isSet) {
        obj.insert(QString("DeductionCategory"), ::OpenAPI::toJsonValue(m_deduction_category));
    }
    if (m_deduction_type_id_isSet) {
        obj.insert(QString("DeductionTypeID"), ::OpenAPI::toJsonValue(m_deduction_type_id));
    }
    if (m_is_exempt_from_w1_isSet) {
        obj.insert(QString("IsExemptFromW1"), ::OpenAPI::toJsonValue(m_is_exempt_from_w1));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reduces_super_isSet) {
        obj.insert(QString("ReducesSuper"), ::OpenAPI::toJsonValue(m_reduces_super));
    }
    if (m_reduces_tax_isSet) {
        obj.insert(QString("ReducesTax"), ::OpenAPI::toJsonValue(m_reduces_tax));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    return obj;
}

QString OAIDeductionType::getAccountCode() const {
    return m_account_code;
}
void OAIDeductionType::setAccountCode(const QString &account_code) {
    m_account_code = account_code;
    m_account_code_isSet = true;
}

bool OAIDeductionType::is_account_code_Set() const{
    return m_account_code_isSet;
}

bool OAIDeductionType::is_account_code_Valid() const{
    return m_account_code_isValid;
}

bool OAIDeductionType::isCurrentRecord() const {
    return m_current_record;
}
void OAIDeductionType::setCurrentRecord(const bool &current_record) {
    m_current_record = current_record;
    m_current_record_isSet = true;
}

bool OAIDeductionType::is_current_record_Set() const{
    return m_current_record_isSet;
}

bool OAIDeductionType::is_current_record_Valid() const{
    return m_current_record_isValid;
}

QString OAIDeductionType::getDeductionCategory() const {
    return m_deduction_category;
}
void OAIDeductionType::setDeductionCategory(const QString &deduction_category) {
    m_deduction_category = deduction_category;
    m_deduction_category_isSet = true;
}

bool OAIDeductionType::is_deduction_category_Set() const{
    return m_deduction_category_isSet;
}

bool OAIDeductionType::is_deduction_category_Valid() const{
    return m_deduction_category_isValid;
}

QString OAIDeductionType::getDeductionTypeId() const {
    return m_deduction_type_id;
}
void OAIDeductionType::setDeductionTypeId(const QString &deduction_type_id) {
    m_deduction_type_id = deduction_type_id;
    m_deduction_type_id_isSet = true;
}

bool OAIDeductionType::is_deduction_type_id_Set() const{
    return m_deduction_type_id_isSet;
}

bool OAIDeductionType::is_deduction_type_id_Valid() const{
    return m_deduction_type_id_isValid;
}

bool OAIDeductionType::isIsExemptFromW1() const {
    return m_is_exempt_from_w1;
}
void OAIDeductionType::setIsExemptFromW1(const bool &is_exempt_from_w1) {
    m_is_exempt_from_w1 = is_exempt_from_w1;
    m_is_exempt_from_w1_isSet = true;
}

bool OAIDeductionType::is_is_exempt_from_w1_Set() const{
    return m_is_exempt_from_w1_isSet;
}

bool OAIDeductionType::is_is_exempt_from_w1_Valid() const{
    return m_is_exempt_from_w1_isValid;
}

QString OAIDeductionType::getName() const {
    return m_name;
}
void OAIDeductionType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeductionType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeductionType::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIDeductionType::isReducesSuper() const {
    return m_reduces_super;
}
void OAIDeductionType::setReducesSuper(const bool &reduces_super) {
    m_reduces_super = reduces_super;
    m_reduces_super_isSet = true;
}

bool OAIDeductionType::is_reduces_super_Set() const{
    return m_reduces_super_isSet;
}

bool OAIDeductionType::is_reduces_super_Valid() const{
    return m_reduces_super_isValid;
}

bool OAIDeductionType::isReducesTax() const {
    return m_reduces_tax;
}
void OAIDeductionType::setReducesTax(const bool &reduces_tax) {
    m_reduces_tax = reduces_tax;
    m_reduces_tax_isSet = true;
}

bool OAIDeductionType::is_reduces_tax_Set() const{
    return m_reduces_tax_isSet;
}

bool OAIDeductionType::is_reduces_tax_Valid() const{
    return m_reduces_tax_isValid;
}

QString OAIDeductionType::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIDeductionType::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIDeductionType::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIDeductionType::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

bool OAIDeductionType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deduction_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deduction_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_exempt_from_w1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reduces_super_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reduces_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeductionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
