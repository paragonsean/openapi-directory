/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIException.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIException::OAIAPIException(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIException::OAIAPIException() {
    this->initializeModel();
}

OAIAPIException::~OAIAPIException() {}

void OAIAPIException::initializeModel() {

    m_error_number_isSet = false;
    m_error_number_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAPIException::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIException::fromJsonObject(QJsonObject json) {

    m_error_number_isValid = ::OpenAPI::fromJsonValue(m_error_number, json[QString("ErrorNumber")]);
    m_error_number_isSet = !json[QString("ErrorNumber")].isNull() && m_error_number_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIAPIException::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIException::asJsonObject() const {
    QJsonObject obj;
    if (m_error_number_isSet) {
        obj.insert(QString("ErrorNumber"), ::OpenAPI::toJsonValue(m_error_number));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

double OAIAPIException::getErrorNumber() const {
    return m_error_number;
}
void OAIAPIException::setErrorNumber(const double &error_number) {
    m_error_number = error_number;
    m_error_number_isSet = true;
}

bool OAIAPIException::is_error_number_Set() const{
    return m_error_number_isSet;
}

bool OAIAPIException::is_error_number_Valid() const{
    return m_error_number_isValid;
}

QString OAIAPIException::getMessage() const {
    return m_message;
}
void OAIAPIException::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAPIException::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAPIException::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIAPIException::getType() const {
    return m_type;
}
void OAIAPIException::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAPIException::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAPIException::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAPIException::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIException::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
