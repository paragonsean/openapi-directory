/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaxLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaxLine::OAITaxLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaxLine::OAITaxLine() {
    this->initializeModel();
}

OAITaxLine::~OAITaxLine() {}

void OAITaxLine::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_liability_account_isSet = false;
    m_liability_account_isValid = false;

    m_manual_tax_type_isSet = false;
    m_manual_tax_type_isValid = false;

    m_payslip_tax_line_id_isSet = false;
    m_payslip_tax_line_id_isValid = false;

    m_tax_type_name_isSet = false;
    m_tax_type_name_isValid = false;
}

void OAITaxLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaxLine::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("Amount")]);
    m_amount_isSet = !json[QString("Amount")].isNull() && m_amount_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_liability_account_isValid = ::OpenAPI::fromJsonValue(m_liability_account, json[QString("LiabilityAccount")]);
    m_liability_account_isSet = !json[QString("LiabilityAccount")].isNull() && m_liability_account_isValid;

    m_manual_tax_type_isValid = ::OpenAPI::fromJsonValue(m_manual_tax_type, json[QString("ManualTaxType")]);
    m_manual_tax_type_isSet = !json[QString("ManualTaxType")].isNull() && m_manual_tax_type_isValid;

    m_payslip_tax_line_id_isValid = ::OpenAPI::fromJsonValue(m_payslip_tax_line_id, json[QString("PayslipTaxLineID")]);
    m_payslip_tax_line_id_isSet = !json[QString("PayslipTaxLineID")].isNull() && m_payslip_tax_line_id_isValid;

    m_tax_type_name_isValid = ::OpenAPI::fromJsonValue(m_tax_type_name, json[QString("TaxTypeName")]);
    m_tax_type_name_isSet = !json[QString("TaxTypeName")].isNull() && m_tax_type_name_isValid;
}

QString OAITaxLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaxLine::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("Amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_liability_account_isSet) {
        obj.insert(QString("LiabilityAccount"), ::OpenAPI::toJsonValue(m_liability_account));
    }
    if (m_manual_tax_type.isSet()) {
        obj.insert(QString("ManualTaxType"), ::OpenAPI::toJsonValue(m_manual_tax_type));
    }
    if (m_payslip_tax_line_id_isSet) {
        obj.insert(QString("PayslipTaxLineID"), ::OpenAPI::toJsonValue(m_payslip_tax_line_id));
    }
    if (m_tax_type_name_isSet) {
        obj.insert(QString("TaxTypeName"), ::OpenAPI::toJsonValue(m_tax_type_name));
    }
    return obj;
}

double OAITaxLine::getAmount() const {
    return m_amount;
}
void OAITaxLine::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITaxLine::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITaxLine::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAITaxLine::getDescription() const {
    return m_description;
}
void OAITaxLine::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITaxLine::is_description_Set() const{
    return m_description_isSet;
}

bool OAITaxLine::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITaxLine::getLiabilityAccount() const {
    return m_liability_account;
}
void OAITaxLine::setLiabilityAccount(const QString &liability_account) {
    m_liability_account = liability_account;
    m_liability_account_isSet = true;
}

bool OAITaxLine::is_liability_account_Set() const{
    return m_liability_account_isSet;
}

bool OAITaxLine::is_liability_account_Valid() const{
    return m_liability_account_isValid;
}

OAIManualTaxType OAITaxLine::getManualTaxType() const {
    return m_manual_tax_type;
}
void OAITaxLine::setManualTaxType(const OAIManualTaxType &manual_tax_type) {
    m_manual_tax_type = manual_tax_type;
    m_manual_tax_type_isSet = true;
}

bool OAITaxLine::is_manual_tax_type_Set() const{
    return m_manual_tax_type_isSet;
}

bool OAITaxLine::is_manual_tax_type_Valid() const{
    return m_manual_tax_type_isValid;
}

QString OAITaxLine::getPayslipTaxLineId() const {
    return m_payslip_tax_line_id;
}
void OAITaxLine::setPayslipTaxLineId(const QString &payslip_tax_line_id) {
    m_payslip_tax_line_id = payslip_tax_line_id;
    m_payslip_tax_line_id_isSet = true;
}

bool OAITaxLine::is_payslip_tax_line_id_Set() const{
    return m_payslip_tax_line_id_isSet;
}

bool OAITaxLine::is_payslip_tax_line_id_Valid() const{
    return m_payslip_tax_line_id_isValid;
}

QString OAITaxLine::getTaxTypeName() const {
    return m_tax_type_name;
}
void OAITaxLine::setTaxTypeName(const QString &tax_type_name) {
    m_tax_type_name = tax_type_name;
    m_tax_type_name_isSet = true;
}

bool OAITaxLine::is_tax_type_name_Set() const{
    return m_tax_type_name_isSet;
}

bool OAITaxLine::is_tax_type_name_Valid() const{
    return m_tax_type_name_isValid;
}

bool OAITaxLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liability_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_tax_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payslip_tax_line_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaxLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
