/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEarningsRate.h
 *
 * 
 */

#ifndef OAIEarningsRate_H
#define OAIEarningsRate_H

#include <QJsonObject>

#include "OAIAllowanceType.h"
#include "OAIEarningsType.h"
#include "OAIEmploymentTerminationPaymentType.h"
#include "OAIRateType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEarningsRate : public OAIObject {
public:
    OAIEarningsRate();
    OAIEarningsRate(QString json);
    ~OAIEarningsRate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountCode() const;
    void setAccountCode(const QString &account_code);
    bool is_account_code_Set() const;
    bool is_account_code_Valid() const;

    bool isAccrueLeave() const;
    void setAccrueLeave(const bool &accrue_leave);
    bool is_accrue_leave_Set() const;
    bool is_accrue_leave_Valid() const;

    OAIAllowanceType getAllowanceType() const;
    void setAllowanceType(const OAIAllowanceType &allowance_type);
    bool is_allowance_type_Set() const;
    bool is_allowance_type_Valid() const;

    double getAmount() const;
    void setAmount(const double &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    bool isCurrentRecord() const;
    void setCurrentRecord(const bool &current_record);
    bool is_current_record_Set() const;
    bool is_current_record_Valid() const;

    QString getEarningsRateId() const;
    void setEarningsRateId(const QString &earnings_rate_id);
    bool is_earnings_rate_id_Set() const;
    bool is_earnings_rate_id_Valid() const;

    OAIEarningsType getEarningsType() const;
    void setEarningsType(const OAIEarningsType &earnings_type);
    bool is_earnings_type_Set() const;
    bool is_earnings_type_Valid() const;

    OAIEmploymentTerminationPaymentType getEmploymentTerminationPaymentType() const;
    void setEmploymentTerminationPaymentType(const OAIEmploymentTerminationPaymentType &employment_termination_payment_type);
    bool is_employment_termination_payment_type_Set() const;
    bool is_employment_termination_payment_type_Valid() const;

    bool isIsExemptFromSuper() const;
    void setIsExemptFromSuper(const bool &is_exempt_from_super);
    bool is_is_exempt_from_super_Set() const;
    bool is_is_exempt_from_super_Valid() const;

    bool isIsExemptFromTax() const;
    void setIsExemptFromTax(const bool &is_exempt_from_tax);
    bool is_is_exempt_from_tax_Set() const;
    bool is_is_exempt_from_tax_Valid() const;

    bool isIsReportableAsW1() const;
    void setIsReportableAsW1(const bool &is_reportable_as_w1);
    bool is_is_reportable_as_w1_Set() const;
    bool is_is_reportable_as_w1_Valid() const;

    double getMultiplier() const;
    void setMultiplier(const double &multiplier);
    bool is_multiplier_Set() const;
    bool is_multiplier_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRatePerUnit() const;
    void setRatePerUnit(const QString &rate_per_unit);
    bool is_rate_per_unit_Set() const;
    bool is_rate_per_unit_Valid() const;

    OAIRateType getRateType() const;
    void setRateType(const OAIRateType &rate_type);
    bool is_rate_type_Set() const;
    bool is_rate_type_Valid() const;

    QString getTypeOfUnits() const;
    void setTypeOfUnits(const QString &type_of_units);
    bool is_type_of_units_Set() const;
    bool is_type_of_units_Valid() const;

    QString getUpdatedDateUtc() const;
    void setUpdatedDateUtc(const QString &updated_date_utc);
    bool is_updated_date_utc_Set() const;
    bool is_updated_date_utc_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_code;
    bool m_account_code_isSet;
    bool m_account_code_isValid;

    bool m_accrue_leave;
    bool m_accrue_leave_isSet;
    bool m_accrue_leave_isValid;

    OAIAllowanceType m_allowance_type;
    bool m_allowance_type_isSet;
    bool m_allowance_type_isValid;

    double m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    bool m_current_record;
    bool m_current_record_isSet;
    bool m_current_record_isValid;

    QString m_earnings_rate_id;
    bool m_earnings_rate_id_isSet;
    bool m_earnings_rate_id_isValid;

    OAIEarningsType m_earnings_type;
    bool m_earnings_type_isSet;
    bool m_earnings_type_isValid;

    OAIEmploymentTerminationPaymentType m_employment_termination_payment_type;
    bool m_employment_termination_payment_type_isSet;
    bool m_employment_termination_payment_type_isValid;

    bool m_is_exempt_from_super;
    bool m_is_exempt_from_super_isSet;
    bool m_is_exempt_from_super_isValid;

    bool m_is_exempt_from_tax;
    bool m_is_exempt_from_tax_isSet;
    bool m_is_exempt_from_tax_isValid;

    bool m_is_reportable_as_w1;
    bool m_is_reportable_as_w1_isSet;
    bool m_is_reportable_as_w1_isValid;

    double m_multiplier;
    bool m_multiplier_isSet;
    bool m_multiplier_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_rate_per_unit;
    bool m_rate_per_unit_isSet;
    bool m_rate_per_unit_isValid;

    OAIRateType m_rate_type;
    bool m_rate_type_isSet;
    bool m_rate_type_isValid;

    QString m_type_of_units;
    bool m_type_of_units_isSet;
    bool m_type_of_units_isValid;

    QString m_updated_date_utc;
    bool m_updated_date_utc_isSet;
    bool m_updated_date_utc_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEarningsRate)

#endif // OAIEarningsRate_H
