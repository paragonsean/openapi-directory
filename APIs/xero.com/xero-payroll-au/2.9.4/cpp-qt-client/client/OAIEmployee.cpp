/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmployee.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmployee::OAIEmployee(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmployee::OAIEmployee() {
    this->initializeModel();
}

OAIEmployee::~OAIEmployee() {}

void OAIEmployee::initializeModel() {

    m_bank_accounts_isSet = false;
    m_bank_accounts_isValid = false;

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_employee_group_name_isSet = false;
    m_employee_group_name_isValid = false;

    m_employee_id_isSet = false;
    m_employee_id_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_home_address_isSet = false;
    m_home_address_isValid = false;

    m_is_authorised_to_approve_leave_isSet = false;
    m_is_authorised_to_approve_leave_isValid = false;

    m_is_authorised_to_approve_timesheets_isSet = false;
    m_is_authorised_to_approve_timesheets_isValid = false;

    m_job_title_isSet = false;
    m_job_title_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_leave_balances_isSet = false;
    m_leave_balances_isValid = false;

    m_leave_lines_isSet = false;
    m_leave_lines_isValid = false;

    m_middle_names_isSet = false;
    m_middle_names_isValid = false;

    m_mobile_isSet = false;
    m_mobile_isValid = false;

    m_opening_balances_isSet = false;
    m_opening_balances_isValid = false;

    m_ordinary_earnings_rate_id_isSet = false;
    m_ordinary_earnings_rate_id_isValid = false;

    m_pay_template_isSet = false;
    m_pay_template_isValid = false;

    m_payroll_calendar_id_isSet = false;
    m_payroll_calendar_id_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_super_memberships_isSet = false;
    m_super_memberships_isValid = false;

    m_tax_declaration_isSet = false;
    m_tax_declaration_isValid = false;

    m_termination_date_isSet = false;
    m_termination_date_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_twitter_user_name_isSet = false;
    m_twitter_user_name_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAIEmployee::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmployee::fromJsonObject(QJsonObject json) {

    m_bank_accounts_isValid = ::OpenAPI::fromJsonValue(m_bank_accounts, json[QString("BankAccounts")]);
    m_bank_accounts_isSet = !json[QString("BankAccounts")].isNull() && m_bank_accounts_isValid;

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("Classification")]);
    m_classification_isSet = !json[QString("Classification")].isNull() && m_classification_isValid;

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("DateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("DateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_employee_group_name_isValid = ::OpenAPI::fromJsonValue(m_employee_group_name, json[QString("EmployeeGroupName")]);
    m_employee_group_name_isSet = !json[QString("EmployeeGroupName")].isNull() && m_employee_group_name_isValid;

    m_employee_id_isValid = ::OpenAPI::fromJsonValue(m_employee_id, json[QString("EmployeeID")]);
    m_employee_id_isSet = !json[QString("EmployeeID")].isNull() && m_employee_id_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("FirstName")]);
    m_first_name_isSet = !json[QString("FirstName")].isNull() && m_first_name_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("Gender")]);
    m_gender_isSet = !json[QString("Gender")].isNull() && m_gender_isValid;

    m_home_address_isValid = ::OpenAPI::fromJsonValue(m_home_address, json[QString("HomeAddress")]);
    m_home_address_isSet = !json[QString("HomeAddress")].isNull() && m_home_address_isValid;

    m_is_authorised_to_approve_leave_isValid = ::OpenAPI::fromJsonValue(m_is_authorised_to_approve_leave, json[QString("IsAuthorisedToApproveLeave")]);
    m_is_authorised_to_approve_leave_isSet = !json[QString("IsAuthorisedToApproveLeave")].isNull() && m_is_authorised_to_approve_leave_isValid;

    m_is_authorised_to_approve_timesheets_isValid = ::OpenAPI::fromJsonValue(m_is_authorised_to_approve_timesheets, json[QString("IsAuthorisedToApproveTimesheets")]);
    m_is_authorised_to_approve_timesheets_isSet = !json[QString("IsAuthorisedToApproveTimesheets")].isNull() && m_is_authorised_to_approve_timesheets_isValid;

    m_job_title_isValid = ::OpenAPI::fromJsonValue(m_job_title, json[QString("JobTitle")]);
    m_job_title_isSet = !json[QString("JobTitle")].isNull() && m_job_title_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("LastName")]);
    m_last_name_isSet = !json[QString("LastName")].isNull() && m_last_name_isValid;

    m_leave_balances_isValid = ::OpenAPI::fromJsonValue(m_leave_balances, json[QString("LeaveBalances")]);
    m_leave_balances_isSet = !json[QString("LeaveBalances")].isNull() && m_leave_balances_isValid;

    m_leave_lines_isValid = ::OpenAPI::fromJsonValue(m_leave_lines, json[QString("LeaveLines")]);
    m_leave_lines_isSet = !json[QString("LeaveLines")].isNull() && m_leave_lines_isValid;

    m_middle_names_isValid = ::OpenAPI::fromJsonValue(m_middle_names, json[QString("MiddleNames")]);
    m_middle_names_isSet = !json[QString("MiddleNames")].isNull() && m_middle_names_isValid;

    m_mobile_isValid = ::OpenAPI::fromJsonValue(m_mobile, json[QString("Mobile")]);
    m_mobile_isSet = !json[QString("Mobile")].isNull() && m_mobile_isValid;

    m_opening_balances_isValid = ::OpenAPI::fromJsonValue(m_opening_balances, json[QString("OpeningBalances")]);
    m_opening_balances_isSet = !json[QString("OpeningBalances")].isNull() && m_opening_balances_isValid;

    m_ordinary_earnings_rate_id_isValid = ::OpenAPI::fromJsonValue(m_ordinary_earnings_rate_id, json[QString("OrdinaryEarningsRateID")]);
    m_ordinary_earnings_rate_id_isSet = !json[QString("OrdinaryEarningsRateID")].isNull() && m_ordinary_earnings_rate_id_isValid;

    m_pay_template_isValid = ::OpenAPI::fromJsonValue(m_pay_template, json[QString("PayTemplate")]);
    m_pay_template_isSet = !json[QString("PayTemplate")].isNull() && m_pay_template_isValid;

    m_payroll_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_payroll_calendar_id, json[QString("PayrollCalendarID")]);
    m_payroll_calendar_id_isSet = !json[QString("PayrollCalendarID")].isNull() && m_payroll_calendar_id_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("Phone")]);
    m_phone_isSet = !json[QString("Phone")].isNull() && m_phone_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_super_memberships_isValid = ::OpenAPI::fromJsonValue(m_super_memberships, json[QString("SuperMemberships")]);
    m_super_memberships_isSet = !json[QString("SuperMemberships")].isNull() && m_super_memberships_isValid;

    m_tax_declaration_isValid = ::OpenAPI::fromJsonValue(m_tax_declaration, json[QString("TaxDeclaration")]);
    m_tax_declaration_isSet = !json[QString("TaxDeclaration")].isNull() && m_tax_declaration_isValid;

    m_termination_date_isValid = ::OpenAPI::fromJsonValue(m_termination_date, json[QString("TerminationDate")]);
    m_termination_date_isSet = !json[QString("TerminationDate")].isNull() && m_termination_date_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_twitter_user_name_isValid = ::OpenAPI::fromJsonValue(m_twitter_user_name, json[QString("TwitterUserName")]);
    m_twitter_user_name_isSet = !json[QString("TwitterUserName")].isNull() && m_twitter_user_name_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;
}

QString OAIEmployee::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmployee::asJsonObject() const {
    QJsonObject obj;
    if (m_bank_accounts.size() > 0) {
        obj.insert(QString("BankAccounts"), ::OpenAPI::toJsonValue(m_bank_accounts));
    }
    if (m_classification_isSet) {
        obj.insert(QString("Classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_date_of_birth_isSet) {
        obj.insert(QString("DateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_employee_group_name_isSet) {
        obj.insert(QString("EmployeeGroupName"), ::OpenAPI::toJsonValue(m_employee_group_name));
    }
    if (m_employee_id_isSet) {
        obj.insert(QString("EmployeeID"), ::OpenAPI::toJsonValue(m_employee_id));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("FirstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_gender_isSet) {
        obj.insert(QString("Gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_home_address.isSet()) {
        obj.insert(QString("HomeAddress"), ::OpenAPI::toJsonValue(m_home_address));
    }
    if (m_is_authorised_to_approve_leave_isSet) {
        obj.insert(QString("IsAuthorisedToApproveLeave"), ::OpenAPI::toJsonValue(m_is_authorised_to_approve_leave));
    }
    if (m_is_authorised_to_approve_timesheets_isSet) {
        obj.insert(QString("IsAuthorisedToApproveTimesheets"), ::OpenAPI::toJsonValue(m_is_authorised_to_approve_timesheets));
    }
    if (m_job_title_isSet) {
        obj.insert(QString("JobTitle"), ::OpenAPI::toJsonValue(m_job_title));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("LastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_leave_balances.size() > 0) {
        obj.insert(QString("LeaveBalances"), ::OpenAPI::toJsonValue(m_leave_balances));
    }
    if (m_leave_lines.size() > 0) {
        obj.insert(QString("LeaveLines"), ::OpenAPI::toJsonValue(m_leave_lines));
    }
    if (m_middle_names_isSet) {
        obj.insert(QString("MiddleNames"), ::OpenAPI::toJsonValue(m_middle_names));
    }
    if (m_mobile_isSet) {
        obj.insert(QString("Mobile"), ::OpenAPI::toJsonValue(m_mobile));
    }
    if (m_opening_balances.isSet()) {
        obj.insert(QString("OpeningBalances"), ::OpenAPI::toJsonValue(m_opening_balances));
    }
    if (m_ordinary_earnings_rate_id_isSet) {
        obj.insert(QString("OrdinaryEarningsRateID"), ::OpenAPI::toJsonValue(m_ordinary_earnings_rate_id));
    }
    if (m_pay_template.isSet()) {
        obj.insert(QString("PayTemplate"), ::OpenAPI::toJsonValue(m_pay_template));
    }
    if (m_payroll_calendar_id_isSet) {
        obj.insert(QString("PayrollCalendarID"), ::OpenAPI::toJsonValue(m_payroll_calendar_id));
    }
    if (m_phone_isSet) {
        obj.insert(QString("Phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_super_memberships.size() > 0) {
        obj.insert(QString("SuperMemberships"), ::OpenAPI::toJsonValue(m_super_memberships));
    }
    if (m_tax_declaration.isSet()) {
        obj.insert(QString("TaxDeclaration"), ::OpenAPI::toJsonValue(m_tax_declaration));
    }
    if (m_termination_date_isSet) {
        obj.insert(QString("TerminationDate"), ::OpenAPI::toJsonValue(m_termination_date));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_twitter_user_name_isSet) {
        obj.insert(QString("TwitterUserName"), ::OpenAPI::toJsonValue(m_twitter_user_name));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

QList<OAIBankAccount> OAIEmployee::getBankAccounts() const {
    return m_bank_accounts;
}
void OAIEmployee::setBankAccounts(const QList<OAIBankAccount> &bank_accounts) {
    m_bank_accounts = bank_accounts;
    m_bank_accounts_isSet = true;
}

bool OAIEmployee::is_bank_accounts_Set() const{
    return m_bank_accounts_isSet;
}

bool OAIEmployee::is_bank_accounts_Valid() const{
    return m_bank_accounts_isValid;
}

QString OAIEmployee::getClassification() const {
    return m_classification;
}
void OAIEmployee::setClassification(const QString &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIEmployee::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIEmployee::is_classification_Valid() const{
    return m_classification_isValid;
}

QString OAIEmployee::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAIEmployee::setDateOfBirth(const QString &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAIEmployee::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAIEmployee::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

QString OAIEmployee::getEmail() const {
    return m_email;
}
void OAIEmployee::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIEmployee::is_email_Set() const{
    return m_email_isSet;
}

bool OAIEmployee::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIEmployee::getEmployeeGroupName() const {
    return m_employee_group_name;
}
void OAIEmployee::setEmployeeGroupName(const QString &employee_group_name) {
    m_employee_group_name = employee_group_name;
    m_employee_group_name_isSet = true;
}

bool OAIEmployee::is_employee_group_name_Set() const{
    return m_employee_group_name_isSet;
}

bool OAIEmployee::is_employee_group_name_Valid() const{
    return m_employee_group_name_isValid;
}

QString OAIEmployee::getEmployeeId() const {
    return m_employee_id;
}
void OAIEmployee::setEmployeeId(const QString &employee_id) {
    m_employee_id = employee_id;
    m_employee_id_isSet = true;
}

bool OAIEmployee::is_employee_id_Set() const{
    return m_employee_id_isSet;
}

bool OAIEmployee::is_employee_id_Valid() const{
    return m_employee_id_isValid;
}

QString OAIEmployee::getFirstName() const {
    return m_first_name;
}
void OAIEmployee::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIEmployee::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIEmployee::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIEmployee::getGender() const {
    return m_gender;
}
void OAIEmployee::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIEmployee::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIEmployee::is_gender_Valid() const{
    return m_gender_isValid;
}

OAIHomeAddress OAIEmployee::getHomeAddress() const {
    return m_home_address;
}
void OAIEmployee::setHomeAddress(const OAIHomeAddress &home_address) {
    m_home_address = home_address;
    m_home_address_isSet = true;
}

bool OAIEmployee::is_home_address_Set() const{
    return m_home_address_isSet;
}

bool OAIEmployee::is_home_address_Valid() const{
    return m_home_address_isValid;
}

bool OAIEmployee::isIsAuthorisedToApproveLeave() const {
    return m_is_authorised_to_approve_leave;
}
void OAIEmployee::setIsAuthorisedToApproveLeave(const bool &is_authorised_to_approve_leave) {
    m_is_authorised_to_approve_leave = is_authorised_to_approve_leave;
    m_is_authorised_to_approve_leave_isSet = true;
}

bool OAIEmployee::is_is_authorised_to_approve_leave_Set() const{
    return m_is_authorised_to_approve_leave_isSet;
}

bool OAIEmployee::is_is_authorised_to_approve_leave_Valid() const{
    return m_is_authorised_to_approve_leave_isValid;
}

bool OAIEmployee::isIsAuthorisedToApproveTimesheets() const {
    return m_is_authorised_to_approve_timesheets;
}
void OAIEmployee::setIsAuthorisedToApproveTimesheets(const bool &is_authorised_to_approve_timesheets) {
    m_is_authorised_to_approve_timesheets = is_authorised_to_approve_timesheets;
    m_is_authorised_to_approve_timesheets_isSet = true;
}

bool OAIEmployee::is_is_authorised_to_approve_timesheets_Set() const{
    return m_is_authorised_to_approve_timesheets_isSet;
}

bool OAIEmployee::is_is_authorised_to_approve_timesheets_Valid() const{
    return m_is_authorised_to_approve_timesheets_isValid;
}

QString OAIEmployee::getJobTitle() const {
    return m_job_title;
}
void OAIEmployee::setJobTitle(const QString &job_title) {
    m_job_title = job_title;
    m_job_title_isSet = true;
}

bool OAIEmployee::is_job_title_Set() const{
    return m_job_title_isSet;
}

bool OAIEmployee::is_job_title_Valid() const{
    return m_job_title_isValid;
}

QString OAIEmployee::getLastName() const {
    return m_last_name;
}
void OAIEmployee::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIEmployee::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIEmployee::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QList<OAILeaveBalance> OAIEmployee::getLeaveBalances() const {
    return m_leave_balances;
}
void OAIEmployee::setLeaveBalances(const QList<OAILeaveBalance> &leave_balances) {
    m_leave_balances = leave_balances;
    m_leave_balances_isSet = true;
}

bool OAIEmployee::is_leave_balances_Set() const{
    return m_leave_balances_isSet;
}

bool OAIEmployee::is_leave_balances_Valid() const{
    return m_leave_balances_isValid;
}

QList<OAILeaveLine> OAIEmployee::getLeaveLines() const {
    return m_leave_lines;
}
void OAIEmployee::setLeaveLines(const QList<OAILeaveLine> &leave_lines) {
    m_leave_lines = leave_lines;
    m_leave_lines_isSet = true;
}

bool OAIEmployee::is_leave_lines_Set() const{
    return m_leave_lines_isSet;
}

bool OAIEmployee::is_leave_lines_Valid() const{
    return m_leave_lines_isValid;
}

QString OAIEmployee::getMiddleNames() const {
    return m_middle_names;
}
void OAIEmployee::setMiddleNames(const QString &middle_names) {
    m_middle_names = middle_names;
    m_middle_names_isSet = true;
}

bool OAIEmployee::is_middle_names_Set() const{
    return m_middle_names_isSet;
}

bool OAIEmployee::is_middle_names_Valid() const{
    return m_middle_names_isValid;
}

QString OAIEmployee::getMobile() const {
    return m_mobile;
}
void OAIEmployee::setMobile(const QString &mobile) {
    m_mobile = mobile;
    m_mobile_isSet = true;
}

bool OAIEmployee::is_mobile_Set() const{
    return m_mobile_isSet;
}

bool OAIEmployee::is_mobile_Valid() const{
    return m_mobile_isValid;
}

OAIOpeningBalances OAIEmployee::getOpeningBalances() const {
    return m_opening_balances;
}
void OAIEmployee::setOpeningBalances(const OAIOpeningBalances &opening_balances) {
    m_opening_balances = opening_balances;
    m_opening_balances_isSet = true;
}

bool OAIEmployee::is_opening_balances_Set() const{
    return m_opening_balances_isSet;
}

bool OAIEmployee::is_opening_balances_Valid() const{
    return m_opening_balances_isValid;
}

QString OAIEmployee::getOrdinaryEarningsRateId() const {
    return m_ordinary_earnings_rate_id;
}
void OAIEmployee::setOrdinaryEarningsRateId(const QString &ordinary_earnings_rate_id) {
    m_ordinary_earnings_rate_id = ordinary_earnings_rate_id;
    m_ordinary_earnings_rate_id_isSet = true;
}

bool OAIEmployee::is_ordinary_earnings_rate_id_Set() const{
    return m_ordinary_earnings_rate_id_isSet;
}

bool OAIEmployee::is_ordinary_earnings_rate_id_Valid() const{
    return m_ordinary_earnings_rate_id_isValid;
}

OAIPayTemplate OAIEmployee::getPayTemplate() const {
    return m_pay_template;
}
void OAIEmployee::setPayTemplate(const OAIPayTemplate &pay_template) {
    m_pay_template = pay_template;
    m_pay_template_isSet = true;
}

bool OAIEmployee::is_pay_template_Set() const{
    return m_pay_template_isSet;
}

bool OAIEmployee::is_pay_template_Valid() const{
    return m_pay_template_isValid;
}

QString OAIEmployee::getPayrollCalendarId() const {
    return m_payroll_calendar_id;
}
void OAIEmployee::setPayrollCalendarId(const QString &payroll_calendar_id) {
    m_payroll_calendar_id = payroll_calendar_id;
    m_payroll_calendar_id_isSet = true;
}

bool OAIEmployee::is_payroll_calendar_id_Set() const{
    return m_payroll_calendar_id_isSet;
}

bool OAIEmployee::is_payroll_calendar_id_Valid() const{
    return m_payroll_calendar_id_isValid;
}

QString OAIEmployee::getPhone() const {
    return m_phone;
}
void OAIEmployee::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIEmployee::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIEmployee::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIEmployee::getStartDate() const {
    return m_start_date;
}
void OAIEmployee::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIEmployee::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIEmployee::is_start_date_Valid() const{
    return m_start_date_isValid;
}

OAIEmployeeStatus OAIEmployee::getStatus() const {
    return m_status;
}
void OAIEmployee::setStatus(const OAIEmployeeStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEmployee::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEmployee::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAISuperMembership> OAIEmployee::getSuperMemberships() const {
    return m_super_memberships;
}
void OAIEmployee::setSuperMemberships(const QList<OAISuperMembership> &super_memberships) {
    m_super_memberships = super_memberships;
    m_super_memberships_isSet = true;
}

bool OAIEmployee::is_super_memberships_Set() const{
    return m_super_memberships_isSet;
}

bool OAIEmployee::is_super_memberships_Valid() const{
    return m_super_memberships_isValid;
}

OAITaxDeclaration OAIEmployee::getTaxDeclaration() const {
    return m_tax_declaration;
}
void OAIEmployee::setTaxDeclaration(const OAITaxDeclaration &tax_declaration) {
    m_tax_declaration = tax_declaration;
    m_tax_declaration_isSet = true;
}

bool OAIEmployee::is_tax_declaration_Set() const{
    return m_tax_declaration_isSet;
}

bool OAIEmployee::is_tax_declaration_Valid() const{
    return m_tax_declaration_isValid;
}

QString OAIEmployee::getTerminationDate() const {
    return m_termination_date;
}
void OAIEmployee::setTerminationDate(const QString &termination_date) {
    m_termination_date = termination_date;
    m_termination_date_isSet = true;
}

bool OAIEmployee::is_termination_date_Set() const{
    return m_termination_date_isSet;
}

bool OAIEmployee::is_termination_date_Valid() const{
    return m_termination_date_isValid;
}

QString OAIEmployee::getTitle() const {
    return m_title;
}
void OAIEmployee::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEmployee::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEmployee::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIEmployee::getTwitterUserName() const {
    return m_twitter_user_name;
}
void OAIEmployee::setTwitterUserName(const QString &twitter_user_name) {
    m_twitter_user_name = twitter_user_name;
    m_twitter_user_name_isSet = true;
}

bool OAIEmployee::is_twitter_user_name_Set() const{
    return m_twitter_user_name_isSet;
}

bool OAIEmployee::is_twitter_user_name_Valid() const{
    return m_twitter_user_name_isValid;
}

QString OAIEmployee::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIEmployee::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIEmployee::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIEmployee::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

QList<OAIValidationError> OAIEmployee::getValidationErrors() const {
    return m_validation_errors;
}
void OAIEmployee::setValidationErrors(const QList<OAIValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIEmployee::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIEmployee::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAIEmployee::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bank_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_authorised_to_approve_leave_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_authorised_to_approve_timesheets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leave_balances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_leave_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_middle_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opening_balances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordinary_earnings_rate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payroll_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_super_memberships.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_declaration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmployee::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_of_birth_isValid && m_first_name_isValid && m_last_name_isValid && true;
}

} // namespace OpenAPI
