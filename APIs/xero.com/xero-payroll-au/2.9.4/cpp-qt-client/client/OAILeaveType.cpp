/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeaveType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeaveType::OAILeaveType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeaveType::OAILeaveType() {
    this->initializeModel();
}

OAILeaveType::~OAILeaveType() {}

void OAILeaveType::initializeModel() {

    m_current_record_isSet = false;
    m_current_record_isValid = false;

    m_is_paid_leave_isSet = false;
    m_is_paid_leave_isValid = false;

    m_leave_loading_rate_isSet = false;
    m_leave_loading_rate_isValid = false;

    m_leave_type_id_isSet = false;
    m_leave_type_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_normal_entitlement_isSet = false;
    m_normal_entitlement_isValid = false;

    m_show_on_payslip_isSet = false;
    m_show_on_payslip_isValid = false;

    m_type_of_units_isSet = false;
    m_type_of_units_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;
}

void OAILeaveType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeaveType::fromJsonObject(QJsonObject json) {

    m_current_record_isValid = ::OpenAPI::fromJsonValue(m_current_record, json[QString("CurrentRecord")]);
    m_current_record_isSet = !json[QString("CurrentRecord")].isNull() && m_current_record_isValid;

    m_is_paid_leave_isValid = ::OpenAPI::fromJsonValue(m_is_paid_leave, json[QString("IsPaidLeave")]);
    m_is_paid_leave_isSet = !json[QString("IsPaidLeave")].isNull() && m_is_paid_leave_isValid;

    m_leave_loading_rate_isValid = ::OpenAPI::fromJsonValue(m_leave_loading_rate, json[QString("LeaveLoadingRate")]);
    m_leave_loading_rate_isSet = !json[QString("LeaveLoadingRate")].isNull() && m_leave_loading_rate_isValid;

    m_leave_type_id_isValid = ::OpenAPI::fromJsonValue(m_leave_type_id, json[QString("LeaveTypeID")]);
    m_leave_type_id_isSet = !json[QString("LeaveTypeID")].isNull() && m_leave_type_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_normal_entitlement_isValid = ::OpenAPI::fromJsonValue(m_normal_entitlement, json[QString("NormalEntitlement")]);
    m_normal_entitlement_isSet = !json[QString("NormalEntitlement")].isNull() && m_normal_entitlement_isValid;

    m_show_on_payslip_isValid = ::OpenAPI::fromJsonValue(m_show_on_payslip, json[QString("ShowOnPayslip")]);
    m_show_on_payslip_isSet = !json[QString("ShowOnPayslip")].isNull() && m_show_on_payslip_isValid;

    m_type_of_units_isValid = ::OpenAPI::fromJsonValue(m_type_of_units, json[QString("TypeOfUnits")]);
    m_type_of_units_isSet = !json[QString("TypeOfUnits")].isNull() && m_type_of_units_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;
}

QString OAILeaveType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeaveType::asJsonObject() const {
    QJsonObject obj;
    if (m_current_record_isSet) {
        obj.insert(QString("CurrentRecord"), ::OpenAPI::toJsonValue(m_current_record));
    }
    if (m_is_paid_leave_isSet) {
        obj.insert(QString("IsPaidLeave"), ::OpenAPI::toJsonValue(m_is_paid_leave));
    }
    if (m_leave_loading_rate_isSet) {
        obj.insert(QString("LeaveLoadingRate"), ::OpenAPI::toJsonValue(m_leave_loading_rate));
    }
    if (m_leave_type_id_isSet) {
        obj.insert(QString("LeaveTypeID"), ::OpenAPI::toJsonValue(m_leave_type_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_normal_entitlement_isSet) {
        obj.insert(QString("NormalEntitlement"), ::OpenAPI::toJsonValue(m_normal_entitlement));
    }
    if (m_show_on_payslip_isSet) {
        obj.insert(QString("ShowOnPayslip"), ::OpenAPI::toJsonValue(m_show_on_payslip));
    }
    if (m_type_of_units_isSet) {
        obj.insert(QString("TypeOfUnits"), ::OpenAPI::toJsonValue(m_type_of_units));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    return obj;
}

bool OAILeaveType::isCurrentRecord() const {
    return m_current_record;
}
void OAILeaveType::setCurrentRecord(const bool &current_record) {
    m_current_record = current_record;
    m_current_record_isSet = true;
}

bool OAILeaveType::is_current_record_Set() const{
    return m_current_record_isSet;
}

bool OAILeaveType::is_current_record_Valid() const{
    return m_current_record_isValid;
}

bool OAILeaveType::isIsPaidLeave() const {
    return m_is_paid_leave;
}
void OAILeaveType::setIsPaidLeave(const bool &is_paid_leave) {
    m_is_paid_leave = is_paid_leave;
    m_is_paid_leave_isSet = true;
}

bool OAILeaveType::is_is_paid_leave_Set() const{
    return m_is_paid_leave_isSet;
}

bool OAILeaveType::is_is_paid_leave_Valid() const{
    return m_is_paid_leave_isValid;
}

double OAILeaveType::getLeaveLoadingRate() const {
    return m_leave_loading_rate;
}
void OAILeaveType::setLeaveLoadingRate(const double &leave_loading_rate) {
    m_leave_loading_rate = leave_loading_rate;
    m_leave_loading_rate_isSet = true;
}

bool OAILeaveType::is_leave_loading_rate_Set() const{
    return m_leave_loading_rate_isSet;
}

bool OAILeaveType::is_leave_loading_rate_Valid() const{
    return m_leave_loading_rate_isValid;
}

QString OAILeaveType::getLeaveTypeId() const {
    return m_leave_type_id;
}
void OAILeaveType::setLeaveTypeId(const QString &leave_type_id) {
    m_leave_type_id = leave_type_id;
    m_leave_type_id_isSet = true;
}

bool OAILeaveType::is_leave_type_id_Set() const{
    return m_leave_type_id_isSet;
}

bool OAILeaveType::is_leave_type_id_Valid() const{
    return m_leave_type_id_isValid;
}

QString OAILeaveType::getName() const {
    return m_name;
}
void OAILeaveType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILeaveType::is_name_Set() const{
    return m_name_isSet;
}

bool OAILeaveType::is_name_Valid() const{
    return m_name_isValid;
}

double OAILeaveType::getNormalEntitlement() const {
    return m_normal_entitlement;
}
void OAILeaveType::setNormalEntitlement(const double &normal_entitlement) {
    m_normal_entitlement = normal_entitlement;
    m_normal_entitlement_isSet = true;
}

bool OAILeaveType::is_normal_entitlement_Set() const{
    return m_normal_entitlement_isSet;
}

bool OAILeaveType::is_normal_entitlement_Valid() const{
    return m_normal_entitlement_isValid;
}

bool OAILeaveType::isShowOnPayslip() const {
    return m_show_on_payslip;
}
void OAILeaveType::setShowOnPayslip(const bool &show_on_payslip) {
    m_show_on_payslip = show_on_payslip;
    m_show_on_payslip_isSet = true;
}

bool OAILeaveType::is_show_on_payslip_Set() const{
    return m_show_on_payslip_isSet;
}

bool OAILeaveType::is_show_on_payslip_Valid() const{
    return m_show_on_payslip_isValid;
}

QString OAILeaveType::getTypeOfUnits() const {
    return m_type_of_units;
}
void OAILeaveType::setTypeOfUnits(const QString &type_of_units) {
    m_type_of_units = type_of_units;
    m_type_of_units_isSet = true;
}

bool OAILeaveType::is_type_of_units_Set() const{
    return m_type_of_units_isSet;
}

bool OAILeaveType::is_type_of_units_Valid() const{
    return m_type_of_units_isValid;
}

QString OAILeaveType::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAILeaveType::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAILeaveType::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAILeaveType::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

bool OAILeaveType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_paid_leave_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leave_loading_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leave_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_normal_entitlement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_on_payslip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeaveType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
