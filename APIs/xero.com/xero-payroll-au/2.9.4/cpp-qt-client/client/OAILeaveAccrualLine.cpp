/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeaveAccrualLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeaveAccrualLine::OAILeaveAccrualLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeaveAccrualLine::OAILeaveAccrualLine() {
    this->initializeModel();
}

OAILeaveAccrualLine::~OAILeaveAccrualLine() {}

void OAILeaveAccrualLine::initializeModel() {

    m_auto_calculate_isSet = false;
    m_auto_calculate_isValid = false;

    m_leave_type_id_isSet = false;
    m_leave_type_id_isValid = false;

    m_number_of_units_isSet = false;
    m_number_of_units_isValid = false;
}

void OAILeaveAccrualLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeaveAccrualLine::fromJsonObject(QJsonObject json) {

    m_auto_calculate_isValid = ::OpenAPI::fromJsonValue(m_auto_calculate, json[QString("AutoCalculate")]);
    m_auto_calculate_isSet = !json[QString("AutoCalculate")].isNull() && m_auto_calculate_isValid;

    m_leave_type_id_isValid = ::OpenAPI::fromJsonValue(m_leave_type_id, json[QString("LeaveTypeID")]);
    m_leave_type_id_isSet = !json[QString("LeaveTypeID")].isNull() && m_leave_type_id_isValid;

    m_number_of_units_isValid = ::OpenAPI::fromJsonValue(m_number_of_units, json[QString("NumberOfUnits")]);
    m_number_of_units_isSet = !json[QString("NumberOfUnits")].isNull() && m_number_of_units_isValid;
}

QString OAILeaveAccrualLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeaveAccrualLine::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_calculate_isSet) {
        obj.insert(QString("AutoCalculate"), ::OpenAPI::toJsonValue(m_auto_calculate));
    }
    if (m_leave_type_id_isSet) {
        obj.insert(QString("LeaveTypeID"), ::OpenAPI::toJsonValue(m_leave_type_id));
    }
    if (m_number_of_units_isSet) {
        obj.insert(QString("NumberOfUnits"), ::OpenAPI::toJsonValue(m_number_of_units));
    }
    return obj;
}

bool OAILeaveAccrualLine::isAutoCalculate() const {
    return m_auto_calculate;
}
void OAILeaveAccrualLine::setAutoCalculate(const bool &auto_calculate) {
    m_auto_calculate = auto_calculate;
    m_auto_calculate_isSet = true;
}

bool OAILeaveAccrualLine::is_auto_calculate_Set() const{
    return m_auto_calculate_isSet;
}

bool OAILeaveAccrualLine::is_auto_calculate_Valid() const{
    return m_auto_calculate_isValid;
}

QString OAILeaveAccrualLine::getLeaveTypeId() const {
    return m_leave_type_id;
}
void OAILeaveAccrualLine::setLeaveTypeId(const QString &leave_type_id) {
    m_leave_type_id = leave_type_id;
    m_leave_type_id_isSet = true;
}

bool OAILeaveAccrualLine::is_leave_type_id_Set() const{
    return m_leave_type_id_isSet;
}

bool OAILeaveAccrualLine::is_leave_type_id_Valid() const{
    return m_leave_type_id_isValid;
}

double OAILeaveAccrualLine::getNumberOfUnits() const {
    return m_number_of_units;
}
void OAILeaveAccrualLine::setNumberOfUnits(const double &number_of_units) {
    m_number_of_units = number_of_units;
    m_number_of_units_isSet = true;
}

bool OAILeaveAccrualLine::is_number_of_units_Set() const{
    return m_number_of_units_isSet;
}

bool OAILeaveAccrualLine::is_number_of_units_Valid() const{
    return m_number_of_units_isValid;
}

bool OAILeaveAccrualLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_calculate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leave_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeaveAccrualLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
