/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEarningsType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEarningsType::OAIEarningsType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEarningsType::OAIEarningsType() {
    this->initializeModel();
}

OAIEarningsType::~OAIEarningsType() {}

void OAIEarningsType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEarningsType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEarningsType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("FIXED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsType::FIXED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ORDINARYTIMEEARNINGS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsType::ORDINARYTIMEEARNINGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OVERTIMEEARNINGS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsType::OVERTIMEEARNINGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ALLOWANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsType::ALLOWANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LUMPSUMD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsType::LUMPSUMD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EMPLOYMENTTERMINATIONPAYMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsType::EMPLOYMENTTERMINATIONPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LUMPSUMA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsType::LUMPSUMA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LUMPSUMB", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsType::LUMPSUMB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BONUSESANDCOMMISSIONS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsType::BONUSESANDCOMMISSIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LUMPSUME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsType::LUMPSUME;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEarningsType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEarningsType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEarningsType::FIXED:
            val = "FIXED";
            break;
        case eOAIEarningsType::ORDINARYTIMEEARNINGS:
            val = "ORDINARYTIMEEARNINGS";
            break;
        case eOAIEarningsType::OVERTIMEEARNINGS:
            val = "OVERTIMEEARNINGS";
            break;
        case eOAIEarningsType::ALLOWANCE:
            val = "ALLOWANCE";
            break;
        case eOAIEarningsType::LUMPSUMD:
            val = "LUMPSUMD";
            break;
        case eOAIEarningsType::EMPLOYMENTTERMINATIONPAYMENT:
            val = "EMPLOYMENTTERMINATIONPAYMENT";
            break;
        case eOAIEarningsType::LUMPSUMA:
            val = "LUMPSUMA";
            break;
        case eOAIEarningsType::LUMPSUMB:
            val = "LUMPSUMB";
            break;
        case eOAIEarningsType::BONUSESANDCOMMISSIONS:
            val = "BONUSESANDCOMMISSIONS";
            break;
        case eOAIEarningsType::LUMPSUME:
            val = "LUMPSUME";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEarningsType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEarningsType::eOAIEarningsType OAIEarningsType::getValue() const {
    return m_value;
}

void OAIEarningsType::setValue(const OAIEarningsType::eOAIEarningsType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEarningsType::isSet() const {
    
    return m_value_isSet;
}

bool OAIEarningsType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
