/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeaveEarningsLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeaveEarningsLine::OAILeaveEarningsLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeaveEarningsLine::OAILeaveEarningsLine() {
    this->initializeModel();
}

OAILeaveEarningsLine::~OAILeaveEarningsLine() {}

void OAILeaveEarningsLine::initializeModel() {

    m_earnings_rate_id_isSet = false;
    m_earnings_rate_id_isValid = false;

    m_number_of_units_isSet = false;
    m_number_of_units_isValid = false;

    m_rate_per_unit_isSet = false;
    m_rate_per_unit_isValid = false;
}

void OAILeaveEarningsLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeaveEarningsLine::fromJsonObject(QJsonObject json) {

    m_earnings_rate_id_isValid = ::OpenAPI::fromJsonValue(m_earnings_rate_id, json[QString("EarningsRateID")]);
    m_earnings_rate_id_isSet = !json[QString("EarningsRateID")].isNull() && m_earnings_rate_id_isValid;

    m_number_of_units_isValid = ::OpenAPI::fromJsonValue(m_number_of_units, json[QString("NumberOfUnits")]);
    m_number_of_units_isSet = !json[QString("NumberOfUnits")].isNull() && m_number_of_units_isValid;

    m_rate_per_unit_isValid = ::OpenAPI::fromJsonValue(m_rate_per_unit, json[QString("RatePerUnit")]);
    m_rate_per_unit_isSet = !json[QString("RatePerUnit")].isNull() && m_rate_per_unit_isValid;
}

QString OAILeaveEarningsLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeaveEarningsLine::asJsonObject() const {
    QJsonObject obj;
    if (m_earnings_rate_id_isSet) {
        obj.insert(QString("EarningsRateID"), ::OpenAPI::toJsonValue(m_earnings_rate_id));
    }
    if (m_number_of_units_isSet) {
        obj.insert(QString("NumberOfUnits"), ::OpenAPI::toJsonValue(m_number_of_units));
    }
    if (m_rate_per_unit_isSet) {
        obj.insert(QString("RatePerUnit"), ::OpenAPI::toJsonValue(m_rate_per_unit));
    }
    return obj;
}

QString OAILeaveEarningsLine::getEarningsRateId() const {
    return m_earnings_rate_id;
}
void OAILeaveEarningsLine::setEarningsRateId(const QString &earnings_rate_id) {
    m_earnings_rate_id = earnings_rate_id;
    m_earnings_rate_id_isSet = true;
}

bool OAILeaveEarningsLine::is_earnings_rate_id_Set() const{
    return m_earnings_rate_id_isSet;
}

bool OAILeaveEarningsLine::is_earnings_rate_id_Valid() const{
    return m_earnings_rate_id_isValid;
}

double OAILeaveEarningsLine::getNumberOfUnits() const {
    return m_number_of_units;
}
void OAILeaveEarningsLine::setNumberOfUnits(const double &number_of_units) {
    m_number_of_units = number_of_units;
    m_number_of_units_isSet = true;
}

bool OAILeaveEarningsLine::is_number_of_units_Set() const{
    return m_number_of_units_isSet;
}

bool OAILeaveEarningsLine::is_number_of_units_Valid() const{
    return m_number_of_units_isValid;
}

double OAILeaveEarningsLine::getRatePerUnit() const {
    return m_rate_per_unit;
}
void OAILeaveEarningsLine::setRatePerUnit(const double &rate_per_unit) {
    m_rate_per_unit = rate_per_unit;
    m_rate_per_unit_isSet = true;
}

bool OAILeaveEarningsLine::is_rate_per_unit_Set() const{
    return m_rate_per_unit_isSet;
}

bool OAILeaveEarningsLine::is_rate_per_unit_Valid() const{
    return m_rate_per_unit_isValid;
}

bool OAILeaveEarningsLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_earnings_rate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_per_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeaveEarningsLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
