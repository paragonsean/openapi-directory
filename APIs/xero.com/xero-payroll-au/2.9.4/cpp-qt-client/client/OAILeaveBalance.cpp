/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeaveBalance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeaveBalance::OAILeaveBalance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeaveBalance::OAILeaveBalance() {
    this->initializeModel();
}

OAILeaveBalance::~OAILeaveBalance() {}

void OAILeaveBalance::initializeModel() {

    m_leave_name_isSet = false;
    m_leave_name_isValid = false;

    m_leave_type_id_isSet = false;
    m_leave_type_id_isValid = false;

    m_number_of_units_isSet = false;
    m_number_of_units_isValid = false;

    m_type_of_units_isSet = false;
    m_type_of_units_isValid = false;
}

void OAILeaveBalance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeaveBalance::fromJsonObject(QJsonObject json) {

    m_leave_name_isValid = ::OpenAPI::fromJsonValue(m_leave_name, json[QString("LeaveName")]);
    m_leave_name_isSet = !json[QString("LeaveName")].isNull() && m_leave_name_isValid;

    m_leave_type_id_isValid = ::OpenAPI::fromJsonValue(m_leave_type_id, json[QString("LeaveTypeID")]);
    m_leave_type_id_isSet = !json[QString("LeaveTypeID")].isNull() && m_leave_type_id_isValid;

    m_number_of_units_isValid = ::OpenAPI::fromJsonValue(m_number_of_units, json[QString("NumberOfUnits")]);
    m_number_of_units_isSet = !json[QString("NumberOfUnits")].isNull() && m_number_of_units_isValid;

    m_type_of_units_isValid = ::OpenAPI::fromJsonValue(m_type_of_units, json[QString("TypeOfUnits")]);
    m_type_of_units_isSet = !json[QString("TypeOfUnits")].isNull() && m_type_of_units_isValid;
}

QString OAILeaveBalance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeaveBalance::asJsonObject() const {
    QJsonObject obj;
    if (m_leave_name_isSet) {
        obj.insert(QString("LeaveName"), ::OpenAPI::toJsonValue(m_leave_name));
    }
    if (m_leave_type_id_isSet) {
        obj.insert(QString("LeaveTypeID"), ::OpenAPI::toJsonValue(m_leave_type_id));
    }
    if (m_number_of_units_isSet) {
        obj.insert(QString("NumberOfUnits"), ::OpenAPI::toJsonValue(m_number_of_units));
    }
    if (m_type_of_units_isSet) {
        obj.insert(QString("TypeOfUnits"), ::OpenAPI::toJsonValue(m_type_of_units));
    }
    return obj;
}

QString OAILeaveBalance::getLeaveName() const {
    return m_leave_name;
}
void OAILeaveBalance::setLeaveName(const QString &leave_name) {
    m_leave_name = leave_name;
    m_leave_name_isSet = true;
}

bool OAILeaveBalance::is_leave_name_Set() const{
    return m_leave_name_isSet;
}

bool OAILeaveBalance::is_leave_name_Valid() const{
    return m_leave_name_isValid;
}

QString OAILeaveBalance::getLeaveTypeId() const {
    return m_leave_type_id;
}
void OAILeaveBalance::setLeaveTypeId(const QString &leave_type_id) {
    m_leave_type_id = leave_type_id;
    m_leave_type_id_isSet = true;
}

bool OAILeaveBalance::is_leave_type_id_Set() const{
    return m_leave_type_id_isSet;
}

bool OAILeaveBalance::is_leave_type_id_Valid() const{
    return m_leave_type_id_isValid;
}

double OAILeaveBalance::getNumberOfUnits() const {
    return m_number_of_units;
}
void OAILeaveBalance::setNumberOfUnits(const double &number_of_units) {
    m_number_of_units = number_of_units;
    m_number_of_units_isSet = true;
}

bool OAILeaveBalance::is_number_of_units_Set() const{
    return m_number_of_units_isSet;
}

bool OAILeaveBalance::is_number_of_units_Valid() const{
    return m_number_of_units_isValid;
}

QString OAILeaveBalance::getTypeOfUnits() const {
    return m_type_of_units;
}
void OAILeaveBalance::setTypeOfUnits(const QString &type_of_units) {
    m_type_of_units = type_of_units;
    m_type_of_units_isSet = true;
}

bool OAILeaveBalance::is_type_of_units_Set() const{
    return m_type_of_units_isSet;
}

bool OAILeaveBalance::is_type_of_units_Valid() const{
    return m_type_of_units_isValid;
}

bool OAILeaveBalance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_leave_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leave_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeaveBalance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
