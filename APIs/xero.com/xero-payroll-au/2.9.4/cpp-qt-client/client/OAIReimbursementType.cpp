/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReimbursementType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReimbursementType::OAIReimbursementType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReimbursementType::OAIReimbursementType() {
    this->initializeModel();
}

OAIReimbursementType::~OAIReimbursementType() {}

void OAIReimbursementType::initializeModel() {

    m_account_code_isSet = false;
    m_account_code_isValid = false;

    m_current_record_isSet = false;
    m_current_record_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reimbursement_type_id_isSet = false;
    m_reimbursement_type_id_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;
}

void OAIReimbursementType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReimbursementType::fromJsonObject(QJsonObject json) {

    m_account_code_isValid = ::OpenAPI::fromJsonValue(m_account_code, json[QString("AccountCode")]);
    m_account_code_isSet = !json[QString("AccountCode")].isNull() && m_account_code_isValid;

    m_current_record_isValid = ::OpenAPI::fromJsonValue(m_current_record, json[QString("CurrentRecord")]);
    m_current_record_isSet = !json[QString("CurrentRecord")].isNull() && m_current_record_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_reimbursement_type_id_isValid = ::OpenAPI::fromJsonValue(m_reimbursement_type_id, json[QString("ReimbursementTypeID")]);
    m_reimbursement_type_id_isSet = !json[QString("ReimbursementTypeID")].isNull() && m_reimbursement_type_id_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("UpdatedDateUTC")]);
    m_updated_date_utc_isSet = !json[QString("UpdatedDateUTC")].isNull() && m_updated_date_utc_isValid;
}

QString OAIReimbursementType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReimbursementType::asJsonObject() const {
    QJsonObject obj;
    if (m_account_code_isSet) {
        obj.insert(QString("AccountCode"), ::OpenAPI::toJsonValue(m_account_code));
    }
    if (m_current_record_isSet) {
        obj.insert(QString("CurrentRecord"), ::OpenAPI::toJsonValue(m_current_record));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reimbursement_type_id_isSet) {
        obj.insert(QString("ReimbursementTypeID"), ::OpenAPI::toJsonValue(m_reimbursement_type_id));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("UpdatedDateUTC"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    return obj;
}

QString OAIReimbursementType::getAccountCode() const {
    return m_account_code;
}
void OAIReimbursementType::setAccountCode(const QString &account_code) {
    m_account_code = account_code;
    m_account_code_isSet = true;
}

bool OAIReimbursementType::is_account_code_Set() const{
    return m_account_code_isSet;
}

bool OAIReimbursementType::is_account_code_Valid() const{
    return m_account_code_isValid;
}

bool OAIReimbursementType::isCurrentRecord() const {
    return m_current_record;
}
void OAIReimbursementType::setCurrentRecord(const bool &current_record) {
    m_current_record = current_record;
    m_current_record_isSet = true;
}

bool OAIReimbursementType::is_current_record_Set() const{
    return m_current_record_isSet;
}

bool OAIReimbursementType::is_current_record_Valid() const{
    return m_current_record_isValid;
}

QString OAIReimbursementType::getName() const {
    return m_name;
}
void OAIReimbursementType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReimbursementType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReimbursementType::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIReimbursementType::getReimbursementTypeId() const {
    return m_reimbursement_type_id;
}
void OAIReimbursementType::setReimbursementTypeId(const QString &reimbursement_type_id) {
    m_reimbursement_type_id = reimbursement_type_id;
    m_reimbursement_type_id_isSet = true;
}

bool OAIReimbursementType::is_reimbursement_type_id_Set() const{
    return m_reimbursement_type_id_isSet;
}

bool OAIReimbursementType::is_reimbursement_type_id_Valid() const{
    return m_reimbursement_type_id_isValid;
}

QString OAIReimbursementType::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIReimbursementType::setUpdatedDateUtc(const QString &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIReimbursementType::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIReimbursementType::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

bool OAIReimbursementType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reimbursement_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReimbursementType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
