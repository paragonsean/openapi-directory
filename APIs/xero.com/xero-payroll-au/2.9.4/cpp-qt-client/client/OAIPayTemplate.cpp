/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayTemplate::OAIPayTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayTemplate::OAIPayTemplate() {
    this->initializeModel();
}

OAIPayTemplate::~OAIPayTemplate() {}

void OAIPayTemplate::initializeModel() {

    m_deduction_lines_isSet = false;
    m_deduction_lines_isValid = false;

    m_earnings_lines_isSet = false;
    m_earnings_lines_isValid = false;

    m_leave_lines_isSet = false;
    m_leave_lines_isValid = false;

    m_reimbursement_lines_isSet = false;
    m_reimbursement_lines_isValid = false;

    m_super_lines_isSet = false;
    m_super_lines_isValid = false;
}

void OAIPayTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayTemplate::fromJsonObject(QJsonObject json) {

    m_deduction_lines_isValid = ::OpenAPI::fromJsonValue(m_deduction_lines, json[QString("DeductionLines")]);
    m_deduction_lines_isSet = !json[QString("DeductionLines")].isNull() && m_deduction_lines_isValid;

    m_earnings_lines_isValid = ::OpenAPI::fromJsonValue(m_earnings_lines, json[QString("EarningsLines")]);
    m_earnings_lines_isSet = !json[QString("EarningsLines")].isNull() && m_earnings_lines_isValid;

    m_leave_lines_isValid = ::OpenAPI::fromJsonValue(m_leave_lines, json[QString("LeaveLines")]);
    m_leave_lines_isSet = !json[QString("LeaveLines")].isNull() && m_leave_lines_isValid;

    m_reimbursement_lines_isValid = ::OpenAPI::fromJsonValue(m_reimbursement_lines, json[QString("ReimbursementLines")]);
    m_reimbursement_lines_isSet = !json[QString("ReimbursementLines")].isNull() && m_reimbursement_lines_isValid;

    m_super_lines_isValid = ::OpenAPI::fromJsonValue(m_super_lines, json[QString("SuperLines")]);
    m_super_lines_isSet = !json[QString("SuperLines")].isNull() && m_super_lines_isValid;
}

QString OAIPayTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_deduction_lines.size() > 0) {
        obj.insert(QString("DeductionLines"), ::OpenAPI::toJsonValue(m_deduction_lines));
    }
    if (m_earnings_lines.size() > 0) {
        obj.insert(QString("EarningsLines"), ::OpenAPI::toJsonValue(m_earnings_lines));
    }
    if (m_leave_lines.size() > 0) {
        obj.insert(QString("LeaveLines"), ::OpenAPI::toJsonValue(m_leave_lines));
    }
    if (m_reimbursement_lines.size() > 0) {
        obj.insert(QString("ReimbursementLines"), ::OpenAPI::toJsonValue(m_reimbursement_lines));
    }
    if (m_super_lines.size() > 0) {
        obj.insert(QString("SuperLines"), ::OpenAPI::toJsonValue(m_super_lines));
    }
    return obj;
}

QList<OAIDeductionLine> OAIPayTemplate::getDeductionLines() const {
    return m_deduction_lines;
}
void OAIPayTemplate::setDeductionLines(const QList<OAIDeductionLine> &deduction_lines) {
    m_deduction_lines = deduction_lines;
    m_deduction_lines_isSet = true;
}

bool OAIPayTemplate::is_deduction_lines_Set() const{
    return m_deduction_lines_isSet;
}

bool OAIPayTemplate::is_deduction_lines_Valid() const{
    return m_deduction_lines_isValid;
}

QList<OAIEarningsLine> OAIPayTemplate::getEarningsLines() const {
    return m_earnings_lines;
}
void OAIPayTemplate::setEarningsLines(const QList<OAIEarningsLine> &earnings_lines) {
    m_earnings_lines = earnings_lines;
    m_earnings_lines_isSet = true;
}

bool OAIPayTemplate::is_earnings_lines_Set() const{
    return m_earnings_lines_isSet;
}

bool OAIPayTemplate::is_earnings_lines_Valid() const{
    return m_earnings_lines_isValid;
}

QList<OAILeaveLine> OAIPayTemplate::getLeaveLines() const {
    return m_leave_lines;
}
void OAIPayTemplate::setLeaveLines(const QList<OAILeaveLine> &leave_lines) {
    m_leave_lines = leave_lines;
    m_leave_lines_isSet = true;
}

bool OAIPayTemplate::is_leave_lines_Set() const{
    return m_leave_lines_isSet;
}

bool OAIPayTemplate::is_leave_lines_Valid() const{
    return m_leave_lines_isValid;
}

QList<OAIReimbursementLine> OAIPayTemplate::getReimbursementLines() const {
    return m_reimbursement_lines;
}
void OAIPayTemplate::setReimbursementLines(const QList<OAIReimbursementLine> &reimbursement_lines) {
    m_reimbursement_lines = reimbursement_lines;
    m_reimbursement_lines_isSet = true;
}

bool OAIPayTemplate::is_reimbursement_lines_Set() const{
    return m_reimbursement_lines_isSet;
}

bool OAIPayTemplate::is_reimbursement_lines_Valid() const{
    return m_reimbursement_lines_isValid;
}

QList<OAISuperLine> OAIPayTemplate::getSuperLines() const {
    return m_super_lines;
}
void OAIPayTemplate::setSuperLines(const QList<OAISuperLine> &super_lines) {
    m_super_lines = super_lines;
    m_super_lines_isSet = true;
}

bool OAIPayTemplate::is_super_lines_Set() const{
    return m_super_lines_isSet;
}

bool OAIPayTemplate::is_super_lines_Valid() const{
    return m_super_lines_isValid;
}

bool OAIPayTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deduction_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_earnings_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_leave_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reimbursement_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_super_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
