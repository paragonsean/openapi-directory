/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIException from '../model/APIException';
import Employee from '../model/Employee';
import Employees from '../model/Employees';
import LeaveApplication from '../model/LeaveApplication';
import LeaveApplications from '../model/LeaveApplications';
import PayItem from '../model/PayItem';
import PayItems from '../model/PayItems';
import PayRun from '../model/PayRun';
import PayRuns from '../model/PayRuns';
import PayrollCalendar from '../model/PayrollCalendar';
import PayrollCalendars from '../model/PayrollCalendars';
import PayslipLines from '../model/PayslipLines';
import PayslipObject from '../model/PayslipObject';
import Payslips from '../model/Payslips';
import SettingsObject from '../model/SettingsObject';
import SuperFund from '../model/SuperFund';
import SuperFundProducts from '../model/SuperFundProducts';
import SuperFunds from '../model/SuperFunds';
import Timesheet from '../model/Timesheet';
import TimesheetObject from '../model/TimesheetObject';
import Timesheets from '../model/Timesheets';

/**
* PayrollAu service.
* @module api/PayrollAuApi
* @version 2.9.4
*/
export default class PayrollAuApi {

    /**
    * Constructs a new PayrollAuApi. 
    * @alias module:api/PayrollAuApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createEmployee operation.
     * @callback module:api/PayrollAuApi~createEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Employees} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a payroll employee
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Array.<module:model/Employee>} employee 
     * @param {module:api/PayrollAuApi~createEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Employees}
     */
    createEmployee(xeroTenantId, employee, callback) {
      let postBody = employee;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createEmployee");
      }
      // verify the required parameter 'employee' is set
      if (employee === undefined || employee === null) {
        throw new Error("Missing the required parameter 'employee' when calling createEmployee");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Employees;
      return this.apiClient.callApi(
        '/Employees', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLeaveApplication operation.
     * @callback module:api/PayrollAuApi~createLeaveApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeaveApplications} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a leave application
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Array.<module:model/LeaveApplication>} leaveApplication 
     * @param {module:api/PayrollAuApi~createLeaveApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeaveApplications}
     */
    createLeaveApplication(xeroTenantId, leaveApplication, callback) {
      let postBody = leaveApplication;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createLeaveApplication");
      }
      // verify the required parameter 'leaveApplication' is set
      if (leaveApplication === undefined || leaveApplication === null) {
        throw new Error("Missing the required parameter 'leaveApplication' when calling createLeaveApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeaveApplications;
      return this.apiClient.callApi(
        '/LeaveApplications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPayItem operation.
     * @callback module:api/PayrollAuApi~createPayItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayItems} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a pay item
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/PayItem} payItem 
     * @param {module:api/PayrollAuApi~createPayItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayItems}
     */
    createPayItem(xeroTenantId, payItem, callback) {
      let postBody = payItem;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createPayItem");
      }
      // verify the required parameter 'payItem' is set
      if (payItem === undefined || payItem === null) {
        throw new Error("Missing the required parameter 'payItem' when calling createPayItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PayItems;
      return this.apiClient.callApi(
        '/PayItems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPayRun operation.
     * @callback module:api/PayrollAuApi~createPayRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayRuns} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a pay run
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Array.<module:model/PayRun>} payRun 
     * @param {module:api/PayrollAuApi~createPayRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayRuns}
     */
    createPayRun(xeroTenantId, payRun, callback) {
      let postBody = payRun;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createPayRun");
      }
      // verify the required parameter 'payRun' is set
      if (payRun === undefined || payRun === null) {
        throw new Error("Missing the required parameter 'payRun' when calling createPayRun");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PayRuns;
      return this.apiClient.callApi(
        '/PayRuns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPayrollCalendar operation.
     * @callback module:api/PayrollAuApi~createPayrollCalendarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayrollCalendars} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Payroll Calendar
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Array.<module:model/PayrollCalendar>} payrollCalendar 
     * @param {module:api/PayrollAuApi~createPayrollCalendarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayrollCalendars}
     */
    createPayrollCalendar(xeroTenantId, payrollCalendar, callback) {
      let postBody = payrollCalendar;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createPayrollCalendar");
      }
      // verify the required parameter 'payrollCalendar' is set
      if (payrollCalendar === undefined || payrollCalendar === null) {
        throw new Error("Missing the required parameter 'payrollCalendar' when calling createPayrollCalendar");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PayrollCalendars;
      return this.apiClient.callApi(
        '/PayrollCalendars', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSuperfund operation.
     * @callback module:api/PayrollAuApi~createSuperfundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuperFunds} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a superfund
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Array.<module:model/SuperFund>} superFund 
     * @param {module:api/PayrollAuApi~createSuperfundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuperFunds}
     */
    createSuperfund(xeroTenantId, superFund, callback) {
      let postBody = superFund;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createSuperfund");
      }
      // verify the required parameter 'superFund' is set
      if (superFund === undefined || superFund === null) {
        throw new Error("Missing the required parameter 'superFund' when calling createSuperfund");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuperFunds;
      return this.apiClient.callApi(
        '/Superfunds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTimesheet operation.
     * @callback module:api/PayrollAuApi~createTimesheetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Timesheets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a timesheet
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Array.<module:model/Timesheet>} timesheet 
     * @param {module:api/PayrollAuApi~createTimesheetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Timesheets}
     */
    createTimesheet(xeroTenantId, timesheet, callback) {
      let postBody = timesheet;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createTimesheet");
      }
      // verify the required parameter 'timesheet' is set
      if (timesheet === undefined || timesheet === null) {
        throw new Error("Missing the required parameter 'timesheet' when calling createTimesheet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Timesheets;
      return this.apiClient.callApi(
        '/Timesheets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployee operation.
     * @callback module:api/PayrollAuApi~getEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Employees} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an employee's detail by unique employee id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} employeeID Employee id for single object
     * @param {module:api/PayrollAuApi~getEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Employees}
     */
    getEmployee(xeroTenantId, employeeID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getEmployee");
      }
      // verify the required parameter 'employeeID' is set
      if (employeeID === undefined || employeeID === null) {
        throw new Error("Missing the required parameter 'employeeID' when calling getEmployee");
      }

      let pathParams = {
        'EmployeeID': employeeID
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Employees;
      return this.apiClient.callApi(
        '/Employees/{EmployeeID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployees operation.
     * @callback module:api/PayrollAuApi~getEmployeesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Employees} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches payroll employees
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {String} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {Number} [page] e.g. page=1 – Up to 100 employees will be returned in a single API call
     * @param {module:api/PayrollAuApi~getEmployeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Employees}
     */
    getEmployees(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getEmployees");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'page': opts['page']
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Employees;
      return this.apiClient.callApi(
        '/Employees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLeaveApplication operation.
     * @callback module:api/PayrollAuApi~getLeaveApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeaveApplications} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a leave application by a unique leave application id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} leaveApplicationID Leave Application id for single object
     * @param {module:api/PayrollAuApi~getLeaveApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeaveApplications}
     */
    getLeaveApplication(xeroTenantId, leaveApplicationID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getLeaveApplication");
      }
      // verify the required parameter 'leaveApplicationID' is set
      if (leaveApplicationID === undefined || leaveApplicationID === null) {
        throw new Error("Missing the required parameter 'leaveApplicationID' when calling getLeaveApplication");
      }

      let pathParams = {
        'LeaveApplicationID': leaveApplicationID
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LeaveApplications;
      return this.apiClient.callApi(
        '/LeaveApplications/{LeaveApplicationID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLeaveApplications operation.
     * @callback module:api/PayrollAuApi~getLeaveApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeaveApplications} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves leave applications
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {String} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {Number} [page] e.g. page=1 – Up to 100 objects will be returned in a single API call
     * @param {module:api/PayrollAuApi~getLeaveApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeaveApplications}
     */
    getLeaveApplications(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getLeaveApplications");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'page': opts['page']
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LeaveApplications;
      return this.apiClient.callApi(
        '/LeaveApplications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayItems operation.
     * @callback module:api/PayrollAuApi~getPayItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayItems} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves pay items
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {String} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {Number} [page] e.g. page=1 – Up to 100 objects will be returned in a single API call
     * @param {module:api/PayrollAuApi~getPayItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayItems}
     */
    getPayItems(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPayItems");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'page': opts['page']
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PayItems;
      return this.apiClient.callApi(
        '/PayItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayRun operation.
     * @callback module:api/PayrollAuApi~getPayRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayRuns} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a pay run by using a unique pay run id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} payRunID PayRun id for single object
     * @param {module:api/PayrollAuApi~getPayRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayRuns}
     */
    getPayRun(xeroTenantId, payRunID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPayRun");
      }
      // verify the required parameter 'payRunID' is set
      if (payRunID === undefined || payRunID === null) {
        throw new Error("Missing the required parameter 'payRunID' when calling getPayRun");
      }

      let pathParams = {
        'PayRunID': payRunID
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PayRuns;
      return this.apiClient.callApi(
        '/PayRuns/{PayRunID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayRuns operation.
     * @callback module:api/PayrollAuApi~getPayRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayRuns} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves pay runs
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {String} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {Number} [page] e.g. page=1 – Up to 100 PayRuns will be returned in a single API call
     * @param {module:api/PayrollAuApi~getPayRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayRuns}
     */
    getPayRuns(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPayRuns");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'page': opts['page']
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PayRuns;
      return this.apiClient.callApi(
        '/PayRuns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayrollCalendar operation.
     * @callback module:api/PayrollAuApi~getPayrollCalendarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayrollCalendars} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves payroll calendar by using a unique payroll calendar ID
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} payrollCalendarID Payroll Calendar id for single object
     * @param {module:api/PayrollAuApi~getPayrollCalendarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayrollCalendars}
     */
    getPayrollCalendar(xeroTenantId, payrollCalendarID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPayrollCalendar");
      }
      // verify the required parameter 'payrollCalendarID' is set
      if (payrollCalendarID === undefined || payrollCalendarID === null) {
        throw new Error("Missing the required parameter 'payrollCalendarID' when calling getPayrollCalendar");
      }

      let pathParams = {
        'PayrollCalendarID': payrollCalendarID
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PayrollCalendars;
      return this.apiClient.callApi(
        '/PayrollCalendars/{PayrollCalendarID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayrollCalendars operation.
     * @callback module:api/PayrollAuApi~getPayrollCalendarsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayrollCalendars} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves payroll calendars
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {String} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {Number} [page] e.g. page=1 – Up to 100 objects will be returned in a single API call
     * @param {module:api/PayrollAuApi~getPayrollCalendarsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayrollCalendars}
     */
    getPayrollCalendars(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPayrollCalendars");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'page': opts['page']
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PayrollCalendars;
      return this.apiClient.callApi(
        '/PayrollCalendars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayslip operation.
     * @callback module:api/PayrollAuApi~getPayslipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayslipObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves for a payslip by a unique payslip id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} payslipID Payslip id for single object
     * @param {module:api/PayrollAuApi~getPayslipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayslipObject}
     */
    getPayslip(xeroTenantId, payslipID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getPayslip");
      }
      // verify the required parameter 'payslipID' is set
      if (payslipID === undefined || payslipID === null) {
        throw new Error("Missing the required parameter 'payslipID' when calling getPayslip");
      }

      let pathParams = {
        'PayslipID': payslipID
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PayslipObject;
      return this.apiClient.callApi(
        '/Payslip/{PayslipID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSettings operation.
     * @callback module:api/PayrollAuApi~getSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SettingsObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves payroll settings
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:api/PayrollAuApi~getSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SettingsObject}
     */
    getSettings(xeroTenantId, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SettingsObject;
      return this.apiClient.callApi(
        '/Settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuperfund operation.
     * @callback module:api/PayrollAuApi~getSuperfundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuperFunds} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a superfund by using a unique superfund ID
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} superFundID Superfund id for single object
     * @param {module:api/PayrollAuApi~getSuperfundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuperFunds}
     */
    getSuperfund(xeroTenantId, superFundID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getSuperfund");
      }
      // verify the required parameter 'superFundID' is set
      if (superFundID === undefined || superFundID === null) {
        throw new Error("Missing the required parameter 'superFundID' when calling getSuperfund");
      }

      let pathParams = {
        'SuperFundID': superFundID
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuperFunds;
      return this.apiClient.callApi(
        '/Superfunds/{SuperFundID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuperfundProducts operation.
     * @callback module:api/PayrollAuApi~getSuperfundProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuperFundProducts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves superfund products
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {String} [ABN] The ABN of the Regulated SuperFund
     * @param {String} [USI] The USI of the Regulated SuperFund
     * @param {module:api/PayrollAuApi~getSuperfundProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuperFundProducts}
     */
    getSuperfundProducts(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getSuperfundProducts");
      }

      let pathParams = {
      };
      let queryParams = {
        'ABN': opts['ABN'],
        'USI': opts['USI']
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuperFundProducts;
      return this.apiClient.callApi(
        '/SuperfundProducts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuperfunds operation.
     * @callback module:api/PayrollAuApi~getSuperfundsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuperFunds} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves superfunds
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {String} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {Number} [page] e.g. page=1 – Up to 100 SuperFunds will be returned in a single API call
     * @param {module:api/PayrollAuApi~getSuperfundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuperFunds}
     */
    getSuperfunds(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getSuperfunds");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'page': opts['page']
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuperFunds;
      return this.apiClient.callApi(
        '/Superfunds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTimesheet operation.
     * @callback module:api/PayrollAuApi~getTimesheetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimesheetObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a timesheet by using a unique timesheet id
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} timesheetID Timesheet id for single object
     * @param {module:api/PayrollAuApi~getTimesheetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimesheetObject}
     */
    getTimesheet(xeroTenantId, timesheetID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getTimesheet");
      }
      // verify the required parameter 'timesheetID' is set
      if (timesheetID === undefined || timesheetID === null) {
        throw new Error("Missing the required parameter 'timesheetID' when calling getTimesheet");
      }

      let pathParams = {
        'TimesheetID': timesheetID
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TimesheetObject;
      return this.apiClient.callApi(
        '/Timesheets/{TimesheetID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTimesheets operation.
     * @callback module:api/PayrollAuApi~getTimesheetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Timesheets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves timesheets
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {String} [ifModifiedSince] Only records created or modified since this timestamp will be returned
     * @param {String} [where] Filter by an any element
     * @param {String} [order] Order by an any element
     * @param {Number} [page] e.g. page=1 – Up to 100 timesheets will be returned in a single API call
     * @param {module:api/PayrollAuApi~getTimesheetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Timesheets}
     */
    getTimesheets(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getTimesheets");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'order': opts['order'],
        'page': opts['page']
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId,
        'If-Modified-Since': opts['ifModifiedSince']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Timesheets;
      return this.apiClient.callApi(
        '/Timesheets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmployee operation.
     * @callback module:api/PayrollAuApi~updateEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Employees} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an employee's detail
     * Update properties on a single employee
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} employeeID Employee id for single object
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/Employee>} [employee] 
     * @param {module:api/PayrollAuApi~updateEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Employees}
     */
    updateEmployee(xeroTenantId, employeeID, opts, callback) {
      opts = opts || {};
      let postBody = opts['employee'];
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateEmployee");
      }
      // verify the required parameter 'employeeID' is set
      if (employeeID === undefined || employeeID === null) {
        throw new Error("Missing the required parameter 'employeeID' when calling updateEmployee");
      }

      let pathParams = {
        'EmployeeID': employeeID
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Employees;
      return this.apiClient.callApi(
        '/Employees/{EmployeeID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLeaveApplication operation.
     * @callback module:api/PayrollAuApi~updateLeaveApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeaveApplications} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific leave application
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} leaveApplicationID Leave Application id for single object
     * @param {Array.<module:model/LeaveApplication>} leaveApplication 
     * @param {module:api/PayrollAuApi~updateLeaveApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeaveApplications}
     */
    updateLeaveApplication(xeroTenantId, leaveApplicationID, leaveApplication, callback) {
      let postBody = leaveApplication;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateLeaveApplication");
      }
      // verify the required parameter 'leaveApplicationID' is set
      if (leaveApplicationID === undefined || leaveApplicationID === null) {
        throw new Error("Missing the required parameter 'leaveApplicationID' when calling updateLeaveApplication");
      }
      // verify the required parameter 'leaveApplication' is set
      if (leaveApplication === undefined || leaveApplication === null) {
        throw new Error("Missing the required parameter 'leaveApplication' when calling updateLeaveApplication");
      }

      let pathParams = {
        'LeaveApplicationID': leaveApplicationID
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeaveApplications;
      return this.apiClient.callApi(
        '/LeaveApplications/{LeaveApplicationID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePayRun operation.
     * @callback module:api/PayrollAuApi~updatePayRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayRuns} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a pay run
     * Update properties on a single PayRun
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} payRunID PayRun id for single object
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PayRun>} [payRun] 
     * @param {module:api/PayrollAuApi~updatePayRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayRuns}
     */
    updatePayRun(xeroTenantId, payRunID, opts, callback) {
      opts = opts || {};
      let postBody = opts['payRun'];
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updatePayRun");
      }
      // verify the required parameter 'payRunID' is set
      if (payRunID === undefined || payRunID === null) {
        throw new Error("Missing the required parameter 'payRunID' when calling updatePayRun");
      }

      let pathParams = {
        'PayRunID': payRunID
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PayRuns;
      return this.apiClient.callApi(
        '/PayRuns/{PayRunID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePayslip operation.
     * @callback module:api/PayrollAuApi~updatePayslipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payslips} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a payslip
     * Update lines on a single payslips
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} payslipID Payslip id for single object
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PayslipLines>} [payslipLines] 
     * @param {module:api/PayrollAuApi~updatePayslipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Payslips}
     */
    updatePayslip(xeroTenantId, payslipID, opts, callback) {
      opts = opts || {};
      let postBody = opts['payslipLines'];
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updatePayslip");
      }
      // verify the required parameter 'payslipID' is set
      if (payslipID === undefined || payslipID === null) {
        throw new Error("Missing the required parameter 'payslipID' when calling updatePayslip");
      }

      let pathParams = {
        'PayslipID': payslipID
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Payslips;
      return this.apiClient.callApi(
        '/Payslip/{PayslipID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSuperfund operation.
     * @callback module:api/PayrollAuApi~updateSuperfundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuperFunds} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a superfund
     * Update properties on a single Superfund
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} superFundID Superfund id for single object
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/SuperFund>} [superFund] 
     * @param {module:api/PayrollAuApi~updateSuperfundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuperFunds}
     */
    updateSuperfund(xeroTenantId, superFundID, opts, callback) {
      opts = opts || {};
      let postBody = opts['superFund'];
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateSuperfund");
      }
      // verify the required parameter 'superFundID' is set
      if (superFundID === undefined || superFundID === null) {
        throw new Error("Missing the required parameter 'superFundID' when calling updateSuperfund");
      }

      let pathParams = {
        'SuperFundID': superFundID
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuperFunds;
      return this.apiClient.callApi(
        '/Superfunds/{SuperFundID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTimesheet operation.
     * @callback module:api/PayrollAuApi~updateTimesheetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Timesheets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a timesheet
     * Update properties on a single timesheet
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} timesheetID Timesheet id for single object
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/Timesheet>} [timesheet] 
     * @param {module:api/PayrollAuApi~updateTimesheetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Timesheets}
     */
    updateTimesheet(xeroTenantId, timesheetID, opts, callback) {
      opts = opts || {};
      let postBody = opts['timesheet'];
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling updateTimesheet");
      }
      // verify the required parameter 'timesheetID' is set
      if (timesheetID === undefined || timesheetID === null) {
        throw new Error("Missing the required parameter 'timesheetID' when calling updateTimesheet");
      }

      let pathParams = {
        'TimesheetID': timesheetID
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Timesheets;
      return this.apiClient.callApi(
        '/Timesheets/{TimesheetID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
