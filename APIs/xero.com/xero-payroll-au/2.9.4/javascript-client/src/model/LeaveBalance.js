/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LeaveBalance model module.
 * @module model/LeaveBalance
 * @version 2.9.4
 */
class LeaveBalance {
    /**
     * Constructs a new <code>LeaveBalance</code>.
     * @alias module:model/LeaveBalance
     */
    constructor() { 
        
        LeaveBalance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LeaveBalance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LeaveBalance} obj Optional instance to populate.
     * @return {module:model/LeaveBalance} The populated <code>LeaveBalance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LeaveBalance();

            if (data.hasOwnProperty('LeaveName')) {
                obj['LeaveName'] = ApiClient.convertToType(data['LeaveName'], 'String');
            }
            if (data.hasOwnProperty('LeaveTypeID')) {
                obj['LeaveTypeID'] = ApiClient.convertToType(data['LeaveTypeID'], 'String');
            }
            if (data.hasOwnProperty('NumberOfUnits')) {
                obj['NumberOfUnits'] = ApiClient.convertToType(data['NumberOfUnits'], 'Number');
            }
            if (data.hasOwnProperty('TypeOfUnits')) {
                obj['TypeOfUnits'] = ApiClient.convertToType(data['TypeOfUnits'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LeaveBalance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LeaveBalance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['LeaveName'] && !(typeof data['LeaveName'] === 'string' || data['LeaveName'] instanceof String)) {
            throw new Error("Expected the field `LeaveName` to be a primitive type in the JSON string but got " + data['LeaveName']);
        }
        // ensure the json data is a string
        if (data['LeaveTypeID'] && !(typeof data['LeaveTypeID'] === 'string' || data['LeaveTypeID'] instanceof String)) {
            throw new Error("Expected the field `LeaveTypeID` to be a primitive type in the JSON string but got " + data['LeaveTypeID']);
        }
        // ensure the json data is a string
        if (data['TypeOfUnits'] && !(typeof data['TypeOfUnits'] === 'string' || data['TypeOfUnits'] instanceof String)) {
            throw new Error("Expected the field `TypeOfUnits` to be a primitive type in the JSON string but got " + data['TypeOfUnits']);
        }

        return true;
    }


}



/**
 * The name of the leave type
 * @member {String} LeaveName
 */
LeaveBalance.prototype['LeaveName'] = undefined;

/**
 * Identifier of the leave type (see PayItems)
 * @member {String} LeaveTypeID
 */
LeaveBalance.prototype['LeaveTypeID'] = undefined;

/**
 * The balance of the leave available
 * @member {Number} NumberOfUnits
 */
LeaveBalance.prototype['NumberOfUnits'] = undefined;

/**
 * The type of units as specified by the LeaveType (see PayItems)
 * @member {String} TypeOfUnits
 */
LeaveBalance.prototype['TypeOfUnits'] = undefined;






export default LeaveBalance;

