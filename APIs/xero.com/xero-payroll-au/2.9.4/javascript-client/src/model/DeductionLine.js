/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeductionTypeCalculationType from './DeductionTypeCalculationType';

/**
 * The DeductionLine model module.
 * @module model/DeductionLine
 * @version 2.9.4
 */
class DeductionLine {
    /**
     * Constructs a new <code>DeductionLine</code>.
     * @alias module:model/DeductionLine
     * @param calculationType {module:model/DeductionTypeCalculationType} 
     * @param deductionTypeID {String} Xero deduction type identifier
     */
    constructor(calculationType, deductionTypeID) { 
        
        DeductionLine.initialize(this, calculationType, deductionTypeID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, calculationType, deductionTypeID) { 
        obj['CalculationType'] = calculationType;
        obj['DeductionTypeID'] = deductionTypeID;
    }

    /**
     * Constructs a <code>DeductionLine</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeductionLine} obj Optional instance to populate.
     * @return {module:model/DeductionLine} The populated <code>DeductionLine</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeductionLine();

            if (data.hasOwnProperty('Amount')) {
                obj['Amount'] = ApiClient.convertToType(data['Amount'], 'Number');
            }
            if (data.hasOwnProperty('CalculationType')) {
                obj['CalculationType'] = DeductionTypeCalculationType.constructFromObject(data['CalculationType']);
            }
            if (data.hasOwnProperty('DeductionTypeID')) {
                obj['DeductionTypeID'] = ApiClient.convertToType(data['DeductionTypeID'], 'String');
            }
            if (data.hasOwnProperty('NumberOfUnits')) {
                obj['NumberOfUnits'] = ApiClient.convertToType(data['NumberOfUnits'], 'Number');
            }
            if (data.hasOwnProperty('Percentage')) {
                obj['Percentage'] = ApiClient.convertToType(data['Percentage'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeductionLine</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeductionLine</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeductionLine.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['DeductionTypeID'] && !(typeof data['DeductionTypeID'] === 'string' || data['DeductionTypeID'] instanceof String)) {
            throw new Error("Expected the field `DeductionTypeID` to be a primitive type in the JSON string but got " + data['DeductionTypeID']);
        }

        return true;
    }


}

DeductionLine.RequiredProperties = ["CalculationType", "DeductionTypeID"];

/**
 * Deduction type amount
 * @member {Number} Amount
 */
DeductionLine.prototype['Amount'] = undefined;

/**
 * @member {module:model/DeductionTypeCalculationType} CalculationType
 */
DeductionLine.prototype['CalculationType'] = undefined;

/**
 * Xero deduction type identifier
 * @member {String} DeductionTypeID
 */
DeductionLine.prototype['DeductionTypeID'] = undefined;

/**
 * Deduction number of units
 * @member {Number} NumberOfUnits
 */
DeductionLine.prototype['NumberOfUnits'] = undefined;

/**
 * The Percentage of the Deduction
 * @member {Number} Percentage
 */
DeductionLine.prototype['Percentage'] = undefined;






export default DeductionLine;

