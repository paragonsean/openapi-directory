/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmploymentBasis from './EmploymentBasis';
import ResidencyStatus from './ResidencyStatus';
import TFNExemptionType from './TFNExemptionType';

/**
 * The TaxDeclaration model module.
 * @module model/TaxDeclaration
 * @version 2.9.4
 */
class TaxDeclaration {
    /**
     * Constructs a new <code>TaxDeclaration</code>.
     * @alias module:model/TaxDeclaration
     */
    constructor() { 
        
        TaxDeclaration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaxDeclaration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaxDeclaration} obj Optional instance to populate.
     * @return {module:model/TaxDeclaration} The populated <code>TaxDeclaration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaxDeclaration();

            if (data.hasOwnProperty('ApprovedWithholdingVariationPercentage')) {
                obj['ApprovedWithholdingVariationPercentage'] = ApiClient.convertToType(data['ApprovedWithholdingVariationPercentage'], 'Number');
            }
            if (data.hasOwnProperty('AustralianResidentForTaxPurposes')) {
                obj['AustralianResidentForTaxPurposes'] = ApiClient.convertToType(data['AustralianResidentForTaxPurposes'], 'Boolean');
            }
            if (data.hasOwnProperty('EligibleToReceiveLeaveLoading')) {
                obj['EligibleToReceiveLeaveLoading'] = ApiClient.convertToType(data['EligibleToReceiveLeaveLoading'], 'Boolean');
            }
            if (data.hasOwnProperty('EmployeeID')) {
                obj['EmployeeID'] = ApiClient.convertToType(data['EmployeeID'], 'String');
            }
            if (data.hasOwnProperty('EmploymentBasis')) {
                obj['EmploymentBasis'] = EmploymentBasis.constructFromObject(data['EmploymentBasis']);
            }
            if (data.hasOwnProperty('HasHELPDebt')) {
                obj['HasHELPDebt'] = ApiClient.convertToType(data['HasHELPDebt'], 'Boolean');
            }
            if (data.hasOwnProperty('HasSFSSDebt')) {
                obj['HasSFSSDebt'] = ApiClient.convertToType(data['HasSFSSDebt'], 'Boolean');
            }
            if (data.hasOwnProperty('HasStudentStartupLoan')) {
                obj['HasStudentStartupLoan'] = ApiClient.convertToType(data['HasStudentStartupLoan'], 'Boolean');
            }
            if (data.hasOwnProperty('HasTradeSupportLoanDebt')) {
                obj['HasTradeSupportLoanDebt'] = ApiClient.convertToType(data['HasTradeSupportLoanDebt'], 'Boolean');
            }
            if (data.hasOwnProperty('ResidencyStatus')) {
                obj['ResidencyStatus'] = ResidencyStatus.constructFromObject(data['ResidencyStatus']);
            }
            if (data.hasOwnProperty('TFNExemptionType')) {
                obj['TFNExemptionType'] = TFNExemptionType.constructFromObject(data['TFNExemptionType']);
            }
            if (data.hasOwnProperty('TaxFileNumber')) {
                obj['TaxFileNumber'] = ApiClient.convertToType(data['TaxFileNumber'], 'String');
            }
            if (data.hasOwnProperty('TaxFreeThresholdClaimed')) {
                obj['TaxFreeThresholdClaimed'] = ApiClient.convertToType(data['TaxFreeThresholdClaimed'], 'Boolean');
            }
            if (data.hasOwnProperty('TaxOffsetEstimatedAmount')) {
                obj['TaxOffsetEstimatedAmount'] = ApiClient.convertToType(data['TaxOffsetEstimatedAmount'], 'Number');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('UpwardVariationTaxWithholdingAmount')) {
                obj['UpwardVariationTaxWithholdingAmount'] = ApiClient.convertToType(data['UpwardVariationTaxWithholdingAmount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaxDeclaration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaxDeclaration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['EmployeeID'] && !(typeof data['EmployeeID'] === 'string' || data['EmployeeID'] instanceof String)) {
            throw new Error("Expected the field `EmployeeID` to be a primitive type in the JSON string but got " + data['EmployeeID']);
        }
        // ensure the json data is a string
        if (data['TaxFileNumber'] && !(typeof data['TaxFileNumber'] === 'string' || data['TaxFileNumber'] instanceof String)) {
            throw new Error("Expected the field `TaxFileNumber` to be a primitive type in the JSON string but got " + data['TaxFileNumber']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }

        return true;
    }


}



/**
 * If the employee has approved withholding variation. e.g (0 - 100)
 * @member {Number} ApprovedWithholdingVariationPercentage
 */
TaxDeclaration.prototype['ApprovedWithholdingVariationPercentage'] = undefined;

/**
 * If the employee is Australian resident for tax purposes. e.g true or false
 * @member {Boolean} AustralianResidentForTaxPurposes
 */
TaxDeclaration.prototype['AustralianResidentForTaxPurposes'] = undefined;

/**
 * If the employee is eligible to receive an additional percentage on top of ordinary earnings when they take leave (typically 17.5%). e.g true or false
 * @member {Boolean} EligibleToReceiveLeaveLoading
 */
TaxDeclaration.prototype['EligibleToReceiveLeaveLoading'] = undefined;

/**
 * Address line 1 for employee home address
 * @member {String} EmployeeID
 */
TaxDeclaration.prototype['EmployeeID'] = undefined;

/**
 * @member {module:model/EmploymentBasis} EmploymentBasis
 */
TaxDeclaration.prototype['EmploymentBasis'] = undefined;

/**
 * If employee has HECS or HELP debt. e.g true or false
 * @member {Boolean} HasHELPDebt
 */
TaxDeclaration.prototype['HasHELPDebt'] = undefined;

/**
 * If employee has financial supplement debt. e.g true or false
 * @member {Boolean} HasSFSSDebt
 */
TaxDeclaration.prototype['HasSFSSDebt'] = undefined;

/**
 * If the employee is eligible for student startup loan rules
 * @member {Boolean} HasStudentStartupLoan
 */
TaxDeclaration.prototype['HasStudentStartupLoan'] = undefined;

/**
 * If employee has trade support loan. e.g true or false
 * @member {Boolean} HasTradeSupportLoanDebt
 */
TaxDeclaration.prototype['HasTradeSupportLoanDebt'] = undefined;

/**
 * @member {module:model/ResidencyStatus} ResidencyStatus
 */
TaxDeclaration.prototype['ResidencyStatus'] = undefined;

/**
 * @member {module:model/TFNExemptionType} TFNExemptionType
 */
TaxDeclaration.prototype['TFNExemptionType'] = undefined;

/**
 * The tax file number e.g 123123123.
 * @member {String} TaxFileNumber
 */
TaxDeclaration.prototype['TaxFileNumber'] = undefined;

/**
 * If tax free threshold claimed. e.g true or false
 * @member {Boolean} TaxFreeThresholdClaimed
 */
TaxDeclaration.prototype['TaxFreeThresholdClaimed'] = undefined;

/**
 * If has tax offset estimated then the tax offset estimated amount. e.g 100
 * @member {Number} TaxOffsetEstimatedAmount
 */
TaxDeclaration.prototype['TaxOffsetEstimatedAmount'] = undefined;

/**
 * Last modified timestamp
 * @member {String} UpdatedDateUTC
 */
TaxDeclaration.prototype['UpdatedDateUTC'] = undefined;

/**
 * If the employee has requested that additional tax be withheld each pay run. e.g 50
 * @member {Number} UpwardVariationTaxWithholdingAmount
 */
TaxDeclaration.prototype['UpwardVariationTaxWithholdingAmount'] = undefined;






export default TaxDeclaration;

