/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeductionType from './DeductionType';
import EarningsRate from './EarningsRate';
import LeaveType from './LeaveType';
import ReimbursementType from './ReimbursementType';

/**
 * The PayItem model module.
 * @module model/PayItem
 * @version 2.9.4
 */
class PayItem {
    /**
     * Constructs a new <code>PayItem</code>.
     * @alias module:model/PayItem
     */
    constructor() { 
        
        PayItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PayItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PayItem} obj Optional instance to populate.
     * @return {module:model/PayItem} The populated <code>PayItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PayItem();

            if (data.hasOwnProperty('DeductionTypes')) {
                obj['DeductionTypes'] = ApiClient.convertToType(data['DeductionTypes'], [DeductionType]);
            }
            if (data.hasOwnProperty('EarningsRates')) {
                obj['EarningsRates'] = ApiClient.convertToType(data['EarningsRates'], [EarningsRate]);
            }
            if (data.hasOwnProperty('LeaveTypes')) {
                obj['LeaveTypes'] = ApiClient.convertToType(data['LeaveTypes'], [LeaveType]);
            }
            if (data.hasOwnProperty('ReimbursementTypes')) {
                obj['ReimbursementTypes'] = ApiClient.convertToType(data['ReimbursementTypes'], [ReimbursementType]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PayItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PayItem</code>.
     */
    static validateJSON(data) {
        if (data['DeductionTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['DeductionTypes'])) {
                throw new Error("Expected the field `DeductionTypes` to be an array in the JSON data but got " + data['DeductionTypes']);
            }
            // validate the optional field `DeductionTypes` (array)
            for (const item of data['DeductionTypes']) {
                DeductionType.validateJSON(item);
            };
        }
        if (data['EarningsRates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['EarningsRates'])) {
                throw new Error("Expected the field `EarningsRates` to be an array in the JSON data but got " + data['EarningsRates']);
            }
            // validate the optional field `EarningsRates` (array)
            for (const item of data['EarningsRates']) {
                EarningsRate.validateJSON(item);
            };
        }
        if (data['LeaveTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LeaveTypes'])) {
                throw new Error("Expected the field `LeaveTypes` to be an array in the JSON data but got " + data['LeaveTypes']);
            }
            // validate the optional field `LeaveTypes` (array)
            for (const item of data['LeaveTypes']) {
                LeaveType.validateJSON(item);
            };
        }
        if (data['ReimbursementTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ReimbursementTypes'])) {
                throw new Error("Expected the field `ReimbursementTypes` to be an array in the JSON data but got " + data['ReimbursementTypes']);
            }
            // validate the optional field `ReimbursementTypes` (array)
            for (const item of data['ReimbursementTypes']) {
                ReimbursementType.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/DeductionType>} DeductionTypes
 */
PayItem.prototype['DeductionTypes'] = undefined;

/**
 * @member {Array.<module:model/EarningsRate>} EarningsRates
 */
PayItem.prototype['EarningsRates'] = undefined;

/**
 * @member {Array.<module:model/LeaveType>} LeaveTypes
 */
PayItem.prototype['LeaveTypes'] = undefined;

/**
 * @member {Array.<module:model/ReimbursementType>} ReimbursementTypes
 */
PayItem.prototype['ReimbursementTypes'] = undefined;






export default PayItem;

