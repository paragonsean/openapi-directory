/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PayslipSummary model module.
 * @module model/PayslipSummary
 * @version 2.9.4
 */
class PayslipSummary {
    /**
     * Constructs a new <code>PayslipSummary</code>.
     * @alias module:model/PayslipSummary
     */
    constructor() { 
        
        PayslipSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PayslipSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PayslipSummary} obj Optional instance to populate.
     * @return {module:model/PayslipSummary} The populated <code>PayslipSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PayslipSummary();

            if (data.hasOwnProperty('Deductions')) {
                obj['Deductions'] = ApiClient.convertToType(data['Deductions'], 'Number');
            }
            if (data.hasOwnProperty('EmployeeGroup')) {
                obj['EmployeeGroup'] = ApiClient.convertToType(data['EmployeeGroup'], 'String');
            }
            if (data.hasOwnProperty('EmployeeID')) {
                obj['EmployeeID'] = ApiClient.convertToType(data['EmployeeID'], 'String');
            }
            if (data.hasOwnProperty('FirstName')) {
                obj['FirstName'] = ApiClient.convertToType(data['FirstName'], 'String');
            }
            if (data.hasOwnProperty('LastName')) {
                obj['LastName'] = ApiClient.convertToType(data['LastName'], 'String');
            }
            if (data.hasOwnProperty('NetPay')) {
                obj['NetPay'] = ApiClient.convertToType(data['NetPay'], 'Number');
            }
            if (data.hasOwnProperty('PayslipID')) {
                obj['PayslipID'] = ApiClient.convertToType(data['PayslipID'], 'String');
            }
            if (data.hasOwnProperty('Reimbursements')) {
                obj['Reimbursements'] = ApiClient.convertToType(data['Reimbursements'], 'Number');
            }
            if (data.hasOwnProperty('Super')) {
                obj['Super'] = ApiClient.convertToType(data['Super'], 'Number');
            }
            if (data.hasOwnProperty('Tax')) {
                obj['Tax'] = ApiClient.convertToType(data['Tax'], 'Number');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('Wages')) {
                obj['Wages'] = ApiClient.convertToType(data['Wages'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PayslipSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PayslipSummary</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['EmployeeGroup'] && !(typeof data['EmployeeGroup'] === 'string' || data['EmployeeGroup'] instanceof String)) {
            throw new Error("Expected the field `EmployeeGroup` to be a primitive type in the JSON string but got " + data['EmployeeGroup']);
        }
        // ensure the json data is a string
        if (data['EmployeeID'] && !(typeof data['EmployeeID'] === 'string' || data['EmployeeID'] instanceof String)) {
            throw new Error("Expected the field `EmployeeID` to be a primitive type in the JSON string but got " + data['EmployeeID']);
        }
        // ensure the json data is a string
        if (data['FirstName'] && !(typeof data['FirstName'] === 'string' || data['FirstName'] instanceof String)) {
            throw new Error("Expected the field `FirstName` to be a primitive type in the JSON string but got " + data['FirstName']);
        }
        // ensure the json data is a string
        if (data['LastName'] && !(typeof data['LastName'] === 'string' || data['LastName'] instanceof String)) {
            throw new Error("Expected the field `LastName` to be a primitive type in the JSON string but got " + data['LastName']);
        }
        // ensure the json data is a string
        if (data['PayslipID'] && !(typeof data['PayslipID'] === 'string' || data['PayslipID'] instanceof String)) {
            throw new Error("Expected the field `PayslipID` to be a primitive type in the JSON string but got " + data['PayslipID']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }

        return true;
    }


}



/**
 * The Deductions for the Payslip
 * @member {Number} Deductions
 */
PayslipSummary.prototype['Deductions'] = undefined;

/**
 * Employee group name
 * @member {String} EmployeeGroup
 */
PayslipSummary.prototype['EmployeeGroup'] = undefined;

/**
 * The Xero identifier for an employee
 * @member {String} EmployeeID
 */
PayslipSummary.prototype['EmployeeID'] = undefined;

/**
 * First name of employee
 * @member {String} FirstName
 */
PayslipSummary.prototype['FirstName'] = undefined;

/**
 * Last name of employee
 * @member {String} LastName
 */
PayslipSummary.prototype['LastName'] = undefined;

/**
 * The NetPay for the Payslip
 * @member {Number} NetPay
 */
PayslipSummary.prototype['NetPay'] = undefined;

/**
 * Xero identifier for the payslip
 * @member {String} PayslipID
 */
PayslipSummary.prototype['PayslipID'] = undefined;

/**
 * The Reimbursements for the Payslip
 * @member {Number} Reimbursements
 */
PayslipSummary.prototype['Reimbursements'] = undefined;

/**
 * The Super for the Payslip
 * @member {Number} Super
 */
PayslipSummary.prototype['Super'] = undefined;

/**
 * The Tax for the Payslip
 * @member {Number} Tax
 */
PayslipSummary.prototype['Tax'] = undefined;

/**
 * Last modified timestamp
 * @member {String} UpdatedDateUTC
 */
PayslipSummary.prototype['UpdatedDateUTC'] = undefined;

/**
 * The Wages for the Payslip
 * @member {Number} Wages
 */
PayslipSummary.prototype['Wages'] = undefined;






export default PayslipSummary;

