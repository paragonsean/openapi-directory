/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LeaveType model module.
 * @module model/LeaveType
 * @version 2.9.4
 */
class LeaveType {
    /**
     * Constructs a new <code>LeaveType</code>.
     * @alias module:model/LeaveType
     */
    constructor() { 
        
        LeaveType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LeaveType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LeaveType} obj Optional instance to populate.
     * @return {module:model/LeaveType} The populated <code>LeaveType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LeaveType();

            if (data.hasOwnProperty('CurrentRecord')) {
                obj['CurrentRecord'] = ApiClient.convertToType(data['CurrentRecord'], 'Boolean');
            }
            if (data.hasOwnProperty('IsPaidLeave')) {
                obj['IsPaidLeave'] = ApiClient.convertToType(data['IsPaidLeave'], 'Boolean');
            }
            if (data.hasOwnProperty('LeaveLoadingRate')) {
                obj['LeaveLoadingRate'] = ApiClient.convertToType(data['LeaveLoadingRate'], 'Number');
            }
            if (data.hasOwnProperty('LeaveTypeID')) {
                obj['LeaveTypeID'] = ApiClient.convertToType(data['LeaveTypeID'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('NormalEntitlement')) {
                obj['NormalEntitlement'] = ApiClient.convertToType(data['NormalEntitlement'], 'Number');
            }
            if (data.hasOwnProperty('ShowOnPayslip')) {
                obj['ShowOnPayslip'] = ApiClient.convertToType(data['ShowOnPayslip'], 'Boolean');
            }
            if (data.hasOwnProperty('TypeOfUnits')) {
                obj['TypeOfUnits'] = ApiClient.convertToType(data['TypeOfUnits'], 'String');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LeaveType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LeaveType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['LeaveTypeID'] && !(typeof data['LeaveTypeID'] === 'string' || data['LeaveTypeID'] instanceof String)) {
            throw new Error("Expected the field `LeaveTypeID` to be a primitive type in the JSON string but got " + data['LeaveTypeID']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['TypeOfUnits'] && !(typeof data['TypeOfUnits'] === 'string' || data['TypeOfUnits'] instanceof String)) {
            throw new Error("Expected the field `TypeOfUnits` to be a primitive type in the JSON string but got " + data['TypeOfUnits']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }

        return true;
    }


}



/**
 * Is the current record
 * @member {Boolean} CurrentRecord
 */
LeaveType.prototype['CurrentRecord'] = undefined;

/**
 * Set this to indicate that an employee will be paid when taking this type of leave
 * @member {Boolean} IsPaidLeave
 */
LeaveType.prototype['IsPaidLeave'] = undefined;

/**
 * Enter an amount here if your organisation pays an additional percentage on top of ordinary earnings when your employees take leave (typically 17.5%)
 * @member {Number} LeaveLoadingRate
 */
LeaveType.prototype['LeaveLoadingRate'] = undefined;

/**
 * Xero identifier
 * @member {String} LeaveTypeID
 */
LeaveType.prototype['LeaveTypeID'] = undefined;

/**
 * Name of the earnings rate (max length = 100)
 * @member {String} Name
 */
LeaveType.prototype['Name'] = undefined;

/**
 * The number of units the employee is entitled to each year
 * @member {Number} NormalEntitlement
 */
LeaveType.prototype['NormalEntitlement'] = undefined;

/**
 * Set this if you want a balance for this leave type to be shown on your employee’s payslips
 * @member {Boolean} ShowOnPayslip
 */
LeaveType.prototype['ShowOnPayslip'] = undefined;

/**
 * The type of units by which leave entitlements are normally tracked. These are typically the same as the type of units used for the employee’s ordinary earnings rate
 * @member {String} TypeOfUnits
 */
LeaveType.prototype['TypeOfUnits'] = undefined;

/**
 * Last modified timestamp
 * @member {String} UpdatedDateUTC
 */
LeaveType.prototype['UpdatedDateUTC'] = undefined;






export default LeaveType;

