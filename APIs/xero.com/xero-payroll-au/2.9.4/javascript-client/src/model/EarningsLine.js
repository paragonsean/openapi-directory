/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EarningsRateCalculationType from './EarningsRateCalculationType';

/**
 * The EarningsLine model module.
 * @module model/EarningsLine
 * @version 2.9.4
 */
class EarningsLine {
    /**
     * Constructs a new <code>EarningsLine</code>.
     * @alias module:model/EarningsLine
     * @param earningsRateID {String} Xero unique id for earnings rate
     */
    constructor(earningsRateID) { 
        
        EarningsLine.initialize(this, earningsRateID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, earningsRateID) { 
        obj['EarningsRateID'] = earningsRateID;
    }

    /**
     * Constructs a <code>EarningsLine</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EarningsLine} obj Optional instance to populate.
     * @return {module:model/EarningsLine} The populated <code>EarningsLine</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EarningsLine();

            if (data.hasOwnProperty('Amount')) {
                obj['Amount'] = ApiClient.convertToType(data['Amount'], 'Number');
            }
            if (data.hasOwnProperty('AnnualSalary')) {
                obj['AnnualSalary'] = ApiClient.convertToType(data['AnnualSalary'], 'Number');
            }
            if (data.hasOwnProperty('CalculationType')) {
                obj['CalculationType'] = EarningsRateCalculationType.constructFromObject(data['CalculationType']);
            }
            if (data.hasOwnProperty('EarningsRateID')) {
                obj['EarningsRateID'] = ApiClient.convertToType(data['EarningsRateID'], 'String');
            }
            if (data.hasOwnProperty('FixedAmount')) {
                obj['FixedAmount'] = ApiClient.convertToType(data['FixedAmount'], 'Number');
            }
            if (data.hasOwnProperty('NormalNumberOfUnits')) {
                obj['NormalNumberOfUnits'] = ApiClient.convertToType(data['NormalNumberOfUnits'], 'Number');
            }
            if (data.hasOwnProperty('NumberOfUnits')) {
                obj['NumberOfUnits'] = ApiClient.convertToType(data['NumberOfUnits'], 'Number');
            }
            if (data.hasOwnProperty('NumberOfUnitsPerWeek')) {
                obj['NumberOfUnitsPerWeek'] = ApiClient.convertToType(data['NumberOfUnitsPerWeek'], 'Number');
            }
            if (data.hasOwnProperty('RatePerUnit')) {
                obj['RatePerUnit'] = ApiClient.convertToType(data['RatePerUnit'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EarningsLine</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EarningsLine</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EarningsLine.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['EarningsRateID'] && !(typeof data['EarningsRateID'] === 'string' || data['EarningsRateID'] instanceof String)) {
            throw new Error("Expected the field `EarningsRateID` to be a primitive type in the JSON string but got " + data['EarningsRateID']);
        }

        return true;
    }


}

EarningsLine.RequiredProperties = ["EarningsRateID"];

/**
 * Earnings rate amount
 * @member {Number} Amount
 */
EarningsLine.prototype['Amount'] = undefined;

/**
 * Annual salary for earnings line
 * @member {Number} AnnualSalary
 */
EarningsLine.prototype['AnnualSalary'] = undefined;

/**
 * @member {module:model/EarningsRateCalculationType} CalculationType
 */
EarningsLine.prototype['CalculationType'] = undefined;

/**
 * Xero unique id for earnings rate
 * @member {String} EarningsRateID
 */
EarningsLine.prototype['EarningsRateID'] = undefined;

/**
 * Earnings rate amount. Only applicable if the EarningsRate RateType is Fixed
 * @member {Number} FixedAmount
 */
EarningsLine.prototype['FixedAmount'] = undefined;

/**
 * Normal number of units for EarningsLine. Applicable when RateType is \"MULTIPLE\"
 * @member {Number} NormalNumberOfUnits
 */
EarningsLine.prototype['NormalNumberOfUnits'] = undefined;

/**
 * Earnings rate number of units.
 * @member {Number} NumberOfUnits
 */
EarningsLine.prototype['NumberOfUnits'] = undefined;

/**
 * number of units for earning line
 * @member {Number} NumberOfUnitsPerWeek
 */
EarningsLine.prototype['NumberOfUnitsPerWeek'] = undefined;

/**
 * Rate per unit of the EarningsLine.
 * @member {Number} RatePerUnit
 */
EarningsLine.prototype['RatePerUnit'] = undefined;






export default EarningsLine;

