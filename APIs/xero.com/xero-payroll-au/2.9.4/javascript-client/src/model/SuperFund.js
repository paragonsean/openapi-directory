/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SuperFundType from './SuperFundType';
import ValidationError from './ValidationError';

/**
 * The SuperFund model module.
 * @module model/SuperFund
 * @version 2.9.4
 */
class SuperFund {
    /**
     * Constructs a new <code>SuperFund</code>.
     * @alias module:model/SuperFund
     * @param type {module:model/SuperFundType} 
     */
    constructor(type) { 
        
        SuperFund.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['Type'] = type;
    }

    /**
     * Constructs a <code>SuperFund</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SuperFund} obj Optional instance to populate.
     * @return {module:model/SuperFund} The populated <code>SuperFund</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SuperFund();

            if (data.hasOwnProperty('ABN')) {
                obj['ABN'] = ApiClient.convertToType(data['ABN'], 'String');
            }
            if (data.hasOwnProperty('AccountName')) {
                obj['AccountName'] = ApiClient.convertToType(data['AccountName'], 'String');
            }
            if (data.hasOwnProperty('AccountNumber')) {
                obj['AccountNumber'] = ApiClient.convertToType(data['AccountNumber'], 'String');
            }
            if (data.hasOwnProperty('BSB')) {
                obj['BSB'] = ApiClient.convertToType(data['BSB'], 'String');
            }
            if (data.hasOwnProperty('ElectronicServiceAddress')) {
                obj['ElectronicServiceAddress'] = ApiClient.convertToType(data['ElectronicServiceAddress'], 'String');
            }
            if (data.hasOwnProperty('EmployerNumber')) {
                obj['EmployerNumber'] = ApiClient.convertToType(data['EmployerNumber'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('SPIN')) {
                obj['SPIN'] = ApiClient.convertToType(data['SPIN'], 'String');
            }
            if (data.hasOwnProperty('SuperFundID')) {
                obj['SuperFundID'] = ApiClient.convertToType(data['SuperFundID'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = SuperFundType.constructFromObject(data['Type']);
            }
            if (data.hasOwnProperty('USI')) {
                obj['USI'] = ApiClient.convertToType(data['USI'], 'String');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SuperFund</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SuperFund</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SuperFund.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ABN'] && !(typeof data['ABN'] === 'string' || data['ABN'] instanceof String)) {
            throw new Error("Expected the field `ABN` to be a primitive type in the JSON string but got " + data['ABN']);
        }
        // ensure the json data is a string
        if (data['AccountName'] && !(typeof data['AccountName'] === 'string' || data['AccountName'] instanceof String)) {
            throw new Error("Expected the field `AccountName` to be a primitive type in the JSON string but got " + data['AccountName']);
        }
        // ensure the json data is a string
        if (data['AccountNumber'] && !(typeof data['AccountNumber'] === 'string' || data['AccountNumber'] instanceof String)) {
            throw new Error("Expected the field `AccountNumber` to be a primitive type in the JSON string but got " + data['AccountNumber']);
        }
        // ensure the json data is a string
        if (data['BSB'] && !(typeof data['BSB'] === 'string' || data['BSB'] instanceof String)) {
            throw new Error("Expected the field `BSB` to be a primitive type in the JSON string but got " + data['BSB']);
        }
        // ensure the json data is a string
        if (data['ElectronicServiceAddress'] && !(typeof data['ElectronicServiceAddress'] === 'string' || data['ElectronicServiceAddress'] instanceof String)) {
            throw new Error("Expected the field `ElectronicServiceAddress` to be a primitive type in the JSON string but got " + data['ElectronicServiceAddress']);
        }
        // ensure the json data is a string
        if (data['EmployerNumber'] && !(typeof data['EmployerNumber'] === 'string' || data['EmployerNumber'] instanceof String)) {
            throw new Error("Expected the field `EmployerNumber` to be a primitive type in the JSON string but got " + data['EmployerNumber']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['SPIN'] && !(typeof data['SPIN'] === 'string' || data['SPIN'] instanceof String)) {
            throw new Error("Expected the field `SPIN` to be a primitive type in the JSON string but got " + data['SPIN']);
        }
        // ensure the json data is a string
        if (data['SuperFundID'] && !(typeof data['SuperFundID'] === 'string' || data['SuperFundID'] instanceof String)) {
            throw new Error("Expected the field `SuperFundID` to be a primitive type in the JSON string but got " + data['SuperFundID']);
        }
        // ensure the json data is a string
        if (data['USI'] && !(typeof data['USI'] === 'string' || data['USI'] instanceof String)) {
            throw new Error("Expected the field `USI` to be a primitive type in the JSON string but got " + data['USI']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}

SuperFund.RequiredProperties = ["Type"];

/**
 * ABN of the self managed super fund
 * @member {String} ABN
 */
SuperFund.prototype['ABN'] = undefined;

/**
 * The account name for the self managed super fund.
 * @member {String} AccountName
 */
SuperFund.prototype['AccountName'] = undefined;

/**
 * The account number for the self managed super fund.
 * @member {String} AccountNumber
 */
SuperFund.prototype['AccountNumber'] = undefined;

/**
 * BSB of the self managed super fund
 * @member {String} BSB
 */
SuperFund.prototype['BSB'] = undefined;

/**
 * The electronic service address for the self managed super fund.
 * @member {String} ElectronicServiceAddress
 */
SuperFund.prototype['ElectronicServiceAddress'] = undefined;

/**
 * Some funds assign a unique number to each employer
 * @member {String} EmployerNumber
 */
SuperFund.prototype['EmployerNumber'] = undefined;

/**
 * Name of the super fund
 * @member {String} Name
 */
SuperFund.prototype['Name'] = undefined;

/**
 * The SPIN of the Regulated SuperFund. This field has been deprecated. It will only be present for legacy superfunds. New superfunds will not have a SPIN value. The USI field should be used instead of SPIN.
 * @member {String} SPIN
 */
SuperFund.prototype['SPIN'] = undefined;

/**
 * Xero identifier for a super fund
 * @member {String} SuperFundID
 */
SuperFund.prototype['SuperFundID'] = undefined;

/**
 * @member {module:model/SuperFundType} Type
 */
SuperFund.prototype['Type'] = undefined;

/**
 * The USI of the Regulated SuperFund
 * @member {String} USI
 */
SuperFund.prototype['USI'] = undefined;

/**
 * Last modified timestamp
 * @member {String} UpdatedDateUTC
 */
SuperFund.prototype['UpdatedDateUTC'] = undefined;

/**
 * Displays array of validation error messages from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
SuperFund.prototype['ValidationErrors'] = undefined;






export default SuperFund;

