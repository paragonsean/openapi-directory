/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TimesheetLine from './TimesheetLine';
import TimesheetStatus from './TimesheetStatus';
import ValidationError from './ValidationError';

/**
 * The Timesheet model module.
 * @module model/Timesheet
 * @version 2.9.4
 */
class Timesheet {
    /**
     * Constructs a new <code>Timesheet</code>.
     * @alias module:model/Timesheet
     * @param employeeID {String} The Xero identifier for an employee
     * @param endDate {String} Period end date (YYYY-MM-DD)
     * @param startDate {String} Period start date (YYYY-MM-DD)
     */
    constructor(employeeID, endDate, startDate) { 
        
        Timesheet.initialize(this, employeeID, endDate, startDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, employeeID, endDate, startDate) { 
        obj['EmployeeID'] = employeeID;
        obj['EndDate'] = endDate;
        obj['StartDate'] = startDate;
    }

    /**
     * Constructs a <code>Timesheet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Timesheet} obj Optional instance to populate.
     * @return {module:model/Timesheet} The populated <code>Timesheet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Timesheet();

            if (data.hasOwnProperty('EmployeeID')) {
                obj['EmployeeID'] = ApiClient.convertToType(data['EmployeeID'], 'String');
            }
            if (data.hasOwnProperty('EndDate')) {
                obj['EndDate'] = ApiClient.convertToType(data['EndDate'], 'String');
            }
            if (data.hasOwnProperty('Hours')) {
                obj['Hours'] = ApiClient.convertToType(data['Hours'], 'Number');
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = TimesheetStatus.constructFromObject(data['Status']);
            }
            if (data.hasOwnProperty('TimesheetID')) {
                obj['TimesheetID'] = ApiClient.convertToType(data['TimesheetID'], 'String');
            }
            if (data.hasOwnProperty('TimesheetLines')) {
                obj['TimesheetLines'] = ApiClient.convertToType(data['TimesheetLines'], [TimesheetLine]);
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Timesheet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Timesheet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Timesheet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['EmployeeID'] && !(typeof data['EmployeeID'] === 'string' || data['EmployeeID'] instanceof String)) {
            throw new Error("Expected the field `EmployeeID` to be a primitive type in the JSON string but got " + data['EmployeeID']);
        }
        // ensure the json data is a string
        if (data['EndDate'] && !(typeof data['EndDate'] === 'string' || data['EndDate'] instanceof String)) {
            throw new Error("Expected the field `EndDate` to be a primitive type in the JSON string but got " + data['EndDate']);
        }
        // ensure the json data is a string
        if (data['StartDate'] && !(typeof data['StartDate'] === 'string' || data['StartDate'] instanceof String)) {
            throw new Error("Expected the field `StartDate` to be a primitive type in the JSON string but got " + data['StartDate']);
        }
        // ensure the json data is a string
        if (data['TimesheetID'] && !(typeof data['TimesheetID'] === 'string' || data['TimesheetID'] instanceof String)) {
            throw new Error("Expected the field `TimesheetID` to be a primitive type in the JSON string but got " + data['TimesheetID']);
        }
        if (data['TimesheetLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['TimesheetLines'])) {
                throw new Error("Expected the field `TimesheetLines` to be an array in the JSON data but got " + data['TimesheetLines']);
            }
            // validate the optional field `TimesheetLines` (array)
            for (const item of data['TimesheetLines']) {
                TimesheetLine.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}

Timesheet.RequiredProperties = ["EmployeeID", "EndDate", "StartDate"];

/**
 * The Xero identifier for an employee
 * @member {String} EmployeeID
 */
Timesheet.prototype['EmployeeID'] = undefined;

/**
 * Period end date (YYYY-MM-DD)
 * @member {String} EndDate
 */
Timesheet.prototype['EndDate'] = undefined;

/**
 * Timesheet total hours
 * @member {Number} Hours
 */
Timesheet.prototype['Hours'] = undefined;

/**
 * Period start date (YYYY-MM-DD)
 * @member {String} StartDate
 */
Timesheet.prototype['StartDate'] = undefined;

/**
 * @member {module:model/TimesheetStatus} Status
 */
Timesheet.prototype['Status'] = undefined;

/**
 * The Xero identifier for a Payroll Timesheet
 * @member {String} TimesheetID
 */
Timesheet.prototype['TimesheetID'] = undefined;

/**
 * @member {Array.<module:model/TimesheetLine>} TimesheetLines
 */
Timesheet.prototype['TimesheetLines'] = undefined;

/**
 * Last modified timestamp
 * @member {String} UpdatedDateUTC
 */
Timesheet.prototype['UpdatedDateUTC'] = undefined;

/**
 * Displays array of validation error messages from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
Timesheet.prototype['ValidationErrors'] = undefined;






export default Timesheet;

