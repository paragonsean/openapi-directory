/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BankAccount from './BankAccount';
import EmployeeStatus from './EmployeeStatus';
import HomeAddress from './HomeAddress';
import LeaveBalance from './LeaveBalance';
import LeaveLine from './LeaveLine';
import OpeningBalances from './OpeningBalances';
import PayTemplate from './PayTemplate';
import SuperMembership from './SuperMembership';
import TaxDeclaration from './TaxDeclaration';
import ValidationError from './ValidationError';

/**
 * The Employee model module.
 * @module model/Employee
 * @version 2.9.4
 */
class Employee {
    /**
     * Constructs a new <code>Employee</code>.
     * @alias module:model/Employee
     * @param dateOfBirth {String} Date of birth of the employee (YYYY-MM-DD)
     * @param firstName {String} First name of employee
     * @param lastName {String} Last name of employee
     */
    constructor(dateOfBirth, firstName, lastName) { 
        
        Employee.initialize(this, dateOfBirth, firstName, lastName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dateOfBirth, firstName, lastName) { 
        obj['DateOfBirth'] = dateOfBirth;
        obj['FirstName'] = firstName;
        obj['LastName'] = lastName;
    }

    /**
     * Constructs a <code>Employee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Employee} obj Optional instance to populate.
     * @return {module:model/Employee} The populated <code>Employee</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Employee();

            if (data.hasOwnProperty('BankAccounts')) {
                obj['BankAccounts'] = ApiClient.convertToType(data['BankAccounts'], [BankAccount]);
            }
            if (data.hasOwnProperty('Classification')) {
                obj['Classification'] = ApiClient.convertToType(data['Classification'], 'String');
            }
            if (data.hasOwnProperty('DateOfBirth')) {
                obj['DateOfBirth'] = ApiClient.convertToType(data['DateOfBirth'], 'String');
            }
            if (data.hasOwnProperty('Email')) {
                obj['Email'] = ApiClient.convertToType(data['Email'], 'String');
            }
            if (data.hasOwnProperty('EmployeeGroupName')) {
                obj['EmployeeGroupName'] = ApiClient.convertToType(data['EmployeeGroupName'], 'String');
            }
            if (data.hasOwnProperty('EmployeeID')) {
                obj['EmployeeID'] = ApiClient.convertToType(data['EmployeeID'], 'String');
            }
            if (data.hasOwnProperty('FirstName')) {
                obj['FirstName'] = ApiClient.convertToType(data['FirstName'], 'String');
            }
            if (data.hasOwnProperty('Gender')) {
                obj['Gender'] = ApiClient.convertToType(data['Gender'], 'String');
            }
            if (data.hasOwnProperty('HomeAddress')) {
                obj['HomeAddress'] = HomeAddress.constructFromObject(data['HomeAddress']);
            }
            if (data.hasOwnProperty('IsAuthorisedToApproveLeave')) {
                obj['IsAuthorisedToApproveLeave'] = ApiClient.convertToType(data['IsAuthorisedToApproveLeave'], 'Boolean');
            }
            if (data.hasOwnProperty('IsAuthorisedToApproveTimesheets')) {
                obj['IsAuthorisedToApproveTimesheets'] = ApiClient.convertToType(data['IsAuthorisedToApproveTimesheets'], 'Boolean');
            }
            if (data.hasOwnProperty('JobTitle')) {
                obj['JobTitle'] = ApiClient.convertToType(data['JobTitle'], 'String');
            }
            if (data.hasOwnProperty('LastName')) {
                obj['LastName'] = ApiClient.convertToType(data['LastName'], 'String');
            }
            if (data.hasOwnProperty('LeaveBalances')) {
                obj['LeaveBalances'] = ApiClient.convertToType(data['LeaveBalances'], [LeaveBalance]);
            }
            if (data.hasOwnProperty('LeaveLines')) {
                obj['LeaveLines'] = ApiClient.convertToType(data['LeaveLines'], [LeaveLine]);
            }
            if (data.hasOwnProperty('MiddleNames')) {
                obj['MiddleNames'] = ApiClient.convertToType(data['MiddleNames'], 'String');
            }
            if (data.hasOwnProperty('Mobile')) {
                obj['Mobile'] = ApiClient.convertToType(data['Mobile'], 'String');
            }
            if (data.hasOwnProperty('OpeningBalances')) {
                obj['OpeningBalances'] = OpeningBalances.constructFromObject(data['OpeningBalances']);
            }
            if (data.hasOwnProperty('OrdinaryEarningsRateID')) {
                obj['OrdinaryEarningsRateID'] = ApiClient.convertToType(data['OrdinaryEarningsRateID'], 'String');
            }
            if (data.hasOwnProperty('PayTemplate')) {
                obj['PayTemplate'] = PayTemplate.constructFromObject(data['PayTemplate']);
            }
            if (data.hasOwnProperty('PayrollCalendarID')) {
                obj['PayrollCalendarID'] = ApiClient.convertToType(data['PayrollCalendarID'], 'String');
            }
            if (data.hasOwnProperty('Phone')) {
                obj['Phone'] = ApiClient.convertToType(data['Phone'], 'String');
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = EmployeeStatus.constructFromObject(data['Status']);
            }
            if (data.hasOwnProperty('SuperMemberships')) {
                obj['SuperMemberships'] = ApiClient.convertToType(data['SuperMemberships'], [SuperMembership]);
            }
            if (data.hasOwnProperty('TaxDeclaration')) {
                obj['TaxDeclaration'] = TaxDeclaration.constructFromObject(data['TaxDeclaration']);
            }
            if (data.hasOwnProperty('TerminationDate')) {
                obj['TerminationDate'] = ApiClient.convertToType(data['TerminationDate'], 'String');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
            if (data.hasOwnProperty('TwitterUserName')) {
                obj['TwitterUserName'] = ApiClient.convertToType(data['TwitterUserName'], 'String');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Employee</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Employee</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Employee.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['BankAccounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['BankAccounts'])) {
                throw new Error("Expected the field `BankAccounts` to be an array in the JSON data but got " + data['BankAccounts']);
            }
            // validate the optional field `BankAccounts` (array)
            for (const item of data['BankAccounts']) {
                BankAccount.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Classification'] && !(typeof data['Classification'] === 'string' || data['Classification'] instanceof String)) {
            throw new Error("Expected the field `Classification` to be a primitive type in the JSON string but got " + data['Classification']);
        }
        // ensure the json data is a string
        if (data['DateOfBirth'] && !(typeof data['DateOfBirth'] === 'string' || data['DateOfBirth'] instanceof String)) {
            throw new Error("Expected the field `DateOfBirth` to be a primitive type in the JSON string but got " + data['DateOfBirth']);
        }
        // ensure the json data is a string
        if (data['Email'] && !(typeof data['Email'] === 'string' || data['Email'] instanceof String)) {
            throw new Error("Expected the field `Email` to be a primitive type in the JSON string but got " + data['Email']);
        }
        // ensure the json data is a string
        if (data['EmployeeGroupName'] && !(typeof data['EmployeeGroupName'] === 'string' || data['EmployeeGroupName'] instanceof String)) {
            throw new Error("Expected the field `EmployeeGroupName` to be a primitive type in the JSON string but got " + data['EmployeeGroupName']);
        }
        // ensure the json data is a string
        if (data['EmployeeID'] && !(typeof data['EmployeeID'] === 'string' || data['EmployeeID'] instanceof String)) {
            throw new Error("Expected the field `EmployeeID` to be a primitive type in the JSON string but got " + data['EmployeeID']);
        }
        // ensure the json data is a string
        if (data['FirstName'] && !(typeof data['FirstName'] === 'string' || data['FirstName'] instanceof String)) {
            throw new Error("Expected the field `FirstName` to be a primitive type in the JSON string but got " + data['FirstName']);
        }
        // ensure the json data is a string
        if (data['Gender'] && !(typeof data['Gender'] === 'string' || data['Gender'] instanceof String)) {
            throw new Error("Expected the field `Gender` to be a primitive type in the JSON string but got " + data['Gender']);
        }
        // validate the optional field `HomeAddress`
        if (data['HomeAddress']) { // data not null
          HomeAddress.validateJSON(data['HomeAddress']);
        }
        // ensure the json data is a string
        if (data['JobTitle'] && !(typeof data['JobTitle'] === 'string' || data['JobTitle'] instanceof String)) {
            throw new Error("Expected the field `JobTitle` to be a primitive type in the JSON string but got " + data['JobTitle']);
        }
        // ensure the json data is a string
        if (data['LastName'] && !(typeof data['LastName'] === 'string' || data['LastName'] instanceof String)) {
            throw new Error("Expected the field `LastName` to be a primitive type in the JSON string but got " + data['LastName']);
        }
        if (data['LeaveBalances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LeaveBalances'])) {
                throw new Error("Expected the field `LeaveBalances` to be an array in the JSON data but got " + data['LeaveBalances']);
            }
            // validate the optional field `LeaveBalances` (array)
            for (const item of data['LeaveBalances']) {
                LeaveBalance.validateJSON(item);
            };
        }
        if (data['LeaveLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LeaveLines'])) {
                throw new Error("Expected the field `LeaveLines` to be an array in the JSON data but got " + data['LeaveLines']);
            }
            // validate the optional field `LeaveLines` (array)
            for (const item of data['LeaveLines']) {
                LeaveLine.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['MiddleNames'] && !(typeof data['MiddleNames'] === 'string' || data['MiddleNames'] instanceof String)) {
            throw new Error("Expected the field `MiddleNames` to be a primitive type in the JSON string but got " + data['MiddleNames']);
        }
        // ensure the json data is a string
        if (data['Mobile'] && !(typeof data['Mobile'] === 'string' || data['Mobile'] instanceof String)) {
            throw new Error("Expected the field `Mobile` to be a primitive type in the JSON string but got " + data['Mobile']);
        }
        // validate the optional field `OpeningBalances`
        if (data['OpeningBalances']) { // data not null
          OpeningBalances.validateJSON(data['OpeningBalances']);
        }
        // ensure the json data is a string
        if (data['OrdinaryEarningsRateID'] && !(typeof data['OrdinaryEarningsRateID'] === 'string' || data['OrdinaryEarningsRateID'] instanceof String)) {
            throw new Error("Expected the field `OrdinaryEarningsRateID` to be a primitive type in the JSON string but got " + data['OrdinaryEarningsRateID']);
        }
        // validate the optional field `PayTemplate`
        if (data['PayTemplate']) { // data not null
          PayTemplate.validateJSON(data['PayTemplate']);
        }
        // ensure the json data is a string
        if (data['PayrollCalendarID'] && !(typeof data['PayrollCalendarID'] === 'string' || data['PayrollCalendarID'] instanceof String)) {
            throw new Error("Expected the field `PayrollCalendarID` to be a primitive type in the JSON string but got " + data['PayrollCalendarID']);
        }
        // ensure the json data is a string
        if (data['Phone'] && !(typeof data['Phone'] === 'string' || data['Phone'] instanceof String)) {
            throw new Error("Expected the field `Phone` to be a primitive type in the JSON string but got " + data['Phone']);
        }
        // ensure the json data is a string
        if (data['StartDate'] && !(typeof data['StartDate'] === 'string' || data['StartDate'] instanceof String)) {
            throw new Error("Expected the field `StartDate` to be a primitive type in the JSON string but got " + data['StartDate']);
        }
        if (data['SuperMemberships']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['SuperMemberships'])) {
                throw new Error("Expected the field `SuperMemberships` to be an array in the JSON data but got " + data['SuperMemberships']);
            }
            // validate the optional field `SuperMemberships` (array)
            for (const item of data['SuperMemberships']) {
                SuperMembership.validateJSON(item);
            };
        }
        // validate the optional field `TaxDeclaration`
        if (data['TaxDeclaration']) { // data not null
          TaxDeclaration.validateJSON(data['TaxDeclaration']);
        }
        // ensure the json data is a string
        if (data['TerminationDate'] && !(typeof data['TerminationDate'] === 'string' || data['TerminationDate'] instanceof String)) {
            throw new Error("Expected the field `TerminationDate` to be a primitive type in the JSON string but got " + data['TerminationDate']);
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }
        // ensure the json data is a string
        if (data['TwitterUserName'] && !(typeof data['TwitterUserName'] === 'string' || data['TwitterUserName'] instanceof String)) {
            throw new Error("Expected the field `TwitterUserName` to be a primitive type in the JSON string but got " + data['TwitterUserName']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}

Employee.RequiredProperties = ["DateOfBirth", "FirstName", "LastName"];

/**
 * @member {Array.<module:model/BankAccount>} BankAccounts
 */
Employee.prototype['BankAccounts'] = undefined;

/**
 * Employees classification
 * @member {String} Classification
 */
Employee.prototype['Classification'] = undefined;

/**
 * Date of birth of the employee (YYYY-MM-DD)
 * @member {String} DateOfBirth
 */
Employee.prototype['DateOfBirth'] = undefined;

/**
 * The email address for the employee
 * @member {String} Email
 */
Employee.prototype['Email'] = undefined;

/**
 * The Employee Group allows you to report on payroll expenses and liabilities for each group of employees
 * @member {String} EmployeeGroupName
 */
Employee.prototype['EmployeeGroupName'] = undefined;

/**
 * Xero unique identifier for an Employee
 * @member {String} EmployeeID
 */
Employee.prototype['EmployeeID'] = undefined;

/**
 * First name of employee
 * @member {String} FirstName
 */
Employee.prototype['FirstName'] = undefined;

/**
 * The employee’s gender. See Employee Gender
 * @member {module:model/Employee.GenderEnum} Gender
 */
Employee.prototype['Gender'] = undefined;

/**
 * @member {module:model/HomeAddress} HomeAddress
 */
Employee.prototype['HomeAddress'] = undefined;

/**
 * Authorised to approve other employees' leave requests
 * @member {Boolean} IsAuthorisedToApproveLeave
 */
Employee.prototype['IsAuthorisedToApproveLeave'] = undefined;

/**
 * Authorised to approve timesheets
 * @member {Boolean} IsAuthorisedToApproveTimesheets
 */
Employee.prototype['IsAuthorisedToApproveTimesheets'] = undefined;

/**
 * JobTitle of the employee
 * @member {String} JobTitle
 */
Employee.prototype['JobTitle'] = undefined;

/**
 * Last name of employee
 * @member {String} LastName
 */
Employee.prototype['LastName'] = undefined;

/**
 * @member {Array.<module:model/LeaveBalance>} LeaveBalances
 */
Employee.prototype['LeaveBalances'] = undefined;

/**
 * @member {Array.<module:model/LeaveLine>} LeaveLines
 */
Employee.prototype['LeaveLines'] = undefined;

/**
 * Middle name(s) of the employee
 * @member {String} MiddleNames
 */
Employee.prototype['MiddleNames'] = undefined;

/**
 * Employee mobile number
 * @member {String} Mobile
 */
Employee.prototype['Mobile'] = undefined;

/**
 * @member {module:model/OpeningBalances} OpeningBalances
 */
Employee.prototype['OpeningBalances'] = undefined;

/**
 * Xero unique identifier for earnings rate
 * @member {String} OrdinaryEarningsRateID
 */
Employee.prototype['OrdinaryEarningsRateID'] = undefined;

/**
 * @member {module:model/PayTemplate} PayTemplate
 */
Employee.prototype['PayTemplate'] = undefined;

/**
 * Xero unique identifier for payroll calendar for the employee
 * @member {String} PayrollCalendarID
 */
Employee.prototype['PayrollCalendarID'] = undefined;

/**
 * Employee phone number
 * @member {String} Phone
 */
Employee.prototype['Phone'] = undefined;

/**
 * Start date for an employee (YYYY-MM-DD)
 * @member {String} StartDate
 */
Employee.prototype['StartDate'] = undefined;

/**
 * @member {module:model/EmployeeStatus} Status
 */
Employee.prototype['Status'] = undefined;

/**
 * @member {Array.<module:model/SuperMembership>} SuperMemberships
 */
Employee.prototype['SuperMemberships'] = undefined;

/**
 * @member {module:model/TaxDeclaration} TaxDeclaration
 */
Employee.prototype['TaxDeclaration'] = undefined;

/**
 * Employee Termination Date (YYYY-MM-DD)
 * @member {String} TerminationDate
 */
Employee.prototype['TerminationDate'] = undefined;

/**
 * Title of the employee
 * @member {String} Title
 */
Employee.prototype['Title'] = undefined;

/**
 * Employee’s twitter name
 * @member {String} TwitterUserName
 */
Employee.prototype['TwitterUserName'] = undefined;

/**
 * Last modified timestamp
 * @member {String} UpdatedDateUTC
 */
Employee.prototype['UpdatedDateUTC'] = undefined;

/**
 * Displays array of validation error messages from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
Employee.prototype['ValidationErrors'] = undefined;





/**
 * Allowed values for the <code>Gender</code> property.
 * @enum {String}
 * @readonly
 */
Employee['GenderEnum'] = {

    /**
     * value: "N"
     * @const
     */
    "N": "N",

    /**
     * value: "M"
     * @const
     */
    "M": "M",

    /**
     * value: "F"
     * @const
     */
    "F": "F",

    /**
     * value: "I"
     * @const
     */
    "I": "I"
};



export default Employee;

