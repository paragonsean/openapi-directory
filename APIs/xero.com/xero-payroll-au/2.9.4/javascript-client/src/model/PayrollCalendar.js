/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CalendarType from './CalendarType';
import ValidationError from './ValidationError';

/**
 * The PayrollCalendar model module.
 * @module model/PayrollCalendar
 * @version 2.9.4
 */
class PayrollCalendar {
    /**
     * Constructs a new <code>PayrollCalendar</code>.
     * @alias module:model/PayrollCalendar
     */
    constructor() { 
        
        PayrollCalendar.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PayrollCalendar</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PayrollCalendar} obj Optional instance to populate.
     * @return {module:model/PayrollCalendar} The populated <code>PayrollCalendar</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PayrollCalendar();

            if (data.hasOwnProperty('CalendarType')) {
                obj['CalendarType'] = CalendarType.constructFromObject(data['CalendarType']);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PaymentDate')) {
                obj['PaymentDate'] = ApiClient.convertToType(data['PaymentDate'], 'String');
            }
            if (data.hasOwnProperty('PayrollCalendarID')) {
                obj['PayrollCalendarID'] = ApiClient.convertToType(data['PayrollCalendarID'], 'String');
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'String');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PayrollCalendar</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PayrollCalendar</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['PaymentDate'] && !(typeof data['PaymentDate'] === 'string' || data['PaymentDate'] instanceof String)) {
            throw new Error("Expected the field `PaymentDate` to be a primitive type in the JSON string but got " + data['PaymentDate']);
        }
        // ensure the json data is a string
        if (data['PayrollCalendarID'] && !(typeof data['PayrollCalendarID'] === 'string' || data['PayrollCalendarID'] instanceof String)) {
            throw new Error("Expected the field `PayrollCalendarID` to be a primitive type in the JSON string but got " + data['PayrollCalendarID']);
        }
        // ensure the json data is a string
        if (data['StartDate'] && !(typeof data['StartDate'] === 'string' || data['StartDate'] instanceof String)) {
            throw new Error("Expected the field `StartDate` to be a primitive type in the JSON string but got " + data['StartDate']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/CalendarType} CalendarType
 */
PayrollCalendar.prototype['CalendarType'] = undefined;

/**
 * Name of the Payroll Calendar
 * @member {String} Name
 */
PayrollCalendar.prototype['Name'] = undefined;

/**
 * The date on which employees will be paid for the upcoming pay period (YYYY-MM-DD)
 * @member {String} PaymentDate
 */
PayrollCalendar.prototype['PaymentDate'] = undefined;

/**
 * Xero identifier
 * @member {String} PayrollCalendarID
 */
PayrollCalendar.prototype['PayrollCalendarID'] = undefined;

/**
 * The start date of the upcoming pay period. The end date will be calculated based upon this date, and the calendar type selected (YYYY-MM-DD)
 * @member {String} StartDate
 */
PayrollCalendar.prototype['StartDate'] = undefined;

/**
 * Last modified timestamp
 * @member {String} UpdatedDateUTC
 */
PayrollCalendar.prototype['UpdatedDateUTC'] = undefined;

/**
 * Displays array of validation error messages from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
PayrollCalendar.prototype['ValidationErrors'] = undefined;






export default PayrollCalendar;

