/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeductionLine from './DeductionLine';
import EarningsLine from './EarningsLine';
import LeaveLine from './LeaveLine';
import ReimbursementLine from './ReimbursementLine';
import SuperLine from './SuperLine';

/**
 * The PayTemplate model module.
 * @module model/PayTemplate
 * @version 2.9.4
 */
class PayTemplate {
    /**
     * Constructs a new <code>PayTemplate</code>.
     * @alias module:model/PayTemplate
     */
    constructor() { 
        
        PayTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PayTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PayTemplate} obj Optional instance to populate.
     * @return {module:model/PayTemplate} The populated <code>PayTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PayTemplate();

            if (data.hasOwnProperty('DeductionLines')) {
                obj['DeductionLines'] = ApiClient.convertToType(data['DeductionLines'], [DeductionLine]);
            }
            if (data.hasOwnProperty('EarningsLines')) {
                obj['EarningsLines'] = ApiClient.convertToType(data['EarningsLines'], [EarningsLine]);
            }
            if (data.hasOwnProperty('LeaveLines')) {
                obj['LeaveLines'] = ApiClient.convertToType(data['LeaveLines'], [LeaveLine]);
            }
            if (data.hasOwnProperty('ReimbursementLines')) {
                obj['ReimbursementLines'] = ApiClient.convertToType(data['ReimbursementLines'], [ReimbursementLine]);
            }
            if (data.hasOwnProperty('SuperLines')) {
                obj['SuperLines'] = ApiClient.convertToType(data['SuperLines'], [SuperLine]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PayTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PayTemplate</code>.
     */
    static validateJSON(data) {
        if (data['DeductionLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['DeductionLines'])) {
                throw new Error("Expected the field `DeductionLines` to be an array in the JSON data but got " + data['DeductionLines']);
            }
            // validate the optional field `DeductionLines` (array)
            for (const item of data['DeductionLines']) {
                DeductionLine.validateJSON(item);
            };
        }
        if (data['EarningsLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['EarningsLines'])) {
                throw new Error("Expected the field `EarningsLines` to be an array in the JSON data but got " + data['EarningsLines']);
            }
            // validate the optional field `EarningsLines` (array)
            for (const item of data['EarningsLines']) {
                EarningsLine.validateJSON(item);
            };
        }
        if (data['LeaveLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LeaveLines'])) {
                throw new Error("Expected the field `LeaveLines` to be an array in the JSON data but got " + data['LeaveLines']);
            }
            // validate the optional field `LeaveLines` (array)
            for (const item of data['LeaveLines']) {
                LeaveLine.validateJSON(item);
            };
        }
        if (data['ReimbursementLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ReimbursementLines'])) {
                throw new Error("Expected the field `ReimbursementLines` to be an array in the JSON data but got " + data['ReimbursementLines']);
            }
            // validate the optional field `ReimbursementLines` (array)
            for (const item of data['ReimbursementLines']) {
                ReimbursementLine.validateJSON(item);
            };
        }
        if (data['SuperLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['SuperLines'])) {
                throw new Error("Expected the field `SuperLines` to be an array in the JSON data but got " + data['SuperLines']);
            }
            // validate the optional field `SuperLines` (array)
            for (const item of data['SuperLines']) {
                SuperLine.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/DeductionLine>} DeductionLines
 */
PayTemplate.prototype['DeductionLines'] = undefined;

/**
 * @member {Array.<module:model/EarningsLine>} EarningsLines
 */
PayTemplate.prototype['EarningsLines'] = undefined;

/**
 * @member {Array.<module:model/LeaveLine>} LeaveLines
 */
PayTemplate.prototype['LeaveLines'] = undefined;

/**
 * @member {Array.<module:model/ReimbursementLine>} ReimbursementLines
 */
PayTemplate.prototype['ReimbursementLines'] = undefined;

/**
 * @member {Array.<module:model/SuperLine>} SuperLines
 */
PayTemplate.prototype['SuperLines'] = undefined;






export default PayTemplate;

