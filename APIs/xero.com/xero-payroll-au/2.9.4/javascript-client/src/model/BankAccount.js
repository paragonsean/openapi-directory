/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BankAccount model module.
 * @module model/BankAccount
 * @version 2.9.4
 */
class BankAccount {
    /**
     * Constructs a new <code>BankAccount</code>.
     * @alias module:model/BankAccount
     */
    constructor() { 
        
        BankAccount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BankAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BankAccount} obj Optional instance to populate.
     * @return {module:model/BankAccount} The populated <code>BankAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BankAccount();

            if (data.hasOwnProperty('AccountName')) {
                obj['AccountName'] = ApiClient.convertToType(data['AccountName'], 'String');
            }
            if (data.hasOwnProperty('AccountNumber')) {
                obj['AccountNumber'] = ApiClient.convertToType(data['AccountNumber'], 'String');
            }
            if (data.hasOwnProperty('Amount')) {
                obj['Amount'] = ApiClient.convertToType(data['Amount'], 'Number');
            }
            if (data.hasOwnProperty('BSB')) {
                obj['BSB'] = ApiClient.convertToType(data['BSB'], 'String');
            }
            if (data.hasOwnProperty('Remainder')) {
                obj['Remainder'] = ApiClient.convertToType(data['Remainder'], 'Boolean');
            }
            if (data.hasOwnProperty('StatementText')) {
                obj['StatementText'] = ApiClient.convertToType(data['StatementText'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BankAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BankAccount</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AccountName'] && !(typeof data['AccountName'] === 'string' || data['AccountName'] instanceof String)) {
            throw new Error("Expected the field `AccountName` to be a primitive type in the JSON string but got " + data['AccountName']);
        }
        // ensure the json data is a string
        if (data['AccountNumber'] && !(typeof data['AccountNumber'] === 'string' || data['AccountNumber'] instanceof String)) {
            throw new Error("Expected the field `AccountNumber` to be a primitive type in the JSON string but got " + data['AccountNumber']);
        }
        // ensure the json data is a string
        if (data['BSB'] && !(typeof data['BSB'] === 'string' || data['BSB'] instanceof String)) {
            throw new Error("Expected the field `BSB` to be a primitive type in the JSON string but got " + data['BSB']);
        }
        // ensure the json data is a string
        if (data['StatementText'] && !(typeof data['StatementText'] === 'string' || data['StatementText'] instanceof String)) {
            throw new Error("Expected the field `StatementText` to be a primitive type in the JSON string but got " + data['StatementText']);
        }

        return true;
    }


}



/**
 * The name of the account
 * @member {String} AccountName
 */
BankAccount.prototype['AccountName'] = undefined;

/**
 * The account number
 * @member {String} AccountNumber
 */
BankAccount.prototype['AccountNumber'] = undefined;

/**
 * Fixed amounts (for example, if an employee wants to have $100 of their salary transferred to one account, and the remaining amount to another)
 * @member {Number} Amount
 */
BankAccount.prototype['Amount'] = undefined;

/**
 * The BSB number of the account
 * @member {String} BSB
 */
BankAccount.prototype['BSB'] = undefined;

/**
 * If this account is the Remaining bank account
 * @member {Boolean} Remainder
 */
BankAccount.prototype['Remainder'] = undefined;

/**
 * The text that will appear on your employee's bank statement when they receive payment
 * @member {String} StatementText
 */
BankAccount.prototype['StatementText'] = undefined;






export default BankAccount;

