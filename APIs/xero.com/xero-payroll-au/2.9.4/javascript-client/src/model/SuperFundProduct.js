/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SuperFundProduct model module.
 * @module model/SuperFundProduct
 * @version 2.9.4
 */
class SuperFundProduct {
    /**
     * Constructs a new <code>SuperFundProduct</code>.
     * @alias module:model/SuperFundProduct
     */
    constructor() { 
        
        SuperFundProduct.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SuperFundProduct</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SuperFundProduct} obj Optional instance to populate.
     * @return {module:model/SuperFundProduct} The populated <code>SuperFundProduct</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SuperFundProduct();

            if (data.hasOwnProperty('ABN')) {
                obj['ABN'] = ApiClient.convertToType(data['ABN'], 'String');
            }
            if (data.hasOwnProperty('ProductName')) {
                obj['ProductName'] = ApiClient.convertToType(data['ProductName'], 'String');
            }
            if (data.hasOwnProperty('SPIN')) {
                obj['SPIN'] = ApiClient.convertToType(data['SPIN'], 'String');
            }
            if (data.hasOwnProperty('USI')) {
                obj['USI'] = ApiClient.convertToType(data['USI'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SuperFundProduct</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SuperFundProduct</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ABN'] && !(typeof data['ABN'] === 'string' || data['ABN'] instanceof String)) {
            throw new Error("Expected the field `ABN` to be a primitive type in the JSON string but got " + data['ABN']);
        }
        // ensure the json data is a string
        if (data['ProductName'] && !(typeof data['ProductName'] === 'string' || data['ProductName'] instanceof String)) {
            throw new Error("Expected the field `ProductName` to be a primitive type in the JSON string but got " + data['ProductName']);
        }
        // ensure the json data is a string
        if (data['SPIN'] && !(typeof data['SPIN'] === 'string' || data['SPIN'] instanceof String)) {
            throw new Error("Expected the field `SPIN` to be a primitive type in the JSON string but got " + data['SPIN']);
        }
        // ensure the json data is a string
        if (data['USI'] && !(typeof data['USI'] === 'string' || data['USI'] instanceof String)) {
            throw new Error("Expected the field `USI` to be a primitive type in the JSON string but got " + data['USI']);
        }

        return true;
    }


}



/**
 * The ABN of the Regulated SuperFund
 * @member {String} ABN
 */
SuperFundProduct.prototype['ABN'] = undefined;

/**
 * The name of the Regulated SuperFund
 * @member {String} ProductName
 */
SuperFundProduct.prototype['ProductName'] = undefined;

/**
 * The SPIN of the Regulated SuperFund. This field has been deprecated. New superfunds will not have a SPIN value. The USI field should be used instead of SPIN
 * @member {String} SPIN
 */
SuperFundProduct.prototype['SPIN'] = undefined;

/**
 * The USI of the Regulated SuperFund
 * @member {String} USI
 */
SuperFundProduct.prototype['USI'] = undefined;






export default SuperFundProduct;

