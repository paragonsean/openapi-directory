/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PayRunStatus from './PayRunStatus';
import PayslipSummary from './PayslipSummary';
import ValidationError from './ValidationError';

/**
 * The PayRun model module.
 * @module model/PayRun
 * @version 2.9.4
 */
class PayRun {
    /**
     * Constructs a new <code>PayRun</code>.
     * @alias module:model/PayRun
     * @param payrollCalendarID {String} Xero identifier for pay run
     */
    constructor(payrollCalendarID) { 
        
        PayRun.initialize(this, payrollCalendarID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, payrollCalendarID) { 
        obj['PayrollCalendarID'] = payrollCalendarID;
    }

    /**
     * Constructs a <code>PayRun</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PayRun} obj Optional instance to populate.
     * @return {module:model/PayRun} The populated <code>PayRun</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PayRun();

            if (data.hasOwnProperty('Deductions')) {
                obj['Deductions'] = ApiClient.convertToType(data['Deductions'], 'Number');
            }
            if (data.hasOwnProperty('NetPay')) {
                obj['NetPay'] = ApiClient.convertToType(data['NetPay'], 'Number');
            }
            if (data.hasOwnProperty('PayRunID')) {
                obj['PayRunID'] = ApiClient.convertToType(data['PayRunID'], 'String');
            }
            if (data.hasOwnProperty('PayRunPeriodEndDate')) {
                obj['PayRunPeriodEndDate'] = ApiClient.convertToType(data['PayRunPeriodEndDate'], 'String');
            }
            if (data.hasOwnProperty('PayRunPeriodStartDate')) {
                obj['PayRunPeriodStartDate'] = ApiClient.convertToType(data['PayRunPeriodStartDate'], 'String');
            }
            if (data.hasOwnProperty('PayRunStatus')) {
                obj['PayRunStatus'] = PayRunStatus.constructFromObject(data['PayRunStatus']);
            }
            if (data.hasOwnProperty('PaymentDate')) {
                obj['PaymentDate'] = ApiClient.convertToType(data['PaymentDate'], 'String');
            }
            if (data.hasOwnProperty('PayrollCalendarID')) {
                obj['PayrollCalendarID'] = ApiClient.convertToType(data['PayrollCalendarID'], 'String');
            }
            if (data.hasOwnProperty('PayslipMessage')) {
                obj['PayslipMessage'] = ApiClient.convertToType(data['PayslipMessage'], 'String');
            }
            if (data.hasOwnProperty('Payslips')) {
                obj['Payslips'] = ApiClient.convertToType(data['Payslips'], [PayslipSummary]);
            }
            if (data.hasOwnProperty('Reimbursement')) {
                obj['Reimbursement'] = ApiClient.convertToType(data['Reimbursement'], 'Number');
            }
            if (data.hasOwnProperty('Super')) {
                obj['Super'] = ApiClient.convertToType(data['Super'], 'Number');
            }
            if (data.hasOwnProperty('Tax')) {
                obj['Tax'] = ApiClient.convertToType(data['Tax'], 'Number');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
            if (data.hasOwnProperty('Wages')) {
                obj['Wages'] = ApiClient.convertToType(data['Wages'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PayRun</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PayRun</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PayRun.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['PayRunID'] && !(typeof data['PayRunID'] === 'string' || data['PayRunID'] instanceof String)) {
            throw new Error("Expected the field `PayRunID` to be a primitive type in the JSON string but got " + data['PayRunID']);
        }
        // ensure the json data is a string
        if (data['PayRunPeriodEndDate'] && !(typeof data['PayRunPeriodEndDate'] === 'string' || data['PayRunPeriodEndDate'] instanceof String)) {
            throw new Error("Expected the field `PayRunPeriodEndDate` to be a primitive type in the JSON string but got " + data['PayRunPeriodEndDate']);
        }
        // ensure the json data is a string
        if (data['PayRunPeriodStartDate'] && !(typeof data['PayRunPeriodStartDate'] === 'string' || data['PayRunPeriodStartDate'] instanceof String)) {
            throw new Error("Expected the field `PayRunPeriodStartDate` to be a primitive type in the JSON string but got " + data['PayRunPeriodStartDate']);
        }
        // ensure the json data is a string
        if (data['PaymentDate'] && !(typeof data['PaymentDate'] === 'string' || data['PaymentDate'] instanceof String)) {
            throw new Error("Expected the field `PaymentDate` to be a primitive type in the JSON string but got " + data['PaymentDate']);
        }
        // ensure the json data is a string
        if (data['PayrollCalendarID'] && !(typeof data['PayrollCalendarID'] === 'string' || data['PayrollCalendarID'] instanceof String)) {
            throw new Error("Expected the field `PayrollCalendarID` to be a primitive type in the JSON string but got " + data['PayrollCalendarID']);
        }
        // ensure the json data is a string
        if (data['PayslipMessage'] && !(typeof data['PayslipMessage'] === 'string' || data['PayslipMessage'] instanceof String)) {
            throw new Error("Expected the field `PayslipMessage` to be a primitive type in the JSON string but got " + data['PayslipMessage']);
        }
        if (data['Payslips']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Payslips'])) {
                throw new Error("Expected the field `Payslips` to be an array in the JSON data but got " + data['Payslips']);
            }
            // validate the optional field `Payslips` (array)
            for (const item of data['Payslips']) {
                PayslipSummary.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}

PayRun.RequiredProperties = ["PayrollCalendarID"];

/**
 * The total Deductions for the Payrun
 * @member {Number} Deductions
 */
PayRun.prototype['Deductions'] = undefined;

/**
 * The total NetPay for the Payrun
 * @member {Number} NetPay
 */
PayRun.prototype['NetPay'] = undefined;

/**
 * Xero identifier for pay run
 * @member {String} PayRunID
 */
PayRun.prototype['PayRunID'] = undefined;

/**
 * Period End Date for the PayRun (YYYY-MM-DD)
 * @member {String} PayRunPeriodEndDate
 */
PayRun.prototype['PayRunPeriodEndDate'] = undefined;

/**
 * Period Start Date for the PayRun (YYYY-MM-DD)
 * @member {String} PayRunPeriodStartDate
 */
PayRun.prototype['PayRunPeriodStartDate'] = undefined;

/**
 * @member {module:model/PayRunStatus} PayRunStatus
 */
PayRun.prototype['PayRunStatus'] = undefined;

/**
 * Payment Date for the PayRun (YYYY-MM-DD)
 * @member {String} PaymentDate
 */
PayRun.prototype['PaymentDate'] = undefined;

/**
 * Xero identifier for pay run
 * @member {String} PayrollCalendarID
 */
PayRun.prototype['PayrollCalendarID'] = undefined;

/**
 * Payslip message for the PayRun
 * @member {String} PayslipMessage
 */
PayRun.prototype['PayslipMessage'] = undefined;

/**
 * The payslips in the payrun
 * @member {Array.<module:model/PayslipSummary>} Payslips
 */
PayRun.prototype['Payslips'] = undefined;

/**
 * The total Reimbursements for the Payrun
 * @member {Number} Reimbursement
 */
PayRun.prototype['Reimbursement'] = undefined;

/**
 * The total Super for the Payrun
 * @member {Number} Super
 */
PayRun.prototype['Super'] = undefined;

/**
 * The total Tax for the Payrun
 * @member {Number} Tax
 */
PayRun.prototype['Tax'] = undefined;

/**
 * Last modified timestamp
 * @member {String} UpdatedDateUTC
 */
PayRun.prototype['UpdatedDateUTC'] = undefined;

/**
 * Displays array of validation error messages from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
PayRun.prototype['ValidationErrors'] = undefined;

/**
 * The total Wages for the Payrun
 * @member {Number} Wages
 */
PayRun.prototype['Wages'] = undefined;






export default PayRun;

