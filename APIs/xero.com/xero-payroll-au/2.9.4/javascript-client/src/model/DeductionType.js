/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeductionType model module.
 * @module model/DeductionType
 * @version 2.9.4
 */
class DeductionType {
    /**
     * Constructs a new <code>DeductionType</code>.
     * @alias module:model/DeductionType
     */
    constructor() { 
        
        DeductionType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeductionType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeductionType} obj Optional instance to populate.
     * @return {module:model/DeductionType} The populated <code>DeductionType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeductionType();

            if (data.hasOwnProperty('AccountCode')) {
                obj['AccountCode'] = ApiClient.convertToType(data['AccountCode'], 'String');
            }
            if (data.hasOwnProperty('CurrentRecord')) {
                obj['CurrentRecord'] = ApiClient.convertToType(data['CurrentRecord'], 'Boolean');
            }
            if (data.hasOwnProperty('DeductionCategory')) {
                obj['DeductionCategory'] = ApiClient.convertToType(data['DeductionCategory'], 'String');
            }
            if (data.hasOwnProperty('DeductionTypeID')) {
                obj['DeductionTypeID'] = ApiClient.convertToType(data['DeductionTypeID'], 'String');
            }
            if (data.hasOwnProperty('IsExemptFromW1')) {
                obj['IsExemptFromW1'] = ApiClient.convertToType(data['IsExemptFromW1'], 'Boolean');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('ReducesSuper')) {
                obj['ReducesSuper'] = ApiClient.convertToType(data['ReducesSuper'], 'Boolean');
            }
            if (data.hasOwnProperty('ReducesTax')) {
                obj['ReducesTax'] = ApiClient.convertToType(data['ReducesTax'], 'Boolean');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeductionType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeductionType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AccountCode'] && !(typeof data['AccountCode'] === 'string' || data['AccountCode'] instanceof String)) {
            throw new Error("Expected the field `AccountCode` to be a primitive type in the JSON string but got " + data['AccountCode']);
        }
        // ensure the json data is a string
        if (data['DeductionCategory'] && !(typeof data['DeductionCategory'] === 'string' || data['DeductionCategory'] instanceof String)) {
            throw new Error("Expected the field `DeductionCategory` to be a primitive type in the JSON string but got " + data['DeductionCategory']);
        }
        // ensure the json data is a string
        if (data['DeductionTypeID'] && !(typeof data['DeductionTypeID'] === 'string' || data['DeductionTypeID'] instanceof String)) {
            throw new Error("Expected the field `DeductionTypeID` to be a primitive type in the JSON string but got " + data['DeductionTypeID']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }

        return true;
    }


}



/**
 * See Accounts
 * @member {String} AccountCode
 */
DeductionType.prototype['AccountCode'] = undefined;

/**
 * Is the current record
 * @member {Boolean} CurrentRecord
 */
DeductionType.prototype['CurrentRecord'] = undefined;

/**
 * @member {module:model/DeductionType.DeductionCategoryEnum} DeductionCategory
 */
DeductionType.prototype['DeductionCategory'] = undefined;

/**
 * Xero identifier
 * @member {String} DeductionTypeID
 */
DeductionType.prototype['DeductionTypeID'] = undefined;

/**
 * Boolean to determine if the deduction type is reportable or exempt from W1
 * @member {Boolean} IsExemptFromW1
 */
DeductionType.prototype['IsExemptFromW1'] = undefined;

/**
 * Name of the earnings rate (max length = 100)
 * @member {String} Name
 */
DeductionType.prototype['Name'] = undefined;

/**
 * Most deductions donâ€™t reduce your superannuation guarantee contribution liability, so typically you will not set any value for this.
 * @member {Boolean} ReducesSuper
 */
DeductionType.prototype['ReducesSuper'] = undefined;

/**
 * Indicates that this is a pre-tax deduction that will reduce the amount of tax you withhold from an employee.
 * @member {Boolean} ReducesTax
 */
DeductionType.prototype['ReducesTax'] = undefined;

/**
 * Last modified timestamp
 * @member {String} UpdatedDateUTC
 */
DeductionType.prototype['UpdatedDateUTC'] = undefined;





/**
 * Allowed values for the <code>DeductionCategory</code> property.
 * @enum {String}
 * @readonly
 */
DeductionType['DeductionCategoryEnum'] = {

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "UNIONFEES"
     * @const
     */
    "UNIONFEES": "UNIONFEES",

    /**
     * value: "WORKPLACEGIVING"
     * @const
     */
    "WORKPLACEGIVING": "WORKPLACEGIVING"
};



export default DeductionType;

