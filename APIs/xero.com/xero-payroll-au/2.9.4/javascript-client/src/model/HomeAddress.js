/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import State from './State';

/**
 * The HomeAddress model module.
 * @module model/HomeAddress
 * @version 2.9.4
 */
class HomeAddress {
    /**
     * Constructs a new <code>HomeAddress</code>.
     * @alias module:model/HomeAddress
     * @param addressLine1 {String} Address line 1 for employee home address
     */
    constructor(addressLine1) { 
        
        HomeAddress.initialize(this, addressLine1);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, addressLine1) { 
        obj['AddressLine1'] = addressLine1;
    }

    /**
     * Constructs a <code>HomeAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HomeAddress} obj Optional instance to populate.
     * @return {module:model/HomeAddress} The populated <code>HomeAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HomeAddress();

            if (data.hasOwnProperty('AddressLine1')) {
                obj['AddressLine1'] = ApiClient.convertToType(data['AddressLine1'], 'String');
            }
            if (data.hasOwnProperty('AddressLine2')) {
                obj['AddressLine2'] = ApiClient.convertToType(data['AddressLine2'], 'String');
            }
            if (data.hasOwnProperty('City')) {
                obj['City'] = ApiClient.convertToType(data['City'], 'String');
            }
            if (data.hasOwnProperty('Country')) {
                obj['Country'] = ApiClient.convertToType(data['Country'], 'String');
            }
            if (data.hasOwnProperty('PostalCode')) {
                obj['PostalCode'] = ApiClient.convertToType(data['PostalCode'], 'String');
            }
            if (data.hasOwnProperty('Region')) {
                obj['Region'] = State.constructFromObject(data['Region']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HomeAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HomeAddress</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HomeAddress.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AddressLine1'] && !(typeof data['AddressLine1'] === 'string' || data['AddressLine1'] instanceof String)) {
            throw new Error("Expected the field `AddressLine1` to be a primitive type in the JSON string but got " + data['AddressLine1']);
        }
        // ensure the json data is a string
        if (data['AddressLine2'] && !(typeof data['AddressLine2'] === 'string' || data['AddressLine2'] instanceof String)) {
            throw new Error("Expected the field `AddressLine2` to be a primitive type in the JSON string but got " + data['AddressLine2']);
        }
        // ensure the json data is a string
        if (data['City'] && !(typeof data['City'] === 'string' || data['City'] instanceof String)) {
            throw new Error("Expected the field `City` to be a primitive type in the JSON string but got " + data['City']);
        }
        // ensure the json data is a string
        if (data['Country'] && !(typeof data['Country'] === 'string' || data['Country'] instanceof String)) {
            throw new Error("Expected the field `Country` to be a primitive type in the JSON string but got " + data['Country']);
        }
        // ensure the json data is a string
        if (data['PostalCode'] && !(typeof data['PostalCode'] === 'string' || data['PostalCode'] instanceof String)) {
            throw new Error("Expected the field `PostalCode` to be a primitive type in the JSON string but got " + data['PostalCode']);
        }

        return true;
    }


}

HomeAddress.RequiredProperties = ["AddressLine1"];

/**
 * Address line 1 for employee home address
 * @member {String} AddressLine1
 */
HomeAddress.prototype['AddressLine1'] = undefined;

/**
 * Address line 2 for employee home address
 * @member {String} AddressLine2
 */
HomeAddress.prototype['AddressLine2'] = undefined;

/**
 * Suburb for employee home address
 * @member {String} City
 */
HomeAddress.prototype['City'] = undefined;

/**
 * Country of HomeAddress
 * @member {String} Country
 */
HomeAddress.prototype['Country'] = undefined;

/**
 * PostCode for employee home address
 * @member {String} PostalCode
 */
HomeAddress.prototype['PostalCode'] = undefined;

/**
 * @member {module:model/State} Region
 */
HomeAddress.prototype['Region'] = undefined;






export default HomeAddress;

