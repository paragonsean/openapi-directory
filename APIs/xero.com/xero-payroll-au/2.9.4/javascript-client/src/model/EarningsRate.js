/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AllowanceType from './AllowanceType';
import EarningsType from './EarningsType';
import EmploymentTerminationPaymentType from './EmploymentTerminationPaymentType';
import RateType from './RateType';

/**
 * The EarningsRate model module.
 * @module model/EarningsRate
 * @version 2.9.4
 */
class EarningsRate {
    /**
     * Constructs a new <code>EarningsRate</code>.
     * @alias module:model/EarningsRate
     */
    constructor() { 
        
        EarningsRate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EarningsRate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EarningsRate} obj Optional instance to populate.
     * @return {module:model/EarningsRate} The populated <code>EarningsRate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EarningsRate();

            if (data.hasOwnProperty('AccountCode')) {
                obj['AccountCode'] = ApiClient.convertToType(data['AccountCode'], 'String');
            }
            if (data.hasOwnProperty('AccrueLeave')) {
                obj['AccrueLeave'] = ApiClient.convertToType(data['AccrueLeave'], 'Boolean');
            }
            if (data.hasOwnProperty('AllowanceType')) {
                obj['AllowanceType'] = AllowanceType.constructFromObject(data['AllowanceType']);
            }
            if (data.hasOwnProperty('Amount')) {
                obj['Amount'] = ApiClient.convertToType(data['Amount'], 'Number');
            }
            if (data.hasOwnProperty('CurrentRecord')) {
                obj['CurrentRecord'] = ApiClient.convertToType(data['CurrentRecord'], 'Boolean');
            }
            if (data.hasOwnProperty('EarningsRateID')) {
                obj['EarningsRateID'] = ApiClient.convertToType(data['EarningsRateID'], 'String');
            }
            if (data.hasOwnProperty('EarningsType')) {
                obj['EarningsType'] = EarningsType.constructFromObject(data['EarningsType']);
            }
            if (data.hasOwnProperty('EmploymentTerminationPaymentType')) {
                obj['EmploymentTerminationPaymentType'] = EmploymentTerminationPaymentType.constructFromObject(data['EmploymentTerminationPaymentType']);
            }
            if (data.hasOwnProperty('IsExemptFromSuper')) {
                obj['IsExemptFromSuper'] = ApiClient.convertToType(data['IsExemptFromSuper'], 'Boolean');
            }
            if (data.hasOwnProperty('IsExemptFromTax')) {
                obj['IsExemptFromTax'] = ApiClient.convertToType(data['IsExemptFromTax'], 'Boolean');
            }
            if (data.hasOwnProperty('IsReportableAsW1')) {
                obj['IsReportableAsW1'] = ApiClient.convertToType(data['IsReportableAsW1'], 'Boolean');
            }
            if (data.hasOwnProperty('Multiplier')) {
                obj['Multiplier'] = ApiClient.convertToType(data['Multiplier'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('RatePerUnit')) {
                obj['RatePerUnit'] = ApiClient.convertToType(data['RatePerUnit'], 'String');
            }
            if (data.hasOwnProperty('RateType')) {
                obj['RateType'] = RateType.constructFromObject(data['RateType']);
            }
            if (data.hasOwnProperty('TypeOfUnits')) {
                obj['TypeOfUnits'] = ApiClient.convertToType(data['TypeOfUnits'], 'String');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EarningsRate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EarningsRate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AccountCode'] && !(typeof data['AccountCode'] === 'string' || data['AccountCode'] instanceof String)) {
            throw new Error("Expected the field `AccountCode` to be a primitive type in the JSON string but got " + data['AccountCode']);
        }
        // ensure the json data is a string
        if (data['EarningsRateID'] && !(typeof data['EarningsRateID'] === 'string' || data['EarningsRateID'] instanceof String)) {
            throw new Error("Expected the field `EarningsRateID` to be a primitive type in the JSON string but got " + data['EarningsRateID']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['RatePerUnit'] && !(typeof data['RatePerUnit'] === 'string' || data['RatePerUnit'] instanceof String)) {
            throw new Error("Expected the field `RatePerUnit` to be a primitive type in the JSON string but got " + data['RatePerUnit']);
        }
        // ensure the json data is a string
        if (data['TypeOfUnits'] && !(typeof data['TypeOfUnits'] === 'string' || data['TypeOfUnits'] instanceof String)) {
            throw new Error("Expected the field `TypeOfUnits` to be a primitive type in the JSON string but got " + data['TypeOfUnits']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }

        return true;
    }


}



/**
 * See Accounts
 * @member {String} AccountCode
 */
EarningsRate.prototype['AccountCode'] = undefined;

/**
 * Indicates that this earnings rate should accrue leave. Only applicable if RateType is MULTIPLE
 * @member {Boolean} AccrueLeave
 */
EarningsRate.prototype['AccrueLeave'] = undefined;

/**
 * @member {module:model/AllowanceType} AllowanceType
 */
EarningsRate.prototype['AllowanceType'] = undefined;

/**
 * Optional Amount for FIXEDAMOUNT RateType EarningsRate
 * @member {Number} Amount
 */
EarningsRate.prototype['Amount'] = undefined;

/**
 * Is the current record
 * @member {Boolean} CurrentRecord
 */
EarningsRate.prototype['CurrentRecord'] = undefined;

/**
 * Xero identifier
 * @member {String} EarningsRateID
 */
EarningsRate.prototype['EarningsRateID'] = undefined;

/**
 * @member {module:model/EarningsType} EarningsType
 */
EarningsRate.prototype['EarningsType'] = undefined;

/**
 * @member {module:model/EmploymentTerminationPaymentType} EmploymentTerminationPaymentType
 */
EarningsRate.prototype['EmploymentTerminationPaymentType'] = undefined;

/**
 * See the ATO website for details of which payments are exempt from SGC
 * @member {Boolean} IsExemptFromSuper
 */
EarningsRate.prototype['IsExemptFromSuper'] = undefined;

/**
 * Most payments are subject to tax, so you should only set this value if you are sure that a payment is exempt from PAYG withholding
 * @member {Boolean} IsExemptFromTax
 */
EarningsRate.prototype['IsExemptFromTax'] = undefined;

/**
 * Boolean to determine if the earnings rate is reportable or exempt from W1
 * @member {Boolean} IsReportableAsW1
 */
EarningsRate.prototype['IsReportableAsW1'] = undefined;

/**
 * This is the multiplier used to calculate the rate per unit, based on the employeeâ€™s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MULTIPLE
 * @member {Number} Multiplier
 */
EarningsRate.prototype['Multiplier'] = undefined;

/**
 * Name of the earnings rate (max length = 100)
 * @member {String} Name
 */
EarningsRate.prototype['Name'] = undefined;

/**
 * Default rate per unit (optional). Only applicable if RateType is RATEPERUNIT.
 * @member {String} RatePerUnit
 */
EarningsRate.prototype['RatePerUnit'] = undefined;

/**
 * @member {module:model/RateType} RateType
 */
EarningsRate.prototype['RateType'] = undefined;

/**
 * Type of units used to record earnings (max length = 50). Only When RateType is RATEPERUNIT
 * @member {String} TypeOfUnits
 */
EarningsRate.prototype['TypeOfUnits'] = undefined;

/**
 * Last modified timestamp
 * @member {String} UpdatedDateUTC
 */
EarningsRate.prototype['UpdatedDateUTC'] = undefined;






export default EarningsRate;

