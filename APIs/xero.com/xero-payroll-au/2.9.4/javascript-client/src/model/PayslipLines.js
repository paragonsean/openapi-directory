/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeductionLine from './DeductionLine';
import EarningsLine from './EarningsLine';
import LeaveAccrualLine from './LeaveAccrualLine';
import LeaveEarningsLine from './LeaveEarningsLine';
import ReimbursementLine from './ReimbursementLine';
import SuperannuationLine from './SuperannuationLine';
import TaxLine from './TaxLine';

/**
 * The PayslipLines model module.
 * @module model/PayslipLines
 * @version 2.9.4
 */
class PayslipLines {
    /**
     * Constructs a new <code>PayslipLines</code>.
     * @alias module:model/PayslipLines
     */
    constructor() { 
        
        PayslipLines.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PayslipLines</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PayslipLines} obj Optional instance to populate.
     * @return {module:model/PayslipLines} The populated <code>PayslipLines</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PayslipLines();

            if (data.hasOwnProperty('DeductionLines')) {
                obj['DeductionLines'] = ApiClient.convertToType(data['DeductionLines'], [DeductionLine]);
            }
            if (data.hasOwnProperty('EarningsLines')) {
                obj['EarningsLines'] = ApiClient.convertToType(data['EarningsLines'], [EarningsLine]);
            }
            if (data.hasOwnProperty('LeaveAccrualLines')) {
                obj['LeaveAccrualLines'] = ApiClient.convertToType(data['LeaveAccrualLines'], [LeaveAccrualLine]);
            }
            if (data.hasOwnProperty('LeaveEarningsLines')) {
                obj['LeaveEarningsLines'] = ApiClient.convertToType(data['LeaveEarningsLines'], [LeaveEarningsLine]);
            }
            if (data.hasOwnProperty('ReimbursementLines')) {
                obj['ReimbursementLines'] = ApiClient.convertToType(data['ReimbursementLines'], [ReimbursementLine]);
            }
            if (data.hasOwnProperty('SuperannuationLines')) {
                obj['SuperannuationLines'] = ApiClient.convertToType(data['SuperannuationLines'], [SuperannuationLine]);
            }
            if (data.hasOwnProperty('TaxLines')) {
                obj['TaxLines'] = ApiClient.convertToType(data['TaxLines'], [TaxLine]);
            }
            if (data.hasOwnProperty('TimesheetEarningsLines')) {
                obj['TimesheetEarningsLines'] = ApiClient.convertToType(data['TimesheetEarningsLines'], [EarningsLine]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PayslipLines</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PayslipLines</code>.
     */
    static validateJSON(data) {
        if (data['DeductionLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['DeductionLines'])) {
                throw new Error("Expected the field `DeductionLines` to be an array in the JSON data but got " + data['DeductionLines']);
            }
            // validate the optional field `DeductionLines` (array)
            for (const item of data['DeductionLines']) {
                DeductionLine.validateJSON(item);
            };
        }
        if (data['EarningsLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['EarningsLines'])) {
                throw new Error("Expected the field `EarningsLines` to be an array in the JSON data but got " + data['EarningsLines']);
            }
            // validate the optional field `EarningsLines` (array)
            for (const item of data['EarningsLines']) {
                EarningsLine.validateJSON(item);
            };
        }
        if (data['LeaveAccrualLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LeaveAccrualLines'])) {
                throw new Error("Expected the field `LeaveAccrualLines` to be an array in the JSON data but got " + data['LeaveAccrualLines']);
            }
            // validate the optional field `LeaveAccrualLines` (array)
            for (const item of data['LeaveAccrualLines']) {
                LeaveAccrualLine.validateJSON(item);
            };
        }
        if (data['LeaveEarningsLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LeaveEarningsLines'])) {
                throw new Error("Expected the field `LeaveEarningsLines` to be an array in the JSON data but got " + data['LeaveEarningsLines']);
            }
            // validate the optional field `LeaveEarningsLines` (array)
            for (const item of data['LeaveEarningsLines']) {
                LeaveEarningsLine.validateJSON(item);
            };
        }
        if (data['ReimbursementLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ReimbursementLines'])) {
                throw new Error("Expected the field `ReimbursementLines` to be an array in the JSON data but got " + data['ReimbursementLines']);
            }
            // validate the optional field `ReimbursementLines` (array)
            for (const item of data['ReimbursementLines']) {
                ReimbursementLine.validateJSON(item);
            };
        }
        if (data['SuperannuationLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['SuperannuationLines'])) {
                throw new Error("Expected the field `SuperannuationLines` to be an array in the JSON data but got " + data['SuperannuationLines']);
            }
            // validate the optional field `SuperannuationLines` (array)
            for (const item of data['SuperannuationLines']) {
                SuperannuationLine.validateJSON(item);
            };
        }
        if (data['TaxLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['TaxLines'])) {
                throw new Error("Expected the field `TaxLines` to be an array in the JSON data but got " + data['TaxLines']);
            }
            // validate the optional field `TaxLines` (array)
            for (const item of data['TaxLines']) {
                TaxLine.validateJSON(item);
            };
        }
        if (data['TimesheetEarningsLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['TimesheetEarningsLines'])) {
                throw new Error("Expected the field `TimesheetEarningsLines` to be an array in the JSON data but got " + data['TimesheetEarningsLines']);
            }
            // validate the optional field `TimesheetEarningsLines` (array)
            for (const item of data['TimesheetEarningsLines']) {
                EarningsLine.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/DeductionLine>} DeductionLines
 */
PayslipLines.prototype['DeductionLines'] = undefined;

/**
 * @member {Array.<module:model/EarningsLine>} EarningsLines
 */
PayslipLines.prototype['EarningsLines'] = undefined;

/**
 * @member {Array.<module:model/LeaveAccrualLine>} LeaveAccrualLines
 */
PayslipLines.prototype['LeaveAccrualLines'] = undefined;

/**
 * @member {Array.<module:model/LeaveEarningsLine>} LeaveEarningsLines
 */
PayslipLines.prototype['LeaveEarningsLines'] = undefined;

/**
 * @member {Array.<module:model/ReimbursementLine>} ReimbursementLines
 */
PayslipLines.prototype['ReimbursementLines'] = undefined;

/**
 * @member {Array.<module:model/SuperannuationLine>} SuperannuationLines
 */
PayslipLines.prototype['SuperannuationLines'] = undefined;

/**
 * @member {Array.<module:model/TaxLine>} TaxLines
 */
PayslipLines.prototype['TaxLines'] = undefined;

/**
 * @member {Array.<module:model/EarningsLine>} TimesheetEarningsLines
 */
PayslipLines.prototype['TimesheetEarningsLines'] = undefined;






export default PayslipLines;

