/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LeavePeriod from './LeavePeriod';
import ValidationError from './ValidationError';

/**
 * The LeaveApplication model module.
 * @module model/LeaveApplication
 * @version 2.9.4
 */
class LeaveApplication {
    /**
     * Constructs a new <code>LeaveApplication</code>.
     * @alias module:model/LeaveApplication
     */
    constructor() { 
        
        LeaveApplication.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LeaveApplication</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LeaveApplication} obj Optional instance to populate.
     * @return {module:model/LeaveApplication} The populated <code>LeaveApplication</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LeaveApplication();

            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('EmployeeID')) {
                obj['EmployeeID'] = ApiClient.convertToType(data['EmployeeID'], 'String');
            }
            if (data.hasOwnProperty('EndDate')) {
                obj['EndDate'] = ApiClient.convertToType(data['EndDate'], 'String');
            }
            if (data.hasOwnProperty('LeaveApplicationID')) {
                obj['LeaveApplicationID'] = ApiClient.convertToType(data['LeaveApplicationID'], 'String');
            }
            if (data.hasOwnProperty('LeavePeriods')) {
                obj['LeavePeriods'] = ApiClient.convertToType(data['LeavePeriods'], [LeavePeriod]);
            }
            if (data.hasOwnProperty('LeaveTypeID')) {
                obj['LeaveTypeID'] = ApiClient.convertToType(data['LeaveTypeID'], 'String');
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'String');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
            if (data.hasOwnProperty('UpdatedDateUTC')) {
                obj['UpdatedDateUTC'] = ApiClient.convertToType(data['UpdatedDateUTC'], 'String');
            }
            if (data.hasOwnProperty('ValidationErrors')) {
                obj['ValidationErrors'] = ApiClient.convertToType(data['ValidationErrors'], [ValidationError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LeaveApplication</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LeaveApplication</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['EmployeeID'] && !(typeof data['EmployeeID'] === 'string' || data['EmployeeID'] instanceof String)) {
            throw new Error("Expected the field `EmployeeID` to be a primitive type in the JSON string but got " + data['EmployeeID']);
        }
        // ensure the json data is a string
        if (data['EndDate'] && !(typeof data['EndDate'] === 'string' || data['EndDate'] instanceof String)) {
            throw new Error("Expected the field `EndDate` to be a primitive type in the JSON string but got " + data['EndDate']);
        }
        // ensure the json data is a string
        if (data['LeaveApplicationID'] && !(typeof data['LeaveApplicationID'] === 'string' || data['LeaveApplicationID'] instanceof String)) {
            throw new Error("Expected the field `LeaveApplicationID` to be a primitive type in the JSON string but got " + data['LeaveApplicationID']);
        }
        if (data['LeavePeriods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LeavePeriods'])) {
                throw new Error("Expected the field `LeavePeriods` to be an array in the JSON data but got " + data['LeavePeriods']);
            }
            // validate the optional field `LeavePeriods` (array)
            for (const item of data['LeavePeriods']) {
                LeavePeriod.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['LeaveTypeID'] && !(typeof data['LeaveTypeID'] === 'string' || data['LeaveTypeID'] instanceof String)) {
            throw new Error("Expected the field `LeaveTypeID` to be a primitive type in the JSON string but got " + data['LeaveTypeID']);
        }
        // ensure the json data is a string
        if (data['StartDate'] && !(typeof data['StartDate'] === 'string' || data['StartDate'] instanceof String)) {
            throw new Error("Expected the field `StartDate` to be a primitive type in the JSON string but got " + data['StartDate']);
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }
        // ensure the json data is a string
        if (data['UpdatedDateUTC'] && !(typeof data['UpdatedDateUTC'] === 'string' || data['UpdatedDateUTC'] instanceof String)) {
            throw new Error("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got " + data['UpdatedDateUTC']);
        }
        if (data['ValidationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ValidationErrors'])) {
                throw new Error("Expected the field `ValidationErrors` to be an array in the JSON data but got " + data['ValidationErrors']);
            }
            // validate the optional field `ValidationErrors` (array)
            for (const item of data['ValidationErrors']) {
                ValidationError.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The Description of the Leave
 * @member {String} Description
 */
LeaveApplication.prototype['Description'] = undefined;

/**
 * The Xero identifier for Payroll Employee
 * @member {String} EmployeeID
 */
LeaveApplication.prototype['EmployeeID'] = undefined;

/**
 * End date of the leave (YYYY-MM-DD)
 * @member {String} EndDate
 */
LeaveApplication.prototype['EndDate'] = undefined;

/**
 * The Xero identifier for Payroll Employee
 * @member {String} LeaveApplicationID
 */
LeaveApplication.prototype['LeaveApplicationID'] = undefined;

/**
 * @member {Array.<module:model/LeavePeriod>} LeavePeriods
 */
LeaveApplication.prototype['LeavePeriods'] = undefined;

/**
 * The Xero identifier for Leave Type
 * @member {String} LeaveTypeID
 */
LeaveApplication.prototype['LeaveTypeID'] = undefined;

/**
 * Start date of the leave (YYYY-MM-DD)
 * @member {String} StartDate
 */
LeaveApplication.prototype['StartDate'] = undefined;

/**
 * The title of the leave
 * @member {String} Title
 */
LeaveApplication.prototype['Title'] = undefined;

/**
 * Last modified timestamp
 * @member {String} UpdatedDateUTC
 */
LeaveApplication.prototype['UpdatedDateUTC'] = undefined;

/**
 * Displays array of validation error messages from the API
 * @member {Array.<module:model/ValidationError>} ValidationErrors
 */
LeaveApplication.prototype['ValidationErrors'] = undefined;






export default LeaveApplication;

