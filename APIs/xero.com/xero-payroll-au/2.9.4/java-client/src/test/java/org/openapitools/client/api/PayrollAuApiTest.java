/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Employee;
import org.openapitools.client.model.Employees;
import org.openapitools.client.model.LeaveApplication;
import org.openapitools.client.model.LeaveApplications;
import org.openapitools.client.model.ModelAPIException;
import org.openapitools.client.model.PayItem;
import org.openapitools.client.model.PayItems;
import org.openapitools.client.model.PayRun;
import org.openapitools.client.model.PayRuns;
import org.openapitools.client.model.PayrollCalendar;
import org.openapitools.client.model.PayrollCalendars;
import org.openapitools.client.model.PayslipLines;
import org.openapitools.client.model.PayslipObject;
import org.openapitools.client.model.Payslips;
import org.openapitools.client.model.SettingsObject;
import org.openapitools.client.model.SuperFund;
import org.openapitools.client.model.SuperFundProducts;
import org.openapitools.client.model.SuperFunds;
import org.openapitools.client.model.Timesheet;
import org.openapitools.client.model.TimesheetObject;
import org.openapitools.client.model.Timesheets;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PayrollAuApi
 */
@Disabled
public class PayrollAuApiTest {

    private final PayrollAuApi api = new PayrollAuApi();

    /**
     * Creates a payroll employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmployeeTest() throws ApiException {
        String xeroTenantId = null;
        List<Employee> employee = null;
        Employees response = api.createEmployee(xeroTenantId, employee);
        // TODO: test validations
    }

    /**
     * Creates a leave application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLeaveApplicationTest() throws ApiException {
        String xeroTenantId = null;
        List<LeaveApplication> leaveApplication = null;
        LeaveApplications response = api.createLeaveApplication(xeroTenantId, leaveApplication);
        // TODO: test validations
    }

    /**
     * Creates a pay item
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPayItemTest() throws ApiException {
        String xeroTenantId = null;
        PayItem payItem = null;
        PayItems response = api.createPayItem(xeroTenantId, payItem);
        // TODO: test validations
    }

    /**
     * Creates a pay run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPayRunTest() throws ApiException {
        String xeroTenantId = null;
        List<PayRun> payRun = null;
        PayRuns response = api.createPayRun(xeroTenantId, payRun);
        // TODO: test validations
    }

    /**
     * Creates a Payroll Calendar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPayrollCalendarTest() throws ApiException {
        String xeroTenantId = null;
        List<PayrollCalendar> payrollCalendar = null;
        PayrollCalendars response = api.createPayrollCalendar(xeroTenantId, payrollCalendar);
        // TODO: test validations
    }

    /**
     * Creates a superfund
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSuperfundTest() throws ApiException {
        String xeroTenantId = null;
        List<SuperFund> superFund = null;
        SuperFunds response = api.createSuperfund(xeroTenantId, superFund);
        // TODO: test validations
    }

    /**
     * Creates a timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTimesheetTest() throws ApiException {
        String xeroTenantId = null;
        List<Timesheet> timesheet = null;
        Timesheets response = api.createTimesheet(xeroTenantId, timesheet);
        // TODO: test validations
    }

    /**
     * Retrieves an employee&#39;s detail by unique employee id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeTest() throws ApiException {
        String xeroTenantId = null;
        UUID employeeID = null;
        Employees response = api.getEmployee(xeroTenantId, employeeID);
        // TODO: test validations
    }

    /**
     * Searches payroll employees
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeesTest() throws ApiException {
        String xeroTenantId = null;
        String ifModifiedSince = null;
        String where = null;
        String order = null;
        Integer page = null;
        Employees response = api.getEmployees(xeroTenantId, ifModifiedSince, where, order, page);
        // TODO: test validations
    }

    /**
     * Retrieves a leave application by a unique leave application id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLeaveApplicationTest() throws ApiException {
        String xeroTenantId = null;
        UUID leaveApplicationID = null;
        LeaveApplications response = api.getLeaveApplication(xeroTenantId, leaveApplicationID);
        // TODO: test validations
    }

    /**
     * Retrieves leave applications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLeaveApplicationsTest() throws ApiException {
        String xeroTenantId = null;
        String ifModifiedSince = null;
        String where = null;
        String order = null;
        Integer page = null;
        LeaveApplications response = api.getLeaveApplications(xeroTenantId, ifModifiedSince, where, order, page);
        // TODO: test validations
    }

    /**
     * Retrieves pay items
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayItemsTest() throws ApiException {
        String xeroTenantId = null;
        String ifModifiedSince = null;
        String where = null;
        String order = null;
        Integer page = null;
        PayItems response = api.getPayItems(xeroTenantId, ifModifiedSince, where, order, page);
        // TODO: test validations
    }

    /**
     * Retrieves a pay run by using a unique pay run id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayRunTest() throws ApiException {
        String xeroTenantId = null;
        UUID payRunID = null;
        PayRuns response = api.getPayRun(xeroTenantId, payRunID);
        // TODO: test validations
    }

    /**
     * Retrieves pay runs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayRunsTest() throws ApiException {
        String xeroTenantId = null;
        String ifModifiedSince = null;
        String where = null;
        String order = null;
        Integer page = null;
        PayRuns response = api.getPayRuns(xeroTenantId, ifModifiedSince, where, order, page);
        // TODO: test validations
    }

    /**
     * Retrieves payroll calendar by using a unique payroll calendar ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayrollCalendarTest() throws ApiException {
        String xeroTenantId = null;
        UUID payrollCalendarID = null;
        PayrollCalendars response = api.getPayrollCalendar(xeroTenantId, payrollCalendarID);
        // TODO: test validations
    }

    /**
     * Retrieves payroll calendars
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayrollCalendarsTest() throws ApiException {
        String xeroTenantId = null;
        String ifModifiedSince = null;
        String where = null;
        String order = null;
        Integer page = null;
        PayrollCalendars response = api.getPayrollCalendars(xeroTenantId, ifModifiedSince, where, order, page);
        // TODO: test validations
    }

    /**
     * Retrieves for a payslip by a unique payslip id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayslipTest() throws ApiException {
        String xeroTenantId = null;
        UUID payslipID = null;
        PayslipObject response = api.getPayslip(xeroTenantId, payslipID);
        // TODO: test validations
    }

    /**
     * Retrieves payroll settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettingsTest() throws ApiException {
        String xeroTenantId = null;
        SettingsObject response = api.getSettings(xeroTenantId);
        // TODO: test validations
    }

    /**
     * Retrieves a superfund by using a unique superfund ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSuperfundTest() throws ApiException {
        String xeroTenantId = null;
        UUID superFundID = null;
        SuperFunds response = api.getSuperfund(xeroTenantId, superFundID);
        // TODO: test validations
    }

    /**
     * Retrieves superfund products
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSuperfundProductsTest() throws ApiException {
        String xeroTenantId = null;
        String ABN = null;
        String USI = null;
        SuperFundProducts response = api.getSuperfundProducts(xeroTenantId, ABN, USI);
        // TODO: test validations
    }

    /**
     * Retrieves superfunds
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSuperfundsTest() throws ApiException {
        String xeroTenantId = null;
        String ifModifiedSince = null;
        String where = null;
        String order = null;
        Integer page = null;
        SuperFunds response = api.getSuperfunds(xeroTenantId, ifModifiedSince, where, order, page);
        // TODO: test validations
    }

    /**
     * Retrieves a timesheet by using a unique timesheet id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimesheetTest() throws ApiException {
        String xeroTenantId = null;
        UUID timesheetID = null;
        TimesheetObject response = api.getTimesheet(xeroTenantId, timesheetID);
        // TODO: test validations
    }

    /**
     * Retrieves timesheets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimesheetsTest() throws ApiException {
        String xeroTenantId = null;
        String ifModifiedSince = null;
        String where = null;
        String order = null;
        Integer page = null;
        Timesheets response = api.getTimesheets(xeroTenantId, ifModifiedSince, where, order, page);
        // TODO: test validations
    }

    /**
     * Updates an employee&#39;s detail
     *
     * Update properties on a single employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmployeeTest() throws ApiException {
        String xeroTenantId = null;
        UUID employeeID = null;
        List<Employee> employee = null;
        Employees response = api.updateEmployee(xeroTenantId, employeeID, employee);
        // TODO: test validations
    }

    /**
     * Updates a specific leave application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLeaveApplicationTest() throws ApiException {
        String xeroTenantId = null;
        UUID leaveApplicationID = null;
        List<LeaveApplication> leaveApplication = null;
        LeaveApplications response = api.updateLeaveApplication(xeroTenantId, leaveApplicationID, leaveApplication);
        // TODO: test validations
    }

    /**
     * Updates a pay run
     *
     * Update properties on a single PayRun
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePayRunTest() throws ApiException {
        String xeroTenantId = null;
        UUID payRunID = null;
        List<PayRun> payRun = null;
        PayRuns response = api.updatePayRun(xeroTenantId, payRunID, payRun);
        // TODO: test validations
    }

    /**
     * Updates a payslip
     *
     * Update lines on a single payslips
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePayslipTest() throws ApiException {
        String xeroTenantId = null;
        UUID payslipID = null;
        List<PayslipLines> payslipLines = null;
        Payslips response = api.updatePayslip(xeroTenantId, payslipID, payslipLines);
        // TODO: test validations
    }

    /**
     * Updates a superfund
     *
     * Update properties on a single Superfund
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSuperfundTest() throws ApiException {
        String xeroTenantId = null;
        UUID superFundID = null;
        List<SuperFund> superFund = null;
        SuperFunds response = api.updateSuperfund(xeroTenantId, superFundID, superFund);
        // TODO: test validations
    }

    /**
     * Updates a timesheet
     *
     * Update properties on a single timesheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTimesheetTest() throws ApiException {
        String xeroTenantId = null;
        UUID timesheetID = null;
        List<Timesheet> timesheet = null;
        Timesheets response = api.updateTimesheet(xeroTenantId, timesheetID, timesheet);
        // TODO: test validations
    }

}
