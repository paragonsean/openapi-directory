/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.AllowanceType;
import org.openapitools.client.model.EarningsType;
import org.openapitools.client.model.EmploymentTerminationPaymentType;
import org.openapitools.client.model.RateType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EarningsRate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:28.765088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EarningsRate {
  public static final String SERIALIZED_NAME_ACCOUNT_CODE = "AccountCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CODE)
  private String accountCode;

  public static final String SERIALIZED_NAME_ACCRUE_LEAVE = "AccrueLeave";
  @SerializedName(SERIALIZED_NAME_ACCRUE_LEAVE)
  private Boolean accrueLeave;

  public static final String SERIALIZED_NAME_ALLOWANCE_TYPE = "AllowanceType";
  @SerializedName(SERIALIZED_NAME_ALLOWANCE_TYPE)
  private AllowanceType allowanceType;

  public static final String SERIALIZED_NAME_AMOUNT = "Amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_CURRENT_RECORD = "CurrentRecord";
  @SerializedName(SERIALIZED_NAME_CURRENT_RECORD)
  private Boolean currentRecord;

  public static final String SERIALIZED_NAME_EARNINGS_RATE_I_D = "EarningsRateID";
  @SerializedName(SERIALIZED_NAME_EARNINGS_RATE_I_D)
  private UUID earningsRateID;

  public static final String SERIALIZED_NAME_EARNINGS_TYPE = "EarningsType";
  @SerializedName(SERIALIZED_NAME_EARNINGS_TYPE)
  private EarningsType earningsType;

  public static final String SERIALIZED_NAME_EMPLOYMENT_TERMINATION_PAYMENT_TYPE = "EmploymentTerminationPaymentType";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_TERMINATION_PAYMENT_TYPE)
  private EmploymentTerminationPaymentType employmentTerminationPaymentType;

  public static final String SERIALIZED_NAME_IS_EXEMPT_FROM_SUPER = "IsExemptFromSuper";
  @SerializedName(SERIALIZED_NAME_IS_EXEMPT_FROM_SUPER)
  private Boolean isExemptFromSuper;

  public static final String SERIALIZED_NAME_IS_EXEMPT_FROM_TAX = "IsExemptFromTax";
  @SerializedName(SERIALIZED_NAME_IS_EXEMPT_FROM_TAX)
  private Boolean isExemptFromTax;

  public static final String SERIALIZED_NAME_IS_REPORTABLE_AS_W1 = "IsReportableAsW1";
  @SerializedName(SERIALIZED_NAME_IS_REPORTABLE_AS_W1)
  private Boolean isReportableAsW1;

  public static final String SERIALIZED_NAME_MULTIPLIER = "Multiplier";
  @SerializedName(SERIALIZED_NAME_MULTIPLIER)
  private Double multiplier;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RATE_PER_UNIT = "RatePerUnit";
  @SerializedName(SERIALIZED_NAME_RATE_PER_UNIT)
  private String ratePerUnit;

  public static final String SERIALIZED_NAME_RATE_TYPE = "RateType";
  @SerializedName(SERIALIZED_NAME_RATE_TYPE)
  private RateType rateType;

  public static final String SERIALIZED_NAME_TYPE_OF_UNITS = "TypeOfUnits";
  @SerializedName(SERIALIZED_NAME_TYPE_OF_UNITS)
  private String typeOfUnits;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public EarningsRate() {
  }

  public EarningsRate(
     String updatedDateUTC
  ) {
    this();
    this.updatedDateUTC = updatedDateUTC;
  }

  public EarningsRate accountCode(String accountCode) {
    this.accountCode = accountCode;
    return this;
  }

  /**
   * See Accounts
   * @return accountCode
   */
  @javax.annotation.Nullable
  public String getAccountCode() {
    return accountCode;
  }

  public void setAccountCode(String accountCode) {
    this.accountCode = accountCode;
  }


  public EarningsRate accrueLeave(Boolean accrueLeave) {
    this.accrueLeave = accrueLeave;
    return this;
  }

  /**
   * Indicates that this earnings rate should accrue leave. Only applicable if RateType is MULTIPLE
   * @return accrueLeave
   */
  @javax.annotation.Nullable
  public Boolean getAccrueLeave() {
    return accrueLeave;
  }

  public void setAccrueLeave(Boolean accrueLeave) {
    this.accrueLeave = accrueLeave;
  }


  public EarningsRate allowanceType(AllowanceType allowanceType) {
    this.allowanceType = allowanceType;
    return this;
  }

  /**
   * Get allowanceType
   * @return allowanceType
   */
  @javax.annotation.Nullable
  public AllowanceType getAllowanceType() {
    return allowanceType;
  }

  public void setAllowanceType(AllowanceType allowanceType) {
    this.allowanceType = allowanceType;
  }


  public EarningsRate amount(Double amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Optional Amount for FIXEDAMOUNT RateType EarningsRate
   * @return amount
   */
  @javax.annotation.Nullable
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }


  public EarningsRate currentRecord(Boolean currentRecord) {
    this.currentRecord = currentRecord;
    return this;
  }

  /**
   * Is the current record
   * @return currentRecord
   */
  @javax.annotation.Nullable
  public Boolean getCurrentRecord() {
    return currentRecord;
  }

  public void setCurrentRecord(Boolean currentRecord) {
    this.currentRecord = currentRecord;
  }


  public EarningsRate earningsRateID(UUID earningsRateID) {
    this.earningsRateID = earningsRateID;
    return this;
  }

  /**
   * Xero identifier
   * @return earningsRateID
   */
  @javax.annotation.Nullable
  public UUID getEarningsRateID() {
    return earningsRateID;
  }

  public void setEarningsRateID(UUID earningsRateID) {
    this.earningsRateID = earningsRateID;
  }


  public EarningsRate earningsType(EarningsType earningsType) {
    this.earningsType = earningsType;
    return this;
  }

  /**
   * Get earningsType
   * @return earningsType
   */
  @javax.annotation.Nullable
  public EarningsType getEarningsType() {
    return earningsType;
  }

  public void setEarningsType(EarningsType earningsType) {
    this.earningsType = earningsType;
  }


  public EarningsRate employmentTerminationPaymentType(EmploymentTerminationPaymentType employmentTerminationPaymentType) {
    this.employmentTerminationPaymentType = employmentTerminationPaymentType;
    return this;
  }

  /**
   * Get employmentTerminationPaymentType
   * @return employmentTerminationPaymentType
   */
  @javax.annotation.Nullable
  public EmploymentTerminationPaymentType getEmploymentTerminationPaymentType() {
    return employmentTerminationPaymentType;
  }

  public void setEmploymentTerminationPaymentType(EmploymentTerminationPaymentType employmentTerminationPaymentType) {
    this.employmentTerminationPaymentType = employmentTerminationPaymentType;
  }


  public EarningsRate isExemptFromSuper(Boolean isExemptFromSuper) {
    this.isExemptFromSuper = isExemptFromSuper;
    return this;
  }

  /**
   * See the ATO website for details of which payments are exempt from SGC
   * @return isExemptFromSuper
   */
  @javax.annotation.Nullable
  public Boolean getIsExemptFromSuper() {
    return isExemptFromSuper;
  }

  public void setIsExemptFromSuper(Boolean isExemptFromSuper) {
    this.isExemptFromSuper = isExemptFromSuper;
  }


  public EarningsRate isExemptFromTax(Boolean isExemptFromTax) {
    this.isExemptFromTax = isExemptFromTax;
    return this;
  }

  /**
   * Most payments are subject to tax, so you should only set this value if you are sure that a payment is exempt from PAYG withholding
   * @return isExemptFromTax
   */
  @javax.annotation.Nullable
  public Boolean getIsExemptFromTax() {
    return isExemptFromTax;
  }

  public void setIsExemptFromTax(Boolean isExemptFromTax) {
    this.isExemptFromTax = isExemptFromTax;
  }


  public EarningsRate isReportableAsW1(Boolean isReportableAsW1) {
    this.isReportableAsW1 = isReportableAsW1;
    return this;
  }

  /**
   * Boolean to determine if the earnings rate is reportable or exempt from W1
   * @return isReportableAsW1
   */
  @javax.annotation.Nullable
  public Boolean getIsReportableAsW1() {
    return isReportableAsW1;
  }

  public void setIsReportableAsW1(Boolean isReportableAsW1) {
    this.isReportableAsW1 = isReportableAsW1;
  }


  public EarningsRate multiplier(Double multiplier) {
    this.multiplier = multiplier;
    return this;
  }

  /**
   * This is the multiplier used to calculate the rate per unit, based on the employeeâ€™s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MULTIPLE
   * @return multiplier
   */
  @javax.annotation.Nullable
  public Double getMultiplier() {
    return multiplier;
  }

  public void setMultiplier(Double multiplier) {
    this.multiplier = multiplier;
  }


  public EarningsRate name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the earnings rate (max length &#x3D; 100)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EarningsRate ratePerUnit(String ratePerUnit) {
    this.ratePerUnit = ratePerUnit;
    return this;
  }

  /**
   * Default rate per unit (optional). Only applicable if RateType is RATEPERUNIT.
   * @return ratePerUnit
   */
  @javax.annotation.Nullable
  public String getRatePerUnit() {
    return ratePerUnit;
  }

  public void setRatePerUnit(String ratePerUnit) {
    this.ratePerUnit = ratePerUnit;
  }


  public EarningsRate rateType(RateType rateType) {
    this.rateType = rateType;
    return this;
  }

  /**
   * Get rateType
   * @return rateType
   */
  @javax.annotation.Nullable
  public RateType getRateType() {
    return rateType;
  }

  public void setRateType(RateType rateType) {
    this.rateType = rateType;
  }


  public EarningsRate typeOfUnits(String typeOfUnits) {
    this.typeOfUnits = typeOfUnits;
    return this;
  }

  /**
   * Type of units used to record earnings (max length &#x3D; 50). Only When RateType is RATEPERUNIT
   * @return typeOfUnits
   */
  @javax.annotation.Nullable
  public String getTypeOfUnits() {
    return typeOfUnits;
  }

  public void setTypeOfUnits(String typeOfUnits) {
    this.typeOfUnits = typeOfUnits;
  }


  /**
   * Last modified timestamp
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EarningsRate earningsRate = (EarningsRate) o;
    return Objects.equals(this.accountCode, earningsRate.accountCode) &&
        Objects.equals(this.accrueLeave, earningsRate.accrueLeave) &&
        Objects.equals(this.allowanceType, earningsRate.allowanceType) &&
        Objects.equals(this.amount, earningsRate.amount) &&
        Objects.equals(this.currentRecord, earningsRate.currentRecord) &&
        Objects.equals(this.earningsRateID, earningsRate.earningsRateID) &&
        Objects.equals(this.earningsType, earningsRate.earningsType) &&
        Objects.equals(this.employmentTerminationPaymentType, earningsRate.employmentTerminationPaymentType) &&
        Objects.equals(this.isExemptFromSuper, earningsRate.isExemptFromSuper) &&
        Objects.equals(this.isExemptFromTax, earningsRate.isExemptFromTax) &&
        Objects.equals(this.isReportableAsW1, earningsRate.isReportableAsW1) &&
        Objects.equals(this.multiplier, earningsRate.multiplier) &&
        Objects.equals(this.name, earningsRate.name) &&
        Objects.equals(this.ratePerUnit, earningsRate.ratePerUnit) &&
        Objects.equals(this.rateType, earningsRate.rateType) &&
        Objects.equals(this.typeOfUnits, earningsRate.typeOfUnits) &&
        Objects.equals(this.updatedDateUTC, earningsRate.updatedDateUTC);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountCode, accrueLeave, allowanceType, amount, currentRecord, earningsRateID, earningsType, employmentTerminationPaymentType, isExemptFromSuper, isExemptFromTax, isReportableAsW1, multiplier, name, ratePerUnit, rateType, typeOfUnits, updatedDateUTC);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EarningsRate {\n");
    sb.append("    accountCode: ").append(toIndentedString(accountCode)).append("\n");
    sb.append("    accrueLeave: ").append(toIndentedString(accrueLeave)).append("\n");
    sb.append("    allowanceType: ").append(toIndentedString(allowanceType)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currentRecord: ").append(toIndentedString(currentRecord)).append("\n");
    sb.append("    earningsRateID: ").append(toIndentedString(earningsRateID)).append("\n");
    sb.append("    earningsType: ").append(toIndentedString(earningsType)).append("\n");
    sb.append("    employmentTerminationPaymentType: ").append(toIndentedString(employmentTerminationPaymentType)).append("\n");
    sb.append("    isExemptFromSuper: ").append(toIndentedString(isExemptFromSuper)).append("\n");
    sb.append("    isExemptFromTax: ").append(toIndentedString(isExemptFromTax)).append("\n");
    sb.append("    isReportableAsW1: ").append(toIndentedString(isReportableAsW1)).append("\n");
    sb.append("    multiplier: ").append(toIndentedString(multiplier)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ratePerUnit: ").append(toIndentedString(ratePerUnit)).append("\n");
    sb.append("    rateType: ").append(toIndentedString(rateType)).append("\n");
    sb.append("    typeOfUnits: ").append(toIndentedString(typeOfUnits)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountCode");
    openapiFields.add("AccrueLeave");
    openapiFields.add("AllowanceType");
    openapiFields.add("Amount");
    openapiFields.add("CurrentRecord");
    openapiFields.add("EarningsRateID");
    openapiFields.add("EarningsType");
    openapiFields.add("EmploymentTerminationPaymentType");
    openapiFields.add("IsExemptFromSuper");
    openapiFields.add("IsExemptFromTax");
    openapiFields.add("IsReportableAsW1");
    openapiFields.add("Multiplier");
    openapiFields.add("Name");
    openapiFields.add("RatePerUnit");
    openapiFields.add("RateType");
    openapiFields.add("TypeOfUnits");
    openapiFields.add("UpdatedDateUTC");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EarningsRate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EarningsRate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EarningsRate is not found in the empty JSON string", EarningsRate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EarningsRate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EarningsRate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccountCode") != null && !jsonObj.get("AccountCode").isJsonNull()) && !jsonObj.get("AccountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountCode").toString()));
      }
      // validate the optional field `AllowanceType`
      if (jsonObj.get("AllowanceType") != null && !jsonObj.get("AllowanceType").isJsonNull()) {
        AllowanceType.validateJsonElement(jsonObj.get("AllowanceType"));
      }
      if ((jsonObj.get("EarningsRateID") != null && !jsonObj.get("EarningsRateID").isJsonNull()) && !jsonObj.get("EarningsRateID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EarningsRateID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EarningsRateID").toString()));
      }
      // validate the optional field `EarningsType`
      if (jsonObj.get("EarningsType") != null && !jsonObj.get("EarningsType").isJsonNull()) {
        EarningsType.validateJsonElement(jsonObj.get("EarningsType"));
      }
      // validate the optional field `EmploymentTerminationPaymentType`
      if (jsonObj.get("EmploymentTerminationPaymentType") != null && !jsonObj.get("EmploymentTerminationPaymentType").isJsonNull()) {
        EmploymentTerminationPaymentType.validateJsonElement(jsonObj.get("EmploymentTerminationPaymentType"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("RatePerUnit") != null && !jsonObj.get("RatePerUnit").isJsonNull()) && !jsonObj.get("RatePerUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RatePerUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RatePerUnit").toString()));
      }
      // validate the optional field `RateType`
      if (jsonObj.get("RateType") != null && !jsonObj.get("RateType").isJsonNull()) {
        RateType.validateJsonElement(jsonObj.get("RateType"));
      }
      if ((jsonObj.get("TypeOfUnits") != null && !jsonObj.get("TypeOfUnits").isJsonNull()) && !jsonObj.get("TypeOfUnits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TypeOfUnits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TypeOfUnits").toString()));
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EarningsRate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EarningsRate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EarningsRate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EarningsRate.class));

       return (TypeAdapter<T>) new TypeAdapter<EarningsRate>() {
           @Override
           public void write(JsonWriter out, EarningsRate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EarningsRate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EarningsRate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EarningsRate
   * @throws IOException if the JSON string is invalid with respect to EarningsRate
   */
  public static EarningsRate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EarningsRate.class);
  }

  /**
   * Convert an instance of EarningsRate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

