/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.SuperannuationCalculationType;
import org.openapitools.client.model.SuperannuationContributionType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SuperannuationLine
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:28.765088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SuperannuationLine {
  public static final String SERIALIZED_NAME_AMOUNT = "Amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_CALCULATION_TYPE = "CalculationType";
  @SerializedName(SERIALIZED_NAME_CALCULATION_TYPE)
  private SuperannuationCalculationType calculationType;

  public static final String SERIALIZED_NAME_CONTRIBUTION_TYPE = "ContributionType";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTION_TYPE)
  private SuperannuationContributionType contributionType;

  public static final String SERIALIZED_NAME_EXPENSE_ACCOUNT_CODE = "ExpenseAccountCode";
  @SerializedName(SERIALIZED_NAME_EXPENSE_ACCOUNT_CODE)
  private String expenseAccountCode;

  public static final String SERIALIZED_NAME_LIABILITY_ACCOUNT_CODE = "LiabilityAccountCode";
  @SerializedName(SERIALIZED_NAME_LIABILITY_ACCOUNT_CODE)
  private String liabilityAccountCode;

  public static final String SERIALIZED_NAME_MINIMUM_MONTHLY_EARNINGS = "MinimumMonthlyEarnings";
  @SerializedName(SERIALIZED_NAME_MINIMUM_MONTHLY_EARNINGS)
  private Double minimumMonthlyEarnings;

  public static final String SERIALIZED_NAME_PAYMENT_DATE_FOR_THIS_PERIOD = "PaymentDateForThisPeriod";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE_FOR_THIS_PERIOD)
  private String paymentDateForThisPeriod;

  public static final String SERIALIZED_NAME_PERCENTAGE = "Percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private Double percentage;

  public static final String SERIALIZED_NAME_SUPER_MEMBERSHIP_I_D = "SuperMembershipID";
  @SerializedName(SERIALIZED_NAME_SUPER_MEMBERSHIP_I_D)
  private UUID superMembershipID;

  public SuperannuationLine() {
  }

  public SuperannuationLine amount(Double amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Superannuation amount
   * @return amount
   */
  @javax.annotation.Nullable
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }


  public SuperannuationLine calculationType(SuperannuationCalculationType calculationType) {
    this.calculationType = calculationType;
    return this;
  }

  /**
   * Get calculationType
   * @return calculationType
   */
  @javax.annotation.Nullable
  public SuperannuationCalculationType getCalculationType() {
    return calculationType;
  }

  public void setCalculationType(SuperannuationCalculationType calculationType) {
    this.calculationType = calculationType;
  }


  public SuperannuationLine contributionType(SuperannuationContributionType contributionType) {
    this.contributionType = contributionType;
    return this;
  }

  /**
   * Get contributionType
   * @return contributionType
   */
  @javax.annotation.Nullable
  public SuperannuationContributionType getContributionType() {
    return contributionType;
  }

  public void setContributionType(SuperannuationContributionType contributionType) {
    this.contributionType = contributionType;
  }


  public SuperannuationLine expenseAccountCode(String expenseAccountCode) {
    this.expenseAccountCode = expenseAccountCode;
    return this;
  }

  /**
   * Superannuation expense account code.
   * @return expenseAccountCode
   */
  @javax.annotation.Nullable
  public String getExpenseAccountCode() {
    return expenseAccountCode;
  }

  public void setExpenseAccountCode(String expenseAccountCode) {
    this.expenseAccountCode = expenseAccountCode;
  }


  public SuperannuationLine liabilityAccountCode(String liabilityAccountCode) {
    this.liabilityAccountCode = liabilityAccountCode;
    return this;
  }

  /**
   * Superannuation liability account code
   * @return liabilityAccountCode
   */
  @javax.annotation.Nullable
  public String getLiabilityAccountCode() {
    return liabilityAccountCode;
  }

  public void setLiabilityAccountCode(String liabilityAccountCode) {
    this.liabilityAccountCode = liabilityAccountCode;
  }


  public SuperannuationLine minimumMonthlyEarnings(Double minimumMonthlyEarnings) {
    this.minimumMonthlyEarnings = minimumMonthlyEarnings;
    return this;
  }

  /**
   * Superannuation minimum monthly earnings.
   * @return minimumMonthlyEarnings
   */
  @javax.annotation.Nullable
  public Double getMinimumMonthlyEarnings() {
    return minimumMonthlyEarnings;
  }

  public void setMinimumMonthlyEarnings(Double minimumMonthlyEarnings) {
    this.minimumMonthlyEarnings = minimumMonthlyEarnings;
  }


  public SuperannuationLine paymentDateForThisPeriod(String paymentDateForThisPeriod) {
    this.paymentDateForThisPeriod = paymentDateForThisPeriod;
    return this;
  }

  /**
   * Superannuation payment date for the current period (YYYY-MM-DD)
   * @return paymentDateForThisPeriod
   */
  @javax.annotation.Nullable
  public String getPaymentDateForThisPeriod() {
    return paymentDateForThisPeriod;
  }

  public void setPaymentDateForThisPeriod(String paymentDateForThisPeriod) {
    this.paymentDateForThisPeriod = paymentDateForThisPeriod;
  }


  public SuperannuationLine percentage(Double percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * Superannuation percentage
   * @return percentage
   */
  @javax.annotation.Nullable
  public Double getPercentage() {
    return percentage;
  }

  public void setPercentage(Double percentage) {
    this.percentage = percentage;
  }


  public SuperannuationLine superMembershipID(UUID superMembershipID) {
    this.superMembershipID = superMembershipID;
    return this;
  }

  /**
   * Xero identifier for payroll super fund membership ID.
   * @return superMembershipID
   */
  @javax.annotation.Nullable
  public UUID getSuperMembershipID() {
    return superMembershipID;
  }

  public void setSuperMembershipID(UUID superMembershipID) {
    this.superMembershipID = superMembershipID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuperannuationLine superannuationLine = (SuperannuationLine) o;
    return Objects.equals(this.amount, superannuationLine.amount) &&
        Objects.equals(this.calculationType, superannuationLine.calculationType) &&
        Objects.equals(this.contributionType, superannuationLine.contributionType) &&
        Objects.equals(this.expenseAccountCode, superannuationLine.expenseAccountCode) &&
        Objects.equals(this.liabilityAccountCode, superannuationLine.liabilityAccountCode) &&
        Objects.equals(this.minimumMonthlyEarnings, superannuationLine.minimumMonthlyEarnings) &&
        Objects.equals(this.paymentDateForThisPeriod, superannuationLine.paymentDateForThisPeriod) &&
        Objects.equals(this.percentage, superannuationLine.percentage) &&
        Objects.equals(this.superMembershipID, superannuationLine.superMembershipID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, calculationType, contributionType, expenseAccountCode, liabilityAccountCode, minimumMonthlyEarnings, paymentDateForThisPeriod, percentage, superMembershipID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuperannuationLine {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    calculationType: ").append(toIndentedString(calculationType)).append("\n");
    sb.append("    contributionType: ").append(toIndentedString(contributionType)).append("\n");
    sb.append("    expenseAccountCode: ").append(toIndentedString(expenseAccountCode)).append("\n");
    sb.append("    liabilityAccountCode: ").append(toIndentedString(liabilityAccountCode)).append("\n");
    sb.append("    minimumMonthlyEarnings: ").append(toIndentedString(minimumMonthlyEarnings)).append("\n");
    sb.append("    paymentDateForThisPeriod: ").append(toIndentedString(paymentDateForThisPeriod)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    superMembershipID: ").append(toIndentedString(superMembershipID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Amount");
    openapiFields.add("CalculationType");
    openapiFields.add("ContributionType");
    openapiFields.add("ExpenseAccountCode");
    openapiFields.add("LiabilityAccountCode");
    openapiFields.add("MinimumMonthlyEarnings");
    openapiFields.add("PaymentDateForThisPeriod");
    openapiFields.add("Percentage");
    openapiFields.add("SuperMembershipID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuperannuationLine
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuperannuationLine.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuperannuationLine is not found in the empty JSON string", SuperannuationLine.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuperannuationLine.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuperannuationLine` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CalculationType`
      if (jsonObj.get("CalculationType") != null && !jsonObj.get("CalculationType").isJsonNull()) {
        SuperannuationCalculationType.validateJsonElement(jsonObj.get("CalculationType"));
      }
      // validate the optional field `ContributionType`
      if (jsonObj.get("ContributionType") != null && !jsonObj.get("ContributionType").isJsonNull()) {
        SuperannuationContributionType.validateJsonElement(jsonObj.get("ContributionType"));
      }
      if ((jsonObj.get("ExpenseAccountCode") != null && !jsonObj.get("ExpenseAccountCode").isJsonNull()) && !jsonObj.get("ExpenseAccountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExpenseAccountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExpenseAccountCode").toString()));
      }
      if ((jsonObj.get("LiabilityAccountCode") != null && !jsonObj.get("LiabilityAccountCode").isJsonNull()) && !jsonObj.get("LiabilityAccountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LiabilityAccountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LiabilityAccountCode").toString()));
      }
      if ((jsonObj.get("PaymentDateForThisPeriod") != null && !jsonObj.get("PaymentDateForThisPeriod").isJsonNull()) && !jsonObj.get("PaymentDateForThisPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentDateForThisPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentDateForThisPeriod").toString()));
      }
      if ((jsonObj.get("SuperMembershipID") != null && !jsonObj.get("SuperMembershipID").isJsonNull()) && !jsonObj.get("SuperMembershipID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SuperMembershipID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SuperMembershipID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuperannuationLine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuperannuationLine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuperannuationLine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuperannuationLine.class));

       return (TypeAdapter<T>) new TypeAdapter<SuperannuationLine>() {
           @Override
           public void write(JsonWriter out, SuperannuationLine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuperannuationLine read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuperannuationLine given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuperannuationLine
   * @throws IOException if the JSON string is invalid with respect to SuperannuationLine
   */
  public static SuperannuationLine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuperannuationLine.class);
  }

  /**
   * Convert an instance of SuperannuationLine to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

