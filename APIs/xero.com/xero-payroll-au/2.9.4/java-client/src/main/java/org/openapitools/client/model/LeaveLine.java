/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.EmploymentTerminationPaymentType;
import org.openapitools.client.model.EntitlementFinalPayPayoutType;
import org.openapitools.client.model.LeaveLineCalculationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LeaveLine
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:28.765088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LeaveLine {
  public static final String SERIALIZED_NAME_ANNUAL_NUMBER_OF_UNITS = "AnnualNumberOfUnits";
  @SerializedName(SERIALIZED_NAME_ANNUAL_NUMBER_OF_UNITS)
  private Double annualNumberOfUnits;

  public static final String SERIALIZED_NAME_CALCULATION_TYPE = "CalculationType";
  @SerializedName(SERIALIZED_NAME_CALCULATION_TYPE)
  private LeaveLineCalculationType calculationType;

  public static final String SERIALIZED_NAME_EMPLOYMENT_TERMINATION_PAYMENT_TYPE = "EmploymentTerminationPaymentType";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_TERMINATION_PAYMENT_TYPE)
  private EmploymentTerminationPaymentType employmentTerminationPaymentType;

  public static final String SERIALIZED_NAME_ENTITLEMENT_FINAL_PAY_PAYOUT_TYPE = "EntitlementFinalPayPayoutType";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENT_FINAL_PAY_PAYOUT_TYPE)
  private EntitlementFinalPayPayoutType entitlementFinalPayPayoutType;

  public static final String SERIALIZED_NAME_FULL_TIME_NUMBER_OF_UNITS_PER_PERIOD = "FullTimeNumberOfUnitsPerPeriod";
  @SerializedName(SERIALIZED_NAME_FULL_TIME_NUMBER_OF_UNITS_PER_PERIOD)
  private Double fullTimeNumberOfUnitsPerPeriod;

  public static final String SERIALIZED_NAME_INCLUDE_SUPERANNUATION_GUARANTEE_CONTRIBUTION = "IncludeSuperannuationGuaranteeContribution";
  @SerializedName(SERIALIZED_NAME_INCLUDE_SUPERANNUATION_GUARANTEE_CONTRIBUTION)
  private Boolean includeSuperannuationGuaranteeContribution;

  public static final String SERIALIZED_NAME_LEAVE_TYPE_I_D = "LeaveTypeID";
  @SerializedName(SERIALIZED_NAME_LEAVE_TYPE_I_D)
  private UUID leaveTypeID;

  public static final String SERIALIZED_NAME_NUMBER_OF_UNITS = "NumberOfUnits";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_UNITS)
  private Double numberOfUnits;

  public LeaveLine() {
  }

  public LeaveLine annualNumberOfUnits(Double annualNumberOfUnits) {
    this.annualNumberOfUnits = annualNumberOfUnits;
    return this;
  }

  /**
   * Hours of leave accrued each year
   * @return annualNumberOfUnits
   */
  @javax.annotation.Nullable
  public Double getAnnualNumberOfUnits() {
    return annualNumberOfUnits;
  }

  public void setAnnualNumberOfUnits(Double annualNumberOfUnits) {
    this.annualNumberOfUnits = annualNumberOfUnits;
  }


  public LeaveLine calculationType(LeaveLineCalculationType calculationType) {
    this.calculationType = calculationType;
    return this;
  }

  /**
   * Get calculationType
   * @return calculationType
   */
  @javax.annotation.Nullable
  public LeaveLineCalculationType getCalculationType() {
    return calculationType;
  }

  public void setCalculationType(LeaveLineCalculationType calculationType) {
    this.calculationType = calculationType;
  }


  public LeaveLine employmentTerminationPaymentType(EmploymentTerminationPaymentType employmentTerminationPaymentType) {
    this.employmentTerminationPaymentType = employmentTerminationPaymentType;
    return this;
  }

  /**
   * Get employmentTerminationPaymentType
   * @return employmentTerminationPaymentType
   */
  @javax.annotation.Nullable
  public EmploymentTerminationPaymentType getEmploymentTerminationPaymentType() {
    return employmentTerminationPaymentType;
  }

  public void setEmploymentTerminationPaymentType(EmploymentTerminationPaymentType employmentTerminationPaymentType) {
    this.employmentTerminationPaymentType = employmentTerminationPaymentType;
  }


  public LeaveLine entitlementFinalPayPayoutType(EntitlementFinalPayPayoutType entitlementFinalPayPayoutType) {
    this.entitlementFinalPayPayoutType = entitlementFinalPayPayoutType;
    return this;
  }

  /**
   * Get entitlementFinalPayPayoutType
   * @return entitlementFinalPayPayoutType
   */
  @javax.annotation.Nullable
  public EntitlementFinalPayPayoutType getEntitlementFinalPayPayoutType() {
    return entitlementFinalPayPayoutType;
  }

  public void setEntitlementFinalPayPayoutType(EntitlementFinalPayPayoutType entitlementFinalPayPayoutType) {
    this.entitlementFinalPayPayoutType = entitlementFinalPayPayoutType;
  }


  public LeaveLine fullTimeNumberOfUnitsPerPeriod(Double fullTimeNumberOfUnitsPerPeriod) {
    this.fullTimeNumberOfUnitsPerPeriod = fullTimeNumberOfUnitsPerPeriod;
    return this;
  }

  /**
   * Normal ordinary earnings number of units for leave line.
   * @return fullTimeNumberOfUnitsPerPeriod
   */
  @javax.annotation.Nullable
  public Double getFullTimeNumberOfUnitsPerPeriod() {
    return fullTimeNumberOfUnitsPerPeriod;
  }

  public void setFullTimeNumberOfUnitsPerPeriod(Double fullTimeNumberOfUnitsPerPeriod) {
    this.fullTimeNumberOfUnitsPerPeriod = fullTimeNumberOfUnitsPerPeriod;
  }


  public LeaveLine includeSuperannuationGuaranteeContribution(Boolean includeSuperannuationGuaranteeContribution) {
    this.includeSuperannuationGuaranteeContribution = includeSuperannuationGuaranteeContribution;
    return this;
  }

  /**
   * amount of leave line
   * @return includeSuperannuationGuaranteeContribution
   */
  @javax.annotation.Nullable
  public Boolean getIncludeSuperannuationGuaranteeContribution() {
    return includeSuperannuationGuaranteeContribution;
  }

  public void setIncludeSuperannuationGuaranteeContribution(Boolean includeSuperannuationGuaranteeContribution) {
    this.includeSuperannuationGuaranteeContribution = includeSuperannuationGuaranteeContribution;
  }


  public LeaveLine leaveTypeID(UUID leaveTypeID) {
    this.leaveTypeID = leaveTypeID;
    return this;
  }

  /**
   * Xero leave type identifier
   * @return leaveTypeID
   */
  @javax.annotation.Nullable
  public UUID getLeaveTypeID() {
    return leaveTypeID;
  }

  public void setLeaveTypeID(UUID leaveTypeID) {
    this.leaveTypeID = leaveTypeID;
  }


  public LeaveLine numberOfUnits(Double numberOfUnits) {
    this.numberOfUnits = numberOfUnits;
    return this;
  }

  /**
   * Number of units for leave line.
   * @return numberOfUnits
   */
  @javax.annotation.Nullable
  public Double getNumberOfUnits() {
    return numberOfUnits;
  }

  public void setNumberOfUnits(Double numberOfUnits) {
    this.numberOfUnits = numberOfUnits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeaveLine leaveLine = (LeaveLine) o;
    return Objects.equals(this.annualNumberOfUnits, leaveLine.annualNumberOfUnits) &&
        Objects.equals(this.calculationType, leaveLine.calculationType) &&
        Objects.equals(this.employmentTerminationPaymentType, leaveLine.employmentTerminationPaymentType) &&
        Objects.equals(this.entitlementFinalPayPayoutType, leaveLine.entitlementFinalPayPayoutType) &&
        Objects.equals(this.fullTimeNumberOfUnitsPerPeriod, leaveLine.fullTimeNumberOfUnitsPerPeriod) &&
        Objects.equals(this.includeSuperannuationGuaranteeContribution, leaveLine.includeSuperannuationGuaranteeContribution) &&
        Objects.equals(this.leaveTypeID, leaveLine.leaveTypeID) &&
        Objects.equals(this.numberOfUnits, leaveLine.numberOfUnits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annualNumberOfUnits, calculationType, employmentTerminationPaymentType, entitlementFinalPayPayoutType, fullTimeNumberOfUnitsPerPeriod, includeSuperannuationGuaranteeContribution, leaveTypeID, numberOfUnits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeaveLine {\n");
    sb.append("    annualNumberOfUnits: ").append(toIndentedString(annualNumberOfUnits)).append("\n");
    sb.append("    calculationType: ").append(toIndentedString(calculationType)).append("\n");
    sb.append("    employmentTerminationPaymentType: ").append(toIndentedString(employmentTerminationPaymentType)).append("\n");
    sb.append("    entitlementFinalPayPayoutType: ").append(toIndentedString(entitlementFinalPayPayoutType)).append("\n");
    sb.append("    fullTimeNumberOfUnitsPerPeriod: ").append(toIndentedString(fullTimeNumberOfUnitsPerPeriod)).append("\n");
    sb.append("    includeSuperannuationGuaranteeContribution: ").append(toIndentedString(includeSuperannuationGuaranteeContribution)).append("\n");
    sb.append("    leaveTypeID: ").append(toIndentedString(leaveTypeID)).append("\n");
    sb.append("    numberOfUnits: ").append(toIndentedString(numberOfUnits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AnnualNumberOfUnits");
    openapiFields.add("CalculationType");
    openapiFields.add("EmploymentTerminationPaymentType");
    openapiFields.add("EntitlementFinalPayPayoutType");
    openapiFields.add("FullTimeNumberOfUnitsPerPeriod");
    openapiFields.add("IncludeSuperannuationGuaranteeContribution");
    openapiFields.add("LeaveTypeID");
    openapiFields.add("NumberOfUnits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LeaveLine
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LeaveLine.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeaveLine is not found in the empty JSON string", LeaveLine.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LeaveLine.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LeaveLine` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CalculationType`
      if (jsonObj.get("CalculationType") != null && !jsonObj.get("CalculationType").isJsonNull()) {
        LeaveLineCalculationType.validateJsonElement(jsonObj.get("CalculationType"));
      }
      // validate the optional field `EmploymentTerminationPaymentType`
      if (jsonObj.get("EmploymentTerminationPaymentType") != null && !jsonObj.get("EmploymentTerminationPaymentType").isJsonNull()) {
        EmploymentTerminationPaymentType.validateJsonElement(jsonObj.get("EmploymentTerminationPaymentType"));
      }
      // validate the optional field `EntitlementFinalPayPayoutType`
      if (jsonObj.get("EntitlementFinalPayPayoutType") != null && !jsonObj.get("EntitlementFinalPayPayoutType").isJsonNull()) {
        EntitlementFinalPayPayoutType.validateJsonElement(jsonObj.get("EntitlementFinalPayPayoutType"));
      }
      if ((jsonObj.get("LeaveTypeID") != null && !jsonObj.get("LeaveTypeID").isJsonNull()) && !jsonObj.get("LeaveTypeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LeaveTypeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LeaveTypeID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeaveLine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeaveLine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeaveLine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeaveLine.class));

       return (TypeAdapter<T>) new TypeAdapter<LeaveLine>() {
           @Override
           public void write(JsonWriter out, LeaveLine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LeaveLine read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LeaveLine given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LeaveLine
   * @throws IOException if the JSON string is invalid with respect to LeaveLine
   */
  public static LeaveLine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeaveLine.class);
  }

  /**
   * Convert an instance of LeaveLine to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

