/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LeavePeriodStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LeavePeriod
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:28.765088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LeavePeriod {
  public static final String SERIALIZED_NAME_LEAVE_PERIOD_STATUS = "LeavePeriodStatus";
  @SerializedName(SERIALIZED_NAME_LEAVE_PERIOD_STATUS)
  private LeavePeriodStatus leavePeriodStatus;

  public static final String SERIALIZED_NAME_NUMBER_OF_UNITS = "NumberOfUnits";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_UNITS)
  private Double numberOfUnits;

  public static final String SERIALIZED_NAME_PAY_PERIOD_END_DATE = "PayPeriodEndDate";
  @SerializedName(SERIALIZED_NAME_PAY_PERIOD_END_DATE)
  private String payPeriodEndDate;

  public static final String SERIALIZED_NAME_PAY_PERIOD_START_DATE = "PayPeriodStartDate";
  @SerializedName(SERIALIZED_NAME_PAY_PERIOD_START_DATE)
  private String payPeriodStartDate;

  public LeavePeriod() {
  }

  public LeavePeriod leavePeriodStatus(LeavePeriodStatus leavePeriodStatus) {
    this.leavePeriodStatus = leavePeriodStatus;
    return this;
  }

  /**
   * Get leavePeriodStatus
   * @return leavePeriodStatus
   */
  @javax.annotation.Nullable
  public LeavePeriodStatus getLeavePeriodStatus() {
    return leavePeriodStatus;
  }

  public void setLeavePeriodStatus(LeavePeriodStatus leavePeriodStatus) {
    this.leavePeriodStatus = leavePeriodStatus;
  }


  public LeavePeriod numberOfUnits(Double numberOfUnits) {
    this.numberOfUnits = numberOfUnits;
    return this;
  }

  /**
   * The Number of Units for the leave
   * @return numberOfUnits
   */
  @javax.annotation.Nullable
  public Double getNumberOfUnits() {
    return numberOfUnits;
  }

  public void setNumberOfUnits(Double numberOfUnits) {
    this.numberOfUnits = numberOfUnits;
  }


  public LeavePeriod payPeriodEndDate(String payPeriodEndDate) {
    this.payPeriodEndDate = payPeriodEndDate;
    return this;
  }

  /**
   * The Pay Period End Date (YYYY-MM-DD)
   * @return payPeriodEndDate
   */
  @javax.annotation.Nullable
  public String getPayPeriodEndDate() {
    return payPeriodEndDate;
  }

  public void setPayPeriodEndDate(String payPeriodEndDate) {
    this.payPeriodEndDate = payPeriodEndDate;
  }


  public LeavePeriod payPeriodStartDate(String payPeriodStartDate) {
    this.payPeriodStartDate = payPeriodStartDate;
    return this;
  }

  /**
   * The Pay Period Start Date (YYYY-MM-DD)
   * @return payPeriodStartDate
   */
  @javax.annotation.Nullable
  public String getPayPeriodStartDate() {
    return payPeriodStartDate;
  }

  public void setPayPeriodStartDate(String payPeriodStartDate) {
    this.payPeriodStartDate = payPeriodStartDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeavePeriod leavePeriod = (LeavePeriod) o;
    return Objects.equals(this.leavePeriodStatus, leavePeriod.leavePeriodStatus) &&
        Objects.equals(this.numberOfUnits, leavePeriod.numberOfUnits) &&
        Objects.equals(this.payPeriodEndDate, leavePeriod.payPeriodEndDate) &&
        Objects.equals(this.payPeriodStartDate, leavePeriod.payPeriodStartDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(leavePeriodStatus, numberOfUnits, payPeriodEndDate, payPeriodStartDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeavePeriod {\n");
    sb.append("    leavePeriodStatus: ").append(toIndentedString(leavePeriodStatus)).append("\n");
    sb.append("    numberOfUnits: ").append(toIndentedString(numberOfUnits)).append("\n");
    sb.append("    payPeriodEndDate: ").append(toIndentedString(payPeriodEndDate)).append("\n");
    sb.append("    payPeriodStartDate: ").append(toIndentedString(payPeriodStartDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LeavePeriodStatus");
    openapiFields.add("NumberOfUnits");
    openapiFields.add("PayPeriodEndDate");
    openapiFields.add("PayPeriodStartDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LeavePeriod
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LeavePeriod.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeavePeriod is not found in the empty JSON string", LeavePeriod.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LeavePeriod.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LeavePeriod` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LeavePeriodStatus`
      if (jsonObj.get("LeavePeriodStatus") != null && !jsonObj.get("LeavePeriodStatus").isJsonNull()) {
        LeavePeriodStatus.validateJsonElement(jsonObj.get("LeavePeriodStatus"));
      }
      if ((jsonObj.get("PayPeriodEndDate") != null && !jsonObj.get("PayPeriodEndDate").isJsonNull()) && !jsonObj.get("PayPeriodEndDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayPeriodEndDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayPeriodEndDate").toString()));
      }
      if ((jsonObj.get("PayPeriodStartDate") != null && !jsonObj.get("PayPeriodStartDate").isJsonNull()) && !jsonObj.get("PayPeriodStartDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayPeriodStartDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayPeriodStartDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeavePeriod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeavePeriod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeavePeriod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeavePeriod.class));

       return (TypeAdapter<T>) new TypeAdapter<LeavePeriod>() {
           @Override
           public void write(JsonWriter out, LeavePeriod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LeavePeriod read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LeavePeriod given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LeavePeriod
   * @throws IOException if the JSON string is invalid with respect to LeavePeriod
   */
  public static LeavePeriod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeavePeriod.class);
  }

  /**
   * Convert an instance of LeavePeriod to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

