/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.PayRunStatus;
import org.openapitools.client.model.PayslipSummary;
import org.openapitools.client.model.ValidationError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PayRun
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:28.765088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PayRun {
  public static final String SERIALIZED_NAME_DEDUCTIONS = "Deductions";
  @SerializedName(SERIALIZED_NAME_DEDUCTIONS)
  private Double deductions;

  public static final String SERIALIZED_NAME_NET_PAY = "NetPay";
  @SerializedName(SERIALIZED_NAME_NET_PAY)
  private Double netPay;

  public static final String SERIALIZED_NAME_PAY_RUN_I_D = "PayRunID";
  @SerializedName(SERIALIZED_NAME_PAY_RUN_I_D)
  private UUID payRunID;

  public static final String SERIALIZED_NAME_PAY_RUN_PERIOD_END_DATE = "PayRunPeriodEndDate";
  @SerializedName(SERIALIZED_NAME_PAY_RUN_PERIOD_END_DATE)
  private String payRunPeriodEndDate;

  public static final String SERIALIZED_NAME_PAY_RUN_PERIOD_START_DATE = "PayRunPeriodStartDate";
  @SerializedName(SERIALIZED_NAME_PAY_RUN_PERIOD_START_DATE)
  private String payRunPeriodStartDate;

  public static final String SERIALIZED_NAME_PAY_RUN_STATUS = "PayRunStatus";
  @SerializedName(SERIALIZED_NAME_PAY_RUN_STATUS)
  private PayRunStatus payRunStatus;

  public static final String SERIALIZED_NAME_PAYMENT_DATE = "PaymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private String paymentDate;

  public static final String SERIALIZED_NAME_PAYROLL_CALENDAR_I_D = "PayrollCalendarID";
  @SerializedName(SERIALIZED_NAME_PAYROLL_CALENDAR_I_D)
  private UUID payrollCalendarID;

  public static final String SERIALIZED_NAME_PAYSLIP_MESSAGE = "PayslipMessage";
  @SerializedName(SERIALIZED_NAME_PAYSLIP_MESSAGE)
  private String payslipMessage;

  public static final String SERIALIZED_NAME_PAYSLIPS = "Payslips";
  @SerializedName(SERIALIZED_NAME_PAYSLIPS)
  private List<PayslipSummary> payslips = new ArrayList<>();

  public static final String SERIALIZED_NAME_REIMBURSEMENT = "Reimbursement";
  @SerializedName(SERIALIZED_NAME_REIMBURSEMENT)
  private Double reimbursement;

  public static final String SERIALIZED_NAME_SUPER = "Super";
  @SerializedName(SERIALIZED_NAME_SUPER)
  private Double _super;

  public static final String SERIALIZED_NAME_TAX = "Tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Double tax;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "ValidationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<ValidationError> validationErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_WAGES = "Wages";
  @SerializedName(SERIALIZED_NAME_WAGES)
  private Double wages;

  public PayRun() {
  }

  public PayRun(
     String updatedDateUTC
  ) {
    this();
    this.updatedDateUTC = updatedDateUTC;
  }

  public PayRun deductions(Double deductions) {
    this.deductions = deductions;
    return this;
  }

  /**
   * The total Deductions for the Payrun
   * @return deductions
   */
  @javax.annotation.Nullable
  public Double getDeductions() {
    return deductions;
  }

  public void setDeductions(Double deductions) {
    this.deductions = deductions;
  }


  public PayRun netPay(Double netPay) {
    this.netPay = netPay;
    return this;
  }

  /**
   * The total NetPay for the Payrun
   * @return netPay
   */
  @javax.annotation.Nullable
  public Double getNetPay() {
    return netPay;
  }

  public void setNetPay(Double netPay) {
    this.netPay = netPay;
  }


  public PayRun payRunID(UUID payRunID) {
    this.payRunID = payRunID;
    return this;
  }

  /**
   * Xero identifier for pay run
   * @return payRunID
   */
  @javax.annotation.Nullable
  public UUID getPayRunID() {
    return payRunID;
  }

  public void setPayRunID(UUID payRunID) {
    this.payRunID = payRunID;
  }


  public PayRun payRunPeriodEndDate(String payRunPeriodEndDate) {
    this.payRunPeriodEndDate = payRunPeriodEndDate;
    return this;
  }

  /**
   * Period End Date for the PayRun (YYYY-MM-DD)
   * @return payRunPeriodEndDate
   */
  @javax.annotation.Nullable
  public String getPayRunPeriodEndDate() {
    return payRunPeriodEndDate;
  }

  public void setPayRunPeriodEndDate(String payRunPeriodEndDate) {
    this.payRunPeriodEndDate = payRunPeriodEndDate;
  }


  public PayRun payRunPeriodStartDate(String payRunPeriodStartDate) {
    this.payRunPeriodStartDate = payRunPeriodStartDate;
    return this;
  }

  /**
   * Period Start Date for the PayRun (YYYY-MM-DD)
   * @return payRunPeriodStartDate
   */
  @javax.annotation.Nullable
  public String getPayRunPeriodStartDate() {
    return payRunPeriodStartDate;
  }

  public void setPayRunPeriodStartDate(String payRunPeriodStartDate) {
    this.payRunPeriodStartDate = payRunPeriodStartDate;
  }


  public PayRun payRunStatus(PayRunStatus payRunStatus) {
    this.payRunStatus = payRunStatus;
    return this;
  }

  /**
   * Get payRunStatus
   * @return payRunStatus
   */
  @javax.annotation.Nullable
  public PayRunStatus getPayRunStatus() {
    return payRunStatus;
  }

  public void setPayRunStatus(PayRunStatus payRunStatus) {
    this.payRunStatus = payRunStatus;
  }


  public PayRun paymentDate(String paymentDate) {
    this.paymentDate = paymentDate;
    return this;
  }

  /**
   * Payment Date for the PayRun (YYYY-MM-DD)
   * @return paymentDate
   */
  @javax.annotation.Nullable
  public String getPaymentDate() {
    return paymentDate;
  }

  public void setPaymentDate(String paymentDate) {
    this.paymentDate = paymentDate;
  }


  public PayRun payrollCalendarID(UUID payrollCalendarID) {
    this.payrollCalendarID = payrollCalendarID;
    return this;
  }

  /**
   * Xero identifier for pay run
   * @return payrollCalendarID
   */
  @javax.annotation.Nonnull
  public UUID getPayrollCalendarID() {
    return payrollCalendarID;
  }

  public void setPayrollCalendarID(UUID payrollCalendarID) {
    this.payrollCalendarID = payrollCalendarID;
  }


  public PayRun payslipMessage(String payslipMessage) {
    this.payslipMessage = payslipMessage;
    return this;
  }

  /**
   * Payslip message for the PayRun
   * @return payslipMessage
   */
  @javax.annotation.Nullable
  public String getPayslipMessage() {
    return payslipMessage;
  }

  public void setPayslipMessage(String payslipMessage) {
    this.payslipMessage = payslipMessage;
  }


  public PayRun payslips(List<PayslipSummary> payslips) {
    this.payslips = payslips;
    return this;
  }

  public PayRun addPayslipsItem(PayslipSummary payslipsItem) {
    if (this.payslips == null) {
      this.payslips = new ArrayList<>();
    }
    this.payslips.add(payslipsItem);
    return this;
  }

  /**
   * The payslips in the payrun
   * @return payslips
   */
  @javax.annotation.Nullable
  public List<PayslipSummary> getPayslips() {
    return payslips;
  }

  public void setPayslips(List<PayslipSummary> payslips) {
    this.payslips = payslips;
  }


  public PayRun reimbursement(Double reimbursement) {
    this.reimbursement = reimbursement;
    return this;
  }

  /**
   * The total Reimbursements for the Payrun
   * @return reimbursement
   */
  @javax.annotation.Nullable
  public Double getReimbursement() {
    return reimbursement;
  }

  public void setReimbursement(Double reimbursement) {
    this.reimbursement = reimbursement;
  }


  public PayRun _super(Double _super) {
    this._super = _super;
    return this;
  }

  /**
   * The total Super for the Payrun
   * @return _super
   */
  @javax.annotation.Nullable
  public Double getSuper() {
    return _super;
  }

  public void setSuper(Double _super) {
    this._super = _super;
  }


  public PayRun tax(Double tax) {
    this.tax = tax;
    return this;
  }

  /**
   * The total Tax for the Payrun
   * @return tax
   */
  @javax.annotation.Nullable
  public Double getTax() {
    return tax;
  }

  public void setTax(Double tax) {
    this.tax = tax;
  }


  /**
   * Last modified timestamp
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }



  public PayRun validationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public PayRun addValidationErrorsItem(ValidationError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Displays array of validation error messages from the API
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<ValidationError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }


  public PayRun wages(Double wages) {
    this.wages = wages;
    return this;
  }

  /**
   * The total Wages for the Payrun
   * @return wages
   */
  @javax.annotation.Nullable
  public Double getWages() {
    return wages;
  }

  public void setWages(Double wages) {
    this.wages = wages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayRun payRun = (PayRun) o;
    return Objects.equals(this.deductions, payRun.deductions) &&
        Objects.equals(this.netPay, payRun.netPay) &&
        Objects.equals(this.payRunID, payRun.payRunID) &&
        Objects.equals(this.payRunPeriodEndDate, payRun.payRunPeriodEndDate) &&
        Objects.equals(this.payRunPeriodStartDate, payRun.payRunPeriodStartDate) &&
        Objects.equals(this.payRunStatus, payRun.payRunStatus) &&
        Objects.equals(this.paymentDate, payRun.paymentDate) &&
        Objects.equals(this.payrollCalendarID, payRun.payrollCalendarID) &&
        Objects.equals(this.payslipMessage, payRun.payslipMessage) &&
        Objects.equals(this.payslips, payRun.payslips) &&
        Objects.equals(this.reimbursement, payRun.reimbursement) &&
        Objects.equals(this._super, payRun._super) &&
        Objects.equals(this.tax, payRun.tax) &&
        Objects.equals(this.updatedDateUTC, payRun.updatedDateUTC) &&
        Objects.equals(this.validationErrors, payRun.validationErrors) &&
        Objects.equals(this.wages, payRun.wages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deductions, netPay, payRunID, payRunPeriodEndDate, payRunPeriodStartDate, payRunStatus, paymentDate, payrollCalendarID, payslipMessage, payslips, reimbursement, _super, tax, updatedDateUTC, validationErrors, wages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayRun {\n");
    sb.append("    deductions: ").append(toIndentedString(deductions)).append("\n");
    sb.append("    netPay: ").append(toIndentedString(netPay)).append("\n");
    sb.append("    payRunID: ").append(toIndentedString(payRunID)).append("\n");
    sb.append("    payRunPeriodEndDate: ").append(toIndentedString(payRunPeriodEndDate)).append("\n");
    sb.append("    payRunPeriodStartDate: ").append(toIndentedString(payRunPeriodStartDate)).append("\n");
    sb.append("    payRunStatus: ").append(toIndentedString(payRunStatus)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    payrollCalendarID: ").append(toIndentedString(payrollCalendarID)).append("\n");
    sb.append("    payslipMessage: ").append(toIndentedString(payslipMessage)).append("\n");
    sb.append("    payslips: ").append(toIndentedString(payslips)).append("\n");
    sb.append("    reimbursement: ").append(toIndentedString(reimbursement)).append("\n");
    sb.append("    _super: ").append(toIndentedString(_super)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("    wages: ").append(toIndentedString(wages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Deductions");
    openapiFields.add("NetPay");
    openapiFields.add("PayRunID");
    openapiFields.add("PayRunPeriodEndDate");
    openapiFields.add("PayRunPeriodStartDate");
    openapiFields.add("PayRunStatus");
    openapiFields.add("PaymentDate");
    openapiFields.add("PayrollCalendarID");
    openapiFields.add("PayslipMessage");
    openapiFields.add("Payslips");
    openapiFields.add("Reimbursement");
    openapiFields.add("Super");
    openapiFields.add("Tax");
    openapiFields.add("UpdatedDateUTC");
    openapiFields.add("ValidationErrors");
    openapiFields.add("Wages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("PayrollCalendarID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PayRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PayRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayRun is not found in the empty JSON string", PayRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PayRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PayRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PayRun.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("PayRunID") != null && !jsonObj.get("PayRunID").isJsonNull()) && !jsonObj.get("PayRunID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayRunID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayRunID").toString()));
      }
      if ((jsonObj.get("PayRunPeriodEndDate") != null && !jsonObj.get("PayRunPeriodEndDate").isJsonNull()) && !jsonObj.get("PayRunPeriodEndDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayRunPeriodEndDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayRunPeriodEndDate").toString()));
      }
      if ((jsonObj.get("PayRunPeriodStartDate") != null && !jsonObj.get("PayRunPeriodStartDate").isJsonNull()) && !jsonObj.get("PayRunPeriodStartDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayRunPeriodStartDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayRunPeriodStartDate").toString()));
      }
      // validate the optional field `PayRunStatus`
      if (jsonObj.get("PayRunStatus") != null && !jsonObj.get("PayRunStatus").isJsonNull()) {
        PayRunStatus.validateJsonElement(jsonObj.get("PayRunStatus"));
      }
      if ((jsonObj.get("PaymentDate") != null && !jsonObj.get("PaymentDate").isJsonNull()) && !jsonObj.get("PaymentDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentDate").toString()));
      }
      if (!jsonObj.get("PayrollCalendarID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayrollCalendarID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayrollCalendarID").toString()));
      }
      if ((jsonObj.get("PayslipMessage") != null && !jsonObj.get("PayslipMessage").isJsonNull()) && !jsonObj.get("PayslipMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayslipMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayslipMessage").toString()));
      }
      if (jsonObj.get("Payslips") != null && !jsonObj.get("Payslips").isJsonNull()) {
        JsonArray jsonArraypayslips = jsonObj.getAsJsonArray("Payslips");
        if (jsonArraypayslips != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Payslips").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Payslips` to be an array in the JSON string but got `%s`", jsonObj.get("Payslips").toString()));
          }

          // validate the optional field `Payslips` (array)
          for (int i = 0; i < jsonArraypayslips.size(); i++) {
            PayslipSummary.validateJsonElement(jsonArraypayslips.get(i));
          };
        }
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
      if (jsonObj.get("ValidationErrors") != null && !jsonObj.get("ValidationErrors").isJsonNull()) {
        JsonArray jsonArrayvalidationErrors = jsonObj.getAsJsonArray("ValidationErrors");
        if (jsonArrayvalidationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ValidationErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ValidationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("ValidationErrors").toString()));
          }

          // validate the optional field `ValidationErrors` (array)
          for (int i = 0; i < jsonArrayvalidationErrors.size(); i++) {
            ValidationError.validateJsonElement(jsonArrayvalidationErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayRun.class));

       return (TypeAdapter<T>) new TypeAdapter<PayRun>() {
           @Override
           public void write(JsonWriter out, PayRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PayRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PayRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PayRun
   * @throws IOException if the JSON string is invalid with respect to PayRun
   */
  public static PayRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayRun.class);
  }

  /**
   * Convert an instance of PayRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

