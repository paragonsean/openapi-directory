/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeductionLine;
import org.openapitools.client.model.EarningsLine;
import org.openapitools.client.model.LeaveLine;
import org.openapitools.client.model.ReimbursementLine;
import org.openapitools.client.model.SuperLine;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OpeningBalances
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:28.765088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OpeningBalances {
  public static final String SERIALIZED_NAME_DEDUCTION_LINES = "DeductionLines";
  @SerializedName(SERIALIZED_NAME_DEDUCTION_LINES)
  private List<DeductionLine> deductionLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_EARNINGS_LINES = "EarningsLines";
  @SerializedName(SERIALIZED_NAME_EARNINGS_LINES)
  private List<EarningsLine> earningsLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEAVE_LINES = "LeaveLines";
  @SerializedName(SERIALIZED_NAME_LEAVE_LINES)
  private List<LeaveLine> leaveLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPENING_BALANCE_DATE = "OpeningBalanceDate";
  @SerializedName(SERIALIZED_NAME_OPENING_BALANCE_DATE)
  private String openingBalanceDate;

  public static final String SERIALIZED_NAME_REIMBURSEMENT_LINES = "ReimbursementLines";
  @SerializedName(SERIALIZED_NAME_REIMBURSEMENT_LINES)
  private List<ReimbursementLine> reimbursementLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPER_LINES = "SuperLines";
  @SerializedName(SERIALIZED_NAME_SUPER_LINES)
  private List<SuperLine> superLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAX = "Tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private String tax;

  public OpeningBalances() {
  }

  public OpeningBalances deductionLines(List<DeductionLine> deductionLines) {
    this.deductionLines = deductionLines;
    return this;
  }

  public OpeningBalances addDeductionLinesItem(DeductionLine deductionLinesItem) {
    if (this.deductionLines == null) {
      this.deductionLines = new ArrayList<>();
    }
    this.deductionLines.add(deductionLinesItem);
    return this;
  }

  /**
   * Get deductionLines
   * @return deductionLines
   */
  @javax.annotation.Nullable
  public List<DeductionLine> getDeductionLines() {
    return deductionLines;
  }

  public void setDeductionLines(List<DeductionLine> deductionLines) {
    this.deductionLines = deductionLines;
  }


  public OpeningBalances earningsLines(List<EarningsLine> earningsLines) {
    this.earningsLines = earningsLines;
    return this;
  }

  public OpeningBalances addEarningsLinesItem(EarningsLine earningsLinesItem) {
    if (this.earningsLines == null) {
      this.earningsLines = new ArrayList<>();
    }
    this.earningsLines.add(earningsLinesItem);
    return this;
  }

  /**
   * Get earningsLines
   * @return earningsLines
   */
  @javax.annotation.Nullable
  public List<EarningsLine> getEarningsLines() {
    return earningsLines;
  }

  public void setEarningsLines(List<EarningsLine> earningsLines) {
    this.earningsLines = earningsLines;
  }


  public OpeningBalances leaveLines(List<LeaveLine> leaveLines) {
    this.leaveLines = leaveLines;
    return this;
  }

  public OpeningBalances addLeaveLinesItem(LeaveLine leaveLinesItem) {
    if (this.leaveLines == null) {
      this.leaveLines = new ArrayList<>();
    }
    this.leaveLines.add(leaveLinesItem);
    return this;
  }

  /**
   * Get leaveLines
   * @return leaveLines
   */
  @javax.annotation.Nullable
  public List<LeaveLine> getLeaveLines() {
    return leaveLines;
  }

  public void setLeaveLines(List<LeaveLine> leaveLines) {
    this.leaveLines = leaveLines;
  }


  public OpeningBalances openingBalanceDate(String openingBalanceDate) {
    this.openingBalanceDate = openingBalanceDate;
    return this;
  }

  /**
   * Opening Balance Date. (YYYY-MM-DD)
   * @return openingBalanceDate
   */
  @javax.annotation.Nullable
  public String getOpeningBalanceDate() {
    return openingBalanceDate;
  }

  public void setOpeningBalanceDate(String openingBalanceDate) {
    this.openingBalanceDate = openingBalanceDate;
  }


  public OpeningBalances reimbursementLines(List<ReimbursementLine> reimbursementLines) {
    this.reimbursementLines = reimbursementLines;
    return this;
  }

  public OpeningBalances addReimbursementLinesItem(ReimbursementLine reimbursementLinesItem) {
    if (this.reimbursementLines == null) {
      this.reimbursementLines = new ArrayList<>();
    }
    this.reimbursementLines.add(reimbursementLinesItem);
    return this;
  }

  /**
   * Get reimbursementLines
   * @return reimbursementLines
   */
  @javax.annotation.Nullable
  public List<ReimbursementLine> getReimbursementLines() {
    return reimbursementLines;
  }

  public void setReimbursementLines(List<ReimbursementLine> reimbursementLines) {
    this.reimbursementLines = reimbursementLines;
  }


  public OpeningBalances superLines(List<SuperLine> superLines) {
    this.superLines = superLines;
    return this;
  }

  public OpeningBalances addSuperLinesItem(SuperLine superLinesItem) {
    if (this.superLines == null) {
      this.superLines = new ArrayList<>();
    }
    this.superLines.add(superLinesItem);
    return this;
  }

  /**
   * Get superLines
   * @return superLines
   */
  @javax.annotation.Nullable
  public List<SuperLine> getSuperLines() {
    return superLines;
  }

  public void setSuperLines(List<SuperLine> superLines) {
    this.superLines = superLines;
  }


  public OpeningBalances tax(String tax) {
    this.tax = tax;
    return this;
  }

  /**
   * Opening Balance tax
   * @return tax
   */
  @javax.annotation.Nullable
  public String getTax() {
    return tax;
  }

  public void setTax(String tax) {
    this.tax = tax;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpeningBalances openingBalances = (OpeningBalances) o;
    return Objects.equals(this.deductionLines, openingBalances.deductionLines) &&
        Objects.equals(this.earningsLines, openingBalances.earningsLines) &&
        Objects.equals(this.leaveLines, openingBalances.leaveLines) &&
        Objects.equals(this.openingBalanceDate, openingBalances.openingBalanceDate) &&
        Objects.equals(this.reimbursementLines, openingBalances.reimbursementLines) &&
        Objects.equals(this.superLines, openingBalances.superLines) &&
        Objects.equals(this.tax, openingBalances.tax);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deductionLines, earningsLines, leaveLines, openingBalanceDate, reimbursementLines, superLines, tax);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpeningBalances {\n");
    sb.append("    deductionLines: ").append(toIndentedString(deductionLines)).append("\n");
    sb.append("    earningsLines: ").append(toIndentedString(earningsLines)).append("\n");
    sb.append("    leaveLines: ").append(toIndentedString(leaveLines)).append("\n");
    sb.append("    openingBalanceDate: ").append(toIndentedString(openingBalanceDate)).append("\n");
    sb.append("    reimbursementLines: ").append(toIndentedString(reimbursementLines)).append("\n");
    sb.append("    superLines: ").append(toIndentedString(superLines)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeductionLines");
    openapiFields.add("EarningsLines");
    openapiFields.add("LeaveLines");
    openapiFields.add("OpeningBalanceDate");
    openapiFields.add("ReimbursementLines");
    openapiFields.add("SuperLines");
    openapiFields.add("Tax");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OpeningBalances
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OpeningBalances.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OpeningBalances is not found in the empty JSON string", OpeningBalances.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OpeningBalances.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OpeningBalances` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("DeductionLines") != null && !jsonObj.get("DeductionLines").isJsonNull()) {
        JsonArray jsonArraydeductionLines = jsonObj.getAsJsonArray("DeductionLines");
        if (jsonArraydeductionLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DeductionLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DeductionLines` to be an array in the JSON string but got `%s`", jsonObj.get("DeductionLines").toString()));
          }

          // validate the optional field `DeductionLines` (array)
          for (int i = 0; i < jsonArraydeductionLines.size(); i++) {
            DeductionLine.validateJsonElement(jsonArraydeductionLines.get(i));
          };
        }
      }
      if (jsonObj.get("EarningsLines") != null && !jsonObj.get("EarningsLines").isJsonNull()) {
        JsonArray jsonArrayearningsLines = jsonObj.getAsJsonArray("EarningsLines");
        if (jsonArrayearningsLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("EarningsLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `EarningsLines` to be an array in the JSON string but got `%s`", jsonObj.get("EarningsLines").toString()));
          }

          // validate the optional field `EarningsLines` (array)
          for (int i = 0; i < jsonArrayearningsLines.size(); i++) {
            EarningsLine.validateJsonElement(jsonArrayearningsLines.get(i));
          };
        }
      }
      if (jsonObj.get("LeaveLines") != null && !jsonObj.get("LeaveLines").isJsonNull()) {
        JsonArray jsonArrayleaveLines = jsonObj.getAsJsonArray("LeaveLines");
        if (jsonArrayleaveLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LeaveLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LeaveLines` to be an array in the JSON string but got `%s`", jsonObj.get("LeaveLines").toString()));
          }

          // validate the optional field `LeaveLines` (array)
          for (int i = 0; i < jsonArrayleaveLines.size(); i++) {
            LeaveLine.validateJsonElement(jsonArrayleaveLines.get(i));
          };
        }
      }
      if ((jsonObj.get("OpeningBalanceDate") != null && !jsonObj.get("OpeningBalanceDate").isJsonNull()) && !jsonObj.get("OpeningBalanceDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OpeningBalanceDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OpeningBalanceDate").toString()));
      }
      if (jsonObj.get("ReimbursementLines") != null && !jsonObj.get("ReimbursementLines").isJsonNull()) {
        JsonArray jsonArrayreimbursementLines = jsonObj.getAsJsonArray("ReimbursementLines");
        if (jsonArrayreimbursementLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ReimbursementLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ReimbursementLines` to be an array in the JSON string but got `%s`", jsonObj.get("ReimbursementLines").toString()));
          }

          // validate the optional field `ReimbursementLines` (array)
          for (int i = 0; i < jsonArrayreimbursementLines.size(); i++) {
            ReimbursementLine.validateJsonElement(jsonArrayreimbursementLines.get(i));
          };
        }
      }
      if (jsonObj.get("SuperLines") != null && !jsonObj.get("SuperLines").isJsonNull()) {
        JsonArray jsonArraysuperLines = jsonObj.getAsJsonArray("SuperLines");
        if (jsonArraysuperLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SuperLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SuperLines` to be an array in the JSON string but got `%s`", jsonObj.get("SuperLines").toString()));
          }

          // validate the optional field `SuperLines` (array)
          for (int i = 0; i < jsonArraysuperLines.size(); i++) {
            SuperLine.validateJsonElement(jsonArraysuperLines.get(i));
          };
        }
      }
      if ((jsonObj.get("Tax") != null && !jsonObj.get("Tax").isJsonNull()) && !jsonObj.get("Tax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Tax").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OpeningBalances.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OpeningBalances' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OpeningBalances> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OpeningBalances.class));

       return (TypeAdapter<T>) new TypeAdapter<OpeningBalances>() {
           @Override
           public void write(JsonWriter out, OpeningBalances value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OpeningBalances read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OpeningBalances given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OpeningBalances
   * @throws IOException if the JSON string is invalid with respect to OpeningBalances
   */
  public static OpeningBalances fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OpeningBalances.class);
  }

  /**
   * Convert an instance of OpeningBalances to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

