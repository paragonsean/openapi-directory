/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.EmploymentBasis;
import org.openapitools.client.model.ResidencyStatus;
import org.openapitools.client.model.TFNExemptionType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaxDeclaration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:28.765088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaxDeclaration {
  public static final String SERIALIZED_NAME_APPROVED_WITHHOLDING_VARIATION_PERCENTAGE = "ApprovedWithholdingVariationPercentage";
  @SerializedName(SERIALIZED_NAME_APPROVED_WITHHOLDING_VARIATION_PERCENTAGE)
  private BigDecimal approvedWithholdingVariationPercentage;

  public static final String SERIALIZED_NAME_AUSTRALIAN_RESIDENT_FOR_TAX_PURPOSES = "AustralianResidentForTaxPurposes";
  @SerializedName(SERIALIZED_NAME_AUSTRALIAN_RESIDENT_FOR_TAX_PURPOSES)
  private Boolean australianResidentForTaxPurposes;

  public static final String SERIALIZED_NAME_ELIGIBLE_TO_RECEIVE_LEAVE_LOADING = "EligibleToReceiveLeaveLoading";
  @SerializedName(SERIALIZED_NAME_ELIGIBLE_TO_RECEIVE_LEAVE_LOADING)
  private Boolean eligibleToReceiveLeaveLoading;

  public static final String SERIALIZED_NAME_EMPLOYEE_I_D = "EmployeeID";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_I_D)
  private UUID employeeID;

  public static final String SERIALIZED_NAME_EMPLOYMENT_BASIS = "EmploymentBasis";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_BASIS)
  private EmploymentBasis employmentBasis;

  public static final String SERIALIZED_NAME_HAS_H_E_L_P_DEBT = "HasHELPDebt";
  @SerializedName(SERIALIZED_NAME_HAS_H_E_L_P_DEBT)
  private Boolean hasHELPDebt;

  public static final String SERIALIZED_NAME_HAS_S_F_S_S_DEBT = "HasSFSSDebt";
  @SerializedName(SERIALIZED_NAME_HAS_S_F_S_S_DEBT)
  private Boolean hasSFSSDebt;

  public static final String SERIALIZED_NAME_HAS_STUDENT_STARTUP_LOAN = "HasStudentStartupLoan";
  @SerializedName(SERIALIZED_NAME_HAS_STUDENT_STARTUP_LOAN)
  private Boolean hasStudentStartupLoan;

  public static final String SERIALIZED_NAME_HAS_TRADE_SUPPORT_LOAN_DEBT = "HasTradeSupportLoanDebt";
  @SerializedName(SERIALIZED_NAME_HAS_TRADE_SUPPORT_LOAN_DEBT)
  private Boolean hasTradeSupportLoanDebt;

  public static final String SERIALIZED_NAME_RESIDENCY_STATUS = "ResidencyStatus";
  @SerializedName(SERIALIZED_NAME_RESIDENCY_STATUS)
  private ResidencyStatus residencyStatus;

  public static final String SERIALIZED_NAME_TF_N_EXEMPTION_TYPE = "TFNExemptionType";
  @SerializedName(SERIALIZED_NAME_TF_N_EXEMPTION_TYPE)
  private TFNExemptionType tfNExemptionType;

  public static final String SERIALIZED_NAME_TAX_FILE_NUMBER = "TaxFileNumber";
  @SerializedName(SERIALIZED_NAME_TAX_FILE_NUMBER)
  private String taxFileNumber;

  public static final String SERIALIZED_NAME_TAX_FREE_THRESHOLD_CLAIMED = "TaxFreeThresholdClaimed";
  @SerializedName(SERIALIZED_NAME_TAX_FREE_THRESHOLD_CLAIMED)
  private Boolean taxFreeThresholdClaimed;

  public static final String SERIALIZED_NAME_TAX_OFFSET_ESTIMATED_AMOUNT = "TaxOffsetEstimatedAmount";
  @SerializedName(SERIALIZED_NAME_TAX_OFFSET_ESTIMATED_AMOUNT)
  private BigDecimal taxOffsetEstimatedAmount;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public static final String SERIALIZED_NAME_UPWARD_VARIATION_TAX_WITHHOLDING_AMOUNT = "UpwardVariationTaxWithholdingAmount";
  @SerializedName(SERIALIZED_NAME_UPWARD_VARIATION_TAX_WITHHOLDING_AMOUNT)
  private BigDecimal upwardVariationTaxWithholdingAmount;

  public TaxDeclaration() {
  }

  public TaxDeclaration(
     String updatedDateUTC
  ) {
    this();
    this.updatedDateUTC = updatedDateUTC;
  }

  public TaxDeclaration approvedWithholdingVariationPercentage(BigDecimal approvedWithholdingVariationPercentage) {
    this.approvedWithholdingVariationPercentage = approvedWithholdingVariationPercentage;
    return this;
  }

  /**
   * If the employee has approved withholding variation. e.g (0 - 100)
   * @return approvedWithholdingVariationPercentage
   */
  @javax.annotation.Nullable
  public BigDecimal getApprovedWithholdingVariationPercentage() {
    return approvedWithholdingVariationPercentage;
  }

  public void setApprovedWithholdingVariationPercentage(BigDecimal approvedWithholdingVariationPercentage) {
    this.approvedWithholdingVariationPercentage = approvedWithholdingVariationPercentage;
  }


  public TaxDeclaration australianResidentForTaxPurposes(Boolean australianResidentForTaxPurposes) {
    this.australianResidentForTaxPurposes = australianResidentForTaxPurposes;
    return this;
  }

  /**
   * If the employee is Australian resident for tax purposes. e.g true or false
   * @return australianResidentForTaxPurposes
   */
  @javax.annotation.Nullable
  public Boolean getAustralianResidentForTaxPurposes() {
    return australianResidentForTaxPurposes;
  }

  public void setAustralianResidentForTaxPurposes(Boolean australianResidentForTaxPurposes) {
    this.australianResidentForTaxPurposes = australianResidentForTaxPurposes;
  }


  public TaxDeclaration eligibleToReceiveLeaveLoading(Boolean eligibleToReceiveLeaveLoading) {
    this.eligibleToReceiveLeaveLoading = eligibleToReceiveLeaveLoading;
    return this;
  }

  /**
   * If the employee is eligible to receive an additional percentage on top of ordinary earnings when they take leave (typically 17.5%). e.g true or false
   * @return eligibleToReceiveLeaveLoading
   */
  @javax.annotation.Nullable
  public Boolean getEligibleToReceiveLeaveLoading() {
    return eligibleToReceiveLeaveLoading;
  }

  public void setEligibleToReceiveLeaveLoading(Boolean eligibleToReceiveLeaveLoading) {
    this.eligibleToReceiveLeaveLoading = eligibleToReceiveLeaveLoading;
  }


  public TaxDeclaration employeeID(UUID employeeID) {
    this.employeeID = employeeID;
    return this;
  }

  /**
   * Address line 1 for employee home address
   * @return employeeID
   */
  @javax.annotation.Nullable
  public UUID getEmployeeID() {
    return employeeID;
  }

  public void setEmployeeID(UUID employeeID) {
    this.employeeID = employeeID;
  }


  public TaxDeclaration employmentBasis(EmploymentBasis employmentBasis) {
    this.employmentBasis = employmentBasis;
    return this;
  }

  /**
   * Get employmentBasis
   * @return employmentBasis
   */
  @javax.annotation.Nullable
  public EmploymentBasis getEmploymentBasis() {
    return employmentBasis;
  }

  public void setEmploymentBasis(EmploymentBasis employmentBasis) {
    this.employmentBasis = employmentBasis;
  }


  public TaxDeclaration hasHELPDebt(Boolean hasHELPDebt) {
    this.hasHELPDebt = hasHELPDebt;
    return this;
  }

  /**
   * If employee has HECS or HELP debt. e.g true or false
   * @return hasHELPDebt
   */
  @javax.annotation.Nullable
  public Boolean getHasHELPDebt() {
    return hasHELPDebt;
  }

  public void setHasHELPDebt(Boolean hasHELPDebt) {
    this.hasHELPDebt = hasHELPDebt;
  }


  public TaxDeclaration hasSFSSDebt(Boolean hasSFSSDebt) {
    this.hasSFSSDebt = hasSFSSDebt;
    return this;
  }

  /**
   * If employee has financial supplement debt. e.g true or false
   * @return hasSFSSDebt
   */
  @javax.annotation.Nullable
  public Boolean getHasSFSSDebt() {
    return hasSFSSDebt;
  }

  public void setHasSFSSDebt(Boolean hasSFSSDebt) {
    this.hasSFSSDebt = hasSFSSDebt;
  }


  public TaxDeclaration hasStudentStartupLoan(Boolean hasStudentStartupLoan) {
    this.hasStudentStartupLoan = hasStudentStartupLoan;
    return this;
  }

  /**
   * If the employee is eligible for student startup loan rules
   * @return hasStudentStartupLoan
   */
  @javax.annotation.Nullable
  public Boolean getHasStudentStartupLoan() {
    return hasStudentStartupLoan;
  }

  public void setHasStudentStartupLoan(Boolean hasStudentStartupLoan) {
    this.hasStudentStartupLoan = hasStudentStartupLoan;
  }


  public TaxDeclaration hasTradeSupportLoanDebt(Boolean hasTradeSupportLoanDebt) {
    this.hasTradeSupportLoanDebt = hasTradeSupportLoanDebt;
    return this;
  }

  /**
   * If employee has trade support loan. e.g true or false
   * @return hasTradeSupportLoanDebt
   */
  @javax.annotation.Nullable
  public Boolean getHasTradeSupportLoanDebt() {
    return hasTradeSupportLoanDebt;
  }

  public void setHasTradeSupportLoanDebt(Boolean hasTradeSupportLoanDebt) {
    this.hasTradeSupportLoanDebt = hasTradeSupportLoanDebt;
  }


  public TaxDeclaration residencyStatus(ResidencyStatus residencyStatus) {
    this.residencyStatus = residencyStatus;
    return this;
  }

  /**
   * Get residencyStatus
   * @return residencyStatus
   */
  @javax.annotation.Nullable
  public ResidencyStatus getResidencyStatus() {
    return residencyStatus;
  }

  public void setResidencyStatus(ResidencyStatus residencyStatus) {
    this.residencyStatus = residencyStatus;
  }


  public TaxDeclaration tfNExemptionType(TFNExemptionType tfNExemptionType) {
    this.tfNExemptionType = tfNExemptionType;
    return this;
  }

  /**
   * Get tfNExemptionType
   * @return tfNExemptionType
   */
  @javax.annotation.Nullable
  public TFNExemptionType getTfNExemptionType() {
    return tfNExemptionType;
  }

  public void setTfNExemptionType(TFNExemptionType tfNExemptionType) {
    this.tfNExemptionType = tfNExemptionType;
  }


  public TaxDeclaration taxFileNumber(String taxFileNumber) {
    this.taxFileNumber = taxFileNumber;
    return this;
  }

  /**
   * The tax file number e.g 123123123.
   * @return taxFileNumber
   */
  @javax.annotation.Nullable
  public String getTaxFileNumber() {
    return taxFileNumber;
  }

  public void setTaxFileNumber(String taxFileNumber) {
    this.taxFileNumber = taxFileNumber;
  }


  public TaxDeclaration taxFreeThresholdClaimed(Boolean taxFreeThresholdClaimed) {
    this.taxFreeThresholdClaimed = taxFreeThresholdClaimed;
    return this;
  }

  /**
   * If tax free threshold claimed. e.g true or false
   * @return taxFreeThresholdClaimed
   */
  @javax.annotation.Nullable
  public Boolean getTaxFreeThresholdClaimed() {
    return taxFreeThresholdClaimed;
  }

  public void setTaxFreeThresholdClaimed(Boolean taxFreeThresholdClaimed) {
    this.taxFreeThresholdClaimed = taxFreeThresholdClaimed;
  }


  public TaxDeclaration taxOffsetEstimatedAmount(BigDecimal taxOffsetEstimatedAmount) {
    this.taxOffsetEstimatedAmount = taxOffsetEstimatedAmount;
    return this;
  }

  /**
   * If has tax offset estimated then the tax offset estimated amount. e.g 100
   * @return taxOffsetEstimatedAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getTaxOffsetEstimatedAmount() {
    return taxOffsetEstimatedAmount;
  }

  public void setTaxOffsetEstimatedAmount(BigDecimal taxOffsetEstimatedAmount) {
    this.taxOffsetEstimatedAmount = taxOffsetEstimatedAmount;
  }


  /**
   * Last modified timestamp
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }



  public TaxDeclaration upwardVariationTaxWithholdingAmount(BigDecimal upwardVariationTaxWithholdingAmount) {
    this.upwardVariationTaxWithholdingAmount = upwardVariationTaxWithholdingAmount;
    return this;
  }

  /**
   * If the employee has requested that additional tax be withheld each pay run. e.g 50
   * @return upwardVariationTaxWithholdingAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getUpwardVariationTaxWithholdingAmount() {
    return upwardVariationTaxWithholdingAmount;
  }

  public void setUpwardVariationTaxWithholdingAmount(BigDecimal upwardVariationTaxWithholdingAmount) {
    this.upwardVariationTaxWithholdingAmount = upwardVariationTaxWithholdingAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxDeclaration taxDeclaration = (TaxDeclaration) o;
    return Objects.equals(this.approvedWithholdingVariationPercentage, taxDeclaration.approvedWithholdingVariationPercentage) &&
        Objects.equals(this.australianResidentForTaxPurposes, taxDeclaration.australianResidentForTaxPurposes) &&
        Objects.equals(this.eligibleToReceiveLeaveLoading, taxDeclaration.eligibleToReceiveLeaveLoading) &&
        Objects.equals(this.employeeID, taxDeclaration.employeeID) &&
        Objects.equals(this.employmentBasis, taxDeclaration.employmentBasis) &&
        Objects.equals(this.hasHELPDebt, taxDeclaration.hasHELPDebt) &&
        Objects.equals(this.hasSFSSDebt, taxDeclaration.hasSFSSDebt) &&
        Objects.equals(this.hasStudentStartupLoan, taxDeclaration.hasStudentStartupLoan) &&
        Objects.equals(this.hasTradeSupportLoanDebt, taxDeclaration.hasTradeSupportLoanDebt) &&
        Objects.equals(this.residencyStatus, taxDeclaration.residencyStatus) &&
        Objects.equals(this.tfNExemptionType, taxDeclaration.tfNExemptionType) &&
        Objects.equals(this.taxFileNumber, taxDeclaration.taxFileNumber) &&
        Objects.equals(this.taxFreeThresholdClaimed, taxDeclaration.taxFreeThresholdClaimed) &&
        Objects.equals(this.taxOffsetEstimatedAmount, taxDeclaration.taxOffsetEstimatedAmount) &&
        Objects.equals(this.updatedDateUTC, taxDeclaration.updatedDateUTC) &&
        Objects.equals(this.upwardVariationTaxWithholdingAmount, taxDeclaration.upwardVariationTaxWithholdingAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approvedWithholdingVariationPercentage, australianResidentForTaxPurposes, eligibleToReceiveLeaveLoading, employeeID, employmentBasis, hasHELPDebt, hasSFSSDebt, hasStudentStartupLoan, hasTradeSupportLoanDebt, residencyStatus, tfNExemptionType, taxFileNumber, taxFreeThresholdClaimed, taxOffsetEstimatedAmount, updatedDateUTC, upwardVariationTaxWithholdingAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxDeclaration {\n");
    sb.append("    approvedWithholdingVariationPercentage: ").append(toIndentedString(approvedWithholdingVariationPercentage)).append("\n");
    sb.append("    australianResidentForTaxPurposes: ").append(toIndentedString(australianResidentForTaxPurposes)).append("\n");
    sb.append("    eligibleToReceiveLeaveLoading: ").append(toIndentedString(eligibleToReceiveLeaveLoading)).append("\n");
    sb.append("    employeeID: ").append(toIndentedString(employeeID)).append("\n");
    sb.append("    employmentBasis: ").append(toIndentedString(employmentBasis)).append("\n");
    sb.append("    hasHELPDebt: ").append(toIndentedString(hasHELPDebt)).append("\n");
    sb.append("    hasSFSSDebt: ").append(toIndentedString(hasSFSSDebt)).append("\n");
    sb.append("    hasStudentStartupLoan: ").append(toIndentedString(hasStudentStartupLoan)).append("\n");
    sb.append("    hasTradeSupportLoanDebt: ").append(toIndentedString(hasTradeSupportLoanDebt)).append("\n");
    sb.append("    residencyStatus: ").append(toIndentedString(residencyStatus)).append("\n");
    sb.append("    tfNExemptionType: ").append(toIndentedString(tfNExemptionType)).append("\n");
    sb.append("    taxFileNumber: ").append(toIndentedString(taxFileNumber)).append("\n");
    sb.append("    taxFreeThresholdClaimed: ").append(toIndentedString(taxFreeThresholdClaimed)).append("\n");
    sb.append("    taxOffsetEstimatedAmount: ").append(toIndentedString(taxOffsetEstimatedAmount)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("    upwardVariationTaxWithholdingAmount: ").append(toIndentedString(upwardVariationTaxWithholdingAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApprovedWithholdingVariationPercentage");
    openapiFields.add("AustralianResidentForTaxPurposes");
    openapiFields.add("EligibleToReceiveLeaveLoading");
    openapiFields.add("EmployeeID");
    openapiFields.add("EmploymentBasis");
    openapiFields.add("HasHELPDebt");
    openapiFields.add("HasSFSSDebt");
    openapiFields.add("HasStudentStartupLoan");
    openapiFields.add("HasTradeSupportLoanDebt");
    openapiFields.add("ResidencyStatus");
    openapiFields.add("TFNExemptionType");
    openapiFields.add("TaxFileNumber");
    openapiFields.add("TaxFreeThresholdClaimed");
    openapiFields.add("TaxOffsetEstimatedAmount");
    openapiFields.add("UpdatedDateUTC");
    openapiFields.add("UpwardVariationTaxWithholdingAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaxDeclaration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaxDeclaration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxDeclaration is not found in the empty JSON string", TaxDeclaration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaxDeclaration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxDeclaration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("EmployeeID") != null && !jsonObj.get("EmployeeID").isJsonNull()) && !jsonObj.get("EmployeeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmployeeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmployeeID").toString()));
      }
      // validate the optional field `EmploymentBasis`
      if (jsonObj.get("EmploymentBasis") != null && !jsonObj.get("EmploymentBasis").isJsonNull()) {
        EmploymentBasis.validateJsonElement(jsonObj.get("EmploymentBasis"));
      }
      // validate the optional field `ResidencyStatus`
      if (jsonObj.get("ResidencyStatus") != null && !jsonObj.get("ResidencyStatus").isJsonNull()) {
        ResidencyStatus.validateJsonElement(jsonObj.get("ResidencyStatus"));
      }
      // validate the optional field `TFNExemptionType`
      if (jsonObj.get("TFNExemptionType") != null && !jsonObj.get("TFNExemptionType").isJsonNull()) {
        TFNExemptionType.validateJsonElement(jsonObj.get("TFNExemptionType"));
      }
      if ((jsonObj.get("TaxFileNumber") != null && !jsonObj.get("TaxFileNumber").isJsonNull()) && !jsonObj.get("TaxFileNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxFileNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxFileNumber").toString()));
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxDeclaration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxDeclaration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxDeclaration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxDeclaration.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxDeclaration>() {
           @Override
           public void write(JsonWriter out, TaxDeclaration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxDeclaration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaxDeclaration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaxDeclaration
   * @throws IOException if the JSON string is invalid with respect to TaxDeclaration
   */
  public static TaxDeclaration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxDeclaration.class);
  }

  /**
   * Convert an instance of TaxDeclaration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

