/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.DeductionLine;
import org.openapitools.client.model.EarningsLine;
import org.openapitools.client.model.LeaveAccrualLine;
import org.openapitools.client.model.LeaveEarningsLine;
import org.openapitools.client.model.ReimbursementLine;
import org.openapitools.client.model.SuperannuationLine;
import org.openapitools.client.model.TaxLine;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Payslip
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:28.765088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Payslip {
  public static final String SERIALIZED_NAME_DEDUCTION_LINES = "DeductionLines";
  @SerializedName(SERIALIZED_NAME_DEDUCTION_LINES)
  private List<DeductionLine> deductionLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEDUCTIONS = "Deductions";
  @SerializedName(SERIALIZED_NAME_DEDUCTIONS)
  private Double deductions;

  public static final String SERIALIZED_NAME_EARNINGS_LINES = "EarningsLines";
  @SerializedName(SERIALIZED_NAME_EARNINGS_LINES)
  private List<EarningsLine> earningsLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMPLOYEE_I_D = "EmployeeID";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_I_D)
  private UUID employeeID;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_LEAVE_ACCRUAL_LINES = "LeaveAccrualLines";
  @SerializedName(SERIALIZED_NAME_LEAVE_ACCRUAL_LINES)
  private List<LeaveAccrualLine> leaveAccrualLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEAVE_EARNINGS_LINES = "LeaveEarningsLines";
  @SerializedName(SERIALIZED_NAME_LEAVE_EARNINGS_LINES)
  private List<LeaveEarningsLine> leaveEarningsLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_NET_PAY = "NetPay";
  @SerializedName(SERIALIZED_NAME_NET_PAY)
  private Double netPay;

  public static final String SERIALIZED_NAME_PAYSLIP_I_D = "PayslipID";
  @SerializedName(SERIALIZED_NAME_PAYSLIP_I_D)
  private UUID payslipID;

  public static final String SERIALIZED_NAME_REIMBURSEMENT_LINES = "ReimbursementLines";
  @SerializedName(SERIALIZED_NAME_REIMBURSEMENT_LINES)
  private List<ReimbursementLine> reimbursementLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_REIMBURSEMENTS = "Reimbursements";
  @SerializedName(SERIALIZED_NAME_REIMBURSEMENTS)
  private Double reimbursements;

  public static final String SERIALIZED_NAME_SUPER = "Super";
  @SerializedName(SERIALIZED_NAME_SUPER)
  private Double _super;

  public static final String SERIALIZED_NAME_SUPERANNUATION_LINES = "SuperannuationLines";
  @SerializedName(SERIALIZED_NAME_SUPERANNUATION_LINES)
  private List<SuperannuationLine> superannuationLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAX = "Tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Double tax;

  public static final String SERIALIZED_NAME_TAX_LINES = "TaxLines";
  @SerializedName(SERIALIZED_NAME_TAX_LINES)
  private List<TaxLine> taxLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMESHEET_EARNINGS_LINES = "TimesheetEarningsLines";
  @SerializedName(SERIALIZED_NAME_TIMESHEET_EARNINGS_LINES)
  private List<EarningsLine> timesheetEarningsLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public static final String SERIALIZED_NAME_WAGES = "Wages";
  @SerializedName(SERIALIZED_NAME_WAGES)
  private Double wages;

  public Payslip() {
  }

  public Payslip(
     String updatedDateUTC
  ) {
    this();
    this.updatedDateUTC = updatedDateUTC;
  }

  public Payslip deductionLines(List<DeductionLine> deductionLines) {
    this.deductionLines = deductionLines;
    return this;
  }

  public Payslip addDeductionLinesItem(DeductionLine deductionLinesItem) {
    if (this.deductionLines == null) {
      this.deductionLines = new ArrayList<>();
    }
    this.deductionLines.add(deductionLinesItem);
    return this;
  }

  /**
   * Get deductionLines
   * @return deductionLines
   */
  @javax.annotation.Nullable
  public List<DeductionLine> getDeductionLines() {
    return deductionLines;
  }

  public void setDeductionLines(List<DeductionLine> deductionLines) {
    this.deductionLines = deductionLines;
  }


  public Payslip deductions(Double deductions) {
    this.deductions = deductions;
    return this;
  }

  /**
   * The Deductions for the Payslip
   * @return deductions
   */
  @javax.annotation.Nullable
  public Double getDeductions() {
    return deductions;
  }

  public void setDeductions(Double deductions) {
    this.deductions = deductions;
  }


  public Payslip earningsLines(List<EarningsLine> earningsLines) {
    this.earningsLines = earningsLines;
    return this;
  }

  public Payslip addEarningsLinesItem(EarningsLine earningsLinesItem) {
    if (this.earningsLines == null) {
      this.earningsLines = new ArrayList<>();
    }
    this.earningsLines.add(earningsLinesItem);
    return this;
  }

  /**
   * Get earningsLines
   * @return earningsLines
   */
  @javax.annotation.Nullable
  public List<EarningsLine> getEarningsLines() {
    return earningsLines;
  }

  public void setEarningsLines(List<EarningsLine> earningsLines) {
    this.earningsLines = earningsLines;
  }


  public Payslip employeeID(UUID employeeID) {
    this.employeeID = employeeID;
    return this;
  }

  /**
   * The Xero identifier for an employee
   * @return employeeID
   */
  @javax.annotation.Nullable
  public UUID getEmployeeID() {
    return employeeID;
  }

  public void setEmployeeID(UUID employeeID) {
    this.employeeID = employeeID;
  }


  public Payslip firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name of employee
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Payslip lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name of employee
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Payslip leaveAccrualLines(List<LeaveAccrualLine> leaveAccrualLines) {
    this.leaveAccrualLines = leaveAccrualLines;
    return this;
  }

  public Payslip addLeaveAccrualLinesItem(LeaveAccrualLine leaveAccrualLinesItem) {
    if (this.leaveAccrualLines == null) {
      this.leaveAccrualLines = new ArrayList<>();
    }
    this.leaveAccrualLines.add(leaveAccrualLinesItem);
    return this;
  }

  /**
   * Get leaveAccrualLines
   * @return leaveAccrualLines
   */
  @javax.annotation.Nullable
  public List<LeaveAccrualLine> getLeaveAccrualLines() {
    return leaveAccrualLines;
  }

  public void setLeaveAccrualLines(List<LeaveAccrualLine> leaveAccrualLines) {
    this.leaveAccrualLines = leaveAccrualLines;
  }


  public Payslip leaveEarningsLines(List<LeaveEarningsLine> leaveEarningsLines) {
    this.leaveEarningsLines = leaveEarningsLines;
    return this;
  }

  public Payslip addLeaveEarningsLinesItem(LeaveEarningsLine leaveEarningsLinesItem) {
    if (this.leaveEarningsLines == null) {
      this.leaveEarningsLines = new ArrayList<>();
    }
    this.leaveEarningsLines.add(leaveEarningsLinesItem);
    return this;
  }

  /**
   * Get leaveEarningsLines
   * @return leaveEarningsLines
   */
  @javax.annotation.Nullable
  public List<LeaveEarningsLine> getLeaveEarningsLines() {
    return leaveEarningsLines;
  }

  public void setLeaveEarningsLines(List<LeaveEarningsLine> leaveEarningsLines) {
    this.leaveEarningsLines = leaveEarningsLines;
  }


  public Payslip netPay(Double netPay) {
    this.netPay = netPay;
    return this;
  }

  /**
   * The NetPay for the Payslip
   * @return netPay
   */
  @javax.annotation.Nullable
  public Double getNetPay() {
    return netPay;
  }

  public void setNetPay(Double netPay) {
    this.netPay = netPay;
  }


  public Payslip payslipID(UUID payslipID) {
    this.payslipID = payslipID;
    return this;
  }

  /**
   * Xero identifier for the payslip
   * @return payslipID
   */
  @javax.annotation.Nullable
  public UUID getPayslipID() {
    return payslipID;
  }

  public void setPayslipID(UUID payslipID) {
    this.payslipID = payslipID;
  }


  public Payslip reimbursementLines(List<ReimbursementLine> reimbursementLines) {
    this.reimbursementLines = reimbursementLines;
    return this;
  }

  public Payslip addReimbursementLinesItem(ReimbursementLine reimbursementLinesItem) {
    if (this.reimbursementLines == null) {
      this.reimbursementLines = new ArrayList<>();
    }
    this.reimbursementLines.add(reimbursementLinesItem);
    return this;
  }

  /**
   * Get reimbursementLines
   * @return reimbursementLines
   */
  @javax.annotation.Nullable
  public List<ReimbursementLine> getReimbursementLines() {
    return reimbursementLines;
  }

  public void setReimbursementLines(List<ReimbursementLine> reimbursementLines) {
    this.reimbursementLines = reimbursementLines;
  }


  public Payslip reimbursements(Double reimbursements) {
    this.reimbursements = reimbursements;
    return this;
  }

  /**
   * The Reimbursements for the Payslip
   * @return reimbursements
   */
  @javax.annotation.Nullable
  public Double getReimbursements() {
    return reimbursements;
  }

  public void setReimbursements(Double reimbursements) {
    this.reimbursements = reimbursements;
  }


  public Payslip _super(Double _super) {
    this._super = _super;
    return this;
  }

  /**
   * The Super for the Payslip
   * @return _super
   */
  @javax.annotation.Nullable
  public Double getSuper() {
    return _super;
  }

  public void setSuper(Double _super) {
    this._super = _super;
  }


  public Payslip superannuationLines(List<SuperannuationLine> superannuationLines) {
    this.superannuationLines = superannuationLines;
    return this;
  }

  public Payslip addSuperannuationLinesItem(SuperannuationLine superannuationLinesItem) {
    if (this.superannuationLines == null) {
      this.superannuationLines = new ArrayList<>();
    }
    this.superannuationLines.add(superannuationLinesItem);
    return this;
  }

  /**
   * Get superannuationLines
   * @return superannuationLines
   */
  @javax.annotation.Nullable
  public List<SuperannuationLine> getSuperannuationLines() {
    return superannuationLines;
  }

  public void setSuperannuationLines(List<SuperannuationLine> superannuationLines) {
    this.superannuationLines = superannuationLines;
  }


  public Payslip tax(Double tax) {
    this.tax = tax;
    return this;
  }

  /**
   * The Tax for the Payslip
   * @return tax
   */
  @javax.annotation.Nullable
  public Double getTax() {
    return tax;
  }

  public void setTax(Double tax) {
    this.tax = tax;
  }


  public Payslip taxLines(List<TaxLine> taxLines) {
    this.taxLines = taxLines;
    return this;
  }

  public Payslip addTaxLinesItem(TaxLine taxLinesItem) {
    if (this.taxLines == null) {
      this.taxLines = new ArrayList<>();
    }
    this.taxLines.add(taxLinesItem);
    return this;
  }

  /**
   * Get taxLines
   * @return taxLines
   */
  @javax.annotation.Nullable
  public List<TaxLine> getTaxLines() {
    return taxLines;
  }

  public void setTaxLines(List<TaxLine> taxLines) {
    this.taxLines = taxLines;
  }


  public Payslip timesheetEarningsLines(List<EarningsLine> timesheetEarningsLines) {
    this.timesheetEarningsLines = timesheetEarningsLines;
    return this;
  }

  public Payslip addTimesheetEarningsLinesItem(EarningsLine timesheetEarningsLinesItem) {
    if (this.timesheetEarningsLines == null) {
      this.timesheetEarningsLines = new ArrayList<>();
    }
    this.timesheetEarningsLines.add(timesheetEarningsLinesItem);
    return this;
  }

  /**
   * Get timesheetEarningsLines
   * @return timesheetEarningsLines
   */
  @javax.annotation.Nullable
  public List<EarningsLine> getTimesheetEarningsLines() {
    return timesheetEarningsLines;
  }

  public void setTimesheetEarningsLines(List<EarningsLine> timesheetEarningsLines) {
    this.timesheetEarningsLines = timesheetEarningsLines;
  }


  /**
   * Last modified timestamp
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }



  public Payslip wages(Double wages) {
    this.wages = wages;
    return this;
  }

  /**
   * The Wages for the Payslip
   * @return wages
   */
  @javax.annotation.Nullable
  public Double getWages() {
    return wages;
  }

  public void setWages(Double wages) {
    this.wages = wages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payslip payslip = (Payslip) o;
    return Objects.equals(this.deductionLines, payslip.deductionLines) &&
        Objects.equals(this.deductions, payslip.deductions) &&
        Objects.equals(this.earningsLines, payslip.earningsLines) &&
        Objects.equals(this.employeeID, payslip.employeeID) &&
        Objects.equals(this.firstName, payslip.firstName) &&
        Objects.equals(this.lastName, payslip.lastName) &&
        Objects.equals(this.leaveAccrualLines, payslip.leaveAccrualLines) &&
        Objects.equals(this.leaveEarningsLines, payslip.leaveEarningsLines) &&
        Objects.equals(this.netPay, payslip.netPay) &&
        Objects.equals(this.payslipID, payslip.payslipID) &&
        Objects.equals(this.reimbursementLines, payslip.reimbursementLines) &&
        Objects.equals(this.reimbursements, payslip.reimbursements) &&
        Objects.equals(this._super, payslip._super) &&
        Objects.equals(this.superannuationLines, payslip.superannuationLines) &&
        Objects.equals(this.tax, payslip.tax) &&
        Objects.equals(this.taxLines, payslip.taxLines) &&
        Objects.equals(this.timesheetEarningsLines, payslip.timesheetEarningsLines) &&
        Objects.equals(this.updatedDateUTC, payslip.updatedDateUTC) &&
        Objects.equals(this.wages, payslip.wages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deductionLines, deductions, earningsLines, employeeID, firstName, lastName, leaveAccrualLines, leaveEarningsLines, netPay, payslipID, reimbursementLines, reimbursements, _super, superannuationLines, tax, taxLines, timesheetEarningsLines, updatedDateUTC, wages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payslip {\n");
    sb.append("    deductionLines: ").append(toIndentedString(deductionLines)).append("\n");
    sb.append("    deductions: ").append(toIndentedString(deductions)).append("\n");
    sb.append("    earningsLines: ").append(toIndentedString(earningsLines)).append("\n");
    sb.append("    employeeID: ").append(toIndentedString(employeeID)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    leaveAccrualLines: ").append(toIndentedString(leaveAccrualLines)).append("\n");
    sb.append("    leaveEarningsLines: ").append(toIndentedString(leaveEarningsLines)).append("\n");
    sb.append("    netPay: ").append(toIndentedString(netPay)).append("\n");
    sb.append("    payslipID: ").append(toIndentedString(payslipID)).append("\n");
    sb.append("    reimbursementLines: ").append(toIndentedString(reimbursementLines)).append("\n");
    sb.append("    reimbursements: ").append(toIndentedString(reimbursements)).append("\n");
    sb.append("    _super: ").append(toIndentedString(_super)).append("\n");
    sb.append("    superannuationLines: ").append(toIndentedString(superannuationLines)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    taxLines: ").append(toIndentedString(taxLines)).append("\n");
    sb.append("    timesheetEarningsLines: ").append(toIndentedString(timesheetEarningsLines)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("    wages: ").append(toIndentedString(wages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeductionLines");
    openapiFields.add("Deductions");
    openapiFields.add("EarningsLines");
    openapiFields.add("EmployeeID");
    openapiFields.add("FirstName");
    openapiFields.add("LastName");
    openapiFields.add("LeaveAccrualLines");
    openapiFields.add("LeaveEarningsLines");
    openapiFields.add("NetPay");
    openapiFields.add("PayslipID");
    openapiFields.add("ReimbursementLines");
    openapiFields.add("Reimbursements");
    openapiFields.add("Super");
    openapiFields.add("SuperannuationLines");
    openapiFields.add("Tax");
    openapiFields.add("TaxLines");
    openapiFields.add("TimesheetEarningsLines");
    openapiFields.add("UpdatedDateUTC");
    openapiFields.add("Wages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Payslip
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Payslip.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Payslip is not found in the empty JSON string", Payslip.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Payslip.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Payslip` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("DeductionLines") != null && !jsonObj.get("DeductionLines").isJsonNull()) {
        JsonArray jsonArraydeductionLines = jsonObj.getAsJsonArray("DeductionLines");
        if (jsonArraydeductionLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DeductionLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DeductionLines` to be an array in the JSON string but got `%s`", jsonObj.get("DeductionLines").toString()));
          }

          // validate the optional field `DeductionLines` (array)
          for (int i = 0; i < jsonArraydeductionLines.size(); i++) {
            DeductionLine.validateJsonElement(jsonArraydeductionLines.get(i));
          };
        }
      }
      if (jsonObj.get("EarningsLines") != null && !jsonObj.get("EarningsLines").isJsonNull()) {
        JsonArray jsonArrayearningsLines = jsonObj.getAsJsonArray("EarningsLines");
        if (jsonArrayearningsLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("EarningsLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `EarningsLines` to be an array in the JSON string but got `%s`", jsonObj.get("EarningsLines").toString()));
          }

          // validate the optional field `EarningsLines` (array)
          for (int i = 0; i < jsonArrayearningsLines.size(); i++) {
            EarningsLine.validateJsonElement(jsonArrayearningsLines.get(i));
          };
        }
      }
      if ((jsonObj.get("EmployeeID") != null && !jsonObj.get("EmployeeID").isJsonNull()) && !jsonObj.get("EmployeeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmployeeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmployeeID").toString()));
      }
      if ((jsonObj.get("FirstName") != null && !jsonObj.get("FirstName").isJsonNull()) && !jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if ((jsonObj.get("LastName") != null && !jsonObj.get("LastName").isJsonNull()) && !jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if (jsonObj.get("LeaveAccrualLines") != null && !jsonObj.get("LeaveAccrualLines").isJsonNull()) {
        JsonArray jsonArrayleaveAccrualLines = jsonObj.getAsJsonArray("LeaveAccrualLines");
        if (jsonArrayleaveAccrualLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LeaveAccrualLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LeaveAccrualLines` to be an array in the JSON string but got `%s`", jsonObj.get("LeaveAccrualLines").toString()));
          }

          // validate the optional field `LeaveAccrualLines` (array)
          for (int i = 0; i < jsonArrayleaveAccrualLines.size(); i++) {
            LeaveAccrualLine.validateJsonElement(jsonArrayleaveAccrualLines.get(i));
          };
        }
      }
      if (jsonObj.get("LeaveEarningsLines") != null && !jsonObj.get("LeaveEarningsLines").isJsonNull()) {
        JsonArray jsonArrayleaveEarningsLines = jsonObj.getAsJsonArray("LeaveEarningsLines");
        if (jsonArrayleaveEarningsLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LeaveEarningsLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LeaveEarningsLines` to be an array in the JSON string but got `%s`", jsonObj.get("LeaveEarningsLines").toString()));
          }

          // validate the optional field `LeaveEarningsLines` (array)
          for (int i = 0; i < jsonArrayleaveEarningsLines.size(); i++) {
            LeaveEarningsLine.validateJsonElement(jsonArrayleaveEarningsLines.get(i));
          };
        }
      }
      if ((jsonObj.get("PayslipID") != null && !jsonObj.get("PayslipID").isJsonNull()) && !jsonObj.get("PayslipID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayslipID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayslipID").toString()));
      }
      if (jsonObj.get("ReimbursementLines") != null && !jsonObj.get("ReimbursementLines").isJsonNull()) {
        JsonArray jsonArrayreimbursementLines = jsonObj.getAsJsonArray("ReimbursementLines");
        if (jsonArrayreimbursementLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ReimbursementLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ReimbursementLines` to be an array in the JSON string but got `%s`", jsonObj.get("ReimbursementLines").toString()));
          }

          // validate the optional field `ReimbursementLines` (array)
          for (int i = 0; i < jsonArrayreimbursementLines.size(); i++) {
            ReimbursementLine.validateJsonElement(jsonArrayreimbursementLines.get(i));
          };
        }
      }
      if (jsonObj.get("SuperannuationLines") != null && !jsonObj.get("SuperannuationLines").isJsonNull()) {
        JsonArray jsonArraysuperannuationLines = jsonObj.getAsJsonArray("SuperannuationLines");
        if (jsonArraysuperannuationLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SuperannuationLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SuperannuationLines` to be an array in the JSON string but got `%s`", jsonObj.get("SuperannuationLines").toString()));
          }

          // validate the optional field `SuperannuationLines` (array)
          for (int i = 0; i < jsonArraysuperannuationLines.size(); i++) {
            SuperannuationLine.validateJsonElement(jsonArraysuperannuationLines.get(i));
          };
        }
      }
      if (jsonObj.get("TaxLines") != null && !jsonObj.get("TaxLines").isJsonNull()) {
        JsonArray jsonArraytaxLines = jsonObj.getAsJsonArray("TaxLines");
        if (jsonArraytaxLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TaxLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TaxLines` to be an array in the JSON string but got `%s`", jsonObj.get("TaxLines").toString()));
          }

          // validate the optional field `TaxLines` (array)
          for (int i = 0; i < jsonArraytaxLines.size(); i++) {
            TaxLine.validateJsonElement(jsonArraytaxLines.get(i));
          };
        }
      }
      if (jsonObj.get("TimesheetEarningsLines") != null && !jsonObj.get("TimesheetEarningsLines").isJsonNull()) {
        JsonArray jsonArraytimesheetEarningsLines = jsonObj.getAsJsonArray("TimesheetEarningsLines");
        if (jsonArraytimesheetEarningsLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TimesheetEarningsLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TimesheetEarningsLines` to be an array in the JSON string but got `%s`", jsonObj.get("TimesheetEarningsLines").toString()));
          }

          // validate the optional field `TimesheetEarningsLines` (array)
          for (int i = 0; i < jsonArraytimesheetEarningsLines.size(); i++) {
            EarningsLine.validateJsonElement(jsonArraytimesheetEarningsLines.get(i));
          };
        }
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Payslip.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Payslip' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Payslip> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Payslip.class));

       return (TypeAdapter<T>) new TypeAdapter<Payslip>() {
           @Override
           public void write(JsonWriter out, Payslip value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Payslip read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Payslip given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Payslip
   * @throws IOException if the JSON string is invalid with respect to Payslip
   */
  public static Payslip fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Payslip.class);
  }

  /**
   * Convert an instance of Payslip to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

