/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PayslipSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:28.765088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PayslipSummary {
  public static final String SERIALIZED_NAME_DEDUCTIONS = "Deductions";
  @SerializedName(SERIALIZED_NAME_DEDUCTIONS)
  private Double deductions;

  public static final String SERIALIZED_NAME_EMPLOYEE_GROUP = "EmployeeGroup";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_GROUP)
  private String employeeGroup;

  public static final String SERIALIZED_NAME_EMPLOYEE_I_D = "EmployeeID";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_I_D)
  private UUID employeeID;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_NET_PAY = "NetPay";
  @SerializedName(SERIALIZED_NAME_NET_PAY)
  private Double netPay;

  public static final String SERIALIZED_NAME_PAYSLIP_I_D = "PayslipID";
  @SerializedName(SERIALIZED_NAME_PAYSLIP_I_D)
  private UUID payslipID;

  public static final String SERIALIZED_NAME_REIMBURSEMENTS = "Reimbursements";
  @SerializedName(SERIALIZED_NAME_REIMBURSEMENTS)
  private Double reimbursements;

  public static final String SERIALIZED_NAME_SUPER = "Super";
  @SerializedName(SERIALIZED_NAME_SUPER)
  private Double _super;

  public static final String SERIALIZED_NAME_TAX = "Tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Double tax;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public static final String SERIALIZED_NAME_WAGES = "Wages";
  @SerializedName(SERIALIZED_NAME_WAGES)
  private Double wages;

  public PayslipSummary() {
  }

  public PayslipSummary(
     String updatedDateUTC
  ) {
    this();
    this.updatedDateUTC = updatedDateUTC;
  }

  public PayslipSummary deductions(Double deductions) {
    this.deductions = deductions;
    return this;
  }

  /**
   * The Deductions for the Payslip
   * @return deductions
   */
  @javax.annotation.Nullable
  public Double getDeductions() {
    return deductions;
  }

  public void setDeductions(Double deductions) {
    this.deductions = deductions;
  }


  public PayslipSummary employeeGroup(String employeeGroup) {
    this.employeeGroup = employeeGroup;
    return this;
  }

  /**
   * Employee group name
   * @return employeeGroup
   */
  @javax.annotation.Nullable
  public String getEmployeeGroup() {
    return employeeGroup;
  }

  public void setEmployeeGroup(String employeeGroup) {
    this.employeeGroup = employeeGroup;
  }


  public PayslipSummary employeeID(UUID employeeID) {
    this.employeeID = employeeID;
    return this;
  }

  /**
   * The Xero identifier for an employee
   * @return employeeID
   */
  @javax.annotation.Nullable
  public UUID getEmployeeID() {
    return employeeID;
  }

  public void setEmployeeID(UUID employeeID) {
    this.employeeID = employeeID;
  }


  public PayslipSummary firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name of employee
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public PayslipSummary lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name of employee
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public PayslipSummary netPay(Double netPay) {
    this.netPay = netPay;
    return this;
  }

  /**
   * The NetPay for the Payslip
   * @return netPay
   */
  @javax.annotation.Nullable
  public Double getNetPay() {
    return netPay;
  }

  public void setNetPay(Double netPay) {
    this.netPay = netPay;
  }


  public PayslipSummary payslipID(UUID payslipID) {
    this.payslipID = payslipID;
    return this;
  }

  /**
   * Xero identifier for the payslip
   * @return payslipID
   */
  @javax.annotation.Nullable
  public UUID getPayslipID() {
    return payslipID;
  }

  public void setPayslipID(UUID payslipID) {
    this.payslipID = payslipID;
  }


  public PayslipSummary reimbursements(Double reimbursements) {
    this.reimbursements = reimbursements;
    return this;
  }

  /**
   * The Reimbursements for the Payslip
   * @return reimbursements
   */
  @javax.annotation.Nullable
  public Double getReimbursements() {
    return reimbursements;
  }

  public void setReimbursements(Double reimbursements) {
    this.reimbursements = reimbursements;
  }


  public PayslipSummary _super(Double _super) {
    this._super = _super;
    return this;
  }

  /**
   * The Super for the Payslip
   * @return _super
   */
  @javax.annotation.Nullable
  public Double getSuper() {
    return _super;
  }

  public void setSuper(Double _super) {
    this._super = _super;
  }


  public PayslipSummary tax(Double tax) {
    this.tax = tax;
    return this;
  }

  /**
   * The Tax for the Payslip
   * @return tax
   */
  @javax.annotation.Nullable
  public Double getTax() {
    return tax;
  }

  public void setTax(Double tax) {
    this.tax = tax;
  }


  /**
   * Last modified timestamp
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }



  public PayslipSummary wages(Double wages) {
    this.wages = wages;
    return this;
  }

  /**
   * The Wages for the Payslip
   * @return wages
   */
  @javax.annotation.Nullable
  public Double getWages() {
    return wages;
  }

  public void setWages(Double wages) {
    this.wages = wages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayslipSummary payslipSummary = (PayslipSummary) o;
    return Objects.equals(this.deductions, payslipSummary.deductions) &&
        Objects.equals(this.employeeGroup, payslipSummary.employeeGroup) &&
        Objects.equals(this.employeeID, payslipSummary.employeeID) &&
        Objects.equals(this.firstName, payslipSummary.firstName) &&
        Objects.equals(this.lastName, payslipSummary.lastName) &&
        Objects.equals(this.netPay, payslipSummary.netPay) &&
        Objects.equals(this.payslipID, payslipSummary.payslipID) &&
        Objects.equals(this.reimbursements, payslipSummary.reimbursements) &&
        Objects.equals(this._super, payslipSummary._super) &&
        Objects.equals(this.tax, payslipSummary.tax) &&
        Objects.equals(this.updatedDateUTC, payslipSummary.updatedDateUTC) &&
        Objects.equals(this.wages, payslipSummary.wages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deductions, employeeGroup, employeeID, firstName, lastName, netPay, payslipID, reimbursements, _super, tax, updatedDateUTC, wages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayslipSummary {\n");
    sb.append("    deductions: ").append(toIndentedString(deductions)).append("\n");
    sb.append("    employeeGroup: ").append(toIndentedString(employeeGroup)).append("\n");
    sb.append("    employeeID: ").append(toIndentedString(employeeID)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    netPay: ").append(toIndentedString(netPay)).append("\n");
    sb.append("    payslipID: ").append(toIndentedString(payslipID)).append("\n");
    sb.append("    reimbursements: ").append(toIndentedString(reimbursements)).append("\n");
    sb.append("    _super: ").append(toIndentedString(_super)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("    wages: ").append(toIndentedString(wages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Deductions");
    openapiFields.add("EmployeeGroup");
    openapiFields.add("EmployeeID");
    openapiFields.add("FirstName");
    openapiFields.add("LastName");
    openapiFields.add("NetPay");
    openapiFields.add("PayslipID");
    openapiFields.add("Reimbursements");
    openapiFields.add("Super");
    openapiFields.add("Tax");
    openapiFields.add("UpdatedDateUTC");
    openapiFields.add("Wages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PayslipSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PayslipSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayslipSummary is not found in the empty JSON string", PayslipSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PayslipSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PayslipSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("EmployeeGroup") != null && !jsonObj.get("EmployeeGroup").isJsonNull()) && !jsonObj.get("EmployeeGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmployeeGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmployeeGroup").toString()));
      }
      if ((jsonObj.get("EmployeeID") != null && !jsonObj.get("EmployeeID").isJsonNull()) && !jsonObj.get("EmployeeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmployeeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmployeeID").toString()));
      }
      if ((jsonObj.get("FirstName") != null && !jsonObj.get("FirstName").isJsonNull()) && !jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if ((jsonObj.get("LastName") != null && !jsonObj.get("LastName").isJsonNull()) && !jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if ((jsonObj.get("PayslipID") != null && !jsonObj.get("PayslipID").isJsonNull()) && !jsonObj.get("PayslipID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayslipID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayslipID").toString()));
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayslipSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayslipSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayslipSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayslipSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<PayslipSummary>() {
           @Override
           public void write(JsonWriter out, PayslipSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PayslipSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PayslipSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PayslipSummary
   * @throws IOException if the JSON string is invalid with respect to PayslipSummary
   */
  public static PayslipSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayslipSummary.class);
  }

  /**
   * Convert an instance of PayslipSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

