/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.TimesheetLine;
import org.openapitools.client.model.TimesheetStatus;
import org.openapitools.client.model.ValidationError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Timesheet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:28.765088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Timesheet {
  public static final String SERIALIZED_NAME_EMPLOYEE_I_D = "EmployeeID";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_I_D)
  private UUID employeeID;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_HOURS = "Hours";
  @SerializedName(SERIALIZED_NAME_HOURS)
  private Double hours;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TimesheetStatus status;

  public static final String SERIALIZED_NAME_TIMESHEET_I_D = "TimesheetID";
  @SerializedName(SERIALIZED_NAME_TIMESHEET_I_D)
  private UUID timesheetID;

  public static final String SERIALIZED_NAME_TIMESHEET_LINES = "TimesheetLines";
  @SerializedName(SERIALIZED_NAME_TIMESHEET_LINES)
  private List<TimesheetLine> timesheetLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "ValidationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<ValidationError> validationErrors = new ArrayList<>();

  public Timesheet() {
  }

  public Timesheet(
     String updatedDateUTC
  ) {
    this();
    this.updatedDateUTC = updatedDateUTC;
  }

  public Timesheet employeeID(UUID employeeID) {
    this.employeeID = employeeID;
    return this;
  }

  /**
   * The Xero identifier for an employee
   * @return employeeID
   */
  @javax.annotation.Nonnull
  public UUID getEmployeeID() {
    return employeeID;
  }

  public void setEmployeeID(UUID employeeID) {
    this.employeeID = employeeID;
  }


  public Timesheet endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Period end date (YYYY-MM-DD)
   * @return endDate
   */
  @javax.annotation.Nonnull
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public Timesheet hours(Double hours) {
    this.hours = hours;
    return this;
  }

  /**
   * Timesheet total hours
   * @return hours
   */
  @javax.annotation.Nullable
  public Double getHours() {
    return hours;
  }

  public void setHours(Double hours) {
    this.hours = hours;
  }


  public Timesheet startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Period start date (YYYY-MM-DD)
   * @return startDate
   */
  @javax.annotation.Nonnull
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public Timesheet status(TimesheetStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public TimesheetStatus getStatus() {
    return status;
  }

  public void setStatus(TimesheetStatus status) {
    this.status = status;
  }


  public Timesheet timesheetID(UUID timesheetID) {
    this.timesheetID = timesheetID;
    return this;
  }

  /**
   * The Xero identifier for a Payroll Timesheet
   * @return timesheetID
   */
  @javax.annotation.Nullable
  public UUID getTimesheetID() {
    return timesheetID;
  }

  public void setTimesheetID(UUID timesheetID) {
    this.timesheetID = timesheetID;
  }


  public Timesheet timesheetLines(List<TimesheetLine> timesheetLines) {
    this.timesheetLines = timesheetLines;
    return this;
  }

  public Timesheet addTimesheetLinesItem(TimesheetLine timesheetLinesItem) {
    if (this.timesheetLines == null) {
      this.timesheetLines = new ArrayList<>();
    }
    this.timesheetLines.add(timesheetLinesItem);
    return this;
  }

  /**
   * Get timesheetLines
   * @return timesheetLines
   */
  @javax.annotation.Nullable
  public List<TimesheetLine> getTimesheetLines() {
    return timesheetLines;
  }

  public void setTimesheetLines(List<TimesheetLine> timesheetLines) {
    this.timesheetLines = timesheetLines;
  }


  /**
   * Last modified timestamp
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }



  public Timesheet validationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public Timesheet addValidationErrorsItem(ValidationError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Displays array of validation error messages from the API
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<ValidationError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Timesheet timesheet = (Timesheet) o;
    return Objects.equals(this.employeeID, timesheet.employeeID) &&
        Objects.equals(this.endDate, timesheet.endDate) &&
        Objects.equals(this.hours, timesheet.hours) &&
        Objects.equals(this.startDate, timesheet.startDate) &&
        Objects.equals(this.status, timesheet.status) &&
        Objects.equals(this.timesheetID, timesheet.timesheetID) &&
        Objects.equals(this.timesheetLines, timesheet.timesheetLines) &&
        Objects.equals(this.updatedDateUTC, timesheet.updatedDateUTC) &&
        Objects.equals(this.validationErrors, timesheet.validationErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeID, endDate, hours, startDate, status, timesheetID, timesheetLines, updatedDateUTC, validationErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Timesheet {\n");
    sb.append("    employeeID: ").append(toIndentedString(employeeID)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    hours: ").append(toIndentedString(hours)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timesheetID: ").append(toIndentedString(timesheetID)).append("\n");
    sb.append("    timesheetLines: ").append(toIndentedString(timesheetLines)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EmployeeID");
    openapiFields.add("EndDate");
    openapiFields.add("Hours");
    openapiFields.add("StartDate");
    openapiFields.add("Status");
    openapiFields.add("TimesheetID");
    openapiFields.add("TimesheetLines");
    openapiFields.add("UpdatedDateUTC");
    openapiFields.add("ValidationErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EmployeeID");
    openapiRequiredFields.add("EndDate");
    openapiRequiredFields.add("StartDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Timesheet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Timesheet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Timesheet is not found in the empty JSON string", Timesheet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Timesheet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Timesheet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Timesheet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("EmployeeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmployeeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmployeeID").toString()));
      }
      if (!jsonObj.get("EndDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EndDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EndDate").toString()));
      }
      if (!jsonObj.get("StartDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StartDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StartDate").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        TimesheetStatus.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("TimesheetID") != null && !jsonObj.get("TimesheetID").isJsonNull()) && !jsonObj.get("TimesheetID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimesheetID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimesheetID").toString()));
      }
      if (jsonObj.get("TimesheetLines") != null && !jsonObj.get("TimesheetLines").isJsonNull()) {
        JsonArray jsonArraytimesheetLines = jsonObj.getAsJsonArray("TimesheetLines");
        if (jsonArraytimesheetLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TimesheetLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TimesheetLines` to be an array in the JSON string but got `%s`", jsonObj.get("TimesheetLines").toString()));
          }

          // validate the optional field `TimesheetLines` (array)
          for (int i = 0; i < jsonArraytimesheetLines.size(); i++) {
            TimesheetLine.validateJsonElement(jsonArraytimesheetLines.get(i));
          };
        }
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
      if (jsonObj.get("ValidationErrors") != null && !jsonObj.get("ValidationErrors").isJsonNull()) {
        JsonArray jsonArrayvalidationErrors = jsonObj.getAsJsonArray("ValidationErrors");
        if (jsonArrayvalidationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ValidationErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ValidationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("ValidationErrors").toString()));
          }

          // validate the optional field `ValidationErrors` (array)
          for (int i = 0; i < jsonArrayvalidationErrors.size(); i++) {
            ValidationError.validateJsonElement(jsonArrayvalidationErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Timesheet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Timesheet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Timesheet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Timesheet.class));

       return (TypeAdapter<T>) new TypeAdapter<Timesheet>() {
           @Override
           public void write(JsonWriter out, Timesheet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Timesheet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Timesheet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Timesheet
   * @throws IOException if the JSON string is invalid with respect to Timesheet
   */
  public static Timesheet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Timesheet.class);
  }

  /**
   * Convert an instance of Timesheet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

