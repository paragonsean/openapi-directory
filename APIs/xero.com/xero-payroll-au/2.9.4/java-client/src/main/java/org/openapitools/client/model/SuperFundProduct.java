/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SuperFundProduct
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:28.765088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SuperFundProduct {
  public static final String SERIALIZED_NAME_A_B_N = "ABN";
  @SerializedName(SERIALIZED_NAME_A_B_N)
  private String ABN;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "ProductName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public static final String SERIALIZED_NAME_S_P_I_N = "SPIN";
  @SerializedName(SERIALIZED_NAME_S_P_I_N)
  private String SPIN;

  public static final String SERIALIZED_NAME_U_S_I = "USI";
  @SerializedName(SERIALIZED_NAME_U_S_I)
  private String USI;

  public SuperFundProduct() {
  }

  public SuperFundProduct ABN(String ABN) {
    this.ABN = ABN;
    return this;
  }

  /**
   * The ABN of the Regulated SuperFund
   * @return ABN
   */
  @javax.annotation.Nullable
  public String getABN() {
    return ABN;
  }

  public void setABN(String ABN) {
    this.ABN = ABN;
  }


  public SuperFundProduct productName(String productName) {
    this.productName = productName;
    return this;
  }

  /**
   * The name of the Regulated SuperFund
   * @return productName
   */
  @javax.annotation.Nullable
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }


  public SuperFundProduct SPIN(String SPIN) {
    this.SPIN = SPIN;
    return this;
  }

  /**
   * The SPIN of the Regulated SuperFund. This field has been deprecated. New superfunds will not have a SPIN value. The USI field should be used instead of SPIN
   * @return SPIN
   */
  @javax.annotation.Nullable
  public String getSPIN() {
    return SPIN;
  }

  public void setSPIN(String SPIN) {
    this.SPIN = SPIN;
  }


  public SuperFundProduct USI(String USI) {
    this.USI = USI;
    return this;
  }

  /**
   * The USI of the Regulated SuperFund
   * @return USI
   */
  @javax.annotation.Nullable
  public String getUSI() {
    return USI;
  }

  public void setUSI(String USI) {
    this.USI = USI;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuperFundProduct superFundProduct = (SuperFundProduct) o;
    return Objects.equals(this.ABN, superFundProduct.ABN) &&
        Objects.equals(this.productName, superFundProduct.productName) &&
        Objects.equals(this.SPIN, superFundProduct.SPIN) &&
        Objects.equals(this.USI, superFundProduct.USI);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ABN, productName, SPIN, USI);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuperFundProduct {\n");
    sb.append("    ABN: ").append(toIndentedString(ABN)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    SPIN: ").append(toIndentedString(SPIN)).append("\n");
    sb.append("    USI: ").append(toIndentedString(USI)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ABN");
    openapiFields.add("ProductName");
    openapiFields.add("SPIN");
    openapiFields.add("USI");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuperFundProduct
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuperFundProduct.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuperFundProduct is not found in the empty JSON string", SuperFundProduct.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuperFundProduct.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuperFundProduct` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ABN") != null && !jsonObj.get("ABN").isJsonNull()) && !jsonObj.get("ABN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ABN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ABN").toString()));
      }
      if ((jsonObj.get("ProductName") != null && !jsonObj.get("ProductName").isJsonNull()) && !jsonObj.get("ProductName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProductName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProductName").toString()));
      }
      if ((jsonObj.get("SPIN") != null && !jsonObj.get("SPIN").isJsonNull()) && !jsonObj.get("SPIN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SPIN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SPIN").toString()));
      }
      if ((jsonObj.get("USI") != null && !jsonObj.get("USI").isJsonNull()) && !jsonObj.get("USI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `USI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("USI").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuperFundProduct.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuperFundProduct' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuperFundProduct> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuperFundProduct.class));

       return (TypeAdapter<T>) new TypeAdapter<SuperFundProduct>() {
           @Override
           public void write(JsonWriter out, SuperFundProduct value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuperFundProduct read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuperFundProduct given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuperFundProduct
   * @throws IOException if the JSON string is invalid with respect to SuperFundProduct
   */
  public static SuperFundProduct fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuperFundProduct.class);
  }

  /**
   * Convert an instance of SuperFundProduct to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

