/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Employee;
import org.openapitools.client.model.Employees;
import org.openapitools.client.model.LeaveApplication;
import org.openapitools.client.model.LeaveApplications;
import org.openapitools.client.model.ModelAPIException;
import org.openapitools.client.model.PayItem;
import org.openapitools.client.model.PayItems;
import org.openapitools.client.model.PayRun;
import org.openapitools.client.model.PayRuns;
import org.openapitools.client.model.PayrollCalendar;
import org.openapitools.client.model.PayrollCalendars;
import org.openapitools.client.model.PayslipLines;
import org.openapitools.client.model.PayslipObject;
import org.openapitools.client.model.Payslips;
import org.openapitools.client.model.SettingsObject;
import org.openapitools.client.model.SuperFund;
import org.openapitools.client.model.SuperFundProducts;
import org.openapitools.client.model.SuperFunds;
import org.openapitools.client.model.Timesheet;
import org.openapitools.client.model.TimesheetObject;
import org.openapitools.client.model.Timesheets;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PayrollAuApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayrollAuApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PayrollAuApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createEmployee
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employee  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmployeeCall(String xeroTenantId, List<Employee> employee, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employee;

        // create path and map variables
        String localVarPath = "/Employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmployeeValidateBeforeCall(String xeroTenantId, List<Employee> employee, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createEmployee(Async)");
        }

        // verify the required parameter 'employee' is set
        if (employee == null) {
            throw new ApiException("Missing the required parameter 'employee' when calling createEmployee(Async)");
        }

        return createEmployeeCall(xeroTenantId, employee, _callback);

    }

    /**
     * Creates a payroll employee
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employee  (required)
     * @return Employees
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public Employees createEmployee(String xeroTenantId, List<Employee> employee) throws ApiException {
        ApiResponse<Employees> localVarResp = createEmployeeWithHttpInfo(xeroTenantId, employee);
        return localVarResp.getData();
    }

    /**
     * Creates a payroll employee
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employee  (required)
     * @return ApiResponse&lt;Employees&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Employees> createEmployeeWithHttpInfo(String xeroTenantId, List<Employee> employee) throws ApiException {
        okhttp3.Call localVarCall = createEmployeeValidateBeforeCall(xeroTenantId, employee, null);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a payroll employee (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employee  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmployeeAsync(String xeroTenantId, List<Employee> employee, final ApiCallback<Employees> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmployeeValidateBeforeCall(xeroTenantId, employee, _callback);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLeaveApplication
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param leaveApplication  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLeaveApplicationCall(String xeroTenantId, List<LeaveApplication> leaveApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leaveApplication;

        // create path and map variables
        String localVarPath = "/LeaveApplications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLeaveApplicationValidateBeforeCall(String xeroTenantId, List<LeaveApplication> leaveApplication, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createLeaveApplication(Async)");
        }

        // verify the required parameter 'leaveApplication' is set
        if (leaveApplication == null) {
            throw new ApiException("Missing the required parameter 'leaveApplication' when calling createLeaveApplication(Async)");
        }

        return createLeaveApplicationCall(xeroTenantId, leaveApplication, _callback);

    }

    /**
     * Creates a leave application
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param leaveApplication  (required)
     * @return LeaveApplications
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public LeaveApplications createLeaveApplication(String xeroTenantId, List<LeaveApplication> leaveApplication) throws ApiException {
        ApiResponse<LeaveApplications> localVarResp = createLeaveApplicationWithHttpInfo(xeroTenantId, leaveApplication);
        return localVarResp.getData();
    }

    /**
     * Creates a leave application
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param leaveApplication  (required)
     * @return ApiResponse&lt;LeaveApplications&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LeaveApplications> createLeaveApplicationWithHttpInfo(String xeroTenantId, List<LeaveApplication> leaveApplication) throws ApiException {
        okhttp3.Call localVarCall = createLeaveApplicationValidateBeforeCall(xeroTenantId, leaveApplication, null);
        Type localVarReturnType = new TypeToken<LeaveApplications>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a leave application (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param leaveApplication  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLeaveApplicationAsync(String xeroTenantId, List<LeaveApplication> leaveApplication, final ApiCallback<LeaveApplications> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLeaveApplicationValidateBeforeCall(xeroTenantId, leaveApplication, _callback);
        Type localVarReturnType = new TypeToken<LeaveApplications>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPayItem
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request - currently returns empty array for JSON </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPayItemCall(String xeroTenantId, PayItem payItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payItem;

        // create path and map variables
        String localVarPath = "/PayItems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPayItemValidateBeforeCall(String xeroTenantId, PayItem payItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createPayItem(Async)");
        }

        // verify the required parameter 'payItem' is set
        if (payItem == null) {
            throw new ApiException("Missing the required parameter 'payItem' when calling createPayItem(Async)");
        }

        return createPayItemCall(xeroTenantId, payItem, _callback);

    }

    /**
     * Creates a pay item
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payItem  (required)
     * @return PayItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request - currently returns empty array for JSON </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public PayItems createPayItem(String xeroTenantId, PayItem payItem) throws ApiException {
        ApiResponse<PayItems> localVarResp = createPayItemWithHttpInfo(xeroTenantId, payItem);
        return localVarResp.getData();
    }

    /**
     * Creates a pay item
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payItem  (required)
     * @return ApiResponse&lt;PayItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request - currently returns empty array for JSON </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayItems> createPayItemWithHttpInfo(String xeroTenantId, PayItem payItem) throws ApiException {
        okhttp3.Call localVarCall = createPayItemValidateBeforeCall(xeroTenantId, payItem, null);
        Type localVarReturnType = new TypeToken<PayItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a pay item (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request - currently returns empty array for JSON </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPayItemAsync(String xeroTenantId, PayItem payItem, final ApiCallback<PayItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPayItemValidateBeforeCall(xeroTenantId, payItem, _callback);
        Type localVarReturnType = new TypeToken<PayItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPayRun
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payRun  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPayRunCall(String xeroTenantId, List<PayRun> payRun, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payRun;

        // create path and map variables
        String localVarPath = "/PayRuns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPayRunValidateBeforeCall(String xeroTenantId, List<PayRun> payRun, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createPayRun(Async)");
        }

        // verify the required parameter 'payRun' is set
        if (payRun == null) {
            throw new ApiException("Missing the required parameter 'payRun' when calling createPayRun(Async)");
        }

        return createPayRunCall(xeroTenantId, payRun, _callback);

    }

    /**
     * Creates a pay run
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payRun  (required)
     * @return PayRuns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public PayRuns createPayRun(String xeroTenantId, List<PayRun> payRun) throws ApiException {
        ApiResponse<PayRuns> localVarResp = createPayRunWithHttpInfo(xeroTenantId, payRun);
        return localVarResp.getData();
    }

    /**
     * Creates a pay run
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payRun  (required)
     * @return ApiResponse&lt;PayRuns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayRuns> createPayRunWithHttpInfo(String xeroTenantId, List<PayRun> payRun) throws ApiException {
        okhttp3.Call localVarCall = createPayRunValidateBeforeCall(xeroTenantId, payRun, null);
        Type localVarReturnType = new TypeToken<PayRuns>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a pay run (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payRun  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPayRunAsync(String xeroTenantId, List<PayRun> payRun, final ApiCallback<PayRuns> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPayRunValidateBeforeCall(xeroTenantId, payRun, _callback);
        Type localVarReturnType = new TypeToken<PayRuns>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPayrollCalendar
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payrollCalendar  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPayrollCalendarCall(String xeroTenantId, List<PayrollCalendar> payrollCalendar, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payrollCalendar;

        // create path and map variables
        String localVarPath = "/PayrollCalendars";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPayrollCalendarValidateBeforeCall(String xeroTenantId, List<PayrollCalendar> payrollCalendar, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createPayrollCalendar(Async)");
        }

        // verify the required parameter 'payrollCalendar' is set
        if (payrollCalendar == null) {
            throw new ApiException("Missing the required parameter 'payrollCalendar' when calling createPayrollCalendar(Async)");
        }

        return createPayrollCalendarCall(xeroTenantId, payrollCalendar, _callback);

    }

    /**
     * Creates a Payroll Calendar
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payrollCalendar  (required)
     * @return PayrollCalendars
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public PayrollCalendars createPayrollCalendar(String xeroTenantId, List<PayrollCalendar> payrollCalendar) throws ApiException {
        ApiResponse<PayrollCalendars> localVarResp = createPayrollCalendarWithHttpInfo(xeroTenantId, payrollCalendar);
        return localVarResp.getData();
    }

    /**
     * Creates a Payroll Calendar
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payrollCalendar  (required)
     * @return ApiResponse&lt;PayrollCalendars&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayrollCalendars> createPayrollCalendarWithHttpInfo(String xeroTenantId, List<PayrollCalendar> payrollCalendar) throws ApiException {
        okhttp3.Call localVarCall = createPayrollCalendarValidateBeforeCall(xeroTenantId, payrollCalendar, null);
        Type localVarReturnType = new TypeToken<PayrollCalendars>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a Payroll Calendar (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payrollCalendar  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPayrollCalendarAsync(String xeroTenantId, List<PayrollCalendar> payrollCalendar, final ApiCallback<PayrollCalendars> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPayrollCalendarValidateBeforeCall(xeroTenantId, payrollCalendar, _callback);
        Type localVarReturnType = new TypeToken<PayrollCalendars>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSuperfund
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param superFund  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSuperfundCall(String xeroTenantId, List<SuperFund> superFund, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = superFund;

        // create path and map variables
        String localVarPath = "/Superfunds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSuperfundValidateBeforeCall(String xeroTenantId, List<SuperFund> superFund, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createSuperfund(Async)");
        }

        // verify the required parameter 'superFund' is set
        if (superFund == null) {
            throw new ApiException("Missing the required parameter 'superFund' when calling createSuperfund(Async)");
        }

        return createSuperfundCall(xeroTenantId, superFund, _callback);

    }

    /**
     * Creates a superfund
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param superFund  (required)
     * @return SuperFunds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public SuperFunds createSuperfund(String xeroTenantId, List<SuperFund> superFund) throws ApiException {
        ApiResponse<SuperFunds> localVarResp = createSuperfundWithHttpInfo(xeroTenantId, superFund);
        return localVarResp.getData();
    }

    /**
     * Creates a superfund
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param superFund  (required)
     * @return ApiResponse&lt;SuperFunds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuperFunds> createSuperfundWithHttpInfo(String xeroTenantId, List<SuperFund> superFund) throws ApiException {
        okhttp3.Call localVarCall = createSuperfundValidateBeforeCall(xeroTenantId, superFund, null);
        Type localVarReturnType = new TypeToken<SuperFunds>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a superfund (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param superFund  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSuperfundAsync(String xeroTenantId, List<SuperFund> superFund, final ApiCallback<SuperFunds> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSuperfundValidateBeforeCall(xeroTenantId, superFund, _callback);
        Type localVarReturnType = new TypeToken<SuperFunds>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTimesheet
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param timesheet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTimesheetCall(String xeroTenantId, List<Timesheet> timesheet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timesheet;

        // create path and map variables
        String localVarPath = "/Timesheets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTimesheetValidateBeforeCall(String xeroTenantId, List<Timesheet> timesheet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createTimesheet(Async)");
        }

        // verify the required parameter 'timesheet' is set
        if (timesheet == null) {
            throw new ApiException("Missing the required parameter 'timesheet' when calling createTimesheet(Async)");
        }

        return createTimesheetCall(xeroTenantId, timesheet, _callback);

    }

    /**
     * Creates a timesheet
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param timesheet  (required)
     * @return Timesheets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public Timesheets createTimesheet(String xeroTenantId, List<Timesheet> timesheet) throws ApiException {
        ApiResponse<Timesheets> localVarResp = createTimesheetWithHttpInfo(xeroTenantId, timesheet);
        return localVarResp.getData();
    }

    /**
     * Creates a timesheet
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param timesheet  (required)
     * @return ApiResponse&lt;Timesheets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Timesheets> createTimesheetWithHttpInfo(String xeroTenantId, List<Timesheet> timesheet) throws ApiException {
        okhttp3.Call localVarCall = createTimesheetValidateBeforeCall(xeroTenantId, timesheet, null);
        Type localVarReturnType = new TypeToken<Timesheets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a timesheet (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param timesheet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTimesheetAsync(String xeroTenantId, List<Timesheet> timesheet, final ApiCallback<Timesheets> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTimesheetValidateBeforeCall(xeroTenantId, timesheet, _callback);
        Type localVarReturnType = new TypeToken<Timesheets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmployee
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employeeID Employee id for single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmployeeCall(String xeroTenantId, UUID employeeID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employees/{EmployeeID}"
            .replace("{" + "EmployeeID" + "}", localVarApiClient.escapeString(employeeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeValidateBeforeCall(String xeroTenantId, UUID employeeID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getEmployee(Async)");
        }

        // verify the required parameter 'employeeID' is set
        if (employeeID == null) {
            throw new ApiException("Missing the required parameter 'employeeID' when calling getEmployee(Async)");
        }

        return getEmployeeCall(xeroTenantId, employeeID, _callback);

    }

    /**
     * Retrieves an employee&#39;s detail by unique employee id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employeeID Employee id for single object (required)
     * @return Employees
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public Employees getEmployee(String xeroTenantId, UUID employeeID) throws ApiException {
        ApiResponse<Employees> localVarResp = getEmployeeWithHttpInfo(xeroTenantId, employeeID);
        return localVarResp.getData();
    }

    /**
     * Retrieves an employee&#39;s detail by unique employee id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employeeID Employee id for single object (required)
     * @return ApiResponse&lt;Employees&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Employees> getEmployeeWithHttpInfo(String xeroTenantId, UUID employeeID) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeValidateBeforeCall(xeroTenantId, employeeID, null);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves an employee&#39;s detail by unique employee id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employeeID Employee id for single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmployeeAsync(String xeroTenantId, UUID employeeID, final ApiCallback<Employees> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeValidateBeforeCall(xeroTenantId, employeeID, _callback);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmployees
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmployeesCall(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeesValidateBeforeCall(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getEmployees(Async)");
        }

        return getEmployeesCall(xeroTenantId, ifModifiedSince, where, order, page, _callback);

    }

    /**
     * Searches payroll employees
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call (optional)
     * @return Employees
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public Employees getEmployees(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page) throws ApiException {
        ApiResponse<Employees> localVarResp = getEmployeesWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page);
        return localVarResp.getData();
    }

    /**
     * Searches payroll employees
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call (optional)
     * @return ApiResponse&lt;Employees&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Employees> getEmployeesWithHttpInfo(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getEmployeesValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, null);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Searches payroll employees (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmployeesAsync(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback<Employees> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeesValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, _callback);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLeaveApplication
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param leaveApplicationID Leave Application id for single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLeaveApplicationCall(String xeroTenantId, UUID leaveApplicationID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/LeaveApplications/{LeaveApplicationID}"
            .replace("{" + "LeaveApplicationID" + "}", localVarApiClient.escapeString(leaveApplicationID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLeaveApplicationValidateBeforeCall(String xeroTenantId, UUID leaveApplicationID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getLeaveApplication(Async)");
        }

        // verify the required parameter 'leaveApplicationID' is set
        if (leaveApplicationID == null) {
            throw new ApiException("Missing the required parameter 'leaveApplicationID' when calling getLeaveApplication(Async)");
        }

        return getLeaveApplicationCall(xeroTenantId, leaveApplicationID, _callback);

    }

    /**
     * Retrieves a leave application by a unique leave application id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param leaveApplicationID Leave Application id for single object (required)
     * @return LeaveApplications
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public LeaveApplications getLeaveApplication(String xeroTenantId, UUID leaveApplicationID) throws ApiException {
        ApiResponse<LeaveApplications> localVarResp = getLeaveApplicationWithHttpInfo(xeroTenantId, leaveApplicationID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a leave application by a unique leave application id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param leaveApplicationID Leave Application id for single object (required)
     * @return ApiResponse&lt;LeaveApplications&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LeaveApplications> getLeaveApplicationWithHttpInfo(String xeroTenantId, UUID leaveApplicationID) throws ApiException {
        okhttp3.Call localVarCall = getLeaveApplicationValidateBeforeCall(xeroTenantId, leaveApplicationID, null);
        Type localVarReturnType = new TypeToken<LeaveApplications>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a leave application by a unique leave application id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param leaveApplicationID Leave Application id for single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLeaveApplicationAsync(String xeroTenantId, UUID leaveApplicationID, final ApiCallback<LeaveApplications> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLeaveApplicationValidateBeforeCall(xeroTenantId, leaveApplicationID, _callback);
        Type localVarReturnType = new TypeToken<LeaveApplications>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLeaveApplications
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLeaveApplicationsCall(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/LeaveApplications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLeaveApplicationsValidateBeforeCall(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getLeaveApplications(Async)");
        }

        return getLeaveApplicationsCall(xeroTenantId, ifModifiedSince, where, order, page, _callback);

    }

    /**
     * Retrieves leave applications
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     * @return LeaveApplications
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public LeaveApplications getLeaveApplications(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page) throws ApiException {
        ApiResponse<LeaveApplications> localVarResp = getLeaveApplicationsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page);
        return localVarResp.getData();
    }

    /**
     * Retrieves leave applications
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     * @return ApiResponse&lt;LeaveApplications&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LeaveApplications> getLeaveApplicationsWithHttpInfo(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getLeaveApplicationsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, null);
        Type localVarReturnType = new TypeToken<LeaveApplications>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves leave applications (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLeaveApplicationsAsync(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback<LeaveApplications> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLeaveApplicationsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, _callback);
        Type localVarReturnType = new TypeToken<LeaveApplications>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayItems
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayItemsCall(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/PayItems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayItemsValidateBeforeCall(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPayItems(Async)");
        }

        return getPayItemsCall(xeroTenantId, ifModifiedSince, where, order, page, _callback);

    }

    /**
     * Retrieves pay items
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     * @return PayItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public PayItems getPayItems(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page) throws ApiException {
        ApiResponse<PayItems> localVarResp = getPayItemsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page);
        return localVarResp.getData();
    }

    /**
     * Retrieves pay items
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     * @return ApiResponse&lt;PayItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayItems> getPayItemsWithHttpInfo(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getPayItemsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, null);
        Type localVarReturnType = new TypeToken<PayItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves pay items (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayItemsAsync(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback<PayItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayItemsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, _callback);
        Type localVarReturnType = new TypeToken<PayItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayRun
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payRunID PayRun id for single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayRunCall(String xeroTenantId, UUID payRunID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/PayRuns/{PayRunID}"
            .replace("{" + "PayRunID" + "}", localVarApiClient.escapeString(payRunID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayRunValidateBeforeCall(String xeroTenantId, UUID payRunID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPayRun(Async)");
        }

        // verify the required parameter 'payRunID' is set
        if (payRunID == null) {
            throw new ApiException("Missing the required parameter 'payRunID' when calling getPayRun(Async)");
        }

        return getPayRunCall(xeroTenantId, payRunID, _callback);

    }

    /**
     * Retrieves a pay run by using a unique pay run id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payRunID PayRun id for single object (required)
     * @return PayRuns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public PayRuns getPayRun(String xeroTenantId, UUID payRunID) throws ApiException {
        ApiResponse<PayRuns> localVarResp = getPayRunWithHttpInfo(xeroTenantId, payRunID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a pay run by using a unique pay run id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payRunID PayRun id for single object (required)
     * @return ApiResponse&lt;PayRuns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayRuns> getPayRunWithHttpInfo(String xeroTenantId, UUID payRunID) throws ApiException {
        okhttp3.Call localVarCall = getPayRunValidateBeforeCall(xeroTenantId, payRunID, null);
        Type localVarReturnType = new TypeToken<PayRuns>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a pay run by using a unique pay run id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payRunID PayRun id for single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayRunAsync(String xeroTenantId, UUID payRunID, final ApiCallback<PayRuns> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayRunValidateBeforeCall(xeroTenantId, payRunID, _callback);
        Type localVarReturnType = new TypeToken<PayRuns>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayRuns
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 PayRuns will be returned in a single API call (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayRunsCall(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/PayRuns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayRunsValidateBeforeCall(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPayRuns(Async)");
        }

        return getPayRunsCall(xeroTenantId, ifModifiedSince, where, order, page, _callback);

    }

    /**
     * Retrieves pay runs
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 PayRuns will be returned in a single API call (optional)
     * @return PayRuns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public PayRuns getPayRuns(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page) throws ApiException {
        ApiResponse<PayRuns> localVarResp = getPayRunsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page);
        return localVarResp.getData();
    }

    /**
     * Retrieves pay runs
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 PayRuns will be returned in a single API call (optional)
     * @return ApiResponse&lt;PayRuns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayRuns> getPayRunsWithHttpInfo(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getPayRunsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, null);
        Type localVarReturnType = new TypeToken<PayRuns>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves pay runs (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 PayRuns will be returned in a single API call (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayRunsAsync(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback<PayRuns> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayRunsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, _callback);
        Type localVarReturnType = new TypeToken<PayRuns>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayrollCalendar
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payrollCalendarID Payroll Calendar id for single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayrollCalendarCall(String xeroTenantId, UUID payrollCalendarID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/PayrollCalendars/{PayrollCalendarID}"
            .replace("{" + "PayrollCalendarID" + "}", localVarApiClient.escapeString(payrollCalendarID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayrollCalendarValidateBeforeCall(String xeroTenantId, UUID payrollCalendarID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPayrollCalendar(Async)");
        }

        // verify the required parameter 'payrollCalendarID' is set
        if (payrollCalendarID == null) {
            throw new ApiException("Missing the required parameter 'payrollCalendarID' when calling getPayrollCalendar(Async)");
        }

        return getPayrollCalendarCall(xeroTenantId, payrollCalendarID, _callback);

    }

    /**
     * Retrieves payroll calendar by using a unique payroll calendar ID
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payrollCalendarID Payroll Calendar id for single object (required)
     * @return PayrollCalendars
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public PayrollCalendars getPayrollCalendar(String xeroTenantId, UUID payrollCalendarID) throws ApiException {
        ApiResponse<PayrollCalendars> localVarResp = getPayrollCalendarWithHttpInfo(xeroTenantId, payrollCalendarID);
        return localVarResp.getData();
    }

    /**
     * Retrieves payroll calendar by using a unique payroll calendar ID
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payrollCalendarID Payroll Calendar id for single object (required)
     * @return ApiResponse&lt;PayrollCalendars&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayrollCalendars> getPayrollCalendarWithHttpInfo(String xeroTenantId, UUID payrollCalendarID) throws ApiException {
        okhttp3.Call localVarCall = getPayrollCalendarValidateBeforeCall(xeroTenantId, payrollCalendarID, null);
        Type localVarReturnType = new TypeToken<PayrollCalendars>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves payroll calendar by using a unique payroll calendar ID (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payrollCalendarID Payroll Calendar id for single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayrollCalendarAsync(String xeroTenantId, UUID payrollCalendarID, final ApiCallback<PayrollCalendars> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayrollCalendarValidateBeforeCall(xeroTenantId, payrollCalendarID, _callback);
        Type localVarReturnType = new TypeToken<PayrollCalendars>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayrollCalendars
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayrollCalendarsCall(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/PayrollCalendars";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayrollCalendarsValidateBeforeCall(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPayrollCalendars(Async)");
        }

        return getPayrollCalendarsCall(xeroTenantId, ifModifiedSince, where, order, page, _callback);

    }

    /**
     * Retrieves payroll calendars
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     * @return PayrollCalendars
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public PayrollCalendars getPayrollCalendars(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page) throws ApiException {
        ApiResponse<PayrollCalendars> localVarResp = getPayrollCalendarsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page);
        return localVarResp.getData();
    }

    /**
     * Retrieves payroll calendars
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     * @return ApiResponse&lt;PayrollCalendars&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayrollCalendars> getPayrollCalendarsWithHttpInfo(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getPayrollCalendarsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, null);
        Type localVarReturnType = new TypeToken<PayrollCalendars>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves payroll calendars (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayrollCalendarsAsync(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback<PayrollCalendars> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayrollCalendarsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, _callback);
        Type localVarReturnType = new TypeToken<PayrollCalendars>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayslip
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payslipID Payslip id for single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayslipCall(String xeroTenantId, UUID payslipID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Payslip/{PayslipID}"
            .replace("{" + "PayslipID" + "}", localVarApiClient.escapeString(payslipID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayslipValidateBeforeCall(String xeroTenantId, UUID payslipID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getPayslip(Async)");
        }

        // verify the required parameter 'payslipID' is set
        if (payslipID == null) {
            throw new ApiException("Missing the required parameter 'payslipID' when calling getPayslip(Async)");
        }

        return getPayslipCall(xeroTenantId, payslipID, _callback);

    }

    /**
     * Retrieves for a payslip by a unique payslip id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payslipID Payslip id for single object (required)
     * @return PayslipObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public PayslipObject getPayslip(String xeroTenantId, UUID payslipID) throws ApiException {
        ApiResponse<PayslipObject> localVarResp = getPayslipWithHttpInfo(xeroTenantId, payslipID);
        return localVarResp.getData();
    }

    /**
     * Retrieves for a payslip by a unique payslip id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payslipID Payslip id for single object (required)
     * @return ApiResponse&lt;PayslipObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayslipObject> getPayslipWithHttpInfo(String xeroTenantId, UUID payslipID) throws ApiException {
        okhttp3.Call localVarCall = getPayslipValidateBeforeCall(xeroTenantId, payslipID, null);
        Type localVarReturnType = new TypeToken<PayslipObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves for a payslip by a unique payslip id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payslipID Payslip id for single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayslipAsync(String xeroTenantId, UUID payslipID, final ApiCallback<PayslipObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayslipValidateBeforeCall(xeroTenantId, payslipID, _callback);
        Type localVarReturnType = new TypeToken<PayslipObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSettings
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> payroll settings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettingsCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingsValidateBeforeCall(String xeroTenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getSettings(Async)");
        }

        return getSettingsCall(xeroTenantId, _callback);

    }

    /**
     * Retrieves payroll settings
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return SettingsObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> payroll settings </td><td>  -  </td></tr>
     </table>
     */
    public SettingsObject getSettings(String xeroTenantId) throws ApiException {
        ApiResponse<SettingsObject> localVarResp = getSettingsWithHttpInfo(xeroTenantId);
        return localVarResp.getData();
    }

    /**
     * Retrieves payroll settings
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @return ApiResponse&lt;SettingsObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> payroll settings </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SettingsObject> getSettingsWithHttpInfo(String xeroTenantId) throws ApiException {
        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(xeroTenantId, null);
        Type localVarReturnType = new TypeToken<SettingsObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves payroll settings (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> payroll settings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettingsAsync(String xeroTenantId, final ApiCallback<SettingsObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(xeroTenantId, _callback);
        Type localVarReturnType = new TypeToken<SettingsObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSuperfund
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param superFundID Superfund id for single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSuperfundCall(String xeroTenantId, UUID superFundID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Superfunds/{SuperFundID}"
            .replace("{" + "SuperFundID" + "}", localVarApiClient.escapeString(superFundID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSuperfundValidateBeforeCall(String xeroTenantId, UUID superFundID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getSuperfund(Async)");
        }

        // verify the required parameter 'superFundID' is set
        if (superFundID == null) {
            throw new ApiException("Missing the required parameter 'superFundID' when calling getSuperfund(Async)");
        }

        return getSuperfundCall(xeroTenantId, superFundID, _callback);

    }

    /**
     * Retrieves a superfund by using a unique superfund ID
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param superFundID Superfund id for single object (required)
     * @return SuperFunds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public SuperFunds getSuperfund(String xeroTenantId, UUID superFundID) throws ApiException {
        ApiResponse<SuperFunds> localVarResp = getSuperfundWithHttpInfo(xeroTenantId, superFundID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a superfund by using a unique superfund ID
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param superFundID Superfund id for single object (required)
     * @return ApiResponse&lt;SuperFunds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuperFunds> getSuperfundWithHttpInfo(String xeroTenantId, UUID superFundID) throws ApiException {
        okhttp3.Call localVarCall = getSuperfundValidateBeforeCall(xeroTenantId, superFundID, null);
        Type localVarReturnType = new TypeToken<SuperFunds>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a superfund by using a unique superfund ID (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param superFundID Superfund id for single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSuperfundAsync(String xeroTenantId, UUID superFundID, final ApiCallback<SuperFunds> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSuperfundValidateBeforeCall(xeroTenantId, superFundID, _callback);
        Type localVarReturnType = new TypeToken<SuperFunds>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSuperfundProducts
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ABN The ABN of the Regulated SuperFund (optional)
     * @param USI The USI of the Regulated SuperFund (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSuperfundProductsCall(String xeroTenantId, String ABN, String USI, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/SuperfundProducts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ABN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ABN", ABN));
        }

        if (USI != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("USI", USI));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSuperfundProductsValidateBeforeCall(String xeroTenantId, String ABN, String USI, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getSuperfundProducts(Async)");
        }

        return getSuperfundProductsCall(xeroTenantId, ABN, USI, _callback);

    }

    /**
     * Retrieves superfund products
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ABN The ABN of the Regulated SuperFund (optional)
     * @param USI The USI of the Regulated SuperFund (optional)
     * @return SuperFundProducts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public SuperFundProducts getSuperfundProducts(String xeroTenantId, String ABN, String USI) throws ApiException {
        ApiResponse<SuperFundProducts> localVarResp = getSuperfundProductsWithHttpInfo(xeroTenantId, ABN, USI);
        return localVarResp.getData();
    }

    /**
     * Retrieves superfund products
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ABN The ABN of the Regulated SuperFund (optional)
     * @param USI The USI of the Regulated SuperFund (optional)
     * @return ApiResponse&lt;SuperFundProducts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuperFundProducts> getSuperfundProductsWithHttpInfo(String xeroTenantId, String ABN, String USI) throws ApiException {
        okhttp3.Call localVarCall = getSuperfundProductsValidateBeforeCall(xeroTenantId, ABN, USI, null);
        Type localVarReturnType = new TypeToken<SuperFundProducts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves superfund products (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ABN The ABN of the Regulated SuperFund (optional)
     * @param USI The USI of the Regulated SuperFund (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSuperfundProductsAsync(String xeroTenantId, String ABN, String USI, final ApiCallback<SuperFundProducts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSuperfundProductsValidateBeforeCall(xeroTenantId, ABN, USI, _callback);
        Type localVarReturnType = new TypeToken<SuperFundProducts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSuperfunds
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 SuperFunds will be returned in a single API call (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSuperfundsCall(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Superfunds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSuperfundsValidateBeforeCall(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getSuperfunds(Async)");
        }

        return getSuperfundsCall(xeroTenantId, ifModifiedSince, where, order, page, _callback);

    }

    /**
     * Retrieves superfunds
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 SuperFunds will be returned in a single API call (optional)
     * @return SuperFunds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public SuperFunds getSuperfunds(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page) throws ApiException {
        ApiResponse<SuperFunds> localVarResp = getSuperfundsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page);
        return localVarResp.getData();
    }

    /**
     * Retrieves superfunds
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 SuperFunds will be returned in a single API call (optional)
     * @return ApiResponse&lt;SuperFunds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuperFunds> getSuperfundsWithHttpInfo(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getSuperfundsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, null);
        Type localVarReturnType = new TypeToken<SuperFunds>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves superfunds (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 SuperFunds will be returned in a single API call (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSuperfundsAsync(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback<SuperFunds> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSuperfundsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, _callback);
        Type localVarReturnType = new TypeToken<SuperFunds>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTimesheet
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param timesheetID Timesheet id for single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTimesheetCall(String xeroTenantId, UUID timesheetID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Timesheets/{TimesheetID}"
            .replace("{" + "TimesheetID" + "}", localVarApiClient.escapeString(timesheetID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimesheetValidateBeforeCall(String xeroTenantId, UUID timesheetID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getTimesheet(Async)");
        }

        // verify the required parameter 'timesheetID' is set
        if (timesheetID == null) {
            throw new ApiException("Missing the required parameter 'timesheetID' when calling getTimesheet(Async)");
        }

        return getTimesheetCall(xeroTenantId, timesheetID, _callback);

    }

    /**
     * Retrieves a timesheet by using a unique timesheet id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param timesheetID Timesheet id for single object (required)
     * @return TimesheetObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public TimesheetObject getTimesheet(String xeroTenantId, UUID timesheetID) throws ApiException {
        ApiResponse<TimesheetObject> localVarResp = getTimesheetWithHttpInfo(xeroTenantId, timesheetID);
        return localVarResp.getData();
    }

    /**
     * Retrieves a timesheet by using a unique timesheet id
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param timesheetID Timesheet id for single object (required)
     * @return ApiResponse&lt;TimesheetObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimesheetObject> getTimesheetWithHttpInfo(String xeroTenantId, UUID timesheetID) throws ApiException {
        okhttp3.Call localVarCall = getTimesheetValidateBeforeCall(xeroTenantId, timesheetID, null);
        Type localVarReturnType = new TypeToken<TimesheetObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a timesheet by using a unique timesheet id (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param timesheetID Timesheet id for single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTimesheetAsync(String xeroTenantId, UUID timesheetID, final ApiCallback<TimesheetObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimesheetValidateBeforeCall(xeroTenantId, timesheetID, _callback);
        Type localVarReturnType = new TypeToken<TimesheetObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTimesheets
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTimesheetsCall(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Timesheets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimesheetsValidateBeforeCall(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getTimesheets(Async)");
        }

        return getTimesheetsCall(xeroTenantId, ifModifiedSince, where, order, page, _callback);

    }

    /**
     * Retrieves timesheets
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call (optional)
     * @return Timesheets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public Timesheets getTimesheets(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page) throws ApiException {
        ApiResponse<Timesheets> localVarResp = getTimesheetsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page);
        return localVarResp.getData();
    }

    /**
     * Retrieves timesheets
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call (optional)
     * @return ApiResponse&lt;Timesheets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Timesheets> getTimesheetsWithHttpInfo(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getTimesheetsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, null);
        Type localVarReturnType = new TypeToken<Timesheets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves timesheets (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned (optional)
     * @param where Filter by an any element (optional)
     * @param order Order by an any element (optional)
     * @param page e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error for a bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTimesheetsAsync(String xeroTenantId, String ifModifiedSince, String where, String order, Integer page, final ApiCallback<Timesheets> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimesheetsValidateBeforeCall(xeroTenantId, ifModifiedSince, where, order, page, _callback);
        Type localVarReturnType = new TypeToken<Timesheets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEmployee
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employeeID Employee id for single object (required)
     * @param employee  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEmployeeCall(String xeroTenantId, UUID employeeID, List<Employee> employee, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employee;

        // create path and map variables
        String localVarPath = "/Employees/{EmployeeID}"
            .replace("{" + "EmployeeID" + "}", localVarApiClient.escapeString(employeeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmployeeValidateBeforeCall(String xeroTenantId, UUID employeeID, List<Employee> employee, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateEmployee(Async)");
        }

        // verify the required parameter 'employeeID' is set
        if (employeeID == null) {
            throw new ApiException("Missing the required parameter 'employeeID' when calling updateEmployee(Async)");
        }

        return updateEmployeeCall(xeroTenantId, employeeID, employee, _callback);

    }

    /**
     * Updates an employee&#39;s detail
     * Update properties on a single employee
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employeeID Employee id for single object (required)
     * @param employee  (optional)
     * @return Employees
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
     </table>
     */
    public Employees updateEmployee(String xeroTenantId, UUID employeeID, List<Employee> employee) throws ApiException {
        ApiResponse<Employees> localVarResp = updateEmployeeWithHttpInfo(xeroTenantId, employeeID, employee);
        return localVarResp.getData();
    }

    /**
     * Updates an employee&#39;s detail
     * Update properties on a single employee
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employeeID Employee id for single object (required)
     * @param employee  (optional)
     * @return ApiResponse&lt;Employees&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Employees> updateEmployeeWithHttpInfo(String xeroTenantId, UUID employeeID, List<Employee> employee) throws ApiException {
        okhttp3.Call localVarCall = updateEmployeeValidateBeforeCall(xeroTenantId, employeeID, employee, null);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an employee&#39;s detail (asynchronously)
     * Update properties on a single employee
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param employeeID Employee id for single object (required)
     * @param employee  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEmployeeAsync(String xeroTenantId, UUID employeeID, List<Employee> employee, final ApiCallback<Employees> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmployeeValidateBeforeCall(xeroTenantId, employeeID, employee, _callback);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLeaveApplication
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param leaveApplicationID Leave Application id for single object (required)
     * @param leaveApplication  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLeaveApplicationCall(String xeroTenantId, UUID leaveApplicationID, List<LeaveApplication> leaveApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leaveApplication;

        // create path and map variables
        String localVarPath = "/LeaveApplications/{LeaveApplicationID}"
            .replace("{" + "LeaveApplicationID" + "}", localVarApiClient.escapeString(leaveApplicationID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLeaveApplicationValidateBeforeCall(String xeroTenantId, UUID leaveApplicationID, List<LeaveApplication> leaveApplication, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateLeaveApplication(Async)");
        }

        // verify the required parameter 'leaveApplicationID' is set
        if (leaveApplicationID == null) {
            throw new ApiException("Missing the required parameter 'leaveApplicationID' when calling updateLeaveApplication(Async)");
        }

        // verify the required parameter 'leaveApplication' is set
        if (leaveApplication == null) {
            throw new ApiException("Missing the required parameter 'leaveApplication' when calling updateLeaveApplication(Async)");
        }

        return updateLeaveApplicationCall(xeroTenantId, leaveApplicationID, leaveApplication, _callback);

    }

    /**
     * Updates a specific leave application
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param leaveApplicationID Leave Application id for single object (required)
     * @param leaveApplication  (required)
     * @return LeaveApplications
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public LeaveApplications updateLeaveApplication(String xeroTenantId, UUID leaveApplicationID, List<LeaveApplication> leaveApplication) throws ApiException {
        ApiResponse<LeaveApplications> localVarResp = updateLeaveApplicationWithHttpInfo(xeroTenantId, leaveApplicationID, leaveApplication);
        return localVarResp.getData();
    }

    /**
     * Updates a specific leave application
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param leaveApplicationID Leave Application id for single object (required)
     * @param leaveApplication  (required)
     * @return ApiResponse&lt;LeaveApplications&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LeaveApplications> updateLeaveApplicationWithHttpInfo(String xeroTenantId, UUID leaveApplicationID, List<LeaveApplication> leaveApplication) throws ApiException {
        okhttp3.Call localVarCall = updateLeaveApplicationValidateBeforeCall(xeroTenantId, leaveApplicationID, leaveApplication, null);
        Type localVarReturnType = new TypeToken<LeaveApplications>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific leave application (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param leaveApplicationID Leave Application id for single object (required)
     * @param leaveApplication  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid - TODO </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLeaveApplicationAsync(String xeroTenantId, UUID leaveApplicationID, List<LeaveApplication> leaveApplication, final ApiCallback<LeaveApplications> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLeaveApplicationValidateBeforeCall(xeroTenantId, leaveApplicationID, leaveApplication, _callback);
        Type localVarReturnType = new TypeToken<LeaveApplications>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePayRun
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payRunID PayRun id for single object (required)
     * @param payRun  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePayRunCall(String xeroTenantId, UUID payRunID, List<PayRun> payRun, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payRun;

        // create path and map variables
        String localVarPath = "/PayRuns/{PayRunID}"
            .replace("{" + "PayRunID" + "}", localVarApiClient.escapeString(payRunID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePayRunValidateBeforeCall(String xeroTenantId, UUID payRunID, List<PayRun> payRun, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updatePayRun(Async)");
        }

        // verify the required parameter 'payRunID' is set
        if (payRunID == null) {
            throw new ApiException("Missing the required parameter 'payRunID' when calling updatePayRun(Async)");
        }

        return updatePayRunCall(xeroTenantId, payRunID, payRun, _callback);

    }

    /**
     * Updates a pay run
     * Update properties on a single PayRun
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payRunID PayRun id for single object (required)
     * @param payRun  (optional)
     * @return PayRuns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
     </table>
     */
    public PayRuns updatePayRun(String xeroTenantId, UUID payRunID, List<PayRun> payRun) throws ApiException {
        ApiResponse<PayRuns> localVarResp = updatePayRunWithHttpInfo(xeroTenantId, payRunID, payRun);
        return localVarResp.getData();
    }

    /**
     * Updates a pay run
     * Update properties on a single PayRun
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payRunID PayRun id for single object (required)
     * @param payRun  (optional)
     * @return ApiResponse&lt;PayRuns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayRuns> updatePayRunWithHttpInfo(String xeroTenantId, UUID payRunID, List<PayRun> payRun) throws ApiException {
        okhttp3.Call localVarCall = updatePayRunValidateBeforeCall(xeroTenantId, payRunID, payRun, null);
        Type localVarReturnType = new TypeToken<PayRuns>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a pay run (asynchronously)
     * Update properties on a single PayRun
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payRunID PayRun id for single object (required)
     * @param payRun  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePayRunAsync(String xeroTenantId, UUID payRunID, List<PayRun> payRun, final ApiCallback<PayRuns> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePayRunValidateBeforeCall(xeroTenantId, payRunID, payRun, _callback);
        Type localVarReturnType = new TypeToken<PayRuns>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePayslip
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payslipID Payslip id for single object (required)
     * @param payslipLines  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request - currently returns empty array for JSON </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePayslipCall(String xeroTenantId, UUID payslipID, List<PayslipLines> payslipLines, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payslipLines;

        // create path and map variables
        String localVarPath = "/Payslip/{PayslipID}"
            .replace("{" + "PayslipID" + "}", localVarApiClient.escapeString(payslipID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePayslipValidateBeforeCall(String xeroTenantId, UUID payslipID, List<PayslipLines> payslipLines, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updatePayslip(Async)");
        }

        // verify the required parameter 'payslipID' is set
        if (payslipID == null) {
            throw new ApiException("Missing the required parameter 'payslipID' when calling updatePayslip(Async)");
        }

        return updatePayslipCall(xeroTenantId, payslipID, payslipLines, _callback);

    }

    /**
     * Updates a payslip
     * Update lines on a single payslips
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payslipID Payslip id for single object (required)
     * @param payslipLines  (optional)
     * @return Payslips
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request - currently returns empty array for JSON </td><td>  -  </td></tr>
     </table>
     */
    public Payslips updatePayslip(String xeroTenantId, UUID payslipID, List<PayslipLines> payslipLines) throws ApiException {
        ApiResponse<Payslips> localVarResp = updatePayslipWithHttpInfo(xeroTenantId, payslipID, payslipLines);
        return localVarResp.getData();
    }

    /**
     * Updates a payslip
     * Update lines on a single payslips
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payslipID Payslip id for single object (required)
     * @param payslipLines  (optional)
     * @return ApiResponse&lt;Payslips&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request - currently returns empty array for JSON </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Payslips> updatePayslipWithHttpInfo(String xeroTenantId, UUID payslipID, List<PayslipLines> payslipLines) throws ApiException {
        okhttp3.Call localVarCall = updatePayslipValidateBeforeCall(xeroTenantId, payslipID, payslipLines, null);
        Type localVarReturnType = new TypeToken<Payslips>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a payslip (asynchronously)
     * Update lines on a single payslips
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param payslipID Payslip id for single object (required)
     * @param payslipLines  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request - currently returns empty array for JSON </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePayslipAsync(String xeroTenantId, UUID payslipID, List<PayslipLines> payslipLines, final ApiCallback<Payslips> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePayslipValidateBeforeCall(xeroTenantId, payslipID, payslipLines, _callback);
        Type localVarReturnType = new TypeToken<Payslips>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSuperfund
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param superFundID Superfund id for single object (required)
     * @param superFund  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSuperfundCall(String xeroTenantId, UUID superFundID, List<SuperFund> superFund, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = superFund;

        // create path and map variables
        String localVarPath = "/Superfunds/{SuperFundID}"
            .replace("{" + "SuperFundID" + "}", localVarApiClient.escapeString(superFundID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSuperfundValidateBeforeCall(String xeroTenantId, UUID superFundID, List<SuperFund> superFund, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateSuperfund(Async)");
        }

        // verify the required parameter 'superFundID' is set
        if (superFundID == null) {
            throw new ApiException("Missing the required parameter 'superFundID' when calling updateSuperfund(Async)");
        }

        return updateSuperfundCall(xeroTenantId, superFundID, superFund, _callback);

    }

    /**
     * Updates a superfund
     * Update properties on a single Superfund
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param superFundID Superfund id for single object (required)
     * @param superFund  (optional)
     * @return SuperFunds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
     </table>
     */
    public SuperFunds updateSuperfund(String xeroTenantId, UUID superFundID, List<SuperFund> superFund) throws ApiException {
        ApiResponse<SuperFunds> localVarResp = updateSuperfundWithHttpInfo(xeroTenantId, superFundID, superFund);
        return localVarResp.getData();
    }

    /**
     * Updates a superfund
     * Update properties on a single Superfund
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param superFundID Superfund id for single object (required)
     * @param superFund  (optional)
     * @return ApiResponse&lt;SuperFunds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuperFunds> updateSuperfundWithHttpInfo(String xeroTenantId, UUID superFundID, List<SuperFund> superFund) throws ApiException {
        okhttp3.Call localVarCall = updateSuperfundValidateBeforeCall(xeroTenantId, superFundID, superFund, null);
        Type localVarReturnType = new TypeToken<SuperFunds>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a superfund (asynchronously)
     * Update properties on a single Superfund
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param superFundID Superfund id for single object (required)
     * @param superFund  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSuperfundAsync(String xeroTenantId, UUID superFundID, List<SuperFund> superFund, final ApiCallback<SuperFunds> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSuperfundValidateBeforeCall(xeroTenantId, superFundID, superFund, _callback);
        Type localVarReturnType = new TypeToken<SuperFunds>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTimesheet
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param timesheetID Timesheet id for single object (required)
     * @param timesheet  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTimesheetCall(String xeroTenantId, UUID timesheetID, List<Timesheet> timesheet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timesheet;

        // create path and map variables
        String localVarPath = "/Timesheets/{TimesheetID}"
            .replace("{" + "TimesheetID" + "}", localVarApiClient.escapeString(timesheetID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTimesheetValidateBeforeCall(String xeroTenantId, UUID timesheetID, List<Timesheet> timesheet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling updateTimesheet(Async)");
        }

        // verify the required parameter 'timesheetID' is set
        if (timesheetID == null) {
            throw new ApiException("Missing the required parameter 'timesheetID' when calling updateTimesheet(Async)");
        }

        return updateTimesheetCall(xeroTenantId, timesheetID, timesheet, _callback);

    }

    /**
     * Updates a timesheet
     * Update properties on a single timesheet
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param timesheetID Timesheet id for single object (required)
     * @param timesheet  (optional)
     * @return Timesheets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
     </table>
     */
    public Timesheets updateTimesheet(String xeroTenantId, UUID timesheetID, List<Timesheet> timesheet) throws ApiException {
        ApiResponse<Timesheets> localVarResp = updateTimesheetWithHttpInfo(xeroTenantId, timesheetID, timesheet);
        return localVarResp.getData();
    }

    /**
     * Updates a timesheet
     * Update properties on a single timesheet
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param timesheetID Timesheet id for single object (required)
     * @param timesheet  (optional)
     * @return ApiResponse&lt;Timesheets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Timesheets> updateTimesheetWithHttpInfo(String xeroTenantId, UUID timesheetID, List<Timesheet> timesheet) throws ApiException {
        okhttp3.Call localVarCall = updateTimesheetValidateBeforeCall(xeroTenantId, timesheetID, timesheet, null);
        Type localVarReturnType = new TypeToken<Timesheets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a timesheet (asynchronously)
     * Update properties on a single timesheet
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param timesheetID Timesheet id for single object (required)
     * @param timesheet  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTimesheetAsync(String xeroTenantId, UUID timesheetID, List<Timesheet> timesheet, final ApiCallback<Timesheets> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTimesheetValidateBeforeCall(xeroTenantId, timesheetID, timesheet, _callback);
        Type localVarReturnType = new TypeToken<Timesheets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
