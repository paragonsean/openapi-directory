/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * See Account Types
 */
@JsonAdapter(AccountType.Adapter.class)
public enum AccountType {
  
  BANK("BANK"),
  
  CURRENT("CURRENT"),
  
  CURRLIAB("CURRLIAB"),
  
  DEPRECIATN("DEPRECIATN"),
  
  DIRECTCOSTS("DIRECTCOSTS"),
  
  EQUITY("EQUITY"),
  
  EXPENSE("EXPENSE"),
  
  FIXED("FIXED"),
  
  INVENTORY("INVENTORY"),
  
  LIABILITY("LIABILITY"),
  
  NONCURRENT("NONCURRENT"),
  
  OTHERINCOME("OTHERINCOME"),
  
  OVERHEADS("OVERHEADS"),
  
  PREPAYMENT("PREPAYMENT"),
  
  REVENUE("REVENUE"),
  
  SALES("SALES"),
  
  TERMLIAB("TERMLIAB"),
  
  PAYGLIABILITY("PAYGLIABILITY"),
  
  PAYG("PAYG"),
  
  SUPERANNUATIONEXPENSE("SUPERANNUATIONEXPENSE"),
  
  SUPERANNUATIONLIABILITY("SUPERANNUATIONLIABILITY"),
  
  WAGESEXPENSE("WAGESEXPENSE"),
  
  WAGESPAYABLELIABILITY("WAGESPAYABLELIABILITY");

  private String value;

  AccountType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static AccountType fromValue(String value) {
    for (AccountType b : AccountType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<AccountType> {
    @Override
    public void write(final JsonWriter jsonWriter, final AccountType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public AccountType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return AccountType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    AccountType.fromValue(value);
  }
}

