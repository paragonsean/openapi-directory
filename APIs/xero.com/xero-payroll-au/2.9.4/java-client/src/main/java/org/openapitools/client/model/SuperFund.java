/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.SuperFundType;
import org.openapitools.client.model.ValidationError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SuperFund
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:28.765088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SuperFund {
  public static final String SERIALIZED_NAME_A_B_N = "ABN";
  @SerializedName(SERIALIZED_NAME_A_B_N)
  private String ABN;

  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "AccountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "AccountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_B_S_B = "BSB";
  @SerializedName(SERIALIZED_NAME_B_S_B)
  private String BSB;

  public static final String SERIALIZED_NAME_ELECTRONIC_SERVICE_ADDRESS = "ElectronicServiceAddress";
  @SerializedName(SERIALIZED_NAME_ELECTRONIC_SERVICE_ADDRESS)
  private String electronicServiceAddress;

  public static final String SERIALIZED_NAME_EMPLOYER_NUMBER = "EmployerNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_NUMBER)
  private String employerNumber;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_S_P_I_N = "SPIN";
  @SerializedName(SERIALIZED_NAME_S_P_I_N)
  private String SPIN;

  public static final String SERIALIZED_NAME_SUPER_FUND_I_D = "SuperFundID";
  @SerializedName(SERIALIZED_NAME_SUPER_FUND_I_D)
  private UUID superFundID;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private SuperFundType type;

  public static final String SERIALIZED_NAME_U_S_I = "USI";
  @SerializedName(SERIALIZED_NAME_U_S_I)
  private String USI;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "ValidationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<ValidationError> validationErrors = new ArrayList<>();

  public SuperFund() {
  }

  public SuperFund(
     String updatedDateUTC
  ) {
    this();
    this.updatedDateUTC = updatedDateUTC;
  }

  public SuperFund ABN(String ABN) {
    this.ABN = ABN;
    return this;
  }

  /**
   * ABN of the self managed super fund
   * @return ABN
   */
  @javax.annotation.Nullable
  public String getABN() {
    return ABN;
  }

  public void setABN(String ABN) {
    this.ABN = ABN;
  }


  public SuperFund accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * The account name for the self managed super fund.
   * @return accountName
   */
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public SuperFund accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * The account number for the self managed super fund.
   * @return accountNumber
   */
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public SuperFund BSB(String BSB) {
    this.BSB = BSB;
    return this;
  }

  /**
   * BSB of the self managed super fund
   * @return BSB
   */
  @javax.annotation.Nullable
  public String getBSB() {
    return BSB;
  }

  public void setBSB(String BSB) {
    this.BSB = BSB;
  }


  public SuperFund electronicServiceAddress(String electronicServiceAddress) {
    this.electronicServiceAddress = electronicServiceAddress;
    return this;
  }

  /**
   * The electronic service address for the self managed super fund.
   * @return electronicServiceAddress
   */
  @javax.annotation.Nullable
  public String getElectronicServiceAddress() {
    return electronicServiceAddress;
  }

  public void setElectronicServiceAddress(String electronicServiceAddress) {
    this.electronicServiceAddress = electronicServiceAddress;
  }


  public SuperFund employerNumber(String employerNumber) {
    this.employerNumber = employerNumber;
    return this;
  }

  /**
   * Some funds assign a unique number to each employer
   * @return employerNumber
   */
  @javax.annotation.Nullable
  public String getEmployerNumber() {
    return employerNumber;
  }

  public void setEmployerNumber(String employerNumber) {
    this.employerNumber = employerNumber;
  }


  public SuperFund name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the super fund
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SuperFund SPIN(String SPIN) {
    this.SPIN = SPIN;
    return this;
  }

  /**
   * The SPIN of the Regulated SuperFund. This field has been deprecated. It will only be present for legacy superfunds. New superfunds will not have a SPIN value. The USI field should be used instead of SPIN.
   * @return SPIN
   */
  @javax.annotation.Nullable
  public String getSPIN() {
    return SPIN;
  }

  public void setSPIN(String SPIN) {
    this.SPIN = SPIN;
  }


  public SuperFund superFundID(UUID superFundID) {
    this.superFundID = superFundID;
    return this;
  }

  /**
   * Xero identifier for a super fund
   * @return superFundID
   */
  @javax.annotation.Nullable
  public UUID getSuperFundID() {
    return superFundID;
  }

  public void setSuperFundID(UUID superFundID) {
    this.superFundID = superFundID;
  }


  public SuperFund type(SuperFundType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public SuperFundType getType() {
    return type;
  }

  public void setType(SuperFundType type) {
    this.type = type;
  }


  public SuperFund USI(String USI) {
    this.USI = USI;
    return this;
  }

  /**
   * The USI of the Regulated SuperFund
   * @return USI
   */
  @javax.annotation.Nullable
  public String getUSI() {
    return USI;
  }

  public void setUSI(String USI) {
    this.USI = USI;
  }


  /**
   * Last modified timestamp
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }



  public SuperFund validationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public SuperFund addValidationErrorsItem(ValidationError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Displays array of validation error messages from the API
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<ValidationError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuperFund superFund = (SuperFund) o;
    return Objects.equals(this.ABN, superFund.ABN) &&
        Objects.equals(this.accountName, superFund.accountName) &&
        Objects.equals(this.accountNumber, superFund.accountNumber) &&
        Objects.equals(this.BSB, superFund.BSB) &&
        Objects.equals(this.electronicServiceAddress, superFund.electronicServiceAddress) &&
        Objects.equals(this.employerNumber, superFund.employerNumber) &&
        Objects.equals(this.name, superFund.name) &&
        Objects.equals(this.SPIN, superFund.SPIN) &&
        Objects.equals(this.superFundID, superFund.superFundID) &&
        Objects.equals(this.type, superFund.type) &&
        Objects.equals(this.USI, superFund.USI) &&
        Objects.equals(this.updatedDateUTC, superFund.updatedDateUTC) &&
        Objects.equals(this.validationErrors, superFund.validationErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ABN, accountName, accountNumber, BSB, electronicServiceAddress, employerNumber, name, SPIN, superFundID, type, USI, updatedDateUTC, validationErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuperFund {\n");
    sb.append("    ABN: ").append(toIndentedString(ABN)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    BSB: ").append(toIndentedString(BSB)).append("\n");
    sb.append("    electronicServiceAddress: ").append(toIndentedString(electronicServiceAddress)).append("\n");
    sb.append("    employerNumber: ").append(toIndentedString(employerNumber)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    SPIN: ").append(toIndentedString(SPIN)).append("\n");
    sb.append("    superFundID: ").append(toIndentedString(superFundID)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    USI: ").append(toIndentedString(USI)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ABN");
    openapiFields.add("AccountName");
    openapiFields.add("AccountNumber");
    openapiFields.add("BSB");
    openapiFields.add("ElectronicServiceAddress");
    openapiFields.add("EmployerNumber");
    openapiFields.add("Name");
    openapiFields.add("SPIN");
    openapiFields.add("SuperFundID");
    openapiFields.add("Type");
    openapiFields.add("USI");
    openapiFields.add("UpdatedDateUTC");
    openapiFields.add("ValidationErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuperFund
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuperFund.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuperFund is not found in the empty JSON string", SuperFund.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuperFund.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuperFund` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SuperFund.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ABN") != null && !jsonObj.get("ABN").isJsonNull()) && !jsonObj.get("ABN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ABN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ABN").toString()));
      }
      if ((jsonObj.get("AccountName") != null && !jsonObj.get("AccountName").isJsonNull()) && !jsonObj.get("AccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountName").toString()));
      }
      if ((jsonObj.get("AccountNumber") != null && !jsonObj.get("AccountNumber").isJsonNull()) && !jsonObj.get("AccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountNumber").toString()));
      }
      if ((jsonObj.get("BSB") != null && !jsonObj.get("BSB").isJsonNull()) && !jsonObj.get("BSB").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BSB` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BSB").toString()));
      }
      if ((jsonObj.get("ElectronicServiceAddress") != null && !jsonObj.get("ElectronicServiceAddress").isJsonNull()) && !jsonObj.get("ElectronicServiceAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ElectronicServiceAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ElectronicServiceAddress").toString()));
      }
      if ((jsonObj.get("EmployerNumber") != null && !jsonObj.get("EmployerNumber").isJsonNull()) && !jsonObj.get("EmployerNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmployerNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmployerNumber").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("SPIN") != null && !jsonObj.get("SPIN").isJsonNull()) && !jsonObj.get("SPIN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SPIN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SPIN").toString()));
      }
      if ((jsonObj.get("SuperFundID") != null && !jsonObj.get("SuperFundID").isJsonNull()) && !jsonObj.get("SuperFundID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SuperFundID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SuperFundID").toString()));
      }
      // validate the required field `Type`
      SuperFundType.validateJsonElement(jsonObj.get("Type"));
      if ((jsonObj.get("USI") != null && !jsonObj.get("USI").isJsonNull()) && !jsonObj.get("USI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `USI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("USI").toString()));
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
      if (jsonObj.get("ValidationErrors") != null && !jsonObj.get("ValidationErrors").isJsonNull()) {
        JsonArray jsonArrayvalidationErrors = jsonObj.getAsJsonArray("ValidationErrors");
        if (jsonArrayvalidationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ValidationErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ValidationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("ValidationErrors").toString()));
          }

          // validate the optional field `ValidationErrors` (array)
          for (int i = 0; i < jsonArrayvalidationErrors.size(); i++) {
            ValidationError.validateJsonElement(jsonArrayvalidationErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuperFund.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuperFund' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuperFund> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuperFund.class));

       return (TypeAdapter<T>) new TypeAdapter<SuperFund>() {
           @Override
           public void write(JsonWriter out, SuperFund value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuperFund read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuperFund given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuperFund
   * @throws IOException if the JSON string is invalid with respect to SuperFund
   */
  public static SuperFund fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuperFund.class);
  }

  /**
   * Convert an instance of SuperFund to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

