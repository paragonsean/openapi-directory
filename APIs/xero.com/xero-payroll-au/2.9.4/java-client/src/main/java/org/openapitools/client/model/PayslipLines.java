/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeductionLine;
import org.openapitools.client.model.EarningsLine;
import org.openapitools.client.model.LeaveAccrualLine;
import org.openapitools.client.model.LeaveEarningsLine;
import org.openapitools.client.model.ReimbursementLine;
import org.openapitools.client.model.SuperannuationLine;
import org.openapitools.client.model.TaxLine;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PayslipLines
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:28.765088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PayslipLines {
  public static final String SERIALIZED_NAME_DEDUCTION_LINES = "DeductionLines";
  @SerializedName(SERIALIZED_NAME_DEDUCTION_LINES)
  private List<DeductionLine> deductionLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_EARNINGS_LINES = "EarningsLines";
  @SerializedName(SERIALIZED_NAME_EARNINGS_LINES)
  private List<EarningsLine> earningsLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEAVE_ACCRUAL_LINES = "LeaveAccrualLines";
  @SerializedName(SERIALIZED_NAME_LEAVE_ACCRUAL_LINES)
  private List<LeaveAccrualLine> leaveAccrualLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEAVE_EARNINGS_LINES = "LeaveEarningsLines";
  @SerializedName(SERIALIZED_NAME_LEAVE_EARNINGS_LINES)
  private List<LeaveEarningsLine> leaveEarningsLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_REIMBURSEMENT_LINES = "ReimbursementLines";
  @SerializedName(SERIALIZED_NAME_REIMBURSEMENT_LINES)
  private List<ReimbursementLine> reimbursementLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPERANNUATION_LINES = "SuperannuationLines";
  @SerializedName(SERIALIZED_NAME_SUPERANNUATION_LINES)
  private List<SuperannuationLine> superannuationLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAX_LINES = "TaxLines";
  @SerializedName(SERIALIZED_NAME_TAX_LINES)
  private List<TaxLine> taxLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMESHEET_EARNINGS_LINES = "TimesheetEarningsLines";
  @SerializedName(SERIALIZED_NAME_TIMESHEET_EARNINGS_LINES)
  private List<EarningsLine> timesheetEarningsLines = new ArrayList<>();

  public PayslipLines() {
  }

  public PayslipLines deductionLines(List<DeductionLine> deductionLines) {
    this.deductionLines = deductionLines;
    return this;
  }

  public PayslipLines addDeductionLinesItem(DeductionLine deductionLinesItem) {
    if (this.deductionLines == null) {
      this.deductionLines = new ArrayList<>();
    }
    this.deductionLines.add(deductionLinesItem);
    return this;
  }

  /**
   * Get deductionLines
   * @return deductionLines
   */
  @javax.annotation.Nullable
  public List<DeductionLine> getDeductionLines() {
    return deductionLines;
  }

  public void setDeductionLines(List<DeductionLine> deductionLines) {
    this.deductionLines = deductionLines;
  }


  public PayslipLines earningsLines(List<EarningsLine> earningsLines) {
    this.earningsLines = earningsLines;
    return this;
  }

  public PayslipLines addEarningsLinesItem(EarningsLine earningsLinesItem) {
    if (this.earningsLines == null) {
      this.earningsLines = new ArrayList<>();
    }
    this.earningsLines.add(earningsLinesItem);
    return this;
  }

  /**
   * Get earningsLines
   * @return earningsLines
   */
  @javax.annotation.Nullable
  public List<EarningsLine> getEarningsLines() {
    return earningsLines;
  }

  public void setEarningsLines(List<EarningsLine> earningsLines) {
    this.earningsLines = earningsLines;
  }


  public PayslipLines leaveAccrualLines(List<LeaveAccrualLine> leaveAccrualLines) {
    this.leaveAccrualLines = leaveAccrualLines;
    return this;
  }

  public PayslipLines addLeaveAccrualLinesItem(LeaveAccrualLine leaveAccrualLinesItem) {
    if (this.leaveAccrualLines == null) {
      this.leaveAccrualLines = new ArrayList<>();
    }
    this.leaveAccrualLines.add(leaveAccrualLinesItem);
    return this;
  }

  /**
   * Get leaveAccrualLines
   * @return leaveAccrualLines
   */
  @javax.annotation.Nullable
  public List<LeaveAccrualLine> getLeaveAccrualLines() {
    return leaveAccrualLines;
  }

  public void setLeaveAccrualLines(List<LeaveAccrualLine> leaveAccrualLines) {
    this.leaveAccrualLines = leaveAccrualLines;
  }


  public PayslipLines leaveEarningsLines(List<LeaveEarningsLine> leaveEarningsLines) {
    this.leaveEarningsLines = leaveEarningsLines;
    return this;
  }

  public PayslipLines addLeaveEarningsLinesItem(LeaveEarningsLine leaveEarningsLinesItem) {
    if (this.leaveEarningsLines == null) {
      this.leaveEarningsLines = new ArrayList<>();
    }
    this.leaveEarningsLines.add(leaveEarningsLinesItem);
    return this;
  }

  /**
   * Get leaveEarningsLines
   * @return leaveEarningsLines
   */
  @javax.annotation.Nullable
  public List<LeaveEarningsLine> getLeaveEarningsLines() {
    return leaveEarningsLines;
  }

  public void setLeaveEarningsLines(List<LeaveEarningsLine> leaveEarningsLines) {
    this.leaveEarningsLines = leaveEarningsLines;
  }


  public PayslipLines reimbursementLines(List<ReimbursementLine> reimbursementLines) {
    this.reimbursementLines = reimbursementLines;
    return this;
  }

  public PayslipLines addReimbursementLinesItem(ReimbursementLine reimbursementLinesItem) {
    if (this.reimbursementLines == null) {
      this.reimbursementLines = new ArrayList<>();
    }
    this.reimbursementLines.add(reimbursementLinesItem);
    return this;
  }

  /**
   * Get reimbursementLines
   * @return reimbursementLines
   */
  @javax.annotation.Nullable
  public List<ReimbursementLine> getReimbursementLines() {
    return reimbursementLines;
  }

  public void setReimbursementLines(List<ReimbursementLine> reimbursementLines) {
    this.reimbursementLines = reimbursementLines;
  }


  public PayslipLines superannuationLines(List<SuperannuationLine> superannuationLines) {
    this.superannuationLines = superannuationLines;
    return this;
  }

  public PayslipLines addSuperannuationLinesItem(SuperannuationLine superannuationLinesItem) {
    if (this.superannuationLines == null) {
      this.superannuationLines = new ArrayList<>();
    }
    this.superannuationLines.add(superannuationLinesItem);
    return this;
  }

  /**
   * Get superannuationLines
   * @return superannuationLines
   */
  @javax.annotation.Nullable
  public List<SuperannuationLine> getSuperannuationLines() {
    return superannuationLines;
  }

  public void setSuperannuationLines(List<SuperannuationLine> superannuationLines) {
    this.superannuationLines = superannuationLines;
  }


  public PayslipLines taxLines(List<TaxLine> taxLines) {
    this.taxLines = taxLines;
    return this;
  }

  public PayslipLines addTaxLinesItem(TaxLine taxLinesItem) {
    if (this.taxLines == null) {
      this.taxLines = new ArrayList<>();
    }
    this.taxLines.add(taxLinesItem);
    return this;
  }

  /**
   * Get taxLines
   * @return taxLines
   */
  @javax.annotation.Nullable
  public List<TaxLine> getTaxLines() {
    return taxLines;
  }

  public void setTaxLines(List<TaxLine> taxLines) {
    this.taxLines = taxLines;
  }


  public PayslipLines timesheetEarningsLines(List<EarningsLine> timesheetEarningsLines) {
    this.timesheetEarningsLines = timesheetEarningsLines;
    return this;
  }

  public PayslipLines addTimesheetEarningsLinesItem(EarningsLine timesheetEarningsLinesItem) {
    if (this.timesheetEarningsLines == null) {
      this.timesheetEarningsLines = new ArrayList<>();
    }
    this.timesheetEarningsLines.add(timesheetEarningsLinesItem);
    return this;
  }

  /**
   * Get timesheetEarningsLines
   * @return timesheetEarningsLines
   */
  @javax.annotation.Nullable
  public List<EarningsLine> getTimesheetEarningsLines() {
    return timesheetEarningsLines;
  }

  public void setTimesheetEarningsLines(List<EarningsLine> timesheetEarningsLines) {
    this.timesheetEarningsLines = timesheetEarningsLines;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayslipLines payslipLines = (PayslipLines) o;
    return Objects.equals(this.deductionLines, payslipLines.deductionLines) &&
        Objects.equals(this.earningsLines, payslipLines.earningsLines) &&
        Objects.equals(this.leaveAccrualLines, payslipLines.leaveAccrualLines) &&
        Objects.equals(this.leaveEarningsLines, payslipLines.leaveEarningsLines) &&
        Objects.equals(this.reimbursementLines, payslipLines.reimbursementLines) &&
        Objects.equals(this.superannuationLines, payslipLines.superannuationLines) &&
        Objects.equals(this.taxLines, payslipLines.taxLines) &&
        Objects.equals(this.timesheetEarningsLines, payslipLines.timesheetEarningsLines);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deductionLines, earningsLines, leaveAccrualLines, leaveEarningsLines, reimbursementLines, superannuationLines, taxLines, timesheetEarningsLines);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayslipLines {\n");
    sb.append("    deductionLines: ").append(toIndentedString(deductionLines)).append("\n");
    sb.append("    earningsLines: ").append(toIndentedString(earningsLines)).append("\n");
    sb.append("    leaveAccrualLines: ").append(toIndentedString(leaveAccrualLines)).append("\n");
    sb.append("    leaveEarningsLines: ").append(toIndentedString(leaveEarningsLines)).append("\n");
    sb.append("    reimbursementLines: ").append(toIndentedString(reimbursementLines)).append("\n");
    sb.append("    superannuationLines: ").append(toIndentedString(superannuationLines)).append("\n");
    sb.append("    taxLines: ").append(toIndentedString(taxLines)).append("\n");
    sb.append("    timesheetEarningsLines: ").append(toIndentedString(timesheetEarningsLines)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeductionLines");
    openapiFields.add("EarningsLines");
    openapiFields.add("LeaveAccrualLines");
    openapiFields.add("LeaveEarningsLines");
    openapiFields.add("ReimbursementLines");
    openapiFields.add("SuperannuationLines");
    openapiFields.add("TaxLines");
    openapiFields.add("TimesheetEarningsLines");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PayslipLines
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PayslipLines.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayslipLines is not found in the empty JSON string", PayslipLines.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PayslipLines.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PayslipLines` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("DeductionLines") != null && !jsonObj.get("DeductionLines").isJsonNull()) {
        JsonArray jsonArraydeductionLines = jsonObj.getAsJsonArray("DeductionLines");
        if (jsonArraydeductionLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DeductionLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DeductionLines` to be an array in the JSON string but got `%s`", jsonObj.get("DeductionLines").toString()));
          }

          // validate the optional field `DeductionLines` (array)
          for (int i = 0; i < jsonArraydeductionLines.size(); i++) {
            DeductionLine.validateJsonElement(jsonArraydeductionLines.get(i));
          };
        }
      }
      if (jsonObj.get("EarningsLines") != null && !jsonObj.get("EarningsLines").isJsonNull()) {
        JsonArray jsonArrayearningsLines = jsonObj.getAsJsonArray("EarningsLines");
        if (jsonArrayearningsLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("EarningsLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `EarningsLines` to be an array in the JSON string but got `%s`", jsonObj.get("EarningsLines").toString()));
          }

          // validate the optional field `EarningsLines` (array)
          for (int i = 0; i < jsonArrayearningsLines.size(); i++) {
            EarningsLine.validateJsonElement(jsonArrayearningsLines.get(i));
          };
        }
      }
      if (jsonObj.get("LeaveAccrualLines") != null && !jsonObj.get("LeaveAccrualLines").isJsonNull()) {
        JsonArray jsonArrayleaveAccrualLines = jsonObj.getAsJsonArray("LeaveAccrualLines");
        if (jsonArrayleaveAccrualLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LeaveAccrualLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LeaveAccrualLines` to be an array in the JSON string but got `%s`", jsonObj.get("LeaveAccrualLines").toString()));
          }

          // validate the optional field `LeaveAccrualLines` (array)
          for (int i = 0; i < jsonArrayleaveAccrualLines.size(); i++) {
            LeaveAccrualLine.validateJsonElement(jsonArrayleaveAccrualLines.get(i));
          };
        }
      }
      if (jsonObj.get("LeaveEarningsLines") != null && !jsonObj.get("LeaveEarningsLines").isJsonNull()) {
        JsonArray jsonArrayleaveEarningsLines = jsonObj.getAsJsonArray("LeaveEarningsLines");
        if (jsonArrayleaveEarningsLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LeaveEarningsLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LeaveEarningsLines` to be an array in the JSON string but got `%s`", jsonObj.get("LeaveEarningsLines").toString()));
          }

          // validate the optional field `LeaveEarningsLines` (array)
          for (int i = 0; i < jsonArrayleaveEarningsLines.size(); i++) {
            LeaveEarningsLine.validateJsonElement(jsonArrayleaveEarningsLines.get(i));
          };
        }
      }
      if (jsonObj.get("ReimbursementLines") != null && !jsonObj.get("ReimbursementLines").isJsonNull()) {
        JsonArray jsonArrayreimbursementLines = jsonObj.getAsJsonArray("ReimbursementLines");
        if (jsonArrayreimbursementLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ReimbursementLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ReimbursementLines` to be an array in the JSON string but got `%s`", jsonObj.get("ReimbursementLines").toString()));
          }

          // validate the optional field `ReimbursementLines` (array)
          for (int i = 0; i < jsonArrayreimbursementLines.size(); i++) {
            ReimbursementLine.validateJsonElement(jsonArrayreimbursementLines.get(i));
          };
        }
      }
      if (jsonObj.get("SuperannuationLines") != null && !jsonObj.get("SuperannuationLines").isJsonNull()) {
        JsonArray jsonArraysuperannuationLines = jsonObj.getAsJsonArray("SuperannuationLines");
        if (jsonArraysuperannuationLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SuperannuationLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SuperannuationLines` to be an array in the JSON string but got `%s`", jsonObj.get("SuperannuationLines").toString()));
          }

          // validate the optional field `SuperannuationLines` (array)
          for (int i = 0; i < jsonArraysuperannuationLines.size(); i++) {
            SuperannuationLine.validateJsonElement(jsonArraysuperannuationLines.get(i));
          };
        }
      }
      if (jsonObj.get("TaxLines") != null && !jsonObj.get("TaxLines").isJsonNull()) {
        JsonArray jsonArraytaxLines = jsonObj.getAsJsonArray("TaxLines");
        if (jsonArraytaxLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TaxLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TaxLines` to be an array in the JSON string but got `%s`", jsonObj.get("TaxLines").toString()));
          }

          // validate the optional field `TaxLines` (array)
          for (int i = 0; i < jsonArraytaxLines.size(); i++) {
            TaxLine.validateJsonElement(jsonArraytaxLines.get(i));
          };
        }
      }
      if (jsonObj.get("TimesheetEarningsLines") != null && !jsonObj.get("TimesheetEarningsLines").isJsonNull()) {
        JsonArray jsonArraytimesheetEarningsLines = jsonObj.getAsJsonArray("TimesheetEarningsLines");
        if (jsonArraytimesheetEarningsLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TimesheetEarningsLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TimesheetEarningsLines` to be an array in the JSON string but got `%s`", jsonObj.get("TimesheetEarningsLines").toString()));
          }

          // validate the optional field `TimesheetEarningsLines` (array)
          for (int i = 0; i < jsonArraytimesheetEarningsLines.size(); i++) {
            EarningsLine.validateJsonElement(jsonArraytimesheetEarningsLines.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayslipLines.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayslipLines' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayslipLines> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayslipLines.class));

       return (TypeAdapter<T>) new TypeAdapter<PayslipLines>() {
           @Override
           public void write(JsonWriter out, PayslipLines value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PayslipLines read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PayslipLines given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PayslipLines
   * @throws IOException if the JSON string is invalid with respect to PayslipLines
   */
  public static PayslipLines fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayslipLines.class);
  }

  /**
   * Convert an instance of PayslipLines to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

