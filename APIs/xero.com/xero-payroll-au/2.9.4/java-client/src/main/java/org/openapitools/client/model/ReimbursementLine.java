/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReimbursementLine
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:28.765088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReimbursementLine {
  public static final String SERIALIZED_NAME_AMOUNT = "Amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPENSE_ACCOUNT = "ExpenseAccount";
  @SerializedName(SERIALIZED_NAME_EXPENSE_ACCOUNT)
  private String expenseAccount;

  public static final String SERIALIZED_NAME_REIMBURSEMENT_TYPE_I_D = "ReimbursementTypeID";
  @SerializedName(SERIALIZED_NAME_REIMBURSEMENT_TYPE_I_D)
  private UUID reimbursementTypeID;

  public ReimbursementLine() {
  }

  public ReimbursementLine amount(Double amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Reimbursement type amount
   * @return amount
   */
  @javax.annotation.Nullable
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }


  public ReimbursementLine description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Reimbursement lines description (max length 50)
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ReimbursementLine expenseAccount(String expenseAccount) {
    this.expenseAccount = expenseAccount;
    return this;
  }

  /**
   * Reimbursement expense account. For posted pay run you should be able to see expense account code.
   * @return expenseAccount
   */
  @javax.annotation.Nullable
  public String getExpenseAccount() {
    return expenseAccount;
  }

  public void setExpenseAccount(String expenseAccount) {
    this.expenseAccount = expenseAccount;
  }


  public ReimbursementLine reimbursementTypeID(UUID reimbursementTypeID) {
    this.reimbursementTypeID = reimbursementTypeID;
    return this;
  }

  /**
   * Xero reimbursement type identifier
   * @return reimbursementTypeID
   */
  @javax.annotation.Nullable
  public UUID getReimbursementTypeID() {
    return reimbursementTypeID;
  }

  public void setReimbursementTypeID(UUID reimbursementTypeID) {
    this.reimbursementTypeID = reimbursementTypeID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReimbursementLine reimbursementLine = (ReimbursementLine) o;
    return Objects.equals(this.amount, reimbursementLine.amount) &&
        Objects.equals(this.description, reimbursementLine.description) &&
        Objects.equals(this.expenseAccount, reimbursementLine.expenseAccount) &&
        Objects.equals(this.reimbursementTypeID, reimbursementLine.reimbursementTypeID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, description, expenseAccount, reimbursementTypeID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReimbursementLine {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expenseAccount: ").append(toIndentedString(expenseAccount)).append("\n");
    sb.append("    reimbursementTypeID: ").append(toIndentedString(reimbursementTypeID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Amount");
    openapiFields.add("Description");
    openapiFields.add("ExpenseAccount");
    openapiFields.add("ReimbursementTypeID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReimbursementLine
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReimbursementLine.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReimbursementLine is not found in the empty JSON string", ReimbursementLine.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReimbursementLine.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReimbursementLine` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("ExpenseAccount") != null && !jsonObj.get("ExpenseAccount").isJsonNull()) && !jsonObj.get("ExpenseAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExpenseAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExpenseAccount").toString()));
      }
      if ((jsonObj.get("ReimbursementTypeID") != null && !jsonObj.get("ReimbursementTypeID").isJsonNull()) && !jsonObj.get("ReimbursementTypeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReimbursementTypeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReimbursementTypeID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReimbursementLine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReimbursementLine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReimbursementLine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReimbursementLine.class));

       return (TypeAdapter<T>) new TypeAdapter<ReimbursementLine>() {
           @Override
           public void write(JsonWriter out, ReimbursementLine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReimbursementLine read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReimbursementLine given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReimbursementLine
   * @throws IOException if the JSON string is invalid with respect to ReimbursementLine
   */
  public static ReimbursementLine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReimbursementLine.class);
  }

  /**
   * Convert an instance of ReimbursementLine to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

