/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.EarningsRateCalculationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EarningsLine
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:28.765088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EarningsLine {
  public static final String SERIALIZED_NAME_AMOUNT = "Amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_ANNUAL_SALARY = "AnnualSalary";
  @SerializedName(SERIALIZED_NAME_ANNUAL_SALARY)
  private Double annualSalary;

  public static final String SERIALIZED_NAME_CALCULATION_TYPE = "CalculationType";
  @SerializedName(SERIALIZED_NAME_CALCULATION_TYPE)
  private EarningsRateCalculationType calculationType;

  public static final String SERIALIZED_NAME_EARNINGS_RATE_I_D = "EarningsRateID";
  @SerializedName(SERIALIZED_NAME_EARNINGS_RATE_I_D)
  private UUID earningsRateID;

  public static final String SERIALIZED_NAME_FIXED_AMOUNT = "FixedAmount";
  @SerializedName(SERIALIZED_NAME_FIXED_AMOUNT)
  private Double fixedAmount;

  public static final String SERIALIZED_NAME_NORMAL_NUMBER_OF_UNITS = "NormalNumberOfUnits";
  @SerializedName(SERIALIZED_NAME_NORMAL_NUMBER_OF_UNITS)
  private Double normalNumberOfUnits;

  public static final String SERIALIZED_NAME_NUMBER_OF_UNITS = "NumberOfUnits";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_UNITS)
  private Double numberOfUnits;

  public static final String SERIALIZED_NAME_NUMBER_OF_UNITS_PER_WEEK = "NumberOfUnitsPerWeek";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_UNITS_PER_WEEK)
  private Double numberOfUnitsPerWeek;

  public static final String SERIALIZED_NAME_RATE_PER_UNIT = "RatePerUnit";
  @SerializedName(SERIALIZED_NAME_RATE_PER_UNIT)
  private Double ratePerUnit;

  public EarningsLine() {
  }

  public EarningsLine amount(Double amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Earnings rate amount
   * @return amount
   */
  @javax.annotation.Nullable
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }


  public EarningsLine annualSalary(Double annualSalary) {
    this.annualSalary = annualSalary;
    return this;
  }

  /**
   * Annual salary for earnings line
   * @return annualSalary
   */
  @javax.annotation.Nullable
  public Double getAnnualSalary() {
    return annualSalary;
  }

  public void setAnnualSalary(Double annualSalary) {
    this.annualSalary = annualSalary;
  }


  public EarningsLine calculationType(EarningsRateCalculationType calculationType) {
    this.calculationType = calculationType;
    return this;
  }

  /**
   * Get calculationType
   * @return calculationType
   */
  @javax.annotation.Nullable
  public EarningsRateCalculationType getCalculationType() {
    return calculationType;
  }

  public void setCalculationType(EarningsRateCalculationType calculationType) {
    this.calculationType = calculationType;
  }


  public EarningsLine earningsRateID(UUID earningsRateID) {
    this.earningsRateID = earningsRateID;
    return this;
  }

  /**
   * Xero unique id for earnings rate
   * @return earningsRateID
   */
  @javax.annotation.Nonnull
  public UUID getEarningsRateID() {
    return earningsRateID;
  }

  public void setEarningsRateID(UUID earningsRateID) {
    this.earningsRateID = earningsRateID;
  }


  public EarningsLine fixedAmount(Double fixedAmount) {
    this.fixedAmount = fixedAmount;
    return this;
  }

  /**
   * Earnings rate amount. Only applicable if the EarningsRate RateType is Fixed
   * @return fixedAmount
   */
  @javax.annotation.Nullable
  public Double getFixedAmount() {
    return fixedAmount;
  }

  public void setFixedAmount(Double fixedAmount) {
    this.fixedAmount = fixedAmount;
  }


  public EarningsLine normalNumberOfUnits(Double normalNumberOfUnits) {
    this.normalNumberOfUnits = normalNumberOfUnits;
    return this;
  }

  /**
   * Normal number of units for EarningsLine. Applicable when RateType is \&quot;MULTIPLE\&quot;
   * @return normalNumberOfUnits
   */
  @javax.annotation.Nullable
  public Double getNormalNumberOfUnits() {
    return normalNumberOfUnits;
  }

  public void setNormalNumberOfUnits(Double normalNumberOfUnits) {
    this.normalNumberOfUnits = normalNumberOfUnits;
  }


  public EarningsLine numberOfUnits(Double numberOfUnits) {
    this.numberOfUnits = numberOfUnits;
    return this;
  }

  /**
   * Earnings rate number of units.
   * @return numberOfUnits
   */
  @javax.annotation.Nullable
  public Double getNumberOfUnits() {
    return numberOfUnits;
  }

  public void setNumberOfUnits(Double numberOfUnits) {
    this.numberOfUnits = numberOfUnits;
  }


  public EarningsLine numberOfUnitsPerWeek(Double numberOfUnitsPerWeek) {
    this.numberOfUnitsPerWeek = numberOfUnitsPerWeek;
    return this;
  }

  /**
   * number of units for earning line
   * @return numberOfUnitsPerWeek
   */
  @javax.annotation.Nullable
  public Double getNumberOfUnitsPerWeek() {
    return numberOfUnitsPerWeek;
  }

  public void setNumberOfUnitsPerWeek(Double numberOfUnitsPerWeek) {
    this.numberOfUnitsPerWeek = numberOfUnitsPerWeek;
  }


  public EarningsLine ratePerUnit(Double ratePerUnit) {
    this.ratePerUnit = ratePerUnit;
    return this;
  }

  /**
   * Rate per unit of the EarningsLine.
   * @return ratePerUnit
   */
  @javax.annotation.Nullable
  public Double getRatePerUnit() {
    return ratePerUnit;
  }

  public void setRatePerUnit(Double ratePerUnit) {
    this.ratePerUnit = ratePerUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EarningsLine earningsLine = (EarningsLine) o;
    return Objects.equals(this.amount, earningsLine.amount) &&
        Objects.equals(this.annualSalary, earningsLine.annualSalary) &&
        Objects.equals(this.calculationType, earningsLine.calculationType) &&
        Objects.equals(this.earningsRateID, earningsLine.earningsRateID) &&
        Objects.equals(this.fixedAmount, earningsLine.fixedAmount) &&
        Objects.equals(this.normalNumberOfUnits, earningsLine.normalNumberOfUnits) &&
        Objects.equals(this.numberOfUnits, earningsLine.numberOfUnits) &&
        Objects.equals(this.numberOfUnitsPerWeek, earningsLine.numberOfUnitsPerWeek) &&
        Objects.equals(this.ratePerUnit, earningsLine.ratePerUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, annualSalary, calculationType, earningsRateID, fixedAmount, normalNumberOfUnits, numberOfUnits, numberOfUnitsPerWeek, ratePerUnit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EarningsLine {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    annualSalary: ").append(toIndentedString(annualSalary)).append("\n");
    sb.append("    calculationType: ").append(toIndentedString(calculationType)).append("\n");
    sb.append("    earningsRateID: ").append(toIndentedString(earningsRateID)).append("\n");
    sb.append("    fixedAmount: ").append(toIndentedString(fixedAmount)).append("\n");
    sb.append("    normalNumberOfUnits: ").append(toIndentedString(normalNumberOfUnits)).append("\n");
    sb.append("    numberOfUnits: ").append(toIndentedString(numberOfUnits)).append("\n");
    sb.append("    numberOfUnitsPerWeek: ").append(toIndentedString(numberOfUnitsPerWeek)).append("\n");
    sb.append("    ratePerUnit: ").append(toIndentedString(ratePerUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Amount");
    openapiFields.add("AnnualSalary");
    openapiFields.add("CalculationType");
    openapiFields.add("EarningsRateID");
    openapiFields.add("FixedAmount");
    openapiFields.add("NormalNumberOfUnits");
    openapiFields.add("NumberOfUnits");
    openapiFields.add("NumberOfUnitsPerWeek");
    openapiFields.add("RatePerUnit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EarningsRateID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EarningsLine
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EarningsLine.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EarningsLine is not found in the empty JSON string", EarningsLine.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EarningsLine.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EarningsLine` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EarningsLine.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CalculationType`
      if (jsonObj.get("CalculationType") != null && !jsonObj.get("CalculationType").isJsonNull()) {
        EarningsRateCalculationType.validateJsonElement(jsonObj.get("CalculationType"));
      }
      if (!jsonObj.get("EarningsRateID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EarningsRateID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EarningsRateID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EarningsLine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EarningsLine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EarningsLine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EarningsLine.class));

       return (TypeAdapter<T>) new TypeAdapter<EarningsLine>() {
           @Override
           public void write(JsonWriter out, EarningsLine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EarningsLine read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EarningsLine given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EarningsLine
   * @throws IOException if the JSON string is invalid with respect to EarningsLine
   */
  public static EarningsLine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EarningsLine.class);
  }

  /**
   * Convert an instance of EarningsLine to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

