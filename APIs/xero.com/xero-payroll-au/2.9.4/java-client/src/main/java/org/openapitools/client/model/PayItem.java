/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeductionType;
import org.openapitools.client.model.EarningsRate;
import org.openapitools.client.model.LeaveType;
import org.openapitools.client.model.ReimbursementType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PayItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:28.765088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PayItem {
  public static final String SERIALIZED_NAME_DEDUCTION_TYPES = "DeductionTypes";
  @SerializedName(SERIALIZED_NAME_DEDUCTION_TYPES)
  private List<DeductionType> deductionTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EARNINGS_RATES = "EarningsRates";
  @SerializedName(SERIALIZED_NAME_EARNINGS_RATES)
  private List<EarningsRate> earningsRates = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEAVE_TYPES = "LeaveTypes";
  @SerializedName(SERIALIZED_NAME_LEAVE_TYPES)
  private List<LeaveType> leaveTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_REIMBURSEMENT_TYPES = "ReimbursementTypes";
  @SerializedName(SERIALIZED_NAME_REIMBURSEMENT_TYPES)
  private List<ReimbursementType> reimbursementTypes = new ArrayList<>();

  public PayItem() {
  }

  public PayItem deductionTypes(List<DeductionType> deductionTypes) {
    this.deductionTypes = deductionTypes;
    return this;
  }

  public PayItem addDeductionTypesItem(DeductionType deductionTypesItem) {
    if (this.deductionTypes == null) {
      this.deductionTypes = new ArrayList<>();
    }
    this.deductionTypes.add(deductionTypesItem);
    return this;
  }

  /**
   * Get deductionTypes
   * @return deductionTypes
   */
  @javax.annotation.Nullable
  public List<DeductionType> getDeductionTypes() {
    return deductionTypes;
  }

  public void setDeductionTypes(List<DeductionType> deductionTypes) {
    this.deductionTypes = deductionTypes;
  }


  public PayItem earningsRates(List<EarningsRate> earningsRates) {
    this.earningsRates = earningsRates;
    return this;
  }

  public PayItem addEarningsRatesItem(EarningsRate earningsRatesItem) {
    if (this.earningsRates == null) {
      this.earningsRates = new ArrayList<>();
    }
    this.earningsRates.add(earningsRatesItem);
    return this;
  }

  /**
   * Get earningsRates
   * @return earningsRates
   */
  @javax.annotation.Nullable
  public List<EarningsRate> getEarningsRates() {
    return earningsRates;
  }

  public void setEarningsRates(List<EarningsRate> earningsRates) {
    this.earningsRates = earningsRates;
  }


  public PayItem leaveTypes(List<LeaveType> leaveTypes) {
    this.leaveTypes = leaveTypes;
    return this;
  }

  public PayItem addLeaveTypesItem(LeaveType leaveTypesItem) {
    if (this.leaveTypes == null) {
      this.leaveTypes = new ArrayList<>();
    }
    this.leaveTypes.add(leaveTypesItem);
    return this;
  }

  /**
   * Get leaveTypes
   * @return leaveTypes
   */
  @javax.annotation.Nullable
  public List<LeaveType> getLeaveTypes() {
    return leaveTypes;
  }

  public void setLeaveTypes(List<LeaveType> leaveTypes) {
    this.leaveTypes = leaveTypes;
  }


  public PayItem reimbursementTypes(List<ReimbursementType> reimbursementTypes) {
    this.reimbursementTypes = reimbursementTypes;
    return this;
  }

  public PayItem addReimbursementTypesItem(ReimbursementType reimbursementTypesItem) {
    if (this.reimbursementTypes == null) {
      this.reimbursementTypes = new ArrayList<>();
    }
    this.reimbursementTypes.add(reimbursementTypesItem);
    return this;
  }

  /**
   * Get reimbursementTypes
   * @return reimbursementTypes
   */
  @javax.annotation.Nullable
  public List<ReimbursementType> getReimbursementTypes() {
    return reimbursementTypes;
  }

  public void setReimbursementTypes(List<ReimbursementType> reimbursementTypes) {
    this.reimbursementTypes = reimbursementTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayItem payItem = (PayItem) o;
    return Objects.equals(this.deductionTypes, payItem.deductionTypes) &&
        Objects.equals(this.earningsRates, payItem.earningsRates) &&
        Objects.equals(this.leaveTypes, payItem.leaveTypes) &&
        Objects.equals(this.reimbursementTypes, payItem.reimbursementTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deductionTypes, earningsRates, leaveTypes, reimbursementTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayItem {\n");
    sb.append("    deductionTypes: ").append(toIndentedString(deductionTypes)).append("\n");
    sb.append("    earningsRates: ").append(toIndentedString(earningsRates)).append("\n");
    sb.append("    leaveTypes: ").append(toIndentedString(leaveTypes)).append("\n");
    sb.append("    reimbursementTypes: ").append(toIndentedString(reimbursementTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeductionTypes");
    openapiFields.add("EarningsRates");
    openapiFields.add("LeaveTypes");
    openapiFields.add("ReimbursementTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PayItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PayItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayItem is not found in the empty JSON string", PayItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PayItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PayItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("DeductionTypes") != null && !jsonObj.get("DeductionTypes").isJsonNull()) {
        JsonArray jsonArraydeductionTypes = jsonObj.getAsJsonArray("DeductionTypes");
        if (jsonArraydeductionTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DeductionTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DeductionTypes` to be an array in the JSON string but got `%s`", jsonObj.get("DeductionTypes").toString()));
          }

          // validate the optional field `DeductionTypes` (array)
          for (int i = 0; i < jsonArraydeductionTypes.size(); i++) {
            DeductionType.validateJsonElement(jsonArraydeductionTypes.get(i));
          };
        }
      }
      if (jsonObj.get("EarningsRates") != null && !jsonObj.get("EarningsRates").isJsonNull()) {
        JsonArray jsonArrayearningsRates = jsonObj.getAsJsonArray("EarningsRates");
        if (jsonArrayearningsRates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("EarningsRates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `EarningsRates` to be an array in the JSON string but got `%s`", jsonObj.get("EarningsRates").toString()));
          }

          // validate the optional field `EarningsRates` (array)
          for (int i = 0; i < jsonArrayearningsRates.size(); i++) {
            EarningsRate.validateJsonElement(jsonArrayearningsRates.get(i));
          };
        }
      }
      if (jsonObj.get("LeaveTypes") != null && !jsonObj.get("LeaveTypes").isJsonNull()) {
        JsonArray jsonArrayleaveTypes = jsonObj.getAsJsonArray("LeaveTypes");
        if (jsonArrayleaveTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LeaveTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LeaveTypes` to be an array in the JSON string but got `%s`", jsonObj.get("LeaveTypes").toString()));
          }

          // validate the optional field `LeaveTypes` (array)
          for (int i = 0; i < jsonArrayleaveTypes.size(); i++) {
            LeaveType.validateJsonElement(jsonArrayleaveTypes.get(i));
          };
        }
      }
      if (jsonObj.get("ReimbursementTypes") != null && !jsonObj.get("ReimbursementTypes").isJsonNull()) {
        JsonArray jsonArrayreimbursementTypes = jsonObj.getAsJsonArray("ReimbursementTypes");
        if (jsonArrayreimbursementTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ReimbursementTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ReimbursementTypes` to be an array in the JSON string but got `%s`", jsonObj.get("ReimbursementTypes").toString()));
          }

          // validate the optional field `ReimbursementTypes` (array)
          for (int i = 0; i < jsonArrayreimbursementTypes.size(); i++) {
            ReimbursementType.validateJsonElement(jsonArrayreimbursementTypes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayItem.class));

       return (TypeAdapter<T>) new TypeAdapter<PayItem>() {
           @Override
           public void write(JsonWriter out, PayItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PayItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PayItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PayItem
   * @throws IOException if the JSON string is invalid with respect to PayItem
   */
  public static PayItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayItem.class);
  }

  /**
   * Convert an instance of PayItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

