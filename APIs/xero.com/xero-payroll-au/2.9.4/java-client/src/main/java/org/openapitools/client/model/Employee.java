/*
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.BankAccount;
import org.openapitools.client.model.EmployeeStatus;
import org.openapitools.client.model.HomeAddress;
import org.openapitools.client.model.LeaveBalance;
import org.openapitools.client.model.LeaveLine;
import org.openapitools.client.model.OpeningBalances;
import org.openapitools.client.model.PayTemplate;
import org.openapitools.client.model.SuperMembership;
import org.openapitools.client.model.TaxDeclaration;
import org.openapitools.client.model.ValidationError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Employee
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:28.765088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Employee {
  public static final String SERIALIZED_NAME_BANK_ACCOUNTS = "BankAccounts";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNTS)
  private List<BankAccount> bankAccounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLASSIFICATION = "Classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private String classification;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "DateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private String dateOfBirth;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMPLOYEE_GROUP_NAME = "EmployeeGroupName";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_GROUP_NAME)
  private String employeeGroupName;

  public static final String SERIALIZED_NAME_EMPLOYEE_I_D = "EmployeeID";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_I_D)
  private UUID employeeID;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  /**
   * The employee’s gender. See Employee Gender
   */
  @JsonAdapter(GenderEnum.Adapter.class)
  public enum GenderEnum {
    N("N"),
    
    M("M"),
    
    F("F"),
    
    I("I");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GenderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GenderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GENDER = "Gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private GenderEnum gender;

  public static final String SERIALIZED_NAME_HOME_ADDRESS = "HomeAddress";
  @SerializedName(SERIALIZED_NAME_HOME_ADDRESS)
  private HomeAddress homeAddress;

  public static final String SERIALIZED_NAME_IS_AUTHORISED_TO_APPROVE_LEAVE = "IsAuthorisedToApproveLeave";
  @SerializedName(SERIALIZED_NAME_IS_AUTHORISED_TO_APPROVE_LEAVE)
  private Boolean isAuthorisedToApproveLeave;

  public static final String SERIALIZED_NAME_IS_AUTHORISED_TO_APPROVE_TIMESHEETS = "IsAuthorisedToApproveTimesheets";
  @SerializedName(SERIALIZED_NAME_IS_AUTHORISED_TO_APPROVE_TIMESHEETS)
  private Boolean isAuthorisedToApproveTimesheets;

  public static final String SERIALIZED_NAME_JOB_TITLE = "JobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_LEAVE_BALANCES = "LeaveBalances";
  @SerializedName(SERIALIZED_NAME_LEAVE_BALANCES)
  private List<LeaveBalance> leaveBalances = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEAVE_LINES = "LeaveLines";
  @SerializedName(SERIALIZED_NAME_LEAVE_LINES)
  private List<LeaveLine> leaveLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIDDLE_NAMES = "MiddleNames";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAMES)
  private String middleNames;

  public static final String SERIALIZED_NAME_MOBILE = "Mobile";
  @SerializedName(SERIALIZED_NAME_MOBILE)
  private String mobile;

  public static final String SERIALIZED_NAME_OPENING_BALANCES = "OpeningBalances";
  @SerializedName(SERIALIZED_NAME_OPENING_BALANCES)
  private OpeningBalances openingBalances;

  public static final String SERIALIZED_NAME_ORDINARY_EARNINGS_RATE_I_D = "OrdinaryEarningsRateID";
  @SerializedName(SERIALIZED_NAME_ORDINARY_EARNINGS_RATE_I_D)
  private UUID ordinaryEarningsRateID;

  public static final String SERIALIZED_NAME_PAY_TEMPLATE = "PayTemplate";
  @SerializedName(SERIALIZED_NAME_PAY_TEMPLATE)
  private PayTemplate payTemplate;

  public static final String SERIALIZED_NAME_PAYROLL_CALENDAR_I_D = "PayrollCalendarID";
  @SerializedName(SERIALIZED_NAME_PAYROLL_CALENDAR_I_D)
  private UUID payrollCalendarID;

  public static final String SERIALIZED_NAME_PHONE = "Phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EmployeeStatus status;

  public static final String SERIALIZED_NAME_SUPER_MEMBERSHIPS = "SuperMemberships";
  @SerializedName(SERIALIZED_NAME_SUPER_MEMBERSHIPS)
  private List<SuperMembership> superMemberships = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAX_DECLARATION = "TaxDeclaration";
  @SerializedName(SERIALIZED_NAME_TAX_DECLARATION)
  private TaxDeclaration taxDeclaration;

  public static final String SERIALIZED_NAME_TERMINATION_DATE = "TerminationDate";
  @SerializedName(SERIALIZED_NAME_TERMINATION_DATE)
  private String terminationDate;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TWITTER_USER_NAME = "TwitterUserName";
  @SerializedName(SERIALIZED_NAME_TWITTER_USER_NAME)
  private String twitterUserName;

  public static final String SERIALIZED_NAME_UPDATED_DATE_U_T_C = "UpdatedDateUTC";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE_U_T_C)
  private String updatedDateUTC;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "ValidationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<ValidationError> validationErrors = new ArrayList<>();

  public Employee() {
  }

  public Employee(
     String updatedDateUTC
  ) {
    this();
    this.updatedDateUTC = updatedDateUTC;
  }

  public Employee bankAccounts(List<BankAccount> bankAccounts) {
    this.bankAccounts = bankAccounts;
    return this;
  }

  public Employee addBankAccountsItem(BankAccount bankAccountsItem) {
    if (this.bankAccounts == null) {
      this.bankAccounts = new ArrayList<>();
    }
    this.bankAccounts.add(bankAccountsItem);
    return this;
  }

  /**
   * Get bankAccounts
   * @return bankAccounts
   */
  @javax.annotation.Nullable
  public List<BankAccount> getBankAccounts() {
    return bankAccounts;
  }

  public void setBankAccounts(List<BankAccount> bankAccounts) {
    this.bankAccounts = bankAccounts;
  }


  public Employee classification(String classification) {
    this.classification = classification;
    return this;
  }

  /**
   * Employees classification
   * @return classification
   */
  @javax.annotation.Nullable
  public String getClassification() {
    return classification;
  }

  public void setClassification(String classification) {
    this.classification = classification;
  }


  public Employee dateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * Date of birth of the employee (YYYY-MM-DD)
   * @return dateOfBirth
   */
  @javax.annotation.Nonnull
  public String getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public Employee email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address for the employee
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Employee employeeGroupName(String employeeGroupName) {
    this.employeeGroupName = employeeGroupName;
    return this;
  }

  /**
   * The Employee Group allows you to report on payroll expenses and liabilities for each group of employees
   * @return employeeGroupName
   */
  @javax.annotation.Nullable
  public String getEmployeeGroupName() {
    return employeeGroupName;
  }

  public void setEmployeeGroupName(String employeeGroupName) {
    this.employeeGroupName = employeeGroupName;
  }


  public Employee employeeID(UUID employeeID) {
    this.employeeID = employeeID;
    return this;
  }

  /**
   * Xero unique identifier for an Employee
   * @return employeeID
   */
  @javax.annotation.Nullable
  public UUID getEmployeeID() {
    return employeeID;
  }

  public void setEmployeeID(UUID employeeID) {
    this.employeeID = employeeID;
  }


  public Employee firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name of employee
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Employee gender(GenderEnum gender) {
    this.gender = gender;
    return this;
  }

  /**
   * The employee’s gender. See Employee Gender
   * @return gender
   */
  @javax.annotation.Nullable
  public GenderEnum getGender() {
    return gender;
  }

  public void setGender(GenderEnum gender) {
    this.gender = gender;
  }


  public Employee homeAddress(HomeAddress homeAddress) {
    this.homeAddress = homeAddress;
    return this;
  }

  /**
   * Get homeAddress
   * @return homeAddress
   */
  @javax.annotation.Nullable
  public HomeAddress getHomeAddress() {
    return homeAddress;
  }

  public void setHomeAddress(HomeAddress homeAddress) {
    this.homeAddress = homeAddress;
  }


  public Employee isAuthorisedToApproveLeave(Boolean isAuthorisedToApproveLeave) {
    this.isAuthorisedToApproveLeave = isAuthorisedToApproveLeave;
    return this;
  }

  /**
   * Authorised to approve other employees&#39; leave requests
   * @return isAuthorisedToApproveLeave
   */
  @javax.annotation.Nullable
  public Boolean getIsAuthorisedToApproveLeave() {
    return isAuthorisedToApproveLeave;
  }

  public void setIsAuthorisedToApproveLeave(Boolean isAuthorisedToApproveLeave) {
    this.isAuthorisedToApproveLeave = isAuthorisedToApproveLeave;
  }


  public Employee isAuthorisedToApproveTimesheets(Boolean isAuthorisedToApproveTimesheets) {
    this.isAuthorisedToApproveTimesheets = isAuthorisedToApproveTimesheets;
    return this;
  }

  /**
   * Authorised to approve timesheets
   * @return isAuthorisedToApproveTimesheets
   */
  @javax.annotation.Nullable
  public Boolean getIsAuthorisedToApproveTimesheets() {
    return isAuthorisedToApproveTimesheets;
  }

  public void setIsAuthorisedToApproveTimesheets(Boolean isAuthorisedToApproveTimesheets) {
    this.isAuthorisedToApproveTimesheets = isAuthorisedToApproveTimesheets;
  }


  public Employee jobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

  /**
   * JobTitle of the employee
   * @return jobTitle
   */
  @javax.annotation.Nullable
  public String getJobTitle() {
    return jobTitle;
  }

  public void setJobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
  }


  public Employee lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name of employee
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Employee leaveBalances(List<LeaveBalance> leaveBalances) {
    this.leaveBalances = leaveBalances;
    return this;
  }

  public Employee addLeaveBalancesItem(LeaveBalance leaveBalancesItem) {
    if (this.leaveBalances == null) {
      this.leaveBalances = new ArrayList<>();
    }
    this.leaveBalances.add(leaveBalancesItem);
    return this;
  }

  /**
   * Get leaveBalances
   * @return leaveBalances
   */
  @javax.annotation.Nullable
  public List<LeaveBalance> getLeaveBalances() {
    return leaveBalances;
  }

  public void setLeaveBalances(List<LeaveBalance> leaveBalances) {
    this.leaveBalances = leaveBalances;
  }


  public Employee leaveLines(List<LeaveLine> leaveLines) {
    this.leaveLines = leaveLines;
    return this;
  }

  public Employee addLeaveLinesItem(LeaveLine leaveLinesItem) {
    if (this.leaveLines == null) {
      this.leaveLines = new ArrayList<>();
    }
    this.leaveLines.add(leaveLinesItem);
    return this;
  }

  /**
   * Get leaveLines
   * @return leaveLines
   */
  @javax.annotation.Nullable
  public List<LeaveLine> getLeaveLines() {
    return leaveLines;
  }

  public void setLeaveLines(List<LeaveLine> leaveLines) {
    this.leaveLines = leaveLines;
  }


  public Employee middleNames(String middleNames) {
    this.middleNames = middleNames;
    return this;
  }

  /**
   * Middle name(s) of the employee
   * @return middleNames
   */
  @javax.annotation.Nullable
  public String getMiddleNames() {
    return middleNames;
  }

  public void setMiddleNames(String middleNames) {
    this.middleNames = middleNames;
  }


  public Employee mobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  /**
   * Employee mobile number
   * @return mobile
   */
  @javax.annotation.Nullable
  public String getMobile() {
    return mobile;
  }

  public void setMobile(String mobile) {
    this.mobile = mobile;
  }


  public Employee openingBalances(OpeningBalances openingBalances) {
    this.openingBalances = openingBalances;
    return this;
  }

  /**
   * Get openingBalances
   * @return openingBalances
   */
  @javax.annotation.Nullable
  public OpeningBalances getOpeningBalances() {
    return openingBalances;
  }

  public void setOpeningBalances(OpeningBalances openingBalances) {
    this.openingBalances = openingBalances;
  }


  public Employee ordinaryEarningsRateID(UUID ordinaryEarningsRateID) {
    this.ordinaryEarningsRateID = ordinaryEarningsRateID;
    return this;
  }

  /**
   * Xero unique identifier for earnings rate
   * @return ordinaryEarningsRateID
   */
  @javax.annotation.Nullable
  public UUID getOrdinaryEarningsRateID() {
    return ordinaryEarningsRateID;
  }

  public void setOrdinaryEarningsRateID(UUID ordinaryEarningsRateID) {
    this.ordinaryEarningsRateID = ordinaryEarningsRateID;
  }


  public Employee payTemplate(PayTemplate payTemplate) {
    this.payTemplate = payTemplate;
    return this;
  }

  /**
   * Get payTemplate
   * @return payTemplate
   */
  @javax.annotation.Nullable
  public PayTemplate getPayTemplate() {
    return payTemplate;
  }

  public void setPayTemplate(PayTemplate payTemplate) {
    this.payTemplate = payTemplate;
  }


  public Employee payrollCalendarID(UUID payrollCalendarID) {
    this.payrollCalendarID = payrollCalendarID;
    return this;
  }

  /**
   * Xero unique identifier for payroll calendar for the employee
   * @return payrollCalendarID
   */
  @javax.annotation.Nullable
  public UUID getPayrollCalendarID() {
    return payrollCalendarID;
  }

  public void setPayrollCalendarID(UUID payrollCalendarID) {
    this.payrollCalendarID = payrollCalendarID;
  }


  public Employee phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Employee phone number
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public Employee startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Start date for an employee (YYYY-MM-DD)
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public Employee status(EmployeeStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EmployeeStatus getStatus() {
    return status;
  }

  public void setStatus(EmployeeStatus status) {
    this.status = status;
  }


  public Employee superMemberships(List<SuperMembership> superMemberships) {
    this.superMemberships = superMemberships;
    return this;
  }

  public Employee addSuperMembershipsItem(SuperMembership superMembershipsItem) {
    if (this.superMemberships == null) {
      this.superMemberships = new ArrayList<>();
    }
    this.superMemberships.add(superMembershipsItem);
    return this;
  }

  /**
   * Get superMemberships
   * @return superMemberships
   */
  @javax.annotation.Nullable
  public List<SuperMembership> getSuperMemberships() {
    return superMemberships;
  }

  public void setSuperMemberships(List<SuperMembership> superMemberships) {
    this.superMemberships = superMemberships;
  }


  public Employee taxDeclaration(TaxDeclaration taxDeclaration) {
    this.taxDeclaration = taxDeclaration;
    return this;
  }

  /**
   * Get taxDeclaration
   * @return taxDeclaration
   */
  @javax.annotation.Nullable
  public TaxDeclaration getTaxDeclaration() {
    return taxDeclaration;
  }

  public void setTaxDeclaration(TaxDeclaration taxDeclaration) {
    this.taxDeclaration = taxDeclaration;
  }


  public Employee terminationDate(String terminationDate) {
    this.terminationDate = terminationDate;
    return this;
  }

  /**
   * Employee Termination Date (YYYY-MM-DD)
   * @return terminationDate
   */
  @javax.annotation.Nullable
  public String getTerminationDate() {
    return terminationDate;
  }

  public void setTerminationDate(String terminationDate) {
    this.terminationDate = terminationDate;
  }


  public Employee title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the employee
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Employee twitterUserName(String twitterUserName) {
    this.twitterUserName = twitterUserName;
    return this;
  }

  /**
   * Employee’s twitter name
   * @return twitterUserName
   */
  @javax.annotation.Nullable
  public String getTwitterUserName() {
    return twitterUserName;
  }

  public void setTwitterUserName(String twitterUserName) {
    this.twitterUserName = twitterUserName;
  }


  /**
   * Last modified timestamp
   * @return updatedDateUTC
   */
  @javax.annotation.Nullable
  public String getUpdatedDateUTC() {
    return updatedDateUTC;
  }



  public Employee validationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public Employee addValidationErrorsItem(ValidationError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Displays array of validation error messages from the API
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<ValidationError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<ValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Employee employee = (Employee) o;
    return Objects.equals(this.bankAccounts, employee.bankAccounts) &&
        Objects.equals(this.classification, employee.classification) &&
        Objects.equals(this.dateOfBirth, employee.dateOfBirth) &&
        Objects.equals(this.email, employee.email) &&
        Objects.equals(this.employeeGroupName, employee.employeeGroupName) &&
        Objects.equals(this.employeeID, employee.employeeID) &&
        Objects.equals(this.firstName, employee.firstName) &&
        Objects.equals(this.gender, employee.gender) &&
        Objects.equals(this.homeAddress, employee.homeAddress) &&
        Objects.equals(this.isAuthorisedToApproveLeave, employee.isAuthorisedToApproveLeave) &&
        Objects.equals(this.isAuthorisedToApproveTimesheets, employee.isAuthorisedToApproveTimesheets) &&
        Objects.equals(this.jobTitle, employee.jobTitle) &&
        Objects.equals(this.lastName, employee.lastName) &&
        Objects.equals(this.leaveBalances, employee.leaveBalances) &&
        Objects.equals(this.leaveLines, employee.leaveLines) &&
        Objects.equals(this.middleNames, employee.middleNames) &&
        Objects.equals(this.mobile, employee.mobile) &&
        Objects.equals(this.openingBalances, employee.openingBalances) &&
        Objects.equals(this.ordinaryEarningsRateID, employee.ordinaryEarningsRateID) &&
        Objects.equals(this.payTemplate, employee.payTemplate) &&
        Objects.equals(this.payrollCalendarID, employee.payrollCalendarID) &&
        Objects.equals(this.phone, employee.phone) &&
        Objects.equals(this.startDate, employee.startDate) &&
        Objects.equals(this.status, employee.status) &&
        Objects.equals(this.superMemberships, employee.superMemberships) &&
        Objects.equals(this.taxDeclaration, employee.taxDeclaration) &&
        Objects.equals(this.terminationDate, employee.terminationDate) &&
        Objects.equals(this.title, employee.title) &&
        Objects.equals(this.twitterUserName, employee.twitterUserName) &&
        Objects.equals(this.updatedDateUTC, employee.updatedDateUTC) &&
        Objects.equals(this.validationErrors, employee.validationErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bankAccounts, classification, dateOfBirth, email, employeeGroupName, employeeID, firstName, gender, homeAddress, isAuthorisedToApproveLeave, isAuthorisedToApproveTimesheets, jobTitle, lastName, leaveBalances, leaveLines, middleNames, mobile, openingBalances, ordinaryEarningsRateID, payTemplate, payrollCalendarID, phone, startDate, status, superMemberships, taxDeclaration, terminationDate, title, twitterUserName, updatedDateUTC, validationErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Employee {\n");
    sb.append("    bankAccounts: ").append(toIndentedString(bankAccounts)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    employeeGroupName: ").append(toIndentedString(employeeGroupName)).append("\n");
    sb.append("    employeeID: ").append(toIndentedString(employeeID)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    homeAddress: ").append(toIndentedString(homeAddress)).append("\n");
    sb.append("    isAuthorisedToApproveLeave: ").append(toIndentedString(isAuthorisedToApproveLeave)).append("\n");
    sb.append("    isAuthorisedToApproveTimesheets: ").append(toIndentedString(isAuthorisedToApproveTimesheets)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    leaveBalances: ").append(toIndentedString(leaveBalances)).append("\n");
    sb.append("    leaveLines: ").append(toIndentedString(leaveLines)).append("\n");
    sb.append("    middleNames: ").append(toIndentedString(middleNames)).append("\n");
    sb.append("    mobile: ").append(toIndentedString(mobile)).append("\n");
    sb.append("    openingBalances: ").append(toIndentedString(openingBalances)).append("\n");
    sb.append("    ordinaryEarningsRateID: ").append(toIndentedString(ordinaryEarningsRateID)).append("\n");
    sb.append("    payTemplate: ").append(toIndentedString(payTemplate)).append("\n");
    sb.append("    payrollCalendarID: ").append(toIndentedString(payrollCalendarID)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    superMemberships: ").append(toIndentedString(superMemberships)).append("\n");
    sb.append("    taxDeclaration: ").append(toIndentedString(taxDeclaration)).append("\n");
    sb.append("    terminationDate: ").append(toIndentedString(terminationDate)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    twitterUserName: ").append(toIndentedString(twitterUserName)).append("\n");
    sb.append("    updatedDateUTC: ").append(toIndentedString(updatedDateUTC)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BankAccounts");
    openapiFields.add("Classification");
    openapiFields.add("DateOfBirth");
    openapiFields.add("Email");
    openapiFields.add("EmployeeGroupName");
    openapiFields.add("EmployeeID");
    openapiFields.add("FirstName");
    openapiFields.add("Gender");
    openapiFields.add("HomeAddress");
    openapiFields.add("IsAuthorisedToApproveLeave");
    openapiFields.add("IsAuthorisedToApproveTimesheets");
    openapiFields.add("JobTitle");
    openapiFields.add("LastName");
    openapiFields.add("LeaveBalances");
    openapiFields.add("LeaveLines");
    openapiFields.add("MiddleNames");
    openapiFields.add("Mobile");
    openapiFields.add("OpeningBalances");
    openapiFields.add("OrdinaryEarningsRateID");
    openapiFields.add("PayTemplate");
    openapiFields.add("PayrollCalendarID");
    openapiFields.add("Phone");
    openapiFields.add("StartDate");
    openapiFields.add("Status");
    openapiFields.add("SuperMemberships");
    openapiFields.add("TaxDeclaration");
    openapiFields.add("TerminationDate");
    openapiFields.add("Title");
    openapiFields.add("TwitterUserName");
    openapiFields.add("UpdatedDateUTC");
    openapiFields.add("ValidationErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DateOfBirth");
    openapiRequiredFields.add("FirstName");
    openapiRequiredFields.add("LastName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Employee
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Employee.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Employee is not found in the empty JSON string", Employee.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Employee.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Employee` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Employee.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("BankAccounts") != null && !jsonObj.get("BankAccounts").isJsonNull()) {
        JsonArray jsonArraybankAccounts = jsonObj.getAsJsonArray("BankAccounts");
        if (jsonArraybankAccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("BankAccounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `BankAccounts` to be an array in the JSON string but got `%s`", jsonObj.get("BankAccounts").toString()));
          }

          // validate the optional field `BankAccounts` (array)
          for (int i = 0; i < jsonArraybankAccounts.size(); i++) {
            BankAccount.validateJsonElement(jsonArraybankAccounts.get(i));
          };
        }
      }
      if ((jsonObj.get("Classification") != null && !jsonObj.get("Classification").isJsonNull()) && !jsonObj.get("Classification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Classification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Classification").toString()));
      }
      if (!jsonObj.get("DateOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateOfBirth").toString()));
      }
      if ((jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) && !jsonObj.get("Email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Email").toString()));
      }
      if ((jsonObj.get("EmployeeGroupName") != null && !jsonObj.get("EmployeeGroupName").isJsonNull()) && !jsonObj.get("EmployeeGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmployeeGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmployeeGroupName").toString()));
      }
      if ((jsonObj.get("EmployeeID") != null && !jsonObj.get("EmployeeID").isJsonNull()) && !jsonObj.get("EmployeeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmployeeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmployeeID").toString()));
      }
      if (!jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if ((jsonObj.get("Gender") != null && !jsonObj.get("Gender").isJsonNull()) && !jsonObj.get("Gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Gender").toString()));
      }
      // validate the optional field `Gender`
      if (jsonObj.get("Gender") != null && !jsonObj.get("Gender").isJsonNull()) {
        GenderEnum.validateJsonElement(jsonObj.get("Gender"));
      }
      // validate the optional field `HomeAddress`
      if (jsonObj.get("HomeAddress") != null && !jsonObj.get("HomeAddress").isJsonNull()) {
        HomeAddress.validateJsonElement(jsonObj.get("HomeAddress"));
      }
      if ((jsonObj.get("JobTitle") != null && !jsonObj.get("JobTitle").isJsonNull()) && !jsonObj.get("JobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JobTitle").toString()));
      }
      if (!jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if (jsonObj.get("LeaveBalances") != null && !jsonObj.get("LeaveBalances").isJsonNull()) {
        JsonArray jsonArrayleaveBalances = jsonObj.getAsJsonArray("LeaveBalances");
        if (jsonArrayleaveBalances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LeaveBalances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LeaveBalances` to be an array in the JSON string but got `%s`", jsonObj.get("LeaveBalances").toString()));
          }

          // validate the optional field `LeaveBalances` (array)
          for (int i = 0; i < jsonArrayleaveBalances.size(); i++) {
            LeaveBalance.validateJsonElement(jsonArrayleaveBalances.get(i));
          };
        }
      }
      if (jsonObj.get("LeaveLines") != null && !jsonObj.get("LeaveLines").isJsonNull()) {
        JsonArray jsonArrayleaveLines = jsonObj.getAsJsonArray("LeaveLines");
        if (jsonArrayleaveLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LeaveLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LeaveLines` to be an array in the JSON string but got `%s`", jsonObj.get("LeaveLines").toString()));
          }

          // validate the optional field `LeaveLines` (array)
          for (int i = 0; i < jsonArrayleaveLines.size(); i++) {
            LeaveLine.validateJsonElement(jsonArrayleaveLines.get(i));
          };
        }
      }
      if ((jsonObj.get("MiddleNames") != null && !jsonObj.get("MiddleNames").isJsonNull()) && !jsonObj.get("MiddleNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MiddleNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MiddleNames").toString()));
      }
      if ((jsonObj.get("Mobile") != null && !jsonObj.get("Mobile").isJsonNull()) && !jsonObj.get("Mobile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Mobile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Mobile").toString()));
      }
      // validate the optional field `OpeningBalances`
      if (jsonObj.get("OpeningBalances") != null && !jsonObj.get("OpeningBalances").isJsonNull()) {
        OpeningBalances.validateJsonElement(jsonObj.get("OpeningBalances"));
      }
      if ((jsonObj.get("OrdinaryEarningsRateID") != null && !jsonObj.get("OrdinaryEarningsRateID").isJsonNull()) && !jsonObj.get("OrdinaryEarningsRateID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrdinaryEarningsRateID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrdinaryEarningsRateID").toString()));
      }
      // validate the optional field `PayTemplate`
      if (jsonObj.get("PayTemplate") != null && !jsonObj.get("PayTemplate").isJsonNull()) {
        PayTemplate.validateJsonElement(jsonObj.get("PayTemplate"));
      }
      if ((jsonObj.get("PayrollCalendarID") != null && !jsonObj.get("PayrollCalendarID").isJsonNull()) && !jsonObj.get("PayrollCalendarID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayrollCalendarID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayrollCalendarID").toString()));
      }
      if ((jsonObj.get("Phone") != null && !jsonObj.get("Phone").isJsonNull()) && !jsonObj.get("Phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Phone").toString()));
      }
      if ((jsonObj.get("StartDate") != null && !jsonObj.get("StartDate").isJsonNull()) && !jsonObj.get("StartDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StartDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StartDate").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        EmployeeStatus.validateJsonElement(jsonObj.get("Status"));
      }
      if (jsonObj.get("SuperMemberships") != null && !jsonObj.get("SuperMemberships").isJsonNull()) {
        JsonArray jsonArraysuperMemberships = jsonObj.getAsJsonArray("SuperMemberships");
        if (jsonArraysuperMemberships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SuperMemberships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SuperMemberships` to be an array in the JSON string but got `%s`", jsonObj.get("SuperMemberships").toString()));
          }

          // validate the optional field `SuperMemberships` (array)
          for (int i = 0; i < jsonArraysuperMemberships.size(); i++) {
            SuperMembership.validateJsonElement(jsonArraysuperMemberships.get(i));
          };
        }
      }
      // validate the optional field `TaxDeclaration`
      if (jsonObj.get("TaxDeclaration") != null && !jsonObj.get("TaxDeclaration").isJsonNull()) {
        TaxDeclaration.validateJsonElement(jsonObj.get("TaxDeclaration"));
      }
      if ((jsonObj.get("TerminationDate") != null && !jsonObj.get("TerminationDate").isJsonNull()) && !jsonObj.get("TerminationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TerminationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TerminationDate").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("TwitterUserName") != null && !jsonObj.get("TwitterUserName").isJsonNull()) && !jsonObj.get("TwitterUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TwitterUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TwitterUserName").toString()));
      }
      if ((jsonObj.get("UpdatedDateUTC") != null && !jsonObj.get("UpdatedDateUTC").isJsonNull()) && !jsonObj.get("UpdatedDateUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedDateUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedDateUTC").toString()));
      }
      if (jsonObj.get("ValidationErrors") != null && !jsonObj.get("ValidationErrors").isJsonNull()) {
        JsonArray jsonArrayvalidationErrors = jsonObj.getAsJsonArray("ValidationErrors");
        if (jsonArrayvalidationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ValidationErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ValidationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("ValidationErrors").toString()));
          }

          // validate the optional field `ValidationErrors` (array)
          for (int i = 0; i < jsonArrayvalidationErrors.size(); i++) {
            ValidationError.validateJsonElement(jsonArrayvalidationErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Employee.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Employee' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Employee> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Employee.class));

       return (TypeAdapter<T>) new TypeAdapter<Employee>() {
           @Override
           public void write(JsonWriter out, Employee value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Employee read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Employee given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Employee
   * @throws IOException if the JSON string is invalid with respect to Employee
   */
  public static Employee fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Employee.class);
  }

  /**
   * Convert an instance of Employee to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

