/**
 * Xero Bank Feeds API
 * The Bank Feeds API is a closed API that is only available to financial institutions that have an established financial services partnership with Xero. If you're an existing financial services partner that wants access, contact your local Partner Manager. If you're a financial institution who wants to provide bank feeds to your business customers, contact us to become a financial services partner.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedConnections.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedConnections::OAIFeedConnections(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedConnections::OAIFeedConnections() {
    this->initializeModel();
}

OAIFeedConnections::~OAIFeedConnections() {}

void OAIFeedConnections::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_pagination_isSet = false;
    m_pagination_isValid = false;
}

void OAIFeedConnections::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedConnections::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_pagination_isValid = ::OpenAPI::fromJsonValue(m_pagination, json[QString("pagination")]);
    m_pagination_isSet = !json[QString("pagination")].isNull() && m_pagination_isValid;
}

QString OAIFeedConnections::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedConnections::asJsonObject() const {
    QJsonObject obj;
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_pagination.isSet()) {
        obj.insert(QString("pagination"), ::OpenAPI::toJsonValue(m_pagination));
    }
    return obj;
}

QList<OAIFeedConnection> OAIFeedConnections::getItems() const {
    return m_items;
}
void OAIFeedConnections::setItems(const QList<OAIFeedConnection> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIFeedConnections::is_items_Set() const{
    return m_items_isSet;
}

bool OAIFeedConnections::is_items_Valid() const{
    return m_items_isValid;
}

OAIPagination OAIFeedConnections::getPagination() const {
    return m_pagination;
}
void OAIFeedConnections::setPagination(const OAIPagination &pagination) {
    m_pagination = pagination;
    m_pagination_isSet = true;
}

bool OAIFeedConnections::is_pagination_Set() const{
    return m_pagination_isSet;
}

bool OAIFeedConnections::is_pagination_Valid() const{
    return m_pagination_isValid;
}

bool OAIFeedConnections::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pagination.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedConnections::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
