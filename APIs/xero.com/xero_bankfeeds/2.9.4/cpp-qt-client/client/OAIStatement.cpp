/**
 * Xero Bank Feeds API
 * The Bank Feeds API is a closed API that is only available to financial institutions that have an established financial services partnership with Xero. If you're an existing financial services partner that wants access, contact your local Partner Manager. If you're a financial institution who wants to provide bank feeds to your business customers, contact us to become a financial services partner.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatement::OAIStatement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatement::OAIStatement() {
    this->initializeModel();
}

OAIStatement::~OAIStatement() {}

void OAIStatement::initializeModel() {

    m_end_balance_isSet = false;
    m_end_balance_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_feed_connection_id_isSet = false;
    m_feed_connection_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_start_balance_isSet = false;
    m_start_balance_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_statement_line_count_isSet = false;
    m_statement_line_count_isValid = false;

    m_statement_lines_isSet = false;
    m_statement_lines_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIStatement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatement::fromJsonObject(QJsonObject json) {

    m_end_balance_isValid = ::OpenAPI::fromJsonValue(m_end_balance, json[QString("endBalance")]);
    m_end_balance_isSet = !json[QString("endBalance")].isNull() && m_end_balance_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_feed_connection_id_isValid = ::OpenAPI::fromJsonValue(m_feed_connection_id, json[QString("feedConnectionId")]);
    m_feed_connection_id_isSet = !json[QString("feedConnectionId")].isNull() && m_feed_connection_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_start_balance_isValid = ::OpenAPI::fromJsonValue(m_start_balance, json[QString("startBalance")]);
    m_start_balance_isSet = !json[QString("startBalance")].isNull() && m_start_balance_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_statement_line_count_isValid = ::OpenAPI::fromJsonValue(m_statement_line_count, json[QString("statementLineCount")]);
    m_statement_line_count_isSet = !json[QString("statementLineCount")].isNull() && m_statement_line_count_isValid;

    m_statement_lines_isValid = ::OpenAPI::fromJsonValue(m_statement_lines, json[QString("statementLines")]);
    m_statement_lines_isSet = !json[QString("statementLines")].isNull() && m_statement_lines_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIStatement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatement::asJsonObject() const {
    QJsonObject obj;
    if (m_end_balance.isSet()) {
        obj.insert(QString("endBalance"), ::OpenAPI::toJsonValue(m_end_balance));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_feed_connection_id_isSet) {
        obj.insert(QString("feedConnectionId"), ::OpenAPI::toJsonValue(m_feed_connection_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_start_balance.isSet()) {
        obj.insert(QString("startBalance"), ::OpenAPI::toJsonValue(m_start_balance));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_statement_line_count_isSet) {
        obj.insert(QString("statementLineCount"), ::OpenAPI::toJsonValue(m_statement_line_count));
    }
    if (m_statement_lines.size() > 0) {
        obj.insert(QString("statementLines"), ::OpenAPI::toJsonValue(m_statement_lines));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIEndBalance OAIStatement::getEndBalance() const {
    return m_end_balance;
}
void OAIStatement::setEndBalance(const OAIEndBalance &end_balance) {
    m_end_balance = end_balance;
    m_end_balance_isSet = true;
}

bool OAIStatement::is_end_balance_Set() const{
    return m_end_balance_isSet;
}

bool OAIStatement::is_end_balance_Valid() const{
    return m_end_balance_isValid;
}

QDate OAIStatement::getEndDate() const {
    return m_end_date;
}
void OAIStatement::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIStatement::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIStatement::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QList<OAIError> OAIStatement::getErrors() const {
    return m_errors;
}
void OAIStatement::setErrors(const QList<OAIError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIStatement::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIStatement::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIStatement::getFeedConnectionId() const {
    return m_feed_connection_id;
}
void OAIStatement::setFeedConnectionId(const QString &feed_connection_id) {
    m_feed_connection_id = feed_connection_id;
    m_feed_connection_id_isSet = true;
}

bool OAIStatement::is_feed_connection_id_Set() const{
    return m_feed_connection_id_isSet;
}

bool OAIStatement::is_feed_connection_id_Valid() const{
    return m_feed_connection_id_isValid;
}

QString OAIStatement::getId() const {
    return m_id;
}
void OAIStatement::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStatement::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStatement::is_id_Valid() const{
    return m_id_isValid;
}

OAIStartBalance OAIStatement::getStartBalance() const {
    return m_start_balance;
}
void OAIStatement::setStartBalance(const OAIStartBalance &start_balance) {
    m_start_balance = start_balance;
    m_start_balance_isSet = true;
}

bool OAIStatement::is_start_balance_Set() const{
    return m_start_balance_isSet;
}

bool OAIStatement::is_start_balance_Valid() const{
    return m_start_balance_isValid;
}

QDate OAIStatement::getStartDate() const {
    return m_start_date;
}
void OAIStatement::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIStatement::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIStatement::is_start_date_Valid() const{
    return m_start_date_isValid;
}

qint32 OAIStatement::getStatementLineCount() const {
    return m_statement_line_count;
}
void OAIStatement::setStatementLineCount(const qint32 &statement_line_count) {
    m_statement_line_count = statement_line_count;
    m_statement_line_count_isSet = true;
}

bool OAIStatement::is_statement_line_count_Set() const{
    return m_statement_line_count_isSet;
}

bool OAIStatement::is_statement_line_count_Valid() const{
    return m_statement_line_count_isValid;
}

QList<OAIStatementLine> OAIStatement::getStatementLines() const {
    return m_statement_lines;
}
void OAIStatement::setStatementLines(const QList<OAIStatementLine> &statement_lines) {
    m_statement_lines = statement_lines;
    m_statement_lines_isSet = true;
}

bool OAIStatement::is_statement_lines_Set() const{
    return m_statement_lines_isSet;
}

bool OAIStatement::is_statement_lines_Valid() const{
    return m_statement_lines_isValid;
}

QString OAIStatement::getStatus() const {
    return m_status;
}
void OAIStatement::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStatement::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStatement::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIStatement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_line_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
