/**
 * Xero Bank Feeds API
 * The Bank Feeds API is a closed API that is only available to financial institutions that have an established financial services partnership with Xero. If you're an existing financial services partner that wants access, contact your local Partner Manager. If you're a financial institution who wants to provide bank feeds to your business customers, contact us to become a financial services partner.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedConnection::OAIFeedConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedConnection::OAIFeedConnection() {
    this->initializeModel();
}

OAIFeedConnection::~OAIFeedConnection() {}

void OAIFeedConnection::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_account_token_isSet = false;
    m_account_token_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIFeedConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedConnection::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_account_token_isValid = ::OpenAPI::fromJsonValue(m_account_token, json[QString("accountToken")]);
    m_account_token_isSet = !json[QString("accountToken")].isNull() && m_account_token_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIFeedConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_account_number_isSet) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_account_token_isSet) {
        obj.insert(QString("accountToken"), ::OpenAPI::toJsonValue(m_account_token));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIFeedConnection::getAccountId() const {
    return m_account_id;
}
void OAIFeedConnection::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIFeedConnection::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIFeedConnection::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIFeedConnection::getAccountName() const {
    return m_account_name;
}
void OAIFeedConnection::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIFeedConnection::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIFeedConnection::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIFeedConnection::getAccountNumber() const {
    return m_account_number;
}
void OAIFeedConnection::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIFeedConnection::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIFeedConnection::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QString OAIFeedConnection::getAccountToken() const {
    return m_account_token;
}
void OAIFeedConnection::setAccountToken(const QString &account_token) {
    m_account_token = account_token;
    m_account_token_isSet = true;
}

bool OAIFeedConnection::is_account_token_Set() const{
    return m_account_token_isSet;
}

bool OAIFeedConnection::is_account_token_Valid() const{
    return m_account_token_isValid;
}

QString OAIFeedConnection::getAccountType() const {
    return m_account_type;
}
void OAIFeedConnection::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIFeedConnection::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIFeedConnection::is_account_type_Valid() const{
    return m_account_type_isValid;
}

OAICountryCode OAIFeedConnection::getCountry() const {
    return m_country;
}
void OAIFeedConnection::setCountry(const OAICountryCode &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIFeedConnection::is_country_Set() const{
    return m_country_isSet;
}

bool OAIFeedConnection::is_country_Valid() const{
    return m_country_isValid;
}

OAICurrencyCode OAIFeedConnection::getCurrency() const {
    return m_currency;
}
void OAIFeedConnection::setCurrency(const OAICurrencyCode &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIFeedConnection::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIFeedConnection::is_currency_Valid() const{
    return m_currency_isValid;
}

OAIError OAIFeedConnection::getError() const {
    return m_error;
}
void OAIFeedConnection::setError(const OAIError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIFeedConnection::is_error_Set() const{
    return m_error_isSet;
}

bool OAIFeedConnection::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIFeedConnection::getId() const {
    return m_id;
}
void OAIFeedConnection::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFeedConnection::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFeedConnection::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFeedConnection::getStatus() const {
    return m_status;
}
void OAIFeedConnection::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFeedConnection::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFeedConnection::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIFeedConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
