/**
 * Xero Bank Feeds API
 * The Bank Feeds API is a closed API that is only available to financial institutions that have an established financial services partnership with Xero. If you're an existing financial services partner that wants access, contact your local Partner Manager. If you're a financial institution who wants to provide bank feeds to your business customers, contact us to become a financial services partner.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBankFeedsApi_H
#define OAI_OAIBankFeedsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIFeedConnection.h"
#include "OAIFeedConnections.h"
#include "OAIStatement.h"
#include "OAIStatements.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBankFeedsApi : public QObject {
    Q_OBJECT

public:
    OAIBankFeedsApi(const int timeOut = 0);
    ~OAIBankFeedsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_feed_connections OAIFeedConnections [required]
    */
    virtual void createFeedConnections(const QString &xero_tenant_id, const OAIFeedConnections &oai_feed_connections);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_statements OAIStatements [optional]
    */
    virtual void createStatements(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<OAIStatements> &oai_statements = ::OpenAPI::OptionalParam<OAIStatements>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  oai_feed_connections OAIFeedConnections [required]
    */
    virtual void deleteFeedConnections(const QString &xero_tenant_id, const OAIFeedConnections &oai_feed_connections);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getFeedConnection(const QString &xero_tenant_id, const QString &id);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void getFeedConnections(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  statement_id QString [required]
    * @param[in]  statement_id2 QString [required]
    */
    virtual void getStatement(const QString &xero_tenant_id, const QString &statement_id, const QString &statement_id2);

    /**
    * @param[in]  xero_tenant_id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  xero_application_id QString [optional]
    * @param[in]  xero_user_id QString [optional]
    */
    virtual void getStatements(const QString &xero_tenant_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &xero_application_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &xero_user_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createFeedConnectionsCallback(OAIHttpRequestWorker *worker);
    void createStatementsCallback(OAIHttpRequestWorker *worker);
    void deleteFeedConnectionsCallback(OAIHttpRequestWorker *worker);
    void getFeedConnectionCallback(OAIHttpRequestWorker *worker);
    void getFeedConnectionsCallback(OAIHttpRequestWorker *worker);
    void getStatementCallback(OAIHttpRequestWorker *worker);
    void getStatementsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createFeedConnectionsSignal(OAIFeedConnections summary);
    void createStatementsSignal(OAIStatements summary);
    void deleteFeedConnectionsSignal(OAIFeedConnections summary);
    void getFeedConnectionSignal(OAIFeedConnection summary);
    void getFeedConnectionsSignal(OAIFeedConnections summary);
    void getStatementSignal(OAIStatement summary);
    void getStatementsSignal(OAIStatements summary);


    void createFeedConnectionsSignalFull(OAIHttpRequestWorker *worker, OAIFeedConnections summary);
    void createStatementsSignalFull(OAIHttpRequestWorker *worker, OAIStatements summary);
    void deleteFeedConnectionsSignalFull(OAIHttpRequestWorker *worker, OAIFeedConnections summary);
    void getFeedConnectionSignalFull(OAIHttpRequestWorker *worker, OAIFeedConnection summary);
    void getFeedConnectionsSignalFull(OAIHttpRequestWorker *worker, OAIFeedConnections summary);
    void getStatementSignalFull(OAIHttpRequestWorker *worker, OAIStatement summary);
    void getStatementsSignalFull(OAIHttpRequestWorker *worker, OAIStatements summary);

    Q_DECL_DEPRECATED_X("Use createFeedConnectionsSignalError() instead")
    void createFeedConnectionsSignalE(OAIFeedConnections summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFeedConnectionsSignalError(OAIFeedConnections summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStatementsSignalError() instead")
    void createStatementsSignalE(OAIStatements summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStatementsSignalError(OAIStatements summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFeedConnectionsSignalError() instead")
    void deleteFeedConnectionsSignalE(OAIFeedConnections summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFeedConnectionsSignalError(OAIFeedConnections summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedConnectionSignalError() instead")
    void getFeedConnectionSignalE(OAIFeedConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedConnectionSignalError(OAIFeedConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedConnectionsSignalError() instead")
    void getFeedConnectionsSignalE(OAIFeedConnections summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedConnectionsSignalError(OAIFeedConnections summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatementSignalError() instead")
    void getStatementSignalE(OAIStatement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatementSignalError(OAIStatement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatementsSignalError() instead")
    void getStatementsSignalE(OAIStatements summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatementsSignalError(OAIStatements summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createFeedConnectionsSignalErrorFull() instead")
    void createFeedConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFeedConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStatementsSignalErrorFull() instead")
    void createStatementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStatementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFeedConnectionsSignalErrorFull() instead")
    void deleteFeedConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFeedConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedConnectionSignalErrorFull() instead")
    void getFeedConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedConnectionsSignalErrorFull() instead")
    void getFeedConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatementSignalErrorFull() instead")
    void getStatementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatementsSignalErrorFull() instead")
    void getStatementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
