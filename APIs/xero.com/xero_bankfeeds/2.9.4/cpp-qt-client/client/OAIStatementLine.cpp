/**
 * Xero Bank Feeds API
 * The Bank Feeds API is a closed API that is only available to financial institutions that have an established financial services partnership with Xero. If you're an existing financial services partner that wants access, contact your local Partner Manager. If you're a financial institution who wants to provide bank feeds to your business customers, contact us to become a financial services partner.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatementLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatementLine::OAIStatementLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatementLine::OAIStatementLine() {
    this->initializeModel();
}

OAIStatementLine::~OAIStatementLine() {}

void OAIStatementLine::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_cheque_number_isSet = false;
    m_cheque_number_isValid = false;

    m_credit_debit_indicator_isSet = false;
    m_credit_debit_indicator_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_payee_name_isSet = false;
    m_payee_name_isValid = false;

    m_posted_date_isSet = false;
    m_posted_date_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAIStatementLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatementLine::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_cheque_number_isValid = ::OpenAPI::fromJsonValue(m_cheque_number, json[QString("chequeNumber")]);
    m_cheque_number_isSet = !json[QString("chequeNumber")].isNull() && m_cheque_number_isValid;

    m_credit_debit_indicator_isValid = ::OpenAPI::fromJsonValue(m_credit_debit_indicator, json[QString("creditDebitIndicator")]);
    m_credit_debit_indicator_isSet = !json[QString("creditDebitIndicator")].isNull() && m_credit_debit_indicator_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_payee_name_isValid = ::OpenAPI::fromJsonValue(m_payee_name, json[QString("payeeName")]);
    m_payee_name_isSet = !json[QString("payeeName")].isNull() && m_payee_name_isValid;

    m_posted_date_isValid = ::OpenAPI::fromJsonValue(m_posted_date, json[QString("postedDate")]);
    m_posted_date_isSet = !json[QString("postedDate")].isNull() && m_posted_date_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transactionId")]);
    m_transaction_id_isSet = !json[QString("transactionId")].isNull() && m_transaction_id_isValid;
}

QString OAIStatementLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatementLine::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_cheque_number_isSet) {
        obj.insert(QString("chequeNumber"), ::OpenAPI::toJsonValue(m_cheque_number));
    }
    if (m_credit_debit_indicator.isSet()) {
        obj.insert(QString("creditDebitIndicator"), ::OpenAPI::toJsonValue(m_credit_debit_indicator));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_payee_name_isSet) {
        obj.insert(QString("payeeName"), ::OpenAPI::toJsonValue(m_payee_name));
    }
    if (m_posted_date_isSet) {
        obj.insert(QString("postedDate"), ::OpenAPI::toJsonValue(m_posted_date));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

double OAIStatementLine::getAmount() const {
    return m_amount;
}
void OAIStatementLine::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIStatementLine::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIStatementLine::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIStatementLine::getChequeNumber() const {
    return m_cheque_number;
}
void OAIStatementLine::setChequeNumber(const QString &cheque_number) {
    m_cheque_number = cheque_number;
    m_cheque_number_isSet = true;
}

bool OAIStatementLine::is_cheque_number_Set() const{
    return m_cheque_number_isSet;
}

bool OAIStatementLine::is_cheque_number_Valid() const{
    return m_cheque_number_isValid;
}

OAICreditDebitIndicator OAIStatementLine::getCreditDebitIndicator() const {
    return m_credit_debit_indicator;
}
void OAIStatementLine::setCreditDebitIndicator(const OAICreditDebitIndicator &credit_debit_indicator) {
    m_credit_debit_indicator = credit_debit_indicator;
    m_credit_debit_indicator_isSet = true;
}

bool OAIStatementLine::is_credit_debit_indicator_Set() const{
    return m_credit_debit_indicator_isSet;
}

bool OAIStatementLine::is_credit_debit_indicator_Valid() const{
    return m_credit_debit_indicator_isValid;
}

QString OAIStatementLine::getDescription() const {
    return m_description;
}
void OAIStatementLine::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStatementLine::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStatementLine::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIStatementLine::getPayeeName() const {
    return m_payee_name;
}
void OAIStatementLine::setPayeeName(const QString &payee_name) {
    m_payee_name = payee_name;
    m_payee_name_isSet = true;
}

bool OAIStatementLine::is_payee_name_Set() const{
    return m_payee_name_isSet;
}

bool OAIStatementLine::is_payee_name_Valid() const{
    return m_payee_name_isValid;
}

QDate OAIStatementLine::getPostedDate() const {
    return m_posted_date;
}
void OAIStatementLine::setPostedDate(const QDate &posted_date) {
    m_posted_date = posted_date;
    m_posted_date_isSet = true;
}

bool OAIStatementLine::is_posted_date_Set() const{
    return m_posted_date_isSet;
}

bool OAIStatementLine::is_posted_date_Valid() const{
    return m_posted_date_isValid;
}

QString OAIStatementLine::getReference() const {
    return m_reference;
}
void OAIStatementLine::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIStatementLine::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIStatementLine::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIStatementLine::getTransactionId() const {
    return m_transaction_id;
}
void OAIStatementLine::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIStatementLine::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIStatementLine::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAIStatementLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cheque_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_debit_indicator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posted_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatementLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
