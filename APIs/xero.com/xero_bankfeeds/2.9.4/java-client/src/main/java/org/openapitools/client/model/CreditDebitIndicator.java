/*
 * Xero Bank Feeds API
 * The Bank Feeds API is a closed API that is only available to financial institutions that have an established financial services partnership with Xero. If you're an existing financial services partner that wants access, contact your local Partner Manager. If you're a financial institution who wants to provide bank feeds to your business customers, contact us to become a financial services partner.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * If the statement balances are credit or debit, the CreditDebitIndicator should be specified from the perspective of the Customer.
 */
@JsonAdapter(CreditDebitIndicator.Adapter.class)
public enum CreditDebitIndicator {
  
  CREDIT("CREDIT"),
  
  DEBIT("DEBIT");

  private String value;

  CreditDebitIndicator(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static CreditDebitIndicator fromValue(String value) {
    for (CreditDebitIndicator b : CreditDebitIndicator.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<CreditDebitIndicator> {
    @Override
    public void write(final JsonWriter jsonWriter, final CreditDebitIndicator enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public CreditDebitIndicator read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return CreditDebitIndicator.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    CreditDebitIndicator.fromValue(value);
  }
}

