/*
 * Xero Bank Feeds API
 * The Bank Feeds API is a closed API that is only available to financial institutions that have an established financial services partnership with Xero. If you're an existing financial services partner that wants access, contact your local Partner Manager. If you're a financial institution who wants to provide bank feeds to your business customers, contact us to become a financial services partner.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.EndBalance;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.StartBalance;
import org.openapitools.client.model.StatementLine;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Statement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:26.172243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Statement {
  public static final String SERIALIZED_NAME_END_BALANCE = "endBalance";
  @SerializedName(SERIALIZED_NAME_END_BALANCE)
  private EndBalance endBalance;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Error> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_FEED_CONNECTION_ID = "feedConnectionId";
  @SerializedName(SERIALIZED_NAME_FEED_CONNECTION_ID)
  private UUID feedConnectionId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_START_BALANCE = "startBalance";
  @SerializedName(SERIALIZED_NAME_START_BALANCE)
  private StartBalance startBalance;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_STATEMENT_LINE_COUNT = "statementLineCount";
  @SerializedName(SERIALIZED_NAME_STATEMENT_LINE_COUNT)
  private Integer statementLineCount;

  public static final String SERIALIZED_NAME_STATEMENT_LINES = "statementLines";
  @SerializedName(SERIALIZED_NAME_STATEMENT_LINES)
  private List<StatementLine> statementLines = new ArrayList<>();

  /**
   * Current status of statements
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("PENDING"),
    
    REJECTED("REJECTED"),
    
    DELIVERED("DELIVERED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public Statement() {
  }

  public Statement endBalance(EndBalance endBalance) {
    this.endBalance = endBalance;
    return this;
  }

  /**
   * Get endBalance
   * @return endBalance
   */
  @javax.annotation.Nullable
  public EndBalance getEndBalance() {
    return endBalance;
  }

  public void setEndBalance(EndBalance endBalance) {
    this.endBalance = endBalance;
  }


  public Statement endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Closing balance date ISO-8601 YYYY-MM-DD
   * @return endDate
   */
  @javax.annotation.Nullable
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  public Statement errors(List<Error> errors) {
    this.errors = errors;
    return this;
  }

  public Statement addErrorsItem(Error errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Get errors
   * @return errors
   */
  @javax.annotation.Nullable
  public List<Error> getErrors() {
    return errors;
  }

  public void setErrors(List<Error> errors) {
    this.errors = errors;
  }


  public Statement feedConnectionId(UUID feedConnectionId) {
    this.feedConnectionId = feedConnectionId;
    return this;
  }

  /**
   * The Xero generated feed connection Id that identifies the Xero Bank Account Container into which the statement should be delivered. This is obtained by calling GET FeedConnections.
   * @return feedConnectionId
   */
  @javax.annotation.Nullable
  public UUID getFeedConnectionId() {
    return feedConnectionId;
  }

  public void setFeedConnectionId(UUID feedConnectionId) {
    this.feedConnectionId = feedConnectionId;
  }


  public Statement id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * GUID used to identify the Statement.
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public Statement startBalance(StartBalance startBalance) {
    this.startBalance = startBalance;
    return this;
  }

  /**
   * Get startBalance
   * @return startBalance
   */
  @javax.annotation.Nullable
  public StartBalance getStartBalance() {
    return startBalance;
  }

  public void setStartBalance(StartBalance startBalance) {
    this.startBalance = startBalance;
  }


  public Statement startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Opening balance date (can be no older than one year from the current date) ISO-8601 YYYY-MM-DD
   * @return startDate
   */
  @javax.annotation.Nullable
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public Statement statementLineCount(Integer statementLineCount) {
    this.statementLineCount = statementLineCount;
    return this;
  }

  /**
   * Get statementLineCount
   * @return statementLineCount
   */
  @javax.annotation.Nullable
  public Integer getStatementLineCount() {
    return statementLineCount;
  }

  public void setStatementLineCount(Integer statementLineCount) {
    this.statementLineCount = statementLineCount;
  }


  public Statement statementLines(List<StatementLine> statementLines) {
    this.statementLines = statementLines;
    return this;
  }

  public Statement addStatementLinesItem(StatementLine statementLinesItem) {
    if (this.statementLines == null) {
      this.statementLines = new ArrayList<>();
    }
    this.statementLines.add(statementLinesItem);
    return this;
  }

  /**
   * Get statementLines
   * @return statementLines
   */
  @javax.annotation.Nullable
  public List<StatementLine> getStatementLines() {
    return statementLines;
  }

  public void setStatementLines(List<StatementLine> statementLines) {
    this.statementLines = statementLines;
  }


  public Statement status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Current status of statements
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Statement statement = (Statement) o;
    return Objects.equals(this.endBalance, statement.endBalance) &&
        Objects.equals(this.endDate, statement.endDate) &&
        Objects.equals(this.errors, statement.errors) &&
        Objects.equals(this.feedConnectionId, statement.feedConnectionId) &&
        Objects.equals(this.id, statement.id) &&
        Objects.equals(this.startBalance, statement.startBalance) &&
        Objects.equals(this.startDate, statement.startDate) &&
        Objects.equals(this.statementLineCount, statement.statementLineCount) &&
        Objects.equals(this.statementLines, statement.statementLines) &&
        Objects.equals(this.status, statement.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endBalance, endDate, errors, feedConnectionId, id, startBalance, startDate, statementLineCount, statementLines, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Statement {\n");
    sb.append("    endBalance: ").append(toIndentedString(endBalance)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    feedConnectionId: ").append(toIndentedString(feedConnectionId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    startBalance: ").append(toIndentedString(startBalance)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    statementLineCount: ").append(toIndentedString(statementLineCount)).append("\n");
    sb.append("    statementLines: ").append(toIndentedString(statementLines)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endBalance");
    openapiFields.add("endDate");
    openapiFields.add("errors");
    openapiFields.add("feedConnectionId");
    openapiFields.add("id");
    openapiFields.add("startBalance");
    openapiFields.add("startDate");
    openapiFields.add("statementLineCount");
    openapiFields.add("statementLines");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Statement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Statement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Statement is not found in the empty JSON string", Statement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Statement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Statement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `endBalance`
      if (jsonObj.get("endBalance") != null && !jsonObj.get("endBalance").isJsonNull()) {
        EndBalance.validateJsonElement(jsonObj.get("endBalance"));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            Error.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("feedConnectionId") != null && !jsonObj.get("feedConnectionId").isJsonNull()) && !jsonObj.get("feedConnectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedConnectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedConnectionId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `startBalance`
      if (jsonObj.get("startBalance") != null && !jsonObj.get("startBalance").isJsonNull()) {
        StartBalance.validateJsonElement(jsonObj.get("startBalance"));
      }
      if (jsonObj.get("statementLines") != null && !jsonObj.get("statementLines").isJsonNull()) {
        JsonArray jsonArraystatementLines = jsonObj.getAsJsonArray("statementLines");
        if (jsonArraystatementLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statementLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statementLines` to be an array in the JSON string but got `%s`", jsonObj.get("statementLines").toString()));
          }

          // validate the optional field `statementLines` (array)
          for (int i = 0; i < jsonArraystatementLines.size(); i++) {
            StatementLine.validateJsonElement(jsonArraystatementLines.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Statement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Statement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Statement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Statement.class));

       return (TypeAdapter<T>) new TypeAdapter<Statement>() {
           @Override
           public void write(JsonWriter out, Statement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Statement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Statement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Statement
   * @throws IOException if the JSON string is invalid with respect to Statement
   */
  public static Statement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Statement.class);
  }

  /**
   * Convert an instance of Statement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

