/*
 * Xero Bank Feeds API
 * The Bank Feeds API is a closed API that is only available to financial institutions that have an established financial services partnership with Xero. If you're an existing financial services partner that wants access, contact your local Partner Manager. If you're a financial institution who wants to provide bank feeds to your business customers, contact us to become a financial services partner.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.FeedConnection;
import org.openapitools.client.model.FeedConnections;
import org.openapitools.client.model.Statement;
import org.openapitools.client.model.Statements;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BankFeedsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BankFeedsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BankFeedsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createFeedConnections
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param feedConnections Feed Connection(s) array object in the body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> success new feed connection(s)response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> failed to create new feed connection(s)response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFeedConnectionsCall(String xeroTenantId, FeedConnections feedConnections, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = feedConnections;

        // create path and map variables
        String localVarPath = "/FeedConnections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFeedConnectionsValidateBeforeCall(String xeroTenantId, FeedConnections feedConnections, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createFeedConnections(Async)");
        }

        // verify the required parameter 'feedConnections' is set
        if (feedConnections == null) {
            throw new ApiException("Missing the required parameter 'feedConnections' when calling createFeedConnections(Async)");
        }

        return createFeedConnectionsCall(xeroTenantId, feedConnections, _callback);

    }

    /**
     * Create one or more new feed connection
     * By passing in the FeedConnections array object in the body, you can create one or more new feed connections
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param feedConnections Feed Connection(s) array object in the body (required)
     * @return FeedConnections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> success new feed connection(s)response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> failed to create new feed connection(s)response </td><td>  -  </td></tr>
     </table>
     */
    public FeedConnections createFeedConnections(String xeroTenantId, FeedConnections feedConnections) throws ApiException {
        ApiResponse<FeedConnections> localVarResp = createFeedConnectionsWithHttpInfo(xeroTenantId, feedConnections);
        return localVarResp.getData();
    }

    /**
     * Create one or more new feed connection
     * By passing in the FeedConnections array object in the body, you can create one or more new feed connections
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param feedConnections Feed Connection(s) array object in the body (required)
     * @return ApiResponse&lt;FeedConnections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> success new feed connection(s)response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> failed to create new feed connection(s)response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeedConnections> createFeedConnectionsWithHttpInfo(String xeroTenantId, FeedConnections feedConnections) throws ApiException {
        okhttp3.Call localVarCall = createFeedConnectionsValidateBeforeCall(xeroTenantId, feedConnections, null);
        Type localVarReturnType = new TypeToken<FeedConnections>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create one or more new feed connection (asynchronously)
     * By passing in the FeedConnections array object in the body, you can create one or more new feed connections
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param feedConnections Feed Connection(s) array object in the body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> success new feed connection(s)response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> failed to create new feed connection(s)response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFeedConnectionsAsync(String xeroTenantId, FeedConnections feedConnections, final ApiCallback<FeedConnections> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFeedConnectionsValidateBeforeCall(xeroTenantId, feedConnections, _callback);
        Type localVarReturnType = new TypeToken<FeedConnections>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStatements
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param statements Statements array of objects in the body (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success returns Statements array of objects in response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Statement failed validation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid application or feed connection </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Duplicate statement received </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Statement exceeds size limit </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Intermittent Xero Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStatementsCall(String xeroTenantId, Statements statements, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = statements;

        // create path and map variables
        String localVarPath = "/Statements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStatementsValidateBeforeCall(String xeroTenantId, Statements statements, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling createStatements(Async)");
        }

        return createStatementsCall(xeroTenantId, statements, _callback);

    }

    /**
     * Creates one or more new statements
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param statements Statements array of objects in the body (optional)
     * @return Statements
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success returns Statements array of objects in response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Statement failed validation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid application or feed connection </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Duplicate statement received </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Statement exceeds size limit </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Intermittent Xero Error </td><td>  -  </td></tr>
     </table>
     */
    public Statements createStatements(String xeroTenantId, Statements statements) throws ApiException {
        ApiResponse<Statements> localVarResp = createStatementsWithHttpInfo(xeroTenantId, statements);
        return localVarResp.getData();
    }

    /**
     * Creates one or more new statements
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param statements Statements array of objects in the body (optional)
     * @return ApiResponse&lt;Statements&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success returns Statements array of objects in response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Statement failed validation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid application or feed connection </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Duplicate statement received </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Statement exceeds size limit </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Intermittent Xero Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Statements> createStatementsWithHttpInfo(String xeroTenantId, Statements statements) throws ApiException {
        okhttp3.Call localVarCall = createStatementsValidateBeforeCall(xeroTenantId, statements, null);
        Type localVarReturnType = new TypeToken<Statements>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates one or more new statements (asynchronously)
     * 
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param statements Statements array of objects in the body (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success returns Statements array of objects in response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Statement failed validation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid application or feed connection </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Duplicate statement received </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Statement exceeds size limit </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Intermittent Xero Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStatementsAsync(String xeroTenantId, Statements statements, final ApiCallback<Statements> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStatementsValidateBeforeCall(xeroTenantId, statements, _callback);
        Type localVarReturnType = new TypeToken<Statements>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFeedConnections
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param feedConnections Feed Connections array object in the body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success response for deleted feed connection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFeedConnectionsCall(String xeroTenantId, FeedConnections feedConnections, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = feedConnections;

        // create path and map variables
        String localVarPath = "/FeedConnections/DeleteRequests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFeedConnectionsValidateBeforeCall(String xeroTenantId, FeedConnections feedConnections, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling deleteFeedConnections(Async)");
        }

        // verify the required parameter 'feedConnections' is set
        if (feedConnections == null) {
            throw new ApiException("Missing the required parameter 'feedConnections' when calling deleteFeedConnections(Async)");
        }

        return deleteFeedConnectionsCall(xeroTenantId, feedConnections, _callback);

    }

    /**
     * Delete an existing feed connection
     * By passing in FeedConnections array object in the body, you can delete a feed connection.
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param feedConnections Feed Connections array object in the body (required)
     * @return FeedConnections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success response for deleted feed connection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public FeedConnections deleteFeedConnections(String xeroTenantId, FeedConnections feedConnections) throws ApiException {
        ApiResponse<FeedConnections> localVarResp = deleteFeedConnectionsWithHttpInfo(xeroTenantId, feedConnections);
        return localVarResp.getData();
    }

    /**
     * Delete an existing feed connection
     * By passing in FeedConnections array object in the body, you can delete a feed connection.
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param feedConnections Feed Connections array object in the body (required)
     * @return ApiResponse&lt;FeedConnections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success response for deleted feed connection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeedConnections> deleteFeedConnectionsWithHttpInfo(String xeroTenantId, FeedConnections feedConnections) throws ApiException {
        okhttp3.Call localVarCall = deleteFeedConnectionsValidateBeforeCall(xeroTenantId, feedConnections, null);
        Type localVarReturnType = new TypeToken<FeedConnections>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing feed connection (asynchronously)
     * By passing in FeedConnections array object in the body, you can delete a feed connection.
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param feedConnections Feed Connections array object in the body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success response for deleted feed connection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFeedConnectionsAsync(String xeroTenantId, FeedConnections feedConnections, final ApiCallback<FeedConnections> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFeedConnectionsValidateBeforeCall(xeroTenantId, feedConnections, _callback);
        Type localVarReturnType = new TypeToken<FeedConnections>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFeedConnection
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param id Unique identifier for retrieving single object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success returns a FeedConnection object matching the id in response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeedConnectionCall(String xeroTenantId, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/FeedConnections/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeedConnectionValidateBeforeCall(String xeroTenantId, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getFeedConnection(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFeedConnection(Async)");
        }

        return getFeedConnectionCall(xeroTenantId, id, _callback);

    }

    /**
     * Retrieve single feed connection based on a unique id provided
     * By passing in a FeedConnection Id options, you can search for matching feed connections
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param id Unique identifier for retrieving single object (required)
     * @return FeedConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success returns a FeedConnection object matching the id in response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public FeedConnection getFeedConnection(String xeroTenantId, UUID id) throws ApiException {
        ApiResponse<FeedConnection> localVarResp = getFeedConnectionWithHttpInfo(xeroTenantId, id);
        return localVarResp.getData();
    }

    /**
     * Retrieve single feed connection based on a unique id provided
     * By passing in a FeedConnection Id options, you can search for matching feed connections
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param id Unique identifier for retrieving single object (required)
     * @return ApiResponse&lt;FeedConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success returns a FeedConnection object matching the id in response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeedConnection> getFeedConnectionWithHttpInfo(String xeroTenantId, UUID id) throws ApiException {
        okhttp3.Call localVarCall = getFeedConnectionValidateBeforeCall(xeroTenantId, id, null);
        Type localVarReturnType = new TypeToken<FeedConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve single feed connection based on a unique id provided (asynchronously)
     * By passing in a FeedConnection Id options, you can search for matching feed connections
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param id Unique identifier for retrieving single object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success returns a FeedConnection object matching the id in response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeedConnectionAsync(String xeroTenantId, UUID id, final ApiCallback<FeedConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeedConnectionValidateBeforeCall(xeroTenantId, id, _callback);
        Type localVarReturnType = new TypeToken<FeedConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFeedConnections
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param page Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page&#x3D;1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned. (optional)
     * @param pageSize Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize&#x3D;100 to specify page size of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> search results matching criteria returned with pagination and items array </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeedConnectionsCall(String xeroTenantId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/FeedConnections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeedConnectionsValidateBeforeCall(String xeroTenantId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getFeedConnections(Async)");
        }

        return getFeedConnectionsCall(xeroTenantId, page, pageSize, _callback);

    }

    /**
     * Searches for feed connections
     * By passing in the appropriate options, you can search for available feed connections in the system.
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param page Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page&#x3D;1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned. (optional)
     * @param pageSize Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize&#x3D;100 to specify page size of 100. (optional)
     * @return FeedConnections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> search results matching criteria returned with pagination and items array </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error response </td><td>  -  </td></tr>
     </table>
     */
    public FeedConnections getFeedConnections(String xeroTenantId, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<FeedConnections> localVarResp = getFeedConnectionsWithHttpInfo(xeroTenantId, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Searches for feed connections
     * By passing in the appropriate options, you can search for available feed connections in the system.
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param page Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page&#x3D;1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned. (optional)
     * @param pageSize Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize&#x3D;100 to specify page size of 100. (optional)
     * @return ApiResponse&lt;FeedConnections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> search results matching criteria returned with pagination and items array </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeedConnections> getFeedConnectionsWithHttpInfo(String xeroTenantId, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getFeedConnectionsValidateBeforeCall(xeroTenantId, page, pageSize, null);
        Type localVarReturnType = new TypeToken<FeedConnections>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Searches for feed connections (asynchronously)
     * By passing in the appropriate options, you can search for available feed connections in the system.
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param page Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page&#x3D;1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned. (optional)
     * @param pageSize Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize&#x3D;100 to specify page size of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> search results matching criteria returned with pagination and items array </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> validation error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeedConnectionsAsync(String xeroTenantId, Integer page, Integer pageSize, final ApiCallback<FeedConnections> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeedConnectionsValidateBeforeCall(xeroTenantId, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<FeedConnections>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStatement
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param statementId statement id for single object (required)
     * @param statementID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching id for single statement </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Statement not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatementCall(String xeroTenantId, UUID statementId, String statementID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Statements/{statementID}"
            .replace("{" + "statementID" + "}", localVarApiClient.escapeString(statementID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (statementId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statementId", statementId));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatementValidateBeforeCall(String xeroTenantId, UUID statementId, String statementID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getStatement(Async)");
        }

        // verify the required parameter 'statementId' is set
        if (statementId == null) {
            throw new ApiException("Missing the required parameter 'statementId' when calling getStatement(Async)");
        }

        // verify the required parameter 'statementID' is set
        if (statementID == null) {
            throw new ApiException("Missing the required parameter 'statementID' when calling getStatement(Async)");
        }

        return getStatementCall(xeroTenantId, statementId, statementID, _callback);

    }

    /**
     * Retrieve single statement based on unique id provided
     * By passing in a statement id, you can search for matching statements
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param statementId statement id for single object (required)
     * @param statementID  (required)
     * @return Statement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching id for single statement </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Statement not found </td><td>  -  </td></tr>
     </table>
     */
    public Statement getStatement(String xeroTenantId, UUID statementId, String statementID) throws ApiException {
        ApiResponse<Statement> localVarResp = getStatementWithHttpInfo(xeroTenantId, statementId, statementID);
        return localVarResp.getData();
    }

    /**
     * Retrieve single statement based on unique id provided
     * By passing in a statement id, you can search for matching statements
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param statementId statement id for single object (required)
     * @param statementID  (required)
     * @return ApiResponse&lt;Statement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching id for single statement </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Statement not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Statement> getStatementWithHttpInfo(String xeroTenantId, UUID statementId, String statementID) throws ApiException {
        okhttp3.Call localVarCall = getStatementValidateBeforeCall(xeroTenantId, statementId, statementID, null);
        Type localVarReturnType = new TypeToken<Statement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve single statement based on unique id provided (asynchronously)
     * By passing in a statement id, you can search for matching statements
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param statementId statement id for single object (required)
     * @param statementID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching id for single statement </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Statement not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatementAsync(String xeroTenantId, UUID statementId, String statementID, final ApiCallback<Statement> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatementValidateBeforeCall(xeroTenantId, statementId, statementID, _callback);
        Type localVarReturnType = new TypeToken<Statement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStatements
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param page unique id for single object (optional)
     * @param pageSize Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize&#x3D;100 to specify page size of 100. (optional)
     * @param xeroApplicationId  (optional, default to 00000000-0000-0000-0000-0000000010000)
     * @param xeroUserId  (optional, default to 00000000-0000-0000-0000-0000030000000)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success returns Statements array of objects response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatementsCall(String xeroTenantId, Integer page, Integer pageSize, String xeroApplicationId, String xeroUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Statements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (xeroTenantId != null) {
            localVarHeaderParams.put("Xero-Tenant-Id", localVarApiClient.parameterToString(xeroTenantId));
        }

        if (xeroApplicationId != null) {
            localVarHeaderParams.put("Xero-Application-Id", localVarApiClient.parameterToString(xeroApplicationId));
        }

        if (xeroUserId != null) {
            localVarHeaderParams.put("Xero-User-Id", localVarApiClient.parameterToString(xeroUserId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatementsValidateBeforeCall(String xeroTenantId, Integer page, Integer pageSize, String xeroApplicationId, String xeroUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xeroTenantId' is set
        if (xeroTenantId == null) {
            throw new ApiException("Missing the required parameter 'xeroTenantId' when calling getStatements(Async)");
        }

        return getStatementsCall(xeroTenantId, page, pageSize, xeroApplicationId, xeroUserId, _callback);

    }

    /**
     * Retrieve all statements
     * By passing in parameters, you can search for matching statements
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param page unique id for single object (optional)
     * @param pageSize Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize&#x3D;100 to specify page size of 100. (optional)
     * @param xeroApplicationId  (optional, default to 00000000-0000-0000-0000-0000000010000)
     * @param xeroUserId  (optional, default to 00000000-0000-0000-0000-0000030000000)
     * @return Statements
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success returns Statements array of objects response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public Statements getStatements(String xeroTenantId, Integer page, Integer pageSize, String xeroApplicationId, String xeroUserId) throws ApiException {
        ApiResponse<Statements> localVarResp = getStatementsWithHttpInfo(xeroTenantId, page, pageSize, xeroApplicationId, xeroUserId);
        return localVarResp.getData();
    }

    /**
     * Retrieve all statements
     * By passing in parameters, you can search for matching statements
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param page unique id for single object (optional)
     * @param pageSize Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize&#x3D;100 to specify page size of 100. (optional)
     * @param xeroApplicationId  (optional, default to 00000000-0000-0000-0000-0000000010000)
     * @param xeroUserId  (optional, default to 00000000-0000-0000-0000-0000030000000)
     * @return ApiResponse&lt;Statements&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success returns Statements array of objects response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Statements> getStatementsWithHttpInfo(String xeroTenantId, Integer page, Integer pageSize, String xeroApplicationId, String xeroUserId) throws ApiException {
        okhttp3.Call localVarCall = getStatementsValidateBeforeCall(xeroTenantId, page, pageSize, xeroApplicationId, xeroUserId, null);
        Type localVarReturnType = new TypeToken<Statements>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all statements (asynchronously)
     * By passing in parameters, you can search for matching statements
     * @param xeroTenantId Xero identifier for Tenant (required)
     * @param page unique id for single object (optional)
     * @param pageSize Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize&#x3D;100 to specify page size of 100. (optional)
     * @param xeroApplicationId  (optional, default to 00000000-0000-0000-0000-0000000010000)
     * @param xeroUserId  (optional, default to 00000000-0000-0000-0000-0000030000000)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success returns Statements array of objects response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatementsAsync(String xeroTenantId, Integer page, Integer pageSize, String xeroApplicationId, String xeroUserId, final ApiCallback<Statements> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatementsValidateBeforeCall(xeroTenantId, page, pageSize, xeroApplicationId, xeroUserId, _callback);
        Type localVarReturnType = new TypeToken<Statements>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
