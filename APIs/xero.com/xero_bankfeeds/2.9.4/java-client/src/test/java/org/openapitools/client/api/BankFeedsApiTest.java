/*
 * Xero Bank Feeds API
 * The Bank Feeds API is a closed API that is only available to financial institutions that have an established financial services partnership with Xero. If you're an existing financial services partner that wants access, contact your local Partner Manager. If you're a financial institution who wants to provide bank feeds to your business customers, contact us to become a financial services partner.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.FeedConnection;
import org.openapitools.client.model.FeedConnections;
import org.openapitools.client.model.Statement;
import org.openapitools.client.model.Statements;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BankFeedsApi
 */
@Disabled
public class BankFeedsApiTest {

    private final BankFeedsApi api = new BankFeedsApi();

    /**
     * Create one or more new feed connection
     *
     * By passing in the FeedConnections array object in the body, you can create one or more new feed connections
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFeedConnectionsTest() throws ApiException {
        String xeroTenantId = null;
        FeedConnections feedConnections = null;
        FeedConnections response = api.createFeedConnections(xeroTenantId, feedConnections);
        // TODO: test validations
    }

    /**
     * Creates one or more new statements
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStatementsTest() throws ApiException {
        String xeroTenantId = null;
        Statements statements = null;
        Statements response = api.createStatements(xeroTenantId, statements);
        // TODO: test validations
    }

    /**
     * Delete an existing feed connection
     *
     * By passing in FeedConnections array object in the body, you can delete a feed connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFeedConnectionsTest() throws ApiException {
        String xeroTenantId = null;
        FeedConnections feedConnections = null;
        FeedConnections response = api.deleteFeedConnections(xeroTenantId, feedConnections);
        // TODO: test validations
    }

    /**
     * Retrieve single feed connection based on a unique id provided
     *
     * By passing in a FeedConnection Id options, you can search for matching feed connections
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeedConnectionTest() throws ApiException {
        String xeroTenantId = null;
        UUID id = null;
        FeedConnection response = api.getFeedConnection(xeroTenantId, id);
        // TODO: test validations
    }

    /**
     * Searches for feed connections
     *
     * By passing in the appropriate options, you can search for available feed connections in the system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeedConnectionsTest() throws ApiException {
        String xeroTenantId = null;
        Integer page = null;
        Integer pageSize = null;
        FeedConnections response = api.getFeedConnections(xeroTenantId, page, pageSize);
        // TODO: test validations
    }

    /**
     * Retrieve single statement based on unique id provided
     *
     * By passing in a statement id, you can search for matching statements
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatementTest() throws ApiException {
        String xeroTenantId = null;
        UUID statementId = null;
        String statementID = null;
        Statement response = api.getStatement(xeroTenantId, statementId, statementID);
        // TODO: test validations
    }

    /**
     * Retrieve all statements
     *
     * By passing in parameters, you can search for matching statements
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatementsTest() throws ApiException {
        String xeroTenantId = null;
        Integer page = null;
        Integer pageSize = null;
        String xeroApplicationId = null;
        String xeroUserId = null;
        Statements response = api.getStatements(xeroTenantId, page, pageSize, xeroApplicationId, xeroUserId);
        // TODO: test validations
    }

}
