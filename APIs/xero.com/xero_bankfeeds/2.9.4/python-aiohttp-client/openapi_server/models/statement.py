# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.end_balance import EndBalance
from openapi_server.models.error import Error
from openapi_server.models.start_balance import StartBalance
from openapi_server.models.statement_line import StatementLine
from openapi_server import util


class Statement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_balance: EndBalance=None, end_date: date=None, errors: List[Error]=None, feed_connection_id: str=None, id: str=None, start_balance: StartBalance=None, start_date: date=None, statement_line_count: int=None, statement_lines: List[StatementLine]=None, status: str=None):
        """Statement - a model defined in OpenAPI

        :param end_balance: The end_balance of this Statement.
        :param end_date: The end_date of this Statement.
        :param errors: The errors of this Statement.
        :param feed_connection_id: The feed_connection_id of this Statement.
        :param id: The id of this Statement.
        :param start_balance: The start_balance of this Statement.
        :param start_date: The start_date of this Statement.
        :param statement_line_count: The statement_line_count of this Statement.
        :param statement_lines: The statement_lines of this Statement.
        :param status: The status of this Statement.
        """
        self.openapi_types = {
            'end_balance': EndBalance,
            'end_date': date,
            'errors': List[Error],
            'feed_connection_id': str,
            'id': str,
            'start_balance': StartBalance,
            'start_date': date,
            'statement_line_count': int,
            'statement_lines': List[StatementLine],
            'status': str
        }

        self.attribute_map = {
            'end_balance': 'endBalance',
            'end_date': 'endDate',
            'errors': 'errors',
            'feed_connection_id': 'feedConnectionId',
            'id': 'id',
            'start_balance': 'startBalance',
            'start_date': 'startDate',
            'statement_line_count': 'statementLineCount',
            'statement_lines': 'statementLines',
            'status': 'status'
        }

        self._end_balance = end_balance
        self._end_date = end_date
        self._errors = errors
        self._feed_connection_id = feed_connection_id
        self._id = id
        self._start_balance = start_balance
        self._start_date = start_date
        self._statement_line_count = statement_line_count
        self._statement_lines = statement_lines
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Statement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Statement of this Statement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_balance(self):
        """Gets the end_balance of this Statement.


        :return: The end_balance of this Statement.
        :rtype: EndBalance
        """
        return self._end_balance

    @end_balance.setter
    def end_balance(self, end_balance):
        """Sets the end_balance of this Statement.


        :param end_balance: The end_balance of this Statement.
        :type end_balance: EndBalance
        """

        self._end_balance = end_balance

    @property
    def end_date(self):
        """Gets the end_date of this Statement.

        Closing balance date ISO-8601 YYYY-MM-DD

        :return: The end_date of this Statement.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Statement.

        Closing balance date ISO-8601 YYYY-MM-DD

        :param end_date: The end_date of this Statement.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def errors(self):
        """Gets the errors of this Statement.


        :return: The errors of this Statement.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Statement.


        :param errors: The errors of this Statement.
        :type errors: List[Error]
        """

        self._errors = errors

    @property
    def feed_connection_id(self):
        """Gets the feed_connection_id of this Statement.

        The Xero generated feed connection Id that identifies the Xero Bank Account Container into which the statement should be delivered. This is obtained by calling GET FeedConnections.

        :return: The feed_connection_id of this Statement.
        :rtype: str
        """
        return self._feed_connection_id

    @feed_connection_id.setter
    def feed_connection_id(self, feed_connection_id):
        """Sets the feed_connection_id of this Statement.

        The Xero generated feed connection Id that identifies the Xero Bank Account Container into which the statement should be delivered. This is obtained by calling GET FeedConnections.

        :param feed_connection_id: The feed_connection_id of this Statement.
        :type feed_connection_id: str
        """

        self._feed_connection_id = feed_connection_id

    @property
    def id(self):
        """Gets the id of this Statement.

        GUID used to identify the Statement.

        :return: The id of this Statement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Statement.

        GUID used to identify the Statement.

        :param id: The id of this Statement.
        :type id: str
        """

        self._id = id

    @property
    def start_balance(self):
        """Gets the start_balance of this Statement.


        :return: The start_balance of this Statement.
        :rtype: StartBalance
        """
        return self._start_balance

    @start_balance.setter
    def start_balance(self, start_balance):
        """Sets the start_balance of this Statement.


        :param start_balance: The start_balance of this Statement.
        :type start_balance: StartBalance
        """

        self._start_balance = start_balance

    @property
    def start_date(self):
        """Gets the start_date of this Statement.

        Opening balance date (can be no older than one year from the current date) ISO-8601 YYYY-MM-DD

        :return: The start_date of this Statement.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Statement.

        Opening balance date (can be no older than one year from the current date) ISO-8601 YYYY-MM-DD

        :param start_date: The start_date of this Statement.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def statement_line_count(self):
        """Gets the statement_line_count of this Statement.


        :return: The statement_line_count of this Statement.
        :rtype: int
        """
        return self._statement_line_count

    @statement_line_count.setter
    def statement_line_count(self, statement_line_count):
        """Sets the statement_line_count of this Statement.


        :param statement_line_count: The statement_line_count of this Statement.
        :type statement_line_count: int
        """

        self._statement_line_count = statement_line_count

    @property
    def statement_lines(self):
        """Gets the statement_lines of this Statement.


        :return: The statement_lines of this Statement.
        :rtype: List[StatementLine]
        """
        return self._statement_lines

    @statement_lines.setter
    def statement_lines(self, statement_lines):
        """Sets the statement_lines of this Statement.


        :param statement_lines: The statement_lines of this Statement.
        :type statement_lines: List[StatementLine]
        """

        self._statement_lines = statement_lines

    @property
    def status(self):
        """Gets the status of this Statement.

        Current status of statements

        :return: The status of this Statement.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Statement.

        Current status of statements

        :param status: The status of this Statement.
        :type status: str
        """
        allowed_values = ["PENDING", "REJECTED", "DELIVERED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
