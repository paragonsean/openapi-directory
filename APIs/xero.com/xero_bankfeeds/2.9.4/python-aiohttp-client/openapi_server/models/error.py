# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: str=None, status: int=None, title: str=None, type: str=None):
        """Error - a model defined in OpenAPI

        :param detail: The detail of this Error.
        :param status: The status of this Error.
        :param title: The title of this Error.
        :param type: The type of this Error.
        """
        self.openapi_types = {
            'detail': str,
            'status': int,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'detail': 'detail',
            'status': 'status',
            'title': 'title',
            'type': 'type'
        }

        self._detail = detail
        self._status = status
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this Error.

        Human readable detailed error description.

        :return: The detail of this Error.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Error.

        Human readable detailed error description.

        :param detail: The detail of this Error.
        :type detail: str
        """

        self._detail = detail

    @property
    def status(self):
        """Gets the status of this Error.

        The numeric HTTP Status Code, e.g. 404

        :return: The status of this Error.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Error.

        The numeric HTTP Status Code, e.g. 404

        :param status: The status of this Error.
        :type status: int
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this Error.

        Human readable high level error description.

        :return: The title of this Error.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Error.

        Human readable high level error description.

        :param title: The title of this Error.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Error.

        Identifies the type of error.

        :return: The type of this Error.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Error.

        Identifies the type of error.

        :param type: The type of this Error.
        :type type: str
        """
        allowed_values = ["invalid-request", "invalid-application", "invalid-feed-connection", "duplicate-statement", "invalid-end-balance", "invalid-start-and-end-date", "invalid-start-date", "internal-error", "feed-already-connected-in-current-organisation", "invalid-end-date", "statement-not-found", "feed-connected-in-different-organisation", "feed-already-connected-in-different-organisation", "bank-feed-not-found", "invalid-country-specified", "invalid-organisation-bank-feeds", "invalid-organisation-multi-currency", "invalid-feed-connection-for-organisation", "invalid-user-role", "account-not-valid"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
