# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country_code import CountryCode
from openapi_server.models.currency_code import CurrencyCode
from openapi_server.models.error import Error
from openapi_server import util


class FeedConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, account_name: str=None, account_number: str=None, account_token: str=None, account_type: str=None, country: CountryCode=None, currency: CurrencyCode=None, error: Error=None, id: str=None, status: str=None):
        """FeedConnection - a model defined in OpenAPI

        :param account_id: The account_id of this FeedConnection.
        :param account_name: The account_name of this FeedConnection.
        :param account_number: The account_number of this FeedConnection.
        :param account_token: The account_token of this FeedConnection.
        :param account_type: The account_type of this FeedConnection.
        :param country: The country of this FeedConnection.
        :param currency: The currency of this FeedConnection.
        :param error: The error of this FeedConnection.
        :param id: The id of this FeedConnection.
        :param status: The status of this FeedConnection.
        """
        self.openapi_types = {
            'account_id': str,
            'account_name': str,
            'account_number': str,
            'account_token': str,
            'account_type': str,
            'country': CountryCode,
            'currency': CurrencyCode,
            'error': Error,
            'id': str,
            'status': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'account_name': 'accountName',
            'account_number': 'accountNumber',
            'account_token': 'accountToken',
            'account_type': 'accountType',
            'country': 'country',
            'currency': 'currency',
            'error': 'error',
            'id': 'id',
            'status': 'status'
        }

        self._account_id = account_id
        self._account_name = account_name
        self._account_number = account_number
        self._account_token = account_token
        self._account_type = account_type
        self._country = country
        self._currency = currency
        self._error = error
        self._id = id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeedConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeedConnection of this FeedConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this FeedConnection.

        Xero identifier for a bank account in Xero. Must be included if AccountNumber is not specified.

        :return: The account_id of this FeedConnection.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this FeedConnection.

        Xero identifier for a bank account in Xero. Must be included if AccountNumber is not specified.

        :param account_id: The account_id of this FeedConnection.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this FeedConnection.

        The Account Name will be used for the creation of a new Xero Bank Account if a matching Xero Bank Account is not found.

        :return: The account_name of this FeedConnection.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this FeedConnection.

        The Account Name will be used for the creation of a new Xero Bank Account if a matching Xero Bank Account is not found.

        :param account_name: The account_name of this FeedConnection.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this FeedConnection.

        String(40) when AccountType is BANK String(4) when AccountType is CREDITCARD The Account Number is used to match the feed to a Xero Bank Account. The API will create a new Xero Bank Account if a match to an existing Xero Bank Account is not found. Only the last 4 digits must be supplied for Credit Card numbers. Must be included if AccountId is not specified.

        :return: The account_number of this FeedConnection.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this FeedConnection.

        String(40) when AccountType is BANK String(4) when AccountType is CREDITCARD The Account Number is used to match the feed to a Xero Bank Account. The API will create a new Xero Bank Account if a match to an existing Xero Bank Account is not found. Only the last 4 digits must be supplied for Credit Card numbers. Must be included if AccountId is not specified.

        :param account_number: The account_number of this FeedConnection.
        :type account_number: str
        """

        self._account_number = account_number

    @property
    def account_token(self):
        """Gets the account_token of this FeedConnection.

        This account identifier is generated by the financial institute (FI). This must be unique for your financial institute.

        :return: The account_token of this FeedConnection.
        :rtype: str
        """
        return self._account_token

    @account_token.setter
    def account_token(self, account_token):
        """Sets the account_token of this FeedConnection.

        This account identifier is generated by the financial institute (FI). This must be unique for your financial institute.

        :param account_token: The account_token of this FeedConnection.
        :type account_token: str
        """

        self._account_token = account_token

    @property
    def account_type(self):
        """Gets the account_type of this FeedConnection.

        High level bank account type - BANK CREDITCARD BANK encompasses all bank account types other than credit cards.

        :return: The account_type of this FeedConnection.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this FeedConnection.

        High level bank account type - BANK CREDITCARD BANK encompasses all bank account types other than credit cards.

        :param account_type: The account_type of this FeedConnection.
        :type account_type: str
        """
        allowed_values = ["BANK", "CREDITCARD"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def country(self):
        """Gets the country of this FeedConnection.


        :return: The country of this FeedConnection.
        :rtype: CountryCode
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this FeedConnection.


        :param country: The country of this FeedConnection.
        :type country: CountryCode
        """

        self._country = country

    @property
    def currency(self):
        """Gets the currency of this FeedConnection.


        :return: The currency of this FeedConnection.
        :rtype: CurrencyCode
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this FeedConnection.


        :param currency: The currency of this FeedConnection.
        :type currency: CurrencyCode
        """

        self._currency = currency

    @property
    def error(self):
        """Gets the error of this FeedConnection.


        :return: The error of this FeedConnection.
        :rtype: Error
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this FeedConnection.


        :param error: The error of this FeedConnection.
        :type error: Error
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this FeedConnection.

        GUID used to identify the Account.

        :return: The id of this FeedConnection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FeedConnection.

        GUID used to identify the Account.

        :param id: The id of this FeedConnection.
        :type id: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this FeedConnection.

        the current status of the feed connection

        :return: The status of this FeedConnection.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FeedConnection.

        the current status of the feed connection

        :param status: The status of this FeedConnection.
        :type status: str
        """
        allowed_values = ["PENDING", "REJECTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
