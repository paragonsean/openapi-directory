/**
 * Xero Bank Feeds API
 * The Bank Feeds API is a closed API that is only available to financial institutions that have an established financial services partnership with Xero. If you're an existing financial services partner that wants access, contact your local Partner Manager. If you're a financial institution who wants to provide bank feeds to your business customers, contact us to become a financial services partner.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import FeedConnection from '../model/FeedConnection';
import FeedConnections from '../model/FeedConnections';
import Statement from '../model/Statement';
import Statements from '../model/Statements';

/**
* BankFeeds service.
* @module api/BankFeedsApi
* @version 2.9.4
*/
export default class BankFeedsApi {

    /**
    * Constructs a new BankFeedsApi. 
    * @alias module:api/BankFeedsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createFeedConnections operation.
     * @callback module:api/BankFeedsApi~createFeedConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeedConnections} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create one or more new feed connection
     * By passing in the FeedConnections array object in the body, you can create one or more new feed connections
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/FeedConnections} feedConnections Feed Connection(s) array object in the body
     * @param {module:api/BankFeedsApi~createFeedConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeedConnections}
     */
    createFeedConnections(xeroTenantId, feedConnections, callback) {
      let postBody = feedConnections;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createFeedConnections");
      }
      // verify the required parameter 'feedConnections' is set
      if (feedConnections === undefined || feedConnections === null) {
        throw new Error("Missing the required parameter 'feedConnections' when calling createFeedConnections");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FeedConnections;
      return this.apiClient.callApi(
        '/FeedConnections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStatements operation.
     * @callback module:api/BankFeedsApi~createStatementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Statements} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates one or more new statements
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {module:model/Statements} [statements] Statements array of objects in the body
     * @param {module:api/BankFeedsApi~createStatementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Statements}
     */
    createStatements(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = opts['statements'];
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling createStatements");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Statements;
      return this.apiClient.callApi(
        '/Statements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFeedConnections operation.
     * @callback module:api/BankFeedsApi~deleteFeedConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeedConnections} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing feed connection
     * By passing in FeedConnections array object in the body, you can delete a feed connection.
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {module:model/FeedConnections} feedConnections Feed Connections array object in the body
     * @param {module:api/BankFeedsApi~deleteFeedConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeedConnections}
     */
    deleteFeedConnections(xeroTenantId, feedConnections, callback) {
      let postBody = feedConnections;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling deleteFeedConnections");
      }
      // verify the required parameter 'feedConnections' is set
      if (feedConnections === undefined || feedConnections === null) {
        throw new Error("Missing the required parameter 'feedConnections' when calling deleteFeedConnections");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FeedConnections;
      return this.apiClient.callApi(
        '/FeedConnections/DeleteRequests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeedConnection operation.
     * @callback module:api/BankFeedsApi~getFeedConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeedConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve single feed connection based on a unique id provided
     * By passing in a FeedConnection Id options, you can search for matching feed connections
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} id Unique identifier for retrieving single object
     * @param {module:api/BankFeedsApi~getFeedConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeedConnection}
     */
    getFeedConnection(xeroTenantId, id, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getFeedConnection");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFeedConnection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FeedConnection;
      return this.apiClient.callApi(
        '/FeedConnections/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeedConnections operation.
     * @callback module:api/BankFeedsApi~getFeedConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeedConnections} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for feed connections
     * By passing in the appropriate options, you can search for available feed connections in the system.
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page=1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned.
     * @param {Number} [pageSize] Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize=100 to specify page size of 100.
     * @param {module:api/BankFeedsApi~getFeedConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeedConnections}
     */
    getFeedConnections(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getFeedConnections");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FeedConnections;
      return this.apiClient.callApi(
        '/FeedConnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatement operation.
     * @callback module:api/BankFeedsApi~getStatementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Statement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve single statement based on unique id provided
     * By passing in a statement id, you can search for matching statements
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {String} statementId statement id for single object
     * @param {String} statementID 
     * @param {module:api/BankFeedsApi~getStatementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Statement}
     */
    getStatement(xeroTenantId, statementId, statementID, callback) {
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getStatement");
      }
      // verify the required parameter 'statementId' is set
      if (statementId === undefined || statementId === null) {
        throw new Error("Missing the required parameter 'statementId' when calling getStatement");
      }
      // verify the required parameter 'statementID' is set
      if (statementID === undefined || statementID === null) {
        throw new Error("Missing the required parameter 'statementID' when calling getStatement");
      }

      let pathParams = {
        'statementID': statementID
      };
      let queryParams = {
        'statementId': statementId
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Statement;
      return this.apiClient.callApi(
        '/Statements/{statementID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatements operation.
     * @callback module:api/BankFeedsApi~getStatementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Statements} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all statements
     * By passing in parameters, you can search for matching statements
     * @param {String} xeroTenantId Xero identifier for Tenant
     * @param {Object} opts Optional parameters
     * @param {Number} [page] unique id for single object
     * @param {Number} [pageSize] Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize=100 to specify page size of 100.
     * @param {String} [xeroApplicationId = '00000000-0000-0000-0000-0000000010000')] 
     * @param {String} [xeroUserId = '00000000-0000-0000-0000-0000030000000')] 
     * @param {module:api/BankFeedsApi~getStatementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Statements}
     */
    getStatements(xeroTenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xeroTenantId' is set
      if (xeroTenantId === undefined || xeroTenantId === null) {
        throw new Error("Missing the required parameter 'xeroTenantId' when calling getStatements");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
        'Xero-Tenant-Id': xeroTenantId,
        'Xero-Application-Id': opts['xeroApplicationId'],
        'Xero-User-Id': opts['xeroUserId']
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Statements;
      return this.apiClient.callApi(
        '/Statements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
