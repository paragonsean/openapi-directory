/**
 * Xero Bank Feeds API
 * The Bank Feeds API is a closed API that is only available to financial institutions that have an established financial services partnership with Xero. If you're an existing financial services partner that wants access, contact your local Partner Manager. If you're a financial institution who wants to provide bank feeds to your business customers, contact us to become a financial services partner.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Error model module.
 * @module model/Error
 * @version 2.9.4
 */
class Error {
    /**
     * Constructs a new <code>Error</code>.
     * On error, the API consumer will receive an HTTP response with a HTTP Status Code of 4xx or 5xx and a Content-Type of application/problem+json.
     * @alias module:model/Error
     */
    constructor() { 
        
        Error.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Error</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Error} obj Optional instance to populate.
     * @return {module:model/Error} The populated <code>Error</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Error();

            if (data.hasOwnProperty('detail')) {
                obj['detail'] = ApiClient.convertToType(data['detail'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Error</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Error</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['detail'] && !(typeof data['detail'] === 'string' || data['detail'] instanceof String)) {
            throw new Error("Expected the field `detail` to be a primitive type in the JSON string but got " + data['detail']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Human readable detailed error description.
 * @member {String} detail
 */
Error.prototype['detail'] = undefined;

/**
 * The numeric HTTP Status Code, e.g. 404
 * @member {Number} status
 */
Error.prototype['status'] = undefined;

/**
 * Human readable high level error description.
 * @member {String} title
 */
Error.prototype['title'] = undefined;

/**
 * Identifies the type of error.
 * @member {module:model/Error.TypeEnum} type
 */
Error.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Error['TypeEnum'] = {

    /**
     * value: "invalid-request"
     * @const
     */
    "invalid-request": "invalid-request",

    /**
     * value: "invalid-application"
     * @const
     */
    "invalid-application": "invalid-application",

    /**
     * value: "invalid-feed-connection"
     * @const
     */
    "invalid-feed-connection": "invalid-feed-connection",

    /**
     * value: "duplicate-statement"
     * @const
     */
    "duplicate-statement": "duplicate-statement",

    /**
     * value: "invalid-end-balance"
     * @const
     */
    "invalid-end-balance": "invalid-end-balance",

    /**
     * value: "invalid-start-and-end-date"
     * @const
     */
    "invalid-start-and-end-date": "invalid-start-and-end-date",

    /**
     * value: "invalid-start-date"
     * @const
     */
    "invalid-start-date": "invalid-start-date",

    /**
     * value: "internal-error"
     * @const
     */
    "internal-error": "internal-error",

    /**
     * value: "feed-already-connected-in-current-organisation"
     * @const
     */
    "feed-already-connected-in-current-organisation": "feed-already-connected-in-current-organisation",

    /**
     * value: "invalid-end-date"
     * @const
     */
    "invalid-end-date": "invalid-end-date",

    /**
     * value: "statement-not-found"
     * @const
     */
    "statement-not-found": "statement-not-found",

    /**
     * value: "feed-connected-in-different-organisation"
     * @const
     */
    "feed-connected-in-different-organisation": "feed-connected-in-different-organisation",

    /**
     * value: "feed-already-connected-in-different-organisation"
     * @const
     */
    "feed-already-connected-in-different-organisation": "feed-already-connected-in-different-organisation",

    /**
     * value: "bank-feed-not-found"
     * @const
     */
    "bank-feed-not-found": "bank-feed-not-found",

    /**
     * value: "invalid-country-specified"
     * @const
     */
    "invalid-country-specified": "invalid-country-specified",

    /**
     * value: "invalid-organisation-bank-feeds"
     * @const
     */
    "invalid-organisation-bank-feeds": "invalid-organisation-bank-feeds",

    /**
     * value: "invalid-organisation-multi-currency"
     * @const
     */
    "invalid-organisation-multi-currency": "invalid-organisation-multi-currency",

    /**
     * value: "invalid-feed-connection-for-organisation"
     * @const
     */
    "invalid-feed-connection-for-organisation": "invalid-feed-connection-for-organisation",

    /**
     * value: "invalid-user-role"
     * @const
     */
    "invalid-user-role": "invalid-user-role",

    /**
     * value: "account-not-valid"
     * @const
     */
    "account-not-valid": "account-not-valid"
};



export default Error;

