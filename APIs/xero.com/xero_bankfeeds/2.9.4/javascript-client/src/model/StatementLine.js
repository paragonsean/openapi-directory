/**
 * Xero Bank Feeds API
 * The Bank Feeds API is a closed API that is only available to financial institutions that have an established financial services partnership with Xero. If you're an existing financial services partner that wants access, contact your local Partner Manager. If you're a financial institution who wants to provide bank feeds to your business customers, contact us to become a financial services partner.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreditDebitIndicator from './CreditDebitIndicator';

/**
 * The StatementLine model module.
 * @module model/StatementLine
 * @version 2.9.4
 */
class StatementLine {
    /**
     * Constructs a new <code>StatementLine</code>.
     * the lines details for a statement
     * @alias module:model/StatementLine
     */
    constructor() { 
        
        StatementLine.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StatementLine</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatementLine} obj Optional instance to populate.
     * @return {module:model/StatementLine} The populated <code>StatementLine</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatementLine();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('chequeNumber')) {
                obj['chequeNumber'] = ApiClient.convertToType(data['chequeNumber'], 'String');
            }
            if (data.hasOwnProperty('creditDebitIndicator')) {
                obj['creditDebitIndicator'] = CreditDebitIndicator.constructFromObject(data['creditDebitIndicator']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('payeeName')) {
                obj['payeeName'] = ApiClient.convertToType(data['payeeName'], 'String');
            }
            if (data.hasOwnProperty('postedDate')) {
                obj['postedDate'] = ApiClient.convertToType(data['postedDate'], 'Date');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StatementLine</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StatementLine</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['chequeNumber'] && !(typeof data['chequeNumber'] === 'string' || data['chequeNumber'] instanceof String)) {
            throw new Error("Expected the field `chequeNumber` to be a primitive type in the JSON string but got " + data['chequeNumber']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['payeeName'] && !(typeof data['payeeName'] === 'string' || data['payeeName'] instanceof String)) {
            throw new Error("Expected the field `payeeName` to be a primitive type in the JSON string but got " + data['payeeName']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['transactionId'] && !(typeof data['transactionId'] === 'string' || data['transactionId'] instanceof String)) {
            throw new Error("Expected the field `transactionId` to be a primitive type in the JSON string but got " + data['transactionId']);
        }

        return true;
    }


}



/**
 * Transaction amount
 * @member {Number} amount
 */
StatementLine.prototype['amount'] = undefined;

/**
 * The cheque/check number
 * @member {String} chequeNumber
 */
StatementLine.prototype['chequeNumber'] = undefined;

/**
 * @member {module:model/CreditDebitIndicator} creditDebitIndicator
 */
StatementLine.prototype['creditDebitIndicator'] = undefined;

/**
 * Transaction description
 * @member {String} description
 */
StatementLine.prototype['description'] = undefined;

/**
 * Typically the merchant or payee name
 * @member {String} payeeName
 */
StatementLine.prototype['payeeName'] = undefined;

/**
 * The date that the transaction was processed or cleared as seen in internet banking ISO-8601 YYYY-MM-DD
 * @member {Date} postedDate
 */
StatementLine.prototype['postedDate'] = undefined;

/**
 * Optional field to enhance the Description
 * @member {String} reference
 */
StatementLine.prototype['reference'] = undefined;

/**
 * Financial institute's internal transaction identifier. If provided this field is factored into duplicate detection.
 * @member {String} transactionId
 */
StatementLine.prototype['transactionId'] = undefined;






export default StatementLine;

