/**
 * Xero Bank Feeds API
 * The Bank Feeds API is a closed API that is only available to financial institutions that have an established financial services partnership with Xero. If you're an existing financial services partner that wants access, contact your local Partner Manager. If you're a financial institution who wants to provide bank feeds to your business customers, contact us to become a financial services partner.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CountryCode from './CountryCode';
import CurrencyCode from './CurrencyCode';
import Error from './Error';

/**
 * The FeedConnection model module.
 * @module model/FeedConnection
 * @version 2.9.4
 */
class FeedConnection {
    /**
     * Constructs a new <code>FeedConnection</code>.
     * @alias module:model/FeedConnection
     */
    constructor() { 
        
        FeedConnection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FeedConnection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeedConnection} obj Optional instance to populate.
     * @return {module:model/FeedConnection} The populated <code>FeedConnection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeedConnection();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('accountName')) {
                obj['accountName'] = ApiClient.convertToType(data['accountName'], 'String');
            }
            if (data.hasOwnProperty('accountNumber')) {
                obj['accountNumber'] = ApiClient.convertToType(data['accountNumber'], 'String');
            }
            if (data.hasOwnProperty('accountToken')) {
                obj['accountToken'] = ApiClient.convertToType(data['accountToken'], 'String');
            }
            if (data.hasOwnProperty('accountType')) {
                obj['accountType'] = ApiClient.convertToType(data['accountType'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = CountryCode.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = CurrencyCode.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = Error.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeedConnection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeedConnection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['accountName'] && !(typeof data['accountName'] === 'string' || data['accountName'] instanceof String)) {
            throw new Error("Expected the field `accountName` to be a primitive type in the JSON string but got " + data['accountName']);
        }
        // ensure the json data is a string
        if (data['accountNumber'] && !(typeof data['accountNumber'] === 'string' || data['accountNumber'] instanceof String)) {
            throw new Error("Expected the field `accountNumber` to be a primitive type in the JSON string but got " + data['accountNumber']);
        }
        // ensure the json data is a string
        if (data['accountToken'] && !(typeof data['accountToken'] === 'string' || data['accountToken'] instanceof String)) {
            throw new Error("Expected the field `accountToken` to be a primitive type in the JSON string but got " + data['accountToken']);
        }
        // ensure the json data is a string
        if (data['accountType'] && !(typeof data['accountType'] === 'string' || data['accountType'] instanceof String)) {
            throw new Error("Expected the field `accountType` to be a primitive type in the JSON string but got " + data['accountType']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          Error.validateJSON(data['error']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Xero identifier for a bank account in Xero. Must be included if AccountNumber is not specified.
 * @member {String} accountId
 */
FeedConnection.prototype['accountId'] = undefined;

/**
 * The Account Name will be used for the creation of a new Xero Bank Account if a matching Xero Bank Account is not found.
 * @member {String} accountName
 */
FeedConnection.prototype['accountName'] = undefined;

/**
 * String(40) when AccountType is BANK String(4) when AccountType is CREDITCARD The Account Number is used to match the feed to a Xero Bank Account. The API will create a new Xero Bank Account if a match to an existing Xero Bank Account is not found. Only the last 4 digits must be supplied for Credit Card numbers. Must be included if AccountId is not specified.
 * @member {String} accountNumber
 */
FeedConnection.prototype['accountNumber'] = undefined;

/**
 * This account identifier is generated by the financial institute (FI). This must be unique for your financial institute.
 * @member {String} accountToken
 */
FeedConnection.prototype['accountToken'] = undefined;

/**
 * High level bank account type - BANK CREDITCARD BANK encompasses all bank account types other than credit cards.
 * @member {module:model/FeedConnection.AccountTypeEnum} accountType
 */
FeedConnection.prototype['accountType'] = undefined;

/**
 * @member {module:model/CountryCode} country
 */
FeedConnection.prototype['country'] = undefined;

/**
 * @member {module:model/CurrencyCode} currency
 */
FeedConnection.prototype['currency'] = undefined;

/**
 * @member {module:model/Error} error
 */
FeedConnection.prototype['error'] = undefined;

/**
 * GUID used to identify the Account.
 * @member {String} id
 */
FeedConnection.prototype['id'] = undefined;

/**
 * the current status of the feed connection
 * @member {module:model/FeedConnection.StatusEnum} status
 */
FeedConnection.prototype['status'] = undefined;





/**
 * Allowed values for the <code>accountType</code> property.
 * @enum {String}
 * @readonly
 */
FeedConnection['AccountTypeEnum'] = {

    /**
     * value: "BANK"
     * @const
     */
    "BANK": "BANK",

    /**
     * value: "CREDITCARD"
     * @const
     */
    "CREDITCARD": "CREDITCARD"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
FeedConnection['StatusEnum'] = {

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED"
};



export default FeedConnection;

