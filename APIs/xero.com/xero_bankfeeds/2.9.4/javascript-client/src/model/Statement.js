/**
 * Xero Bank Feeds API
 * The Bank Feeds API is a closed API that is only available to financial institutions that have an established financial services partnership with Xero. If you're an existing financial services partner that wants access, contact your local Partner Manager. If you're a financial institution who wants to provide bank feeds to your business customers, contact us to become a financial services partner.
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EndBalance from './EndBalance';
import Error from './Error';
import StartBalance from './StartBalance';
import StatementLine from './StatementLine';

/**
 * The Statement model module.
 * @module model/Statement
 * @version 2.9.4
 */
class Statement {
    /**
     * Constructs a new <code>Statement</code>.
     * @alias module:model/Statement
     */
    constructor() { 
        
        Statement.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Statement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Statement} obj Optional instance to populate.
     * @return {module:model/Statement} The populated <code>Statement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Statement();

            if (data.hasOwnProperty('endBalance')) {
                obj['endBalance'] = EndBalance.constructFromObject(data['endBalance']);
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [Error]);
            }
            if (data.hasOwnProperty('feedConnectionId')) {
                obj['feedConnectionId'] = ApiClient.convertToType(data['feedConnectionId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('startBalance')) {
                obj['startBalance'] = StartBalance.constructFromObject(data['startBalance']);
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('statementLineCount')) {
                obj['statementLineCount'] = ApiClient.convertToType(data['statementLineCount'], 'Number');
            }
            if (data.hasOwnProperty('statementLines')) {
                obj['statementLines'] = ApiClient.convertToType(data['statementLines'], [StatementLine]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Statement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Statement</code>.
     */
    static validateJSON(data) {
        // validate the optional field `endBalance`
        if (data['endBalance']) { // data not null
          EndBalance.validateJSON(data['endBalance']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                Error.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['feedConnectionId'] && !(typeof data['feedConnectionId'] === 'string' || data['feedConnectionId'] instanceof String)) {
            throw new Error("Expected the field `feedConnectionId` to be a primitive type in the JSON string but got " + data['feedConnectionId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `startBalance`
        if (data['startBalance']) { // data not null
          StartBalance.validateJSON(data['startBalance']);
        }
        if (data['statementLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statementLines'])) {
                throw new Error("Expected the field `statementLines` to be an array in the JSON data but got " + data['statementLines']);
            }
            // validate the optional field `statementLines` (array)
            for (const item of data['statementLines']) {
                StatementLine.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * @member {module:model/EndBalance} endBalance
 */
Statement.prototype['endBalance'] = undefined;

/**
 * Closing balance date ISO-8601 YYYY-MM-DD
 * @member {Date} endDate
 */
Statement.prototype['endDate'] = undefined;

/**
 * @member {Array.<module:model/Error>} errors
 */
Statement.prototype['errors'] = undefined;

/**
 * The Xero generated feed connection Id that identifies the Xero Bank Account Container into which the statement should be delivered. This is obtained by calling GET FeedConnections.
 * @member {String} feedConnectionId
 */
Statement.prototype['feedConnectionId'] = undefined;

/**
 * GUID used to identify the Statement.
 * @member {String} id
 */
Statement.prototype['id'] = undefined;

/**
 * @member {module:model/StartBalance} startBalance
 */
Statement.prototype['startBalance'] = undefined;

/**
 * Opening balance date (can be no older than one year from the current date) ISO-8601 YYYY-MM-DD
 * @member {Date} startDate
 */
Statement.prototype['startDate'] = undefined;

/**
 * @member {Number} statementLineCount
 */
Statement.prototype['statementLineCount'] = undefined;

/**
 * @member {Array.<module:model/StatementLine>} statementLines
 */
Statement.prototype['statementLines'] = undefined;

/**
 * Current status of statements
 * @member {module:model/Statement.StatusEnum} status
 */
Statement.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Statement['StatusEnum'] = {

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED",

    /**
     * value: "DELIVERED"
     * @const
     */
    "DELIVERED": "DELIVERED"
};



export default Statement;

