/**
 * Xero OAuth 2 Identity Service API
 * These endpoints are related to managing authentication tokens and identity for Xero API
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnection::OAIConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnection::OAIConnection() {
    this->initializeModel();
}

OAIConnection::~OAIConnection() {}

void OAIConnection::initializeModel() {

    m_auth_event_id_isSet = false;
    m_auth_event_id_isValid = false;

    m_created_date_utc_isSet = false;
    m_created_date_utc_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_tenant_name_isSet = false;
    m_tenant_name_isValid = false;

    m_tenant_type_isSet = false;
    m_tenant_type_isValid = false;

    m_updated_date_utc_isSet = false;
    m_updated_date_utc_isValid = false;
}

void OAIConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnection::fromJsonObject(QJsonObject json) {

    m_auth_event_id_isValid = ::OpenAPI::fromJsonValue(m_auth_event_id, json[QString("authEventId")]);
    m_auth_event_id_isSet = !json[QString("authEventId")].isNull() && m_auth_event_id_isValid;

    m_created_date_utc_isValid = ::OpenAPI::fromJsonValue(m_created_date_utc, json[QString("createdDateUtc")]);
    m_created_date_utc_isSet = !json[QString("createdDateUtc")].isNull() && m_created_date_utc_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_tenant_name_isValid = ::OpenAPI::fromJsonValue(m_tenant_name, json[QString("tenantName")]);
    m_tenant_name_isSet = !json[QString("tenantName")].isNull() && m_tenant_name_isValid;

    m_tenant_type_isValid = ::OpenAPI::fromJsonValue(m_tenant_type, json[QString("tenantType")]);
    m_tenant_type_isSet = !json[QString("tenantType")].isNull() && m_tenant_type_isValid;

    m_updated_date_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_date_utc, json[QString("updatedDateUtc")]);
    m_updated_date_utc_isSet = !json[QString("updatedDateUtc")].isNull() && m_updated_date_utc_isValid;
}

QString OAIConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_event_id_isSet) {
        obj.insert(QString("authEventId"), ::OpenAPI::toJsonValue(m_auth_event_id));
    }
    if (m_created_date_utc_isSet) {
        obj.insert(QString("createdDateUtc"), ::OpenAPI::toJsonValue(m_created_date_utc));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_tenant_name_isSet) {
        obj.insert(QString("tenantName"), ::OpenAPI::toJsonValue(m_tenant_name));
    }
    if (m_tenant_type_isSet) {
        obj.insert(QString("tenantType"), ::OpenAPI::toJsonValue(m_tenant_type));
    }
    if (m_updated_date_utc_isSet) {
        obj.insert(QString("updatedDateUtc"), ::OpenAPI::toJsonValue(m_updated_date_utc));
    }
    return obj;
}

QString OAIConnection::getAuthEventId() const {
    return m_auth_event_id;
}
void OAIConnection::setAuthEventId(const QString &auth_event_id) {
    m_auth_event_id = auth_event_id;
    m_auth_event_id_isSet = true;
}

bool OAIConnection::is_auth_event_id_Set() const{
    return m_auth_event_id_isSet;
}

bool OAIConnection::is_auth_event_id_Valid() const{
    return m_auth_event_id_isValid;
}

QDateTime OAIConnection::getCreatedDateUtc() const {
    return m_created_date_utc;
}
void OAIConnection::setCreatedDateUtc(const QDateTime &created_date_utc) {
    m_created_date_utc = created_date_utc;
    m_created_date_utc_isSet = true;
}

bool OAIConnection::is_created_date_utc_Set() const{
    return m_created_date_utc_isSet;
}

bool OAIConnection::is_created_date_utc_Valid() const{
    return m_created_date_utc_isValid;
}

QString OAIConnection::getId() const {
    return m_id;
}
void OAIConnection::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConnection::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConnection::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIConnection::getTenantId() const {
    return m_tenant_id;
}
void OAIConnection::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIConnection::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIConnection::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAIConnection::getTenantName() const {
    return m_tenant_name;
}
void OAIConnection::setTenantName(const QString &tenant_name) {
    m_tenant_name = tenant_name;
    m_tenant_name_isSet = true;
}

bool OAIConnection::is_tenant_name_Set() const{
    return m_tenant_name_isSet;
}

bool OAIConnection::is_tenant_name_Valid() const{
    return m_tenant_name_isValid;
}

QString OAIConnection::getTenantType() const {
    return m_tenant_type;
}
void OAIConnection::setTenantType(const QString &tenant_type) {
    m_tenant_type = tenant_type;
    m_tenant_type_isSet = true;
}

bool OAIConnection::is_tenant_type_Set() const{
    return m_tenant_type_isSet;
}

bool OAIConnection::is_tenant_type_Valid() const{
    return m_tenant_type_isValid;
}

QDateTime OAIConnection::getUpdatedDateUtc() const {
    return m_updated_date_utc;
}
void OAIConnection::setUpdatedDateUtc(const QDateTime &updated_date_utc) {
    m_updated_date_utc = updated_date_utc;
    m_updated_date_utc_isSet = true;
}

bool OAIConnection::is_updated_date_utc_Set() const{
    return m_updated_date_utc_isSet;
}

bool OAIConnection::is_updated_date_utc_Valid() const{
    return m_updated_date_utc_isValid;
}

bool OAIConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
