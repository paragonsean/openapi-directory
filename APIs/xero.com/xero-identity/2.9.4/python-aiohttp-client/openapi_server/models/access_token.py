# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, expires_in: float=None, id_token: str=None, refresh_token: str=None, token_type: str=None):
        """AccessToken - a model defined in OpenAPI

        :param access_token: The access_token of this AccessToken.
        :param expires_in: The expires_in of this AccessToken.
        :param id_token: The id_token of this AccessToken.
        :param refresh_token: The refresh_token of this AccessToken.
        :param token_type: The token_type of this AccessToken.
        """
        self.openapi_types = {
            'access_token': str,
            'expires_in': float,
            'id_token': str,
            'refresh_token': str,
            'token_type': str
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'expires_in': 'expires_in',
            'id_token': 'id_token',
            'refresh_token': 'refresh_token',
            'token_type': 'token_type'
        }

        self._access_token = access_token
        self._expires_in = expires_in
        self._id_token = id_token
        self._refresh_token = refresh_token
        self._token_type = token_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessToken of this AccessToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this AccessToken.

        access token provided during authentication flow

        :return: The access_token of this AccessToken.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AccessToken.

        access token provided during authentication flow

        :param access_token: The access_token of this AccessToken.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def expires_in(self):
        """Gets the expires_in of this AccessToken.

        time in milliseconds until access token expires.

        :return: The expires_in of this AccessToken.
        :rtype: float
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this AccessToken.

        time in milliseconds until access token expires.

        :param expires_in: The expires_in of this AccessToken.
        :type expires_in: float
        """

        self._expires_in = expires_in

    @property
    def id_token(self):
        """Gets the id_token of this AccessToken.

        Xero unique identifier

        :return: The id_token of this AccessToken.
        :rtype: str
        """
        return self._id_token

    @id_token.setter
    def id_token(self, id_token):
        """Sets the id_token of this AccessToken.

        Xero unique identifier

        :param id_token: The id_token of this AccessToken.
        :type id_token: str
        """

        self._id_token = id_token

    @property
    def refresh_token(self):
        """Gets the refresh_token of this AccessToken.

        token used to refresh an expired access token

        :return: The refresh_token of this AccessToken.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this AccessToken.

        token used to refresh an expired access token

        :param refresh_token: The refresh_token of this AccessToken.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token

    @property
    def token_type(self):
        """Gets the token_type of this AccessToken.

        type of token i.e. Bearer

        :return: The token_type of this AccessToken.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this AccessToken.

        type of token i.e. Bearer

        :param token_type: The token_type of this AccessToken.
        :type token_type: str
        """

        self._token_type = token_type
