/**
 * Xero OAuth 2 Identity Service API
 * These endpoints are related to managing authentication tokens and identity for Xero API
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Connection model module.
 * @module model/Connection
 * @version 2.9.4
 */
class Connection {
    /**
     * Constructs a new <code>Connection</code>.
     * @alias module:model/Connection
     */
    constructor() { 
        
        Connection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Connection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Connection} obj Optional instance to populate.
     * @return {module:model/Connection} The populated <code>Connection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Connection();

            if (data.hasOwnProperty('authEventId')) {
                obj['authEventId'] = ApiClient.convertToType(data['authEventId'], 'String');
            }
            if (data.hasOwnProperty('createdDateUtc')) {
                obj['createdDateUtc'] = ApiClient.convertToType(data['createdDateUtc'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('tenantName')) {
                obj['tenantName'] = ApiClient.convertToType(data['tenantName'], 'String');
            }
            if (data.hasOwnProperty('tenantType')) {
                obj['tenantType'] = ApiClient.convertToType(data['tenantType'], 'String');
            }
            if (data.hasOwnProperty('updatedDateUtc')) {
                obj['updatedDateUtc'] = ApiClient.convertToType(data['updatedDateUtc'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Connection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Connection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authEventId'] && !(typeof data['authEventId'] === 'string' || data['authEventId'] instanceof String)) {
            throw new Error("Expected the field `authEventId` to be a primitive type in the JSON string but got " + data['authEventId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }
        // ensure the json data is a string
        if (data['tenantName'] && !(typeof data['tenantName'] === 'string' || data['tenantName'] instanceof String)) {
            throw new Error("Expected the field `tenantName` to be a primitive type in the JSON string but got " + data['tenantName']);
        }
        // ensure the json data is a string
        if (data['tenantType'] && !(typeof data['tenantType'] === 'string' || data['tenantType'] instanceof String)) {
            throw new Error("Expected the field `tenantType` to be a primitive type in the JSON string but got " + data['tenantType']);
        }

        return true;
    }


}



/**
 * Identifier shared across connections authorised at the same time
 * @member {String} authEventId
 */
Connection.prototype['authEventId'] = undefined;

/**
 * The date when the user connected this tenant to your app
 * @member {Date} createdDateUtc
 */
Connection.prototype['createdDateUtc'] = undefined;

/**
 * Xero identifier
 * @member {String} id
 */
Connection.prototype['id'] = undefined;

/**
 * Xero identifier of organisation
 * @member {String} tenantId
 */
Connection.prototype['tenantId'] = undefined;

/**
 * Xero tenant name
 * @member {String} tenantName
 */
Connection.prototype['tenantName'] = undefined;

/**
 * Xero tenant type (i.e. ORGANISATION, PRACTICE)
 * @member {String} tenantType
 */
Connection.prototype['tenantType'] = undefined;

/**
 * The date when the user most recently connected this tenant to your app. May differ to the created date if the user has disconnected and subsequently reconnected this tenant to your app.
 * @member {Date} updatedDateUtc
 */
Connection.prototype['updatedDateUtc'] = undefined;






export default Connection;

