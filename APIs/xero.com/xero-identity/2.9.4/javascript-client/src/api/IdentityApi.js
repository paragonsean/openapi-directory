/**
 * Xero OAuth 2 Identity Service API
 * These endpoints are related to managing authentication tokens and identity for Xero API
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Connection from '../model/Connection';

/**
* Identity service.
* @module api/IdentityApi
* @version 2.9.4
*/
export default class IdentityApi {

    /**
    * Constructs a new IdentityApi. 
    * @alias module:api/IdentityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteConnection operation.
     * @callback module:api/IdentityApi~deleteConnectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a connection for this user (i.e. disconnect a tenant)
     * Override the base server url that include version
     * @param {String} id Unique identifier for retrieving single object
     * @param {module:api/IdentityApi~deleteConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConnection(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteConnection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Connections/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConnections operation.
     * @callback module:api/IdentityApi~getConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Connection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the connections for this user
     * Override the base server url that include version
     * @param {Object} opts Optional parameters
     * @param {String} [authEventId] Filter by authEventId
     * @param {module:api/IdentityApi~getConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Connection>}
     */
    getConnections(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'authEventId': opts['authEventId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Connection];
      return this.apiClient.callApi(
        '/Connections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
