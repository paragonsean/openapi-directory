# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.color_dto import ColorDto
from openapi_server.models.font_dto import FontDto
from openapi_server.models.x_origin_point import XOriginPoint
from openapi_server.models.y_origin_point import YOriginPoint
from openapi_server import util


class PdfWriteStringOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, font: FontDto=None, page_number: int=None, text: str=None, text_color: ColorDto=None, x_origin: XOriginPoint=None, x_position: float=None, y_origin: YOriginPoint=None, y_position: float=None):
        """PdfWriteStringOptions - a model defined in OpenAPI

        :param font: The font of this PdfWriteStringOptions.
        :param page_number: The page_number of this PdfWriteStringOptions.
        :param text: The text of this PdfWriteStringOptions.
        :param text_color: The text_color of this PdfWriteStringOptions.
        :param x_origin: The x_origin of this PdfWriteStringOptions.
        :param x_position: The x_position of this PdfWriteStringOptions.
        :param y_origin: The y_origin of this PdfWriteStringOptions.
        :param y_position: The y_position of this PdfWriteStringOptions.
        """
        self.openapi_types = {
            'font': FontDto,
            'page_number': int,
            'text': str,
            'text_color': ColorDto,
            'x_origin': XOriginPoint,
            'x_position': float,
            'y_origin': YOriginPoint,
            'y_position': float
        }

        self.attribute_map = {
            'font': 'font',
            'page_number': 'pageNumber',
            'text': 'text',
            'text_color': 'textColor',
            'x_origin': 'xOrigin',
            'x_position': 'xPosition',
            'y_origin': 'yOrigin',
            'y_position': 'yPosition'
        }

        self._font = font
        self._page_number = page_number
        self._text = text
        self._text_color = text_color
        self._x_origin = x_origin
        self._x_position = x_position
        self._y_origin = y_origin
        self._y_position = y_position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PdfWriteStringOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PdfWriteStringOptions of this PdfWriteStringOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def font(self):
        """Gets the font of this PdfWriteStringOptions.


        :return: The font of this PdfWriteStringOptions.
        :rtype: FontDto
        """
        return self._font

    @font.setter
    def font(self, font):
        """Sets the font of this PdfWriteStringOptions.


        :param font: The font of this PdfWriteStringOptions.
        :type font: FontDto
        """

        self._font = font

    @property
    def page_number(self):
        """Gets the page_number of this PdfWriteStringOptions.

        Get or set which page in the pdf to write on, default is first page.

        :return: The page_number of this PdfWriteStringOptions.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this PdfWriteStringOptions.

        Get or set which page in the pdf to write on, default is first page.

        :param page_number: The page_number of this PdfWriteStringOptions.
        :type page_number: int
        """

        self._page_number = page_number

    @property
    def text(self):
        """Gets the text of this PdfWriteStringOptions.

        The text to write in the pdf

        :return: The text of this PdfWriteStringOptions.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this PdfWriteStringOptions.

        The text to write in the pdf

        :param text: The text of this PdfWriteStringOptions.
        :type text: str
        """

        self._text = text

    @property
    def text_color(self):
        """Gets the text_color of this PdfWriteStringOptions.


        :return: The text_color of this PdfWriteStringOptions.
        :rtype: ColorDto
        """
        return self._text_color

    @text_color.setter
    def text_color(self, text_color):
        """Sets the text_color of this PdfWriteStringOptions.


        :param text_color: The text_color of this PdfWriteStringOptions.
        :type text_color: ColorDto
        """

        self._text_color = text_color

    @property
    def x_origin(self):
        """Gets the x_origin of this PdfWriteStringOptions.


        :return: The x_origin of this PdfWriteStringOptions.
        :rtype: XOriginPoint
        """
        return self._x_origin

    @x_origin.setter
    def x_origin(self, x_origin):
        """Sets the x_origin of this PdfWriteStringOptions.


        :param x_origin: The x_origin of this PdfWriteStringOptions.
        :type x_origin: XOriginPoint
        """

        self._x_origin = x_origin

    @property
    def x_position(self):
        """Gets the x_position of this PdfWriteStringOptions.

        Get or set the X axis position on where to write string, in reference to XOrigin.

        :return: The x_position of this PdfWriteStringOptions.
        :rtype: float
        """
        return self._x_position

    @x_position.setter
    def x_position(self, x_position):
        """Sets the x_position of this PdfWriteStringOptions.

        Get or set the X axis position on where to write string, in reference to XOrigin.

        :param x_position: The x_position of this PdfWriteStringOptions.
        :type x_position: float
        """

        self._x_position = x_position

    @property
    def y_origin(self):
        """Gets the y_origin of this PdfWriteStringOptions.


        :return: The y_origin of this PdfWriteStringOptions.
        :rtype: YOriginPoint
        """
        return self._y_origin

    @y_origin.setter
    def y_origin(self, y_origin):
        """Sets the y_origin of this PdfWriteStringOptions.


        :param y_origin: The y_origin of this PdfWriteStringOptions.
        :type y_origin: YOriginPoint
        """

        self._y_origin = y_origin

    @property
    def y_position(self):
        """Gets the y_position of this PdfWriteStringOptions.

        Get or set the Y axis position on where to write string, in reference to YOrigin.

        :return: The y_position of this PdfWriteStringOptions.
        :rtype: float
        """
        return self._y_position

    @y_position.setter
    def y_position(self, y_position):
        """Sets the y_position of this PdfWriteStringOptions.

        Get or set the Y axis position on where to write string, in reference to YOrigin.

        :param y_position: The y_position of this PdfWriteStringOptions.
        :type y_position: float
        """

        self._y_position = y_position
