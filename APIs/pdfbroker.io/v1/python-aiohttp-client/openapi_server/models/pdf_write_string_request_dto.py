# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pdf_write_string_options import PdfWriteStringOptions
from openapi_server import util


class PdfWriteStringRequestDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, font_file_base64_string: str=None, options: PdfWriteStringOptions=None, pdf_file_base64_string: str=None):
        """PdfWriteStringRequestDto - a model defined in OpenAPI

        :param font_file_base64_string: The font_file_base64_string of this PdfWriteStringRequestDto.
        :param options: The options of this PdfWriteStringRequestDto.
        :param pdf_file_base64_string: The pdf_file_base64_string of this PdfWriteStringRequestDto.
        """
        self.openapi_types = {
            'font_file_base64_string': str,
            'options': PdfWriteStringOptions,
            'pdf_file_base64_string': str
        }

        self.attribute_map = {
            'font_file_base64_string': 'fontFileBase64String',
            'options': 'options',
            'pdf_file_base64_string': 'pdfFileBase64String'
        }

        self._font_file_base64_string = font_file_base64_string
        self._options = options
        self._pdf_file_base64_string = pdf_file_base64_string

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PdfWriteStringRequestDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PdfWriteStringRequestDto of this PdfWriteStringRequestDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def font_file_base64_string(self):
        """Gets the font_file_base64_string of this PdfWriteStringRequestDto.

        System fonts are available, but you can provide your own font file to be embedded in the pdf document. Send font as Base64 encoded string.

        :return: The font_file_base64_string of this PdfWriteStringRequestDto.
        :rtype: str
        """
        return self._font_file_base64_string

    @font_file_base64_string.setter
    def font_file_base64_string(self, font_file_base64_string):
        """Sets the font_file_base64_string of this PdfWriteStringRequestDto.

        System fonts are available, but you can provide your own font file to be embedded in the pdf document. Send font as Base64 encoded string.

        :param font_file_base64_string: The font_file_base64_string of this PdfWriteStringRequestDto.
        :type font_file_base64_string: str
        """

        self._font_file_base64_string = font_file_base64_string

    @property
    def options(self):
        """Gets the options of this PdfWriteStringRequestDto.


        :return: The options of this PdfWriteStringRequestDto.
        :rtype: PdfWriteStringOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this PdfWriteStringRequestDto.


        :param options: The options of this PdfWriteStringRequestDto.
        :type options: PdfWriteStringOptions
        """

        self._options = options

    @property
    def pdf_file_base64_string(self):
        """Gets the pdf_file_base64_string of this PdfWriteStringRequestDto.

        The pdf file to add text to, as Base64 encoded string.

        :return: The pdf_file_base64_string of this PdfWriteStringRequestDto.
        :rtype: str
        """
        return self._pdf_file_base64_string

    @pdf_file_base64_string.setter
    def pdf_file_base64_string(self, pdf_file_base64_string):
        """Sets the pdf_file_base64_string of this PdfWriteStringRequestDto.

        The pdf file to add text to, as Base64 encoded string.

        :param pdf_file_base64_string: The pdf_file_base64_string of this PdfWriteStringRequestDto.
        :type pdf_file_base64_string: str
        """

        self._pdf_file_base64_string = pdf_file_base64_string
