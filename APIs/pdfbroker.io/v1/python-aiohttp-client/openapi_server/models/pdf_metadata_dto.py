# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PdfMetadataDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, enable_add: bool=None, enable_copy: bool=None, enable_modify: bool=None, enable_printing: bool=None, keywords: List[str]=None, owner_password: str=None, subject: str=None, title: str=None, user_password: str=None):
        """PdfMetadataDto - a model defined in OpenAPI

        :param author: The author of this PdfMetadataDto.
        :param enable_add: The enable_add of this PdfMetadataDto.
        :param enable_copy: The enable_copy of this PdfMetadataDto.
        :param enable_modify: The enable_modify of this PdfMetadataDto.
        :param enable_printing: The enable_printing of this PdfMetadataDto.
        :param keywords: The keywords of this PdfMetadataDto.
        :param owner_password: The owner_password of this PdfMetadataDto.
        :param subject: The subject of this PdfMetadataDto.
        :param title: The title of this PdfMetadataDto.
        :param user_password: The user_password of this PdfMetadataDto.
        """
        self.openapi_types = {
            'author': str,
            'enable_add': bool,
            'enable_copy': bool,
            'enable_modify': bool,
            'enable_printing': bool,
            'keywords': List[str],
            'owner_password': str,
            'subject': str,
            'title': str,
            'user_password': str
        }

        self.attribute_map = {
            'author': 'author',
            'enable_add': 'enableAdd',
            'enable_copy': 'enableCopy',
            'enable_modify': 'enableModify',
            'enable_printing': 'enablePrinting',
            'keywords': 'keywords',
            'owner_password': 'ownerPassword',
            'subject': 'subject',
            'title': 'title',
            'user_password': 'userPassword'
        }

        self._author = author
        self._enable_add = enable_add
        self._enable_copy = enable_copy
        self._enable_modify = enable_modify
        self._enable_printing = enable_printing
        self._keywords = keywords
        self._owner_password = owner_password
        self._subject = subject
        self._title = title
        self._user_password = user_password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PdfMetadataDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PdfMetadataDto of this PdfMetadataDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this PdfMetadataDto.

        Pdf document author

        :return: The author of this PdfMetadataDto.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this PdfMetadataDto.

        Pdf document author

        :param author: The author of this PdfMetadataDto.
        :type author: str
        """

        self._author = author

    @property
    def enable_add(self):
        """Gets the enable_add of this PdfMetadataDto.

        Enables or disables adding or modifying text annotations and interactive  form fields.

        :return: The enable_add of this PdfMetadataDto.
        :rtype: bool
        """
        return self._enable_add

    @enable_add.setter
    def enable_add(self, enable_add):
        """Sets the enable_add of this PdfMetadataDto.

        Enables or disables adding or modifying text annotations and interactive  form fields.

        :param enable_add: The enable_add of this PdfMetadataDto.
        :type enable_add: bool
        """

        self._enable_add = enable_add

    @property
    def enable_copy(self):
        """Gets the enable_copy of this PdfMetadataDto.

        Enables or disables copying of text and graphics.

        :return: The enable_copy of this PdfMetadataDto.
        :rtype: bool
        """
        return self._enable_copy

    @enable_copy.setter
    def enable_copy(self, enable_copy):
        """Sets the enable_copy of this PdfMetadataDto.

        Enables or disables copying of text and graphics.

        :param enable_copy: The enable_copy of this PdfMetadataDto.
        :type enable_copy: bool
        """

        self._enable_copy = enable_copy

    @property
    def enable_modify(self):
        """Gets the enable_modify of this PdfMetadataDto.

        Enables or disables modifying document contents (other than text annotations and   interactive form fields).

        :return: The enable_modify of this PdfMetadataDto.
        :rtype: bool
        """
        return self._enable_modify

    @enable_modify.setter
    def enable_modify(self, enable_modify):
        """Sets the enable_modify of this PdfMetadataDto.

        Enables or disables modifying document contents (other than text annotations and   interactive form fields).

        :param enable_modify: The enable_modify of this PdfMetadataDto.
        :type enable_modify: bool
        """

        self._enable_modify = enable_modify

    @property
    def enable_printing(self):
        """Gets the enable_printing of this PdfMetadataDto.

        Enables or disables printing.

        :return: The enable_printing of this PdfMetadataDto.
        :rtype: bool
        """
        return self._enable_printing

    @enable_printing.setter
    def enable_printing(self, enable_printing):
        """Sets the enable_printing of this PdfMetadataDto.

        Enables or disables printing.

        :param enable_printing: The enable_printing of this PdfMetadataDto.
        :type enable_printing: bool
        """

        self._enable_printing = enable_printing

    @property
    def keywords(self):
        """Gets the keywords of this PdfMetadataDto.

        Pdf document keywords

        :return: The keywords of this PdfMetadataDto.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this PdfMetadataDto.

        Pdf document keywords

        :param keywords: The keywords of this PdfMetadataDto.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def owner_password(self):
        """Gets the owner_password of this PdfMetadataDto.

        Specifies the owner password that will protect full access to any generated PDF documents.

        :return: The owner_password of this PdfMetadataDto.
        :rtype: str
        """
        return self._owner_password

    @owner_password.setter
    def owner_password(self, owner_password):
        """Sets the owner_password of this PdfMetadataDto.

        Specifies the owner password that will protect full access to any generated PDF documents.

        :param owner_password: The owner_password of this PdfMetadataDto.
        :type owner_password: str
        """

        self._owner_password = owner_password

    @property
    def subject(self):
        """Gets the subject of this PdfMetadataDto.

        Pdf document subject

        :return: The subject of this PdfMetadataDto.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this PdfMetadataDto.

        Pdf document subject

        :param subject: The subject of this PdfMetadataDto.
        :type subject: str
        """

        self._subject = subject

    @property
    def title(self):
        """Gets the title of this PdfMetadataDto.

        Pdf document title

        :return: The title of this PdfMetadataDto.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PdfMetadataDto.

        Pdf document title

        :param title: The title of this PdfMetadataDto.
        :type title: str
        """

        self._title = title

    @property
    def user_password(self):
        """Gets the user_password of this PdfMetadataDto.

        Specifies the user password that will protect access to any generated PDF documents.

        :return: The user_password of this PdfMetadataDto.
        :rtype: str
        """
        return self._user_password

    @user_password.setter
    def user_password(self, user_password):
        """Sets the user_password of this PdfMetadataDto.

        Specifies the user password that will protect access to any generated PDF documents.

        :param user_password: The user_password of this PdfMetadataDto.
        :type user_password: str
        """

        self._user_password = user_password
