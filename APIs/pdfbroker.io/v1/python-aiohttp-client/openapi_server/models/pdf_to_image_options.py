# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PdfToImageOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, height: int=None, horizontal_resolution: float=None, image_format: str=None, jpeg_quality: int=None, page_number: int=None, png_compression_level: int=None, transparent: bool=None, vertical_resolution: float=None, width: int=None):
        """PdfToImageOptions - a model defined in OpenAPI

        :param height: The height of this PdfToImageOptions.
        :param horizontal_resolution: The horizontal_resolution of this PdfToImageOptions.
        :param image_format: The image_format of this PdfToImageOptions.
        :param jpeg_quality: The jpeg_quality of this PdfToImageOptions.
        :param page_number: The page_number of this PdfToImageOptions.
        :param png_compression_level: The png_compression_level of this PdfToImageOptions.
        :param transparent: The transparent of this PdfToImageOptions.
        :param vertical_resolution: The vertical_resolution of this PdfToImageOptions.
        :param width: The width of this PdfToImageOptions.
        """
        self.openapi_types = {
            'height': int,
            'horizontal_resolution': float,
            'image_format': str,
            'jpeg_quality': int,
            'page_number': int,
            'png_compression_level': int,
            'transparent': bool,
            'vertical_resolution': float,
            'width': int
        }

        self.attribute_map = {
            'height': 'height',
            'horizontal_resolution': 'horizontalResolution',
            'image_format': 'imageFormat',
            'jpeg_quality': 'jpegQuality',
            'page_number': 'pageNumber',
            'png_compression_level': 'pngCompressionLevel',
            'transparent': 'transparent',
            'vertical_resolution': 'verticalResolution',
            'width': 'width'
        }

        self._height = height
        self._horizontal_resolution = horizontal_resolution
        self._image_format = image_format
        self._jpeg_quality = jpeg_quality
        self._page_number = page_number
        self._png_compression_level = png_compression_level
        self._transparent = transparent
        self._vertical_resolution = vertical_resolution
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PdfToImageOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PdfToImageOptions of this PdfToImageOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def height(self):
        """Gets the height of this PdfToImageOptions.

        Set the height of the output image, default value is width of source document. To scale height, and keeping proportions, do not set width;

        :return: The height of this PdfToImageOptions.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this PdfToImageOptions.

        Set the height of the output image, default value is width of source document. To scale height, and keeping proportions, do not set width;

        :param height: The height of this PdfToImageOptions.
        :type height: int
        """

        self._height = height

    @property
    def horizontal_resolution(self):
        """Gets the horizontal_resolution of this PdfToImageOptions.

        Set the horizontal resolution, default is 96 dpi;

        :return: The horizontal_resolution of this PdfToImageOptions.
        :rtype: float
        """
        return self._horizontal_resolution

    @horizontal_resolution.setter
    def horizontal_resolution(self, horizontal_resolution):
        """Sets the horizontal_resolution of this PdfToImageOptions.

        Set the horizontal resolution, default is 96 dpi;

        :param horizontal_resolution: The horizontal_resolution of this PdfToImageOptions.
        :type horizontal_resolution: float
        """

        self._horizontal_resolution = horizontal_resolution

    @property
    def image_format(self):
        """Gets the image_format of this PdfToImageOptions.

        Valid options are \"image/jpeg\", \"image/png\" or \"image/gif\". Default is \"image/png\"

        :return: The image_format of this PdfToImageOptions.
        :rtype: str
        """
        return self._image_format

    @image_format.setter
    def image_format(self, image_format):
        """Sets the image_format of this PdfToImageOptions.

        Valid options are \"image/jpeg\", \"image/png\" or \"image/gif\". Default is \"image/png\"

        :param image_format: The image_format of this PdfToImageOptions.
        :type image_format: str
        """

        self._image_format = image_format

    @property
    def jpeg_quality(self):
        """Gets the jpeg_quality of this PdfToImageOptions.

        Sets the quality of jpeg images, range 0 to 100, default is 75

        :return: The jpeg_quality of this PdfToImageOptions.
        :rtype: int
        """
        return self._jpeg_quality

    @jpeg_quality.setter
    def jpeg_quality(self, jpeg_quality):
        """Sets the jpeg_quality of this PdfToImageOptions.

        Sets the quality of jpeg images, range 0 to 100, default is 75

        :param jpeg_quality: The jpeg_quality of this PdfToImageOptions.
        :type jpeg_quality: int
        """

        self._jpeg_quality = jpeg_quality

    @property
    def page_number(self):
        """Gets the page_number of this PdfToImageOptions.

        Which page of the pdf file to generate image from, default is first page

        :return: The page_number of this PdfToImageOptions.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this PdfToImageOptions.

        Which page of the pdf file to generate image from, default is first page

        :param page_number: The page_number of this PdfToImageOptions.
        :type page_number: int
        """

        self._page_number = page_number

    @property
    def png_compression_level(self):
        """Gets the png_compression_level of this PdfToImageOptions.

        Sets the png compression level, range 1 - 9, default is 6

        :return: The png_compression_level of this PdfToImageOptions.
        :rtype: int
        """
        return self._png_compression_level

    @png_compression_level.setter
    def png_compression_level(self, png_compression_level):
        """Sets the png_compression_level of this PdfToImageOptions.

        Sets the png compression level, range 1 - 9, default is 6

        :param png_compression_level: The png_compression_level of this PdfToImageOptions.
        :type png_compression_level: int
        """

        self._png_compression_level = png_compression_level

    @property
    def transparent(self):
        """Gets the transparent of this PdfToImageOptions.

        Keep the background of the image transparent. This setting is not available in JPEG-files, since transparency is not supported in the JPEG format.

        :return: The transparent of this PdfToImageOptions.
        :rtype: bool
        """
        return self._transparent

    @transparent.setter
    def transparent(self, transparent):
        """Sets the transparent of this PdfToImageOptions.

        Keep the background of the image transparent. This setting is not available in JPEG-files, since transparency is not supported in the JPEG format.

        :param transparent: The transparent of this PdfToImageOptions.
        :type transparent: bool
        """

        self._transparent = transparent

    @property
    def vertical_resolution(self):
        """Gets the vertical_resolution of this PdfToImageOptions.

        Set the vertical resolution, default is 96 dpi;

        :return: The vertical_resolution of this PdfToImageOptions.
        :rtype: float
        """
        return self._vertical_resolution

    @vertical_resolution.setter
    def vertical_resolution(self, vertical_resolution):
        """Sets the vertical_resolution of this PdfToImageOptions.

        Set the vertical resolution, default is 96 dpi;

        :param vertical_resolution: The vertical_resolution of this PdfToImageOptions.
        :type vertical_resolution: float
        """

        self._vertical_resolution = vertical_resolution

    @property
    def width(self):
        """Gets the width of this PdfToImageOptions.

        Set the width of the output image, default value is width of source document. To scale width, and keeping proportions, do not set height;

        :return: The width of this PdfToImageOptions.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this PdfToImageOptions.

        Set the width of the output image, default value is width of source document. To scale width, and keeping proportions, do not set height;

        :param width: The width of this PdfToImageOptions.
        :type width: int
        """

        self._width = width
