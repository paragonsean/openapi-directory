# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pdf_to_image_options import PdfToImageOptions
from openapi_server import util


class PdfToImageRequestDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, options: PdfToImageOptions=None, pdf_file_base64_string: str=None):
        """PdfToImageRequestDto - a model defined in OpenAPI

        :param options: The options of this PdfToImageRequestDto.
        :param pdf_file_base64_string: The pdf_file_base64_string of this PdfToImageRequestDto.
        """
        self.openapi_types = {
            'options': PdfToImageOptions,
            'pdf_file_base64_string': str
        }

        self.attribute_map = {
            'options': 'options',
            'pdf_file_base64_string': 'pdfFileBase64String'
        }

        self._options = options
        self._pdf_file_base64_string = pdf_file_base64_string

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PdfToImageRequestDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PdfToImageRequestDto of this PdfToImageRequestDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def options(self):
        """Gets the options of this PdfToImageRequestDto.


        :return: The options of this PdfToImageRequestDto.
        :rtype: PdfToImageOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this PdfToImageRequestDto.


        :param options: The options of this PdfToImageRequestDto.
        :type options: PdfToImageOptions
        """

        self._options = options

    @property
    def pdf_file_base64_string(self):
        """Gets the pdf_file_base64_string of this PdfToImageRequestDto.

        The pdf file to generate image from, as Base64 encoded string.

        :return: The pdf_file_base64_string of this PdfToImageRequestDto.
        :rtype: str
        """
        return self._pdf_file_base64_string

    @pdf_file_base64_string.setter
    def pdf_file_base64_string(self, pdf_file_base64_string):
        """Sets the pdf_file_base64_string of this PdfToImageRequestDto.

        The pdf file to generate image from, as Base64 encoded string.

        :param pdf_file_base64_string: The pdf_file_base64_string of this PdfToImageRequestDto.
        :type pdf_file_base64_string: str
        """

        self._pdf_file_base64_string = pdf_file_base64_string
