/**
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiPdfPdfconcatPostRequest from '../model/ApiPdfPdfconcatPostRequest';
import ApiPdfPdftoimagePostRequest from '../model/ApiPdfPdftoimagePostRequest';
import ApiPdfPdfwritestringPostRequest from '../model/ApiPdfPdfwritestringPostRequest';
import ApiPdfXslfoPostRequest from '../model/ApiPdfXslfoPostRequest';
import ApiPdfXslfowithtransformPostRequest from '../model/ApiPdfXslfowithtransformPostRequest';
import ErrorResponseDto from '../model/ErrorResponseDto';
import FoRequestDto from '../model/FoRequestDto';
import FoTransformRequestDto from '../model/FoTransformRequestDto';
import ImageResponseDto from '../model/ImageResponseDto';
import PdfConcatenationRequestDto from '../model/PdfConcatenationRequestDto';
import PdfResponseDto from '../model/PdfResponseDto';
import PdfToImageRequestDto from '../model/PdfToImageRequestDto';
import PdfWriteStringRequestDto from '../model/PdfWriteStringRequestDto';
import WkHtmlToPdfRequestDto from '../model/WkHtmlToPdfRequestDto';

/**
* Pdf service.
* @module api/PdfApi
* @version v1
*/
export default class PdfApi {

    /**
    * Constructs a new PdfApi. 
    * @alias module:api/PdfApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiPdfGet operation.
     * @callback module:api/PdfApi~apiPdfGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Basic method to verify api is up and running
     * @param {module:api/PdfApi~apiPdfGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPdfGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pdf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPdfPdfconcatPost operation.
     * @callback module:api/PdfApi~apiPdfPdfconcatPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PdfResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Concatenate multiple pdf files into single pdf file..
     * @param {Object} opts Optional parameters
     * @param {module:model/PdfConcatenationRequestDto} [pdfConcatenationRequestDto] PdfConcat Request. Add two or more pdf files and concatenate pages into single pdf document.
     * @param {module:api/PdfApi~apiPdfPdfconcatPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PdfResponseDto}
     */
    apiPdfPdfconcatPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['pdfConcatenationRequestDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json', 'application/pdf'];
      let returnType = PdfResponseDto;
      return this.apiClient.callApi(
        '/api/pdf/pdfconcat', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPdfPdftoimagePost operation.
     * @callback module:api/PdfApi~apiPdfPdftoimagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate an image of to provided pdf file
     * @param {Object} opts Optional parameters
     * @param {module:model/PdfToImageRequestDto} [pdfToImageRequestDto] PdfToImage Request. Create an image of a page in an existing pdf document.
     * @param {module:api/PdfApi~apiPdfPdftoimagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageResponseDto}
     */
    apiPdfPdftoimagePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['pdfToImageRequestDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json', 'image/gif', 'image/jpeg', 'image/png'];
      let returnType = ImageResponseDto;
      return this.apiClient.callApi(
        '/api/pdf/pdftoimage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPdfPdfwritestringPost operation.
     * @callback module:api/PdfApi~apiPdfPdfwritestringPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PdfResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Write text on a page in a pdf document.
     * @param {Object} opts Optional parameters
     * @param {module:model/PdfWriteStringRequestDto} [pdfWriteStringRequestDto] PdfWriteString Request. Write string on page in pdf document
     * @param {module:api/PdfApi~apiPdfPdfwritestringPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PdfResponseDto}
     */
    apiPdfPdfwritestringPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['pdfWriteStringRequestDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json', 'application/pdf'];
      let returnType = PdfResponseDto;
      return this.apiClient.callApi(
        '/api/pdf/pdfwritestring', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPdfWkhtmltopdfPost operation.
     * @callback module:api/PdfApi~apiPdfWkhtmltopdfPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PdfResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate pdf file from url using the excellent tool wkhtmltopdf.
     * @param {Object} opts Optional parameters
     * @param {module:model/WkHtmlToPdfRequestDto} [wkHtmlToPdfRequestDto] WkHtmlToPdf Request. Generate pdf from html, either from url or base64 encoded html string
     * @param {module:api/PdfApi~apiPdfWkhtmltopdfPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PdfResponseDto}
     */
    apiPdfWkhtmltopdfPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['wkHtmlToPdfRequestDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/pdf'];
      let returnType = PdfResponseDto;
      return this.apiClient.callApi(
        '/api/pdf/wkhtmltopdf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPdfXslfoPost operation.
     * @callback module:api/PdfApi~apiPdfXslfoPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PdfResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create pdf-file from complete XSL-FO document.
     * @param {Object} opts Optional parameters
     * @param {module:model/FoRequestDto} [foRequestDto] XSL-FO Request, the basic XSL-FO request. Post your XSL-FO document and digital resources, either as 'multipart/form-data' or 'application/json'
     * @param {module:api/PdfApi~apiPdfXslfoPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PdfResponseDto}
     */
    apiPdfXslfoPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['foRequestDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json', 'application/pdf'];
      let returnType = PdfResponseDto;
      return this.apiClient.callApi(
        '/api/pdf/xslfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPdfXslfowithtransformPost operation.
     * @callback module:api/PdfApi~apiPdfXslfowithtransformPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PdfResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create pdf-file from transforming xml document with Xsl-Fo transform document.
     * @param {Object} opts Optional parameters
     * @param {module:model/FoTransformRequestDto} [foTransformRequestDto] XSL-FO Transform Request. The XSL-FO is transformed on the supplied xml data document. Post your XSL-FO transform document and xml data document aloing with your digital resources, either as 'multipart/form-data' or 'application/json'
     * @param {module:api/PdfApi~apiPdfXslfowithtransformPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PdfResponseDto}
     */
    apiPdfXslfowithtransformPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['foTransformRequestDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json', 'application/pdf'];
      let returnType = PdfResponseDto;
      return this.apiClient.callApi(
        '/api/pdf/xslfowithtransform', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
