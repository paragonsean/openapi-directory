/**
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PdfMetadataDto model module.
 * @module model/PdfMetadataDto
 * @version v1
 */
class PdfMetadataDto {
    /**
     * Constructs a new <code>PdfMetadataDto</code>.
     * Enter meta data for pdf document
     * @alias module:model/PdfMetadataDto
     */
    constructor() { 
        
        PdfMetadataDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PdfMetadataDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PdfMetadataDto} obj Optional instance to populate.
     * @return {module:model/PdfMetadataDto} The populated <code>PdfMetadataDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PdfMetadataDto();

            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('enableAdd')) {
                obj['enableAdd'] = ApiClient.convertToType(data['enableAdd'], 'Boolean');
            }
            if (data.hasOwnProperty('enableCopy')) {
                obj['enableCopy'] = ApiClient.convertToType(data['enableCopy'], 'Boolean');
            }
            if (data.hasOwnProperty('enableModify')) {
                obj['enableModify'] = ApiClient.convertToType(data['enableModify'], 'Boolean');
            }
            if (data.hasOwnProperty('enablePrinting')) {
                obj['enablePrinting'] = ApiClient.convertToType(data['enablePrinting'], 'Boolean');
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], ['String']);
            }
            if (data.hasOwnProperty('ownerPassword')) {
                obj['ownerPassword'] = ApiClient.convertToType(data['ownerPassword'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('userPassword')) {
                obj['userPassword'] = ApiClient.convertToType(data['userPassword'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PdfMetadataDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PdfMetadataDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keywords'])) {
            throw new Error("Expected the field `keywords` to be an array in the JSON data but got " + data['keywords']);
        }
        // ensure the json data is a string
        if (data['ownerPassword'] && !(typeof data['ownerPassword'] === 'string' || data['ownerPassword'] instanceof String)) {
            throw new Error("Expected the field `ownerPassword` to be a primitive type in the JSON string but got " + data['ownerPassword']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['userPassword'] && !(typeof data['userPassword'] === 'string' || data['userPassword'] instanceof String)) {
            throw new Error("Expected the field `userPassword` to be a primitive type in the JSON string but got " + data['userPassword']);
        }

        return true;
    }


}



/**
 * Pdf document author
 * @member {String} author
 */
PdfMetadataDto.prototype['author'] = undefined;

/**
 * Enables or disables adding or modifying text annotations and interactive  form fields.
 * @member {Boolean} enableAdd
 */
PdfMetadataDto.prototype['enableAdd'] = undefined;

/**
 * Enables or disables copying of text and graphics.
 * @member {Boolean} enableCopy
 */
PdfMetadataDto.prototype['enableCopy'] = undefined;

/**
 * Enables or disables modifying document contents (other than text annotations and   interactive form fields).
 * @member {Boolean} enableModify
 */
PdfMetadataDto.prototype['enableModify'] = undefined;

/**
 * Enables or disables printing.
 * @member {Boolean} enablePrinting
 */
PdfMetadataDto.prototype['enablePrinting'] = undefined;

/**
 * Pdf document keywords
 * @member {Array.<String>} keywords
 */
PdfMetadataDto.prototype['keywords'] = undefined;

/**
 * Specifies the owner password that will protect full access to any generated PDF documents.
 * @member {String} ownerPassword
 */
PdfMetadataDto.prototype['ownerPassword'] = undefined;

/**
 * Pdf document subject
 * @member {String} subject
 */
PdfMetadataDto.prototype['subject'] = undefined;

/**
 * Pdf document title
 * @member {String} title
 */
PdfMetadataDto.prototype['title'] = undefined;

/**
 * Specifies the user password that will protect access to any generated PDF documents.
 * @member {String} userPassword
 */
PdfMetadataDto.prototype['userPassword'] = undefined;






export default PdfMetadataDto;

