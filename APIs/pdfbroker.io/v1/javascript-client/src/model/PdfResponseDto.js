/**
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PdfResponseDto model module.
 * @module model/PdfResponseDto
 * @version v1
 */
class PdfResponseDto {
    /**
     * Constructs a new <code>PdfResponseDto</code>.
     * When setting the Accept-header in the request to \&quot;application/json\&quot; the content of the pdf file will be return as Base64 encoded string. Note that converting data to Base64 encoded strings increases the response size with approximately 33%, if you can accept the a binary format it&#39;s better to use Accept-header \&quot;application/pdf\&quot;.
     * @alias module:model/PdfResponseDto
     */
    constructor() { 
        
        PdfResponseDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PdfResponseDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PdfResponseDto} obj Optional instance to populate.
     * @return {module:model/PdfResponseDto} The populated <code>PdfResponseDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PdfResponseDto();

            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('pdfFileBase64String')) {
                obj['pdfFileBase64String'] = ApiClient.convertToType(data['pdfFileBase64String'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PdfResponseDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PdfResponseDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is a string
        if (data['pdfFileBase64String'] && !(typeof data['pdfFileBase64String'] === 'string' || data['pdfFileBase64String'] instanceof String)) {
            throw new Error("Expected the field `pdfFileBase64String` to be a primitive type in the JSON string but got " + data['pdfFileBase64String']);
        }

        return true;
    }


}



/**
 * If any error occurs the message will be displayed in here
 * @member {String} errorMessage
 */
PdfResponseDto.prototype['errorMessage'] = undefined;

/**
 * The Base64 encoded string that is the pdf file.
 * @member {String} pdfFileBase64String
 */
PdfResponseDto.prototype['pdfFileBase64String'] = undefined;






export default PdfResponseDto;

