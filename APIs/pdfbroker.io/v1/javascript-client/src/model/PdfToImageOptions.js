/**
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PdfToImageOptions model module.
 * @module model/PdfToImageOptions
 * @version v1
 */
class PdfToImageOptions {
    /**
     * Constructs a new <code>PdfToImageOptions</code>.
     * @alias module:model/PdfToImageOptions
     */
    constructor() { 
        
        PdfToImageOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PdfToImageOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PdfToImageOptions} obj Optional instance to populate.
     * @return {module:model/PdfToImageOptions} The populated <code>PdfToImageOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PdfToImageOptions();

            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('horizontalResolution')) {
                obj['horizontalResolution'] = ApiClient.convertToType(data['horizontalResolution'], 'Number');
            }
            if (data.hasOwnProperty('imageFormat')) {
                obj['imageFormat'] = ApiClient.convertToType(data['imageFormat'], 'String');
            }
            if (data.hasOwnProperty('jpegQuality')) {
                obj['jpegQuality'] = ApiClient.convertToType(data['jpegQuality'], 'Number');
            }
            if (data.hasOwnProperty('pageNumber')) {
                obj['pageNumber'] = ApiClient.convertToType(data['pageNumber'], 'Number');
            }
            if (data.hasOwnProperty('pngCompressionLevel')) {
                obj['pngCompressionLevel'] = ApiClient.convertToType(data['pngCompressionLevel'], 'Number');
            }
            if (data.hasOwnProperty('transparent')) {
                obj['transparent'] = ApiClient.convertToType(data['transparent'], 'Boolean');
            }
            if (data.hasOwnProperty('verticalResolution')) {
                obj['verticalResolution'] = ApiClient.convertToType(data['verticalResolution'], 'Number');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PdfToImageOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PdfToImageOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['imageFormat'] && !(typeof data['imageFormat'] === 'string' || data['imageFormat'] instanceof String)) {
            throw new Error("Expected the field `imageFormat` to be a primitive type in the JSON string but got " + data['imageFormat']);
        }

        return true;
    }


}



/**
 * Set the height of the output image, default value is width of source document. To scale height, and keeping proportions, do not set width;
 * @member {Number} height
 */
PdfToImageOptions.prototype['height'] = undefined;

/**
 * Set the horizontal resolution, default is 96 dpi;
 * @member {Number} horizontalResolution
 */
PdfToImageOptions.prototype['horizontalResolution'] = undefined;

/**
 * Valid options are \"image/jpeg\", \"image/png\" or \"image/gif\". Default is \"image/png\"
 * @member {String} imageFormat
 */
PdfToImageOptions.prototype['imageFormat'] = undefined;

/**
 * Sets the quality of jpeg images, range 0 to 100, default is 75
 * @member {Number} jpegQuality
 */
PdfToImageOptions.prototype['jpegQuality'] = undefined;

/**
 * Which page of the pdf file to generate image from, default is first page
 * @member {Number} pageNumber
 */
PdfToImageOptions.prototype['pageNumber'] = undefined;

/**
 * Sets the png compression level, range 1 - 9, default is 6
 * @member {Number} pngCompressionLevel
 */
PdfToImageOptions.prototype['pngCompressionLevel'] = undefined;

/**
 * Keep the background of the image transparent. This setting is not available in JPEG-files, since transparency is not supported in the JPEG format.
 * @member {Boolean} transparent
 */
PdfToImageOptions.prototype['transparent'] = undefined;

/**
 * Set the vertical resolution, default is 96 dpi;
 * @member {Number} verticalResolution
 */
PdfToImageOptions.prototype['verticalResolution'] = undefined;

/**
 * Set the width of the output image, default value is width of source document. To scale width, and keeping proportions, do not set height;
 * @member {Number} width
 */
PdfToImageOptions.prototype['width'] = undefined;






export default PdfToImageOptions;

