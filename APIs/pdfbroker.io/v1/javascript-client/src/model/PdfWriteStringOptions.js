/**
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ColorDto from './ColorDto';
import FontDto from './FontDto';
import XOriginPoint from './XOriginPoint';
import YOriginPoint from './YOriginPoint';

/**
 * The PdfWriteStringOptions model module.
 * @module model/PdfWriteStringOptions
 * @version v1
 */
class PdfWriteStringOptions {
    /**
     * Constructs a new <code>PdfWriteStringOptions</code>.
     * Options for writing string in pdf page;
     * @alias module:model/PdfWriteStringOptions
     */
    constructor() { 
        
        PdfWriteStringOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PdfWriteStringOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PdfWriteStringOptions} obj Optional instance to populate.
     * @return {module:model/PdfWriteStringOptions} The populated <code>PdfWriteStringOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PdfWriteStringOptions();

            if (data.hasOwnProperty('font')) {
                obj['font'] = FontDto.constructFromObject(data['font']);
            }
            if (data.hasOwnProperty('pageNumber')) {
                obj['pageNumber'] = ApiClient.convertToType(data['pageNumber'], 'Number');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('textColor')) {
                obj['textColor'] = ColorDto.constructFromObject(data['textColor']);
            }
            if (data.hasOwnProperty('xOrigin')) {
                obj['xOrigin'] = XOriginPoint.constructFromObject(data['xOrigin']);
            }
            if (data.hasOwnProperty('xPosition')) {
                obj['xPosition'] = ApiClient.convertToType(data['xPosition'], 'Number');
            }
            if (data.hasOwnProperty('yOrigin')) {
                obj['yOrigin'] = YOriginPoint.constructFromObject(data['yOrigin']);
            }
            if (data.hasOwnProperty('yPosition')) {
                obj['yPosition'] = ApiClient.convertToType(data['yPosition'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PdfWriteStringOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PdfWriteStringOptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `font`
        if (data['font']) { // data not null
          FontDto.validateJSON(data['font']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // validate the optional field `textColor`
        if (data['textColor']) { // data not null
          ColorDto.validateJSON(data['textColor']);
        }

        return true;
    }


}



/**
 * @member {module:model/FontDto} font
 */
PdfWriteStringOptions.prototype['font'] = undefined;

/**
 * Get or set which page in the pdf to write on, default is first page.
 * @member {Number} pageNumber
 */
PdfWriteStringOptions.prototype['pageNumber'] = undefined;

/**
 * The text to write in the pdf
 * @member {String} text
 */
PdfWriteStringOptions.prototype['text'] = undefined;

/**
 * @member {module:model/ColorDto} textColor
 */
PdfWriteStringOptions.prototype['textColor'] = undefined;

/**
 * @member {module:model/XOriginPoint} xOrigin
 */
PdfWriteStringOptions.prototype['xOrigin'] = undefined;

/**
 * Get or set the X axis position on where to write string, in reference to XOrigin.
 * @member {Number} xPosition
 */
PdfWriteStringOptions.prototype['xPosition'] = undefined;

/**
 * @member {module:model/YOriginPoint} yOrigin
 */
PdfWriteStringOptions.prototype['yOrigin'] = undefined;

/**
 * Get or set the Y axis position on where to write string, in reference to YOrigin.
 * @member {Number} yPosition
 */
PdfWriteStringOptions.prototype['yPosition'] = undefined;






export default PdfWriteStringOptions;

