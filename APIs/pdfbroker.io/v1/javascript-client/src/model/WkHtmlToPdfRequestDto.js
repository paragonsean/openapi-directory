/**
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WkHtmlToPdfRequestDto model module.
 * @module model/WkHtmlToPdfRequestDto
 * @version v1
 */
class WkHtmlToPdfRequestDto {
    /**
     * Constructs a new <code>WkHtmlToPdfRequestDto</code>.
     * WkHtmlToPdfRequestDto is the data transfer object for generating a pdf using wkhtmltopdf;
     * @alias module:model/WkHtmlToPdfRequestDto
     */
    constructor() { 
        
        WkHtmlToPdfRequestDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WkHtmlToPdfRequestDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WkHtmlToPdfRequestDto} obj Optional instance to populate.
     * @return {module:model/WkHtmlToPdfRequestDto} The populated <code>WkHtmlToPdfRequestDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WkHtmlToPdfRequestDto();

            if (data.hasOwnProperty('htmlBase64String')) {
                obj['htmlBase64String'] = ApiClient.convertToType(data['htmlBase64String'], 'String');
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], {'String': 'String'});
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('wkHtmlToPdfArguments')) {
                obj['wkHtmlToPdfArguments'] = ApiClient.convertToType(data['wkHtmlToPdfArguments'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WkHtmlToPdfRequestDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WkHtmlToPdfRequestDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['htmlBase64String'] && !(typeof data['htmlBase64String'] === 'string' || data['htmlBase64String'] instanceof String)) {
            throw new Error("Expected the field `htmlBase64String` to be a primitive type in the JSON string but got " + data['htmlBase64String']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * Base64 encoded string with html. If property Url is set, it will be used, not HtmlBase64String.
 * @member {String} htmlBase64String
 */
WkHtmlToPdfRequestDto.prototype['htmlBase64String'] = undefined;

/**
 * This is a set of key-value pairs of digital resources like images that is referenced in the HtmlBase64String document. It uses the filename including relative path as key and the data is provided as a Base64 encoded string.
 * @member {Object.<String, String>} resources
 */
WkHtmlToPdfRequestDto.prototype['resources'] = undefined;

/**
 * The url to generate pdf from. Url has precedence over HtmlBase64String value if both are set.
 * @member {String} url
 */
WkHtmlToPdfRequestDto.prototype['url'] = undefined;

/**
 * Command line arguments passed to wkhtmltopdf.
 * @member {Object.<String, String>} wkHtmlToPdfArguments
 */
WkHtmlToPdfRequestDto.prototype['wkHtmlToPdfArguments'] = undefined;






export default WkHtmlToPdfRequestDto;

