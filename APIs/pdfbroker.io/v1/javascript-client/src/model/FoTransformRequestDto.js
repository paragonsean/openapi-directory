/**
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PdfMetadataDto from './PdfMetadataDto';

/**
 * The FoTransformRequestDto model module.
 * @module model/FoTransformRequestDto
 * @version v1
 */
class FoTransformRequestDto {
    /**
     * Constructs a new <code>FoTransformRequestDto</code>.
     * The XSL-FO transform document and xml data document as a Base64 encoded string with a set of resources provided with a name and the data of the resource as a Base64 encoded string.
     * @alias module:model/FoTransformRequestDto
     */
    constructor() { 
        
        FoTransformRequestDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FoTransformRequestDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FoTransformRequestDto} obj Optional instance to populate.
     * @return {module:model/FoTransformRequestDto} The populated <code>FoTransformRequestDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FoTransformRequestDto();

            if (data.hasOwnProperty('foDocumentBase64String')) {
                obj['foDocumentBase64String'] = ApiClient.convertToType(data['foDocumentBase64String'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = PdfMetadataDto.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], {'String': 'String'});
            }
            if (data.hasOwnProperty('xmlDataDocumentBase64String')) {
                obj['xmlDataDocumentBase64String'] = ApiClient.convertToType(data['xmlDataDocumentBase64String'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FoTransformRequestDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FoTransformRequestDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['foDocumentBase64String'] && !(typeof data['foDocumentBase64String'] === 'string' || data['foDocumentBase64String'] instanceof String)) {
            throw new Error("Expected the field `foDocumentBase64String` to be a primitive type in the JSON string but got " + data['foDocumentBase64String']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          PdfMetadataDto.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['xmlDataDocumentBase64String'] && !(typeof data['xmlDataDocumentBase64String'] === 'string' || data['xmlDataDocumentBase64String'] instanceof String)) {
            throw new Error("Expected the field `xmlDataDocumentBase64String` to be a primitive type in the JSON string but got " + data['xmlDataDocumentBase64String']);
        }

        return true;
    }


}



/**
 * This is the complete XSL-FO document provided using Base64 encoding.
 * @member {String} foDocumentBase64String
 */
FoTransformRequestDto.prototype['foDocumentBase64String'] = undefined;

/**
 * @member {module:model/PdfMetadataDto} metadata
 */
FoTransformRequestDto.prototype['metadata'] = undefined;

/**
 * This is a set of key-value pairs of digital resources like images that is referenced in the XSL-FO document. It uses the filename as key and the data is provided as a Base64 encoded string.
 * @member {Object.<String, String>} resources
 */
FoTransformRequestDto.prototype['resources'] = undefined;

/**
 * This is xml data document on which the XSL-FO transform document is applied. Provided using Base64 encoding.
 * @member {String} xmlDataDocumentBase64String
 */
FoTransformRequestDto.prototype['xmlDataDocumentBase64String'] = undefined;






export default FoTransformRequestDto;

