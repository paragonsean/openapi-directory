/**
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFontDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFontDto::OAIFontDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFontDto::OAIFontDto() {
    this->initializeModel();
}

OAIFontDto::~OAIFontDto() {}

void OAIFontDto::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;
}

void OAIFontDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFontDto::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("style")]);
    m_style_isSet = !json[QString("style")].isNull() && m_style_isValid;
}

QString OAIFontDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFontDto::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_style.isSet()) {
        obj.insert(QString("style"), ::OpenAPI::toJsonValue(m_style));
    }
    return obj;
}

QString OAIFontDto::getName() const {
    return m_name;
}
void OAIFontDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFontDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFontDto::is_name_Valid() const{
    return m_name_isValid;
}

float OAIFontDto::getSize() const {
    return m_size;
}
void OAIFontDto::setSize(const float &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIFontDto::is_size_Set() const{
    return m_size_isSet;
}

bool OAIFontDto::is_size_Valid() const{
    return m_size_isValid;
}

OAIFontStyle OAIFontDto::getStyle() const {
    return m_style;
}
void OAIFontDto::setStyle(const OAIFontStyle &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAIFontDto::is_style_Set() const{
    return m_style_isSet;
}

bool OAIFontDto::is_style_Valid() const{
    return m_style_isValid;
}

bool OAIFontDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFontDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
