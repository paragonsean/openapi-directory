/**
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPdfWriteStringOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPdfWriteStringOptions::OAIPdfWriteStringOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPdfWriteStringOptions::OAIPdfWriteStringOptions() {
    this->initializeModel();
}

OAIPdfWriteStringOptions::~OAIPdfWriteStringOptions() {}

void OAIPdfWriteStringOptions::initializeModel() {

    m_font_isSet = false;
    m_font_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_text_color_isSet = false;
    m_text_color_isValid = false;

    m_x_origin_isSet = false;
    m_x_origin_isValid = false;

    m_x_position_isSet = false;
    m_x_position_isValid = false;

    m_y_origin_isSet = false;
    m_y_origin_isValid = false;

    m_y_position_isSet = false;
    m_y_position_isValid = false;
}

void OAIPdfWriteStringOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPdfWriteStringOptions::fromJsonObject(QJsonObject json) {

    m_font_isValid = ::OpenAPI::fromJsonValue(m_font, json[QString("font")]);
    m_font_isSet = !json[QString("font")].isNull() && m_font_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_text_color_isValid = ::OpenAPI::fromJsonValue(m_text_color, json[QString("textColor")]);
    m_text_color_isSet = !json[QString("textColor")].isNull() && m_text_color_isValid;

    m_x_origin_isValid = ::OpenAPI::fromJsonValue(m_x_origin, json[QString("xOrigin")]);
    m_x_origin_isSet = !json[QString("xOrigin")].isNull() && m_x_origin_isValid;

    m_x_position_isValid = ::OpenAPI::fromJsonValue(m_x_position, json[QString("xPosition")]);
    m_x_position_isSet = !json[QString("xPosition")].isNull() && m_x_position_isValid;

    m_y_origin_isValid = ::OpenAPI::fromJsonValue(m_y_origin, json[QString("yOrigin")]);
    m_y_origin_isSet = !json[QString("yOrigin")].isNull() && m_y_origin_isValid;

    m_y_position_isValid = ::OpenAPI::fromJsonValue(m_y_position, json[QString("yPosition")]);
    m_y_position_isSet = !json[QString("yPosition")].isNull() && m_y_position_isValid;
}

QString OAIPdfWriteStringOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPdfWriteStringOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_font.isSet()) {
        obj.insert(QString("font"), ::OpenAPI::toJsonValue(m_font));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_text_color.isSet()) {
        obj.insert(QString("textColor"), ::OpenAPI::toJsonValue(m_text_color));
    }
    if (m_x_origin.isSet()) {
        obj.insert(QString("xOrigin"), ::OpenAPI::toJsonValue(m_x_origin));
    }
    if (m_x_position_isSet) {
        obj.insert(QString("xPosition"), ::OpenAPI::toJsonValue(m_x_position));
    }
    if (m_y_origin.isSet()) {
        obj.insert(QString("yOrigin"), ::OpenAPI::toJsonValue(m_y_origin));
    }
    if (m_y_position_isSet) {
        obj.insert(QString("yPosition"), ::OpenAPI::toJsonValue(m_y_position));
    }
    return obj;
}

OAIFontDto OAIPdfWriteStringOptions::getFont() const {
    return m_font;
}
void OAIPdfWriteStringOptions::setFont(const OAIFontDto &font) {
    m_font = font;
    m_font_isSet = true;
}

bool OAIPdfWriteStringOptions::is_font_Set() const{
    return m_font_isSet;
}

bool OAIPdfWriteStringOptions::is_font_Valid() const{
    return m_font_isValid;
}

qint32 OAIPdfWriteStringOptions::getPageNumber() const {
    return m_page_number;
}
void OAIPdfWriteStringOptions::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIPdfWriteStringOptions::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIPdfWriteStringOptions::is_page_number_Valid() const{
    return m_page_number_isValid;
}

QString OAIPdfWriteStringOptions::getText() const {
    return m_text;
}
void OAIPdfWriteStringOptions::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPdfWriteStringOptions::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPdfWriteStringOptions::is_text_Valid() const{
    return m_text_isValid;
}

OAIColorDto OAIPdfWriteStringOptions::getTextColor() const {
    return m_text_color;
}
void OAIPdfWriteStringOptions::setTextColor(const OAIColorDto &text_color) {
    m_text_color = text_color;
    m_text_color_isSet = true;
}

bool OAIPdfWriteStringOptions::is_text_color_Set() const{
    return m_text_color_isSet;
}

bool OAIPdfWriteStringOptions::is_text_color_Valid() const{
    return m_text_color_isValid;
}

OAIXOriginPoint OAIPdfWriteStringOptions::getXOrigin() const {
    return m_x_origin;
}
void OAIPdfWriteStringOptions::setXOrigin(const OAIXOriginPoint &x_origin) {
    m_x_origin = x_origin;
    m_x_origin_isSet = true;
}

bool OAIPdfWriteStringOptions::is_x_origin_Set() const{
    return m_x_origin_isSet;
}

bool OAIPdfWriteStringOptions::is_x_origin_Valid() const{
    return m_x_origin_isValid;
}

float OAIPdfWriteStringOptions::getXPosition() const {
    return m_x_position;
}
void OAIPdfWriteStringOptions::setXPosition(const float &x_position) {
    m_x_position = x_position;
    m_x_position_isSet = true;
}

bool OAIPdfWriteStringOptions::is_x_position_Set() const{
    return m_x_position_isSet;
}

bool OAIPdfWriteStringOptions::is_x_position_Valid() const{
    return m_x_position_isValid;
}

OAIYOriginPoint OAIPdfWriteStringOptions::getYOrigin() const {
    return m_y_origin;
}
void OAIPdfWriteStringOptions::setYOrigin(const OAIYOriginPoint &y_origin) {
    m_y_origin = y_origin;
    m_y_origin_isSet = true;
}

bool OAIPdfWriteStringOptions::is_y_origin_Set() const{
    return m_y_origin_isSet;
}

bool OAIPdfWriteStringOptions::is_y_origin_Valid() const{
    return m_y_origin_isValid;
}

float OAIPdfWriteStringOptions::getYPosition() const {
    return m_y_position;
}
void OAIPdfWriteStringOptions::setYPosition(const float &y_position) {
    m_y_position = y_position;
    m_y_position_isSet = true;
}

bool OAIPdfWriteStringOptions::is_y_position_Set() const{
    return m_y_position_isSet;
}

bool OAIPdfWriteStringOptions::is_y_position_Valid() const{
    return m_y_position_isValid;
}

bool OAIPdfWriteStringOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_font.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_position_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPdfWriteStringOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
