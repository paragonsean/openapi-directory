/**
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPdfToImageOptions.h
 *
 * 
 */

#ifndef OAIPdfToImageOptions_H
#define OAIPdfToImageOptions_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPdfToImageOptions : public OAIObject {
public:
    OAIPdfToImageOptions();
    OAIPdfToImageOptions(QString json);
    ~OAIPdfToImageOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getHeight() const;
    void setHeight(const qint32 &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    double getHorizontalResolution() const;
    void setHorizontalResolution(const double &horizontal_resolution);
    bool is_horizontal_resolution_Set() const;
    bool is_horizontal_resolution_Valid() const;

    QString getImageFormat() const;
    void setImageFormat(const QString &image_format);
    bool is_image_format_Set() const;
    bool is_image_format_Valid() const;

    qint32 getJpegQuality() const;
    void setJpegQuality(const qint32 &jpeg_quality);
    bool is_jpeg_quality_Set() const;
    bool is_jpeg_quality_Valid() const;

    qint32 getPageNumber() const;
    void setPageNumber(const qint32 &page_number);
    bool is_page_number_Set() const;
    bool is_page_number_Valid() const;

    qint32 getPngCompressionLevel() const;
    void setPngCompressionLevel(const qint32 &png_compression_level);
    bool is_png_compression_level_Set() const;
    bool is_png_compression_level_Valid() const;

    bool isTransparent() const;
    void setTransparent(const bool &transparent);
    bool is_transparent_Set() const;
    bool is_transparent_Valid() const;

    double getVerticalResolution() const;
    void setVerticalResolution(const double &vertical_resolution);
    bool is_vertical_resolution_Set() const;
    bool is_vertical_resolution_Valid() const;

    qint32 getWidth() const;
    void setWidth(const qint32 &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    double m_horizontal_resolution;
    bool m_horizontal_resolution_isSet;
    bool m_horizontal_resolution_isValid;

    QString m_image_format;
    bool m_image_format_isSet;
    bool m_image_format_isValid;

    qint32 m_jpeg_quality;
    bool m_jpeg_quality_isSet;
    bool m_jpeg_quality_isValid;

    qint32 m_page_number;
    bool m_page_number_isSet;
    bool m_page_number_isValid;

    qint32 m_png_compression_level;
    bool m_png_compression_level_isSet;
    bool m_png_compression_level_isValid;

    bool m_transparent;
    bool m_transparent_isSet;
    bool m_transparent_isValid;

    double m_vertical_resolution;
    bool m_vertical_resolution_isSet;
    bool m_vertical_resolution_isValid;

    qint32 m_width;
    bool m_width_isSet;
    bool m_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPdfToImageOptions)

#endif // OAIPdfToImageOptions_H
