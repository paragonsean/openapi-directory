/**
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPdfWriteStringRequestDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPdfWriteStringRequestDto::OAIPdfWriteStringRequestDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPdfWriteStringRequestDto::OAIPdfWriteStringRequestDto() {
    this->initializeModel();
}

OAIPdfWriteStringRequestDto::~OAIPdfWriteStringRequestDto() {}

void OAIPdfWriteStringRequestDto::initializeModel() {

    m_font_file_base64_string_isSet = false;
    m_font_file_base64_string_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_pdf_file_base64_string_isSet = false;
    m_pdf_file_base64_string_isValid = false;
}

void OAIPdfWriteStringRequestDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPdfWriteStringRequestDto::fromJsonObject(QJsonObject json) {

    m_font_file_base64_string_isValid = ::OpenAPI::fromJsonValue(m_font_file_base64_string, json[QString("fontFileBase64String")]);
    m_font_file_base64_string_isSet = !json[QString("fontFileBase64String")].isNull() && m_font_file_base64_string_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_pdf_file_base64_string_isValid = ::OpenAPI::fromJsonValue(m_pdf_file_base64_string, json[QString("pdfFileBase64String")]);
    m_pdf_file_base64_string_isSet = !json[QString("pdfFileBase64String")].isNull() && m_pdf_file_base64_string_isValid;
}

QString OAIPdfWriteStringRequestDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPdfWriteStringRequestDto::asJsonObject() const {
    QJsonObject obj;
    if (m_font_file_base64_string_isSet) {
        obj.insert(QString("fontFileBase64String"), ::OpenAPI::toJsonValue(m_font_file_base64_string));
    }
    if (m_options.isSet()) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_pdf_file_base64_string_isSet) {
        obj.insert(QString("pdfFileBase64String"), ::OpenAPI::toJsonValue(m_pdf_file_base64_string));
    }
    return obj;
}

QString OAIPdfWriteStringRequestDto::getFontFileBase64String() const {
    return m_font_file_base64_string;
}
void OAIPdfWriteStringRequestDto::setFontFileBase64String(const QString &font_file_base64_string) {
    m_font_file_base64_string = font_file_base64_string;
    m_font_file_base64_string_isSet = true;
}

bool OAIPdfWriteStringRequestDto::is_font_file_base64_string_Set() const{
    return m_font_file_base64_string_isSet;
}

bool OAIPdfWriteStringRequestDto::is_font_file_base64_string_Valid() const{
    return m_font_file_base64_string_isValid;
}

OAIPdfWriteStringOptions OAIPdfWriteStringRequestDto::getOptions() const {
    return m_options;
}
void OAIPdfWriteStringRequestDto::setOptions(const OAIPdfWriteStringOptions &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIPdfWriteStringRequestDto::is_options_Set() const{
    return m_options_isSet;
}

bool OAIPdfWriteStringRequestDto::is_options_Valid() const{
    return m_options_isValid;
}

QString OAIPdfWriteStringRequestDto::getPdfFileBase64String() const {
    return m_pdf_file_base64_string;
}
void OAIPdfWriteStringRequestDto::setPdfFileBase64String(const QString &pdf_file_base64_string) {
    m_pdf_file_base64_string = pdf_file_base64_string;
    m_pdf_file_base64_string_isSet = true;
}

bool OAIPdfWriteStringRequestDto::is_pdf_file_base64_string_Set() const{
    return m_pdf_file_base64_string_isSet;
}

bool OAIPdfWriteStringRequestDto::is_pdf_file_base64_string_Valid() const{
    return m_pdf_file_base64_string_isValid;
}

bool OAIPdfWriteStringRequestDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_font_file_base64_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_file_base64_string_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPdfWriteStringRequestDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
