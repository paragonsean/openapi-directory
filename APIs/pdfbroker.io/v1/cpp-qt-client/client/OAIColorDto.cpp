/**
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColorDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColorDto::OAIColorDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColorDto::OAIColorDto() {
    this->initializeModel();
}

OAIColorDto::~OAIColorDto() {}

void OAIColorDto::initializeModel() {

    m_b_isSet = false;
    m_b_isValid = false;

    m_g_isSet = false;
    m_g_isValid = false;

    m_r_isSet = false;
    m_r_isValid = false;
}

void OAIColorDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColorDto::fromJsonObject(QJsonObject json) {

    m_b_isValid = ::OpenAPI::fromJsonValue(m_b, json[QString("b")]);
    m_b_isSet = !json[QString("b")].isNull() && m_b_isValid;

    m_g_isValid = ::OpenAPI::fromJsonValue(m_g, json[QString("g")]);
    m_g_isSet = !json[QString("g")].isNull() && m_g_isValid;

    m_r_isValid = ::OpenAPI::fromJsonValue(m_r, json[QString("r")]);
    m_r_isSet = !json[QString("r")].isNull() && m_r_isValid;
}

QString OAIColorDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColorDto::asJsonObject() const {
    QJsonObject obj;
    if (m_b_isSet) {
        obj.insert(QString("b"), ::OpenAPI::toJsonValue(m_b));
    }
    if (m_g_isSet) {
        obj.insert(QString("g"), ::OpenAPI::toJsonValue(m_g));
    }
    if (m_r_isSet) {
        obj.insert(QString("r"), ::OpenAPI::toJsonValue(m_r));
    }
    return obj;
}

qint32 OAIColorDto::getB() const {
    return m_b;
}
void OAIColorDto::setB(const qint32 &b) {
    m_b = b;
    m_b_isSet = true;
}

bool OAIColorDto::is_b_Set() const{
    return m_b_isSet;
}

bool OAIColorDto::is_b_Valid() const{
    return m_b_isValid;
}

qint32 OAIColorDto::getG() const {
    return m_g;
}
void OAIColorDto::setG(const qint32 &g) {
    m_g = g;
    m_g_isSet = true;
}

bool OAIColorDto::is_g_Set() const{
    return m_g_isSet;
}

bool OAIColorDto::is_g_Valid() const{
    return m_g_isValid;
}

qint32 OAIColorDto::getR() const {
    return m_r;
}
void OAIColorDto::setR(const qint32 &r) {
    m_r = r;
    m_r_isSet = true;
}

bool OAIColorDto::is_r_Set() const{
    return m_r_isSet;
}

bool OAIColorDto::is_r_Valid() const{
    return m_r_isValid;
}

bool OAIColorDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_g_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColorDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
