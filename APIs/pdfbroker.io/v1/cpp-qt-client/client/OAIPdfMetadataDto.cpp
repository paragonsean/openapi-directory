/**
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPdfMetadataDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPdfMetadataDto::OAIPdfMetadataDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPdfMetadataDto::OAIPdfMetadataDto() {
    this->initializeModel();
}

OAIPdfMetadataDto::~OAIPdfMetadataDto() {}

void OAIPdfMetadataDto::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_enable_add_isSet = false;
    m_enable_add_isValid = false;

    m_enable_copy_isSet = false;
    m_enable_copy_isValid = false;

    m_enable_modify_isSet = false;
    m_enable_modify_isValid = false;

    m_enable_printing_isSet = false;
    m_enable_printing_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_owner_password_isSet = false;
    m_owner_password_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_password_isSet = false;
    m_user_password_isValid = false;
}

void OAIPdfMetadataDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPdfMetadataDto::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_enable_add_isValid = ::OpenAPI::fromJsonValue(m_enable_add, json[QString("enableAdd")]);
    m_enable_add_isSet = !json[QString("enableAdd")].isNull() && m_enable_add_isValid;

    m_enable_copy_isValid = ::OpenAPI::fromJsonValue(m_enable_copy, json[QString("enableCopy")]);
    m_enable_copy_isSet = !json[QString("enableCopy")].isNull() && m_enable_copy_isValid;

    m_enable_modify_isValid = ::OpenAPI::fromJsonValue(m_enable_modify, json[QString("enableModify")]);
    m_enable_modify_isSet = !json[QString("enableModify")].isNull() && m_enable_modify_isValid;

    m_enable_printing_isValid = ::OpenAPI::fromJsonValue(m_enable_printing, json[QString("enablePrinting")]);
    m_enable_printing_isSet = !json[QString("enablePrinting")].isNull() && m_enable_printing_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_owner_password_isValid = ::OpenAPI::fromJsonValue(m_owner_password, json[QString("ownerPassword")]);
    m_owner_password_isSet = !json[QString("ownerPassword")].isNull() && m_owner_password_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_password_isValid = ::OpenAPI::fromJsonValue(m_user_password, json[QString("userPassword")]);
    m_user_password_isSet = !json[QString("userPassword")].isNull() && m_user_password_isValid;
}

QString OAIPdfMetadataDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPdfMetadataDto::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_enable_add_isSet) {
        obj.insert(QString("enableAdd"), ::OpenAPI::toJsonValue(m_enable_add));
    }
    if (m_enable_copy_isSet) {
        obj.insert(QString("enableCopy"), ::OpenAPI::toJsonValue(m_enable_copy));
    }
    if (m_enable_modify_isSet) {
        obj.insert(QString("enableModify"), ::OpenAPI::toJsonValue(m_enable_modify));
    }
    if (m_enable_printing_isSet) {
        obj.insert(QString("enablePrinting"), ::OpenAPI::toJsonValue(m_enable_printing));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_owner_password_isSet) {
        obj.insert(QString("ownerPassword"), ::OpenAPI::toJsonValue(m_owner_password));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user_password_isSet) {
        obj.insert(QString("userPassword"), ::OpenAPI::toJsonValue(m_user_password));
    }
    return obj;
}

QString OAIPdfMetadataDto::getAuthor() const {
    return m_author;
}
void OAIPdfMetadataDto::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIPdfMetadataDto::is_author_Set() const{
    return m_author_isSet;
}

bool OAIPdfMetadataDto::is_author_Valid() const{
    return m_author_isValid;
}

bool OAIPdfMetadataDto::isEnableAdd() const {
    return m_enable_add;
}
void OAIPdfMetadataDto::setEnableAdd(const bool &enable_add) {
    m_enable_add = enable_add;
    m_enable_add_isSet = true;
}

bool OAIPdfMetadataDto::is_enable_add_Set() const{
    return m_enable_add_isSet;
}

bool OAIPdfMetadataDto::is_enable_add_Valid() const{
    return m_enable_add_isValid;
}

bool OAIPdfMetadataDto::isEnableCopy() const {
    return m_enable_copy;
}
void OAIPdfMetadataDto::setEnableCopy(const bool &enable_copy) {
    m_enable_copy = enable_copy;
    m_enable_copy_isSet = true;
}

bool OAIPdfMetadataDto::is_enable_copy_Set() const{
    return m_enable_copy_isSet;
}

bool OAIPdfMetadataDto::is_enable_copy_Valid() const{
    return m_enable_copy_isValid;
}

bool OAIPdfMetadataDto::isEnableModify() const {
    return m_enable_modify;
}
void OAIPdfMetadataDto::setEnableModify(const bool &enable_modify) {
    m_enable_modify = enable_modify;
    m_enable_modify_isSet = true;
}

bool OAIPdfMetadataDto::is_enable_modify_Set() const{
    return m_enable_modify_isSet;
}

bool OAIPdfMetadataDto::is_enable_modify_Valid() const{
    return m_enable_modify_isValid;
}

bool OAIPdfMetadataDto::isEnablePrinting() const {
    return m_enable_printing;
}
void OAIPdfMetadataDto::setEnablePrinting(const bool &enable_printing) {
    m_enable_printing = enable_printing;
    m_enable_printing_isSet = true;
}

bool OAIPdfMetadataDto::is_enable_printing_Set() const{
    return m_enable_printing_isSet;
}

bool OAIPdfMetadataDto::is_enable_printing_Valid() const{
    return m_enable_printing_isValid;
}

QList<QString> OAIPdfMetadataDto::getKeywords() const {
    return m_keywords;
}
void OAIPdfMetadataDto::setKeywords(const QList<QString> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIPdfMetadataDto::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIPdfMetadataDto::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QString OAIPdfMetadataDto::getOwnerPassword() const {
    return m_owner_password;
}
void OAIPdfMetadataDto::setOwnerPassword(const QString &owner_password) {
    m_owner_password = owner_password;
    m_owner_password_isSet = true;
}

bool OAIPdfMetadataDto::is_owner_password_Set() const{
    return m_owner_password_isSet;
}

bool OAIPdfMetadataDto::is_owner_password_Valid() const{
    return m_owner_password_isValid;
}

QString OAIPdfMetadataDto::getSubject() const {
    return m_subject;
}
void OAIPdfMetadataDto::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIPdfMetadataDto::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIPdfMetadataDto::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIPdfMetadataDto::getTitle() const {
    return m_title;
}
void OAIPdfMetadataDto::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPdfMetadataDto::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPdfMetadataDto::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPdfMetadataDto::getUserPassword() const {
    return m_user_password;
}
void OAIPdfMetadataDto::setUserPassword(const QString &user_password) {
    m_user_password = user_password;
    m_user_password_isSet = true;
}

bool OAIPdfMetadataDto::is_user_password_Set() const{
    return m_user_password_isSet;
}

bool OAIPdfMetadataDto::is_user_password_Valid() const{
    return m_user_password_isValid;
}

bool OAIPdfMetadataDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_add_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_copy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_modify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_printing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_password_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPdfMetadataDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
