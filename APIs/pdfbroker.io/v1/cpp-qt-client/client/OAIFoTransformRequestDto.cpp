/**
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFoTransformRequestDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFoTransformRequestDto::OAIFoTransformRequestDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFoTransformRequestDto::OAIFoTransformRequestDto() {
    this->initializeModel();
}

OAIFoTransformRequestDto::~OAIFoTransformRequestDto() {}

void OAIFoTransformRequestDto::initializeModel() {

    m_fo_document_base64_string_isSet = false;
    m_fo_document_base64_string_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_xml_data_document_base64_string_isSet = false;
    m_xml_data_document_base64_string_isValid = false;
}

void OAIFoTransformRequestDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFoTransformRequestDto::fromJsonObject(QJsonObject json) {

    m_fo_document_base64_string_isValid = ::OpenAPI::fromJsonValue(m_fo_document_base64_string, json[QString("foDocumentBase64String")]);
    m_fo_document_base64_string_isSet = !json[QString("foDocumentBase64String")].isNull() && m_fo_document_base64_string_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_xml_data_document_base64_string_isValid = ::OpenAPI::fromJsonValue(m_xml_data_document_base64_string, json[QString("xmlDataDocumentBase64String")]);
    m_xml_data_document_base64_string_isSet = !json[QString("xmlDataDocumentBase64String")].isNull() && m_xml_data_document_base64_string_isValid;
}

QString OAIFoTransformRequestDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFoTransformRequestDto::asJsonObject() const {
    QJsonObject obj;
    if (m_fo_document_base64_string_isSet) {
        obj.insert(QString("foDocumentBase64String"), ::OpenAPI::toJsonValue(m_fo_document_base64_string));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_xml_data_document_base64_string_isSet) {
        obj.insert(QString("xmlDataDocumentBase64String"), ::OpenAPI::toJsonValue(m_xml_data_document_base64_string));
    }
    return obj;
}

QString OAIFoTransformRequestDto::getFoDocumentBase64String() const {
    return m_fo_document_base64_string;
}
void OAIFoTransformRequestDto::setFoDocumentBase64String(const QString &fo_document_base64_string) {
    m_fo_document_base64_string = fo_document_base64_string;
    m_fo_document_base64_string_isSet = true;
}

bool OAIFoTransformRequestDto::is_fo_document_base64_string_Set() const{
    return m_fo_document_base64_string_isSet;
}

bool OAIFoTransformRequestDto::is_fo_document_base64_string_Valid() const{
    return m_fo_document_base64_string_isValid;
}

OAIPdfMetadataDto OAIFoTransformRequestDto::getMetadata() const {
    return m_metadata;
}
void OAIFoTransformRequestDto::setMetadata(const OAIPdfMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIFoTransformRequestDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIFoTransformRequestDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QMap<QString, QString> OAIFoTransformRequestDto::getResources() const {
    return m_resources;
}
void OAIFoTransformRequestDto::setResources(const QMap<QString, QString> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIFoTransformRequestDto::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIFoTransformRequestDto::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAIFoTransformRequestDto::getXmlDataDocumentBase64String() const {
    return m_xml_data_document_base64_string;
}
void OAIFoTransformRequestDto::setXmlDataDocumentBase64String(const QString &xml_data_document_base64_string) {
    m_xml_data_document_base64_string = xml_data_document_base64_string;
    m_xml_data_document_base64_string_isSet = true;
}

bool OAIFoTransformRequestDto::is_xml_data_document_base64_string_Set() const{
    return m_xml_data_document_base64_string_isSet;
}

bool OAIFoTransformRequestDto::is_xml_data_document_base64_string_Valid() const{
    return m_xml_data_document_base64_string_isValid;
}

bool OAIFoTransformRequestDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fo_document_base64_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_xml_data_document_base64_string_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFoTransformRequestDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
