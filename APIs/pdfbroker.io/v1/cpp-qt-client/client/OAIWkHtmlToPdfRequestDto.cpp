/**
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWkHtmlToPdfRequestDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWkHtmlToPdfRequestDto::OAIWkHtmlToPdfRequestDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWkHtmlToPdfRequestDto::OAIWkHtmlToPdfRequestDto() {
    this->initializeModel();
}

OAIWkHtmlToPdfRequestDto::~OAIWkHtmlToPdfRequestDto() {}

void OAIWkHtmlToPdfRequestDto::initializeModel() {

    m_html_base64_string_isSet = false;
    m_html_base64_string_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_wk_html_to_pdf_arguments_isSet = false;
    m_wk_html_to_pdf_arguments_isValid = false;
}

void OAIWkHtmlToPdfRequestDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWkHtmlToPdfRequestDto::fromJsonObject(QJsonObject json) {

    m_html_base64_string_isValid = ::OpenAPI::fromJsonValue(m_html_base64_string, json[QString("htmlBase64String")]);
    m_html_base64_string_isSet = !json[QString("htmlBase64String")].isNull() && m_html_base64_string_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_wk_html_to_pdf_arguments_isValid = ::OpenAPI::fromJsonValue(m_wk_html_to_pdf_arguments, json[QString("wkHtmlToPdfArguments")]);
    m_wk_html_to_pdf_arguments_isSet = !json[QString("wkHtmlToPdfArguments")].isNull() && m_wk_html_to_pdf_arguments_isValid;
}

QString OAIWkHtmlToPdfRequestDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWkHtmlToPdfRequestDto::asJsonObject() const {
    QJsonObject obj;
    if (m_html_base64_string_isSet) {
        obj.insert(QString("htmlBase64String"), ::OpenAPI::toJsonValue(m_html_base64_string));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_wk_html_to_pdf_arguments.size() > 0) {
        obj.insert(QString("wkHtmlToPdfArguments"), ::OpenAPI::toJsonValue(m_wk_html_to_pdf_arguments));
    }
    return obj;
}

QString OAIWkHtmlToPdfRequestDto::getHtmlBase64String() const {
    return m_html_base64_string;
}
void OAIWkHtmlToPdfRequestDto::setHtmlBase64String(const QString &html_base64_string) {
    m_html_base64_string = html_base64_string;
    m_html_base64_string_isSet = true;
}

bool OAIWkHtmlToPdfRequestDto::is_html_base64_string_Set() const{
    return m_html_base64_string_isSet;
}

bool OAIWkHtmlToPdfRequestDto::is_html_base64_string_Valid() const{
    return m_html_base64_string_isValid;
}

QMap<QString, QString> OAIWkHtmlToPdfRequestDto::getResources() const {
    return m_resources;
}
void OAIWkHtmlToPdfRequestDto::setResources(const QMap<QString, QString> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIWkHtmlToPdfRequestDto::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIWkHtmlToPdfRequestDto::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAIWkHtmlToPdfRequestDto::getUrl() const {
    return m_url;
}
void OAIWkHtmlToPdfRequestDto::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWkHtmlToPdfRequestDto::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWkHtmlToPdfRequestDto::is_url_Valid() const{
    return m_url_isValid;
}

QMap<QString, QString> OAIWkHtmlToPdfRequestDto::getWkHtmlToPdfArguments() const {
    return m_wk_html_to_pdf_arguments;
}
void OAIWkHtmlToPdfRequestDto::setWkHtmlToPdfArguments(const QMap<QString, QString> &wk_html_to_pdf_arguments) {
    m_wk_html_to_pdf_arguments = wk_html_to_pdf_arguments;
    m_wk_html_to_pdf_arguments_isSet = true;
}

bool OAIWkHtmlToPdfRequestDto::is_wk_html_to_pdf_arguments_Set() const{
    return m_wk_html_to_pdf_arguments_isSet;
}

bool OAIWkHtmlToPdfRequestDto::is_wk_html_to_pdf_arguments_Valid() const{
    return m_wk_html_to_pdf_arguments_isValid;
}

bool OAIWkHtmlToPdfRequestDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_html_base64_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wk_html_to_pdf_arguments.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWkHtmlToPdfRequestDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
