/*
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PdfToImageOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:46.869013-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PdfToImageOptions {
  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_HORIZONTAL_RESOLUTION = "horizontalResolution";
  @SerializedName(SERIALIZED_NAME_HORIZONTAL_RESOLUTION)
  private Double horizontalResolution;

  public static final String SERIALIZED_NAME_IMAGE_FORMAT = "imageFormat";
  @SerializedName(SERIALIZED_NAME_IMAGE_FORMAT)
  private String imageFormat;

  public static final String SERIALIZED_NAME_JPEG_QUALITY = "jpegQuality";
  @SerializedName(SERIALIZED_NAME_JPEG_QUALITY)
  private Integer jpegQuality;

  public static final String SERIALIZED_NAME_PAGE_NUMBER = "pageNumber";
  @SerializedName(SERIALIZED_NAME_PAGE_NUMBER)
  private Integer pageNumber;

  public static final String SERIALIZED_NAME_PNG_COMPRESSION_LEVEL = "pngCompressionLevel";
  @SerializedName(SERIALIZED_NAME_PNG_COMPRESSION_LEVEL)
  private Integer pngCompressionLevel;

  public static final String SERIALIZED_NAME_TRANSPARENT = "transparent";
  @SerializedName(SERIALIZED_NAME_TRANSPARENT)
  private Boolean transparent;

  public static final String SERIALIZED_NAME_VERTICAL_RESOLUTION = "verticalResolution";
  @SerializedName(SERIALIZED_NAME_VERTICAL_RESOLUTION)
  private Double verticalResolution;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public PdfToImageOptions() {
  }

  public PdfToImageOptions height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Set the height of the output image, default value is width of source document. To scale height, and keeping proportions, do not set width;
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public PdfToImageOptions horizontalResolution(Double horizontalResolution) {
    this.horizontalResolution = horizontalResolution;
    return this;
  }

  /**
   * Set the horizontal resolution, default is 96 dpi;
   * @return horizontalResolution
   */
  @javax.annotation.Nullable
  public Double getHorizontalResolution() {
    return horizontalResolution;
  }

  public void setHorizontalResolution(Double horizontalResolution) {
    this.horizontalResolution = horizontalResolution;
  }


  public PdfToImageOptions imageFormat(String imageFormat) {
    this.imageFormat = imageFormat;
    return this;
  }

  /**
   * Valid options are \&quot;image/jpeg\&quot;, \&quot;image/png\&quot; or \&quot;image/gif\&quot;. Default is \&quot;image/png\&quot;
   * @return imageFormat
   */
  @javax.annotation.Nullable
  public String getImageFormat() {
    return imageFormat;
  }

  public void setImageFormat(String imageFormat) {
    this.imageFormat = imageFormat;
  }


  public PdfToImageOptions jpegQuality(Integer jpegQuality) {
    this.jpegQuality = jpegQuality;
    return this;
  }

  /**
   * Sets the quality of jpeg images, range 0 to 100, default is 75
   * @return jpegQuality
   */
  @javax.annotation.Nullable
  public Integer getJpegQuality() {
    return jpegQuality;
  }

  public void setJpegQuality(Integer jpegQuality) {
    this.jpegQuality = jpegQuality;
  }


  public PdfToImageOptions pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

  /**
   * Which page of the pdf file to generate image from, default is first page
   * @return pageNumber
   */
  @javax.annotation.Nullable
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }


  public PdfToImageOptions pngCompressionLevel(Integer pngCompressionLevel) {
    this.pngCompressionLevel = pngCompressionLevel;
    return this;
  }

  /**
   * Sets the png compression level, range 1 - 9, default is 6
   * @return pngCompressionLevel
   */
  @javax.annotation.Nullable
  public Integer getPngCompressionLevel() {
    return pngCompressionLevel;
  }

  public void setPngCompressionLevel(Integer pngCompressionLevel) {
    this.pngCompressionLevel = pngCompressionLevel;
  }


  public PdfToImageOptions transparent(Boolean transparent) {
    this.transparent = transparent;
    return this;
  }

  /**
   * Keep the background of the image transparent. This setting is not available in JPEG-files, since transparency is not supported in the JPEG format.
   * @return transparent
   */
  @javax.annotation.Nullable
  public Boolean getTransparent() {
    return transparent;
  }

  public void setTransparent(Boolean transparent) {
    this.transparent = transparent;
  }


  public PdfToImageOptions verticalResolution(Double verticalResolution) {
    this.verticalResolution = verticalResolution;
    return this;
  }

  /**
   * Set the vertical resolution, default is 96 dpi;
   * @return verticalResolution
   */
  @javax.annotation.Nullable
  public Double getVerticalResolution() {
    return verticalResolution;
  }

  public void setVerticalResolution(Double verticalResolution) {
    this.verticalResolution = verticalResolution;
  }


  public PdfToImageOptions width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Set the width of the output image, default value is width of source document. To scale width, and keeping proportions, do not set height;
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfToImageOptions pdfToImageOptions = (PdfToImageOptions) o;
    return Objects.equals(this.height, pdfToImageOptions.height) &&
        Objects.equals(this.horizontalResolution, pdfToImageOptions.horizontalResolution) &&
        Objects.equals(this.imageFormat, pdfToImageOptions.imageFormat) &&
        Objects.equals(this.jpegQuality, pdfToImageOptions.jpegQuality) &&
        Objects.equals(this.pageNumber, pdfToImageOptions.pageNumber) &&
        Objects.equals(this.pngCompressionLevel, pdfToImageOptions.pngCompressionLevel) &&
        Objects.equals(this.transparent, pdfToImageOptions.transparent) &&
        Objects.equals(this.verticalResolution, pdfToImageOptions.verticalResolution) &&
        Objects.equals(this.width, pdfToImageOptions.width);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(height, horizontalResolution, imageFormat, jpegQuality, pageNumber, pngCompressionLevel, transparent, verticalResolution, width);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfToImageOptions {\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    horizontalResolution: ").append(toIndentedString(horizontalResolution)).append("\n");
    sb.append("    imageFormat: ").append(toIndentedString(imageFormat)).append("\n");
    sb.append("    jpegQuality: ").append(toIndentedString(jpegQuality)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pngCompressionLevel: ").append(toIndentedString(pngCompressionLevel)).append("\n");
    sb.append("    transparent: ").append(toIndentedString(transparent)).append("\n");
    sb.append("    verticalResolution: ").append(toIndentedString(verticalResolution)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("height");
    openapiFields.add("horizontalResolution");
    openapiFields.add("imageFormat");
    openapiFields.add("jpegQuality");
    openapiFields.add("pageNumber");
    openapiFields.add("pngCompressionLevel");
    openapiFields.add("transparent");
    openapiFields.add("verticalResolution");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PdfToImageOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PdfToImageOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PdfToImageOptions is not found in the empty JSON string", PdfToImageOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PdfToImageOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PdfToImageOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("imageFormat") != null && !jsonObj.get("imageFormat").isJsonNull()) && !jsonObj.get("imageFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageFormat").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PdfToImageOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PdfToImageOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PdfToImageOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PdfToImageOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<PdfToImageOptions>() {
           @Override
           public void write(JsonWriter out, PdfToImageOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PdfToImageOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PdfToImageOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PdfToImageOptions
   * @throws IOException if the JSON string is invalid with respect to PdfToImageOptions
   */
  public static PdfToImageOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PdfToImageOptions.class);
  }

  /**
   * Convert an instance of PdfToImageOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

