/*
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ColorDto;
import org.openapitools.client.model.FontDto;
import org.openapitools.client.model.XOriginPoint;
import org.openapitools.client.model.YOriginPoint;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options for writing string in pdf page;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:46.869013-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PdfWriteStringOptions {
  public static final String SERIALIZED_NAME_FONT = "font";
  @SerializedName(SERIALIZED_NAME_FONT)
  private FontDto font;

  public static final String SERIALIZED_NAME_PAGE_NUMBER = "pageNumber";
  @SerializedName(SERIALIZED_NAME_PAGE_NUMBER)
  private Integer pageNumber;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TEXT_COLOR = "textColor";
  @SerializedName(SERIALIZED_NAME_TEXT_COLOR)
  private ColorDto textColor;

  public static final String SERIALIZED_NAME_X_ORIGIN = "xOrigin";
  @SerializedName(SERIALIZED_NAME_X_ORIGIN)
  private XOriginPoint xOrigin;

  public static final String SERIALIZED_NAME_X_POSITION = "xPosition";
  @SerializedName(SERIALIZED_NAME_X_POSITION)
  private Float xPosition;

  public static final String SERIALIZED_NAME_Y_ORIGIN = "yOrigin";
  @SerializedName(SERIALIZED_NAME_Y_ORIGIN)
  private YOriginPoint yOrigin;

  public static final String SERIALIZED_NAME_Y_POSITION = "yPosition";
  @SerializedName(SERIALIZED_NAME_Y_POSITION)
  private Float yPosition;

  public PdfWriteStringOptions() {
  }

  public PdfWriteStringOptions font(FontDto font) {
    this.font = font;
    return this;
  }

  /**
   * Get font
   * @return font
   */
  @javax.annotation.Nullable
  public FontDto getFont() {
    return font;
  }

  public void setFont(FontDto font) {
    this.font = font;
  }


  public PdfWriteStringOptions pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

  /**
   * Get or set which page in the pdf to write on, default is first page.
   * @return pageNumber
   */
  @javax.annotation.Nullable
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }


  public PdfWriteStringOptions text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The text to write in the pdf
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public PdfWriteStringOptions textColor(ColorDto textColor) {
    this.textColor = textColor;
    return this;
  }

  /**
   * Get textColor
   * @return textColor
   */
  @javax.annotation.Nullable
  public ColorDto getTextColor() {
    return textColor;
  }

  public void setTextColor(ColorDto textColor) {
    this.textColor = textColor;
  }


  public PdfWriteStringOptions xOrigin(XOriginPoint xOrigin) {
    this.xOrigin = xOrigin;
    return this;
  }

  /**
   * Get xOrigin
   * @return xOrigin
   */
  @javax.annotation.Nullable
  public XOriginPoint getxOrigin() {
    return xOrigin;
  }

  public void setxOrigin(XOriginPoint xOrigin) {
    this.xOrigin = xOrigin;
  }


  public PdfWriteStringOptions xPosition(Float xPosition) {
    this.xPosition = xPosition;
    return this;
  }

  /**
   * Get or set the X axis position on where to write string, in reference to XOrigin.
   * @return xPosition
   */
  @javax.annotation.Nullable
  public Float getxPosition() {
    return xPosition;
  }

  public void setxPosition(Float xPosition) {
    this.xPosition = xPosition;
  }


  public PdfWriteStringOptions yOrigin(YOriginPoint yOrigin) {
    this.yOrigin = yOrigin;
    return this;
  }

  /**
   * Get yOrigin
   * @return yOrigin
   */
  @javax.annotation.Nullable
  public YOriginPoint getyOrigin() {
    return yOrigin;
  }

  public void setyOrigin(YOriginPoint yOrigin) {
    this.yOrigin = yOrigin;
  }


  public PdfWriteStringOptions yPosition(Float yPosition) {
    this.yPosition = yPosition;
    return this;
  }

  /**
   * Get or set the Y axis position on where to write string, in reference to YOrigin.
   * @return yPosition
   */
  @javax.annotation.Nullable
  public Float getyPosition() {
    return yPosition;
  }

  public void setyPosition(Float yPosition) {
    this.yPosition = yPosition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfWriteStringOptions pdfWriteStringOptions = (PdfWriteStringOptions) o;
    return Objects.equals(this.font, pdfWriteStringOptions.font) &&
        Objects.equals(this.pageNumber, pdfWriteStringOptions.pageNumber) &&
        Objects.equals(this.text, pdfWriteStringOptions.text) &&
        Objects.equals(this.textColor, pdfWriteStringOptions.textColor) &&
        Objects.equals(this.xOrigin, pdfWriteStringOptions.xOrigin) &&
        Objects.equals(this.xPosition, pdfWriteStringOptions.xPosition) &&
        Objects.equals(this.yOrigin, pdfWriteStringOptions.yOrigin) &&
        Objects.equals(this.yPosition, pdfWriteStringOptions.yPosition);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(font, pageNumber, text, textColor, xOrigin, xPosition, yOrigin, yPosition);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfWriteStringOptions {\n");
    sb.append("    font: ").append(toIndentedString(font)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    textColor: ").append(toIndentedString(textColor)).append("\n");
    sb.append("    xOrigin: ").append(toIndentedString(xOrigin)).append("\n");
    sb.append("    xPosition: ").append(toIndentedString(xPosition)).append("\n");
    sb.append("    yOrigin: ").append(toIndentedString(yOrigin)).append("\n");
    sb.append("    yPosition: ").append(toIndentedString(yPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("font");
    openapiFields.add("pageNumber");
    openapiFields.add("text");
    openapiFields.add("textColor");
    openapiFields.add("xOrigin");
    openapiFields.add("xPosition");
    openapiFields.add("yOrigin");
    openapiFields.add("yPosition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PdfWriteStringOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PdfWriteStringOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PdfWriteStringOptions is not found in the empty JSON string", PdfWriteStringOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PdfWriteStringOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PdfWriteStringOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `font`
      if (jsonObj.get("font") != null && !jsonObj.get("font").isJsonNull()) {
        FontDto.validateJsonElement(jsonObj.get("font"));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      // validate the optional field `textColor`
      if (jsonObj.get("textColor") != null && !jsonObj.get("textColor").isJsonNull()) {
        ColorDto.validateJsonElement(jsonObj.get("textColor"));
      }
      // validate the optional field `xOrigin`
      if (jsonObj.get("xOrigin") != null && !jsonObj.get("xOrigin").isJsonNull()) {
        XOriginPoint.validateJsonElement(jsonObj.get("xOrigin"));
      }
      // validate the optional field `yOrigin`
      if (jsonObj.get("yOrigin") != null && !jsonObj.get("yOrigin").isJsonNull()) {
        YOriginPoint.validateJsonElement(jsonObj.get("yOrigin"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PdfWriteStringOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PdfWriteStringOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PdfWriteStringOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PdfWriteStringOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<PdfWriteStringOptions>() {
           @Override
           public void write(JsonWriter out, PdfWriteStringOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PdfWriteStringOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PdfWriteStringOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PdfWriteStringOptions
   * @throws IOException if the JSON string is invalid with respect to PdfWriteStringOptions
   */
  public static PdfWriteStringOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PdfWriteStringOptions.class);
  }

  /**
   * Convert an instance of PdfWriteStringOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

