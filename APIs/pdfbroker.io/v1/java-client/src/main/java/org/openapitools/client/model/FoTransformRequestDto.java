/*
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.PdfMetadataDto;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The XSL-FO transform document and xml data document as a Base64 encoded string with a set of resources provided with a name and the data of the resource as a Base64 encoded string.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:46.869013-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FoTransformRequestDto {
  public static final String SERIALIZED_NAME_FO_DOCUMENT_BASE64_STRING = "foDocumentBase64String";
  @SerializedName(SERIALIZED_NAME_FO_DOCUMENT_BASE64_STRING)
  private String foDocumentBase64String;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private PdfMetadataDto metadata;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private Map<String, String> resources;

  public static final String SERIALIZED_NAME_XML_DATA_DOCUMENT_BASE64_STRING = "xmlDataDocumentBase64String";
  @SerializedName(SERIALIZED_NAME_XML_DATA_DOCUMENT_BASE64_STRING)
  private String xmlDataDocumentBase64String;

  public FoTransformRequestDto() {
  }

  public FoTransformRequestDto foDocumentBase64String(String foDocumentBase64String) {
    this.foDocumentBase64String = foDocumentBase64String;
    return this;
  }

  /**
   * This is the complete XSL-FO document provided using Base64 encoding.
   * @return foDocumentBase64String
   */
  @javax.annotation.Nullable
  public String getFoDocumentBase64String() {
    return foDocumentBase64String;
  }

  public void setFoDocumentBase64String(String foDocumentBase64String) {
    this.foDocumentBase64String = foDocumentBase64String;
  }


  public FoTransformRequestDto metadata(PdfMetadataDto metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public PdfMetadataDto getMetadata() {
    return metadata;
  }

  public void setMetadata(PdfMetadataDto metadata) {
    this.metadata = metadata;
  }


  public FoTransformRequestDto resources(Map<String, String> resources) {
    this.resources = resources;
    return this;
  }

  public FoTransformRequestDto putResourcesItem(String key, String resourcesItem) {
    if (this.resources == null) {
      this.resources = new HashMap<>();
    }
    this.resources.put(key, resourcesItem);
    return this;
  }

  /**
   * This is a set of key-value pairs of digital resources like images that is referenced in the XSL-FO document. It uses the filename as key and the data is provided as a Base64 encoded string.
   * @return resources
   */
  @javax.annotation.Nullable
  public Map<String, String> getResources() {
    return resources;
  }

  public void setResources(Map<String, String> resources) {
    this.resources = resources;
  }


  public FoTransformRequestDto xmlDataDocumentBase64String(String xmlDataDocumentBase64String) {
    this.xmlDataDocumentBase64String = xmlDataDocumentBase64String;
    return this;
  }

  /**
   * This is xml data document on which the XSL-FO transform document is applied. Provided using Base64 encoding.
   * @return xmlDataDocumentBase64String
   */
  @javax.annotation.Nullable
  public String getXmlDataDocumentBase64String() {
    return xmlDataDocumentBase64String;
  }

  public void setXmlDataDocumentBase64String(String xmlDataDocumentBase64String) {
    this.xmlDataDocumentBase64String = xmlDataDocumentBase64String;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FoTransformRequestDto foTransformRequestDto = (FoTransformRequestDto) o;
    return Objects.equals(this.foDocumentBase64String, foTransformRequestDto.foDocumentBase64String) &&
        Objects.equals(this.metadata, foTransformRequestDto.metadata) &&
        Objects.equals(this.resources, foTransformRequestDto.resources) &&
        Objects.equals(this.xmlDataDocumentBase64String, foTransformRequestDto.xmlDataDocumentBase64String);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(foDocumentBase64String, metadata, resources, xmlDataDocumentBase64String);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FoTransformRequestDto {\n");
    sb.append("    foDocumentBase64String: ").append(toIndentedString(foDocumentBase64String)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    xmlDataDocumentBase64String: ").append(toIndentedString(xmlDataDocumentBase64String)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("foDocumentBase64String");
    openapiFields.add("metadata");
    openapiFields.add("resources");
    openapiFields.add("xmlDataDocumentBase64String");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FoTransformRequestDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FoTransformRequestDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FoTransformRequestDto is not found in the empty JSON string", FoTransformRequestDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FoTransformRequestDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FoTransformRequestDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("foDocumentBase64String") != null && !jsonObj.get("foDocumentBase64String").isJsonNull()) && !jsonObj.get("foDocumentBase64String").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foDocumentBase64String` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foDocumentBase64String").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        PdfMetadataDto.validateJsonElement(jsonObj.get("metadata"));
      }
      if ((jsonObj.get("xmlDataDocumentBase64String") != null && !jsonObj.get("xmlDataDocumentBase64String").isJsonNull()) && !jsonObj.get("xmlDataDocumentBase64String").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xmlDataDocumentBase64String` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xmlDataDocumentBase64String").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FoTransformRequestDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FoTransformRequestDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FoTransformRequestDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FoTransformRequestDto.class));

       return (TypeAdapter<T>) new TypeAdapter<FoTransformRequestDto>() {
           @Override
           public void write(JsonWriter out, FoTransformRequestDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FoTransformRequestDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FoTransformRequestDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FoTransformRequestDto
   * @throws IOException if the JSON string is invalid with respect to FoTransformRequestDto
   */
  public static FoTransformRequestDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FoTransformRequestDto.class);
  }

  /**
   * Convert an instance of FoTransformRequestDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

