/*
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Enter meta data for pdf document
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:46.869013-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PdfMetadataDto {
  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_ENABLE_ADD = "enableAdd";
  @SerializedName(SERIALIZED_NAME_ENABLE_ADD)
  private Boolean enableAdd;

  public static final String SERIALIZED_NAME_ENABLE_COPY = "enableCopy";
  @SerializedName(SERIALIZED_NAME_ENABLE_COPY)
  private Boolean enableCopy;

  public static final String SERIALIZED_NAME_ENABLE_MODIFY = "enableModify";
  @SerializedName(SERIALIZED_NAME_ENABLE_MODIFY)
  private Boolean enableModify;

  public static final String SERIALIZED_NAME_ENABLE_PRINTING = "enablePrinting";
  @SerializedName(SERIALIZED_NAME_ENABLE_PRINTING)
  private Boolean enablePrinting;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private List<String> keywords;

  public static final String SERIALIZED_NAME_OWNER_PASSWORD = "ownerPassword";
  @SerializedName(SERIALIZED_NAME_OWNER_PASSWORD)
  private String ownerPassword;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_USER_PASSWORD = "userPassword";
  @SerializedName(SERIALIZED_NAME_USER_PASSWORD)
  private String userPassword;

  public PdfMetadataDto() {
  }

  public PdfMetadataDto author(String author) {
    this.author = author;
    return this;
  }

  /**
   * Pdf document author
   * @return author
   */
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public PdfMetadataDto enableAdd(Boolean enableAdd) {
    this.enableAdd = enableAdd;
    return this;
  }

  /**
   * Enables or disables adding or modifying text annotations and interactive  form fields.
   * @return enableAdd
   */
  @javax.annotation.Nullable
  public Boolean getEnableAdd() {
    return enableAdd;
  }

  public void setEnableAdd(Boolean enableAdd) {
    this.enableAdd = enableAdd;
  }


  public PdfMetadataDto enableCopy(Boolean enableCopy) {
    this.enableCopy = enableCopy;
    return this;
  }

  /**
   * Enables or disables copying of text and graphics.
   * @return enableCopy
   */
  @javax.annotation.Nullable
  public Boolean getEnableCopy() {
    return enableCopy;
  }

  public void setEnableCopy(Boolean enableCopy) {
    this.enableCopy = enableCopy;
  }


  public PdfMetadataDto enableModify(Boolean enableModify) {
    this.enableModify = enableModify;
    return this;
  }

  /**
   * Enables or disables modifying document contents (other than text annotations and   interactive form fields).
   * @return enableModify
   */
  @javax.annotation.Nullable
  public Boolean getEnableModify() {
    return enableModify;
  }

  public void setEnableModify(Boolean enableModify) {
    this.enableModify = enableModify;
  }


  public PdfMetadataDto enablePrinting(Boolean enablePrinting) {
    this.enablePrinting = enablePrinting;
    return this;
  }

  /**
   * Enables or disables printing.
   * @return enablePrinting
   */
  @javax.annotation.Nullable
  public Boolean getEnablePrinting() {
    return enablePrinting;
  }

  public void setEnablePrinting(Boolean enablePrinting) {
    this.enablePrinting = enablePrinting;
  }


  public PdfMetadataDto keywords(List<String> keywords) {
    this.keywords = keywords;
    return this;
  }

  public PdfMetadataDto addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

  /**
   * Pdf document keywords
   * @return keywords
   */
  @javax.annotation.Nullable
  public List<String> getKeywords() {
    return keywords;
  }

  public void setKeywords(List<String> keywords) {
    this.keywords = keywords;
  }


  public PdfMetadataDto ownerPassword(String ownerPassword) {
    this.ownerPassword = ownerPassword;
    return this;
  }

  /**
   * Specifies the owner password that will protect full access to any generated PDF documents.
   * @return ownerPassword
   */
  @javax.annotation.Nullable
  public String getOwnerPassword() {
    return ownerPassword;
  }

  public void setOwnerPassword(String ownerPassword) {
    this.ownerPassword = ownerPassword;
  }


  public PdfMetadataDto subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Pdf document subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public PdfMetadataDto title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Pdf document title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public PdfMetadataDto userPassword(String userPassword) {
    this.userPassword = userPassword;
    return this;
  }

  /**
   * Specifies the user password that will protect access to any generated PDF documents.
   * @return userPassword
   */
  @javax.annotation.Nullable
  public String getUserPassword() {
    return userPassword;
  }

  public void setUserPassword(String userPassword) {
    this.userPassword = userPassword;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfMetadataDto pdfMetadataDto = (PdfMetadataDto) o;
    return Objects.equals(this.author, pdfMetadataDto.author) &&
        Objects.equals(this.enableAdd, pdfMetadataDto.enableAdd) &&
        Objects.equals(this.enableCopy, pdfMetadataDto.enableCopy) &&
        Objects.equals(this.enableModify, pdfMetadataDto.enableModify) &&
        Objects.equals(this.enablePrinting, pdfMetadataDto.enablePrinting) &&
        Objects.equals(this.keywords, pdfMetadataDto.keywords) &&
        Objects.equals(this.ownerPassword, pdfMetadataDto.ownerPassword) &&
        Objects.equals(this.subject, pdfMetadataDto.subject) &&
        Objects.equals(this.title, pdfMetadataDto.title) &&
        Objects.equals(this.userPassword, pdfMetadataDto.userPassword);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, enableAdd, enableCopy, enableModify, enablePrinting, keywords, ownerPassword, subject, title, userPassword);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfMetadataDto {\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    enableAdd: ").append(toIndentedString(enableAdd)).append("\n");
    sb.append("    enableCopy: ").append(toIndentedString(enableCopy)).append("\n");
    sb.append("    enableModify: ").append(toIndentedString(enableModify)).append("\n");
    sb.append("    enablePrinting: ").append(toIndentedString(enablePrinting)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    ownerPassword: ").append(toIndentedString(ownerPassword)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    userPassword: ").append(toIndentedString(userPassword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("author");
    openapiFields.add("enableAdd");
    openapiFields.add("enableCopy");
    openapiFields.add("enableModify");
    openapiFields.add("enablePrinting");
    openapiFields.add("keywords");
    openapiFields.add("ownerPassword");
    openapiFields.add("subject");
    openapiFields.add("title");
    openapiFields.add("userPassword");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PdfMetadataDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PdfMetadataDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PdfMetadataDto is not found in the empty JSON string", PdfMetadataDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PdfMetadataDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PdfMetadataDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonNull() && !jsonObj.get("keywords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywords` to be an array in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
      }
      if ((jsonObj.get("ownerPassword") != null && !jsonObj.get("ownerPassword").isJsonNull()) && !jsonObj.get("ownerPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerPassword").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("userPassword") != null && !jsonObj.get("userPassword").isJsonNull()) && !jsonObj.get("userPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userPassword").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PdfMetadataDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PdfMetadataDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PdfMetadataDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PdfMetadataDto.class));

       return (TypeAdapter<T>) new TypeAdapter<PdfMetadataDto>() {
           @Override
           public void write(JsonWriter out, PdfMetadataDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PdfMetadataDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PdfMetadataDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PdfMetadataDto
   * @throws IOException if the JSON string is invalid with respect to PdfMetadataDto
   */
  public static PdfMetadataDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PdfMetadataDto.class);
  }

  /**
   * Convert an instance of PdfMetadataDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

