/*
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WkHtmlToPdfRequestDto is the data transfer object for generating a pdf using wkhtmltopdf;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:46.869013-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WkHtmlToPdfRequestDto {
  public static final String SERIALIZED_NAME_HTML_BASE64_STRING = "htmlBase64String";
  @SerializedName(SERIALIZED_NAME_HTML_BASE64_STRING)
  private String htmlBase64String;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private Map<String, String> resources;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WK_HTML_TO_PDF_ARGUMENTS = "wkHtmlToPdfArguments";
  @SerializedName(SERIALIZED_NAME_WK_HTML_TO_PDF_ARGUMENTS)
  private Map<String, String> wkHtmlToPdfArguments;

  public WkHtmlToPdfRequestDto() {
  }

  public WkHtmlToPdfRequestDto htmlBase64String(String htmlBase64String) {
    this.htmlBase64String = htmlBase64String;
    return this;
  }

  /**
   * Base64 encoded string with html. If property Url is set, it will be used, not HtmlBase64String.
   * @return htmlBase64String
   */
  @javax.annotation.Nullable
  public String getHtmlBase64String() {
    return htmlBase64String;
  }

  public void setHtmlBase64String(String htmlBase64String) {
    this.htmlBase64String = htmlBase64String;
  }


  public WkHtmlToPdfRequestDto resources(Map<String, String> resources) {
    this.resources = resources;
    return this;
  }

  public WkHtmlToPdfRequestDto putResourcesItem(String key, String resourcesItem) {
    if (this.resources == null) {
      this.resources = new HashMap<>();
    }
    this.resources.put(key, resourcesItem);
    return this;
  }

  /**
   * This is a set of key-value pairs of digital resources like images that is referenced in the HtmlBase64String document. It uses the filename including relative path as key and the data is provided as a Base64 encoded string.
   * @return resources
   */
  @javax.annotation.Nullable
  public Map<String, String> getResources() {
    return resources;
  }

  public void setResources(Map<String, String> resources) {
    this.resources = resources;
  }


  public WkHtmlToPdfRequestDto url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The url to generate pdf from. Url has precedence over HtmlBase64String value if both are set.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public WkHtmlToPdfRequestDto wkHtmlToPdfArguments(Map<String, String> wkHtmlToPdfArguments) {
    this.wkHtmlToPdfArguments = wkHtmlToPdfArguments;
    return this;
  }

  public WkHtmlToPdfRequestDto putWkHtmlToPdfArgumentsItem(String key, String wkHtmlToPdfArgumentsItem) {
    if (this.wkHtmlToPdfArguments == null) {
      this.wkHtmlToPdfArguments = new HashMap<>();
    }
    this.wkHtmlToPdfArguments.put(key, wkHtmlToPdfArgumentsItem);
    return this;
  }

  /**
   * Command line arguments passed to wkhtmltopdf.
   * @return wkHtmlToPdfArguments
   */
  @javax.annotation.Nullable
  public Map<String, String> getWkHtmlToPdfArguments() {
    return wkHtmlToPdfArguments;
  }

  public void setWkHtmlToPdfArguments(Map<String, String> wkHtmlToPdfArguments) {
    this.wkHtmlToPdfArguments = wkHtmlToPdfArguments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WkHtmlToPdfRequestDto wkHtmlToPdfRequestDto = (WkHtmlToPdfRequestDto) o;
    return Objects.equals(this.htmlBase64String, wkHtmlToPdfRequestDto.htmlBase64String) &&
        Objects.equals(this.resources, wkHtmlToPdfRequestDto.resources) &&
        Objects.equals(this.url, wkHtmlToPdfRequestDto.url) &&
        Objects.equals(this.wkHtmlToPdfArguments, wkHtmlToPdfRequestDto.wkHtmlToPdfArguments);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(htmlBase64String, resources, url, wkHtmlToPdfArguments);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WkHtmlToPdfRequestDto {\n");
    sb.append("    htmlBase64String: ").append(toIndentedString(htmlBase64String)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    wkHtmlToPdfArguments: ").append(toIndentedString(wkHtmlToPdfArguments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("htmlBase64String");
    openapiFields.add("resources");
    openapiFields.add("url");
    openapiFields.add("wkHtmlToPdfArguments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WkHtmlToPdfRequestDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WkHtmlToPdfRequestDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WkHtmlToPdfRequestDto is not found in the empty JSON string", WkHtmlToPdfRequestDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WkHtmlToPdfRequestDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WkHtmlToPdfRequestDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("htmlBase64String") != null && !jsonObj.get("htmlBase64String").isJsonNull()) && !jsonObj.get("htmlBase64String").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `htmlBase64String` to be a primitive type in the JSON string but got `%s`", jsonObj.get("htmlBase64String").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WkHtmlToPdfRequestDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WkHtmlToPdfRequestDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WkHtmlToPdfRequestDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WkHtmlToPdfRequestDto.class));

       return (TypeAdapter<T>) new TypeAdapter<WkHtmlToPdfRequestDto>() {
           @Override
           public void write(JsonWriter out, WkHtmlToPdfRequestDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WkHtmlToPdfRequestDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WkHtmlToPdfRequestDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WkHtmlToPdfRequestDto
   * @throws IOException if the JSON string is invalid with respect to WkHtmlToPdfRequestDto
   */
  public static WkHtmlToPdfRequestDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WkHtmlToPdfRequestDto.class);
  }

  /**
   * Convert an instance of WkHtmlToPdfRequestDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

