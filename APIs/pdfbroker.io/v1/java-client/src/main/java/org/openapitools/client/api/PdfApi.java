/*
 * PdfBroker.io API
 * PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pdfbroker.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiPdfPdfconcatPostRequest;
import org.openapitools.client.model.ApiPdfPdftoimagePostRequest;
import org.openapitools.client.model.ApiPdfPdfwritestringPostRequest;
import org.openapitools.client.model.ApiPdfXslfoPostRequest;
import org.openapitools.client.model.ApiPdfXslfowithtransformPostRequest;
import org.openapitools.client.model.ErrorResponseDto;
import java.io.File;
import org.openapitools.client.model.FoRequestDto;
import org.openapitools.client.model.FoTransformRequestDto;
import org.openapitools.client.model.ImageResponseDto;
import org.openapitools.client.model.PdfConcatenationRequestDto;
import org.openapitools.client.model.PdfResponseDto;
import org.openapitools.client.model.PdfToImageRequestDto;
import org.openapitools.client.model.PdfWriteStringRequestDto;
import org.openapitools.client.model.WkHtmlToPdfRequestDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PdfApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PdfApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PdfApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiPdfGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPdfGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pdf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPdfGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiPdfGetCall(_callback);

    }

    /**
     * Basic method to verify api is up and running
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public void apiPdfGet() throws ApiException {
        apiPdfGetWithHttpInfo();
    }

    /**
     * Basic method to verify api is up and running
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiPdfGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiPdfGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Basic method to verify api is up and running (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPdfGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPdfGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPdfPdfconcatPost
     * @param pdfConcatenationRequestDto PdfConcat Request. Add two or more pdf files and concatenate pages into single pdf document. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPdfPdfconcatPostCall(PdfConcatenationRequestDto pdfConcatenationRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pdfConcatenationRequestDto;

        // create path and map variables
        String localVarPath = "/api/pdf/pdfconcat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPdfPdfconcatPostValidateBeforeCall(PdfConcatenationRequestDto pdfConcatenationRequestDto, final ApiCallback _callback) throws ApiException {
        return apiPdfPdfconcatPostCall(pdfConcatenationRequestDto, _callback);

    }

    /**
     * Concatenate multiple pdf files into single pdf file..
     * 
     * @param pdfConcatenationRequestDto PdfConcat Request. Add two or more pdf files and concatenate pages into single pdf document. (optional)
     * @return PdfResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public PdfResponseDto apiPdfPdfconcatPost(PdfConcatenationRequestDto pdfConcatenationRequestDto) throws ApiException {
        ApiResponse<PdfResponseDto> localVarResp = apiPdfPdfconcatPostWithHttpInfo(pdfConcatenationRequestDto);
        return localVarResp.getData();
    }

    /**
     * Concatenate multiple pdf files into single pdf file..
     * 
     * @param pdfConcatenationRequestDto PdfConcat Request. Add two or more pdf files and concatenate pages into single pdf document. (optional)
     * @return ApiResponse&lt;PdfResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfResponseDto> apiPdfPdfconcatPostWithHttpInfo(PdfConcatenationRequestDto pdfConcatenationRequestDto) throws ApiException {
        okhttp3.Call localVarCall = apiPdfPdfconcatPostValidateBeforeCall(pdfConcatenationRequestDto, null);
        Type localVarReturnType = new TypeToken<PdfResponseDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Concatenate multiple pdf files into single pdf file.. (asynchronously)
     * 
     * @param pdfConcatenationRequestDto PdfConcat Request. Add two or more pdf files and concatenate pages into single pdf document. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPdfPdfconcatPostAsync(PdfConcatenationRequestDto pdfConcatenationRequestDto, final ApiCallback<PdfResponseDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPdfPdfconcatPostValidateBeforeCall(pdfConcatenationRequestDto, _callback);
        Type localVarReturnType = new TypeToken<PdfResponseDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPdfPdftoimagePost
     * @param pdfToImageRequestDto PdfToImage Request. Create an image of a page in an existing pdf document. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generate an image of the provided pdf file. Either the image file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPdfPdftoimagePostCall(PdfToImageRequestDto pdfToImageRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pdfToImageRequestDto;

        // create path and map variables
        String localVarPath = "/api/pdf/pdftoimage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "image/gif",
            "image/jpeg",
            "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPdfPdftoimagePostValidateBeforeCall(PdfToImageRequestDto pdfToImageRequestDto, final ApiCallback _callback) throws ApiException {
        return apiPdfPdftoimagePostCall(pdfToImageRequestDto, _callback);

    }

    /**
     * Generate an image of to provided pdf file
     * 
     * @param pdfToImageRequestDto PdfToImage Request. Create an image of a page in an existing pdf document. (optional)
     * @return ImageResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generate an image of the provided pdf file. Either the image file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public ImageResponseDto apiPdfPdftoimagePost(PdfToImageRequestDto pdfToImageRequestDto) throws ApiException {
        ApiResponse<ImageResponseDto> localVarResp = apiPdfPdftoimagePostWithHttpInfo(pdfToImageRequestDto);
        return localVarResp.getData();
    }

    /**
     * Generate an image of to provided pdf file
     * 
     * @param pdfToImageRequestDto PdfToImage Request. Create an image of a page in an existing pdf document. (optional)
     * @return ApiResponse&lt;ImageResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generate an image of the provided pdf file. Either the image file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageResponseDto> apiPdfPdftoimagePostWithHttpInfo(PdfToImageRequestDto pdfToImageRequestDto) throws ApiException {
        okhttp3.Call localVarCall = apiPdfPdftoimagePostValidateBeforeCall(pdfToImageRequestDto, null);
        Type localVarReturnType = new TypeToken<ImageResponseDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate an image of to provided pdf file (asynchronously)
     * 
     * @param pdfToImageRequestDto PdfToImage Request. Create an image of a page in an existing pdf document. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generate an image of the provided pdf file. Either the image file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPdfPdftoimagePostAsync(PdfToImageRequestDto pdfToImageRequestDto, final ApiCallback<ImageResponseDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPdfPdftoimagePostValidateBeforeCall(pdfToImageRequestDto, _callback);
        Type localVarReturnType = new TypeToken<ImageResponseDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPdfPdfwritestringPost
     * @param pdfWriteStringRequestDto PdfWriteString Request. Write string on page in pdf document (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPdfPdfwritestringPostCall(PdfWriteStringRequestDto pdfWriteStringRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pdfWriteStringRequestDto;

        // create path and map variables
        String localVarPath = "/api/pdf/pdfwritestring";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPdfPdfwritestringPostValidateBeforeCall(PdfWriteStringRequestDto pdfWriteStringRequestDto, final ApiCallback _callback) throws ApiException {
        return apiPdfPdfwritestringPostCall(pdfWriteStringRequestDto, _callback);

    }

    /**
     * Write text on a page in a pdf document.
     * 
     * @param pdfWriteStringRequestDto PdfWriteString Request. Write string on page in pdf document (optional)
     * @return PdfResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public PdfResponseDto apiPdfPdfwritestringPost(PdfWriteStringRequestDto pdfWriteStringRequestDto) throws ApiException {
        ApiResponse<PdfResponseDto> localVarResp = apiPdfPdfwritestringPostWithHttpInfo(pdfWriteStringRequestDto);
        return localVarResp.getData();
    }

    /**
     * Write text on a page in a pdf document.
     * 
     * @param pdfWriteStringRequestDto PdfWriteString Request. Write string on page in pdf document (optional)
     * @return ApiResponse&lt;PdfResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfResponseDto> apiPdfPdfwritestringPostWithHttpInfo(PdfWriteStringRequestDto pdfWriteStringRequestDto) throws ApiException {
        okhttp3.Call localVarCall = apiPdfPdfwritestringPostValidateBeforeCall(pdfWriteStringRequestDto, null);
        Type localVarReturnType = new TypeToken<PdfResponseDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Write text on a page in a pdf document. (asynchronously)
     * 
     * @param pdfWriteStringRequestDto PdfWriteString Request. Write string on page in pdf document (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPdfPdfwritestringPostAsync(PdfWriteStringRequestDto pdfWriteStringRequestDto, final ApiCallback<PdfResponseDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPdfPdfwritestringPostValidateBeforeCall(pdfWriteStringRequestDto, _callback);
        Type localVarReturnType = new TypeToken<PdfResponseDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPdfWkhtmltopdfPost
     * @param wkHtmlToPdfRequestDto WkHtmlToPdf Request. Generate pdf from html, either from url or base64 encoded html string (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs executing request </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPdfWkhtmltopdfPostCall(WkHtmlToPdfRequestDto wkHtmlToPdfRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wkHtmlToPdfRequestDto;

        // create path and map variables
        String localVarPath = "/api/pdf/wkhtmltopdf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPdfWkhtmltopdfPostValidateBeforeCall(WkHtmlToPdfRequestDto wkHtmlToPdfRequestDto, final ApiCallback _callback) throws ApiException {
        return apiPdfWkhtmltopdfPostCall(wkHtmlToPdfRequestDto, _callback);

    }

    /**
     * Generate pdf file from url using the excellent tool wkhtmltopdf.
     * 
     * @param wkHtmlToPdfRequestDto WkHtmlToPdf Request. Generate pdf from html, either from url or base64 encoded html string (optional)
     * @return PdfResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs executing request </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public PdfResponseDto apiPdfWkhtmltopdfPost(WkHtmlToPdfRequestDto wkHtmlToPdfRequestDto) throws ApiException {
        ApiResponse<PdfResponseDto> localVarResp = apiPdfWkhtmltopdfPostWithHttpInfo(wkHtmlToPdfRequestDto);
        return localVarResp.getData();
    }

    /**
     * Generate pdf file from url using the excellent tool wkhtmltopdf.
     * 
     * @param wkHtmlToPdfRequestDto WkHtmlToPdf Request. Generate pdf from html, either from url or base64 encoded html string (optional)
     * @return ApiResponse&lt;PdfResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs executing request </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfResponseDto> apiPdfWkhtmltopdfPostWithHttpInfo(WkHtmlToPdfRequestDto wkHtmlToPdfRequestDto) throws ApiException {
        okhttp3.Call localVarCall = apiPdfWkhtmltopdfPostValidateBeforeCall(wkHtmlToPdfRequestDto, null);
        Type localVarReturnType = new TypeToken<PdfResponseDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate pdf file from url using the excellent tool wkhtmltopdf. (asynchronously)
     * 
     * @param wkHtmlToPdfRequestDto WkHtmlToPdf Request. Generate pdf from html, either from url or base64 encoded html string (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs executing request </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPdfWkhtmltopdfPostAsync(WkHtmlToPdfRequestDto wkHtmlToPdfRequestDto, final ApiCallback<PdfResponseDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPdfWkhtmltopdfPostValidateBeforeCall(wkHtmlToPdfRequestDto, _callback);
        Type localVarReturnType = new TypeToken<PdfResponseDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPdfXslfoPost
     * @param foRequestDto XSL-FO Request, the basic XSL-FO request. Post your XSL-FO document and digital resources, either as &#39;multipart/form-data&#39; or &#39;application/json&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPdfXslfoPostCall(FoRequestDto foRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = foRequestDto;

        // create path and map variables
        String localVarPath = "/api/pdf/xslfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPdfXslfoPostValidateBeforeCall(FoRequestDto foRequestDto, final ApiCallback _callback) throws ApiException {
        return apiPdfXslfoPostCall(foRequestDto, _callback);

    }

    /**
     * Create pdf-file from complete XSL-FO document.
     * 
     * @param foRequestDto XSL-FO Request, the basic XSL-FO request. Post your XSL-FO document and digital resources, either as &#39;multipart/form-data&#39; or &#39;application/json&#39; (optional)
     * @return PdfResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public PdfResponseDto apiPdfXslfoPost(FoRequestDto foRequestDto) throws ApiException {
        ApiResponse<PdfResponseDto> localVarResp = apiPdfXslfoPostWithHttpInfo(foRequestDto);
        return localVarResp.getData();
    }

    /**
     * Create pdf-file from complete XSL-FO document.
     * 
     * @param foRequestDto XSL-FO Request, the basic XSL-FO request. Post your XSL-FO document and digital resources, either as &#39;multipart/form-data&#39; or &#39;application/json&#39; (optional)
     * @return ApiResponse&lt;PdfResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfResponseDto> apiPdfXslfoPostWithHttpInfo(FoRequestDto foRequestDto) throws ApiException {
        okhttp3.Call localVarCall = apiPdfXslfoPostValidateBeforeCall(foRequestDto, null);
        Type localVarReturnType = new TypeToken<PdfResponseDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create pdf-file from complete XSL-FO document. (asynchronously)
     * 
     * @param foRequestDto XSL-FO Request, the basic XSL-FO request. Post your XSL-FO document and digital resources, either as &#39;multipart/form-data&#39; or &#39;application/json&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPdfXslfoPostAsync(FoRequestDto foRequestDto, final ApiCallback<PdfResponseDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPdfXslfoPostValidateBeforeCall(foRequestDto, _callback);
        Type localVarReturnType = new TypeToken<PdfResponseDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPdfXslfowithtransformPost
     * @param foTransformRequestDto XSL-FO Transform Request. The XSL-FO is transformed on the supplied xml data document. Post your XSL-FO transform document and xml data document aloing with your digital resources, either as &#39;multipart/form-data&#39; or &#39;application/json&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPdfXslfowithtransformPostCall(FoTransformRequestDto foTransformRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = foTransformRequestDto;

        // create path and map variables
        String localVarPath = "/api/pdf/xslfowithtransform";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPdfXslfowithtransformPostValidateBeforeCall(FoTransformRequestDto foTransformRequestDto, final ApiCallback _callback) throws ApiException {
        return apiPdfXslfowithtransformPostCall(foTransformRequestDto, _callback);

    }

    /**
     * Create pdf-file from transforming xml document with Xsl-Fo transform document.
     * 
     * @param foTransformRequestDto XSL-FO Transform Request. The XSL-FO is transformed on the supplied xml data document. Post your XSL-FO transform document and xml data document aloing with your digital resources, either as &#39;multipart/form-data&#39; or &#39;application/json&#39; (optional)
     * @return PdfResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public PdfResponseDto apiPdfXslfowithtransformPost(FoTransformRequestDto foTransformRequestDto) throws ApiException {
        ApiResponse<PdfResponseDto> localVarResp = apiPdfXslfowithtransformPostWithHttpInfo(foTransformRequestDto);
        return localVarResp.getData();
    }

    /**
     * Create pdf-file from transforming xml document with Xsl-Fo transform document.
     * 
     * @param foTransformRequestDto XSL-FO Transform Request. The XSL-FO is transformed on the supplied xml data document. Post your XSL-FO transform document and xml data document aloing with your digital resources, either as &#39;multipart/form-data&#39; or &#39;application/json&#39; (optional)
     * @return ApiResponse&lt;PdfResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfResponseDto> apiPdfXslfowithtransformPostWithHttpInfo(FoTransformRequestDto foTransformRequestDto) throws ApiException {
        okhttp3.Call localVarCall = apiPdfXslfowithtransformPostValidateBeforeCall(foTransformRequestDto, null);
        Type localVarReturnType = new TypeToken<PdfResponseDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create pdf-file from transforming xml document with Xsl-Fo transform document. (asynchronously)
     * 
     * @param foTransformRequestDto XSL-FO Transform Request. The XSL-FO is transformed on the supplied xml data document. Post your XSL-FO transform document and xml data document aloing with your digital resources, either as &#39;multipart/form-data&#39; or &#39;application/json&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any error occurs parsing input </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> If content-type of request is not set to multipart/form-data or application/json </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> If you reach the monthly request limit for your subscription plan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPdfXslfowithtransformPostAsync(FoTransformRequestDto foTransformRequestDto, final ApiCallback<PdfResponseDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPdfXslfowithtransformPostValidateBeforeCall(foTransformRequestDto, _callback);
        Type localVarReturnType = new TypeToken<PdfResponseDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
