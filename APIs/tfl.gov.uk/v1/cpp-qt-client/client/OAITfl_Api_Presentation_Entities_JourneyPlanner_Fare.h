/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare.h
 *
 * 
 */

#ifndef OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare_H
#define OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare_H

#include <QJsonObject>

#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTap.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTap;

class OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare : public OAIObject {
public:
    OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare();
    OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare(QString json);
    ~OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getChargeLevel() const;
    void setChargeLevel(const QString &charge_level);
    bool is_charge_level_Set() const;
    bool is_charge_level_Valid() const;

    QString getChargeProfileName() const;
    void setChargeProfileName(const QString &charge_profile_name);
    bool is_charge_profile_name_Set() const;
    bool is_charge_profile_name_Valid() const;

    qint32 getCost() const;
    void setCost(const qint32 &cost);
    bool is_cost_Set() const;
    bool is_cost_Valid() const;

    qint32 getHighZone() const;
    void setHighZone(const qint32 &high_zone);
    bool is_high_zone_Set() const;
    bool is_high_zone_Valid() const;

    bool isIsHopperFare() const;
    void setIsHopperFare(const bool &is_hopper_fare);
    bool is_is_hopper_fare_Set() const;
    bool is_is_hopper_fare_Valid() const;

    qint32 getLowZone() const;
    void setLowZone(const qint32 &low_zone);
    bool is_low_zone_Set() const;
    bool is_low_zone_Valid() const;

    qint32 getOffPeak() const;
    void setOffPeak(const qint32 &off_peak);
    bool is_off_peak_Set() const;
    bool is_off_peak_Valid() const;

    qint32 getPeak() const;
    void setPeak(const qint32 &peak);
    bool is_peak_Set() const;
    bool is_peak_Valid() const;

    QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTap> getTaps() const;
    void setTaps(const QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTap> &taps);
    bool is_taps_Set() const;
    bool is_taps_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_charge_level;
    bool m_charge_level_isSet;
    bool m_charge_level_isValid;

    QString m_charge_profile_name;
    bool m_charge_profile_name_isSet;
    bool m_charge_profile_name_isValid;

    qint32 m_cost;
    bool m_cost_isSet;
    bool m_cost_isValid;

    qint32 m_high_zone;
    bool m_high_zone_isSet;
    bool m_high_zone_isValid;

    bool m_is_hopper_fare;
    bool m_is_hopper_fare_isSet;
    bool m_is_hopper_fare_isValid;

    qint32 m_low_zone;
    bool m_low_zone_isSet;
    bool m_low_zone_isValid;

    qint32 m_off_peak;
    bool m_off_peak_isSet;
    bool m_off_peak_isValid;

    qint32 m_peak;
    bool m_peak_isSet;
    bool m_peak_isValid;

    QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTap> m_taps;
    bool m_taps_isSet;
    bool m_taps_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare)

#endif // OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare_H
