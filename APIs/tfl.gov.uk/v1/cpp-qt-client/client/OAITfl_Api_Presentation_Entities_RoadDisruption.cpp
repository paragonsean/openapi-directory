/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_RoadDisruption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_RoadDisruption::OAITfl_Api_Presentation_Entities_RoadDisruption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_RoadDisruption::OAITfl_Api_Presentation_Entities_RoadDisruption() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_RoadDisruption::~OAITfl_Api_Presentation_Entities_RoadDisruption() {}

void OAITfl_Api_Presentation_Entities_RoadDisruption::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_corridor_ids_isSet = false;
    m_corridor_ids_isValid = false;

    m_current_update_isSet = false;
    m_current_update_isValid = false;

    m_current_update_date_time_isSet = false;
    m_current_update_date_time_isValid = false;

    m_end_date_time_isSet = false;
    m_end_date_time_isValid = false;

    m_geography_isSet = false;
    m_geography_isValid = false;

    m_geometry_isSet = false;
    m_geometry_isValid = false;

    m_has_closures_isSet = false;
    m_has_closures_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_provisional_isSet = false;
    m_is_provisional_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_level_of_interest_isSet = false;
    m_level_of_interest_isValid = false;

    m_link_text_isSet = false;
    m_link_text_isValid = false;

    m_link_url_isSet = false;
    m_link_url_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_ordinal_isSet = false;
    m_ordinal_isValid = false;

    m_point_isSet = false;
    m_point_isValid = false;

    m_publish_end_date_isSet = false;
    m_publish_end_date_isValid = false;

    m_publish_start_date_isSet = false;
    m_publish_start_date_isValid = false;

    m_recurring_schedules_isSet = false;
    m_recurring_schedules_isValid = false;

    m_road_disruption_impact_areas_isSet = false;
    m_road_disruption_impact_areas_isValid = false;

    m_road_disruption_lines_isSet = false;
    m_road_disruption_lines_isValid = false;

    m_road_project_isSet = false;
    m_road_project_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_streets_isSet = false;
    m_streets_isValid = false;

    m_sub_category_isSet = false;
    m_sub_category_isValid = false;

    m_time_frame_isSet = false;
    m_time_frame_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAITfl_Api_Presentation_Entities_RoadDisruption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_RoadDisruption::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_corridor_ids_isValid = ::OpenAPI::fromJsonValue(m_corridor_ids, json[QString("corridorIds")]);
    m_corridor_ids_isSet = !json[QString("corridorIds")].isNull() && m_corridor_ids_isValid;

    m_current_update_isValid = ::OpenAPI::fromJsonValue(m_current_update, json[QString("currentUpdate")]);
    m_current_update_isSet = !json[QString("currentUpdate")].isNull() && m_current_update_isValid;

    m_current_update_date_time_isValid = ::OpenAPI::fromJsonValue(m_current_update_date_time, json[QString("currentUpdateDateTime")]);
    m_current_update_date_time_isSet = !json[QString("currentUpdateDateTime")].isNull() && m_current_update_date_time_isValid;

    m_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_end_date_time, json[QString("endDateTime")]);
    m_end_date_time_isSet = !json[QString("endDateTime")].isNull() && m_end_date_time_isValid;

    m_geography_isValid = ::OpenAPI::fromJsonValue(m_geography, json[QString("geography")]);
    m_geography_isSet = !json[QString("geography")].isNull() && m_geography_isValid;

    m_geometry_isValid = ::OpenAPI::fromJsonValue(m_geometry, json[QString("geometry")]);
    m_geometry_isSet = !json[QString("geometry")].isNull() && m_geometry_isValid;

    m_has_closures_isValid = ::OpenAPI::fromJsonValue(m_has_closures, json[QString("hasClosures")]);
    m_has_closures_isSet = !json[QString("hasClosures")].isNull() && m_has_closures_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_provisional_isValid = ::OpenAPI::fromJsonValue(m_is_provisional, json[QString("isProvisional")]);
    m_is_provisional_isSet = !json[QString("isProvisional")].isNull() && m_is_provisional_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_level_of_interest_isValid = ::OpenAPI::fromJsonValue(m_level_of_interest, json[QString("levelOfInterest")]);
    m_level_of_interest_isSet = !json[QString("levelOfInterest")].isNull() && m_level_of_interest_isValid;

    m_link_text_isValid = ::OpenAPI::fromJsonValue(m_link_text, json[QString("linkText")]);
    m_link_text_isSet = !json[QString("linkText")].isNull() && m_link_text_isValid;

    m_link_url_isValid = ::OpenAPI::fromJsonValue(m_link_url, json[QString("linkUrl")]);
    m_link_url_isSet = !json[QString("linkUrl")].isNull() && m_link_url_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_ordinal_isValid = ::OpenAPI::fromJsonValue(m_ordinal, json[QString("ordinal")]);
    m_ordinal_isSet = !json[QString("ordinal")].isNull() && m_ordinal_isValid;

    m_point_isValid = ::OpenAPI::fromJsonValue(m_point, json[QString("point")]);
    m_point_isSet = !json[QString("point")].isNull() && m_point_isValid;

    m_publish_end_date_isValid = ::OpenAPI::fromJsonValue(m_publish_end_date, json[QString("publishEndDate")]);
    m_publish_end_date_isSet = !json[QString("publishEndDate")].isNull() && m_publish_end_date_isValid;

    m_publish_start_date_isValid = ::OpenAPI::fromJsonValue(m_publish_start_date, json[QString("publishStartDate")]);
    m_publish_start_date_isSet = !json[QString("publishStartDate")].isNull() && m_publish_start_date_isValid;

    m_recurring_schedules_isValid = ::OpenAPI::fromJsonValue(m_recurring_schedules, json[QString("recurringSchedules")]);
    m_recurring_schedules_isSet = !json[QString("recurringSchedules")].isNull() && m_recurring_schedules_isValid;

    m_road_disruption_impact_areas_isValid = ::OpenAPI::fromJsonValue(m_road_disruption_impact_areas, json[QString("roadDisruptionImpactAreas")]);
    m_road_disruption_impact_areas_isSet = !json[QString("roadDisruptionImpactAreas")].isNull() && m_road_disruption_impact_areas_isValid;

    m_road_disruption_lines_isValid = ::OpenAPI::fromJsonValue(m_road_disruption_lines, json[QString("roadDisruptionLines")]);
    m_road_disruption_lines_isSet = !json[QString("roadDisruptionLines")].isNull() && m_road_disruption_lines_isValid;

    m_road_project_isValid = ::OpenAPI::fromJsonValue(m_road_project, json[QString("roadProject")]);
    m_road_project_isSet = !json[QString("roadProject")].isNull() && m_road_project_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_streets_isValid = ::OpenAPI::fromJsonValue(m_streets, json[QString("streets")]);
    m_streets_isSet = !json[QString("streets")].isNull() && m_streets_isValid;

    m_sub_category_isValid = ::OpenAPI::fromJsonValue(m_sub_category, json[QString("subCategory")]);
    m_sub_category_isSet = !json[QString("subCategory")].isNull() && m_sub_category_isValid;

    m_time_frame_isValid = ::OpenAPI::fromJsonValue(m_time_frame, json[QString("timeFrame")]);
    m_time_frame_isSet = !json[QString("timeFrame")].isNull() && m_time_frame_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadDisruption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_RoadDisruption::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_corridor_ids.size() > 0) {
        obj.insert(QString("corridorIds"), ::OpenAPI::toJsonValue(m_corridor_ids));
    }
    if (m_current_update_isSet) {
        obj.insert(QString("currentUpdate"), ::OpenAPI::toJsonValue(m_current_update));
    }
    if (m_current_update_date_time_isSet) {
        obj.insert(QString("currentUpdateDateTime"), ::OpenAPI::toJsonValue(m_current_update_date_time));
    }
    if (m_end_date_time_isSet) {
        obj.insert(QString("endDateTime"), ::OpenAPI::toJsonValue(m_end_date_time));
    }
    if (m_geography.isSet()) {
        obj.insert(QString("geography"), ::OpenAPI::toJsonValue(m_geography));
    }
    if (m_geometry.isSet()) {
        obj.insert(QString("geometry"), ::OpenAPI::toJsonValue(m_geometry));
    }
    if (m_has_closures_isSet) {
        obj.insert(QString("hasClosures"), ::OpenAPI::toJsonValue(m_has_closures));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_provisional_isSet) {
        obj.insert(QString("isProvisional"), ::OpenAPI::toJsonValue(m_is_provisional));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_level_of_interest_isSet) {
        obj.insert(QString("levelOfInterest"), ::OpenAPI::toJsonValue(m_level_of_interest));
    }
    if (m_link_text_isSet) {
        obj.insert(QString("linkText"), ::OpenAPI::toJsonValue(m_link_text));
    }
    if (m_link_url_isSet) {
        obj.insert(QString("linkUrl"), ::OpenAPI::toJsonValue(m_link_url));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_ordinal_isSet) {
        obj.insert(QString("ordinal"), ::OpenAPI::toJsonValue(m_ordinal));
    }
    if (m_point_isSet) {
        obj.insert(QString("point"), ::OpenAPI::toJsonValue(m_point));
    }
    if (m_publish_end_date_isSet) {
        obj.insert(QString("publishEndDate"), ::OpenAPI::toJsonValue(m_publish_end_date));
    }
    if (m_publish_start_date_isSet) {
        obj.insert(QString("publishStartDate"), ::OpenAPI::toJsonValue(m_publish_start_date));
    }
    if (m_recurring_schedules.size() > 0) {
        obj.insert(QString("recurringSchedules"), ::OpenAPI::toJsonValue(m_recurring_schedules));
    }
    if (m_road_disruption_impact_areas.size() > 0) {
        obj.insert(QString("roadDisruptionImpactAreas"), ::OpenAPI::toJsonValue(m_road_disruption_impact_areas));
    }
    if (m_road_disruption_lines.size() > 0) {
        obj.insert(QString("roadDisruptionLines"), ::OpenAPI::toJsonValue(m_road_disruption_lines));
    }
    if (m_road_project.isSet()) {
        obj.insert(QString("roadProject"), ::OpenAPI::toJsonValue(m_road_project));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_streets.size() > 0) {
        obj.insert(QString("streets"), ::OpenAPI::toJsonValue(m_streets));
    }
    if (m_sub_category_isSet) {
        obj.insert(QString("subCategory"), ::OpenAPI::toJsonValue(m_sub_category));
    }
    if (m_time_frame_isSet) {
        obj.insert(QString("timeFrame"), ::OpenAPI::toJsonValue(m_time_frame));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_RoadDisruption::getCategory() const {
    return m_category;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_category_Set() const{
    return m_category_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_category_Valid() const{
    return m_category_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadDisruption::getComments() const {
    return m_comments;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_comments_Valid() const{
    return m_comments_isValid;
}

QList<QString> OAITfl_Api_Presentation_Entities_RoadDisruption::getCorridorIds() const {
    return m_corridor_ids;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setCorridorIds(const QList<QString> &corridor_ids) {
    m_corridor_ids = corridor_ids;
    m_corridor_ids_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_corridor_ids_Set() const{
    return m_corridor_ids_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_corridor_ids_Valid() const{
    return m_corridor_ids_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadDisruption::getCurrentUpdate() const {
    return m_current_update;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setCurrentUpdate(const QString &current_update) {
    m_current_update = current_update;
    m_current_update_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_current_update_Set() const{
    return m_current_update_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_current_update_Valid() const{
    return m_current_update_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_RoadDisruption::getCurrentUpdateDateTime() const {
    return m_current_update_date_time;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setCurrentUpdateDateTime(const QDateTime &current_update_date_time) {
    m_current_update_date_time = current_update_date_time;
    m_current_update_date_time_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_current_update_date_time_Set() const{
    return m_current_update_date_time_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_current_update_date_time_Valid() const{
    return m_current_update_date_time_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_RoadDisruption::getEndDateTime() const {
    return m_end_date_time;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setEndDateTime(const QDateTime &end_date_time) {
    m_end_date_time = end_date_time;
    m_end_date_time_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_end_date_time_Set() const{
    return m_end_date_time_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_end_date_time_Valid() const{
    return m_end_date_time_isValid;
}

OAISystem_Data_Spatial_DbGeography OAITfl_Api_Presentation_Entities_RoadDisruption::getGeography() const {
    return m_geography;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setGeography(const OAISystem_Data_Spatial_DbGeography &geography) {
    m_geography = geography;
    m_geography_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_geography_Set() const{
    return m_geography_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_geography_Valid() const{
    return m_geography_isValid;
}

OAISystem_Data_Spatial_DbGeography OAITfl_Api_Presentation_Entities_RoadDisruption::getGeometry() const {
    return m_geometry;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setGeometry(const OAISystem_Data_Spatial_DbGeography &geometry) {
    m_geometry = geometry;
    m_geometry_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_geometry_Set() const{
    return m_geometry_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_geometry_Valid() const{
    return m_geometry_isValid;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::isHasClosures() const {
    return m_has_closures;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setHasClosures(const bool &has_closures) {
    m_has_closures = has_closures;
    m_has_closures_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_has_closures_Set() const{
    return m_has_closures_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_has_closures_Valid() const{
    return m_has_closures_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadDisruption::getId() const {
    return m_id;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_id_Set() const{
    return m_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_id_Valid() const{
    return m_id_isValid;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::isIsProvisional() const {
    return m_is_provisional;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setIsProvisional(const bool &is_provisional) {
    m_is_provisional = is_provisional;
    m_is_provisional_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_is_provisional_Set() const{
    return m_is_provisional_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_is_provisional_Valid() const{
    return m_is_provisional_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_RoadDisruption::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadDisruption::getLevelOfInterest() const {
    return m_level_of_interest;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setLevelOfInterest(const QString &level_of_interest) {
    m_level_of_interest = level_of_interest;
    m_level_of_interest_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_level_of_interest_Set() const{
    return m_level_of_interest_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_level_of_interest_Valid() const{
    return m_level_of_interest_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadDisruption::getLinkText() const {
    return m_link_text;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setLinkText(const QString &link_text) {
    m_link_text = link_text;
    m_link_text_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_link_text_Set() const{
    return m_link_text_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_link_text_Valid() const{
    return m_link_text_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadDisruption::getLinkUrl() const {
    return m_link_url;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setLinkUrl(const QString &link_url) {
    m_link_url = link_url;
    m_link_url_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_link_url_Set() const{
    return m_link_url_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_link_url_Valid() const{
    return m_link_url_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadDisruption::getLocation() const {
    return m_location;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_location_Set() const{
    return m_location_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_location_Valid() const{
    return m_location_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_RoadDisruption::getOrdinal() const {
    return m_ordinal;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setOrdinal(const qint32 &ordinal) {
    m_ordinal = ordinal;
    m_ordinal_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_ordinal_Set() const{
    return m_ordinal_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_ordinal_Valid() const{
    return m_ordinal_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadDisruption::getPoint() const {
    return m_point;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setPoint(const QString &point) {
    m_point = point;
    m_point_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_point_Set() const{
    return m_point_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_point_Valid() const{
    return m_point_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_RoadDisruption::getPublishEndDate() const {
    return m_publish_end_date;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setPublishEndDate(const QDateTime &publish_end_date) {
    m_publish_end_date = publish_end_date;
    m_publish_end_date_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_publish_end_date_Set() const{
    return m_publish_end_date_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_publish_end_date_Valid() const{
    return m_publish_end_date_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_RoadDisruption::getPublishStartDate() const {
    return m_publish_start_date;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setPublishStartDate(const QDateTime &publish_start_date) {
    m_publish_start_date = publish_start_date;
    m_publish_start_date_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_publish_start_date_Set() const{
    return m_publish_start_date_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_publish_start_date_Valid() const{
    return m_publish_start_date_isValid;
}

QList<OAITfl_Api_Presentation_Entities_RoadDisruptionSchedule> OAITfl_Api_Presentation_Entities_RoadDisruption::getRecurringSchedules() const {
    return m_recurring_schedules;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setRecurringSchedules(const QList<OAITfl_Api_Presentation_Entities_RoadDisruptionSchedule> &recurring_schedules) {
    m_recurring_schedules = recurring_schedules;
    m_recurring_schedules_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_recurring_schedules_Set() const{
    return m_recurring_schedules_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_recurring_schedules_Valid() const{
    return m_recurring_schedules_isValid;
}

QList<OAITfl_Api_Presentation_Entities_RoadDisruptionImpactArea> OAITfl_Api_Presentation_Entities_RoadDisruption::getRoadDisruptionImpactAreas() const {
    return m_road_disruption_impact_areas;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setRoadDisruptionImpactAreas(const QList<OAITfl_Api_Presentation_Entities_RoadDisruptionImpactArea> &road_disruption_impact_areas) {
    m_road_disruption_impact_areas = road_disruption_impact_areas;
    m_road_disruption_impact_areas_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_road_disruption_impact_areas_Set() const{
    return m_road_disruption_impact_areas_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_road_disruption_impact_areas_Valid() const{
    return m_road_disruption_impact_areas_isValid;
}

QList<OAITfl_Api_Presentation_Entities_RoadDisruptionLine> OAITfl_Api_Presentation_Entities_RoadDisruption::getRoadDisruptionLines() const {
    return m_road_disruption_lines;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setRoadDisruptionLines(const QList<OAITfl_Api_Presentation_Entities_RoadDisruptionLine> &road_disruption_lines) {
    m_road_disruption_lines = road_disruption_lines;
    m_road_disruption_lines_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_road_disruption_lines_Set() const{
    return m_road_disruption_lines_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_road_disruption_lines_Valid() const{
    return m_road_disruption_lines_isValid;
}

OAITfl_Api_Presentation_Entities_RoadProject OAITfl_Api_Presentation_Entities_RoadDisruption::getRoadProject() const {
    return m_road_project;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setRoadProject(const OAITfl_Api_Presentation_Entities_RoadProject &road_project) {
    m_road_project = road_project;
    m_road_project_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_road_project_Set() const{
    return m_road_project_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_road_project_Valid() const{
    return m_road_project_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadDisruption::getSeverity() const {
    return m_severity;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_severity_Valid() const{
    return m_severity_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_RoadDisruption::getStartDateTime() const {
    return m_start_date_time;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setStartDateTime(const QDateTime &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadDisruption::getStatus() const {
    return m_status;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_status_Set() const{
    return m_status_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAITfl_Api_Presentation_Entities_Street> OAITfl_Api_Presentation_Entities_RoadDisruption::getStreets() const {
    return m_streets;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setStreets(const QList<OAITfl_Api_Presentation_Entities_Street> &streets) {
    m_streets = streets;
    m_streets_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_streets_Set() const{
    return m_streets_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_streets_Valid() const{
    return m_streets_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadDisruption::getSubCategory() const {
    return m_sub_category;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setSubCategory(const QString &sub_category) {
    m_sub_category = sub_category;
    m_sub_category_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_sub_category_Set() const{
    return m_sub_category_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_sub_category_Valid() const{
    return m_sub_category_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadDisruption::getTimeFrame() const {
    return m_time_frame;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setTimeFrame(const QString &time_frame) {
    m_time_frame = time_frame;
    m_time_frame_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_time_frame_Set() const{
    return m_time_frame_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_time_frame_Valid() const{
    return m_time_frame_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadDisruption::getUrl() const {
    return m_url;
}
void OAITfl_Api_Presentation_Entities_RoadDisruption::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_url_Set() const{
    return m_url_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::is_url_Valid() const{
    return m_url_isValid;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corridor_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_update_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geography.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geometry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_closures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_provisional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_of_interest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordinal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_schedules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_road_disruption_impact_areas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_road_disruption_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_road_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_frame_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_RoadDisruption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
