/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPlaceApi_H
#define OAI_OAIPlaceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAITfl_Api_Presentation_Entities_Place.h"
#include "OAITfl_Api_Presentation_Entities_PlaceCategory.h"
#include "OAITfl_Api_Presentation_Entities_StopPoint.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPlaceApi : public QObject {
    Q_OBJECT

public:
    OAIPlaceApi(const int timeOut = 0);
    ~OAIPlaceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  include_children bool [optional]
    */
    virtual void placeGet(const QString &id, const ::OpenAPI::OptionalParam<bool> &include_children = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  type QList<QString> [required]
    * @param[in]  lat QString [required]
    * @param[in]  lon QString [required]
    * @param[in]  location_lat double [required]
    * @param[in]  location_lon double [required]
    * @param[in]  lat2 QString [required]
    * @param[in]  lon2 QString [required]
    */
    virtual void placeGetAt(const QList<QString> &type, const QString &lat, const QString &lon, const double &location_lat, const double &location_lon, const QString &lat2, const QString &lon2);

    /**
    * @param[in]  radius double [optional]
    * @param[in]  categories QList<QString> [optional]
    * @param[in]  include_children bool [optional]
    * @param[in]  type QList<QString> [optional]
    * @param[in]  active_only bool [optional]
    * @param[in]  number_of_places_to_return qint32 [optional]
    * @param[in]  place_geo_sw_lat double [optional]
    * @param[in]  place_geo_sw_lon double [optional]
    * @param[in]  place_geo_ne_lat double [optional]
    * @param[in]  place_geo_ne_lon double [optional]
    * @param[in]  place_geo_lat double [optional]
    * @param[in]  place_geo_lon double [optional]
    */
    virtual void placeGetByGeo(const ::OpenAPI::OptionalParam<double> &radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QList<QString>> &categories = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &active_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &number_of_places_to_return = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &place_geo_sw_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &place_geo_sw_lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &place_geo_ne_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &place_geo_ne_lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &place_geo_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &place_geo_lon = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  types QList<QString> [required]
    * @param[in]  active_only bool [optional]
    */
    virtual void placeGetByType(const QList<QString> &types, const ::OpenAPI::OptionalParam<bool> &active_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  z qint32 [required]
    * @param[in]  type QList<QString> [required]
    * @param[in]  width qint32 [required]
    * @param[in]  height qint32 [required]
    * @param[in]  lat QString [required]
    * @param[in]  lon QString [required]
    * @param[in]  location_lat double [required]
    * @param[in]  location_lon double [required]
    * @param[in]  lat2 QString [required]
    * @param[in]  lon2 QString [required]
    */
    virtual void placeGetOverlay(const qint32 &z, const QList<QString> &type, const qint32 &width, const qint32 &height, const QString &lat, const QString &lon, const double &location_lat, const double &location_lon, const QString &lat2, const QString &lon2);

    /**
    * @param[in]  postcode QString [required]
    * @param[in]  postcode2 QString [required]
    * @param[in]  postcode_input_postcode QString [optional]
    */
    virtual void placeGetStreetsByPostCode(const QString &postcode, const QString &postcode2, const ::OpenAPI::OptionalParam<QString> &postcode_input_postcode = ::OpenAPI::OptionalParam<QString>());


    virtual void placeMetaCategories();


    virtual void placeMetaPlaceTypes();

    /**
    * @param[in]  name QString [required]
    * @param[in]  types QList<QString> [optional]
    */
    virtual void placeSearch(const QString &name, const ::OpenAPI::OptionalParam<QList<QString>> &types = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void placeGetCallback(OAIHttpRequestWorker *worker);
    void placeGetAtCallback(OAIHttpRequestWorker *worker);
    void placeGetByGeoCallback(OAIHttpRequestWorker *worker);
    void placeGetByTypeCallback(OAIHttpRequestWorker *worker);
    void placeGetOverlayCallback(OAIHttpRequestWorker *worker);
    void placeGetStreetsByPostCodeCallback(OAIHttpRequestWorker *worker);
    void placeMetaCategoriesCallback(OAIHttpRequestWorker *worker);
    void placeMetaPlaceTypesCallback(OAIHttpRequestWorker *worker);
    void placeSearchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void placeGetSignal(QList<OAITfl_Api_Presentation_Entities_Place> summary);
    void placeGetAtSignal(OAIObject summary);
    void placeGetByGeoSignal(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary);
    void placeGetByTypeSignal(QList<OAITfl_Api_Presentation_Entities_Place> summary);
    void placeGetOverlaySignal(OAIObject summary);
    void placeGetStreetsByPostCodeSignal(OAIObject summary);
    void placeMetaCategoriesSignal(QList<OAITfl_Api_Presentation_Entities_PlaceCategory> summary);
    void placeMetaPlaceTypesSignal(QList<OAITfl_Api_Presentation_Entities_PlaceCategory> summary);
    void placeSearchSignal(QList<OAITfl_Api_Presentation_Entities_Place> summary);


    void placeGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Place> summary);
    void placeGetAtSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void placeGetByGeoSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_StopPoint> summary);
    void placeGetByTypeSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Place> summary);
    void placeGetOverlaySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void placeGetStreetsByPostCodeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void placeMetaCategoriesSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_PlaceCategory> summary);
    void placeMetaPlaceTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_PlaceCategory> summary);
    void placeSearchSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Place> summary);

    Q_DECL_DEPRECATED_X("Use placeGetSignalError() instead")
    void placeGetSignalE(QList<OAITfl_Api_Presentation_Entities_Place> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void placeGetSignalError(QList<OAITfl_Api_Presentation_Entities_Place> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeGetAtSignalError() instead")
    void placeGetAtSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void placeGetAtSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeGetByGeoSignalError() instead")
    void placeGetByGeoSignalE(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void placeGetByGeoSignalError(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeGetByTypeSignalError() instead")
    void placeGetByTypeSignalE(QList<OAITfl_Api_Presentation_Entities_Place> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void placeGetByTypeSignalError(QList<OAITfl_Api_Presentation_Entities_Place> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeGetOverlaySignalError() instead")
    void placeGetOverlaySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void placeGetOverlaySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeGetStreetsByPostCodeSignalError() instead")
    void placeGetStreetsByPostCodeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void placeGetStreetsByPostCodeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeMetaCategoriesSignalError() instead")
    void placeMetaCategoriesSignalE(QList<OAITfl_Api_Presentation_Entities_PlaceCategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void placeMetaCategoriesSignalError(QList<OAITfl_Api_Presentation_Entities_PlaceCategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeMetaPlaceTypesSignalError() instead")
    void placeMetaPlaceTypesSignalE(QList<OAITfl_Api_Presentation_Entities_PlaceCategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void placeMetaPlaceTypesSignalError(QList<OAITfl_Api_Presentation_Entities_PlaceCategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeSearchSignalError() instead")
    void placeSearchSignalE(QList<OAITfl_Api_Presentation_Entities_Place> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void placeSearchSignalError(QList<OAITfl_Api_Presentation_Entities_Place> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use placeGetSignalErrorFull() instead")
    void placeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void placeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeGetAtSignalErrorFull() instead")
    void placeGetAtSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void placeGetAtSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeGetByGeoSignalErrorFull() instead")
    void placeGetByGeoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void placeGetByGeoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeGetByTypeSignalErrorFull() instead")
    void placeGetByTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void placeGetByTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeGetOverlaySignalErrorFull() instead")
    void placeGetOverlaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void placeGetOverlaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeGetStreetsByPostCodeSignalErrorFull() instead")
    void placeGetStreetsByPostCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void placeGetStreetsByPostCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeMetaCategoriesSignalErrorFull() instead")
    void placeMetaCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void placeMetaCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeMetaPlaceTypesSignalErrorFull() instead")
    void placeMetaPlaceTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void placeMetaPlaceTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeSearchSignalErrorFull() instead")
    void placeSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void placeSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
