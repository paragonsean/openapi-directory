/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::~OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria() {}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::initializeModel() {

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_date_time_type_isSet = false;
    m_date_time_type_isValid = false;

    m_time_adjustments_isSet = false;
    m_time_adjustments_isValid = false;
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::fromJsonObject(QJsonObject json) {

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("dateTime")]);
    m_date_time_isSet = !json[QString("dateTime")].isNull() && m_date_time_isValid;

    m_date_time_type_isValid = ::OpenAPI::fromJsonValue(m_date_time_type, json[QString("dateTimeType")]);
    m_date_time_type_isSet = !json[QString("dateTimeType")].isNull() && m_date_time_type_isValid;

    m_time_adjustments_isValid = ::OpenAPI::fromJsonValue(m_time_adjustments, json[QString("timeAdjustments")]);
    m_time_adjustments_isSet = !json[QString("timeAdjustments")].isNull() && m_time_adjustments_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_date_time_isSet) {
        obj.insert(QString("dateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_date_time_type_isSet) {
        obj.insert(QString("dateTimeType"), ::OpenAPI::toJsonValue(m_date_time_type));
    }
    if (m_time_adjustments.isSet()) {
        obj.insert(QString("timeAdjustments"), ::OpenAPI::toJsonValue(m_time_adjustments));
    }
    return obj;
}

QDateTime OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::getDateTime() const {
    return m_date_time;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::setDateTime(const QDateTime &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::getDateTimeType() const {
    return m_date_time_type;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::setDateTimeType(const QString &date_time_type) {
    m_date_time_type = date_time_type;
    m_date_time_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::is_date_time_type_Set() const{
    return m_date_time_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::is_date_time_type_Valid() const{
    return m_date_time_type_isValid;
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::getTimeAdjustments() const {
    return m_time_adjustments;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::setTimeAdjustments(const OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments &time_adjustments) {
    m_time_adjustments = time_adjustments;
    m_time_adjustments_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::is_time_adjustments_Set() const{
    return m_time_adjustments_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::is_time_adjustments_Valid() const{
    return m_time_adjustments_isValid;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_adjustments.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
