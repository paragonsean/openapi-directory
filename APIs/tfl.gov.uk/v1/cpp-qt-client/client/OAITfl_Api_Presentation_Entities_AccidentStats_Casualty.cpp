/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_AccidentStats_Casualty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::OAITfl_Api_Presentation_Entities_AccidentStats_Casualty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::OAITfl_Api_Presentation_Entities_AccidentStats_Casualty() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::~OAITfl_Api_Presentation_Entities_AccidentStats_Casualty() {}

void OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::initializeModel() {

    m_age_isSet = false;
    m_age_isValid = false;

    m_age_band_isSet = false;
    m_age_band_isValid = false;

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;
}

void OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::fromJsonObject(QJsonObject json) {

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_age_band_isValid = ::OpenAPI::fromJsonValue(m_age_band, json[QString("ageBand")]);
    m_age_band_isSet = !json[QString("ageBand")].isNull() && m_age_band_isValid;

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("class")]);
    m_r_class_isSet = !json[QString("class")].isNull() && m_r_class_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;
}

QString OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::asJsonObject() const {
    QJsonObject obj;
    if (m_age_isSet) {
        obj.insert(QString("age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_age_band_isSet) {
        obj.insert(QString("ageBand"), ::OpenAPI::toJsonValue(m_age_band));
    }
    if (m_r_class_isSet) {
        obj.insert(QString("class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    return obj;
}

qint32 OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::getAge() const {
    return m_age;
}
void OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::setAge(const qint32 &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::is_age_Set() const{
    return m_age_isSet;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::is_age_Valid() const{
    return m_age_isValid;
}

QString OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::getAgeBand() const {
    return m_age_band;
}
void OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::setAgeBand(const QString &age_band) {
    m_age_band = age_band;
    m_age_band_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::is_age_band_Set() const{
    return m_age_band_isSet;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::is_age_band_Valid() const{
    return m_age_band_isValid;
}

QString OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::getRClass() const {
    return m_r_class;
}
void OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::is_r_class_Valid() const{
    return m_r_class_isValid;
}

QString OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::getMode() const {
    return m_mode;
}
void OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::getSeverity() const {
    return m_severity;
}
void OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::is_severity_Valid() const{
    return m_severity_isValid;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_band_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_Casualty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
