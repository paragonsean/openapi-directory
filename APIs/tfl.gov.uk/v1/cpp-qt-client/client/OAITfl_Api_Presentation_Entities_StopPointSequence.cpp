/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_StopPointSequence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_StopPointSequence::OAITfl_Api_Presentation_Entities_StopPointSequence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_StopPointSequence::OAITfl_Api_Presentation_Entities_StopPointSequence() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_StopPointSequence::~OAITfl_Api_Presentation_Entities_StopPointSequence() {}

void OAITfl_Api_Presentation_Entities_StopPointSequence::initializeModel() {

    m_branch_id_isSet = false;
    m_branch_id_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_line_id_isSet = false;
    m_line_id_isValid = false;

    m_line_name_isSet = false;
    m_line_name_isValid = false;

    m_next_branch_ids_isSet = false;
    m_next_branch_ids_isValid = false;

    m_prev_branch_ids_isSet = false;
    m_prev_branch_ids_isValid = false;

    m_service_type_isSet = false;
    m_service_type_isValid = false;

    m_stop_point_isSet = false;
    m_stop_point_isValid = false;
}

void OAITfl_Api_Presentation_Entities_StopPointSequence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_StopPointSequence::fromJsonObject(QJsonObject json) {

    m_branch_id_isValid = ::OpenAPI::fromJsonValue(m_branch_id, json[QString("branchId")]);
    m_branch_id_isSet = !json[QString("branchId")].isNull() && m_branch_id_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_line_id_isValid = ::OpenAPI::fromJsonValue(m_line_id, json[QString("lineId")]);
    m_line_id_isSet = !json[QString("lineId")].isNull() && m_line_id_isValid;

    m_line_name_isValid = ::OpenAPI::fromJsonValue(m_line_name, json[QString("lineName")]);
    m_line_name_isSet = !json[QString("lineName")].isNull() && m_line_name_isValid;

    m_next_branch_ids_isValid = ::OpenAPI::fromJsonValue(m_next_branch_ids, json[QString("nextBranchIds")]);
    m_next_branch_ids_isSet = !json[QString("nextBranchIds")].isNull() && m_next_branch_ids_isValid;

    m_prev_branch_ids_isValid = ::OpenAPI::fromJsonValue(m_prev_branch_ids, json[QString("prevBranchIds")]);
    m_prev_branch_ids_isSet = !json[QString("prevBranchIds")].isNull() && m_prev_branch_ids_isValid;

    m_service_type_isValid = ::OpenAPI::fromJsonValue(m_service_type, json[QString("serviceType")]);
    m_service_type_isSet = !json[QString("serviceType")].isNull() && m_service_type_isValid;

    m_stop_point_isValid = ::OpenAPI::fromJsonValue(m_stop_point, json[QString("stopPoint")]);
    m_stop_point_isSet = !json[QString("stopPoint")].isNull() && m_stop_point_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPointSequence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_StopPointSequence::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_id_isSet) {
        obj.insert(QString("branchId"), ::OpenAPI::toJsonValue(m_branch_id));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_line_id_isSet) {
        obj.insert(QString("lineId"), ::OpenAPI::toJsonValue(m_line_id));
    }
    if (m_line_name_isSet) {
        obj.insert(QString("lineName"), ::OpenAPI::toJsonValue(m_line_name));
    }
    if (m_next_branch_ids.size() > 0) {
        obj.insert(QString("nextBranchIds"), ::OpenAPI::toJsonValue(m_next_branch_ids));
    }
    if (m_prev_branch_ids.size() > 0) {
        obj.insert(QString("prevBranchIds"), ::OpenAPI::toJsonValue(m_prev_branch_ids));
    }
    if (m_service_type_isSet) {
        obj.insert(QString("serviceType"), ::OpenAPI::toJsonValue(m_service_type));
    }
    if (m_stop_point.size() > 0) {
        obj.insert(QString("stopPoint"), ::OpenAPI::toJsonValue(m_stop_point));
    }
    return obj;
}

qint32 OAITfl_Api_Presentation_Entities_StopPointSequence::getBranchId() const {
    return m_branch_id;
}
void OAITfl_Api_Presentation_Entities_StopPointSequence::setBranchId(const qint32 &branch_id) {
    m_branch_id = branch_id;
    m_branch_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointSequence::is_branch_id_Set() const{
    return m_branch_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointSequence::is_branch_id_Valid() const{
    return m_branch_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPointSequence::getDirection() const {
    return m_direction;
}
void OAITfl_Api_Presentation_Entities_StopPointSequence::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointSequence::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointSequence::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPointSequence::getLineId() const {
    return m_line_id;
}
void OAITfl_Api_Presentation_Entities_StopPointSequence::setLineId(const QString &line_id) {
    m_line_id = line_id;
    m_line_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointSequence::is_line_id_Set() const{
    return m_line_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointSequence::is_line_id_Valid() const{
    return m_line_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPointSequence::getLineName() const {
    return m_line_name;
}
void OAITfl_Api_Presentation_Entities_StopPointSequence::setLineName(const QString &line_name) {
    m_line_name = line_name;
    m_line_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointSequence::is_line_name_Set() const{
    return m_line_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointSequence::is_line_name_Valid() const{
    return m_line_name_isValid;
}

QList<qint32> OAITfl_Api_Presentation_Entities_StopPointSequence::getNextBranchIds() const {
    return m_next_branch_ids;
}
void OAITfl_Api_Presentation_Entities_StopPointSequence::setNextBranchIds(const QList<qint32> &next_branch_ids) {
    m_next_branch_ids = next_branch_ids;
    m_next_branch_ids_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointSequence::is_next_branch_ids_Set() const{
    return m_next_branch_ids_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointSequence::is_next_branch_ids_Valid() const{
    return m_next_branch_ids_isValid;
}

QList<qint32> OAITfl_Api_Presentation_Entities_StopPointSequence::getPrevBranchIds() const {
    return m_prev_branch_ids;
}
void OAITfl_Api_Presentation_Entities_StopPointSequence::setPrevBranchIds(const QList<qint32> &prev_branch_ids) {
    m_prev_branch_ids = prev_branch_ids;
    m_prev_branch_ids_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointSequence::is_prev_branch_ids_Set() const{
    return m_prev_branch_ids_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointSequence::is_prev_branch_ids_Valid() const{
    return m_prev_branch_ids_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPointSequence::getServiceType() const {
    return m_service_type;
}
void OAITfl_Api_Presentation_Entities_StopPointSequence::setServiceType(const QString &service_type) {
    m_service_type = service_type;
    m_service_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointSequence::is_service_type_Set() const{
    return m_service_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointSequence::is_service_type_Valid() const{
    return m_service_type_isValid;
}

QList<OAITfl_Api_Presentation_Entities_MatchedStop> OAITfl_Api_Presentation_Entities_StopPointSequence::getStopPoint() const {
    return m_stop_point;
}
void OAITfl_Api_Presentation_Entities_StopPointSequence::setStopPoint(const QList<OAITfl_Api_Presentation_Entities_MatchedStop> &stop_point) {
    m_stop_point = stop_point;
    m_stop_point_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointSequence::is_stop_point_Set() const{
    return m_stop_point_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointSequence::is_stop_point_Valid() const{
    return m_stop_point_isValid;
}

bool OAITfl_Api_Presentation_Entities_StopPointSequence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_branch_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prev_branch_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_point.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_StopPointSequence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
