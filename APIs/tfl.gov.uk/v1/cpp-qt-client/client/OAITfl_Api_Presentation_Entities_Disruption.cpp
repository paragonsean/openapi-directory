/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Disruption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Disruption::OAITfl_Api_Presentation_Entities_Disruption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Disruption::OAITfl_Api_Presentation_Entities_Disruption() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Disruption::~OAITfl_Api_Presentation_Entities_Disruption() {}

void OAITfl_Api_Presentation_Entities_Disruption::initializeModel() {

    m_additional_info_isSet = false;
    m_additional_info_isValid = false;

    m_affected_routes_isSet = false;
    m_affected_routes_isValid = false;

    m_affected_stops_isSet = false;
    m_affected_stops_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_category_description_isSet = false;
    m_category_description_isValid = false;

    m_closure_text_isSet = false;
    m_closure_text_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_last_update_isSet = false;
    m_last_update_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Disruption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Disruption::fromJsonObject(QJsonObject json) {

    m_additional_info_isValid = ::OpenAPI::fromJsonValue(m_additional_info, json[QString("additionalInfo")]);
    m_additional_info_isSet = !json[QString("additionalInfo")].isNull() && m_additional_info_isValid;

    m_affected_routes_isValid = ::OpenAPI::fromJsonValue(m_affected_routes, json[QString("affectedRoutes")]);
    m_affected_routes_isSet = !json[QString("affectedRoutes")].isNull() && m_affected_routes_isValid;

    m_affected_stops_isValid = ::OpenAPI::fromJsonValue(m_affected_stops, json[QString("affectedStops")]);
    m_affected_stops_isSet = !json[QString("affectedStops")].isNull() && m_affected_stops_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_category_description_isValid = ::OpenAPI::fromJsonValue(m_category_description, json[QString("categoryDescription")]);
    m_category_description_isSet = !json[QString("categoryDescription")].isNull() && m_category_description_isValid;

    m_closure_text_isValid = ::OpenAPI::fromJsonValue(m_closure_text, json[QString("closureText")]);
    m_closure_text_isSet = !json[QString("closureText")].isNull() && m_closure_text_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_last_update_isValid = ::OpenAPI::fromJsonValue(m_last_update, json[QString("lastUpdate")]);
    m_last_update_isSet = !json[QString("lastUpdate")].isNull() && m_last_update_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_Disruption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Disruption::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_info_isSet) {
        obj.insert(QString("additionalInfo"), ::OpenAPI::toJsonValue(m_additional_info));
    }
    if (m_affected_routes.size() > 0) {
        obj.insert(QString("affectedRoutes"), ::OpenAPI::toJsonValue(m_affected_routes));
    }
    if (m_affected_stops.size() > 0) {
        obj.insert(QString("affectedStops"), ::OpenAPI::toJsonValue(m_affected_stops));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_category_description_isSet) {
        obj.insert(QString("categoryDescription"), ::OpenAPI::toJsonValue(m_category_description));
    }
    if (m_closure_text_isSet) {
        obj.insert(QString("closureText"), ::OpenAPI::toJsonValue(m_closure_text));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_last_update_isSet) {
        obj.insert(QString("lastUpdate"), ::OpenAPI::toJsonValue(m_last_update));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_Disruption::getAdditionalInfo() const {
    return m_additional_info;
}
void OAITfl_Api_Presentation_Entities_Disruption::setAdditionalInfo(const QString &additional_info) {
    m_additional_info = additional_info;
    m_additional_info_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_additional_info_Set() const{
    return m_additional_info_isSet;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_additional_info_Valid() const{
    return m_additional_info_isValid;
}

QList<OAITfl_Api_Presentation_Entities_DisruptedRoute> OAITfl_Api_Presentation_Entities_Disruption::getAffectedRoutes() const {
    return m_affected_routes;
}
void OAITfl_Api_Presentation_Entities_Disruption::setAffectedRoutes(const QList<OAITfl_Api_Presentation_Entities_DisruptedRoute> &affected_routes) {
    m_affected_routes = affected_routes;
    m_affected_routes_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_affected_routes_Set() const{
    return m_affected_routes_isSet;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_affected_routes_Valid() const{
    return m_affected_routes_isValid;
}

QList<OAITfl_Api_Presentation_Entities_StopPoint> OAITfl_Api_Presentation_Entities_Disruption::getAffectedStops() const {
    return m_affected_stops;
}
void OAITfl_Api_Presentation_Entities_Disruption::setAffectedStops(const QList<OAITfl_Api_Presentation_Entities_StopPoint> &affected_stops) {
    m_affected_stops = affected_stops;
    m_affected_stops_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_affected_stops_Set() const{
    return m_affected_stops_isSet;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_affected_stops_Valid() const{
    return m_affected_stops_isValid;
}

QString OAITfl_Api_Presentation_Entities_Disruption::getCategory() const {
    return m_category;
}
void OAITfl_Api_Presentation_Entities_Disruption::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_category_Set() const{
    return m_category_isSet;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_category_Valid() const{
    return m_category_isValid;
}

QString OAITfl_Api_Presentation_Entities_Disruption::getCategoryDescription() const {
    return m_category_description;
}
void OAITfl_Api_Presentation_Entities_Disruption::setCategoryDescription(const QString &category_description) {
    m_category_description = category_description;
    m_category_description_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_category_description_Set() const{
    return m_category_description_isSet;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_category_description_Valid() const{
    return m_category_description_isValid;
}

QString OAITfl_Api_Presentation_Entities_Disruption::getClosureText() const {
    return m_closure_text;
}
void OAITfl_Api_Presentation_Entities_Disruption::setClosureText(const QString &closure_text) {
    m_closure_text = closure_text;
    m_closure_text_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_closure_text_Set() const{
    return m_closure_text_isSet;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_closure_text_Valid() const{
    return m_closure_text_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_Disruption::getCreated() const {
    return m_created;
}
void OAITfl_Api_Presentation_Entities_Disruption::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_created_Set() const{
    return m_created_isSet;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_created_Valid() const{
    return m_created_isValid;
}

QString OAITfl_Api_Presentation_Entities_Disruption::getDescription() const {
    return m_description;
}
void OAITfl_Api_Presentation_Entities_Disruption::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_description_Set() const{
    return m_description_isSet;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_Disruption::getLastUpdate() const {
    return m_last_update;
}
void OAITfl_Api_Presentation_Entities_Disruption::setLastUpdate(const QDateTime &last_update) {
    m_last_update = last_update;
    m_last_update_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_last_update_Set() const{
    return m_last_update_isSet;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_last_update_Valid() const{
    return m_last_update_isValid;
}

QString OAITfl_Api_Presentation_Entities_Disruption::getSummary() const {
    return m_summary;
}
void OAITfl_Api_Presentation_Entities_Disruption::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAITfl_Api_Presentation_Entities_Disruption::getType() const {
    return m_type;
}
void OAITfl_Api_Presentation_Entities_Disruption::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_type_Set() const{
    return m_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_Disruption::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITfl_Api_Presentation_Entities_Disruption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_affected_routes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_affected_stops.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closure_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Disruption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
