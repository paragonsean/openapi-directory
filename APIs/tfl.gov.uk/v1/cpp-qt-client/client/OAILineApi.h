/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILineApi_H
#define OAI_OAILineApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAITfl_Api_Presentation_Entities_Disruption.h"
#include "OAITfl_Api_Presentation_Entities_Line.h"
#include "OAITfl_Api_Presentation_Entities_Mode.h"
#include "OAITfl_Api_Presentation_Entities_Prediction.h"
#include "OAITfl_Api_Presentation_Entities_RouteSearchResponse.h"
#include "OAITfl_Api_Presentation_Entities_RouteSequence.h"
#include "OAITfl_Api_Presentation_Entities_StatusSeverity.h"
#include "OAITfl_Api_Presentation_Entities_StopPoint.h"
#include "OAITfl_Api_Presentation_Entities_TimetableResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILineApi : public QObject {
    Q_OBJECT

public:
    OAILineApi(const int timeOut = 0);
    ~OAILineApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ids QList<QString> [required]
    * @param[in]  stop_point_id QString [required]
    * @param[in]  direction QString [optional]
    * @param[in]  destination_station_id QString [optional]
    */
    virtual void lineArrivals(const QList<QString> &ids, const QString &stop_point_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &destination_station_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QList<QString> [required]
    */
    virtual void lineDisruption(const QList<QString> &ids);

    /**
    * @param[in]  modes QList<QString> [required]
    */
    virtual void lineDisruptionByMode(const QList<QString> &modes);

    /**
    * @param[in]  ids QList<QString> [required]
    */
    virtual void lineGet(const QList<QString> &ids);

    /**
    * @param[in]  modes QList<QString> [required]
    */
    virtual void lineGetByMode(const QList<QString> &modes);

    /**
    * @param[in]  ids QList<QString> [required]
    * @param[in]  service_types QList<QString> [optional]
    */
    virtual void lineLineRoutesByIds(const QList<QString> &ids, const ::OpenAPI::OptionalParam<QList<QString>> &service_types = ::OpenAPI::OptionalParam<QList<QString>>());


    virtual void lineMetaDisruptionCategories();


    virtual void lineMetaModes();


    virtual void lineMetaServiceTypes();


    virtual void lineMetaSeverity();

    /**
    * @param[in]  service_types QList<QString> [optional]
    */
    virtual void lineRoute(const ::OpenAPI::OptionalParam<QList<QString>> &service_types = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  modes QList<QString> [required]
    * @param[in]  service_types QList<QString> [optional]
    */
    virtual void lineRouteByMode(const QList<QString> &modes, const ::OpenAPI::OptionalParam<QList<QString>> &service_types = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  direction QString [required]
    * @param[in]  service_types QList<QString> [optional]
    * @param[in]  exclude_crowding bool [optional]
    */
    virtual void lineRouteSequence(const QString &id, const QString &direction, const ::OpenAPI::OptionalParam<QList<QString>> &service_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &exclude_crowding = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  modes QList<QString> [optional]
    * @param[in]  service_types QList<QString> [optional]
    */
    virtual void lineSearch(const QString &query, const ::OpenAPI::OptionalParam<QList<QString>> &modes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &service_types = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  ids QList<QString> [required]
    * @param[in]  start_date QString [required]
    * @param[in]  end_date QString [required]
    * @param[in]  start_date2 QString [required]
    * @param[in]  end_date2 QString [required]
    * @param[in]  detail bool [optional]
    * @param[in]  date_range_start_date QDateTime [optional]
    * @param[in]  date_range_end_date QDateTime [optional]
    */
    virtual void lineStatus(const QList<QString> &ids, const QString &start_date, const QString &end_date, const QString &start_date2, const QString &end_date2, const ::OpenAPI::OptionalParam<bool> &detail = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &date_range_start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_range_end_date = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  ids QList<QString> [required]
    * @param[in]  detail bool [optional]
    */
    virtual void lineStatusByIds(const QList<QString> &ids, const ::OpenAPI::OptionalParam<bool> &detail = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  modes QList<QString> [required]
    * @param[in]  detail bool [optional]
    * @param[in]  severity_level QString [optional]
    */
    virtual void lineStatusByMode(const QList<QString> &modes, const ::OpenAPI::OptionalParam<bool> &detail = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &severity_level = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  severity qint32 [required]
    */
    virtual void lineStatusBySeverity(const qint32 &severity);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tfl_operated_national_rail_stations_only bool [optional]
    */
    virtual void lineStopPoints(const QString &id, const ::OpenAPI::OptionalParam<bool> &tfl_operated_national_rail_stations_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  from_stop_point_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void lineTimetable(const QString &from_stop_point_id, const QString &id);

    /**
    * @param[in]  from_stop_point_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  to_stop_point_id QString [required]
    */
    virtual void lineTimetableTo(const QString &from_stop_point_id, const QString &id, const QString &to_stop_point_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void lineArrivalsCallback(OAIHttpRequestWorker *worker);
    void lineDisruptionCallback(OAIHttpRequestWorker *worker);
    void lineDisruptionByModeCallback(OAIHttpRequestWorker *worker);
    void lineGetCallback(OAIHttpRequestWorker *worker);
    void lineGetByModeCallback(OAIHttpRequestWorker *worker);
    void lineLineRoutesByIdsCallback(OAIHttpRequestWorker *worker);
    void lineMetaDisruptionCategoriesCallback(OAIHttpRequestWorker *worker);
    void lineMetaModesCallback(OAIHttpRequestWorker *worker);
    void lineMetaServiceTypesCallback(OAIHttpRequestWorker *worker);
    void lineMetaSeverityCallback(OAIHttpRequestWorker *worker);
    void lineRouteCallback(OAIHttpRequestWorker *worker);
    void lineRouteByModeCallback(OAIHttpRequestWorker *worker);
    void lineRouteSequenceCallback(OAIHttpRequestWorker *worker);
    void lineSearchCallback(OAIHttpRequestWorker *worker);
    void lineStatusCallback(OAIHttpRequestWorker *worker);
    void lineStatusByIdsCallback(OAIHttpRequestWorker *worker);
    void lineStatusByModeCallback(OAIHttpRequestWorker *worker);
    void lineStatusBySeverityCallback(OAIHttpRequestWorker *worker);
    void lineStopPointsCallback(OAIHttpRequestWorker *worker);
    void lineTimetableCallback(OAIHttpRequestWorker *worker);
    void lineTimetableToCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void lineArrivalsSignal(QList<OAITfl_Api_Presentation_Entities_Prediction> summary);
    void lineDisruptionSignal(QList<OAITfl_Api_Presentation_Entities_Disruption> summary);
    void lineDisruptionByModeSignal(QList<OAITfl_Api_Presentation_Entities_Disruption> summary);
    void lineGetSignal(QList<OAITfl_Api_Presentation_Entities_Line> summary);
    void lineGetByModeSignal(QList<OAITfl_Api_Presentation_Entities_Line> summary);
    void lineLineRoutesByIdsSignal(QList<OAITfl_Api_Presentation_Entities_Line> summary);
    void lineMetaDisruptionCategoriesSignal(QList<QString> summary);
    void lineMetaModesSignal(QList<OAITfl_Api_Presentation_Entities_Mode> summary);
    void lineMetaServiceTypesSignal(QList<QString> summary);
    void lineMetaSeveritySignal(QList<OAITfl_Api_Presentation_Entities_StatusSeverity> summary);
    void lineRouteSignal(QList<OAITfl_Api_Presentation_Entities_Line> summary);
    void lineRouteByModeSignal(QList<OAITfl_Api_Presentation_Entities_Line> summary);
    void lineRouteSequenceSignal(OAITfl_Api_Presentation_Entities_RouteSequence summary);
    void lineSearchSignal(OAITfl_Api_Presentation_Entities_RouteSearchResponse summary);
    void lineStatusSignal(QList<OAITfl_Api_Presentation_Entities_Line> summary);
    void lineStatusByIdsSignal(QList<OAITfl_Api_Presentation_Entities_Line> summary);
    void lineStatusByModeSignal(QList<OAITfl_Api_Presentation_Entities_Line> summary);
    void lineStatusBySeveritySignal(QList<OAITfl_Api_Presentation_Entities_Line> summary);
    void lineStopPointsSignal(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary);
    void lineTimetableSignal(OAITfl_Api_Presentation_Entities_TimetableResponse summary);
    void lineTimetableToSignal(OAITfl_Api_Presentation_Entities_TimetableResponse summary);


    void lineArrivalsSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Prediction> summary);
    void lineDisruptionSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Disruption> summary);
    void lineDisruptionByModeSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Disruption> summary);
    void lineGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Line> summary);
    void lineGetByModeSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Line> summary);
    void lineLineRoutesByIdsSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Line> summary);
    void lineMetaDisruptionCategoriesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void lineMetaModesSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Mode> summary);
    void lineMetaServiceTypesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void lineMetaSeveritySignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_StatusSeverity> summary);
    void lineRouteSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Line> summary);
    void lineRouteByModeSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Line> summary);
    void lineRouteSequenceSignalFull(OAIHttpRequestWorker *worker, OAITfl_Api_Presentation_Entities_RouteSequence summary);
    void lineSearchSignalFull(OAIHttpRequestWorker *worker, OAITfl_Api_Presentation_Entities_RouteSearchResponse summary);
    void lineStatusSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Line> summary);
    void lineStatusByIdsSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Line> summary);
    void lineStatusByModeSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Line> summary);
    void lineStatusBySeveritySignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Line> summary);
    void lineStopPointsSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_StopPoint> summary);
    void lineTimetableSignalFull(OAIHttpRequestWorker *worker, OAITfl_Api_Presentation_Entities_TimetableResponse summary);
    void lineTimetableToSignalFull(OAIHttpRequestWorker *worker, OAITfl_Api_Presentation_Entities_TimetableResponse summary);

    Q_DECL_DEPRECATED_X("Use lineArrivalsSignalError() instead")
    void lineArrivalsSignalE(QList<OAITfl_Api_Presentation_Entities_Prediction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineArrivalsSignalError(QList<OAITfl_Api_Presentation_Entities_Prediction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineDisruptionSignalError() instead")
    void lineDisruptionSignalE(QList<OAITfl_Api_Presentation_Entities_Disruption> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineDisruptionSignalError(QList<OAITfl_Api_Presentation_Entities_Disruption> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineDisruptionByModeSignalError() instead")
    void lineDisruptionByModeSignalE(QList<OAITfl_Api_Presentation_Entities_Disruption> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineDisruptionByModeSignalError(QList<OAITfl_Api_Presentation_Entities_Disruption> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineGetSignalError() instead")
    void lineGetSignalE(QList<OAITfl_Api_Presentation_Entities_Line> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineGetSignalError(QList<OAITfl_Api_Presentation_Entities_Line> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineGetByModeSignalError() instead")
    void lineGetByModeSignalE(QList<OAITfl_Api_Presentation_Entities_Line> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineGetByModeSignalError(QList<OAITfl_Api_Presentation_Entities_Line> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineLineRoutesByIdsSignalError() instead")
    void lineLineRoutesByIdsSignalE(QList<OAITfl_Api_Presentation_Entities_Line> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineLineRoutesByIdsSignalError(QList<OAITfl_Api_Presentation_Entities_Line> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineMetaDisruptionCategoriesSignalError() instead")
    void lineMetaDisruptionCategoriesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineMetaDisruptionCategoriesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineMetaModesSignalError() instead")
    void lineMetaModesSignalE(QList<OAITfl_Api_Presentation_Entities_Mode> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineMetaModesSignalError(QList<OAITfl_Api_Presentation_Entities_Mode> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineMetaServiceTypesSignalError() instead")
    void lineMetaServiceTypesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineMetaServiceTypesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineMetaSeveritySignalError() instead")
    void lineMetaSeveritySignalE(QList<OAITfl_Api_Presentation_Entities_StatusSeverity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineMetaSeveritySignalError(QList<OAITfl_Api_Presentation_Entities_StatusSeverity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineRouteSignalError() instead")
    void lineRouteSignalE(QList<OAITfl_Api_Presentation_Entities_Line> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineRouteSignalError(QList<OAITfl_Api_Presentation_Entities_Line> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineRouteByModeSignalError() instead")
    void lineRouteByModeSignalE(QList<OAITfl_Api_Presentation_Entities_Line> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineRouteByModeSignalError(QList<OAITfl_Api_Presentation_Entities_Line> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineRouteSequenceSignalError() instead")
    void lineRouteSequenceSignalE(OAITfl_Api_Presentation_Entities_RouteSequence summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineRouteSequenceSignalError(OAITfl_Api_Presentation_Entities_RouteSequence summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineSearchSignalError() instead")
    void lineSearchSignalE(OAITfl_Api_Presentation_Entities_RouteSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineSearchSignalError(OAITfl_Api_Presentation_Entities_RouteSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineStatusSignalError() instead")
    void lineStatusSignalE(QList<OAITfl_Api_Presentation_Entities_Line> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineStatusSignalError(QList<OAITfl_Api_Presentation_Entities_Line> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineStatusByIdsSignalError() instead")
    void lineStatusByIdsSignalE(QList<OAITfl_Api_Presentation_Entities_Line> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineStatusByIdsSignalError(QList<OAITfl_Api_Presentation_Entities_Line> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineStatusByModeSignalError() instead")
    void lineStatusByModeSignalE(QList<OAITfl_Api_Presentation_Entities_Line> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineStatusByModeSignalError(QList<OAITfl_Api_Presentation_Entities_Line> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineStatusBySeveritySignalError() instead")
    void lineStatusBySeveritySignalE(QList<OAITfl_Api_Presentation_Entities_Line> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineStatusBySeveritySignalError(QList<OAITfl_Api_Presentation_Entities_Line> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineStopPointsSignalError() instead")
    void lineStopPointsSignalE(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineStopPointsSignalError(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineTimetableSignalError() instead")
    void lineTimetableSignalE(OAITfl_Api_Presentation_Entities_TimetableResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineTimetableSignalError(OAITfl_Api_Presentation_Entities_TimetableResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineTimetableToSignalError() instead")
    void lineTimetableToSignalE(OAITfl_Api_Presentation_Entities_TimetableResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lineTimetableToSignalError(OAITfl_Api_Presentation_Entities_TimetableResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use lineArrivalsSignalErrorFull() instead")
    void lineArrivalsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineArrivalsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineDisruptionSignalErrorFull() instead")
    void lineDisruptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineDisruptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineDisruptionByModeSignalErrorFull() instead")
    void lineDisruptionByModeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineDisruptionByModeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineGetSignalErrorFull() instead")
    void lineGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineGetByModeSignalErrorFull() instead")
    void lineGetByModeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineGetByModeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineLineRoutesByIdsSignalErrorFull() instead")
    void lineLineRoutesByIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineLineRoutesByIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineMetaDisruptionCategoriesSignalErrorFull() instead")
    void lineMetaDisruptionCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineMetaDisruptionCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineMetaModesSignalErrorFull() instead")
    void lineMetaModesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineMetaModesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineMetaServiceTypesSignalErrorFull() instead")
    void lineMetaServiceTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineMetaServiceTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineMetaSeveritySignalErrorFull() instead")
    void lineMetaSeveritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineMetaSeveritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineRouteSignalErrorFull() instead")
    void lineRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineRouteByModeSignalErrorFull() instead")
    void lineRouteByModeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineRouteByModeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineRouteSequenceSignalErrorFull() instead")
    void lineRouteSequenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineRouteSequenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineSearchSignalErrorFull() instead")
    void lineSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineStatusSignalErrorFull() instead")
    void lineStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineStatusByIdsSignalErrorFull() instead")
    void lineStatusByIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineStatusByIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineStatusByModeSignalErrorFull() instead")
    void lineStatusByModeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineStatusByModeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineStatusBySeveritySignalErrorFull() instead")
    void lineStatusBySeveritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineStatusBySeveritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineStopPointsSignalErrorFull() instead")
    void lineStopPointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineStopPointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineTimetableSignalErrorFull() instead")
    void lineTimetableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineTimetableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lineTimetableToSignalErrorFull() instead")
    void lineTimetableToSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lineTimetableToSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
