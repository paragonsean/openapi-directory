/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_DisruptedPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_DisruptedPoint::OAITfl_Api_Presentation_Entities_DisruptedPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_DisruptedPoint::OAITfl_Api_Presentation_Entities_DisruptedPoint() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_DisruptedPoint::~OAITfl_Api_Presentation_Entities_DisruptedPoint() {}

void OAITfl_Api_Presentation_Entities_DisruptedPoint::initializeModel() {

    m_additional_information_isSet = false;
    m_additional_information_isValid = false;

    m_appearance_isSet = false;
    m_appearance_isValid = false;

    m_atco_code_isSet = false;
    m_atco_code_isValid = false;

    m_common_name_isSet = false;
    m_common_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_from_date_isSet = false;
    m_from_date_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_station_atco_code_isSet = false;
    m_station_atco_code_isValid = false;

    m_to_date_isSet = false;
    m_to_date_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITfl_Api_Presentation_Entities_DisruptedPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_DisruptedPoint::fromJsonObject(QJsonObject json) {

    m_additional_information_isValid = ::OpenAPI::fromJsonValue(m_additional_information, json[QString("additionalInformation")]);
    m_additional_information_isSet = !json[QString("additionalInformation")].isNull() && m_additional_information_isValid;

    m_appearance_isValid = ::OpenAPI::fromJsonValue(m_appearance, json[QString("appearance")]);
    m_appearance_isSet = !json[QString("appearance")].isNull() && m_appearance_isValid;

    m_atco_code_isValid = ::OpenAPI::fromJsonValue(m_atco_code, json[QString("atcoCode")]);
    m_atco_code_isSet = !json[QString("atcoCode")].isNull() && m_atco_code_isValid;

    m_common_name_isValid = ::OpenAPI::fromJsonValue(m_common_name, json[QString("commonName")]);
    m_common_name_isSet = !json[QString("commonName")].isNull() && m_common_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_from_date_isValid = ::OpenAPI::fromJsonValue(m_from_date, json[QString("fromDate")]);
    m_from_date_isSet = !json[QString("fromDate")].isNull() && m_from_date_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_station_atco_code_isValid = ::OpenAPI::fromJsonValue(m_station_atco_code, json[QString("stationAtcoCode")]);
    m_station_atco_code_isSet = !json[QString("stationAtcoCode")].isNull() && m_station_atco_code_isValid;

    m_to_date_isValid = ::OpenAPI::fromJsonValue(m_to_date, json[QString("toDate")]);
    m_to_date_isSet = !json[QString("toDate")].isNull() && m_to_date_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_DisruptedPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_DisruptedPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_information_isSet) {
        obj.insert(QString("additionalInformation"), ::OpenAPI::toJsonValue(m_additional_information));
    }
    if (m_appearance_isSet) {
        obj.insert(QString("appearance"), ::OpenAPI::toJsonValue(m_appearance));
    }
    if (m_atco_code_isSet) {
        obj.insert(QString("atcoCode"), ::OpenAPI::toJsonValue(m_atco_code));
    }
    if (m_common_name_isSet) {
        obj.insert(QString("commonName"), ::OpenAPI::toJsonValue(m_common_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_from_date_isSet) {
        obj.insert(QString("fromDate"), ::OpenAPI::toJsonValue(m_from_date));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_station_atco_code_isSet) {
        obj.insert(QString("stationAtcoCode"), ::OpenAPI::toJsonValue(m_station_atco_code));
    }
    if (m_to_date_isSet) {
        obj.insert(QString("toDate"), ::OpenAPI::toJsonValue(m_to_date));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_DisruptedPoint::getAdditionalInformation() const {
    return m_additional_information;
}
void OAITfl_Api_Presentation_Entities_DisruptedPoint::setAdditionalInformation(const QString &additional_information) {
    m_additional_information = additional_information;
    m_additional_information_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_additional_information_Set() const{
    return m_additional_information_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_additional_information_Valid() const{
    return m_additional_information_isValid;
}

QString OAITfl_Api_Presentation_Entities_DisruptedPoint::getAppearance() const {
    return m_appearance;
}
void OAITfl_Api_Presentation_Entities_DisruptedPoint::setAppearance(const QString &appearance) {
    m_appearance = appearance;
    m_appearance_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_appearance_Set() const{
    return m_appearance_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_appearance_Valid() const{
    return m_appearance_isValid;
}

QString OAITfl_Api_Presentation_Entities_DisruptedPoint::getAtcoCode() const {
    return m_atco_code;
}
void OAITfl_Api_Presentation_Entities_DisruptedPoint::setAtcoCode(const QString &atco_code) {
    m_atco_code = atco_code;
    m_atco_code_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_atco_code_Set() const{
    return m_atco_code_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_atco_code_Valid() const{
    return m_atco_code_isValid;
}

QString OAITfl_Api_Presentation_Entities_DisruptedPoint::getCommonName() const {
    return m_common_name;
}
void OAITfl_Api_Presentation_Entities_DisruptedPoint::setCommonName(const QString &common_name) {
    m_common_name = common_name;
    m_common_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_common_name_Set() const{
    return m_common_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_common_name_Valid() const{
    return m_common_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_DisruptedPoint::getDescription() const {
    return m_description;
}
void OAITfl_Api_Presentation_Entities_DisruptedPoint::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_description_Set() const{
    return m_description_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_DisruptedPoint::getFromDate() const {
    return m_from_date;
}
void OAITfl_Api_Presentation_Entities_DisruptedPoint::setFromDate(const QDateTime &from_date) {
    m_from_date = from_date;
    m_from_date_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_from_date_Set() const{
    return m_from_date_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_from_date_Valid() const{
    return m_from_date_isValid;
}

QString OAITfl_Api_Presentation_Entities_DisruptedPoint::getMode() const {
    return m_mode;
}
void OAITfl_Api_Presentation_Entities_DisruptedPoint::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAITfl_Api_Presentation_Entities_DisruptedPoint::getStationAtcoCode() const {
    return m_station_atco_code;
}
void OAITfl_Api_Presentation_Entities_DisruptedPoint::setStationAtcoCode(const QString &station_atco_code) {
    m_station_atco_code = station_atco_code;
    m_station_atco_code_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_station_atco_code_Set() const{
    return m_station_atco_code_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_station_atco_code_Valid() const{
    return m_station_atco_code_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_DisruptedPoint::getToDate() const {
    return m_to_date;
}
void OAITfl_Api_Presentation_Entities_DisruptedPoint::setToDate(const QDateTime &to_date) {
    m_to_date = to_date;
    m_to_date_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_to_date_Set() const{
    return m_to_date_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_to_date_Valid() const{
    return m_to_date_isValid;
}

QString OAITfl_Api_Presentation_Entities_DisruptedPoint::getType() const {
    return m_type;
}
void OAITfl_Api_Presentation_Entities_DisruptedPoint::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_type_Set() const{
    return m_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_appearance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_atco_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_station_atco_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_DisruptedPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
