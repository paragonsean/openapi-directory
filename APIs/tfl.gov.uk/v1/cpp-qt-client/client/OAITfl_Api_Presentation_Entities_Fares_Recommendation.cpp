/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Fares_Recommendation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Fares_Recommendation::OAITfl_Api_Presentation_Entities_Fares_Recommendation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Fares_Recommendation::OAITfl_Api_Presentation_Entities_Fares_Recommendation() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Fares_Recommendation::~OAITfl_Api_Presentation_Entities_Fares_Recommendation() {}

void OAITfl_Api_Presentation_Entities_Fares_Recommendation::initializeModel() {

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_discount_card_isSet = false;
    m_discount_card_isValid = false;

    m_fare_type_isSet = false;
    m_fare_type_isValid = false;

    m_getting_your_ticket_isSet = false;
    m_getting_your_ticket_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_features_isSet = false;
    m_key_features_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_price_comparison_isSet = false;
    m_price_comparison_isValid = false;

    m_price_description_isSet = false;
    m_price_description_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_recommended_top_up_isSet = false;
    m_recommended_top_up_isValid = false;

    m_rule_isSet = false;
    m_rule_isValid = false;

    m_single_fare_isSet = false;
    m_single_fare_isValid = false;

    m_ticket_time_isSet = false;
    m_ticket_time_isValid = false;

    m_ticket_type_isSet = false;
    m_ticket_type_isValid = false;

    m_zones_isSet = false;
    m_zones_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Fares_Recommendation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Fares_Recommendation::fromJsonObject(QJsonObject json) {

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_discount_card_isValid = ::OpenAPI::fromJsonValue(m_discount_card, json[QString("discountCard")]);
    m_discount_card_isSet = !json[QString("discountCard")].isNull() && m_discount_card_isValid;

    m_fare_type_isValid = ::OpenAPI::fromJsonValue(m_fare_type, json[QString("fareType")]);
    m_fare_type_isSet = !json[QString("fareType")].isNull() && m_fare_type_isValid;

    m_getting_your_ticket_isValid = ::OpenAPI::fromJsonValue(m_getting_your_ticket, json[QString("gettingYourTicket")]);
    m_getting_your_ticket_isSet = !json[QString("gettingYourTicket")].isNull() && m_getting_your_ticket_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_features_isValid = ::OpenAPI::fromJsonValue(m_key_features, json[QString("keyFeatures")]);
    m_key_features_isSet = !json[QString("keyFeatures")].isNull() && m_key_features_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_price_comparison_isValid = ::OpenAPI::fromJsonValue(m_price_comparison, json[QString("priceComparison")]);
    m_price_comparison_isSet = !json[QString("priceComparison")].isNull() && m_price_comparison_isValid;

    m_price_description_isValid = ::OpenAPI::fromJsonValue(m_price_description, json[QString("priceDescription")]);
    m_price_description_isSet = !json[QString("priceDescription")].isNull() && m_price_description_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("productType")]);
    m_product_type_isSet = !json[QString("productType")].isNull() && m_product_type_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;

    m_recommended_top_up_isValid = ::OpenAPI::fromJsonValue(m_recommended_top_up, json[QString("recommendedTopUp")]);
    m_recommended_top_up_isSet = !json[QString("recommendedTopUp")].isNull() && m_recommended_top_up_isValid;

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("rule")]);
    m_rule_isSet = !json[QString("rule")].isNull() && m_rule_isValid;

    m_single_fare_isValid = ::OpenAPI::fromJsonValue(m_single_fare, json[QString("singleFare")]);
    m_single_fare_isSet = !json[QString("singleFare")].isNull() && m_single_fare_isValid;

    m_ticket_time_isValid = ::OpenAPI::fromJsonValue(m_ticket_time, json[QString("ticketTime")]);
    m_ticket_time_isSet = !json[QString("ticketTime")].isNull() && m_ticket_time_isValid;

    m_ticket_type_isValid = ::OpenAPI::fromJsonValue(m_ticket_type, json[QString("ticketType")]);
    m_ticket_type_isSet = !json[QString("ticketType")].isNull() && m_ticket_type_isValid;

    m_zones_isValid = ::OpenAPI::fromJsonValue(m_zones, json[QString("zones")]);
    m_zones_isSet = !json[QString("zones")].isNull() && m_zones_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Recommendation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Fares_Recommendation::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_discount_card_isSet) {
        obj.insert(QString("discountCard"), ::OpenAPI::toJsonValue(m_discount_card));
    }
    if (m_fare_type_isSet) {
        obj.insert(QString("fareType"), ::OpenAPI::toJsonValue(m_fare_type));
    }
    if (m_getting_your_ticket.size() > 0) {
        obj.insert(QString("gettingYourTicket"), ::OpenAPI::toJsonValue(m_getting_your_ticket));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_features.size() > 0) {
        obj.insert(QString("keyFeatures"), ::OpenAPI::toJsonValue(m_key_features));
    }
    if (m_notes.size() > 0) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_price_comparison_isSet) {
        obj.insert(QString("priceComparison"), ::OpenAPI::toJsonValue(m_price_comparison));
    }
    if (m_price_description_isSet) {
        obj.insert(QString("priceDescription"), ::OpenAPI::toJsonValue(m_price_description));
    }
    if (m_product_isSet) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_product_type_isSet) {
        obj.insert(QString("productType"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_recommended_top_up_isSet) {
        obj.insert(QString("recommendedTopUp"), ::OpenAPI::toJsonValue(m_recommended_top_up));
    }
    if (m_rule_isSet) {
        obj.insert(QString("rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    if (m_single_fare_isSet) {
        obj.insert(QString("singleFare"), ::OpenAPI::toJsonValue(m_single_fare));
    }
    if (m_ticket_time_isSet) {
        obj.insert(QString("ticketTime"), ::OpenAPI::toJsonValue(m_ticket_time));
    }
    if (m_ticket_type_isSet) {
        obj.insert(QString("ticketType"), ::OpenAPI::toJsonValue(m_ticket_type));
    }
    if (m_zones_isSet) {
        obj.insert(QString("zones"), ::OpenAPI::toJsonValue(m_zones));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_Fares_Recommendation::getCost() const {
    return m_cost;
}
void OAITfl_Api_Presentation_Entities_Fares_Recommendation::setCost(const QString &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_cost_Valid() const{
    return m_cost_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Recommendation::getDiscountCard() const {
    return m_discount_card;
}
void OAITfl_Api_Presentation_Entities_Fares_Recommendation::setDiscountCard(const QString &discount_card) {
    m_discount_card = discount_card;
    m_discount_card_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_discount_card_Set() const{
    return m_discount_card_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_discount_card_Valid() const{
    return m_discount_card_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Recommendation::getFareType() const {
    return m_fare_type;
}
void OAITfl_Api_Presentation_Entities_Fares_Recommendation::setFareType(const QString &fare_type) {
    m_fare_type = fare_type;
    m_fare_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_fare_type_Set() const{
    return m_fare_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_fare_type_Valid() const{
    return m_fare_type_isValid;
}

QList<OAITfl_Api_Presentation_Entities_Message> OAITfl_Api_Presentation_Entities_Fares_Recommendation::getGettingYourTicket() const {
    return m_getting_your_ticket;
}
void OAITfl_Api_Presentation_Entities_Fares_Recommendation::setGettingYourTicket(const QList<OAITfl_Api_Presentation_Entities_Message> &getting_your_ticket) {
    m_getting_your_ticket = getting_your_ticket;
    m_getting_your_ticket_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_getting_your_ticket_Set() const{
    return m_getting_your_ticket_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_getting_your_ticket_Valid() const{
    return m_getting_your_ticket_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_Fares_Recommendation::getId() const {
    return m_id;
}
void OAITfl_Api_Presentation_Entities_Fares_Recommendation::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_id_Set() const{
    return m_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAITfl_Api_Presentation_Entities_Message> OAITfl_Api_Presentation_Entities_Fares_Recommendation::getKeyFeatures() const {
    return m_key_features;
}
void OAITfl_Api_Presentation_Entities_Fares_Recommendation::setKeyFeatures(const QList<OAITfl_Api_Presentation_Entities_Message> &key_features) {
    m_key_features = key_features;
    m_key_features_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_key_features_Set() const{
    return m_key_features_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_key_features_Valid() const{
    return m_key_features_isValid;
}

QList<OAITfl_Api_Presentation_Entities_Message> OAITfl_Api_Presentation_Entities_Fares_Recommendation::getNotes() const {
    return m_notes;
}
void OAITfl_Api_Presentation_Entities_Fares_Recommendation::setNotes(const QList<OAITfl_Api_Presentation_Entities_Message> &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Recommendation::getPriceComparison() const {
    return m_price_comparison;
}
void OAITfl_Api_Presentation_Entities_Fares_Recommendation::setPriceComparison(const QString &price_comparison) {
    m_price_comparison = price_comparison;
    m_price_comparison_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_price_comparison_Set() const{
    return m_price_comparison_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_price_comparison_Valid() const{
    return m_price_comparison_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Recommendation::getPriceDescription() const {
    return m_price_description;
}
void OAITfl_Api_Presentation_Entities_Fares_Recommendation::setPriceDescription(const QString &price_description) {
    m_price_description = price_description;
    m_price_description_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_price_description_Set() const{
    return m_price_description_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_price_description_Valid() const{
    return m_price_description_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Recommendation::getProduct() const {
    return m_product;
}
void OAITfl_Api_Presentation_Entities_Fares_Recommendation::setProduct(const QString &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_product_Set() const{
    return m_product_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_product_Valid() const{
    return m_product_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Recommendation::getProductType() const {
    return m_product_type;
}
void OAITfl_Api_Presentation_Entities_Fares_Recommendation::setProductType(const QString &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_product_type_Valid() const{
    return m_product_type_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_Fares_Recommendation::getRank() const {
    return m_rank;
}
void OAITfl_Api_Presentation_Entities_Fares_Recommendation::setRank(const qint32 &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_rank_Valid() const{
    return m_rank_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Recommendation::getRecommendedTopUp() const {
    return m_recommended_top_up;
}
void OAITfl_Api_Presentation_Entities_Fares_Recommendation::setRecommendedTopUp(const QString &recommended_top_up) {
    m_recommended_top_up = recommended_top_up;
    m_recommended_top_up_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_recommended_top_up_Set() const{
    return m_recommended_top_up_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_recommended_top_up_Valid() const{
    return m_recommended_top_up_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_Fares_Recommendation::getRule() const {
    return m_rule;
}
void OAITfl_Api_Presentation_Entities_Fares_Recommendation::setRule(const qint32 &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_rule_Valid() const{
    return m_rule_isValid;
}

double OAITfl_Api_Presentation_Entities_Fares_Recommendation::getSingleFare() const {
    return m_single_fare;
}
void OAITfl_Api_Presentation_Entities_Fares_Recommendation::setSingleFare(const double &single_fare) {
    m_single_fare = single_fare;
    m_single_fare_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_single_fare_Set() const{
    return m_single_fare_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_single_fare_Valid() const{
    return m_single_fare_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Recommendation::getTicketTime() const {
    return m_ticket_time;
}
void OAITfl_Api_Presentation_Entities_Fares_Recommendation::setTicketTime(const QString &ticket_time) {
    m_ticket_time = ticket_time;
    m_ticket_time_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_ticket_time_Set() const{
    return m_ticket_time_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_ticket_time_Valid() const{
    return m_ticket_time_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Recommendation::getTicketType() const {
    return m_ticket_type;
}
void OAITfl_Api_Presentation_Entities_Fares_Recommendation::setTicketType(const QString &ticket_type) {
    m_ticket_type = ticket_type;
    m_ticket_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_ticket_type_Set() const{
    return m_ticket_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_ticket_type_Valid() const{
    return m_ticket_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Recommendation::getZones() const {
    return m_zones;
}
void OAITfl_Api_Presentation_Entities_Fares_Recommendation::setZones(const QString &zones) {
    m_zones = zones;
    m_zones_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_zones_Set() const{
    return m_zones_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::is_zones_Valid() const{
    return m_zones_isValid;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_card_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fare_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_getting_your_ticket.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_comparison_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_top_up_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_fare_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zones_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Fares_Recommendation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
