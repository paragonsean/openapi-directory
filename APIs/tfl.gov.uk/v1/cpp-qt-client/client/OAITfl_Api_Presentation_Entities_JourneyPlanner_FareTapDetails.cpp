/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::~OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails() {}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::initializeModel() {

    m_bus_route_id_isSet = false;
    m_bus_route_id_isValid = false;

    m_host_device_type_isSet = false;
    m_host_device_type_isValid = false;

    m_mode_type_isSet = false;
    m_mode_type_isValid = false;

    m_national_location_code_isSet = false;
    m_national_location_code_isValid = false;

    m_tap_timestamp_isSet = false;
    m_tap_timestamp_isValid = false;

    m_validation_type_isSet = false;
    m_validation_type_isValid = false;
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::fromJsonObject(QJsonObject json) {

    m_bus_route_id_isValid = ::OpenAPI::fromJsonValue(m_bus_route_id, json[QString("busRouteId")]);
    m_bus_route_id_isSet = !json[QString("busRouteId")].isNull() && m_bus_route_id_isValid;

    m_host_device_type_isValid = ::OpenAPI::fromJsonValue(m_host_device_type, json[QString("hostDeviceType")]);
    m_host_device_type_isSet = !json[QString("hostDeviceType")].isNull() && m_host_device_type_isValid;

    m_mode_type_isValid = ::OpenAPI::fromJsonValue(m_mode_type, json[QString("modeType")]);
    m_mode_type_isSet = !json[QString("modeType")].isNull() && m_mode_type_isValid;

    m_national_location_code_isValid = ::OpenAPI::fromJsonValue(m_national_location_code, json[QString("nationalLocationCode")]);
    m_national_location_code_isSet = !json[QString("nationalLocationCode")].isNull() && m_national_location_code_isValid;

    m_tap_timestamp_isValid = ::OpenAPI::fromJsonValue(m_tap_timestamp, json[QString("tapTimestamp")]);
    m_tap_timestamp_isSet = !json[QString("tapTimestamp")].isNull() && m_tap_timestamp_isValid;

    m_validation_type_isValid = ::OpenAPI::fromJsonValue(m_validation_type, json[QString("validationType")]);
    m_validation_type_isSet = !json[QString("validationType")].isNull() && m_validation_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_bus_route_id_isSet) {
        obj.insert(QString("busRouteId"), ::OpenAPI::toJsonValue(m_bus_route_id));
    }
    if (m_host_device_type_isSet) {
        obj.insert(QString("hostDeviceType"), ::OpenAPI::toJsonValue(m_host_device_type));
    }
    if (m_mode_type_isSet) {
        obj.insert(QString("modeType"), ::OpenAPI::toJsonValue(m_mode_type));
    }
    if (m_national_location_code_isSet) {
        obj.insert(QString("nationalLocationCode"), ::OpenAPI::toJsonValue(m_national_location_code));
    }
    if (m_tap_timestamp_isSet) {
        obj.insert(QString("tapTimestamp"), ::OpenAPI::toJsonValue(m_tap_timestamp));
    }
    if (m_validation_type_isSet) {
        obj.insert(QString("validationType"), ::OpenAPI::toJsonValue(m_validation_type));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::getBusRouteId() const {
    return m_bus_route_id;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::setBusRouteId(const QString &bus_route_id) {
    m_bus_route_id = bus_route_id;
    m_bus_route_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::is_bus_route_id_Set() const{
    return m_bus_route_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::is_bus_route_id_Valid() const{
    return m_bus_route_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::getHostDeviceType() const {
    return m_host_device_type;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::setHostDeviceType(const QString &host_device_type) {
    m_host_device_type = host_device_type;
    m_host_device_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::is_host_device_type_Set() const{
    return m_host_device_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::is_host_device_type_Valid() const{
    return m_host_device_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::getModeType() const {
    return m_mode_type;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::setModeType(const QString &mode_type) {
    m_mode_type = mode_type;
    m_mode_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::is_mode_type_Set() const{
    return m_mode_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::is_mode_type_Valid() const{
    return m_mode_type_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::getNationalLocationCode() const {
    return m_national_location_code;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::setNationalLocationCode(const qint32 &national_location_code) {
    m_national_location_code = national_location_code;
    m_national_location_code_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::is_national_location_code_Set() const{
    return m_national_location_code_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::is_national_location_code_Valid() const{
    return m_national_location_code_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::getTapTimestamp() const {
    return m_tap_timestamp;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::setTapTimestamp(const QDateTime &tap_timestamp) {
    m_tap_timestamp = tap_timestamp;
    m_tap_timestamp_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::is_tap_timestamp_Set() const{
    return m_tap_timestamp_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::is_tap_timestamp_Valid() const{
    return m_tap_timestamp_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::getValidationType() const {
    return m_validation_type;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::setValidationType(const QString &validation_type) {
    m_validation_type = validation_type;
    m_validation_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::is_validation_type_Set() const{
    return m_validation_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::is_validation_type_Valid() const{
    return m_validation_type_isValid;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bus_route_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_national_location_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tap_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTapDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
