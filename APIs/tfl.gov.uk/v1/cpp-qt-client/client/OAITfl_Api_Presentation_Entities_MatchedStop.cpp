/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_MatchedStop.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_MatchedStop::OAITfl_Api_Presentation_Entities_MatchedStop(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_MatchedStop::OAITfl_Api_Presentation_Entities_MatchedStop() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_MatchedStop::~OAITfl_Api_Presentation_Entities_MatchedStop() {}

void OAITfl_Api_Presentation_Entities_MatchedStop::initializeModel() {

    m_accessibility_summary_isSet = false;
    m_accessibility_summary_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_has_disruption_isSet = false;
    m_has_disruption_isValid = false;

    m_ics_id_isSet = false;
    m_ics_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_modes_isSet = false;
    m_modes_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_route_id_isSet = false;
    m_route_id_isValid = false;

    m_station_id_isSet = false;
    m_station_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_stop_letter_isSet = false;
    m_stop_letter_isValid = false;

    m_stop_type_isSet = false;
    m_stop_type_isValid = false;

    m_top_most_parent_id_isSet = false;
    m_top_most_parent_id_isValid = false;

    m_towards_isSet = false;
    m_towards_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAITfl_Api_Presentation_Entities_MatchedStop::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_MatchedStop::fromJsonObject(QJsonObject json) {

    m_accessibility_summary_isValid = ::OpenAPI::fromJsonValue(m_accessibility_summary, json[QString("accessibilitySummary")]);
    m_accessibility_summary_isSet = !json[QString("accessibilitySummary")].isNull() && m_accessibility_summary_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_has_disruption_isValid = ::OpenAPI::fromJsonValue(m_has_disruption, json[QString("hasDisruption")]);
    m_has_disruption_isSet = !json[QString("hasDisruption")].isNull() && m_has_disruption_isValid;

    m_ics_id_isValid = ::OpenAPI::fromJsonValue(m_ics_id, json[QString("icsId")]);
    m_ics_id_isSet = !json[QString("icsId")].isNull() && m_ics_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_modes_isValid = ::OpenAPI::fromJsonValue(m_modes, json[QString("modes")]);
    m_modes_isSet = !json[QString("modes")].isNull() && m_modes_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parentId")]);
    m_parent_id_isSet = !json[QString("parentId")].isNull() && m_parent_id_isValid;

    m_route_id_isValid = ::OpenAPI::fromJsonValue(m_route_id, json[QString("routeId")]);
    m_route_id_isSet = !json[QString("routeId")].isNull() && m_route_id_isValid;

    m_station_id_isValid = ::OpenAPI::fromJsonValue(m_station_id, json[QString("stationId")]);
    m_station_id_isSet = !json[QString("stationId")].isNull() && m_station_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_stop_letter_isValid = ::OpenAPI::fromJsonValue(m_stop_letter, json[QString("stopLetter")]);
    m_stop_letter_isSet = !json[QString("stopLetter")].isNull() && m_stop_letter_isValid;

    m_stop_type_isValid = ::OpenAPI::fromJsonValue(m_stop_type, json[QString("stopType")]);
    m_stop_type_isSet = !json[QString("stopType")].isNull() && m_stop_type_isValid;

    m_top_most_parent_id_isValid = ::OpenAPI::fromJsonValue(m_top_most_parent_id, json[QString("topMostParentId")]);
    m_top_most_parent_id_isSet = !json[QString("topMostParentId")].isNull() && m_top_most_parent_id_isValid;

    m_towards_isValid = ::OpenAPI::fromJsonValue(m_towards, json[QString("towards")]);
    m_towards_isSet = !json[QString("towards")].isNull() && m_towards_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedStop::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_MatchedStop::asJsonObject() const {
    QJsonObject obj;
    if (m_accessibility_summary_isSet) {
        obj.insert(QString("accessibilitySummary"), ::OpenAPI::toJsonValue(m_accessibility_summary));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_has_disruption_isSet) {
        obj.insert(QString("hasDisruption"), ::OpenAPI::toJsonValue(m_has_disruption));
    }
    if (m_ics_id_isSet) {
        obj.insert(QString("icsId"), ::OpenAPI::toJsonValue(m_ics_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_modes.size() > 0) {
        obj.insert(QString("modes"), ::OpenAPI::toJsonValue(m_modes));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parentId"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_route_id_isSet) {
        obj.insert(QString("routeId"), ::OpenAPI::toJsonValue(m_route_id));
    }
    if (m_station_id_isSet) {
        obj.insert(QString("stationId"), ::OpenAPI::toJsonValue(m_station_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_stop_letter_isSet) {
        obj.insert(QString("stopLetter"), ::OpenAPI::toJsonValue(m_stop_letter));
    }
    if (m_stop_type_isSet) {
        obj.insert(QString("stopType"), ::OpenAPI::toJsonValue(m_stop_type));
    }
    if (m_top_most_parent_id_isSet) {
        obj.insert(QString("topMostParentId"), ::OpenAPI::toJsonValue(m_top_most_parent_id));
    }
    if (m_towards_isSet) {
        obj.insert(QString("towards"), ::OpenAPI::toJsonValue(m_towards));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_MatchedStop::getAccessibilitySummary() const {
    return m_accessibility_summary;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setAccessibilitySummary(const QString &accessibility_summary) {
    m_accessibility_summary = accessibility_summary;
    m_accessibility_summary_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_accessibility_summary_Set() const{
    return m_accessibility_summary_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_accessibility_summary_Valid() const{
    return m_accessibility_summary_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedStop::getDirection() const {
    return m_direction;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_direction_Valid() const{
    return m_direction_isValid;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::isHasDisruption() const {
    return m_has_disruption;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setHasDisruption(const bool &has_disruption) {
    m_has_disruption = has_disruption;
    m_has_disruption_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_has_disruption_Set() const{
    return m_has_disruption_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_has_disruption_Valid() const{
    return m_has_disruption_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedStop::getIcsId() const {
    return m_ics_id;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setIcsId(const QString &ics_id) {
    m_ics_id = ics_id;
    m_ics_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_ics_id_Set() const{
    return m_ics_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_ics_id_Valid() const{
    return m_ics_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedStop::getId() const {
    return m_id;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_id_Set() const{
    return m_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_id_Valid() const{
    return m_id_isValid;
}

double OAITfl_Api_Presentation_Entities_MatchedStop::getLat() const {
    return m_lat;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_lat_Valid() const{
    return m_lat_isValid;
}

QList<OAITfl_Api_Presentation_Entities_Identifier> OAITfl_Api_Presentation_Entities_MatchedStop::getLines() const {
    return m_lines;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setLines(const QList<OAITfl_Api_Presentation_Entities_Identifier> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_lines_Valid() const{
    return m_lines_isValid;
}

double OAITfl_Api_Presentation_Entities_MatchedStop::getLon() const {
    return m_lon;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setLon(const double &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_lon_Valid() const{
    return m_lon_isValid;
}

QList<QString> OAITfl_Api_Presentation_Entities_MatchedStop::getModes() const {
    return m_modes;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setModes(const QList<QString> &modes) {
    m_modes = modes;
    m_modes_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_modes_Set() const{
    return m_modes_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_modes_Valid() const{
    return m_modes_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedStop::getName() const {
    return m_name;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_name_Set() const{
    return m_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedStop::getParentId() const {
    return m_parent_id;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_MatchedStop::getRouteId() const {
    return m_route_id;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setRouteId(const qint32 &route_id) {
    m_route_id = route_id;
    m_route_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_route_id_Set() const{
    return m_route_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_route_id_Valid() const{
    return m_route_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedStop::getStationId() const {
    return m_station_id;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setStationId(const QString &station_id) {
    m_station_id = station_id;
    m_station_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_station_id_Set() const{
    return m_station_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_station_id_Valid() const{
    return m_station_id_isValid;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::isStatus() const {
    return m_status;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setStatus(const bool &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_status_Set() const{
    return m_status_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedStop::getStopLetter() const {
    return m_stop_letter;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setStopLetter(const QString &stop_letter) {
    m_stop_letter = stop_letter;
    m_stop_letter_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_stop_letter_Set() const{
    return m_stop_letter_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_stop_letter_Valid() const{
    return m_stop_letter_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedStop::getStopType() const {
    return m_stop_type;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setStopType(const QString &stop_type) {
    m_stop_type = stop_type;
    m_stop_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_stop_type_Set() const{
    return m_stop_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_stop_type_Valid() const{
    return m_stop_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedStop::getTopMostParentId() const {
    return m_top_most_parent_id;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setTopMostParentId(const QString &top_most_parent_id) {
    m_top_most_parent_id = top_most_parent_id;
    m_top_most_parent_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_top_most_parent_id_Set() const{
    return m_top_most_parent_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_top_most_parent_id_Valid() const{
    return m_top_most_parent_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedStop::getTowards() const {
    return m_towards;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setTowards(const QString &towards) {
    m_towards = towards;
    m_towards_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_towards_Set() const{
    return m_towards_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_towards_Valid() const{
    return m_towards_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedStop::getUrl() const {
    return m_url;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_url_Set() const{
    return m_url_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_url_Valid() const{
    return m_url_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedStop::getZone() const {
    return m_zone;
}
void OAITfl_Api_Presentation_Entities_MatchedStop::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessibility_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_disruption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ics_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_station_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_letter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_most_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_towards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_MatchedStop::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
