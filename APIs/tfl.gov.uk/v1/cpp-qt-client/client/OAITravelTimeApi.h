/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITravelTimeApi_H
#define OAI_OAITravelTimeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITravelTimeApi : public QObject {
    Q_OBJECT

public:
    OAITravelTimeApi(const int timeOut = 0);
    ~OAITravelTimeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  z qint32 [required]
    * @param[in]  pin_lat double [required]
    * @param[in]  pin_lon double [required]
    * @param[in]  map_center_lat double [required]
    * @param[in]  map_center_lon double [required]
    * @param[in]  scenario_title QString [required]
    * @param[in]  time_of_day_id QString [required]
    * @param[in]  mode_id QString [required]
    * @param[in]  width qint32 [required]
    * @param[in]  height qint32 [required]
    * @param[in]  direction QString [required]
    * @param[in]  travel_time_interval qint32 [required]
    * @param[in]  compare_type QString [required]
    * @param[in]  compare_value QString [required]
    */
    virtual void travelTimeGetCompareOverlay(const qint32 &z, const double &pin_lat, const double &pin_lon, const double &map_center_lat, const double &map_center_lon, const QString &scenario_title, const QString &time_of_day_id, const QString &mode_id, const qint32 &width, const qint32 &height, const QString &direction, const qint32 &travel_time_interval, const QString &compare_type, const QString &compare_value);

    /**
    * @param[in]  z qint32 [required]
    * @param[in]  pin_lat double [required]
    * @param[in]  pin_lon double [required]
    * @param[in]  map_center_lat double [required]
    * @param[in]  map_center_lon double [required]
    * @param[in]  scenario_title QString [required]
    * @param[in]  time_of_day_id QString [required]
    * @param[in]  mode_id QString [required]
    * @param[in]  width qint32 [required]
    * @param[in]  height qint32 [required]
    * @param[in]  direction QString [required]
    * @param[in]  travel_time_interval qint32 [required]
    */
    virtual void travelTimeGetOverlay(const qint32 &z, const double &pin_lat, const double &pin_lon, const double &map_center_lat, const double &map_center_lon, const QString &scenario_title, const QString &time_of_day_id, const QString &mode_id, const qint32 &width, const qint32 &height, const QString &direction, const qint32 &travel_time_interval);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void travelTimeGetCompareOverlayCallback(OAIHttpRequestWorker *worker);
    void travelTimeGetOverlayCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void travelTimeGetCompareOverlaySignal(OAIObject summary);
    void travelTimeGetOverlaySignal(OAIObject summary);


    void travelTimeGetCompareOverlaySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void travelTimeGetOverlaySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use travelTimeGetCompareOverlaySignalError() instead")
    void travelTimeGetCompareOverlaySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelTimeGetCompareOverlaySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelTimeGetOverlaySignalError() instead")
    void travelTimeGetOverlaySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelTimeGetOverlaySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use travelTimeGetCompareOverlaySignalErrorFull() instead")
    void travelTimeGetCompareOverlaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelTimeGetCompareOverlaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelTimeGetOverlaySignalErrorFull() instead")
    void travelTimeGetOverlaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelTimeGetOverlaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
