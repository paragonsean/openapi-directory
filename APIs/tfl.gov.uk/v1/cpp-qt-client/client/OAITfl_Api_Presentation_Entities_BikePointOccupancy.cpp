/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_BikePointOccupancy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_BikePointOccupancy::OAITfl_Api_Presentation_Entities_BikePointOccupancy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_BikePointOccupancy::OAITfl_Api_Presentation_Entities_BikePointOccupancy() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_BikePointOccupancy::~OAITfl_Api_Presentation_Entities_BikePointOccupancy() {}

void OAITfl_Api_Presentation_Entities_BikePointOccupancy::initializeModel() {

    m_bikes_count_isSet = false;
    m_bikes_count_isValid = false;

    m_e_bikes_count_isSet = false;
    m_e_bikes_count_isValid = false;

    m_empty_docks_isSet = false;
    m_empty_docks_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_standard_bikes_count_isSet = false;
    m_standard_bikes_count_isValid = false;

    m_total_docks_isSet = false;
    m_total_docks_isValid = false;
}

void OAITfl_Api_Presentation_Entities_BikePointOccupancy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_BikePointOccupancy::fromJsonObject(QJsonObject json) {

    m_bikes_count_isValid = ::OpenAPI::fromJsonValue(m_bikes_count, json[QString("bikesCount")]);
    m_bikes_count_isSet = !json[QString("bikesCount")].isNull() && m_bikes_count_isValid;

    m_e_bikes_count_isValid = ::OpenAPI::fromJsonValue(m_e_bikes_count, json[QString("eBikesCount")]);
    m_e_bikes_count_isSet = !json[QString("eBikesCount")].isNull() && m_e_bikes_count_isValid;

    m_empty_docks_isValid = ::OpenAPI::fromJsonValue(m_empty_docks, json[QString("emptyDocks")]);
    m_empty_docks_isSet = !json[QString("emptyDocks")].isNull() && m_empty_docks_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_standard_bikes_count_isValid = ::OpenAPI::fromJsonValue(m_standard_bikes_count, json[QString("standardBikesCount")]);
    m_standard_bikes_count_isSet = !json[QString("standardBikesCount")].isNull() && m_standard_bikes_count_isValid;

    m_total_docks_isValid = ::OpenAPI::fromJsonValue(m_total_docks, json[QString("totalDocks")]);
    m_total_docks_isSet = !json[QString("totalDocks")].isNull() && m_total_docks_isValid;
}

QString OAITfl_Api_Presentation_Entities_BikePointOccupancy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_BikePointOccupancy::asJsonObject() const {
    QJsonObject obj;
    if (m_bikes_count_isSet) {
        obj.insert(QString("bikesCount"), ::OpenAPI::toJsonValue(m_bikes_count));
    }
    if (m_e_bikes_count_isSet) {
        obj.insert(QString("eBikesCount"), ::OpenAPI::toJsonValue(m_e_bikes_count));
    }
    if (m_empty_docks_isSet) {
        obj.insert(QString("emptyDocks"), ::OpenAPI::toJsonValue(m_empty_docks));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_standard_bikes_count_isSet) {
        obj.insert(QString("standardBikesCount"), ::OpenAPI::toJsonValue(m_standard_bikes_count));
    }
    if (m_total_docks_isSet) {
        obj.insert(QString("totalDocks"), ::OpenAPI::toJsonValue(m_total_docks));
    }
    return obj;
}

qint32 OAITfl_Api_Presentation_Entities_BikePointOccupancy::getBikesCount() const {
    return m_bikes_count;
}
void OAITfl_Api_Presentation_Entities_BikePointOccupancy::setBikesCount(const qint32 &bikes_count) {
    m_bikes_count = bikes_count;
    m_bikes_count_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_BikePointOccupancy::is_bikes_count_Set() const{
    return m_bikes_count_isSet;
}

bool OAITfl_Api_Presentation_Entities_BikePointOccupancy::is_bikes_count_Valid() const{
    return m_bikes_count_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_BikePointOccupancy::getEBikesCount() const {
    return m_e_bikes_count;
}
void OAITfl_Api_Presentation_Entities_BikePointOccupancy::setEBikesCount(const qint32 &e_bikes_count) {
    m_e_bikes_count = e_bikes_count;
    m_e_bikes_count_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_BikePointOccupancy::is_e_bikes_count_Set() const{
    return m_e_bikes_count_isSet;
}

bool OAITfl_Api_Presentation_Entities_BikePointOccupancy::is_e_bikes_count_Valid() const{
    return m_e_bikes_count_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_BikePointOccupancy::getEmptyDocks() const {
    return m_empty_docks;
}
void OAITfl_Api_Presentation_Entities_BikePointOccupancy::setEmptyDocks(const qint32 &empty_docks) {
    m_empty_docks = empty_docks;
    m_empty_docks_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_BikePointOccupancy::is_empty_docks_Set() const{
    return m_empty_docks_isSet;
}

bool OAITfl_Api_Presentation_Entities_BikePointOccupancy::is_empty_docks_Valid() const{
    return m_empty_docks_isValid;
}

QString OAITfl_Api_Presentation_Entities_BikePointOccupancy::getId() const {
    return m_id;
}
void OAITfl_Api_Presentation_Entities_BikePointOccupancy::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_BikePointOccupancy::is_id_Set() const{
    return m_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_BikePointOccupancy::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_BikePointOccupancy::getName() const {
    return m_name;
}
void OAITfl_Api_Presentation_Entities_BikePointOccupancy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_BikePointOccupancy::is_name_Set() const{
    return m_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_BikePointOccupancy::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_BikePointOccupancy::getStandardBikesCount() const {
    return m_standard_bikes_count;
}
void OAITfl_Api_Presentation_Entities_BikePointOccupancy::setStandardBikesCount(const qint32 &standard_bikes_count) {
    m_standard_bikes_count = standard_bikes_count;
    m_standard_bikes_count_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_BikePointOccupancy::is_standard_bikes_count_Set() const{
    return m_standard_bikes_count_isSet;
}

bool OAITfl_Api_Presentation_Entities_BikePointOccupancy::is_standard_bikes_count_Valid() const{
    return m_standard_bikes_count_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_BikePointOccupancy::getTotalDocks() const {
    return m_total_docks;
}
void OAITfl_Api_Presentation_Entities_BikePointOccupancy::setTotalDocks(const qint32 &total_docks) {
    m_total_docks = total_docks;
    m_total_docks_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_BikePointOccupancy::is_total_docks_Set() const{
    return m_total_docks_isSet;
}

bool OAITfl_Api_Presentation_Entities_BikePointOccupancy::is_total_docks_Valid() const{
    return m_total_docks_isValid;
}

bool OAITfl_Api_Presentation_Entities_BikePointOccupancy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bikes_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_bikes_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_empty_docks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_bikes_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_docks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_BikePointOccupancy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
