/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::~OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare() {}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::initializeModel() {

    m_caveats_isSet = false;
    m_caveats_isValid = false;

    m_fares_isSet = false;
    m_fares_isValid = false;

    m_total_cost_isSet = false;
    m_total_cost_isValid = false;
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::fromJsonObject(QJsonObject json) {

    m_caveats_isValid = ::OpenAPI::fromJsonValue(m_caveats, json[QString("caveats")]);
    m_caveats_isSet = !json[QString("caveats")].isNull() && m_caveats_isValid;

    m_fares_isValid = ::OpenAPI::fromJsonValue(m_fares, json[QString("fares")]);
    m_fares_isSet = !json[QString("fares")].isNull() && m_fares_isValid;

    m_total_cost_isValid = ::OpenAPI::fromJsonValue(m_total_cost, json[QString("totalCost")]);
    m_total_cost_isSet = !json[QString("totalCost")].isNull() && m_total_cost_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::asJsonObject() const {
    QJsonObject obj;
    if (m_caveats.size() > 0) {
        obj.insert(QString("caveats"), ::OpenAPI::toJsonValue(m_caveats));
    }
    if (m_fares.size() > 0) {
        obj.insert(QString("fares"), ::OpenAPI::toJsonValue(m_fares));
    }
    if (m_total_cost_isSet) {
        obj.insert(QString("totalCost"), ::OpenAPI::toJsonValue(m_total_cost));
    }
    return obj;
}

QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_FareCaveat> OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::getCaveats() const {
    return m_caveats;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::setCaveats(const QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_FareCaveat> &caveats) {
    m_caveats = caveats;
    m_caveats_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::is_caveats_Set() const{
    return m_caveats_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::is_caveats_Valid() const{
    return m_caveats_isValid;
}

QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare> OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::getFares() const {
    return m_fares;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::setFares(const QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare> &fares) {
    m_fares = fares;
    m_fares_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::is_fares_Set() const{
    return m_fares_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::is_fares_Valid() const{
    return m_fares_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::getTotalCost() const {
    return m_total_cost;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::setTotalCost(const qint32 &total_cost) {
    m_total_cost = total_cost;
    m_total_cost_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::is_total_cost_Set() const{
    return m_total_cost_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::is_total_cost_Valid() const{
    return m_total_cost_isValid;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caveats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fares.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cost_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
