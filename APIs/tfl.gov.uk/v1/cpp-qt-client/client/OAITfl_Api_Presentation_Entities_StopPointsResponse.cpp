/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_StopPointsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_StopPointsResponse::OAITfl_Api_Presentation_Entities_StopPointsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_StopPointsResponse::OAITfl_Api_Presentation_Entities_StopPointsResponse() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_StopPointsResponse::~OAITfl_Api_Presentation_Entities_StopPointsResponse() {}

void OAITfl_Api_Presentation_Entities_StopPointsResponse::initializeModel() {

    m_centre_point_isSet = false;
    m_centre_point_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_stop_points_isSet = false;
    m_stop_points_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAITfl_Api_Presentation_Entities_StopPointsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_StopPointsResponse::fromJsonObject(QJsonObject json) {

    m_centre_point_isValid = ::OpenAPI::fromJsonValue(m_centre_point, json[QString("centrePoint")]);
    m_centre_point_isSet = !json[QString("centrePoint")].isNull() && m_centre_point_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_stop_points_isValid = ::OpenAPI::fromJsonValue(m_stop_points, json[QString("stopPoints")]);
    m_stop_points_isSet = !json[QString("stopPoints")].isNull() && m_stop_points_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPointsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_StopPointsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_centre_point.size() > 0) {
        obj.insert(QString("centrePoint"), ::OpenAPI::toJsonValue(m_centre_point));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_stop_points.size() > 0) {
        obj.insert(QString("stopPoints"), ::OpenAPI::toJsonValue(m_stop_points));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QList<double> OAITfl_Api_Presentation_Entities_StopPointsResponse::getCentrePoint() const {
    return m_centre_point;
}
void OAITfl_Api_Presentation_Entities_StopPointsResponse::setCentrePoint(const QList<double> &centre_point) {
    m_centre_point = centre_point;
    m_centre_point_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointsResponse::is_centre_point_Set() const{
    return m_centre_point_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointsResponse::is_centre_point_Valid() const{
    return m_centre_point_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_StopPointsResponse::getPage() const {
    return m_page;
}
void OAITfl_Api_Presentation_Entities_StopPointsResponse::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointsResponse::is_page_Set() const{
    return m_page_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointsResponse::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_StopPointsResponse::getPageSize() const {
    return m_page_size;
}
void OAITfl_Api_Presentation_Entities_StopPointsResponse::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointsResponse::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointsResponse::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QList<OAITfl_Api_Presentation_Entities_StopPoint> OAITfl_Api_Presentation_Entities_StopPointsResponse::getStopPoints() const {
    return m_stop_points;
}
void OAITfl_Api_Presentation_Entities_StopPointsResponse::setStopPoints(const QList<OAITfl_Api_Presentation_Entities_StopPoint> &stop_points) {
    m_stop_points = stop_points;
    m_stop_points_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointsResponse::is_stop_points_Set() const{
    return m_stop_points_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointsResponse::is_stop_points_Valid() const{
    return m_stop_points_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_StopPointsResponse::getTotal() const {
    return m_total;
}
void OAITfl_Api_Presentation_Entities_StopPointsResponse::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointsResponse::is_total_Set() const{
    return m_total_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointsResponse::is_total_Valid() const{
    return m_total_isValid;
}

bool OAITfl_Api_Presentation_Entities_StopPointsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_centre_point.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_StopPointsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
