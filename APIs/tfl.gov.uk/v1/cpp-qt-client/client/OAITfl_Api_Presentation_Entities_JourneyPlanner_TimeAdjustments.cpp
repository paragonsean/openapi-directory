/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::~OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments() {}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::initializeModel() {

    m_earlier_isSet = false;
    m_earlier_isValid = false;

    m_earliest_isSet = false;
    m_earliest_isValid = false;

    m_later_isSet = false;
    m_later_isValid = false;

    m_latest_isSet = false;
    m_latest_isValid = false;
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::fromJsonObject(QJsonObject json) {

    m_earlier_isValid = ::OpenAPI::fromJsonValue(m_earlier, json[QString("earlier")]);
    m_earlier_isSet = !json[QString("earlier")].isNull() && m_earlier_isValid;

    m_earliest_isValid = ::OpenAPI::fromJsonValue(m_earliest, json[QString("earliest")]);
    m_earliest_isSet = !json[QString("earliest")].isNull() && m_earliest_isValid;

    m_later_isValid = ::OpenAPI::fromJsonValue(m_later, json[QString("later")]);
    m_later_isSet = !json[QString("later")].isNull() && m_later_isValid;

    m_latest_isValid = ::OpenAPI::fromJsonValue(m_latest, json[QString("latest")]);
    m_latest_isSet = !json[QString("latest")].isNull() && m_latest_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::asJsonObject() const {
    QJsonObject obj;
    if (m_earlier.isSet()) {
        obj.insert(QString("earlier"), ::OpenAPI::toJsonValue(m_earlier));
    }
    if (m_earliest.isSet()) {
        obj.insert(QString("earliest"), ::OpenAPI::toJsonValue(m_earliest));
    }
    if (m_later.isSet()) {
        obj.insert(QString("later"), ::OpenAPI::toJsonValue(m_later));
    }
    if (m_latest.isSet()) {
        obj.insert(QString("latest"), ::OpenAPI::toJsonValue(m_latest));
    }
    return obj;
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustment OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::getEarlier() const {
    return m_earlier;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::setEarlier(const OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustment &earlier) {
    m_earlier = earlier;
    m_earlier_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::is_earlier_Set() const{
    return m_earlier_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::is_earlier_Valid() const{
    return m_earlier_isValid;
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustment OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::getEarliest() const {
    return m_earliest;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::setEarliest(const OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustment &earliest) {
    m_earliest = earliest;
    m_earliest_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::is_earliest_Set() const{
    return m_earliest_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::is_earliest_Valid() const{
    return m_earliest_isValid;
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustment OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::getLater() const {
    return m_later;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::setLater(const OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustment &later) {
    m_later = later;
    m_later_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::is_later_Set() const{
    return m_later_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::is_later_Valid() const{
    return m_later_isValid;
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustment OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::getLatest() const {
    return m_latest;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::setLatest(const OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustment &latest) {
    m_latest = latest;
    m_latest_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::is_latest_Set() const{
    return m_latest_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::is_latest_Valid() const{
    return m_latest_isValid;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_earlier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_earliest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_later.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_TimeAdjustments::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
