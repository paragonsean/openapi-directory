/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Fares_FareBounds.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Fares_FareBounds::OAITfl_Api_Presentation_Entities_Fares_FareBounds(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Fares_FareBounds::OAITfl_Api_Presentation_Entities_Fares_FareBounds() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Fares_FareBounds::~OAITfl_Api_Presentation_Entities_Fares_FareBounds() {}

void OAITfl_Api_Presentation_Entities_Fares_FareBounds::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_display_order_isSet = false;
    m_display_order_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_popular_fare_isSet = false;
    m_is_popular_fare_isValid = false;

    m_is_popular_travel_card_isSet = false;
    m_is_popular_travel_card_isValid = false;

    m_is_tour_isSet = false;
    m_is_tour_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_route_code_isSet = false;
    m_route_code_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_via_isSet = false;
    m_via_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Fares_FareBounds::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Fares_FareBounds::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_display_order_isValid = ::OpenAPI::fromJsonValue(m_display_order, json[QString("displayOrder")]);
    m_display_order_isSet = !json[QString("displayOrder")].isNull() && m_display_order_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_popular_fare_isValid = ::OpenAPI::fromJsonValue(m_is_popular_fare, json[QString("isPopularFare")]);
    m_is_popular_fare_isSet = !json[QString("isPopularFare")].isNull() && m_is_popular_fare_isValid;

    m_is_popular_travel_card_isValid = ::OpenAPI::fromJsonValue(m_is_popular_travel_card, json[QString("isPopularTravelCard")]);
    m_is_popular_travel_card_isSet = !json[QString("isPopularTravelCard")].isNull() && m_is_popular_travel_card_isValid;

    m_is_tour_isValid = ::OpenAPI::fromJsonValue(m_is_tour, json[QString("isTour")]);
    m_is_tour_isSet = !json[QString("isTour")].isNull() && m_is_tour_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_route_code_isValid = ::OpenAPI::fromJsonValue(m_route_code, json[QString("routeCode")]);
    m_route_code_isSet = !json[QString("routeCode")].isNull() && m_route_code_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_via_isValid = ::OpenAPI::fromJsonValue(m_via, json[QString("via")]);
    m_via_isSet = !json[QString("via")].isNull() && m_via_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareBounds::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Fares_FareBounds::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_display_order_isSet) {
        obj.insert(QString("displayOrder"), ::OpenAPI::toJsonValue(m_display_order));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_popular_fare_isSet) {
        obj.insert(QString("isPopularFare"), ::OpenAPI::toJsonValue(m_is_popular_fare));
    }
    if (m_is_popular_travel_card_isSet) {
        obj.insert(QString("isPopularTravelCard"), ::OpenAPI::toJsonValue(m_is_popular_travel_card));
    }
    if (m_is_tour_isSet) {
        obj.insert(QString("isTour"), ::OpenAPI::toJsonValue(m_is_tour));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_route_code_isSet) {
        obj.insert(QString("routeCode"), ::OpenAPI::toJsonValue(m_route_code));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_via_isSet) {
        obj.insert(QString("via"), ::OpenAPI::toJsonValue(m_via));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareBounds::getDescription() const {
    return m_description;
}
void OAITfl_Api_Presentation_Entities_Fares_FareBounds::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_description_Set() const{
    return m_description_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareBounds::getDisplayName() const {
    return m_display_name;
}
void OAITfl_Api_Presentation_Entities_Fares_FareBounds::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_Fares_FareBounds::getDisplayOrder() const {
    return m_display_order;
}
void OAITfl_Api_Presentation_Entities_Fares_FareBounds::setDisplayOrder(const qint32 &display_order) {
    m_display_order = display_order;
    m_display_order_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_display_order_Set() const{
    return m_display_order_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_display_order_Valid() const{
    return m_display_order_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareBounds::getFrom() const {
    return m_from;
}
void OAITfl_Api_Presentation_Entities_Fares_FareBounds::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_from_Set() const{
    return m_from_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_from_Valid() const{
    return m_from_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_Fares_FareBounds::getId() const {
    return m_id;
}
void OAITfl_Api_Presentation_Entities_Fares_FareBounds::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_id_Set() const{
    return m_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_id_Valid() const{
    return m_id_isValid;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::isIsPopularFare() const {
    return m_is_popular_fare;
}
void OAITfl_Api_Presentation_Entities_Fares_FareBounds::setIsPopularFare(const bool &is_popular_fare) {
    m_is_popular_fare = is_popular_fare;
    m_is_popular_fare_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_is_popular_fare_Set() const{
    return m_is_popular_fare_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_is_popular_fare_Valid() const{
    return m_is_popular_fare_isValid;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::isIsPopularTravelCard() const {
    return m_is_popular_travel_card;
}
void OAITfl_Api_Presentation_Entities_Fares_FareBounds::setIsPopularTravelCard(const bool &is_popular_travel_card) {
    m_is_popular_travel_card = is_popular_travel_card;
    m_is_popular_travel_card_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_is_popular_travel_card_Set() const{
    return m_is_popular_travel_card_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_is_popular_travel_card_Valid() const{
    return m_is_popular_travel_card_isValid;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::isIsTour() const {
    return m_is_tour;
}
void OAITfl_Api_Presentation_Entities_Fares_FareBounds::setIsTour(const bool &is_tour) {
    m_is_tour = is_tour;
    m_is_tour_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_is_tour_Set() const{
    return m_is_tour_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_is_tour_Valid() const{
    return m_is_tour_isValid;
}

QList<OAITfl_Api_Presentation_Entities_Message> OAITfl_Api_Presentation_Entities_Fares_FareBounds::getMessages() const {
    return m_messages;
}
void OAITfl_Api_Presentation_Entities_Fares_FareBounds::setMessages(const QList<OAITfl_Api_Presentation_Entities_Message> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_messages_Valid() const{
    return m_messages_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareBounds::getROperator() const {
    return m_r_operator;
}
void OAITfl_Api_Presentation_Entities_Fares_FareBounds::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareBounds::getRouteCode() const {
    return m_route_code;
}
void OAITfl_Api_Presentation_Entities_Fares_FareBounds::setRouteCode(const QString &route_code) {
    m_route_code = route_code;
    m_route_code_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_route_code_Set() const{
    return m_route_code_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_route_code_Valid() const{
    return m_route_code_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareBounds::getTo() const {
    return m_to;
}
void OAITfl_Api_Presentation_Entities_Fares_FareBounds::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_to_Set() const{
    return m_to_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_to_Valid() const{
    return m_to_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareBounds::getVia() const {
    return m_via;
}
void OAITfl_Api_Presentation_Entities_Fares_FareBounds::setVia(const QString &via) {
    m_via = via;
    m_via_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_via_Set() const{
    return m_via_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::is_via_Valid() const{
    return m_via_isValid;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_popular_fare_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_popular_travel_card_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_via_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareBounds::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
