/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::~OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData() {}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::initializeModel() {

    m_destination_id_isSet = false;
    m_destination_id_isValid = false;

    m_destination_number_of_bikes_isSet = false;
    m_destination_number_of_bikes_isValid = false;

    m_destination_number_of_empty_slots_isSet = false;
    m_destination_number_of_empty_slots_isValid = false;

    m_origin_id_isSet = false;
    m_origin_id_isValid = false;

    m_origin_number_of_bikes_isSet = false;
    m_origin_number_of_bikes_isValid = false;

    m_origin_number_of_empty_slots_isSet = false;
    m_origin_number_of_empty_slots_isValid = false;
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::fromJsonObject(QJsonObject json) {

    m_destination_id_isValid = ::OpenAPI::fromJsonValue(m_destination_id, json[QString("destinationId")]);
    m_destination_id_isSet = !json[QString("destinationId")].isNull() && m_destination_id_isValid;

    m_destination_number_of_bikes_isValid = ::OpenAPI::fromJsonValue(m_destination_number_of_bikes, json[QString("destinationNumberOfBikes")]);
    m_destination_number_of_bikes_isSet = !json[QString("destinationNumberOfBikes")].isNull() && m_destination_number_of_bikes_isValid;

    m_destination_number_of_empty_slots_isValid = ::OpenAPI::fromJsonValue(m_destination_number_of_empty_slots, json[QString("destinationNumberOfEmptySlots")]);
    m_destination_number_of_empty_slots_isSet = !json[QString("destinationNumberOfEmptySlots")].isNull() && m_destination_number_of_empty_slots_isValid;

    m_origin_id_isValid = ::OpenAPI::fromJsonValue(m_origin_id, json[QString("originId")]);
    m_origin_id_isSet = !json[QString("originId")].isNull() && m_origin_id_isValid;

    m_origin_number_of_bikes_isValid = ::OpenAPI::fromJsonValue(m_origin_number_of_bikes, json[QString("originNumberOfBikes")]);
    m_origin_number_of_bikes_isSet = !json[QString("originNumberOfBikes")].isNull() && m_origin_number_of_bikes_isValid;

    m_origin_number_of_empty_slots_isValid = ::OpenAPI::fromJsonValue(m_origin_number_of_empty_slots, json[QString("originNumberOfEmptySlots")]);
    m_origin_number_of_empty_slots_isSet = !json[QString("originNumberOfEmptySlots")].isNull() && m_origin_number_of_empty_slots_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_id_isSet) {
        obj.insert(QString("destinationId"), ::OpenAPI::toJsonValue(m_destination_id));
    }
    if (m_destination_number_of_bikes_isSet) {
        obj.insert(QString("destinationNumberOfBikes"), ::OpenAPI::toJsonValue(m_destination_number_of_bikes));
    }
    if (m_destination_number_of_empty_slots_isSet) {
        obj.insert(QString("destinationNumberOfEmptySlots"), ::OpenAPI::toJsonValue(m_destination_number_of_empty_slots));
    }
    if (m_origin_id_isSet) {
        obj.insert(QString("originId"), ::OpenAPI::toJsonValue(m_origin_id));
    }
    if (m_origin_number_of_bikes_isSet) {
        obj.insert(QString("originNumberOfBikes"), ::OpenAPI::toJsonValue(m_origin_number_of_bikes));
    }
    if (m_origin_number_of_empty_slots_isSet) {
        obj.insert(QString("originNumberOfEmptySlots"), ::OpenAPI::toJsonValue(m_origin_number_of_empty_slots));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::getDestinationId() const {
    return m_destination_id;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::setDestinationId(const QString &destination_id) {
    m_destination_id = destination_id;
    m_destination_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::is_destination_id_Set() const{
    return m_destination_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::is_destination_id_Valid() const{
    return m_destination_id_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::getDestinationNumberOfBikes() const {
    return m_destination_number_of_bikes;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::setDestinationNumberOfBikes(const qint32 &destination_number_of_bikes) {
    m_destination_number_of_bikes = destination_number_of_bikes;
    m_destination_number_of_bikes_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::is_destination_number_of_bikes_Set() const{
    return m_destination_number_of_bikes_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::is_destination_number_of_bikes_Valid() const{
    return m_destination_number_of_bikes_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::getDestinationNumberOfEmptySlots() const {
    return m_destination_number_of_empty_slots;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::setDestinationNumberOfEmptySlots(const qint32 &destination_number_of_empty_slots) {
    m_destination_number_of_empty_slots = destination_number_of_empty_slots;
    m_destination_number_of_empty_slots_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::is_destination_number_of_empty_slots_Set() const{
    return m_destination_number_of_empty_slots_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::is_destination_number_of_empty_slots_Valid() const{
    return m_destination_number_of_empty_slots_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::getOriginId() const {
    return m_origin_id;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::setOriginId(const QString &origin_id) {
    m_origin_id = origin_id;
    m_origin_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::is_origin_id_Set() const{
    return m_origin_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::is_origin_id_Valid() const{
    return m_origin_id_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::getOriginNumberOfBikes() const {
    return m_origin_number_of_bikes;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::setOriginNumberOfBikes(const qint32 &origin_number_of_bikes) {
    m_origin_number_of_bikes = origin_number_of_bikes;
    m_origin_number_of_bikes_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::is_origin_number_of_bikes_Set() const{
    return m_origin_number_of_bikes_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::is_origin_number_of_bikes_Valid() const{
    return m_origin_number_of_bikes_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::getOriginNumberOfEmptySlots() const {
    return m_origin_number_of_empty_slots;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::setOriginNumberOfEmptySlots(const qint32 &origin_number_of_empty_slots) {
    m_origin_number_of_empty_slots = origin_number_of_empty_slots;
    m_origin_number_of_empty_slots_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::is_origin_number_of_empty_slots_Set() const{
    return m_origin_number_of_empty_slots_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::is_origin_number_of_empty_slots_Valid() const{
    return m_origin_number_of_empty_slots_isValid;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_number_of_bikes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_number_of_empty_slots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_number_of_bikes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_number_of_empty_slots_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
