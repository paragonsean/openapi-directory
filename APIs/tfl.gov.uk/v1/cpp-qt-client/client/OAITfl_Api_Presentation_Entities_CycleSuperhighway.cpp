/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_CycleSuperhighway.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_CycleSuperhighway::OAITfl_Api_Presentation_Entities_CycleSuperhighway(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_CycleSuperhighway::OAITfl_Api_Presentation_Entities_CycleSuperhighway() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_CycleSuperhighway::~OAITfl_Api_Presentation_Entities_CycleSuperhighway() {}

void OAITfl_Api_Presentation_Entities_CycleSuperhighway::initializeModel() {

    m_geography_isSet = false;
    m_geography_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_label_short_isSet = false;
    m_label_short_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_route_type_isSet = false;
    m_route_type_isValid = false;

    m_segmented_isSet = false;
    m_segmented_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITfl_Api_Presentation_Entities_CycleSuperhighway::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_CycleSuperhighway::fromJsonObject(QJsonObject json) {

    m_geography_isValid = ::OpenAPI::fromJsonValue(m_geography, json[QString("geography")]);
    m_geography_isSet = !json[QString("geography")].isNull() && m_geography_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_label_short_isValid = ::OpenAPI::fromJsonValue(m_label_short, json[QString("labelShort")]);
    m_label_short_isSet = !json[QString("labelShort")].isNull() && m_label_short_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_route_type_isValid = ::OpenAPI::fromJsonValue(m_route_type, json[QString("routeType")]);
    m_route_type_isSet = !json[QString("routeType")].isNull() && m_route_type_isValid;

    m_segmented_isValid = ::OpenAPI::fromJsonValue(m_segmented, json[QString("segmented")]);
    m_segmented_isSet = !json[QString("segmented")].isNull() && m_segmented_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAITfl_Api_Presentation_Entities_CycleSuperhighway::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_CycleSuperhighway::asJsonObject() const {
    QJsonObject obj;
    if (m_geography.isSet()) {
        obj.insert(QString("geography"), ::OpenAPI::toJsonValue(m_geography));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_label_short_isSet) {
        obj.insert(QString("labelShort"), ::OpenAPI::toJsonValue(m_label_short));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_route_type_isSet) {
        obj.insert(QString("routeType"), ::OpenAPI::toJsonValue(m_route_type));
    }
    if (m_segmented_isSet) {
        obj.insert(QString("segmented"), ::OpenAPI::toJsonValue(m_segmented));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAISystem_Data_Spatial_DbGeography OAITfl_Api_Presentation_Entities_CycleSuperhighway::getGeography() const {
    return m_geography;
}
void OAITfl_Api_Presentation_Entities_CycleSuperhighway::setGeography(const OAISystem_Data_Spatial_DbGeography &geography) {
    m_geography = geography;
    m_geography_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::is_geography_Set() const{
    return m_geography_isSet;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::is_geography_Valid() const{
    return m_geography_isValid;
}

QString OAITfl_Api_Presentation_Entities_CycleSuperhighway::getId() const {
    return m_id;
}
void OAITfl_Api_Presentation_Entities_CycleSuperhighway::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::is_id_Set() const{
    return m_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_CycleSuperhighway::getLabel() const {
    return m_label;
}
void OAITfl_Api_Presentation_Entities_CycleSuperhighway::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::is_label_Set() const{
    return m_label_isSet;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::is_label_Valid() const{
    return m_label_isValid;
}

QString OAITfl_Api_Presentation_Entities_CycleSuperhighway::getLabelShort() const {
    return m_label_short;
}
void OAITfl_Api_Presentation_Entities_CycleSuperhighway::setLabelShort(const QString &label_short) {
    m_label_short = label_short;
    m_label_short_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::is_label_short_Set() const{
    return m_label_short_isSet;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::is_label_short_Valid() const{
    return m_label_short_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_CycleSuperhighway::getModified() const {
    return m_modified;
}
void OAITfl_Api_Presentation_Entities_CycleSuperhighway::setModified(const QDateTime &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::is_modified_Valid() const{
    return m_modified_isValid;
}

QString OAITfl_Api_Presentation_Entities_CycleSuperhighway::getRouteType() const {
    return m_route_type;
}
void OAITfl_Api_Presentation_Entities_CycleSuperhighway::setRouteType(const QString &route_type) {
    m_route_type = route_type;
    m_route_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::is_route_type_Set() const{
    return m_route_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::is_route_type_Valid() const{
    return m_route_type_isValid;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::isSegmented() const {
    return m_segmented;
}
void OAITfl_Api_Presentation_Entities_CycleSuperhighway::setSegmented(const bool &segmented) {
    m_segmented = segmented;
    m_segmented_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::is_segmented_Set() const{
    return m_segmented_isSet;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::is_segmented_Valid() const{
    return m_segmented_isValid;
}

QString OAITfl_Api_Presentation_Entities_CycleSuperhighway::getStatus() const {
    return m_status;
}
void OAITfl_Api_Presentation_Entities_CycleSuperhighway::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::is_status_Set() const{
    return m_status_isSet;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_geography.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_short_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmented_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_CycleSuperhighway::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
