/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_TimetableResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_TimetableResponse::OAITfl_Api_Presentation_Entities_TimetableResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_TimetableResponse::OAITfl_Api_Presentation_Entities_TimetableResponse() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_TimetableResponse::~OAITfl_Api_Presentation_Entities_TimetableResponse() {}

void OAITfl_Api_Presentation_Entities_TimetableResponse::initializeModel() {

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_disambiguation_isSet = false;
    m_disambiguation_isValid = false;

    m_line_id_isSet = false;
    m_line_id_isValid = false;

    m_line_name_isSet = false;
    m_line_name_isValid = false;

    m_pdf_url_isSet = false;
    m_pdf_url_isValid = false;

    m_stations_isSet = false;
    m_stations_isValid = false;

    m_status_error_message_isSet = false;
    m_status_error_message_isValid = false;

    m_stops_isSet = false;
    m_stops_isValid = false;

    m_timetable_isSet = false;
    m_timetable_isValid = false;
}

void OAITfl_Api_Presentation_Entities_TimetableResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_TimetableResponse::fromJsonObject(QJsonObject json) {

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_disambiguation_isValid = ::OpenAPI::fromJsonValue(m_disambiguation, json[QString("disambiguation")]);
    m_disambiguation_isSet = !json[QString("disambiguation")].isNull() && m_disambiguation_isValid;

    m_line_id_isValid = ::OpenAPI::fromJsonValue(m_line_id, json[QString("lineId")]);
    m_line_id_isSet = !json[QString("lineId")].isNull() && m_line_id_isValid;

    m_line_name_isValid = ::OpenAPI::fromJsonValue(m_line_name, json[QString("lineName")]);
    m_line_name_isSet = !json[QString("lineName")].isNull() && m_line_name_isValid;

    m_pdf_url_isValid = ::OpenAPI::fromJsonValue(m_pdf_url, json[QString("pdfUrl")]);
    m_pdf_url_isSet = !json[QString("pdfUrl")].isNull() && m_pdf_url_isValid;

    m_stations_isValid = ::OpenAPI::fromJsonValue(m_stations, json[QString("stations")]);
    m_stations_isSet = !json[QString("stations")].isNull() && m_stations_isValid;

    m_status_error_message_isValid = ::OpenAPI::fromJsonValue(m_status_error_message, json[QString("statusErrorMessage")]);
    m_status_error_message_isSet = !json[QString("statusErrorMessage")].isNull() && m_status_error_message_isValid;

    m_stops_isValid = ::OpenAPI::fromJsonValue(m_stops, json[QString("stops")]);
    m_stops_isSet = !json[QString("stops")].isNull() && m_stops_isValid;

    m_timetable_isValid = ::OpenAPI::fromJsonValue(m_timetable, json[QString("timetable")]);
    m_timetable_isSet = !json[QString("timetable")].isNull() && m_timetable_isValid;
}

QString OAITfl_Api_Presentation_Entities_TimetableResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_TimetableResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_disambiguation.isSet()) {
        obj.insert(QString("disambiguation"), ::OpenAPI::toJsonValue(m_disambiguation));
    }
    if (m_line_id_isSet) {
        obj.insert(QString("lineId"), ::OpenAPI::toJsonValue(m_line_id));
    }
    if (m_line_name_isSet) {
        obj.insert(QString("lineName"), ::OpenAPI::toJsonValue(m_line_name));
    }
    if (m_pdf_url_isSet) {
        obj.insert(QString("pdfUrl"), ::OpenAPI::toJsonValue(m_pdf_url));
    }
    if (m_stations.size() > 0) {
        obj.insert(QString("stations"), ::OpenAPI::toJsonValue(m_stations));
    }
    if (m_status_error_message_isSet) {
        obj.insert(QString("statusErrorMessage"), ::OpenAPI::toJsonValue(m_status_error_message));
    }
    if (m_stops.size() > 0) {
        obj.insert(QString("stops"), ::OpenAPI::toJsonValue(m_stops));
    }
    if (m_timetable.isSet()) {
        obj.insert(QString("timetable"), ::OpenAPI::toJsonValue(m_timetable));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_TimetableResponse::getDirection() const {
    return m_direction;
}
void OAITfl_Api_Presentation_Entities_TimetableResponse::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::is_direction_Valid() const{
    return m_direction_isValid;
}

OAITfl_Api_Presentation_Entities_Timetables_Disambiguation OAITfl_Api_Presentation_Entities_TimetableResponse::getDisambiguation() const {
    return m_disambiguation;
}
void OAITfl_Api_Presentation_Entities_TimetableResponse::setDisambiguation(const OAITfl_Api_Presentation_Entities_Timetables_Disambiguation &disambiguation) {
    m_disambiguation = disambiguation;
    m_disambiguation_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::is_disambiguation_Set() const{
    return m_disambiguation_isSet;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::is_disambiguation_Valid() const{
    return m_disambiguation_isValid;
}

QString OAITfl_Api_Presentation_Entities_TimetableResponse::getLineId() const {
    return m_line_id;
}
void OAITfl_Api_Presentation_Entities_TimetableResponse::setLineId(const QString &line_id) {
    m_line_id = line_id;
    m_line_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::is_line_id_Set() const{
    return m_line_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::is_line_id_Valid() const{
    return m_line_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_TimetableResponse::getLineName() const {
    return m_line_name;
}
void OAITfl_Api_Presentation_Entities_TimetableResponse::setLineName(const QString &line_name) {
    m_line_name = line_name;
    m_line_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::is_line_name_Set() const{
    return m_line_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::is_line_name_Valid() const{
    return m_line_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_TimetableResponse::getPdfUrl() const {
    return m_pdf_url;
}
void OAITfl_Api_Presentation_Entities_TimetableResponse::setPdfUrl(const QString &pdf_url) {
    m_pdf_url = pdf_url;
    m_pdf_url_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::is_pdf_url_Set() const{
    return m_pdf_url_isSet;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::is_pdf_url_Valid() const{
    return m_pdf_url_isValid;
}

QList<OAITfl_Api_Presentation_Entities_MatchedStop> OAITfl_Api_Presentation_Entities_TimetableResponse::getStations() const {
    return m_stations;
}
void OAITfl_Api_Presentation_Entities_TimetableResponse::setStations(const QList<OAITfl_Api_Presentation_Entities_MatchedStop> &stations) {
    m_stations = stations;
    m_stations_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::is_stations_Set() const{
    return m_stations_isSet;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::is_stations_Valid() const{
    return m_stations_isValid;
}

QString OAITfl_Api_Presentation_Entities_TimetableResponse::getStatusErrorMessage() const {
    return m_status_error_message;
}
void OAITfl_Api_Presentation_Entities_TimetableResponse::setStatusErrorMessage(const QString &status_error_message) {
    m_status_error_message = status_error_message;
    m_status_error_message_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::is_status_error_message_Set() const{
    return m_status_error_message_isSet;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::is_status_error_message_Valid() const{
    return m_status_error_message_isValid;
}

QList<OAITfl_Api_Presentation_Entities_MatchedStop> OAITfl_Api_Presentation_Entities_TimetableResponse::getStops() const {
    return m_stops;
}
void OAITfl_Api_Presentation_Entities_TimetableResponse::setStops(const QList<OAITfl_Api_Presentation_Entities_MatchedStop> &stops) {
    m_stops = stops;
    m_stops_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::is_stops_Set() const{
    return m_stops_isSet;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::is_stops_Valid() const{
    return m_stops_isValid;
}

OAITfl_Api_Presentation_Entities_Timetable OAITfl_Api_Presentation_Entities_TimetableResponse::getTimetable() const {
    return m_timetable;
}
void OAITfl_Api_Presentation_Entities_TimetableResponse::setTimetable(const OAITfl_Api_Presentation_Entities_Timetable &timetable) {
    m_timetable = timetable;
    m_timetable_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::is_timetable_Set() const{
    return m_timetable_isSet;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::is_timetable_Valid() const{
    return m_timetable_isValid;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disambiguation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stops.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timetable.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_TimetableResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
