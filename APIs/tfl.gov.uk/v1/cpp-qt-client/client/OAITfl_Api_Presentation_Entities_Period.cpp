/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Period.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Period::OAITfl_Api_Presentation_Entities_Period(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Period::OAITfl_Api_Presentation_Entities_Period() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Period::~OAITfl_Api_Presentation_Entities_Period() {}

void OAITfl_Api_Presentation_Entities_Period::initializeModel() {

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_from_time_isSet = false;
    m_from_time_isValid = false;

    m_to_time_isSet = false;
    m_to_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Period::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Period::fromJsonObject(QJsonObject json) {

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_from_time_isValid = ::OpenAPI::fromJsonValue(m_from_time, json[QString("fromTime")]);
    m_from_time_isSet = !json[QString("fromTime")].isNull() && m_from_time_isValid;

    m_to_time_isValid = ::OpenAPI::fromJsonValue(m_to_time, json[QString("toTime")]);
    m_to_time_isSet = !json[QString("toTime")].isNull() && m_to_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_Period::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Period::asJsonObject() const {
    QJsonObject obj;
    if (m_frequency.isSet()) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_from_time.isSet()) {
        obj.insert(QString("fromTime"), ::OpenAPI::toJsonValue(m_from_time));
    }
    if (m_to_time.isSet()) {
        obj.insert(QString("toTime"), ::OpenAPI::toJsonValue(m_to_time));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAITfl_Api_Presentation_Entities_ServiceFrequency OAITfl_Api_Presentation_Entities_Period::getFrequency() const {
    return m_frequency;
}
void OAITfl_Api_Presentation_Entities_Period::setFrequency(const OAITfl_Api_Presentation_Entities_ServiceFrequency &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Period::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAITfl_Api_Presentation_Entities_Period::is_frequency_Valid() const{
    return m_frequency_isValid;
}

OAITfl_Api_Presentation_Entities_TwentyFourHourClockTime OAITfl_Api_Presentation_Entities_Period::getFromTime() const {
    return m_from_time;
}
void OAITfl_Api_Presentation_Entities_Period::setFromTime(const OAITfl_Api_Presentation_Entities_TwentyFourHourClockTime &from_time) {
    m_from_time = from_time;
    m_from_time_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Period::is_from_time_Set() const{
    return m_from_time_isSet;
}

bool OAITfl_Api_Presentation_Entities_Period::is_from_time_Valid() const{
    return m_from_time_isValid;
}

OAITfl_Api_Presentation_Entities_TwentyFourHourClockTime OAITfl_Api_Presentation_Entities_Period::getToTime() const {
    return m_to_time;
}
void OAITfl_Api_Presentation_Entities_Period::setToTime(const OAITfl_Api_Presentation_Entities_TwentyFourHourClockTime &to_time) {
    m_to_time = to_time;
    m_to_time_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Period::is_to_time_Set() const{
    return m_to_time_isSet;
}

bool OAITfl_Api_Presentation_Entities_Period::is_to_time_Valid() const{
    return m_to_time_isValid;
}

QString OAITfl_Api_Presentation_Entities_Period::getType() const {
    return m_type;
}
void OAITfl_Api_Presentation_Entities_Period::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Period::is_type_Set() const{
    return m_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_Period::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITfl_Api_Presentation_Entities_Period::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Period::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
