/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Fares_Fare.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Fares_Fare::OAITfl_Api_Presentation_Entities_Fares_Fare(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Fares_Fare::OAITfl_Api_Presentation_Entities_Fares_Fare() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Fares_Fare::~OAITfl_Api_Presentation_Entities_Fares_Fare() {}

void OAITfl_Api_Presentation_Entities_Fares_Fare::initializeModel() {

    m_cap_isSet = false;
    m_cap_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_passenger_type_isSet = false;
    m_passenger_type_isValid = false;

    m_ticket_time_isSet = false;
    m_ticket_time_isValid = false;

    m_ticket_type_isSet = false;
    m_ticket_type_isValid = false;

    m_valid_from_isSet = false;
    m_valid_from_isValid = false;

    m_valid_until_isSet = false;
    m_valid_until_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Fares_Fare::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Fares_Fare::fromJsonObject(QJsonObject json) {

    m_cap_isValid = ::OpenAPI::fromJsonValue(m_cap, json[QString("cap")]);
    m_cap_isSet = !json[QString("cap")].isNull() && m_cap_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_passenger_type_isValid = ::OpenAPI::fromJsonValue(m_passenger_type, json[QString("passengerType")]);
    m_passenger_type_isSet = !json[QString("passengerType")].isNull() && m_passenger_type_isValid;

    m_ticket_time_isValid = ::OpenAPI::fromJsonValue(m_ticket_time, json[QString("ticketTime")]);
    m_ticket_time_isSet = !json[QString("ticketTime")].isNull() && m_ticket_time_isValid;

    m_ticket_type_isValid = ::OpenAPI::fromJsonValue(m_ticket_type, json[QString("ticketType")]);
    m_ticket_type_isSet = !json[QString("ticketType")].isNull() && m_ticket_type_isValid;

    m_valid_from_isValid = ::OpenAPI::fromJsonValue(m_valid_from, json[QString("validFrom")]);
    m_valid_from_isSet = !json[QString("validFrom")].isNull() && m_valid_from_isValid;

    m_valid_until_isValid = ::OpenAPI::fromJsonValue(m_valid_until, json[QString("validUntil")]);
    m_valid_until_isSet = !json[QString("validUntil")].isNull() && m_valid_until_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Fare::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Fares_Fare::asJsonObject() const {
    QJsonObject obj;
    if (m_cap_isSet) {
        obj.insert(QString("cap"), ::OpenAPI::toJsonValue(m_cap));
    }
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_passenger_type_isSet) {
        obj.insert(QString("passengerType"), ::OpenAPI::toJsonValue(m_passenger_type));
    }
    if (m_ticket_time_isSet) {
        obj.insert(QString("ticketTime"), ::OpenAPI::toJsonValue(m_ticket_time));
    }
    if (m_ticket_type_isSet) {
        obj.insert(QString("ticketType"), ::OpenAPI::toJsonValue(m_ticket_type));
    }
    if (m_valid_from_isSet) {
        obj.insert(QString("validFrom"), ::OpenAPI::toJsonValue(m_valid_from));
    }
    if (m_valid_until_isSet) {
        obj.insert(QString("validUntil"), ::OpenAPI::toJsonValue(m_valid_until));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

double OAITfl_Api_Presentation_Entities_Fares_Fare::getCap() const {
    return m_cap;
}
void OAITfl_Api_Presentation_Entities_Fares_Fare::setCap(const double &cap) {
    m_cap = cap;
    m_cap_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_cap_Set() const{
    return m_cap_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_cap_Valid() const{
    return m_cap_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Fare::getCost() const {
    return m_cost;
}
void OAITfl_Api_Presentation_Entities_Fares_Fare::setCost(const QString &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_cost_Valid() const{
    return m_cost_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Fare::getDescription() const {
    return m_description;
}
void OAITfl_Api_Presentation_Entities_Fares_Fare::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_description_Set() const{
    return m_description_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_Fares_Fare::getId() const {
    return m_id;
}
void OAITfl_Api_Presentation_Entities_Fares_Fare::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_id_Set() const{
    return m_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Fare::getMode() const {
    return m_mode;
}
void OAITfl_Api_Presentation_Entities_Fares_Fare::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Fare::getPassengerType() const {
    return m_passenger_type;
}
void OAITfl_Api_Presentation_Entities_Fares_Fare::setPassengerType(const QString &passenger_type) {
    m_passenger_type = passenger_type;
    m_passenger_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_passenger_type_Set() const{
    return m_passenger_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_passenger_type_Valid() const{
    return m_passenger_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Fare::getTicketTime() const {
    return m_ticket_time;
}
void OAITfl_Api_Presentation_Entities_Fares_Fare::setTicketTime(const QString &ticket_time) {
    m_ticket_time = ticket_time;
    m_ticket_time_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_ticket_time_Set() const{
    return m_ticket_time_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_ticket_time_Valid() const{
    return m_ticket_time_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Fare::getTicketType() const {
    return m_ticket_type;
}
void OAITfl_Api_Presentation_Entities_Fares_Fare::setTicketType(const QString &ticket_type) {
    m_ticket_type = ticket_type;
    m_ticket_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_ticket_type_Set() const{
    return m_ticket_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_ticket_type_Valid() const{
    return m_ticket_type_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_Fares_Fare::getValidFrom() const {
    return m_valid_from;
}
void OAITfl_Api_Presentation_Entities_Fares_Fare::setValidFrom(const QDateTime &valid_from) {
    m_valid_from = valid_from;
    m_valid_from_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_valid_from_Set() const{
    return m_valid_from_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_valid_from_Valid() const{
    return m_valid_from_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_Fares_Fare::getValidUntil() const {
    return m_valid_until;
}
void OAITfl_Api_Presentation_Entities_Fares_Fare::setValidUntil(const QDateTime &valid_until) {
    m_valid_until = valid_until;
    m_valid_until_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_valid_until_Set() const{
    return m_valid_until_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_valid_until_Valid() const{
    return m_valid_until_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Fare::getZone() const {
    return m_zone;
}
void OAITfl_Api_Presentation_Entities_Fares_Fare::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passenger_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Fares_Fare::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
