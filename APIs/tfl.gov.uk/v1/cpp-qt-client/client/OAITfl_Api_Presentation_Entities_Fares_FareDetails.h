/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITfl_Api_Presentation_Entities_Fares_FareDetails.h
 *
 * 
 */

#ifndef OAITfl_Api_Presentation_Entities_Fares_FareDetails_H
#define OAITfl_Api_Presentation_Entities_Fares_FareDetails_H

#include <QJsonObject>

#include "OAITfl_Api_Presentation_Entities_Fares_Ticket.h"
#include "OAITfl_Api_Presentation_Entities_Message.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITfl_Api_Presentation_Entities_Message;
class OAITfl_Api_Presentation_Entities_Fares_Ticket;

class OAITfl_Api_Presentation_Entities_Fares_FareDetails : public OAIObject {
public:
    OAITfl_Api_Presentation_Entities_Fares_FareDetails();
    OAITfl_Api_Presentation_Entities_Fares_FareDetails(QString json);
    ~OAITfl_Api_Presentation_Entities_Fares_FareDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBoundsId() const;
    void setBoundsId(const qint32 &bounds_id);
    bool is_bounds_id_Set() const;
    bool is_bounds_id_Valid() const;

    bool isContactlessPaygOnlyFare() const;
    void setContactlessPaygOnlyFare(const bool &contactless_payg_only_fare);
    bool is_contactless_payg_only_fare_Set() const;
    bool is_contactless_payg_only_fare_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    qint32 getDisplayOrder() const;
    void setDisplayOrder(const qint32 &display_order);
    bool is_display_order_Set() const;
    bool is_display_order_Valid() const;

    QDateTime getEndDate() const;
    void setEndDate(const QDateTime &end_date);
    bool is_end_date_Set() const;
    bool is_end_date_Valid() const;

    QString getFrom() const;
    void setFrom(const QString &from);
    bool is_from_Set() const;
    bool is_from_Valid() const;

    QString getFromStation() const;
    void setFromStation(const QString &from_station);
    bool is_from_station_Set() const;
    bool is_from_station_Valid() const;

    bool isIsTour() const;
    void setIsTour(const bool &is_tour);
    bool is_is_tour_Set() const;
    bool is_is_tour_Valid() const;

    QList<OAITfl_Api_Presentation_Entities_Message> getMessages() const;
    void setMessages(const QList<OAITfl_Api_Presentation_Entities_Message> &messages);
    bool is_messages_Set() const;
    bool is_messages_Valid() const;

    QString getMode() const;
    void setMode(const QString &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    QString getROperator() const;
    void setROperator(const QString &r_operator);
    bool is_r_operator_Set() const;
    bool is_r_operator_Valid() const;

    QString getPassengerType() const;
    void setPassengerType(const QString &passenger_type);
    bool is_passenger_type_Set() const;
    bool is_passenger_type_Valid() const;

    QString getRouteCode() const;
    void setRouteCode(const QString &route_code);
    bool is_route_code_Set() const;
    bool is_route_code_Valid() const;

    QString getRouteDescription() const;
    void setRouteDescription(const QString &route_description);
    bool is_route_description_Set() const;
    bool is_route_description_Valid() const;

    bool isSpecialFare() const;
    void setSpecialFare(const bool &special_fare);
    bool is_special_fare_Set() const;
    bool is_special_fare_Valid() const;

    QDateTime getStartDate() const;
    void setStartDate(const QDateTime &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    bool isThroughFare() const;
    void setThroughFare(const bool &through_fare);
    bool is_through_fare_Set() const;
    bool is_through_fare_Valid() const;

    QList<OAITfl_Api_Presentation_Entities_Fares_Ticket> getTicketsAvailable() const;
    void setTicketsAvailable(const QList<OAITfl_Api_Presentation_Entities_Fares_Ticket> &tickets_available);
    bool is_tickets_available_Set() const;
    bool is_tickets_available_Valid() const;

    QString getTo() const;
    void setTo(const QString &to);
    bool is_to_Set() const;
    bool is_to_Valid() const;

    QString getToStation() const;
    void setToStation(const QString &to_station);
    bool is_to_station_Set() const;
    bool is_to_station_Valid() const;

    QString getValidatorInformation() const;
    void setValidatorInformation(const QString &validator_information);
    bool is_validator_information_Set() const;
    bool is_validator_information_Valid() const;

    QString getVia() const;
    void setVia(const QString &via);
    bool is_via_Set() const;
    bool is_via_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bounds_id;
    bool m_bounds_id_isSet;
    bool m_bounds_id_isValid;

    bool m_contactless_payg_only_fare;
    bool m_contactless_payg_only_fare_isSet;
    bool m_contactless_payg_only_fare_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    qint32 m_display_order;
    bool m_display_order_isSet;
    bool m_display_order_isValid;

    QDateTime m_end_date;
    bool m_end_date_isSet;
    bool m_end_date_isValid;

    QString m_from;
    bool m_from_isSet;
    bool m_from_isValid;

    QString m_from_station;
    bool m_from_station_isSet;
    bool m_from_station_isValid;

    bool m_is_tour;
    bool m_is_tour_isSet;
    bool m_is_tour_isValid;

    QList<OAITfl_Api_Presentation_Entities_Message> m_messages;
    bool m_messages_isSet;
    bool m_messages_isValid;

    QString m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    QString m_r_operator;
    bool m_r_operator_isSet;
    bool m_r_operator_isValid;

    QString m_passenger_type;
    bool m_passenger_type_isSet;
    bool m_passenger_type_isValid;

    QString m_route_code;
    bool m_route_code_isSet;
    bool m_route_code_isValid;

    QString m_route_description;
    bool m_route_description_isSet;
    bool m_route_description_isValid;

    bool m_special_fare;
    bool m_special_fare_isSet;
    bool m_special_fare_isValid;

    QDateTime m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;

    bool m_through_fare;
    bool m_through_fare_isSet;
    bool m_through_fare_isValid;

    QList<OAITfl_Api_Presentation_Entities_Fares_Ticket> m_tickets_available;
    bool m_tickets_available_isSet;
    bool m_tickets_available_isValid;

    QString m_to;
    bool m_to_isSet;
    bool m_to_isValid;

    QString m_to_station;
    bool m_to_station_isSet;
    bool m_to_station_isValid;

    QString m_validator_information;
    bool m_validator_information_isSet;
    bool m_validator_information_isValid;

    QString m_via;
    bool m_via_isSet;
    bool m_via_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITfl_Api_Presentation_Entities_Fares_FareDetails)

#endif // OAITfl_Api_Presentation_Entities_Fares_FareDetails_H
