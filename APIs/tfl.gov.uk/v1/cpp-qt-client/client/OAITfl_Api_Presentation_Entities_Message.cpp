/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Message.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Message::OAITfl_Api_Presentation_Entities_Message(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Message::OAITfl_Api_Presentation_Entities_Message() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Message::~OAITfl_Api_Presentation_Entities_Message() {}

void OAITfl_Api_Presentation_Entities_Message::initializeModel() {

    m_bullet_order_isSet = false;
    m_bullet_order_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_link_text_isSet = false;
    m_link_text_isValid = false;

    m_message_text_isSet = false;
    m_message_text_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Message::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Message::fromJsonObject(QJsonObject json) {

    m_bullet_order_isValid = ::OpenAPI::fromJsonValue(m_bullet_order, json[QString("bulletOrder")]);
    m_bullet_order_isSet = !json[QString("bulletOrder")].isNull() && m_bullet_order_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_link_text_isValid = ::OpenAPI::fromJsonValue(m_link_text, json[QString("linkText")]);
    m_link_text_isSet = !json[QString("linkText")].isNull() && m_link_text_isValid;

    m_message_text_isValid = ::OpenAPI::fromJsonValue(m_message_text, json[QString("messageText")]);
    m_message_text_isSet = !json[QString("messageText")].isNull() && m_message_text_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAITfl_Api_Presentation_Entities_Message::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Message::asJsonObject() const {
    QJsonObject obj;
    if (m_bullet_order_isSet) {
        obj.insert(QString("bulletOrder"), ::OpenAPI::toJsonValue(m_bullet_order));
    }
    if (m_header_isSet) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_link_text_isSet) {
        obj.insert(QString("linkText"), ::OpenAPI::toJsonValue(m_link_text));
    }
    if (m_message_text_isSet) {
        obj.insert(QString("messageText"), ::OpenAPI::toJsonValue(m_message_text));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint32 OAITfl_Api_Presentation_Entities_Message::getBulletOrder() const {
    return m_bullet_order;
}
void OAITfl_Api_Presentation_Entities_Message::setBulletOrder(const qint32 &bullet_order) {
    m_bullet_order = bullet_order;
    m_bullet_order_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Message::is_bullet_order_Set() const{
    return m_bullet_order_isSet;
}

bool OAITfl_Api_Presentation_Entities_Message::is_bullet_order_Valid() const{
    return m_bullet_order_isValid;
}

bool OAITfl_Api_Presentation_Entities_Message::isHeader() const {
    return m_header;
}
void OAITfl_Api_Presentation_Entities_Message::setHeader(const bool &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Message::is_header_Set() const{
    return m_header_isSet;
}

bool OAITfl_Api_Presentation_Entities_Message::is_header_Valid() const{
    return m_header_isValid;
}

QString OAITfl_Api_Presentation_Entities_Message::getLinkText() const {
    return m_link_text;
}
void OAITfl_Api_Presentation_Entities_Message::setLinkText(const QString &link_text) {
    m_link_text = link_text;
    m_link_text_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Message::is_link_text_Set() const{
    return m_link_text_isSet;
}

bool OAITfl_Api_Presentation_Entities_Message::is_link_text_Valid() const{
    return m_link_text_isValid;
}

QString OAITfl_Api_Presentation_Entities_Message::getMessageText() const {
    return m_message_text;
}
void OAITfl_Api_Presentation_Entities_Message::setMessageText(const QString &message_text) {
    m_message_text = message_text;
    m_message_text_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Message::is_message_text_Set() const{
    return m_message_text_isSet;
}

bool OAITfl_Api_Presentation_Entities_Message::is_message_text_Valid() const{
    return m_message_text_isValid;
}

QString OAITfl_Api_Presentation_Entities_Message::getUrl() const {
    return m_url;
}
void OAITfl_Api_Presentation_Entities_Message::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Message::is_url_Set() const{
    return m_url_isSet;
}

bool OAITfl_Api_Presentation_Entities_Message::is_url_Valid() const{
    return m_url_isValid;
}

bool OAITfl_Api_Presentation_Entities_Message::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bullet_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Message::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
