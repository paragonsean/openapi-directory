/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::~OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult() {}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::initializeModel() {

    m_cycle_hire_docking_station_data_isSet = false;
    m_cycle_hire_docking_station_data_isValid = false;

    m_journey_vector_isSet = false;
    m_journey_vector_isValid = false;

    m_journeys_isSet = false;
    m_journeys_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_recommended_max_age_minutes_isSet = false;
    m_recommended_max_age_minutes_isValid = false;

    m_search_criteria_isSet = false;
    m_search_criteria_isValid = false;

    m_stop_messages_isSet = false;
    m_stop_messages_isValid = false;
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::fromJsonObject(QJsonObject json) {

    m_cycle_hire_docking_station_data_isValid = ::OpenAPI::fromJsonValue(m_cycle_hire_docking_station_data, json[QString("cycleHireDockingStationData")]);
    m_cycle_hire_docking_station_data_isSet = !json[QString("cycleHireDockingStationData")].isNull() && m_cycle_hire_docking_station_data_isValid;

    m_journey_vector_isValid = ::OpenAPI::fromJsonValue(m_journey_vector, json[QString("journeyVector")]);
    m_journey_vector_isSet = !json[QString("journeyVector")].isNull() && m_journey_vector_isValid;

    m_journeys_isValid = ::OpenAPI::fromJsonValue(m_journeys, json[QString("journeys")]);
    m_journeys_isSet = !json[QString("journeys")].isNull() && m_journeys_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_recommended_max_age_minutes_isValid = ::OpenAPI::fromJsonValue(m_recommended_max_age_minutes, json[QString("recommendedMaxAgeMinutes")]);
    m_recommended_max_age_minutes_isSet = !json[QString("recommendedMaxAgeMinutes")].isNull() && m_recommended_max_age_minutes_isValid;

    m_search_criteria_isValid = ::OpenAPI::fromJsonValue(m_search_criteria, json[QString("searchCriteria")]);
    m_search_criteria_isSet = !json[QString("searchCriteria")].isNull() && m_search_criteria_isValid;

    m_stop_messages_isValid = ::OpenAPI::fromJsonValue(m_stop_messages, json[QString("stopMessages")]);
    m_stop_messages_isSet = !json[QString("stopMessages")].isNull() && m_stop_messages_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::asJsonObject() const {
    QJsonObject obj;
    if (m_cycle_hire_docking_station_data.isSet()) {
        obj.insert(QString("cycleHireDockingStationData"), ::OpenAPI::toJsonValue(m_cycle_hire_docking_station_data));
    }
    if (m_journey_vector.isSet()) {
        obj.insert(QString("journeyVector"), ::OpenAPI::toJsonValue(m_journey_vector));
    }
    if (m_journeys.size() > 0) {
        obj.insert(QString("journeys"), ::OpenAPI::toJsonValue(m_journeys));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_recommended_max_age_minutes_isSet) {
        obj.insert(QString("recommendedMaxAgeMinutes"), ::OpenAPI::toJsonValue(m_recommended_max_age_minutes));
    }
    if (m_search_criteria.isSet()) {
        obj.insert(QString("searchCriteria"), ::OpenAPI::toJsonValue(m_search_criteria));
    }
    if (m_stop_messages.size() > 0) {
        obj.insert(QString("stopMessages"), ::OpenAPI::toJsonValue(m_stop_messages));
    }
    return obj;
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::getCycleHireDockingStationData() const {
    return m_cycle_hire_docking_station_data;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::setCycleHireDockingStationData(const OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData &cycle_hire_docking_station_data) {
    m_cycle_hire_docking_station_data = cycle_hire_docking_station_data;
    m_cycle_hire_docking_station_data_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::is_cycle_hire_docking_station_data_Set() const{
    return m_cycle_hire_docking_station_data_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::is_cycle_hire_docking_station_data_Valid() const{
    return m_cycle_hire_docking_station_data_isValid;
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::getJourneyVector() const {
    return m_journey_vector;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::setJourneyVector(const OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector &journey_vector) {
    m_journey_vector = journey_vector;
    m_journey_vector_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::is_journey_vector_Set() const{
    return m_journey_vector_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::is_journey_vector_Valid() const{
    return m_journey_vector_isValid;
}

QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey> OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::getJourneys() const {
    return m_journeys;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::setJourneys(const QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey> &journeys) {
    m_journeys = journeys;
    m_journeys_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::is_journeys_Set() const{
    return m_journeys_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::is_journeys_Valid() const{
    return m_journeys_isValid;
}

QList<OAITfl_Api_Presentation_Entities_Line> OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::getLines() const {
    return m_lines;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::setLines(const QList<OAITfl_Api_Presentation_Entities_Line> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::is_lines_Valid() const{
    return m_lines_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::getRecommendedMaxAgeMinutes() const {
    return m_recommended_max_age_minutes;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::setRecommendedMaxAgeMinutes(const qint32 &recommended_max_age_minutes) {
    m_recommended_max_age_minutes = recommended_max_age_minutes;
    m_recommended_max_age_minutes_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::is_recommended_max_age_minutes_Set() const{
    return m_recommended_max_age_minutes_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::is_recommended_max_age_minutes_Valid() const{
    return m_recommended_max_age_minutes_isValid;
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::getSearchCriteria() const {
    return m_search_criteria;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::setSearchCriteria(const OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria &search_criteria) {
    m_search_criteria = search_criteria;
    m_search_criteria_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::is_search_criteria_Set() const{
    return m_search_criteria_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::is_search_criteria_Valid() const{
    return m_search_criteria_isValid;
}

QList<QString> OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::getStopMessages() const {
    return m_stop_messages;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::setStopMessages(const QList<QString> &stop_messages) {
    m_stop_messages = stop_messages;
    m_stop_messages_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::is_stop_messages_Set() const{
    return m_stop_messages_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::is_stop_messages_Valid() const{
    return m_stop_messages_isValid;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cycle_hire_docking_station_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_journey_vector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_journeys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_max_age_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
