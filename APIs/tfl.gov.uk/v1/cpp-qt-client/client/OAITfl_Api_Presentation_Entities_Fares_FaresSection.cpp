/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Fares_FaresSection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Fares_FaresSection::OAITfl_Api_Presentation_Entities_Fares_FaresSection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Fares_FaresSection::OAITfl_Api_Presentation_Entities_Fares_FaresSection() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Fares_FaresSection::~OAITfl_Api_Presentation_Entities_Fares_FaresSection() {}

void OAITfl_Api_Presentation_Entities_Fares_FaresSection::initializeModel() {

    m_header_isSet = false;
    m_header_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_journey_isSet = false;
    m_journey_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Fares_FaresSection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Fares_FaresSection::fromJsonObject(QJsonObject json) {

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_journey_isValid = ::OpenAPI::fromJsonValue(m_journey, json[QString("journey")]);
    m_journey_isSet = !json[QString("journey")].isNull() && m_journey_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FaresSection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Fares_FaresSection::asJsonObject() const {
    QJsonObject obj;
    if (m_header_isSet) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_journey.isSet()) {
        obj.insert(QString("journey"), ::OpenAPI::toJsonValue(m_journey));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_rows.size() > 0) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_Fares_FaresSection::getHeader() const {
    return m_header;
}
void OAITfl_Api_Presentation_Entities_Fares_FaresSection::setHeader(const QString &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresSection::is_header_Set() const{
    return m_header_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresSection::is_header_Valid() const{
    return m_header_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_Fares_FaresSection::getIndex() const {
    return m_index;
}
void OAITfl_Api_Presentation_Entities_Fares_FaresSection::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresSection::is_index_Set() const{
    return m_index_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresSection::is_index_Valid() const{
    return m_index_isValid;
}

OAITfl_Api_Presentation_Entities_Fares_Journey OAITfl_Api_Presentation_Entities_Fares_FaresSection::getJourney() const {
    return m_journey;
}
void OAITfl_Api_Presentation_Entities_Fares_FaresSection::setJourney(const OAITfl_Api_Presentation_Entities_Fares_Journey &journey) {
    m_journey = journey;
    m_journey_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresSection::is_journey_Set() const{
    return m_journey_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresSection::is_journey_Valid() const{
    return m_journey_isValid;
}

QList<OAITfl_Api_Presentation_Entities_Message> OAITfl_Api_Presentation_Entities_Fares_FaresSection::getMessages() const {
    return m_messages;
}
void OAITfl_Api_Presentation_Entities_Fares_FaresSection::setMessages(const QList<OAITfl_Api_Presentation_Entities_Message> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresSection::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresSection::is_messages_Valid() const{
    return m_messages_isValid;
}

QList<OAITfl_Api_Presentation_Entities_Fares_FareDetails> OAITfl_Api_Presentation_Entities_Fares_FaresSection::getRows() const {
    return m_rows;
}
void OAITfl_Api_Presentation_Entities_Fares_FaresSection::setRows(const QList<OAITfl_Api_Presentation_Entities_Fares_FareDetails> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresSection::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresSection::is_rows_Valid() const{
    return m_rows_isValid;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresSection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_journey.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresSection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
