/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_InstructionStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_InstructionStep::OAITfl_Api_Presentation_Entities_InstructionStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_InstructionStep::OAITfl_Api_Presentation_Entities_InstructionStep() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_InstructionStep::~OAITfl_Api_Presentation_Entities_InstructionStep() {}

void OAITfl_Api_Presentation_Entities_InstructionStep::initializeModel() {

    m_cumulative_distance_isSet = false;
    m_cumulative_distance_isValid = false;

    m_cumulative_travel_time_isSet = false;
    m_cumulative_travel_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_description_heading_isSet = false;
    m_description_heading_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_path_attribute_isSet = false;
    m_path_attribute_isValid = false;

    m_sky_direction_isSet = false;
    m_sky_direction_isValid = false;

    m_sky_direction_description_isSet = false;
    m_sky_direction_description_isValid = false;

    m_street_name_isSet = false;
    m_street_name_isValid = false;

    m_track_type_isSet = false;
    m_track_type_isValid = false;

    m_turn_direction_isSet = false;
    m_turn_direction_isValid = false;
}

void OAITfl_Api_Presentation_Entities_InstructionStep::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_InstructionStep::fromJsonObject(QJsonObject json) {

    m_cumulative_distance_isValid = ::OpenAPI::fromJsonValue(m_cumulative_distance, json[QString("cumulativeDistance")]);
    m_cumulative_distance_isSet = !json[QString("cumulativeDistance")].isNull() && m_cumulative_distance_isValid;

    m_cumulative_travel_time_isValid = ::OpenAPI::fromJsonValue(m_cumulative_travel_time, json[QString("cumulativeTravelTime")]);
    m_cumulative_travel_time_isSet = !json[QString("cumulativeTravelTime")].isNull() && m_cumulative_travel_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_description_heading_isValid = ::OpenAPI::fromJsonValue(m_description_heading, json[QString("descriptionHeading")]);
    m_description_heading_isSet = !json[QString("descriptionHeading")].isNull() && m_description_heading_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_path_attribute_isValid = ::OpenAPI::fromJsonValue(m_path_attribute, json[QString("pathAttribute")]);
    m_path_attribute_isSet = !json[QString("pathAttribute")].isNull() && m_path_attribute_isValid;

    m_sky_direction_isValid = ::OpenAPI::fromJsonValue(m_sky_direction, json[QString("skyDirection")]);
    m_sky_direction_isSet = !json[QString("skyDirection")].isNull() && m_sky_direction_isValid;

    m_sky_direction_description_isValid = ::OpenAPI::fromJsonValue(m_sky_direction_description, json[QString("skyDirectionDescription")]);
    m_sky_direction_description_isSet = !json[QString("skyDirectionDescription")].isNull() && m_sky_direction_description_isValid;

    m_street_name_isValid = ::OpenAPI::fromJsonValue(m_street_name, json[QString("streetName")]);
    m_street_name_isSet = !json[QString("streetName")].isNull() && m_street_name_isValid;

    m_track_type_isValid = ::OpenAPI::fromJsonValue(m_track_type, json[QString("trackType")]);
    m_track_type_isSet = !json[QString("trackType")].isNull() && m_track_type_isValid;

    m_turn_direction_isValid = ::OpenAPI::fromJsonValue(m_turn_direction, json[QString("turnDirection")]);
    m_turn_direction_isSet = !json[QString("turnDirection")].isNull() && m_turn_direction_isValid;
}

QString OAITfl_Api_Presentation_Entities_InstructionStep::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_InstructionStep::asJsonObject() const {
    QJsonObject obj;
    if (m_cumulative_distance_isSet) {
        obj.insert(QString("cumulativeDistance"), ::OpenAPI::toJsonValue(m_cumulative_distance));
    }
    if (m_cumulative_travel_time_isSet) {
        obj.insert(QString("cumulativeTravelTime"), ::OpenAPI::toJsonValue(m_cumulative_travel_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_description_heading_isSet) {
        obj.insert(QString("descriptionHeading"), ::OpenAPI::toJsonValue(m_description_heading));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_path_attribute.isSet()) {
        obj.insert(QString("pathAttribute"), ::OpenAPI::toJsonValue(m_path_attribute));
    }
    if (m_sky_direction_isSet) {
        obj.insert(QString("skyDirection"), ::OpenAPI::toJsonValue(m_sky_direction));
    }
    if (m_sky_direction_description_isSet) {
        obj.insert(QString("skyDirectionDescription"), ::OpenAPI::toJsonValue(m_sky_direction_description));
    }
    if (m_street_name_isSet) {
        obj.insert(QString("streetName"), ::OpenAPI::toJsonValue(m_street_name));
    }
    if (m_track_type_isSet) {
        obj.insert(QString("trackType"), ::OpenAPI::toJsonValue(m_track_type));
    }
    if (m_turn_direction_isSet) {
        obj.insert(QString("turnDirection"), ::OpenAPI::toJsonValue(m_turn_direction));
    }
    return obj;
}

qint32 OAITfl_Api_Presentation_Entities_InstructionStep::getCumulativeDistance() const {
    return m_cumulative_distance;
}
void OAITfl_Api_Presentation_Entities_InstructionStep::setCumulativeDistance(const qint32 &cumulative_distance) {
    m_cumulative_distance = cumulative_distance;
    m_cumulative_distance_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_cumulative_distance_Set() const{
    return m_cumulative_distance_isSet;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_cumulative_distance_Valid() const{
    return m_cumulative_distance_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_InstructionStep::getCumulativeTravelTime() const {
    return m_cumulative_travel_time;
}
void OAITfl_Api_Presentation_Entities_InstructionStep::setCumulativeTravelTime(const qint32 &cumulative_travel_time) {
    m_cumulative_travel_time = cumulative_travel_time;
    m_cumulative_travel_time_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_cumulative_travel_time_Set() const{
    return m_cumulative_travel_time_isSet;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_cumulative_travel_time_Valid() const{
    return m_cumulative_travel_time_isValid;
}

QString OAITfl_Api_Presentation_Entities_InstructionStep::getDescription() const {
    return m_description;
}
void OAITfl_Api_Presentation_Entities_InstructionStep::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_description_Set() const{
    return m_description_isSet;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITfl_Api_Presentation_Entities_InstructionStep::getDescriptionHeading() const {
    return m_description_heading;
}
void OAITfl_Api_Presentation_Entities_InstructionStep::setDescriptionHeading(const QString &description_heading) {
    m_description_heading = description_heading;
    m_description_heading_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_description_heading_Set() const{
    return m_description_heading_isSet;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_description_heading_Valid() const{
    return m_description_heading_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_InstructionStep::getDistance() const {
    return m_distance;
}
void OAITfl_Api_Presentation_Entities_InstructionStep::setDistance(const qint32 &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_distance_Valid() const{
    return m_distance_isValid;
}

double OAITfl_Api_Presentation_Entities_InstructionStep::getLatitude() const {
    return m_latitude;
}
void OAITfl_Api_Presentation_Entities_InstructionStep::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAITfl_Api_Presentation_Entities_InstructionStep::getLongitude() const {
    return m_longitude;
}
void OAITfl_Api_Presentation_Entities_InstructionStep::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_longitude_Valid() const{
    return m_longitude_isValid;
}

OAITfl_Api_Presentation_Entities_PathAttribute OAITfl_Api_Presentation_Entities_InstructionStep::getPathAttribute() const {
    return m_path_attribute;
}
void OAITfl_Api_Presentation_Entities_InstructionStep::setPathAttribute(const OAITfl_Api_Presentation_Entities_PathAttribute &path_attribute) {
    m_path_attribute = path_attribute;
    m_path_attribute_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_path_attribute_Set() const{
    return m_path_attribute_isSet;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_path_attribute_Valid() const{
    return m_path_attribute_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_InstructionStep::getSkyDirection() const {
    return m_sky_direction;
}
void OAITfl_Api_Presentation_Entities_InstructionStep::setSkyDirection(const qint32 &sky_direction) {
    m_sky_direction = sky_direction;
    m_sky_direction_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_sky_direction_Set() const{
    return m_sky_direction_isSet;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_sky_direction_Valid() const{
    return m_sky_direction_isValid;
}

QString OAITfl_Api_Presentation_Entities_InstructionStep::getSkyDirectionDescription() const {
    return m_sky_direction_description;
}
void OAITfl_Api_Presentation_Entities_InstructionStep::setSkyDirectionDescription(const QString &sky_direction_description) {
    m_sky_direction_description = sky_direction_description;
    m_sky_direction_description_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_sky_direction_description_Set() const{
    return m_sky_direction_description_isSet;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_sky_direction_description_Valid() const{
    return m_sky_direction_description_isValid;
}

QString OAITfl_Api_Presentation_Entities_InstructionStep::getStreetName() const {
    return m_street_name;
}
void OAITfl_Api_Presentation_Entities_InstructionStep::setStreetName(const QString &street_name) {
    m_street_name = street_name;
    m_street_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_street_name_Set() const{
    return m_street_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_street_name_Valid() const{
    return m_street_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_InstructionStep::getTrackType() const {
    return m_track_type;
}
void OAITfl_Api_Presentation_Entities_InstructionStep::setTrackType(const QString &track_type) {
    m_track_type = track_type;
    m_track_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_track_type_Set() const{
    return m_track_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_track_type_Valid() const{
    return m_track_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_InstructionStep::getTurnDirection() const {
    return m_turn_direction;
}
void OAITfl_Api_Presentation_Entities_InstructionStep::setTurnDirection(const QString &turn_direction) {
    m_turn_direction = turn_direction;
    m_turn_direction_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_turn_direction_Set() const{
    return m_turn_direction_isSet;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::is_turn_direction_Valid() const{
    return m_turn_direction_isValid;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cumulative_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cumulative_travel_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_heading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_attribute.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sky_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sky_direction_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_turn_direction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_InstructionStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
