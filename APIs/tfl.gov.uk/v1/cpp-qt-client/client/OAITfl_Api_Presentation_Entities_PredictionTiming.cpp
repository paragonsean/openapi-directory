/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_PredictionTiming.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_PredictionTiming::OAITfl_Api_Presentation_Entities_PredictionTiming(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_PredictionTiming::OAITfl_Api_Presentation_Entities_PredictionTiming() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_PredictionTiming::~OAITfl_Api_Presentation_Entities_PredictionTiming() {}

void OAITfl_Api_Presentation_Entities_PredictionTiming::initializeModel() {

    m_countdown_server_adjustment_isSet = false;
    m_countdown_server_adjustment_isValid = false;

    m_insert_isSet = false;
    m_insert_isValid = false;

    m_read_isSet = false;
    m_read_isValid = false;

    m_received_isSet = false;
    m_received_isValid = false;

    m_sent_isSet = false;
    m_sent_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAITfl_Api_Presentation_Entities_PredictionTiming::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_PredictionTiming::fromJsonObject(QJsonObject json) {

    m_countdown_server_adjustment_isValid = ::OpenAPI::fromJsonValue(m_countdown_server_adjustment, json[QString("countdownServerAdjustment")]);
    m_countdown_server_adjustment_isSet = !json[QString("countdownServerAdjustment")].isNull() && m_countdown_server_adjustment_isValid;

    m_insert_isValid = ::OpenAPI::fromJsonValue(m_insert, json[QString("insert")]);
    m_insert_isSet = !json[QString("insert")].isNull() && m_insert_isValid;

    m_read_isValid = ::OpenAPI::fromJsonValue(m_read, json[QString("read")]);
    m_read_isSet = !json[QString("read")].isNull() && m_read_isValid;

    m_received_isValid = ::OpenAPI::fromJsonValue(m_received, json[QString("received")]);
    m_received_isSet = !json[QString("received")].isNull() && m_received_isValid;

    m_sent_isValid = ::OpenAPI::fromJsonValue(m_sent, json[QString("sent")]);
    m_sent_isSet = !json[QString("sent")].isNull() && m_sent_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAITfl_Api_Presentation_Entities_PredictionTiming::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_PredictionTiming::asJsonObject() const {
    QJsonObject obj;
    if (m_countdown_server_adjustment_isSet) {
        obj.insert(QString("countdownServerAdjustment"), ::OpenAPI::toJsonValue(m_countdown_server_adjustment));
    }
    if (m_insert_isSet) {
        obj.insert(QString("insert"), ::OpenAPI::toJsonValue(m_insert));
    }
    if (m_read_isSet) {
        obj.insert(QString("read"), ::OpenAPI::toJsonValue(m_read));
    }
    if (m_received_isSet) {
        obj.insert(QString("received"), ::OpenAPI::toJsonValue(m_received));
    }
    if (m_sent_isSet) {
        obj.insert(QString("sent"), ::OpenAPI::toJsonValue(m_sent));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_PredictionTiming::getCountdownServerAdjustment() const {
    return m_countdown_server_adjustment;
}
void OAITfl_Api_Presentation_Entities_PredictionTiming::setCountdownServerAdjustment(const QString &countdown_server_adjustment) {
    m_countdown_server_adjustment = countdown_server_adjustment;
    m_countdown_server_adjustment_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_PredictionTiming::is_countdown_server_adjustment_Set() const{
    return m_countdown_server_adjustment_isSet;
}

bool OAITfl_Api_Presentation_Entities_PredictionTiming::is_countdown_server_adjustment_Valid() const{
    return m_countdown_server_adjustment_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_PredictionTiming::getInsert() const {
    return m_insert;
}
void OAITfl_Api_Presentation_Entities_PredictionTiming::setInsert(const QDateTime &insert) {
    m_insert = insert;
    m_insert_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_PredictionTiming::is_insert_Set() const{
    return m_insert_isSet;
}

bool OAITfl_Api_Presentation_Entities_PredictionTiming::is_insert_Valid() const{
    return m_insert_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_PredictionTiming::getRead() const {
    return m_read;
}
void OAITfl_Api_Presentation_Entities_PredictionTiming::setRead(const QDateTime &read) {
    m_read = read;
    m_read_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_PredictionTiming::is_read_Set() const{
    return m_read_isSet;
}

bool OAITfl_Api_Presentation_Entities_PredictionTiming::is_read_Valid() const{
    return m_read_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_PredictionTiming::getReceived() const {
    return m_received;
}
void OAITfl_Api_Presentation_Entities_PredictionTiming::setReceived(const QDateTime &received) {
    m_received = received;
    m_received_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_PredictionTiming::is_received_Set() const{
    return m_received_isSet;
}

bool OAITfl_Api_Presentation_Entities_PredictionTiming::is_received_Valid() const{
    return m_received_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_PredictionTiming::getSent() const {
    return m_sent;
}
void OAITfl_Api_Presentation_Entities_PredictionTiming::setSent(const QDateTime &sent) {
    m_sent = sent;
    m_sent_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_PredictionTiming::is_sent_Set() const{
    return m_sent_isSet;
}

bool OAITfl_Api_Presentation_Entities_PredictionTiming::is_sent_Valid() const{
    return m_sent_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_PredictionTiming::getSource() const {
    return m_source;
}
void OAITfl_Api_Presentation_Entities_PredictionTiming::setSource(const QDateTime &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_PredictionTiming::is_source_Set() const{
    return m_source_isSet;
}

bool OAITfl_Api_Presentation_Entities_PredictionTiming::is_source_Valid() const{
    return m_source_isValid;
}

bool OAITfl_Api_Presentation_Entities_PredictionTiming::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_countdown_server_adjustment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_PredictionTiming::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
