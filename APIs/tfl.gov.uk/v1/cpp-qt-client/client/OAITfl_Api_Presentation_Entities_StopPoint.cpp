/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_StopPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_StopPoint::OAITfl_Api_Presentation_Entities_StopPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_StopPoint::OAITfl_Api_Presentation_Entities_StopPoint() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_StopPoint::~OAITfl_Api_Presentation_Entities_StopPoint() {}

void OAITfl_Api_Presentation_Entities_StopPoint::initializeModel() {

    m_accessibility_summary_isSet = false;
    m_accessibility_summary_isValid = false;

    m_additional_properties_isSet = false;
    m_additional_properties_isValid = false;

    m_children_isSet = false;
    m_children_isValid = false;

    m_children_urls_isSet = false;
    m_children_urls_isValid = false;

    m_common_name_isSet = false;
    m_common_name_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_hub_naptan_code_isSet = false;
    m_hub_naptan_code_isValid = false;

    m_ics_code_isSet = false;
    m_ics_code_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_indicator_isSet = false;
    m_indicator_isValid = false;

    m_individual_stop_id_isSet = false;
    m_individual_stop_id_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_line_group_isSet = false;
    m_line_group_isValid = false;

    m_line_mode_groups_isSet = false;
    m_line_mode_groups_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_modes_isSet = false;
    m_modes_isValid = false;

    m_naptan_id_isSet = false;
    m_naptan_id_isValid = false;

    m_naptan_mode_isSet = false;
    m_naptan_mode_isValid = false;

    m_place_type_isSet = false;
    m_place_type_isValid = false;

    m_platform_name_isSet = false;
    m_platform_name_isValid = false;

    m_sms_code_isSet = false;
    m_sms_code_isValid = false;

    m_station_naptan_isSet = false;
    m_station_naptan_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_stop_letter_isSet = false;
    m_stop_letter_isValid = false;

    m_stop_type_isSet = false;
    m_stop_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAITfl_Api_Presentation_Entities_StopPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_StopPoint::fromJsonObject(QJsonObject json) {

    m_accessibility_summary_isValid = ::OpenAPI::fromJsonValue(m_accessibility_summary, json[QString("accessibilitySummary")]);
    m_accessibility_summary_isSet = !json[QString("accessibilitySummary")].isNull() && m_accessibility_summary_isValid;

    m_additional_properties_isValid = ::OpenAPI::fromJsonValue(m_additional_properties, json[QString("additionalProperties")]);
    m_additional_properties_isSet = !json[QString("additionalProperties")].isNull() && m_additional_properties_isValid;

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_children_urls_isValid = ::OpenAPI::fromJsonValue(m_children_urls, json[QString("childrenUrls")]);
    m_children_urls_isSet = !json[QString("childrenUrls")].isNull() && m_children_urls_isValid;

    m_common_name_isValid = ::OpenAPI::fromJsonValue(m_common_name, json[QString("commonName")]);
    m_common_name_isSet = !json[QString("commonName")].isNull() && m_common_name_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("fullName")]);
    m_full_name_isSet = !json[QString("fullName")].isNull() && m_full_name_isValid;

    m_hub_naptan_code_isValid = ::OpenAPI::fromJsonValue(m_hub_naptan_code, json[QString("hubNaptanCode")]);
    m_hub_naptan_code_isSet = !json[QString("hubNaptanCode")].isNull() && m_hub_naptan_code_isValid;

    m_ics_code_isValid = ::OpenAPI::fromJsonValue(m_ics_code, json[QString("icsCode")]);
    m_ics_code_isSet = !json[QString("icsCode")].isNull() && m_ics_code_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_indicator_isValid = ::OpenAPI::fromJsonValue(m_indicator, json[QString("indicator")]);
    m_indicator_isSet = !json[QString("indicator")].isNull() && m_indicator_isValid;

    m_individual_stop_id_isValid = ::OpenAPI::fromJsonValue(m_individual_stop_id, json[QString("individualStopId")]);
    m_individual_stop_id_isSet = !json[QString("individualStopId")].isNull() && m_individual_stop_id_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_line_group_isValid = ::OpenAPI::fromJsonValue(m_line_group, json[QString("lineGroup")]);
    m_line_group_isSet = !json[QString("lineGroup")].isNull() && m_line_group_isValid;

    m_line_mode_groups_isValid = ::OpenAPI::fromJsonValue(m_line_mode_groups, json[QString("lineModeGroups")]);
    m_line_mode_groups_isSet = !json[QString("lineModeGroups")].isNull() && m_line_mode_groups_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_modes_isValid = ::OpenAPI::fromJsonValue(m_modes, json[QString("modes")]);
    m_modes_isSet = !json[QString("modes")].isNull() && m_modes_isValid;

    m_naptan_id_isValid = ::OpenAPI::fromJsonValue(m_naptan_id, json[QString("naptanId")]);
    m_naptan_id_isSet = !json[QString("naptanId")].isNull() && m_naptan_id_isValid;

    m_naptan_mode_isValid = ::OpenAPI::fromJsonValue(m_naptan_mode, json[QString("naptanMode")]);
    m_naptan_mode_isSet = !json[QString("naptanMode")].isNull() && m_naptan_mode_isValid;

    m_place_type_isValid = ::OpenAPI::fromJsonValue(m_place_type, json[QString("placeType")]);
    m_place_type_isSet = !json[QString("placeType")].isNull() && m_place_type_isValid;

    m_platform_name_isValid = ::OpenAPI::fromJsonValue(m_platform_name, json[QString("platformName")]);
    m_platform_name_isSet = !json[QString("platformName")].isNull() && m_platform_name_isValid;

    m_sms_code_isValid = ::OpenAPI::fromJsonValue(m_sms_code, json[QString("smsCode")]);
    m_sms_code_isSet = !json[QString("smsCode")].isNull() && m_sms_code_isValid;

    m_station_naptan_isValid = ::OpenAPI::fromJsonValue(m_station_naptan, json[QString("stationNaptan")]);
    m_station_naptan_isSet = !json[QString("stationNaptan")].isNull() && m_station_naptan_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_stop_letter_isValid = ::OpenAPI::fromJsonValue(m_stop_letter, json[QString("stopLetter")]);
    m_stop_letter_isSet = !json[QString("stopLetter")].isNull() && m_stop_letter_isValid;

    m_stop_type_isValid = ::OpenAPI::fromJsonValue(m_stop_type, json[QString("stopType")]);
    m_stop_type_isSet = !json[QString("stopType")].isNull() && m_stop_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_StopPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_accessibility_summary_isSet) {
        obj.insert(QString("accessibilitySummary"), ::OpenAPI::toJsonValue(m_accessibility_summary));
    }
    if (m_additional_properties.size() > 0) {
        obj.insert(QString("additionalProperties"), ::OpenAPI::toJsonValue(m_additional_properties));
    }
    if (m_children.size() > 0) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_children_urls.size() > 0) {
        obj.insert(QString("childrenUrls"), ::OpenAPI::toJsonValue(m_children_urls));
    }
    if (m_common_name_isSet) {
        obj.insert(QString("commonName"), ::OpenAPI::toJsonValue(m_common_name));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("fullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_hub_naptan_code_isSet) {
        obj.insert(QString("hubNaptanCode"), ::OpenAPI::toJsonValue(m_hub_naptan_code));
    }
    if (m_ics_code_isSet) {
        obj.insert(QString("icsCode"), ::OpenAPI::toJsonValue(m_ics_code));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_indicator_isSet) {
        obj.insert(QString("indicator"), ::OpenAPI::toJsonValue(m_indicator));
    }
    if (m_individual_stop_id_isSet) {
        obj.insert(QString("individualStopId"), ::OpenAPI::toJsonValue(m_individual_stop_id));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_line_group.size() > 0) {
        obj.insert(QString("lineGroup"), ::OpenAPI::toJsonValue(m_line_group));
    }
    if (m_line_mode_groups.size() > 0) {
        obj.insert(QString("lineModeGroups"), ::OpenAPI::toJsonValue(m_line_mode_groups));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_modes.size() > 0) {
        obj.insert(QString("modes"), ::OpenAPI::toJsonValue(m_modes));
    }
    if (m_naptan_id_isSet) {
        obj.insert(QString("naptanId"), ::OpenAPI::toJsonValue(m_naptan_id));
    }
    if (m_naptan_mode_isSet) {
        obj.insert(QString("naptanMode"), ::OpenAPI::toJsonValue(m_naptan_mode));
    }
    if (m_place_type_isSet) {
        obj.insert(QString("placeType"), ::OpenAPI::toJsonValue(m_place_type));
    }
    if (m_platform_name_isSet) {
        obj.insert(QString("platformName"), ::OpenAPI::toJsonValue(m_platform_name));
    }
    if (m_sms_code_isSet) {
        obj.insert(QString("smsCode"), ::OpenAPI::toJsonValue(m_sms_code));
    }
    if (m_station_naptan_isSet) {
        obj.insert(QString("stationNaptan"), ::OpenAPI::toJsonValue(m_station_naptan));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_stop_letter_isSet) {
        obj.insert(QString("stopLetter"), ::OpenAPI::toJsonValue(m_stop_letter));
    }
    if (m_stop_type_isSet) {
        obj.insert(QString("stopType"), ::OpenAPI::toJsonValue(m_stop_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_StopPoint::getAccessibilitySummary() const {
    return m_accessibility_summary;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setAccessibilitySummary(const QString &accessibility_summary) {
    m_accessibility_summary = accessibility_summary;
    m_accessibility_summary_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_accessibility_summary_Set() const{
    return m_accessibility_summary_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_accessibility_summary_Valid() const{
    return m_accessibility_summary_isValid;
}

QList<OAITfl_Api_Presentation_Entities_AdditionalProperties> OAITfl_Api_Presentation_Entities_StopPoint::getAdditionalProperties() const {
    return m_additional_properties;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setAdditionalProperties(const QList<OAITfl_Api_Presentation_Entities_AdditionalProperties> &additional_properties) {
    m_additional_properties = additional_properties;
    m_additional_properties_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_additional_properties_Set() const{
    return m_additional_properties_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_additional_properties_Valid() const{
    return m_additional_properties_isValid;
}

QList<OAITfl_Api_Presentation_Entities_Place> OAITfl_Api_Presentation_Entities_StopPoint::getChildren() const {
    return m_children;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setChildren(const QList<OAITfl_Api_Presentation_Entities_Place> &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_children_Set() const{
    return m_children_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_children_Valid() const{
    return m_children_isValid;
}

QList<QString> OAITfl_Api_Presentation_Entities_StopPoint::getChildrenUrls() const {
    return m_children_urls;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setChildrenUrls(const QList<QString> &children_urls) {
    m_children_urls = children_urls;
    m_children_urls_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_children_urls_Set() const{
    return m_children_urls_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_children_urls_Valid() const{
    return m_children_urls_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPoint::getCommonName() const {
    return m_common_name;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setCommonName(const QString &common_name) {
    m_common_name = common_name;
    m_common_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_common_name_Set() const{
    return m_common_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_common_name_Valid() const{
    return m_common_name_isValid;
}

double OAITfl_Api_Presentation_Entities_StopPoint::getDistance() const {
    return m_distance;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_distance_Valid() const{
    return m_distance_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPoint::getFullName() const {
    return m_full_name;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPoint::getHubNaptanCode() const {
    return m_hub_naptan_code;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setHubNaptanCode(const QString &hub_naptan_code) {
    m_hub_naptan_code = hub_naptan_code;
    m_hub_naptan_code_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_hub_naptan_code_Set() const{
    return m_hub_naptan_code_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_hub_naptan_code_Valid() const{
    return m_hub_naptan_code_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPoint::getIcsCode() const {
    return m_ics_code;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setIcsCode(const QString &ics_code) {
    m_ics_code = ics_code;
    m_ics_code_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_ics_code_Set() const{
    return m_ics_code_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_ics_code_Valid() const{
    return m_ics_code_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPoint::getId() const {
    return m_id;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_id_Set() const{
    return m_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPoint::getIndicator() const {
    return m_indicator;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setIndicator(const QString &indicator) {
    m_indicator = indicator;
    m_indicator_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_indicator_Set() const{
    return m_indicator_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_indicator_Valid() const{
    return m_indicator_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPoint::getIndividualStopId() const {
    return m_individual_stop_id;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setIndividualStopId(const QString &individual_stop_id) {
    m_individual_stop_id = individual_stop_id;
    m_individual_stop_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_individual_stop_id_Set() const{
    return m_individual_stop_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_individual_stop_id_Valid() const{
    return m_individual_stop_id_isValid;
}

double OAITfl_Api_Presentation_Entities_StopPoint::getLat() const {
    return m_lat;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_lat_Valid() const{
    return m_lat_isValid;
}

QList<OAITfl_Api_Presentation_Entities_LineGroup> OAITfl_Api_Presentation_Entities_StopPoint::getLineGroup() const {
    return m_line_group;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setLineGroup(const QList<OAITfl_Api_Presentation_Entities_LineGroup> &line_group) {
    m_line_group = line_group;
    m_line_group_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_line_group_Set() const{
    return m_line_group_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_line_group_Valid() const{
    return m_line_group_isValid;
}

QList<OAITfl_Api_Presentation_Entities_LineModeGroup> OAITfl_Api_Presentation_Entities_StopPoint::getLineModeGroups() const {
    return m_line_mode_groups;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setLineModeGroups(const QList<OAITfl_Api_Presentation_Entities_LineModeGroup> &line_mode_groups) {
    m_line_mode_groups = line_mode_groups;
    m_line_mode_groups_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_line_mode_groups_Set() const{
    return m_line_mode_groups_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_line_mode_groups_Valid() const{
    return m_line_mode_groups_isValid;
}

QList<OAITfl_Api_Presentation_Entities_Identifier> OAITfl_Api_Presentation_Entities_StopPoint::getLines() const {
    return m_lines;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setLines(const QList<OAITfl_Api_Presentation_Entities_Identifier> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_lines_Valid() const{
    return m_lines_isValid;
}

double OAITfl_Api_Presentation_Entities_StopPoint::getLon() const {
    return m_lon;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setLon(const double &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_lon_Valid() const{
    return m_lon_isValid;
}

QList<QString> OAITfl_Api_Presentation_Entities_StopPoint::getModes() const {
    return m_modes;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setModes(const QList<QString> &modes) {
    m_modes = modes;
    m_modes_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_modes_Set() const{
    return m_modes_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_modes_Valid() const{
    return m_modes_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPoint::getNaptanId() const {
    return m_naptan_id;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setNaptanId(const QString &naptan_id) {
    m_naptan_id = naptan_id;
    m_naptan_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_naptan_id_Set() const{
    return m_naptan_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_naptan_id_Valid() const{
    return m_naptan_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPoint::getNaptanMode() const {
    return m_naptan_mode;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setNaptanMode(const QString &naptan_mode) {
    m_naptan_mode = naptan_mode;
    m_naptan_mode_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_naptan_mode_Set() const{
    return m_naptan_mode_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_naptan_mode_Valid() const{
    return m_naptan_mode_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPoint::getPlaceType() const {
    return m_place_type;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setPlaceType(const QString &place_type) {
    m_place_type = place_type;
    m_place_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_place_type_Set() const{
    return m_place_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_place_type_Valid() const{
    return m_place_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPoint::getPlatformName() const {
    return m_platform_name;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setPlatformName(const QString &platform_name) {
    m_platform_name = platform_name;
    m_platform_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_platform_name_Set() const{
    return m_platform_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_platform_name_Valid() const{
    return m_platform_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPoint::getSmsCode() const {
    return m_sms_code;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setSmsCode(const QString &sms_code) {
    m_sms_code = sms_code;
    m_sms_code_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_sms_code_Set() const{
    return m_sms_code_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_sms_code_Valid() const{
    return m_sms_code_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPoint::getStationNaptan() const {
    return m_station_naptan;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setStationNaptan(const QString &station_naptan) {
    m_station_naptan = station_naptan;
    m_station_naptan_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_station_naptan_Set() const{
    return m_station_naptan_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_station_naptan_Valid() const{
    return m_station_naptan_isValid;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::isStatus() const {
    return m_status;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setStatus(const bool &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_status_Set() const{
    return m_status_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPoint::getStopLetter() const {
    return m_stop_letter;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setStopLetter(const QString &stop_letter) {
    m_stop_letter = stop_letter;
    m_stop_letter_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_stop_letter_Set() const{
    return m_stop_letter_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_stop_letter_Valid() const{
    return m_stop_letter_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPoint::getStopType() const {
    return m_stop_type;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setStopType(const QString &stop_type) {
    m_stop_type = stop_type;
    m_stop_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_stop_type_Set() const{
    return m_stop_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_stop_type_Valid() const{
    return m_stop_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPoint::getUrl() const {
    return m_url;
}
void OAITfl_Api_Presentation_Entities_StopPoint::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_url_Set() const{
    return m_url_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::is_url_Valid() const{
    return m_url_isValid;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessibility_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_children_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hub_naptan_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ics_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_stop_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_group.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_mode_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_naptan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_naptan_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_station_naptan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_letter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_StopPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
