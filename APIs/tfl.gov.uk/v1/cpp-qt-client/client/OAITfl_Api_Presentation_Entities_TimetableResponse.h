/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITfl_Api_Presentation_Entities_TimetableResponse.h
 *
 * 
 */

#ifndef OAITfl_Api_Presentation_Entities_TimetableResponse_H
#define OAITfl_Api_Presentation_Entities_TimetableResponse_H

#include <QJsonObject>

#include "OAITfl_Api_Presentation_Entities_MatchedStop.h"
#include "OAITfl_Api_Presentation_Entities_Timetable.h"
#include "OAITfl_Api_Presentation_Entities_Timetables_Disambiguation.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITfl_Api_Presentation_Entities_Timetables_Disambiguation;
class OAITfl_Api_Presentation_Entities_MatchedStop;
class OAITfl_Api_Presentation_Entities_Timetable;

class OAITfl_Api_Presentation_Entities_TimetableResponse : public OAIObject {
public:
    OAITfl_Api_Presentation_Entities_TimetableResponse();
    OAITfl_Api_Presentation_Entities_TimetableResponse(QString json);
    ~OAITfl_Api_Presentation_Entities_TimetableResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDirection() const;
    void setDirection(const QString &direction);
    bool is_direction_Set() const;
    bool is_direction_Valid() const;

    OAITfl_Api_Presentation_Entities_Timetables_Disambiguation getDisambiguation() const;
    void setDisambiguation(const OAITfl_Api_Presentation_Entities_Timetables_Disambiguation &disambiguation);
    bool is_disambiguation_Set() const;
    bool is_disambiguation_Valid() const;

    QString getLineId() const;
    void setLineId(const QString &line_id);
    bool is_line_id_Set() const;
    bool is_line_id_Valid() const;

    QString getLineName() const;
    void setLineName(const QString &line_name);
    bool is_line_name_Set() const;
    bool is_line_name_Valid() const;

    QString getPdfUrl() const;
    void setPdfUrl(const QString &pdf_url);
    bool is_pdf_url_Set() const;
    bool is_pdf_url_Valid() const;

    QList<OAITfl_Api_Presentation_Entities_MatchedStop> getStations() const;
    void setStations(const QList<OAITfl_Api_Presentation_Entities_MatchedStop> &stations);
    bool is_stations_Set() const;
    bool is_stations_Valid() const;

    QString getStatusErrorMessage() const;
    void setStatusErrorMessage(const QString &status_error_message);
    bool is_status_error_message_Set() const;
    bool is_status_error_message_Valid() const;

    QList<OAITfl_Api_Presentation_Entities_MatchedStop> getStops() const;
    void setStops(const QList<OAITfl_Api_Presentation_Entities_MatchedStop> &stops);
    bool is_stops_Set() const;
    bool is_stops_Valid() const;

    OAITfl_Api_Presentation_Entities_Timetable getTimetable() const;
    void setTimetable(const OAITfl_Api_Presentation_Entities_Timetable &timetable);
    bool is_timetable_Set() const;
    bool is_timetable_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_direction;
    bool m_direction_isSet;
    bool m_direction_isValid;

    OAITfl_Api_Presentation_Entities_Timetables_Disambiguation m_disambiguation;
    bool m_disambiguation_isSet;
    bool m_disambiguation_isValid;

    QString m_line_id;
    bool m_line_id_isSet;
    bool m_line_id_isValid;

    QString m_line_name;
    bool m_line_name_isSet;
    bool m_line_name_isValid;

    QString m_pdf_url;
    bool m_pdf_url_isSet;
    bool m_pdf_url_isValid;

    QList<OAITfl_Api_Presentation_Entities_MatchedStop> m_stations;
    bool m_stations_isSet;
    bool m_stations_isValid;

    QString m_status_error_message;
    bool m_status_error_message_isSet;
    bool m_status_error_message_isValid;

    QList<OAITfl_Api_Presentation_Entities_MatchedStop> m_stops;
    bool m_stops_isSet;
    bool m_stops_isValid;

    OAITfl_Api_Presentation_Entities_Timetable m_timetable;
    bool m_timetable_isSet;
    bool m_timetable_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITfl_Api_Presentation_Entities_TimetableResponse)

#endif // OAITfl_Api_Presentation_Entities_TimetableResponse_H
