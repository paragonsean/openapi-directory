/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStopPointApi_H
#define OAI_OAIStopPointApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAITfl_Api_Presentation_Entities_ArrivalDeparture.h"
#include "OAITfl_Api_Presentation_Entities_DisruptedPoint.h"
#include "OAITfl_Api_Presentation_Entities_LineServiceType.h"
#include "OAITfl_Api_Presentation_Entities_Mode.h"
#include "OAITfl_Api_Presentation_Entities_Place.h"
#include "OAITfl_Api_Presentation_Entities_Prediction.h"
#include "OAITfl_Api_Presentation_Entities_SearchResponse.h"
#include "OAITfl_Api_Presentation_Entities_StopPoint.h"
#include "OAITfl_Api_Presentation_Entities_StopPointCategory.h"
#include "OAITfl_Api_Presentation_Entities_StopPointRouteSection.h"
#include "OAITfl_Api_Presentation_Entities_StopPointsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStopPointApi : public QObject {
    Q_OBJECT

public:
    OAIStopPointApi(const int timeOut = 0);
    ~OAIStopPointApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  line_ids QList<QString> [required]
    */
    virtual void stopPointArrivalDepartures(const QString &id, const QList<QString> &line_ids);

    /**
    * @param[in]  id QString [required]
    */
    virtual void stopPointArrivals(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  line QString [required]
    * @param[in]  direction QString [required]
    */
    virtual void stopPointCrowding(const QString &id, const QString &line, const QString &direction);

    /**
    * @param[in]  id QString [required]
    * @param[in]  to_stop_point_id QString [required]
    * @param[in]  line_id QString [optional]
    */
    virtual void stopPointDirection(const QString &id, const QString &to_stop_point_id, const ::OpenAPI::OptionalParam<QString> &line_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QList<QString> [required]
    * @param[in]  get_family bool [optional]
    * @param[in]  include_route_blocked_stops bool [optional]
    * @param[in]  flatten_response bool [optional]
    */
    virtual void stopPointDisruption(const QList<QString> &ids, const ::OpenAPI::OptionalParam<bool> &get_family = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_route_blocked_stops = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &flatten_response = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  modes QList<QString> [required]
    * @param[in]  include_route_blocked_stops bool [optional]
    */
    virtual void stopPointDisruptionByMode(const QList<QString> &modes, const ::OpenAPI::OptionalParam<bool> &include_route_blocked_stops = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  ids QList<QString> [required]
    * @param[in]  include_crowding_data bool [optional]
    */
    virtual void stopPointGet(const QList<QString> &ids, const ::OpenAPI::OptionalParam<bool> &include_crowding_data = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  stop_types QList<QString> [required]
    * @param[in]  location_lat double [required]
    * @param[in]  location_lon double [required]
    * @param[in]  radius qint32 [optional]
    * @param[in]  use_stop_point_hierarchy bool [optional]
    * @param[in]  modes QList<QString> [optional]
    * @param[in]  categories QList<QString> [optional]
    * @param[in]  return_lines bool [optional]
    */
    virtual void stopPointGetByGeoPoint(const QList<QString> &stop_types, const double &location_lat, const double &location_lon, const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &use_stop_point_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &modes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &categories = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &return_lines = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  modes QList<QString> [required]
    * @param[in]  page qint32 [optional]
    */
    virtual void stopPointGetByMode(const QList<QString> &modes, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  output QString [optional]
    */
    virtual void stopPointGetBySms(const QString &id, const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  types QList<QString> [required]
    */
    virtual void stopPointGetByType(const QList<QString> &types);

    /**
    * @param[in]  types QList<QString> [required]
    * @param[in]  page qint32 [required]
    */
    virtual void stopPointGetByTypeWithPagination(const QList<QString> &types, const qint32 &page);

    /**
    * @param[in]  stop_point_id QString [required]
    */
    virtual void stopPointGetCarParksById(const QString &stop_point_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  line_ids QList<QString> [optional]
    * @param[in]  modes QList<QString> [optional]
    */
    virtual void stopPointGetServiceTypes(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &line_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &modes = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  stop_point_id QString [required]
    */
    virtual void stopPointGetTaxiRanksByIds(const QString &stop_point_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  place_types QList<QString> [required]
    */
    virtual void stopPointIdPlaceTypesGet(const QString &id, const QList<QString> &place_types);


    virtual void stopPointMetaCategories();


    virtual void stopPointMetaModes();


    virtual void stopPointMetaStopTypes();

    /**
    * @param[in]  id QString [required]
    * @param[in]  line_id QString [required]
    * @param[in]  service_types QList<QString> [optional]
    */
    virtual void stopPointReachableFrom(const QString &id, const QString &line_id, const ::OpenAPI::OptionalParam<QList<QString>> &service_types = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  service_types QList<QString> [optional]
    */
    virtual void stopPointRoute(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &service_types = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  modes QList<QString> [optional]
    * @param[in]  fares_only bool [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  lines QList<QString> [optional]
    * @param[in]  include_hubs bool [optional]
    * @param[in]  tfl_operated_national_rail_stations_only bool [optional]
    */
    virtual void stopPointSearch(const QString &query, const ::OpenAPI::OptionalParam<QList<QString>> &modes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &fares_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &lines = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_hubs = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &tfl_operated_national_rail_stations_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  modes QList<QString> [optional]
    * @param[in]  fares_only bool [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  lines QList<QString> [optional]
    * @param[in]  include_hubs bool [optional]
    * @param[in]  tfl_operated_national_rail_stations_only bool [optional]
    */
    virtual void stopPointSearchGet(const QString &query, const ::OpenAPI::OptionalParam<QList<QString>> &modes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &fares_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &lines = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_hubs = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &tfl_operated_national_rail_stations_only = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void stopPointArrivalDeparturesCallback(OAIHttpRequestWorker *worker);
    void stopPointArrivalsCallback(OAIHttpRequestWorker *worker);
    void stopPointCrowdingCallback(OAIHttpRequestWorker *worker);
    void stopPointDirectionCallback(OAIHttpRequestWorker *worker);
    void stopPointDisruptionCallback(OAIHttpRequestWorker *worker);
    void stopPointDisruptionByModeCallback(OAIHttpRequestWorker *worker);
    void stopPointGetCallback(OAIHttpRequestWorker *worker);
    void stopPointGetByGeoPointCallback(OAIHttpRequestWorker *worker);
    void stopPointGetByModeCallback(OAIHttpRequestWorker *worker);
    void stopPointGetBySmsCallback(OAIHttpRequestWorker *worker);
    void stopPointGetByTypeCallback(OAIHttpRequestWorker *worker);
    void stopPointGetByTypeWithPaginationCallback(OAIHttpRequestWorker *worker);
    void stopPointGetCarParksByIdCallback(OAIHttpRequestWorker *worker);
    void stopPointGetServiceTypesCallback(OAIHttpRequestWorker *worker);
    void stopPointGetTaxiRanksByIdsCallback(OAIHttpRequestWorker *worker);
    void stopPointIdPlaceTypesGetCallback(OAIHttpRequestWorker *worker);
    void stopPointMetaCategoriesCallback(OAIHttpRequestWorker *worker);
    void stopPointMetaModesCallback(OAIHttpRequestWorker *worker);
    void stopPointMetaStopTypesCallback(OAIHttpRequestWorker *worker);
    void stopPointReachableFromCallback(OAIHttpRequestWorker *worker);
    void stopPointRouteCallback(OAIHttpRequestWorker *worker);
    void stopPointSearchCallback(OAIHttpRequestWorker *worker);
    void stopPointSearchGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void stopPointArrivalDeparturesSignal(QList<OAITfl_Api_Presentation_Entities_ArrivalDeparture> summary);
    void stopPointArrivalsSignal(QList<OAITfl_Api_Presentation_Entities_Prediction> summary);
    void stopPointCrowdingSignal(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary);
    void stopPointDirectionSignal(QString summary);
    void stopPointDisruptionSignal(QList<OAITfl_Api_Presentation_Entities_DisruptedPoint> summary);
    void stopPointDisruptionByModeSignal(QList<OAITfl_Api_Presentation_Entities_DisruptedPoint> summary);
    void stopPointGetSignal(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary);
    void stopPointGetByGeoPointSignal(OAITfl_Api_Presentation_Entities_StopPointsResponse summary);
    void stopPointGetByModeSignal(OAITfl_Api_Presentation_Entities_StopPointsResponse summary);
    void stopPointGetBySmsSignal(OAIObject summary);
    void stopPointGetByTypeSignal(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary);
    void stopPointGetByTypeWithPaginationSignal(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary);
    void stopPointGetCarParksByIdSignal(QList<OAITfl_Api_Presentation_Entities_Place> summary);
    void stopPointGetServiceTypesSignal(QList<OAITfl_Api_Presentation_Entities_LineServiceType> summary);
    void stopPointGetTaxiRanksByIdsSignal(QList<OAITfl_Api_Presentation_Entities_Place> summary);
    void stopPointIdPlaceTypesGetSignal(QList<OAITfl_Api_Presentation_Entities_Place> summary);
    void stopPointMetaCategoriesSignal(QList<OAITfl_Api_Presentation_Entities_StopPointCategory> summary);
    void stopPointMetaModesSignal(QList<OAITfl_Api_Presentation_Entities_Mode> summary);
    void stopPointMetaStopTypesSignal(QList<QString> summary);
    void stopPointReachableFromSignal(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary);
    void stopPointRouteSignal(QList<OAITfl_Api_Presentation_Entities_StopPointRouteSection> summary);
    void stopPointSearchSignal(OAITfl_Api_Presentation_Entities_SearchResponse summary);
    void stopPointSearchGetSignal(OAITfl_Api_Presentation_Entities_SearchResponse summary);


    void stopPointArrivalDeparturesSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_ArrivalDeparture> summary);
    void stopPointArrivalsSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Prediction> summary);
    void stopPointCrowdingSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_StopPoint> summary);
    void stopPointDirectionSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void stopPointDisruptionSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_DisruptedPoint> summary);
    void stopPointDisruptionByModeSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_DisruptedPoint> summary);
    void stopPointGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_StopPoint> summary);
    void stopPointGetByGeoPointSignalFull(OAIHttpRequestWorker *worker, OAITfl_Api_Presentation_Entities_StopPointsResponse summary);
    void stopPointGetByModeSignalFull(OAIHttpRequestWorker *worker, OAITfl_Api_Presentation_Entities_StopPointsResponse summary);
    void stopPointGetBySmsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void stopPointGetByTypeSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_StopPoint> summary);
    void stopPointGetByTypeWithPaginationSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_StopPoint> summary);
    void stopPointGetCarParksByIdSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Place> summary);
    void stopPointGetServiceTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_LineServiceType> summary);
    void stopPointGetTaxiRanksByIdsSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Place> summary);
    void stopPointIdPlaceTypesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Place> summary);
    void stopPointMetaCategoriesSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_StopPointCategory> summary);
    void stopPointMetaModesSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Mode> summary);
    void stopPointMetaStopTypesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void stopPointReachableFromSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_StopPoint> summary);
    void stopPointRouteSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_StopPointRouteSection> summary);
    void stopPointSearchSignalFull(OAIHttpRequestWorker *worker, OAITfl_Api_Presentation_Entities_SearchResponse summary);
    void stopPointSearchGetSignalFull(OAIHttpRequestWorker *worker, OAITfl_Api_Presentation_Entities_SearchResponse summary);

    Q_DECL_DEPRECATED_X("Use stopPointArrivalDeparturesSignalError() instead")
    void stopPointArrivalDeparturesSignalE(QList<OAITfl_Api_Presentation_Entities_ArrivalDeparture> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointArrivalDeparturesSignalError(QList<OAITfl_Api_Presentation_Entities_ArrivalDeparture> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointArrivalsSignalError() instead")
    void stopPointArrivalsSignalE(QList<OAITfl_Api_Presentation_Entities_Prediction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointArrivalsSignalError(QList<OAITfl_Api_Presentation_Entities_Prediction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointCrowdingSignalError() instead")
    void stopPointCrowdingSignalE(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointCrowdingSignalError(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointDirectionSignalError() instead")
    void stopPointDirectionSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointDirectionSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointDisruptionSignalError() instead")
    void stopPointDisruptionSignalE(QList<OAITfl_Api_Presentation_Entities_DisruptedPoint> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointDisruptionSignalError(QList<OAITfl_Api_Presentation_Entities_DisruptedPoint> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointDisruptionByModeSignalError() instead")
    void stopPointDisruptionByModeSignalE(QList<OAITfl_Api_Presentation_Entities_DisruptedPoint> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointDisruptionByModeSignalError(QList<OAITfl_Api_Presentation_Entities_DisruptedPoint> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointGetSignalError() instead")
    void stopPointGetSignalE(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointGetSignalError(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointGetByGeoPointSignalError() instead")
    void stopPointGetByGeoPointSignalE(OAITfl_Api_Presentation_Entities_StopPointsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointGetByGeoPointSignalError(OAITfl_Api_Presentation_Entities_StopPointsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointGetByModeSignalError() instead")
    void stopPointGetByModeSignalE(OAITfl_Api_Presentation_Entities_StopPointsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointGetByModeSignalError(OAITfl_Api_Presentation_Entities_StopPointsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointGetBySmsSignalError() instead")
    void stopPointGetBySmsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointGetBySmsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointGetByTypeSignalError() instead")
    void stopPointGetByTypeSignalE(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointGetByTypeSignalError(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointGetByTypeWithPaginationSignalError() instead")
    void stopPointGetByTypeWithPaginationSignalE(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointGetByTypeWithPaginationSignalError(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointGetCarParksByIdSignalError() instead")
    void stopPointGetCarParksByIdSignalE(QList<OAITfl_Api_Presentation_Entities_Place> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointGetCarParksByIdSignalError(QList<OAITfl_Api_Presentation_Entities_Place> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointGetServiceTypesSignalError() instead")
    void stopPointGetServiceTypesSignalE(QList<OAITfl_Api_Presentation_Entities_LineServiceType> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointGetServiceTypesSignalError(QList<OAITfl_Api_Presentation_Entities_LineServiceType> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointGetTaxiRanksByIdsSignalError() instead")
    void stopPointGetTaxiRanksByIdsSignalE(QList<OAITfl_Api_Presentation_Entities_Place> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointGetTaxiRanksByIdsSignalError(QList<OAITfl_Api_Presentation_Entities_Place> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointIdPlaceTypesGetSignalError() instead")
    void stopPointIdPlaceTypesGetSignalE(QList<OAITfl_Api_Presentation_Entities_Place> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointIdPlaceTypesGetSignalError(QList<OAITfl_Api_Presentation_Entities_Place> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointMetaCategoriesSignalError() instead")
    void stopPointMetaCategoriesSignalE(QList<OAITfl_Api_Presentation_Entities_StopPointCategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointMetaCategoriesSignalError(QList<OAITfl_Api_Presentation_Entities_StopPointCategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointMetaModesSignalError() instead")
    void stopPointMetaModesSignalE(QList<OAITfl_Api_Presentation_Entities_Mode> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointMetaModesSignalError(QList<OAITfl_Api_Presentation_Entities_Mode> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointMetaStopTypesSignalError() instead")
    void stopPointMetaStopTypesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointMetaStopTypesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointReachableFromSignalError() instead")
    void stopPointReachableFromSignalE(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointReachableFromSignalError(QList<OAITfl_Api_Presentation_Entities_StopPoint> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointRouteSignalError() instead")
    void stopPointRouteSignalE(QList<OAITfl_Api_Presentation_Entities_StopPointRouteSection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointRouteSignalError(QList<OAITfl_Api_Presentation_Entities_StopPointRouteSection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointSearchSignalError() instead")
    void stopPointSearchSignalE(OAITfl_Api_Presentation_Entities_SearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointSearchSignalError(OAITfl_Api_Presentation_Entities_SearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointSearchGetSignalError() instead")
    void stopPointSearchGetSignalE(OAITfl_Api_Presentation_Entities_SearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointSearchGetSignalError(OAITfl_Api_Presentation_Entities_SearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use stopPointArrivalDeparturesSignalErrorFull() instead")
    void stopPointArrivalDeparturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointArrivalDeparturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointArrivalsSignalErrorFull() instead")
    void stopPointArrivalsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointArrivalsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointCrowdingSignalErrorFull() instead")
    void stopPointCrowdingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointCrowdingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointDirectionSignalErrorFull() instead")
    void stopPointDirectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointDirectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointDisruptionSignalErrorFull() instead")
    void stopPointDisruptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointDisruptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointDisruptionByModeSignalErrorFull() instead")
    void stopPointDisruptionByModeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointDisruptionByModeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointGetSignalErrorFull() instead")
    void stopPointGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointGetByGeoPointSignalErrorFull() instead")
    void stopPointGetByGeoPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointGetByGeoPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointGetByModeSignalErrorFull() instead")
    void stopPointGetByModeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointGetByModeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointGetBySmsSignalErrorFull() instead")
    void stopPointGetBySmsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointGetBySmsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointGetByTypeSignalErrorFull() instead")
    void stopPointGetByTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointGetByTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointGetByTypeWithPaginationSignalErrorFull() instead")
    void stopPointGetByTypeWithPaginationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointGetByTypeWithPaginationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointGetCarParksByIdSignalErrorFull() instead")
    void stopPointGetCarParksByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointGetCarParksByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointGetServiceTypesSignalErrorFull() instead")
    void stopPointGetServiceTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointGetServiceTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointGetTaxiRanksByIdsSignalErrorFull() instead")
    void stopPointGetTaxiRanksByIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointGetTaxiRanksByIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointIdPlaceTypesGetSignalErrorFull() instead")
    void stopPointIdPlaceTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointIdPlaceTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointMetaCategoriesSignalErrorFull() instead")
    void stopPointMetaCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointMetaCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointMetaModesSignalErrorFull() instead")
    void stopPointMetaModesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointMetaModesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointMetaStopTypesSignalErrorFull() instead")
    void stopPointMetaStopTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointMetaStopTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointReachableFromSignalErrorFull() instead")
    void stopPointReachableFromSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointReachableFromSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointRouteSignalErrorFull() instead")
    void stopPointRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointSearchSignalErrorFull() instead")
    void stopPointSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPointSearchGetSignalErrorFull() instead")
    void stopPointSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPointSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
