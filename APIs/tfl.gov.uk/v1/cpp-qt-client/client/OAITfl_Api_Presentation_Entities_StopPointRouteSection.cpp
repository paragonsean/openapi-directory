/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_StopPointRouteSection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_StopPointRouteSection::OAITfl_Api_Presentation_Entities_StopPointRouteSection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_StopPointRouteSection::OAITfl_Api_Presentation_Entities_StopPointRouteSection() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_StopPointRouteSection::~OAITfl_Api_Presentation_Entities_StopPointRouteSection() {}

void OAITfl_Api_Presentation_Entities_StopPointRouteSection::initializeModel() {

    m_destination_name_isSet = false;
    m_destination_name_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_line_id_isSet = false;
    m_line_id_isValid = false;

    m_line_string_isSet = false;
    m_line_string_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_naptan_id_isSet = false;
    m_naptan_id_isValid = false;

    m_route_section_name_isSet = false;
    m_route_section_name_isValid = false;

    m_service_type_isSet = false;
    m_service_type_isValid = false;

    m_valid_from_isSet = false;
    m_valid_from_isValid = false;

    m_valid_to_isSet = false;
    m_valid_to_isValid = false;

    m_vehicle_destination_text_isSet = false;
    m_vehicle_destination_text_isValid = false;
}

void OAITfl_Api_Presentation_Entities_StopPointRouteSection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_StopPointRouteSection::fromJsonObject(QJsonObject json) {

    m_destination_name_isValid = ::OpenAPI::fromJsonValue(m_destination_name, json[QString("destinationName")]);
    m_destination_name_isSet = !json[QString("destinationName")].isNull() && m_destination_name_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_line_id_isValid = ::OpenAPI::fromJsonValue(m_line_id, json[QString("lineId")]);
    m_line_id_isSet = !json[QString("lineId")].isNull() && m_line_id_isValid;

    m_line_string_isValid = ::OpenAPI::fromJsonValue(m_line_string, json[QString("lineString")]);
    m_line_string_isSet = !json[QString("lineString")].isNull() && m_line_string_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_naptan_id_isValid = ::OpenAPI::fromJsonValue(m_naptan_id, json[QString("naptanId")]);
    m_naptan_id_isSet = !json[QString("naptanId")].isNull() && m_naptan_id_isValid;

    m_route_section_name_isValid = ::OpenAPI::fromJsonValue(m_route_section_name, json[QString("routeSectionName")]);
    m_route_section_name_isSet = !json[QString("routeSectionName")].isNull() && m_route_section_name_isValid;

    m_service_type_isValid = ::OpenAPI::fromJsonValue(m_service_type, json[QString("serviceType")]);
    m_service_type_isSet = !json[QString("serviceType")].isNull() && m_service_type_isValid;

    m_valid_from_isValid = ::OpenAPI::fromJsonValue(m_valid_from, json[QString("validFrom")]);
    m_valid_from_isSet = !json[QString("validFrom")].isNull() && m_valid_from_isValid;

    m_valid_to_isValid = ::OpenAPI::fromJsonValue(m_valid_to, json[QString("validTo")]);
    m_valid_to_isSet = !json[QString("validTo")].isNull() && m_valid_to_isValid;

    m_vehicle_destination_text_isValid = ::OpenAPI::fromJsonValue(m_vehicle_destination_text, json[QString("vehicleDestinationText")]);
    m_vehicle_destination_text_isSet = !json[QString("vehicleDestinationText")].isNull() && m_vehicle_destination_text_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPointRouteSection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_StopPointRouteSection::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_name_isSet) {
        obj.insert(QString("destinationName"), ::OpenAPI::toJsonValue(m_destination_name));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_line_id_isSet) {
        obj.insert(QString("lineId"), ::OpenAPI::toJsonValue(m_line_id));
    }
    if (m_line_string_isSet) {
        obj.insert(QString("lineString"), ::OpenAPI::toJsonValue(m_line_string));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_naptan_id_isSet) {
        obj.insert(QString("naptanId"), ::OpenAPI::toJsonValue(m_naptan_id));
    }
    if (m_route_section_name_isSet) {
        obj.insert(QString("routeSectionName"), ::OpenAPI::toJsonValue(m_route_section_name));
    }
    if (m_service_type_isSet) {
        obj.insert(QString("serviceType"), ::OpenAPI::toJsonValue(m_service_type));
    }
    if (m_valid_from_isSet) {
        obj.insert(QString("validFrom"), ::OpenAPI::toJsonValue(m_valid_from));
    }
    if (m_valid_to_isSet) {
        obj.insert(QString("validTo"), ::OpenAPI::toJsonValue(m_valid_to));
    }
    if (m_vehicle_destination_text_isSet) {
        obj.insert(QString("vehicleDestinationText"), ::OpenAPI::toJsonValue(m_vehicle_destination_text));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_StopPointRouteSection::getDestinationName() const {
    return m_destination_name;
}
void OAITfl_Api_Presentation_Entities_StopPointRouteSection::setDestinationName(const QString &destination_name) {
    m_destination_name = destination_name;
    m_destination_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_destination_name_Set() const{
    return m_destination_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_destination_name_Valid() const{
    return m_destination_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPointRouteSection::getDirection() const {
    return m_direction;
}
void OAITfl_Api_Presentation_Entities_StopPointRouteSection::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_direction_Valid() const{
    return m_direction_isValid;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::isIsActive() const {
    return m_is_active;
}
void OAITfl_Api_Presentation_Entities_StopPointRouteSection::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPointRouteSection::getLineId() const {
    return m_line_id;
}
void OAITfl_Api_Presentation_Entities_StopPointRouteSection::setLineId(const QString &line_id) {
    m_line_id = line_id;
    m_line_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_line_id_Set() const{
    return m_line_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_line_id_Valid() const{
    return m_line_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPointRouteSection::getLineString() const {
    return m_line_string;
}
void OAITfl_Api_Presentation_Entities_StopPointRouteSection::setLineString(const QString &line_string) {
    m_line_string = line_string;
    m_line_string_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_line_string_Set() const{
    return m_line_string_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_line_string_Valid() const{
    return m_line_string_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPointRouteSection::getMode() const {
    return m_mode;
}
void OAITfl_Api_Presentation_Entities_StopPointRouteSection::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPointRouteSection::getNaptanId() const {
    return m_naptan_id;
}
void OAITfl_Api_Presentation_Entities_StopPointRouteSection::setNaptanId(const QString &naptan_id) {
    m_naptan_id = naptan_id;
    m_naptan_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_naptan_id_Set() const{
    return m_naptan_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_naptan_id_Valid() const{
    return m_naptan_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPointRouteSection::getRouteSectionName() const {
    return m_route_section_name;
}
void OAITfl_Api_Presentation_Entities_StopPointRouteSection::setRouteSectionName(const QString &route_section_name) {
    m_route_section_name = route_section_name;
    m_route_section_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_route_section_name_Set() const{
    return m_route_section_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_route_section_name_Valid() const{
    return m_route_section_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPointRouteSection::getServiceType() const {
    return m_service_type;
}
void OAITfl_Api_Presentation_Entities_StopPointRouteSection::setServiceType(const QString &service_type) {
    m_service_type = service_type;
    m_service_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_service_type_Set() const{
    return m_service_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_service_type_Valid() const{
    return m_service_type_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_StopPointRouteSection::getValidFrom() const {
    return m_valid_from;
}
void OAITfl_Api_Presentation_Entities_StopPointRouteSection::setValidFrom(const QDateTime &valid_from) {
    m_valid_from = valid_from;
    m_valid_from_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_valid_from_Set() const{
    return m_valid_from_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_valid_from_Valid() const{
    return m_valid_from_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_StopPointRouteSection::getValidTo() const {
    return m_valid_to;
}
void OAITfl_Api_Presentation_Entities_StopPointRouteSection::setValidTo(const QDateTime &valid_to) {
    m_valid_to = valid_to;
    m_valid_to_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_valid_to_Set() const{
    return m_valid_to_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_valid_to_Valid() const{
    return m_valid_to_isValid;
}

QString OAITfl_Api_Presentation_Entities_StopPointRouteSection::getVehicleDestinationText() const {
    return m_vehicle_destination_text;
}
void OAITfl_Api_Presentation_Entities_StopPointRouteSection::setVehicleDestinationText(const QString &vehicle_destination_text) {
    m_vehicle_destination_text = vehicle_destination_text;
    m_vehicle_destination_text_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_vehicle_destination_text_Set() const{
    return m_vehicle_destination_text_isSet;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::is_vehicle_destination_text_Valid() const{
    return m_vehicle_destination_text_isValid;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_naptan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_section_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vehicle_destination_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_StopPointRouteSection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
