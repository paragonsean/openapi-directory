/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_RouteSequence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_RouteSequence::OAITfl_Api_Presentation_Entities_RouteSequence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_RouteSequence::OAITfl_Api_Presentation_Entities_RouteSequence() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_RouteSequence::~OAITfl_Api_Presentation_Entities_RouteSequence() {}

void OAITfl_Api_Presentation_Entities_RouteSequence::initializeModel() {

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_is_outbound_only_isSet = false;
    m_is_outbound_only_isValid = false;

    m_line_id_isSet = false;
    m_line_id_isValid = false;

    m_line_name_isSet = false;
    m_line_name_isValid = false;

    m_line_strings_isSet = false;
    m_line_strings_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_ordered_line_routes_isSet = false;
    m_ordered_line_routes_isValid = false;

    m_stations_isSet = false;
    m_stations_isValid = false;

    m_stop_point_sequences_isSet = false;
    m_stop_point_sequences_isValid = false;
}

void OAITfl_Api_Presentation_Entities_RouteSequence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_RouteSequence::fromJsonObject(QJsonObject json) {

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_is_outbound_only_isValid = ::OpenAPI::fromJsonValue(m_is_outbound_only, json[QString("isOutboundOnly")]);
    m_is_outbound_only_isSet = !json[QString("isOutboundOnly")].isNull() && m_is_outbound_only_isValid;

    m_line_id_isValid = ::OpenAPI::fromJsonValue(m_line_id, json[QString("lineId")]);
    m_line_id_isSet = !json[QString("lineId")].isNull() && m_line_id_isValid;

    m_line_name_isValid = ::OpenAPI::fromJsonValue(m_line_name, json[QString("lineName")]);
    m_line_name_isSet = !json[QString("lineName")].isNull() && m_line_name_isValid;

    m_line_strings_isValid = ::OpenAPI::fromJsonValue(m_line_strings, json[QString("lineStrings")]);
    m_line_strings_isSet = !json[QString("lineStrings")].isNull() && m_line_strings_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_ordered_line_routes_isValid = ::OpenAPI::fromJsonValue(m_ordered_line_routes, json[QString("orderedLineRoutes")]);
    m_ordered_line_routes_isSet = !json[QString("orderedLineRoutes")].isNull() && m_ordered_line_routes_isValid;

    m_stations_isValid = ::OpenAPI::fromJsonValue(m_stations, json[QString("stations")]);
    m_stations_isSet = !json[QString("stations")].isNull() && m_stations_isValid;

    m_stop_point_sequences_isValid = ::OpenAPI::fromJsonValue(m_stop_point_sequences, json[QString("stopPointSequences")]);
    m_stop_point_sequences_isSet = !json[QString("stopPointSequences")].isNull() && m_stop_point_sequences_isValid;
}

QString OAITfl_Api_Presentation_Entities_RouteSequence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_RouteSequence::asJsonObject() const {
    QJsonObject obj;
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_is_outbound_only_isSet) {
        obj.insert(QString("isOutboundOnly"), ::OpenAPI::toJsonValue(m_is_outbound_only));
    }
    if (m_line_id_isSet) {
        obj.insert(QString("lineId"), ::OpenAPI::toJsonValue(m_line_id));
    }
    if (m_line_name_isSet) {
        obj.insert(QString("lineName"), ::OpenAPI::toJsonValue(m_line_name));
    }
    if (m_line_strings.size() > 0) {
        obj.insert(QString("lineStrings"), ::OpenAPI::toJsonValue(m_line_strings));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_ordered_line_routes.size() > 0) {
        obj.insert(QString("orderedLineRoutes"), ::OpenAPI::toJsonValue(m_ordered_line_routes));
    }
    if (m_stations.size() > 0) {
        obj.insert(QString("stations"), ::OpenAPI::toJsonValue(m_stations));
    }
    if (m_stop_point_sequences.size() > 0) {
        obj.insert(QString("stopPointSequences"), ::OpenAPI::toJsonValue(m_stop_point_sequences));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_RouteSequence::getDirection() const {
    return m_direction;
}
void OAITfl_Api_Presentation_Entities_RouteSequence::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::is_direction_Valid() const{
    return m_direction_isValid;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::isIsOutboundOnly() const {
    return m_is_outbound_only;
}
void OAITfl_Api_Presentation_Entities_RouteSequence::setIsOutboundOnly(const bool &is_outbound_only) {
    m_is_outbound_only = is_outbound_only;
    m_is_outbound_only_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::is_is_outbound_only_Set() const{
    return m_is_outbound_only_isSet;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::is_is_outbound_only_Valid() const{
    return m_is_outbound_only_isValid;
}

QString OAITfl_Api_Presentation_Entities_RouteSequence::getLineId() const {
    return m_line_id;
}
void OAITfl_Api_Presentation_Entities_RouteSequence::setLineId(const QString &line_id) {
    m_line_id = line_id;
    m_line_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::is_line_id_Set() const{
    return m_line_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::is_line_id_Valid() const{
    return m_line_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_RouteSequence::getLineName() const {
    return m_line_name;
}
void OAITfl_Api_Presentation_Entities_RouteSequence::setLineName(const QString &line_name) {
    m_line_name = line_name;
    m_line_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::is_line_name_Set() const{
    return m_line_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::is_line_name_Valid() const{
    return m_line_name_isValid;
}

QList<QString> OAITfl_Api_Presentation_Entities_RouteSequence::getLineStrings() const {
    return m_line_strings;
}
void OAITfl_Api_Presentation_Entities_RouteSequence::setLineStrings(const QList<QString> &line_strings) {
    m_line_strings = line_strings;
    m_line_strings_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::is_line_strings_Set() const{
    return m_line_strings_isSet;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::is_line_strings_Valid() const{
    return m_line_strings_isValid;
}

QString OAITfl_Api_Presentation_Entities_RouteSequence::getMode() const {
    return m_mode;
}
void OAITfl_Api_Presentation_Entities_RouteSequence::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::is_mode_Valid() const{
    return m_mode_isValid;
}

QList<OAITfl_Api_Presentation_Entities_OrderedRoute> OAITfl_Api_Presentation_Entities_RouteSequence::getOrderedLineRoutes() const {
    return m_ordered_line_routes;
}
void OAITfl_Api_Presentation_Entities_RouteSequence::setOrderedLineRoutes(const QList<OAITfl_Api_Presentation_Entities_OrderedRoute> &ordered_line_routes) {
    m_ordered_line_routes = ordered_line_routes;
    m_ordered_line_routes_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::is_ordered_line_routes_Set() const{
    return m_ordered_line_routes_isSet;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::is_ordered_line_routes_Valid() const{
    return m_ordered_line_routes_isValid;
}

QList<OAITfl_Api_Presentation_Entities_MatchedStop> OAITfl_Api_Presentation_Entities_RouteSequence::getStations() const {
    return m_stations;
}
void OAITfl_Api_Presentation_Entities_RouteSequence::setStations(const QList<OAITfl_Api_Presentation_Entities_MatchedStop> &stations) {
    m_stations = stations;
    m_stations_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::is_stations_Set() const{
    return m_stations_isSet;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::is_stations_Valid() const{
    return m_stations_isValid;
}

QList<OAITfl_Api_Presentation_Entities_StopPointSequence> OAITfl_Api_Presentation_Entities_RouteSequence::getStopPointSequences() const {
    return m_stop_point_sequences;
}
void OAITfl_Api_Presentation_Entities_RouteSequence::setStopPointSequences(const QList<OAITfl_Api_Presentation_Entities_StopPointSequence> &stop_point_sequences) {
    m_stop_point_sequences = stop_point_sequences;
    m_stop_point_sequences_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::is_stop_point_sequences_Set() const{
    return m_stop_point_sequences_isSet;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::is_stop_point_sequences_Valid() const{
    return m_stop_point_sequences_isValid;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_outbound_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_strings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordered_line_routes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_point_sequences.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_RouteSequence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
