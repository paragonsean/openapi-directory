/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Coordinate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Coordinate::OAITfl_Api_Presentation_Entities_Coordinate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Coordinate::OAITfl_Api_Presentation_Entities_Coordinate() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Coordinate::~OAITfl_Api_Presentation_Entities_Coordinate() {}

void OAITfl_Api_Presentation_Entities_Coordinate::initializeModel() {

    m_easting_isSet = false;
    m_easting_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_northing_isSet = false;
    m_northing_isValid = false;

    m_x_coord_isSet = false;
    m_x_coord_isValid = false;

    m_y_coord_isSet = false;
    m_y_coord_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Coordinate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Coordinate::fromJsonObject(QJsonObject json) {

    m_easting_isValid = ::OpenAPI::fromJsonValue(m_easting, json[QString("easting")]);
    m_easting_isSet = !json[QString("easting")].isNull() && m_easting_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_northing_isValid = ::OpenAPI::fromJsonValue(m_northing, json[QString("northing")]);
    m_northing_isSet = !json[QString("northing")].isNull() && m_northing_isValid;

    m_x_coord_isValid = ::OpenAPI::fromJsonValue(m_x_coord, json[QString("xCoord")]);
    m_x_coord_isSet = !json[QString("xCoord")].isNull() && m_x_coord_isValid;

    m_y_coord_isValid = ::OpenAPI::fromJsonValue(m_y_coord, json[QString("yCoord")]);
    m_y_coord_isSet = !json[QString("yCoord")].isNull() && m_y_coord_isValid;
}

QString OAITfl_Api_Presentation_Entities_Coordinate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Coordinate::asJsonObject() const {
    QJsonObject obj;
    if (m_easting_isSet) {
        obj.insert(QString("easting"), ::OpenAPI::toJsonValue(m_easting));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_northing_isSet) {
        obj.insert(QString("northing"), ::OpenAPI::toJsonValue(m_northing));
    }
    if (m_x_coord_isSet) {
        obj.insert(QString("xCoord"), ::OpenAPI::toJsonValue(m_x_coord));
    }
    if (m_y_coord_isSet) {
        obj.insert(QString("yCoord"), ::OpenAPI::toJsonValue(m_y_coord));
    }
    return obj;
}

double OAITfl_Api_Presentation_Entities_Coordinate::getEasting() const {
    return m_easting;
}
void OAITfl_Api_Presentation_Entities_Coordinate::setEasting(const double &easting) {
    m_easting = easting;
    m_easting_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Coordinate::is_easting_Set() const{
    return m_easting_isSet;
}

bool OAITfl_Api_Presentation_Entities_Coordinate::is_easting_Valid() const{
    return m_easting_isValid;
}

double OAITfl_Api_Presentation_Entities_Coordinate::getLatitude() const {
    return m_latitude;
}
void OAITfl_Api_Presentation_Entities_Coordinate::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Coordinate::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAITfl_Api_Presentation_Entities_Coordinate::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAITfl_Api_Presentation_Entities_Coordinate::getLongitude() const {
    return m_longitude;
}
void OAITfl_Api_Presentation_Entities_Coordinate::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Coordinate::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAITfl_Api_Presentation_Entities_Coordinate::is_longitude_Valid() const{
    return m_longitude_isValid;
}

double OAITfl_Api_Presentation_Entities_Coordinate::getNorthing() const {
    return m_northing;
}
void OAITfl_Api_Presentation_Entities_Coordinate::setNorthing(const double &northing) {
    m_northing = northing;
    m_northing_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Coordinate::is_northing_Set() const{
    return m_northing_isSet;
}

bool OAITfl_Api_Presentation_Entities_Coordinate::is_northing_Valid() const{
    return m_northing_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_Coordinate::getXCoord() const {
    return m_x_coord;
}
void OAITfl_Api_Presentation_Entities_Coordinate::setXCoord(const qint32 &x_coord) {
    m_x_coord = x_coord;
    m_x_coord_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Coordinate::is_x_coord_Set() const{
    return m_x_coord_isSet;
}

bool OAITfl_Api_Presentation_Entities_Coordinate::is_x_coord_Valid() const{
    return m_x_coord_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_Coordinate::getYCoord() const {
    return m_y_coord;
}
void OAITfl_Api_Presentation_Entities_Coordinate::setYCoord(const qint32 &y_coord) {
    m_y_coord = y_coord;
    m_y_coord_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Coordinate::is_y_coord_Set() const{
    return m_y_coord_isSet;
}

bool OAITfl_Api_Presentation_Entities_Coordinate::is_y_coord_Valid() const{
    return m_y_coord_isValid;
}

bool OAITfl_Api_Presentation_Entities_Coordinate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_easting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_northing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_coord_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_coord_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Coordinate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
