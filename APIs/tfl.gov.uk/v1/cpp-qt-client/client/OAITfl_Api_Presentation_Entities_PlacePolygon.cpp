/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_PlacePolygon.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_PlacePolygon::OAITfl_Api_Presentation_Entities_PlacePolygon(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_PlacePolygon::OAITfl_Api_Presentation_Entities_PlacePolygon() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_PlacePolygon::~OAITfl_Api_Presentation_Entities_PlacePolygon() {}

void OAITfl_Api_Presentation_Entities_PlacePolygon::initializeModel() {

    m_common_name_isSet = false;
    m_common_name_isValid = false;

    m_geo_points_isSet = false;
    m_geo_points_isValid = false;
}

void OAITfl_Api_Presentation_Entities_PlacePolygon::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_PlacePolygon::fromJsonObject(QJsonObject json) {

    m_common_name_isValid = ::OpenAPI::fromJsonValue(m_common_name, json[QString("commonName")]);
    m_common_name_isSet = !json[QString("commonName")].isNull() && m_common_name_isValid;

    m_geo_points_isValid = ::OpenAPI::fromJsonValue(m_geo_points, json[QString("geoPoints")]);
    m_geo_points_isSet = !json[QString("geoPoints")].isNull() && m_geo_points_isValid;
}

QString OAITfl_Api_Presentation_Entities_PlacePolygon::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_PlacePolygon::asJsonObject() const {
    QJsonObject obj;
    if (m_common_name_isSet) {
        obj.insert(QString("commonName"), ::OpenAPI::toJsonValue(m_common_name));
    }
    if (m_geo_points.size() > 0) {
        obj.insert(QString("geoPoints"), ::OpenAPI::toJsonValue(m_geo_points));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_PlacePolygon::getCommonName() const {
    return m_common_name;
}
void OAITfl_Api_Presentation_Entities_PlacePolygon::setCommonName(const QString &common_name) {
    m_common_name = common_name;
    m_common_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_PlacePolygon::is_common_name_Set() const{
    return m_common_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_PlacePolygon::is_common_name_Valid() const{
    return m_common_name_isValid;
}

QList<OAITfl_Api_Common_GeoPoint> OAITfl_Api_Presentation_Entities_PlacePolygon::getGeoPoints() const {
    return m_geo_points;
}
void OAITfl_Api_Presentation_Entities_PlacePolygon::setGeoPoints(const QList<OAITfl_Api_Common_GeoPoint> &geo_points) {
    m_geo_points = geo_points;
    m_geo_points_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_PlacePolygon::is_geo_points_Set() const{
    return m_geo_points_isSet;
}

bool OAITfl_Api_Presentation_Entities_PlacePolygon::is_geo_points_Valid() const{
    return m_geo_points_isValid;
}

bool OAITfl_Api_Presentation_Entities_PlacePolygon::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_PlacePolygon::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
