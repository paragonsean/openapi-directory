/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_LineRouteSection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_LineRouteSection::OAITfl_Api_Presentation_Entities_LineRouteSection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_LineRouteSection::OAITfl_Api_Presentation_Entities_LineRouteSection() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_LineRouteSection::~OAITfl_Api_Presentation_Entities_LineRouteSection() {}

void OAITfl_Api_Presentation_Entities_LineRouteSection::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_from_station_isSet = false;
    m_from_station_isValid = false;

    m_route_id_isSet = false;
    m_route_id_isValid = false;

    m_service_type_isSet = false;
    m_service_type_isValid = false;

    m_to_station_isSet = false;
    m_to_station_isValid = false;

    m_vehicle_destination_text_isSet = false;
    m_vehicle_destination_text_isValid = false;
}

void OAITfl_Api_Presentation_Entities_LineRouteSection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_LineRouteSection::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_from_station_isValid = ::OpenAPI::fromJsonValue(m_from_station, json[QString("fromStation")]);
    m_from_station_isSet = !json[QString("fromStation")].isNull() && m_from_station_isValid;

    m_route_id_isValid = ::OpenAPI::fromJsonValue(m_route_id, json[QString("routeId")]);
    m_route_id_isSet = !json[QString("routeId")].isNull() && m_route_id_isValid;

    m_service_type_isValid = ::OpenAPI::fromJsonValue(m_service_type, json[QString("serviceType")]);
    m_service_type_isSet = !json[QString("serviceType")].isNull() && m_service_type_isValid;

    m_to_station_isValid = ::OpenAPI::fromJsonValue(m_to_station, json[QString("toStation")]);
    m_to_station_isSet = !json[QString("toStation")].isNull() && m_to_station_isValid;

    m_vehicle_destination_text_isValid = ::OpenAPI::fromJsonValue(m_vehicle_destination_text, json[QString("vehicleDestinationText")]);
    m_vehicle_destination_text_isSet = !json[QString("vehicleDestinationText")].isNull() && m_vehicle_destination_text_isValid;
}

QString OAITfl_Api_Presentation_Entities_LineRouteSection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_LineRouteSection::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_from_station_isSet) {
        obj.insert(QString("fromStation"), ::OpenAPI::toJsonValue(m_from_station));
    }
    if (m_route_id_isSet) {
        obj.insert(QString("routeId"), ::OpenAPI::toJsonValue(m_route_id));
    }
    if (m_service_type_isSet) {
        obj.insert(QString("serviceType"), ::OpenAPI::toJsonValue(m_service_type));
    }
    if (m_to_station_isSet) {
        obj.insert(QString("toStation"), ::OpenAPI::toJsonValue(m_to_station));
    }
    if (m_vehicle_destination_text_isSet) {
        obj.insert(QString("vehicleDestinationText"), ::OpenAPI::toJsonValue(m_vehicle_destination_text));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_LineRouteSection::getDestination() const {
    return m_destination;
}
void OAITfl_Api_Presentation_Entities_LineRouteSection::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineRouteSection::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineRouteSection::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAITfl_Api_Presentation_Entities_LineRouteSection::getDirection() const {
    return m_direction;
}
void OAITfl_Api_Presentation_Entities_LineRouteSection::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineRouteSection::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineRouteSection::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAITfl_Api_Presentation_Entities_LineRouteSection::getFromStation() const {
    return m_from_station;
}
void OAITfl_Api_Presentation_Entities_LineRouteSection::setFromStation(const QString &from_station) {
    m_from_station = from_station;
    m_from_station_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineRouteSection::is_from_station_Set() const{
    return m_from_station_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineRouteSection::is_from_station_Valid() const{
    return m_from_station_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_LineRouteSection::getRouteId() const {
    return m_route_id;
}
void OAITfl_Api_Presentation_Entities_LineRouteSection::setRouteId(const qint32 &route_id) {
    m_route_id = route_id;
    m_route_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineRouteSection::is_route_id_Set() const{
    return m_route_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineRouteSection::is_route_id_Valid() const{
    return m_route_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_LineRouteSection::getServiceType() const {
    return m_service_type;
}
void OAITfl_Api_Presentation_Entities_LineRouteSection::setServiceType(const QString &service_type) {
    m_service_type = service_type;
    m_service_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineRouteSection::is_service_type_Set() const{
    return m_service_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineRouteSection::is_service_type_Valid() const{
    return m_service_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_LineRouteSection::getToStation() const {
    return m_to_station;
}
void OAITfl_Api_Presentation_Entities_LineRouteSection::setToStation(const QString &to_station) {
    m_to_station = to_station;
    m_to_station_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineRouteSection::is_to_station_Set() const{
    return m_to_station_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineRouteSection::is_to_station_Valid() const{
    return m_to_station_isValid;
}

QString OAITfl_Api_Presentation_Entities_LineRouteSection::getVehicleDestinationText() const {
    return m_vehicle_destination_text;
}
void OAITfl_Api_Presentation_Entities_LineRouteSection::setVehicleDestinationText(const QString &vehicle_destination_text) {
    m_vehicle_destination_text = vehicle_destination_text;
    m_vehicle_destination_text_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineRouteSection::is_vehicle_destination_text_Set() const{
    return m_vehicle_destination_text_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineRouteSection::is_vehicle_destination_text_Valid() const{
    return m_vehicle_destination_text_isValid;
}

bool OAITfl_Api_Presentation_Entities_LineRouteSection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_station_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_station_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vehicle_destination_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_LineRouteSection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
