/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_MatchedRoute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_MatchedRoute::OAITfl_Api_Presentation_Entities_MatchedRoute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_MatchedRoute::OAITfl_Api_Presentation_Entities_MatchedRoute() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_MatchedRoute::~OAITfl_Api_Presentation_Entities_MatchedRoute() {}

void OAITfl_Api_Presentation_Entities_MatchedRoute::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_destination_name_isSet = false;
    m_destination_name_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_origination_name_isSet = false;
    m_origination_name_isValid = false;

    m_originator_isSet = false;
    m_originator_isValid = false;

    m_route_code_isSet = false;
    m_route_code_isValid = false;

    m_service_type_isSet = false;
    m_service_type_isValid = false;

    m_valid_from_isSet = false;
    m_valid_from_isValid = false;

    m_valid_to_isSet = false;
    m_valid_to_isValid = false;
}

void OAITfl_Api_Presentation_Entities_MatchedRoute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_MatchedRoute::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_destination_name_isValid = ::OpenAPI::fromJsonValue(m_destination_name, json[QString("destinationName")]);
    m_destination_name_isSet = !json[QString("destinationName")].isNull() && m_destination_name_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_origination_name_isValid = ::OpenAPI::fromJsonValue(m_origination_name, json[QString("originationName")]);
    m_origination_name_isSet = !json[QString("originationName")].isNull() && m_origination_name_isValid;

    m_originator_isValid = ::OpenAPI::fromJsonValue(m_originator, json[QString("originator")]);
    m_originator_isSet = !json[QString("originator")].isNull() && m_originator_isValid;

    m_route_code_isValid = ::OpenAPI::fromJsonValue(m_route_code, json[QString("routeCode")]);
    m_route_code_isSet = !json[QString("routeCode")].isNull() && m_route_code_isValid;

    m_service_type_isValid = ::OpenAPI::fromJsonValue(m_service_type, json[QString("serviceType")]);
    m_service_type_isSet = !json[QString("serviceType")].isNull() && m_service_type_isValid;

    m_valid_from_isValid = ::OpenAPI::fromJsonValue(m_valid_from, json[QString("validFrom")]);
    m_valid_from_isSet = !json[QString("validFrom")].isNull() && m_valid_from_isValid;

    m_valid_to_isValid = ::OpenAPI::fromJsonValue(m_valid_to, json[QString("validTo")]);
    m_valid_to_isSet = !json[QString("validTo")].isNull() && m_valid_to_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedRoute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_MatchedRoute::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_destination_name_isSet) {
        obj.insert(QString("destinationName"), ::OpenAPI::toJsonValue(m_destination_name));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_origination_name_isSet) {
        obj.insert(QString("originationName"), ::OpenAPI::toJsonValue(m_origination_name));
    }
    if (m_originator_isSet) {
        obj.insert(QString("originator"), ::OpenAPI::toJsonValue(m_originator));
    }
    if (m_route_code_isSet) {
        obj.insert(QString("routeCode"), ::OpenAPI::toJsonValue(m_route_code));
    }
    if (m_service_type_isSet) {
        obj.insert(QString("serviceType"), ::OpenAPI::toJsonValue(m_service_type));
    }
    if (m_valid_from_isSet) {
        obj.insert(QString("validFrom"), ::OpenAPI::toJsonValue(m_valid_from));
    }
    if (m_valid_to_isSet) {
        obj.insert(QString("validTo"), ::OpenAPI::toJsonValue(m_valid_to));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_MatchedRoute::getDestination() const {
    return m_destination;
}
void OAITfl_Api_Presentation_Entities_MatchedRoute::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedRoute::getDestinationName() const {
    return m_destination_name;
}
void OAITfl_Api_Presentation_Entities_MatchedRoute::setDestinationName(const QString &destination_name) {
    m_destination_name = destination_name;
    m_destination_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_destination_name_Set() const{
    return m_destination_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_destination_name_Valid() const{
    return m_destination_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedRoute::getDirection() const {
    return m_direction;
}
void OAITfl_Api_Presentation_Entities_MatchedRoute::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedRoute::getName() const {
    return m_name;
}
void OAITfl_Api_Presentation_Entities_MatchedRoute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_name_Set() const{
    return m_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedRoute::getOriginationName() const {
    return m_origination_name;
}
void OAITfl_Api_Presentation_Entities_MatchedRoute::setOriginationName(const QString &origination_name) {
    m_origination_name = origination_name;
    m_origination_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_origination_name_Set() const{
    return m_origination_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_origination_name_Valid() const{
    return m_origination_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedRoute::getOriginator() const {
    return m_originator;
}
void OAITfl_Api_Presentation_Entities_MatchedRoute::setOriginator(const QString &originator) {
    m_originator = originator;
    m_originator_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_originator_Set() const{
    return m_originator_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_originator_Valid() const{
    return m_originator_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedRoute::getRouteCode() const {
    return m_route_code;
}
void OAITfl_Api_Presentation_Entities_MatchedRoute::setRouteCode(const QString &route_code) {
    m_route_code = route_code;
    m_route_code_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_route_code_Set() const{
    return m_route_code_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_route_code_Valid() const{
    return m_route_code_isValid;
}

QString OAITfl_Api_Presentation_Entities_MatchedRoute::getServiceType() const {
    return m_service_type;
}
void OAITfl_Api_Presentation_Entities_MatchedRoute::setServiceType(const QString &service_type) {
    m_service_type = service_type;
    m_service_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_service_type_Set() const{
    return m_service_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_service_type_Valid() const{
    return m_service_type_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_MatchedRoute::getValidFrom() const {
    return m_valid_from;
}
void OAITfl_Api_Presentation_Entities_MatchedRoute::setValidFrom(const QDateTime &valid_from) {
    m_valid_from = valid_from;
    m_valid_from_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_valid_from_Set() const{
    return m_valid_from_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_valid_from_Valid() const{
    return m_valid_from_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_MatchedRoute::getValidTo() const {
    return m_valid_to;
}
void OAITfl_Api_Presentation_Entities_MatchedRoute::setValidTo(const QDateTime &valid_to) {
    m_valid_to = valid_to;
    m_valid_to_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_valid_to_Set() const{
    return m_valid_to_isSet;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::is_valid_to_Valid() const{
    return m_valid_to_isValid;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_MatchedRoute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
