/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Common_ApiVersionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Common_ApiVersionInfo::OAITfl_Api_Common_ApiVersionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Common_ApiVersionInfo::OAITfl_Api_Common_ApiVersionInfo() {
    this->initializeModel();
}

OAITfl_Api_Common_ApiVersionInfo::~OAITfl_Api_Common_ApiVersionInfo() {}

void OAITfl_Api_Common_ApiVersionInfo::initializeModel() {

    m_assemblies_isSet = false;
    m_assemblies_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAITfl_Api_Common_ApiVersionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Common_ApiVersionInfo::fromJsonObject(QJsonObject json) {

    m_assemblies_isValid = ::OpenAPI::fromJsonValue(m_assemblies, json[QString("assemblies")]);
    m_assemblies_isSet = !json[QString("assemblies")].isNull() && m_assemblies_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAITfl_Api_Common_ApiVersionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Common_ApiVersionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_assemblies.size() > 0) {
        obj.insert(QString("assemblies"), ::OpenAPI::toJsonValue(m_assemblies));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<QString> OAITfl_Api_Common_ApiVersionInfo::getAssemblies() const {
    return m_assemblies;
}
void OAITfl_Api_Common_ApiVersionInfo::setAssemblies(const QList<QString> &assemblies) {
    m_assemblies = assemblies;
    m_assemblies_isSet = true;
}

bool OAITfl_Api_Common_ApiVersionInfo::is_assemblies_Set() const{
    return m_assemblies_isSet;
}

bool OAITfl_Api_Common_ApiVersionInfo::is_assemblies_Valid() const{
    return m_assemblies_isValid;
}

QString OAITfl_Api_Common_ApiVersionInfo::getLabel() const {
    return m_label;
}
void OAITfl_Api_Common_ApiVersionInfo::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAITfl_Api_Common_ApiVersionInfo::is_label_Set() const{
    return m_label_isSet;
}

bool OAITfl_Api_Common_ApiVersionInfo::is_label_Valid() const{
    return m_label_isValid;
}

QDateTime OAITfl_Api_Common_ApiVersionInfo::getTimestamp() const {
    return m_timestamp;
}
void OAITfl_Api_Common_ApiVersionInfo::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAITfl_Api_Common_ApiVersionInfo::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAITfl_Api_Common_ApiVersionInfo::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAITfl_Api_Common_ApiVersionInfo::getVersion() const {
    return m_version;
}
void OAITfl_Api_Common_ApiVersionInfo::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAITfl_Api_Common_ApiVersionInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAITfl_Api_Common_ApiVersionInfo::is_version_Valid() const{
    return m_version_isValid;
}

bool OAITfl_Api_Common_ApiVersionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assemblies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Common_ApiVersionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
