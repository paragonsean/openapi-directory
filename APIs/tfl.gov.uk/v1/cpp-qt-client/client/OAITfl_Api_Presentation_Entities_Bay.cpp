/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Bay.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Bay::OAITfl_Api_Presentation_Entities_Bay(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Bay::OAITfl_Api_Presentation_Entities_Bay() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Bay::~OAITfl_Api_Presentation_Entities_Bay() {}

void OAITfl_Api_Presentation_Entities_Bay::initializeModel() {

    m_bay_count_isSet = false;
    m_bay_count_isValid = false;

    m_bay_type_isSet = false;
    m_bay_type_isValid = false;

    m_free_isSet = false;
    m_free_isValid = false;

    m_occupied_isSet = false;
    m_occupied_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Bay::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Bay::fromJsonObject(QJsonObject json) {

    m_bay_count_isValid = ::OpenAPI::fromJsonValue(m_bay_count, json[QString("bayCount")]);
    m_bay_count_isSet = !json[QString("bayCount")].isNull() && m_bay_count_isValid;

    m_bay_type_isValid = ::OpenAPI::fromJsonValue(m_bay_type, json[QString("bayType")]);
    m_bay_type_isSet = !json[QString("bayType")].isNull() && m_bay_type_isValid;

    m_free_isValid = ::OpenAPI::fromJsonValue(m_free, json[QString("free")]);
    m_free_isSet = !json[QString("free")].isNull() && m_free_isValid;

    m_occupied_isValid = ::OpenAPI::fromJsonValue(m_occupied, json[QString("occupied")]);
    m_occupied_isSet = !json[QString("occupied")].isNull() && m_occupied_isValid;
}

QString OAITfl_Api_Presentation_Entities_Bay::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Bay::asJsonObject() const {
    QJsonObject obj;
    if (m_bay_count_isSet) {
        obj.insert(QString("bayCount"), ::OpenAPI::toJsonValue(m_bay_count));
    }
    if (m_bay_type_isSet) {
        obj.insert(QString("bayType"), ::OpenAPI::toJsonValue(m_bay_type));
    }
    if (m_free_isSet) {
        obj.insert(QString("free"), ::OpenAPI::toJsonValue(m_free));
    }
    if (m_occupied_isSet) {
        obj.insert(QString("occupied"), ::OpenAPI::toJsonValue(m_occupied));
    }
    return obj;
}

qint32 OAITfl_Api_Presentation_Entities_Bay::getBayCount() const {
    return m_bay_count;
}
void OAITfl_Api_Presentation_Entities_Bay::setBayCount(const qint32 &bay_count) {
    m_bay_count = bay_count;
    m_bay_count_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Bay::is_bay_count_Set() const{
    return m_bay_count_isSet;
}

bool OAITfl_Api_Presentation_Entities_Bay::is_bay_count_Valid() const{
    return m_bay_count_isValid;
}

QString OAITfl_Api_Presentation_Entities_Bay::getBayType() const {
    return m_bay_type;
}
void OAITfl_Api_Presentation_Entities_Bay::setBayType(const QString &bay_type) {
    m_bay_type = bay_type;
    m_bay_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Bay::is_bay_type_Set() const{
    return m_bay_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_Bay::is_bay_type_Valid() const{
    return m_bay_type_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_Bay::getFree() const {
    return m_free;
}
void OAITfl_Api_Presentation_Entities_Bay::setFree(const qint32 &free) {
    m_free = free;
    m_free_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Bay::is_free_Set() const{
    return m_free_isSet;
}

bool OAITfl_Api_Presentation_Entities_Bay::is_free_Valid() const{
    return m_free_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_Bay::getOccupied() const {
    return m_occupied;
}
void OAITfl_Api_Presentation_Entities_Bay::setOccupied(const qint32 &occupied) {
    m_occupied = occupied;
    m_occupied_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Bay::is_occupied_Set() const{
    return m_occupied_isSet;
}

bool OAITfl_Api_Presentation_Entities_Bay::is_occupied_Valid() const{
    return m_occupied_isValid;
}

bool OAITfl_Api_Presentation_Entities_Bay::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bay_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bay_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occupied_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Bay::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
