/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_LineGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_LineGroup::OAITfl_Api_Presentation_Entities_LineGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_LineGroup::OAITfl_Api_Presentation_Entities_LineGroup() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_LineGroup::~OAITfl_Api_Presentation_Entities_LineGroup() {}

void OAITfl_Api_Presentation_Entities_LineGroup::initializeModel() {

    m_line_identifier_isSet = false;
    m_line_identifier_isValid = false;

    m_naptan_id_reference_isSet = false;
    m_naptan_id_reference_isValid = false;

    m_station_atco_code_isSet = false;
    m_station_atco_code_isValid = false;
}

void OAITfl_Api_Presentation_Entities_LineGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_LineGroup::fromJsonObject(QJsonObject json) {

    m_line_identifier_isValid = ::OpenAPI::fromJsonValue(m_line_identifier, json[QString("lineIdentifier")]);
    m_line_identifier_isSet = !json[QString("lineIdentifier")].isNull() && m_line_identifier_isValid;

    m_naptan_id_reference_isValid = ::OpenAPI::fromJsonValue(m_naptan_id_reference, json[QString("naptanIdReference")]);
    m_naptan_id_reference_isSet = !json[QString("naptanIdReference")].isNull() && m_naptan_id_reference_isValid;

    m_station_atco_code_isValid = ::OpenAPI::fromJsonValue(m_station_atco_code, json[QString("stationAtcoCode")]);
    m_station_atco_code_isSet = !json[QString("stationAtcoCode")].isNull() && m_station_atco_code_isValid;
}

QString OAITfl_Api_Presentation_Entities_LineGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_LineGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_line_identifier.size() > 0) {
        obj.insert(QString("lineIdentifier"), ::OpenAPI::toJsonValue(m_line_identifier));
    }
    if (m_naptan_id_reference_isSet) {
        obj.insert(QString("naptanIdReference"), ::OpenAPI::toJsonValue(m_naptan_id_reference));
    }
    if (m_station_atco_code_isSet) {
        obj.insert(QString("stationAtcoCode"), ::OpenAPI::toJsonValue(m_station_atco_code));
    }
    return obj;
}

QList<QString> OAITfl_Api_Presentation_Entities_LineGroup::getLineIdentifier() const {
    return m_line_identifier;
}
void OAITfl_Api_Presentation_Entities_LineGroup::setLineIdentifier(const QList<QString> &line_identifier) {
    m_line_identifier = line_identifier;
    m_line_identifier_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineGroup::is_line_identifier_Set() const{
    return m_line_identifier_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineGroup::is_line_identifier_Valid() const{
    return m_line_identifier_isValid;
}

QString OAITfl_Api_Presentation_Entities_LineGroup::getNaptanIdReference() const {
    return m_naptan_id_reference;
}
void OAITfl_Api_Presentation_Entities_LineGroup::setNaptanIdReference(const QString &naptan_id_reference) {
    m_naptan_id_reference = naptan_id_reference;
    m_naptan_id_reference_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineGroup::is_naptan_id_reference_Set() const{
    return m_naptan_id_reference_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineGroup::is_naptan_id_reference_Valid() const{
    return m_naptan_id_reference_isValid;
}

QString OAITfl_Api_Presentation_Entities_LineGroup::getStationAtcoCode() const {
    return m_station_atco_code;
}
void OAITfl_Api_Presentation_Entities_LineGroup::setStationAtcoCode(const QString &station_atco_code) {
    m_station_atco_code = station_atco_code;
    m_station_atco_code_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineGroup::is_station_atco_code_Set() const{
    return m_station_atco_code_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineGroup::is_station_atco_code_Valid() const{
    return m_station_atco_code_isValid;
}

bool OAITfl_Api_Presentation_Entities_LineGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_line_identifier.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_naptan_id_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_station_atco_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_LineGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
