/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITfl_Api_Presentation_Entities_StopPointSequence.h
 *
 * 
 */

#ifndef OAITfl_Api_Presentation_Entities_StopPointSequence_H
#define OAITfl_Api_Presentation_Entities_StopPointSequence_H

#include <QJsonObject>

#include "OAITfl_Api_Presentation_Entities_MatchedStop.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITfl_Api_Presentation_Entities_MatchedStop;

class OAITfl_Api_Presentation_Entities_StopPointSequence : public OAIObject {
public:
    OAITfl_Api_Presentation_Entities_StopPointSequence();
    OAITfl_Api_Presentation_Entities_StopPointSequence(QString json);
    ~OAITfl_Api_Presentation_Entities_StopPointSequence() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBranchId() const;
    void setBranchId(const qint32 &branch_id);
    bool is_branch_id_Set() const;
    bool is_branch_id_Valid() const;

    QString getDirection() const;
    void setDirection(const QString &direction);
    bool is_direction_Set() const;
    bool is_direction_Valid() const;

    QString getLineId() const;
    void setLineId(const QString &line_id);
    bool is_line_id_Set() const;
    bool is_line_id_Valid() const;

    QString getLineName() const;
    void setLineName(const QString &line_name);
    bool is_line_name_Set() const;
    bool is_line_name_Valid() const;

    QList<qint32> getNextBranchIds() const;
    void setNextBranchIds(const QList<qint32> &next_branch_ids);
    bool is_next_branch_ids_Set() const;
    bool is_next_branch_ids_Valid() const;

    QList<qint32> getPrevBranchIds() const;
    void setPrevBranchIds(const QList<qint32> &prev_branch_ids);
    bool is_prev_branch_ids_Set() const;
    bool is_prev_branch_ids_Valid() const;

    QString getServiceType() const;
    void setServiceType(const QString &service_type);
    bool is_service_type_Set() const;
    bool is_service_type_Valid() const;

    QList<OAITfl_Api_Presentation_Entities_MatchedStop> getStopPoint() const;
    void setStopPoint(const QList<OAITfl_Api_Presentation_Entities_MatchedStop> &stop_point);
    bool is_stop_point_Set() const;
    bool is_stop_point_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_branch_id;
    bool m_branch_id_isSet;
    bool m_branch_id_isValid;

    QString m_direction;
    bool m_direction_isSet;
    bool m_direction_isValid;

    QString m_line_id;
    bool m_line_id_isSet;
    bool m_line_id_isValid;

    QString m_line_name;
    bool m_line_name_isSet;
    bool m_line_name_isValid;

    QList<qint32> m_next_branch_ids;
    bool m_next_branch_ids_isSet;
    bool m_next_branch_ids_isValid;

    QList<qint32> m_prev_branch_ids;
    bool m_prev_branch_ids_isSet;
    bool m_prev_branch_ids_isValid;

    QString m_service_type;
    bool m_service_type_isSet;
    bool m_service_type_isValid;

    QList<OAITfl_Api_Presentation_Entities_MatchedStop> m_stop_point;
    bool m_stop_point_isSet;
    bool m_stop_point_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITfl_Api_Presentation_Entities_StopPointSequence)

#endif // OAITfl_Api_Presentation_Entities_StopPointSequence_H
