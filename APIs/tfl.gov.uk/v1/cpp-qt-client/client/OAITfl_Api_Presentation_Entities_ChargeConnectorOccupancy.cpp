/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::~OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy() {}

void OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_source_system_place_id_isSet = false;
    m_source_system_place_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_source_system_place_id_isValid = ::OpenAPI::fromJsonValue(m_source_system_place_id, json[QString("sourceSystemPlaceId")]);
    m_source_system_place_id_isSet = !json[QString("sourceSystemPlaceId")].isNull() && m_source_system_place_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_source_system_place_id_isSet) {
        obj.insert(QString("sourceSystemPlaceId"), ::OpenAPI::toJsonValue(m_source_system_place_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::getId() const {
    return m_id;
}
void OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::is_id_Set() const{
    return m_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::getSourceSystemPlaceId() const {
    return m_source_system_place_id;
}
void OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::setSourceSystemPlaceId(const QString &source_system_place_id) {
    m_source_system_place_id = source_system_place_id;
    m_source_system_place_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::is_source_system_place_id_Set() const{
    return m_source_system_place_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::is_source_system_place_id_Valid() const{
    return m_source_system_place_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::getStatus() const {
    return m_status;
}
void OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::is_status_Set() const{
    return m_status_isSet;
}

bool OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_system_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_ChargeConnectorOccupancy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
