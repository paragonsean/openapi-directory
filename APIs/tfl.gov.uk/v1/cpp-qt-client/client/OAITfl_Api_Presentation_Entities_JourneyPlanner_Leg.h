/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg.h
 *
 * 
 */

#ifndef OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg_H
#define OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg_H

#include <QJsonObject>

#include "OAITfl_Api_Presentation_Entities_Disruption.h"
#include "OAITfl_Api_Presentation_Entities_Identifier.h"
#include "OAITfl_Api_Presentation_Entities_Instruction.h"
#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_Obstacle.h"
#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_Path.h"
#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_PlannedWork.h"
#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_RouteOption.h"
#include "OAITfl_Api_Presentation_Entities_Point.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITfl_Api_Presentation_Entities_Point;
class OAITfl_Api_Presentation_Entities_Disruption;
class OAITfl_Api_Presentation_Entities_Instruction;
class OAITfl_Api_Presentation_Entities_Identifier;
class OAITfl_Api_Presentation_Entities_JourneyPlanner_Obstacle;
class OAITfl_Api_Presentation_Entities_JourneyPlanner_Path;
class OAITfl_Api_Presentation_Entities_JourneyPlanner_PlannedWork;
class OAITfl_Api_Presentation_Entities_JourneyPlanner_RouteOption;

class OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg : public OAIObject {
public:
    OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg();
    OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg(QString json);
    ~OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAITfl_Api_Presentation_Entities_Point getArrivalPoint() const;
    void setArrivalPoint(const OAITfl_Api_Presentation_Entities_Point &arrival_point);
    bool is_arrival_point_Set() const;
    bool is_arrival_point_Valid() const;

    QDateTime getArrivalTime() const;
    void setArrivalTime(const QDateTime &arrival_time);
    bool is_arrival_time_Set() const;
    bool is_arrival_time_Valid() const;

    OAITfl_Api_Presentation_Entities_Point getDeparturePoint() const;
    void setDeparturePoint(const OAITfl_Api_Presentation_Entities_Point &departure_point);
    bool is_departure_point_Set() const;
    bool is_departure_point_Valid() const;

    QDateTime getDepartureTime() const;
    void setDepartureTime(const QDateTime &departure_time);
    bool is_departure_time_Set() const;
    bool is_departure_time_Valid() const;

    QList<OAITfl_Api_Presentation_Entities_Disruption> getDisruptions() const;
    void setDisruptions(const QList<OAITfl_Api_Presentation_Entities_Disruption> &disruptions);
    bool is_disruptions_Set() const;
    bool is_disruptions_Valid() const;

    double getDistance() const;
    void setDistance(const double &distance);
    bool is_distance_Set() const;
    bool is_distance_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    bool isHasFixedLocations() const;
    void setHasFixedLocations(const bool &has_fixed_locations);
    bool is_has_fixed_locations_Set() const;
    bool is_has_fixed_locations_Valid() const;

    OAITfl_Api_Presentation_Entities_Instruction getInstruction() const;
    void setInstruction(const OAITfl_Api_Presentation_Entities_Instruction &instruction);
    bool is_instruction_Set() const;
    bool is_instruction_Valid() const;

    QString getInterChangeDuration() const;
    void setInterChangeDuration(const QString &inter_change_duration);
    bool is_inter_change_duration_Set() const;
    bool is_inter_change_duration_Valid() const;

    QString getInterChangePosition() const;
    void setInterChangePosition(const QString &inter_change_position);
    bool is_inter_change_position_Set() const;
    bool is_inter_change_position_Valid() const;

    bool isIsDisrupted() const;
    void setIsDisrupted(const bool &is_disrupted);
    bool is_is_disrupted_Set() const;
    bool is_is_disrupted_Valid() const;

    OAITfl_Api_Presentation_Entities_Identifier getMode() const;
    void setMode(const OAITfl_Api_Presentation_Entities_Identifier &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_Obstacle> getObstacles() const;
    void setObstacles(const QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_Obstacle> &obstacles);
    bool is_obstacles_Set() const;
    bool is_obstacles_Valid() const;

    OAITfl_Api_Presentation_Entities_JourneyPlanner_Path getPath() const;
    void setPath(const OAITfl_Api_Presentation_Entities_JourneyPlanner_Path &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_PlannedWork> getPlannedWorks() const;
    void setPlannedWorks(const QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_PlannedWork> &planned_works);
    bool is_planned_works_Set() const;
    bool is_planned_works_Valid() const;

    QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_RouteOption> getRouteOptions() const;
    void setRouteOptions(const QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_RouteOption> &route_options);
    bool is_route_options_Set() const;
    bool is_route_options_Valid() const;

    QDateTime getScheduledArrivalTime() const;
    void setScheduledArrivalTime(const QDateTime &scheduled_arrival_time);
    bool is_scheduled_arrival_time_Set() const;
    bool is_scheduled_arrival_time_Valid() const;

    QDateTime getScheduledDepartureTime() const;
    void setScheduledDepartureTime(const QDateTime &scheduled_departure_time);
    bool is_scheduled_departure_time_Set() const;
    bool is_scheduled_departure_time_Valid() const;

    QString getSpeed() const;
    void setSpeed(const QString &speed);
    bool is_speed_Set() const;
    bool is_speed_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAITfl_Api_Presentation_Entities_Point m_arrival_point;
    bool m_arrival_point_isSet;
    bool m_arrival_point_isValid;

    QDateTime m_arrival_time;
    bool m_arrival_time_isSet;
    bool m_arrival_time_isValid;

    OAITfl_Api_Presentation_Entities_Point m_departure_point;
    bool m_departure_point_isSet;
    bool m_departure_point_isValid;

    QDateTime m_departure_time;
    bool m_departure_time_isSet;
    bool m_departure_time_isValid;

    QList<OAITfl_Api_Presentation_Entities_Disruption> m_disruptions;
    bool m_disruptions_isSet;
    bool m_disruptions_isValid;

    double m_distance;
    bool m_distance_isSet;
    bool m_distance_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    bool m_has_fixed_locations;
    bool m_has_fixed_locations_isSet;
    bool m_has_fixed_locations_isValid;

    OAITfl_Api_Presentation_Entities_Instruction m_instruction;
    bool m_instruction_isSet;
    bool m_instruction_isValid;

    QString m_inter_change_duration;
    bool m_inter_change_duration_isSet;
    bool m_inter_change_duration_isValid;

    QString m_inter_change_position;
    bool m_inter_change_position_isSet;
    bool m_inter_change_position_isValid;

    bool m_is_disrupted;
    bool m_is_disrupted_isSet;
    bool m_is_disrupted_isValid;

    OAITfl_Api_Presentation_Entities_Identifier m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_Obstacle> m_obstacles;
    bool m_obstacles_isSet;
    bool m_obstacles_isValid;

    OAITfl_Api_Presentation_Entities_JourneyPlanner_Path m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_PlannedWork> m_planned_works;
    bool m_planned_works_isSet;
    bool m_planned_works_isValid;

    QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_RouteOption> m_route_options;
    bool m_route_options_isSet;
    bool m_route_options_isValid;

    QDateTime m_scheduled_arrival_time;
    bool m_scheduled_arrival_time_isSet;
    bool m_scheduled_arrival_time_isValid;

    QDateTime m_scheduled_departure_time;
    bool m_scheduled_departure_time_isSet;
    bool m_scheduled_departure_time_isValid;

    QString m_speed;
    bool m_speed_isSet;
    bool m_speed_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg)

#endif // OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg_H
