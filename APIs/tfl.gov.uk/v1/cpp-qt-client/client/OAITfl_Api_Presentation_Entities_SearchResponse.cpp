/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_SearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_SearchResponse::OAITfl_Api_Presentation_Entities_SearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_SearchResponse::OAITfl_Api_Presentation_Entities_SearchResponse() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_SearchResponse::~OAITfl_Api_Presentation_Entities_SearchResponse() {}

void OAITfl_Api_Presentation_Entities_SearchResponse::initializeModel() {

    m_from_isSet = false;
    m_from_isValid = false;

    m_matches_isSet = false;
    m_matches_isValid = false;

    m_max_score_isSet = false;
    m_max_score_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAITfl_Api_Presentation_Entities_SearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_SearchResponse::fromJsonObject(QJsonObject json) {

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_matches_isValid = ::OpenAPI::fromJsonValue(m_matches, json[QString("matches")]);
    m_matches_isSet = !json[QString("matches")].isNull() && m_matches_isValid;

    m_max_score_isValid = ::OpenAPI::fromJsonValue(m_max_score, json[QString("maxScore")]);
    m_max_score_isSet = !json[QString("maxScore")].isNull() && m_max_score_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAITfl_Api_Presentation_Entities_SearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_SearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_matches.size() > 0) {
        obj.insert(QString("matches"), ::OpenAPI::toJsonValue(m_matches));
    }
    if (m_max_score_isSet) {
        obj.insert(QString("maxScore"), ::OpenAPI::toJsonValue(m_max_score));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAITfl_Api_Presentation_Entities_SearchResponse::getFrom() const {
    return m_from;
}
void OAITfl_Api_Presentation_Entities_SearchResponse::setFrom(const qint32 &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_SearchResponse::is_from_Set() const{
    return m_from_isSet;
}

bool OAITfl_Api_Presentation_Entities_SearchResponse::is_from_Valid() const{
    return m_from_isValid;
}

QList<OAITfl_Api_Presentation_Entities_SearchMatch> OAITfl_Api_Presentation_Entities_SearchResponse::getMatches() const {
    return m_matches;
}
void OAITfl_Api_Presentation_Entities_SearchResponse::setMatches(const QList<OAITfl_Api_Presentation_Entities_SearchMatch> &matches) {
    m_matches = matches;
    m_matches_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_SearchResponse::is_matches_Set() const{
    return m_matches_isSet;
}

bool OAITfl_Api_Presentation_Entities_SearchResponse::is_matches_Valid() const{
    return m_matches_isValid;
}

double OAITfl_Api_Presentation_Entities_SearchResponse::getMaxScore() const {
    return m_max_score;
}
void OAITfl_Api_Presentation_Entities_SearchResponse::setMaxScore(const double &max_score) {
    m_max_score = max_score;
    m_max_score_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_SearchResponse::is_max_score_Set() const{
    return m_max_score_isSet;
}

bool OAITfl_Api_Presentation_Entities_SearchResponse::is_max_score_Valid() const{
    return m_max_score_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_SearchResponse::getPage() const {
    return m_page;
}
void OAITfl_Api_Presentation_Entities_SearchResponse::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_SearchResponse::is_page_Set() const{
    return m_page_isSet;
}

bool OAITfl_Api_Presentation_Entities_SearchResponse::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_SearchResponse::getPageSize() const {
    return m_page_size;
}
void OAITfl_Api_Presentation_Entities_SearchResponse::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_SearchResponse::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAITfl_Api_Presentation_Entities_SearchResponse::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAITfl_Api_Presentation_Entities_SearchResponse::getProvider() const {
    return m_provider;
}
void OAITfl_Api_Presentation_Entities_SearchResponse::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_SearchResponse::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAITfl_Api_Presentation_Entities_SearchResponse::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAITfl_Api_Presentation_Entities_SearchResponse::getQuery() const {
    return m_query;
}
void OAITfl_Api_Presentation_Entities_SearchResponse::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_SearchResponse::is_query_Set() const{
    return m_query_isSet;
}

bool OAITfl_Api_Presentation_Entities_SearchResponse::is_query_Valid() const{
    return m_query_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_SearchResponse::getTotal() const {
    return m_total;
}
void OAITfl_Api_Presentation_Entities_SearchResponse::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_SearchResponse::is_total_Set() const{
    return m_total_isSet;
}

bool OAITfl_Api_Presentation_Entities_SearchResponse::is_total_Valid() const{
    return m_total_isValid;
}

bool OAITfl_Api_Presentation_Entities_SearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_SearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
