/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey.h
 *
 * Object that represents an end to end journey (see schematic).
 */

#ifndef OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey_H
#define OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey_H

#include <QJsonObject>

#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare.h"
#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg.h"
#include <QDateTime>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare;
class OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg;

class OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey : public OAIObject {
public:
    OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey();
    OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey(QString json);
    ~OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getArrivalDateTime() const;
    void setArrivalDateTime(const QDateTime &arrival_date_time);
    bool is_arrival_date_time_Set() const;
    bool is_arrival_date_time_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare getFare() const;
    void setFare(const OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare &fare);
    bool is_fare_Set() const;
    bool is_fare_Valid() const;

    QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg> getLegs() const;
    void setLegs(const QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg> &legs);
    bool is_legs_Set() const;
    bool is_legs_Valid() const;

    QDateTime getStartDateTime() const;
    void setStartDateTime(const QDateTime &start_date_time);
    bool is_start_date_time_Set() const;
    bool is_start_date_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_arrival_date_time;
    bool m_arrival_date_time_isSet;
    bool m_arrival_date_time_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare m_fare;
    bool m_fare_isSet;
    bool m_fare_isValid;

    QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg> m_legs;
    bool m_legs_isSet;
    bool m_legs_isValid;

    QDateTime m_start_date_time;
    bool m_start_date_time_isSet;
    bool m_start_date_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey)

#endif // OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey_H
