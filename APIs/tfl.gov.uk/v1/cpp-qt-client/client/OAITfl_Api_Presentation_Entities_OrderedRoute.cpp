/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_OrderedRoute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_OrderedRoute::OAITfl_Api_Presentation_Entities_OrderedRoute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_OrderedRoute::OAITfl_Api_Presentation_Entities_OrderedRoute() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_OrderedRoute::~OAITfl_Api_Presentation_Entities_OrderedRoute() {}

void OAITfl_Api_Presentation_Entities_OrderedRoute::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_naptan_ids_isSet = false;
    m_naptan_ids_isValid = false;

    m_service_type_isSet = false;
    m_service_type_isValid = false;
}

void OAITfl_Api_Presentation_Entities_OrderedRoute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_OrderedRoute::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_naptan_ids_isValid = ::OpenAPI::fromJsonValue(m_naptan_ids, json[QString("naptanIds")]);
    m_naptan_ids_isSet = !json[QString("naptanIds")].isNull() && m_naptan_ids_isValid;

    m_service_type_isValid = ::OpenAPI::fromJsonValue(m_service_type, json[QString("serviceType")]);
    m_service_type_isSet = !json[QString("serviceType")].isNull() && m_service_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_OrderedRoute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_OrderedRoute::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_naptan_ids.size() > 0) {
        obj.insert(QString("naptanIds"), ::OpenAPI::toJsonValue(m_naptan_ids));
    }
    if (m_service_type_isSet) {
        obj.insert(QString("serviceType"), ::OpenAPI::toJsonValue(m_service_type));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_OrderedRoute::getName() const {
    return m_name;
}
void OAITfl_Api_Presentation_Entities_OrderedRoute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_OrderedRoute::is_name_Set() const{
    return m_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_OrderedRoute::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAITfl_Api_Presentation_Entities_OrderedRoute::getNaptanIds() const {
    return m_naptan_ids;
}
void OAITfl_Api_Presentation_Entities_OrderedRoute::setNaptanIds(const QList<QString> &naptan_ids) {
    m_naptan_ids = naptan_ids;
    m_naptan_ids_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_OrderedRoute::is_naptan_ids_Set() const{
    return m_naptan_ids_isSet;
}

bool OAITfl_Api_Presentation_Entities_OrderedRoute::is_naptan_ids_Valid() const{
    return m_naptan_ids_isValid;
}

QString OAITfl_Api_Presentation_Entities_OrderedRoute::getServiceType() const {
    return m_service_type;
}
void OAITfl_Api_Presentation_Entities_OrderedRoute::setServiceType(const QString &service_type) {
    m_service_type = service_type;
    m_service_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_OrderedRoute::is_service_type_Set() const{
    return m_service_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_OrderedRoute::is_service_type_Valid() const{
    return m_service_type_isValid;
}

bool OAITfl_Api_Presentation_Entities_OrderedRoute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_naptan_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_OrderedRoute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
