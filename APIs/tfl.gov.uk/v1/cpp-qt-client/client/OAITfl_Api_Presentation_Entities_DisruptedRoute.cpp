/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_DisruptedRoute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_DisruptedRoute::OAITfl_Api_Presentation_Entities_DisruptedRoute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_DisruptedRoute::OAITfl_Api_Presentation_Entities_DisruptedRoute() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_DisruptedRoute::~OAITfl_Api_Presentation_Entities_DisruptedRoute() {}

void OAITfl_Api_Presentation_Entities_DisruptedRoute::initializeModel() {

    m_destination_name_isSet = false;
    m_destination_name_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_entire_route_section_isSet = false;
    m_is_entire_route_section_isValid = false;

    m_line_id_isSet = false;
    m_line_id_isValid = false;

    m_line_string_isSet = false;
    m_line_string_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_origination_name_isSet = false;
    m_origination_name_isValid = false;

    m_route_code_isSet = false;
    m_route_code_isValid = false;

    m_route_section_naptan_entry_sequence_isSet = false;
    m_route_section_naptan_entry_sequence_isValid = false;

    m_valid_from_isSet = false;
    m_valid_from_isValid = false;

    m_valid_to_isSet = false;
    m_valid_to_isValid = false;

    m_via_isSet = false;
    m_via_isValid = false;
}

void OAITfl_Api_Presentation_Entities_DisruptedRoute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_DisruptedRoute::fromJsonObject(QJsonObject json) {

    m_destination_name_isValid = ::OpenAPI::fromJsonValue(m_destination_name, json[QString("destinationName")]);
    m_destination_name_isSet = !json[QString("destinationName")].isNull() && m_destination_name_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_entire_route_section_isValid = ::OpenAPI::fromJsonValue(m_is_entire_route_section, json[QString("isEntireRouteSection")]);
    m_is_entire_route_section_isSet = !json[QString("isEntireRouteSection")].isNull() && m_is_entire_route_section_isValid;

    m_line_id_isValid = ::OpenAPI::fromJsonValue(m_line_id, json[QString("lineId")]);
    m_line_id_isSet = !json[QString("lineId")].isNull() && m_line_id_isValid;

    m_line_string_isValid = ::OpenAPI::fromJsonValue(m_line_string, json[QString("lineString")]);
    m_line_string_isSet = !json[QString("lineString")].isNull() && m_line_string_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_origination_name_isValid = ::OpenAPI::fromJsonValue(m_origination_name, json[QString("originationName")]);
    m_origination_name_isSet = !json[QString("originationName")].isNull() && m_origination_name_isValid;

    m_route_code_isValid = ::OpenAPI::fromJsonValue(m_route_code, json[QString("routeCode")]);
    m_route_code_isSet = !json[QString("routeCode")].isNull() && m_route_code_isValid;

    m_route_section_naptan_entry_sequence_isValid = ::OpenAPI::fromJsonValue(m_route_section_naptan_entry_sequence, json[QString("routeSectionNaptanEntrySequence")]);
    m_route_section_naptan_entry_sequence_isSet = !json[QString("routeSectionNaptanEntrySequence")].isNull() && m_route_section_naptan_entry_sequence_isValid;

    m_valid_from_isValid = ::OpenAPI::fromJsonValue(m_valid_from, json[QString("validFrom")]);
    m_valid_from_isSet = !json[QString("validFrom")].isNull() && m_valid_from_isValid;

    m_valid_to_isValid = ::OpenAPI::fromJsonValue(m_valid_to, json[QString("validTo")]);
    m_valid_to_isSet = !json[QString("validTo")].isNull() && m_valid_to_isValid;

    m_via_isValid = ::OpenAPI::fromJsonValue(m_via, json[QString("via")]);
    m_via_isSet = !json[QString("via")].isNull() && m_via_isValid;
}

QString OAITfl_Api_Presentation_Entities_DisruptedRoute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_DisruptedRoute::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_name_isSet) {
        obj.insert(QString("destinationName"), ::OpenAPI::toJsonValue(m_destination_name));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_entire_route_section_isSet) {
        obj.insert(QString("isEntireRouteSection"), ::OpenAPI::toJsonValue(m_is_entire_route_section));
    }
    if (m_line_id_isSet) {
        obj.insert(QString("lineId"), ::OpenAPI::toJsonValue(m_line_id));
    }
    if (m_line_string_isSet) {
        obj.insert(QString("lineString"), ::OpenAPI::toJsonValue(m_line_string));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_origination_name_isSet) {
        obj.insert(QString("originationName"), ::OpenAPI::toJsonValue(m_origination_name));
    }
    if (m_route_code_isSet) {
        obj.insert(QString("routeCode"), ::OpenAPI::toJsonValue(m_route_code));
    }
    if (m_route_section_naptan_entry_sequence.size() > 0) {
        obj.insert(QString("routeSectionNaptanEntrySequence"), ::OpenAPI::toJsonValue(m_route_section_naptan_entry_sequence));
    }
    if (m_valid_from_isSet) {
        obj.insert(QString("validFrom"), ::OpenAPI::toJsonValue(m_valid_from));
    }
    if (m_valid_to_isSet) {
        obj.insert(QString("validTo"), ::OpenAPI::toJsonValue(m_valid_to));
    }
    if (m_via.isSet()) {
        obj.insert(QString("via"), ::OpenAPI::toJsonValue(m_via));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_DisruptedRoute::getDestinationName() const {
    return m_destination_name;
}
void OAITfl_Api_Presentation_Entities_DisruptedRoute::setDestinationName(const QString &destination_name) {
    m_destination_name = destination_name;
    m_destination_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_destination_name_Set() const{
    return m_destination_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_destination_name_Valid() const{
    return m_destination_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_DisruptedRoute::getDirection() const {
    return m_direction;
}
void OAITfl_Api_Presentation_Entities_DisruptedRoute::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAITfl_Api_Presentation_Entities_DisruptedRoute::getId() const {
    return m_id;
}
void OAITfl_Api_Presentation_Entities_DisruptedRoute::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_id_Set() const{
    return m_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_id_Valid() const{
    return m_id_isValid;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::isIsEntireRouteSection() const {
    return m_is_entire_route_section;
}
void OAITfl_Api_Presentation_Entities_DisruptedRoute::setIsEntireRouteSection(const bool &is_entire_route_section) {
    m_is_entire_route_section = is_entire_route_section;
    m_is_entire_route_section_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_is_entire_route_section_Set() const{
    return m_is_entire_route_section_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_is_entire_route_section_Valid() const{
    return m_is_entire_route_section_isValid;
}

QString OAITfl_Api_Presentation_Entities_DisruptedRoute::getLineId() const {
    return m_line_id;
}
void OAITfl_Api_Presentation_Entities_DisruptedRoute::setLineId(const QString &line_id) {
    m_line_id = line_id;
    m_line_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_line_id_Set() const{
    return m_line_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_line_id_Valid() const{
    return m_line_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_DisruptedRoute::getLineString() const {
    return m_line_string;
}
void OAITfl_Api_Presentation_Entities_DisruptedRoute::setLineString(const QString &line_string) {
    m_line_string = line_string;
    m_line_string_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_line_string_Set() const{
    return m_line_string_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_line_string_Valid() const{
    return m_line_string_isValid;
}

QString OAITfl_Api_Presentation_Entities_DisruptedRoute::getName() const {
    return m_name;
}
void OAITfl_Api_Presentation_Entities_DisruptedRoute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_name_Set() const{
    return m_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_DisruptedRoute::getOriginationName() const {
    return m_origination_name;
}
void OAITfl_Api_Presentation_Entities_DisruptedRoute::setOriginationName(const QString &origination_name) {
    m_origination_name = origination_name;
    m_origination_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_origination_name_Set() const{
    return m_origination_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_origination_name_Valid() const{
    return m_origination_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_DisruptedRoute::getRouteCode() const {
    return m_route_code;
}
void OAITfl_Api_Presentation_Entities_DisruptedRoute::setRouteCode(const QString &route_code) {
    m_route_code = route_code;
    m_route_code_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_route_code_Set() const{
    return m_route_code_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_route_code_Valid() const{
    return m_route_code_isValid;
}

QList<OAITfl_Api_Presentation_Entities_RouteSectionNaptanEntrySequence> OAITfl_Api_Presentation_Entities_DisruptedRoute::getRouteSectionNaptanEntrySequence() const {
    return m_route_section_naptan_entry_sequence;
}
void OAITfl_Api_Presentation_Entities_DisruptedRoute::setRouteSectionNaptanEntrySequence(const QList<OAITfl_Api_Presentation_Entities_RouteSectionNaptanEntrySequence> &route_section_naptan_entry_sequence) {
    m_route_section_naptan_entry_sequence = route_section_naptan_entry_sequence;
    m_route_section_naptan_entry_sequence_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_route_section_naptan_entry_sequence_Set() const{
    return m_route_section_naptan_entry_sequence_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_route_section_naptan_entry_sequence_Valid() const{
    return m_route_section_naptan_entry_sequence_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_DisruptedRoute::getValidFrom() const {
    return m_valid_from;
}
void OAITfl_Api_Presentation_Entities_DisruptedRoute::setValidFrom(const QDateTime &valid_from) {
    m_valid_from = valid_from;
    m_valid_from_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_valid_from_Set() const{
    return m_valid_from_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_valid_from_Valid() const{
    return m_valid_from_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_DisruptedRoute::getValidTo() const {
    return m_valid_to;
}
void OAITfl_Api_Presentation_Entities_DisruptedRoute::setValidTo(const QDateTime &valid_to) {
    m_valid_to = valid_to;
    m_valid_to_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_valid_to_Set() const{
    return m_valid_to_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_valid_to_Valid() const{
    return m_valid_to_isValid;
}

OAITfl_Api_Presentation_Entities_RouteSectionNaptanEntrySequence OAITfl_Api_Presentation_Entities_DisruptedRoute::getVia() const {
    return m_via;
}
void OAITfl_Api_Presentation_Entities_DisruptedRoute::setVia(const OAITfl_Api_Presentation_Entities_RouteSectionNaptanEntrySequence &via) {
    m_via = via;
    m_via_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_via_Set() const{
    return m_via_isSet;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::is_via_Valid() const{
    return m_via_isValid;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_entire_route_section_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_section_naptan_entry_sequence.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_via.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_DisruptedRoute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
