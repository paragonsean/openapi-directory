/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::~OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine() {}

void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::initializeModel() {

    m_cause_isSet = false;
    m_cause_isValid = false;

    m_departure_status_isSet = false;
    m_departure_status_isValid = false;

    m_destination_name_isSet = false;
    m_destination_name_isValid = false;

    m_destination_naptan_id_isSet = false;
    m_destination_naptan_id_isValid = false;

    m_estimated_time_of_arrival_isSet = false;
    m_estimated_time_of_arrival_isValid = false;

    m_estimated_time_of_departure_isSet = false;
    m_estimated_time_of_departure_isValid = false;

    m_line_id_isSet = false;
    m_line_id_isValid = false;

    m_line_name_isSet = false;
    m_line_name_isValid = false;

    m_minutes_and_seconds_to_arrival_isSet = false;
    m_minutes_and_seconds_to_arrival_isValid = false;

    m_minutes_and_seconds_to_departure_isSet = false;
    m_minutes_and_seconds_to_departure_isValid = false;

    m_naptan_id_isSet = false;
    m_naptan_id_isValid = false;

    m_platform_name_isSet = false;
    m_platform_name_isValid = false;

    m_scheduled_time_of_arrival_isSet = false;
    m_scheduled_time_of_arrival_isValid = false;

    m_scheduled_time_of_departure_isSet = false;
    m_scheduled_time_of_departure_isValid = false;

    m_station_name_isSet = false;
    m_station_name_isValid = false;

    m_timing_isSet = false;
    m_timing_isValid = false;
}

void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::fromJsonObject(QJsonObject json) {

    m_cause_isValid = ::OpenAPI::fromJsonValue(m_cause, json[QString("cause")]);
    m_cause_isSet = !json[QString("cause")].isNull() && m_cause_isValid;

    m_departure_status_isValid = ::OpenAPI::fromJsonValue(m_departure_status, json[QString("departureStatus")]);
    m_departure_status_isSet = !json[QString("departureStatus")].isNull() && m_departure_status_isValid;

    m_destination_name_isValid = ::OpenAPI::fromJsonValue(m_destination_name, json[QString("destinationName")]);
    m_destination_name_isSet = !json[QString("destinationName")].isNull() && m_destination_name_isValid;

    m_destination_naptan_id_isValid = ::OpenAPI::fromJsonValue(m_destination_naptan_id, json[QString("destinationNaptanId")]);
    m_destination_naptan_id_isSet = !json[QString("destinationNaptanId")].isNull() && m_destination_naptan_id_isValid;

    m_estimated_time_of_arrival_isValid = ::OpenAPI::fromJsonValue(m_estimated_time_of_arrival, json[QString("estimatedTimeOfArrival")]);
    m_estimated_time_of_arrival_isSet = !json[QString("estimatedTimeOfArrival")].isNull() && m_estimated_time_of_arrival_isValid;

    m_estimated_time_of_departure_isValid = ::OpenAPI::fromJsonValue(m_estimated_time_of_departure, json[QString("estimatedTimeOfDeparture")]);
    m_estimated_time_of_departure_isSet = !json[QString("estimatedTimeOfDeparture")].isNull() && m_estimated_time_of_departure_isValid;

    m_line_id_isValid = ::OpenAPI::fromJsonValue(m_line_id, json[QString("lineId")]);
    m_line_id_isSet = !json[QString("lineId")].isNull() && m_line_id_isValid;

    m_line_name_isValid = ::OpenAPI::fromJsonValue(m_line_name, json[QString("lineName")]);
    m_line_name_isSet = !json[QString("lineName")].isNull() && m_line_name_isValid;

    m_minutes_and_seconds_to_arrival_isValid = ::OpenAPI::fromJsonValue(m_minutes_and_seconds_to_arrival, json[QString("minutesAndSecondsToArrival")]);
    m_minutes_and_seconds_to_arrival_isSet = !json[QString("minutesAndSecondsToArrival")].isNull() && m_minutes_and_seconds_to_arrival_isValid;

    m_minutes_and_seconds_to_departure_isValid = ::OpenAPI::fromJsonValue(m_minutes_and_seconds_to_departure, json[QString("minutesAndSecondsToDeparture")]);
    m_minutes_and_seconds_to_departure_isSet = !json[QString("minutesAndSecondsToDeparture")].isNull() && m_minutes_and_seconds_to_departure_isValid;

    m_naptan_id_isValid = ::OpenAPI::fromJsonValue(m_naptan_id, json[QString("naptanId")]);
    m_naptan_id_isSet = !json[QString("naptanId")].isNull() && m_naptan_id_isValid;

    m_platform_name_isValid = ::OpenAPI::fromJsonValue(m_platform_name, json[QString("platformName")]);
    m_platform_name_isSet = !json[QString("platformName")].isNull() && m_platform_name_isValid;

    m_scheduled_time_of_arrival_isValid = ::OpenAPI::fromJsonValue(m_scheduled_time_of_arrival, json[QString("scheduledTimeOfArrival")]);
    m_scheduled_time_of_arrival_isSet = !json[QString("scheduledTimeOfArrival")].isNull() && m_scheduled_time_of_arrival_isValid;

    m_scheduled_time_of_departure_isValid = ::OpenAPI::fromJsonValue(m_scheduled_time_of_departure, json[QString("scheduledTimeOfDeparture")]);
    m_scheduled_time_of_departure_isSet = !json[QString("scheduledTimeOfDeparture")].isNull() && m_scheduled_time_of_departure_isValid;

    m_station_name_isValid = ::OpenAPI::fromJsonValue(m_station_name, json[QString("stationName")]);
    m_station_name_isSet = !json[QString("stationName")].isNull() && m_station_name_isValid;

    m_timing_isValid = ::OpenAPI::fromJsonValue(m_timing, json[QString("timing")]);
    m_timing_isSet = !json[QString("timing")].isNull() && m_timing_isValid;
}

QString OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::asJsonObject() const {
    QJsonObject obj;
    if (m_cause_isSet) {
        obj.insert(QString("cause"), ::OpenAPI::toJsonValue(m_cause));
    }
    if (m_departure_status_isSet) {
        obj.insert(QString("departureStatus"), ::OpenAPI::toJsonValue(m_departure_status));
    }
    if (m_destination_name_isSet) {
        obj.insert(QString("destinationName"), ::OpenAPI::toJsonValue(m_destination_name));
    }
    if (m_destination_naptan_id_isSet) {
        obj.insert(QString("destinationNaptanId"), ::OpenAPI::toJsonValue(m_destination_naptan_id));
    }
    if (m_estimated_time_of_arrival_isSet) {
        obj.insert(QString("estimatedTimeOfArrival"), ::OpenAPI::toJsonValue(m_estimated_time_of_arrival));
    }
    if (m_estimated_time_of_departure_isSet) {
        obj.insert(QString("estimatedTimeOfDeparture"), ::OpenAPI::toJsonValue(m_estimated_time_of_departure));
    }
    if (m_line_id_isSet) {
        obj.insert(QString("lineId"), ::OpenAPI::toJsonValue(m_line_id));
    }
    if (m_line_name_isSet) {
        obj.insert(QString("lineName"), ::OpenAPI::toJsonValue(m_line_name));
    }
    if (m_minutes_and_seconds_to_arrival_isSet) {
        obj.insert(QString("minutesAndSecondsToArrival"), ::OpenAPI::toJsonValue(m_minutes_and_seconds_to_arrival));
    }
    if (m_minutes_and_seconds_to_departure_isSet) {
        obj.insert(QString("minutesAndSecondsToDeparture"), ::OpenAPI::toJsonValue(m_minutes_and_seconds_to_departure));
    }
    if (m_naptan_id_isSet) {
        obj.insert(QString("naptanId"), ::OpenAPI::toJsonValue(m_naptan_id));
    }
    if (m_platform_name_isSet) {
        obj.insert(QString("platformName"), ::OpenAPI::toJsonValue(m_platform_name));
    }
    if (m_scheduled_time_of_arrival_isSet) {
        obj.insert(QString("scheduledTimeOfArrival"), ::OpenAPI::toJsonValue(m_scheduled_time_of_arrival));
    }
    if (m_scheduled_time_of_departure_isSet) {
        obj.insert(QString("scheduledTimeOfDeparture"), ::OpenAPI::toJsonValue(m_scheduled_time_of_departure));
    }
    if (m_station_name_isSet) {
        obj.insert(QString("stationName"), ::OpenAPI::toJsonValue(m_station_name));
    }
    if (m_timing.isSet()) {
        obj.insert(QString("timing"), ::OpenAPI::toJsonValue(m_timing));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::getCause() const {
    return m_cause;
}
void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::setCause(const QString &cause) {
    m_cause = cause;
    m_cause_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_cause_Set() const{
    return m_cause_isSet;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_cause_Valid() const{
    return m_cause_isValid;
}

QString OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::getDepartureStatus() const {
    return m_departure_status;
}
void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::setDepartureStatus(const QString &departure_status) {
    m_departure_status = departure_status;
    m_departure_status_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_departure_status_Set() const{
    return m_departure_status_isSet;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_departure_status_Valid() const{
    return m_departure_status_isValid;
}

QString OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::getDestinationName() const {
    return m_destination_name;
}
void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::setDestinationName(const QString &destination_name) {
    m_destination_name = destination_name;
    m_destination_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_destination_name_Set() const{
    return m_destination_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_destination_name_Valid() const{
    return m_destination_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::getDestinationNaptanId() const {
    return m_destination_naptan_id;
}
void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::setDestinationNaptanId(const QString &destination_naptan_id) {
    m_destination_naptan_id = destination_naptan_id;
    m_destination_naptan_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_destination_naptan_id_Set() const{
    return m_destination_naptan_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_destination_naptan_id_Valid() const{
    return m_destination_naptan_id_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::getEstimatedTimeOfArrival() const {
    return m_estimated_time_of_arrival;
}
void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::setEstimatedTimeOfArrival(const QDateTime &estimated_time_of_arrival) {
    m_estimated_time_of_arrival = estimated_time_of_arrival;
    m_estimated_time_of_arrival_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_estimated_time_of_arrival_Set() const{
    return m_estimated_time_of_arrival_isSet;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_estimated_time_of_arrival_Valid() const{
    return m_estimated_time_of_arrival_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::getEstimatedTimeOfDeparture() const {
    return m_estimated_time_of_departure;
}
void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::setEstimatedTimeOfDeparture(const QDateTime &estimated_time_of_departure) {
    m_estimated_time_of_departure = estimated_time_of_departure;
    m_estimated_time_of_departure_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_estimated_time_of_departure_Set() const{
    return m_estimated_time_of_departure_isSet;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_estimated_time_of_departure_Valid() const{
    return m_estimated_time_of_departure_isValid;
}

QString OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::getLineId() const {
    return m_line_id;
}
void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::setLineId(const QString &line_id) {
    m_line_id = line_id;
    m_line_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_line_id_Set() const{
    return m_line_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_line_id_Valid() const{
    return m_line_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::getLineName() const {
    return m_line_name;
}
void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::setLineName(const QString &line_name) {
    m_line_name = line_name;
    m_line_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_line_name_Set() const{
    return m_line_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_line_name_Valid() const{
    return m_line_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::getMinutesAndSecondsToArrival() const {
    return m_minutes_and_seconds_to_arrival;
}
void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::setMinutesAndSecondsToArrival(const QString &minutes_and_seconds_to_arrival) {
    m_minutes_and_seconds_to_arrival = minutes_and_seconds_to_arrival;
    m_minutes_and_seconds_to_arrival_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_minutes_and_seconds_to_arrival_Set() const{
    return m_minutes_and_seconds_to_arrival_isSet;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_minutes_and_seconds_to_arrival_Valid() const{
    return m_minutes_and_seconds_to_arrival_isValid;
}

QString OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::getMinutesAndSecondsToDeparture() const {
    return m_minutes_and_seconds_to_departure;
}
void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::setMinutesAndSecondsToDeparture(const QString &minutes_and_seconds_to_departure) {
    m_minutes_and_seconds_to_departure = minutes_and_seconds_to_departure;
    m_minutes_and_seconds_to_departure_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_minutes_and_seconds_to_departure_Set() const{
    return m_minutes_and_seconds_to_departure_isSet;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_minutes_and_seconds_to_departure_Valid() const{
    return m_minutes_and_seconds_to_departure_isValid;
}

QString OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::getNaptanId() const {
    return m_naptan_id;
}
void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::setNaptanId(const QString &naptan_id) {
    m_naptan_id = naptan_id;
    m_naptan_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_naptan_id_Set() const{
    return m_naptan_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_naptan_id_Valid() const{
    return m_naptan_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::getPlatformName() const {
    return m_platform_name;
}
void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::setPlatformName(const QString &platform_name) {
    m_platform_name = platform_name;
    m_platform_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_platform_name_Set() const{
    return m_platform_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_platform_name_Valid() const{
    return m_platform_name_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::getScheduledTimeOfArrival() const {
    return m_scheduled_time_of_arrival;
}
void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::setScheduledTimeOfArrival(const QDateTime &scheduled_time_of_arrival) {
    m_scheduled_time_of_arrival = scheduled_time_of_arrival;
    m_scheduled_time_of_arrival_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_scheduled_time_of_arrival_Set() const{
    return m_scheduled_time_of_arrival_isSet;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_scheduled_time_of_arrival_Valid() const{
    return m_scheduled_time_of_arrival_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::getScheduledTimeOfDeparture() const {
    return m_scheduled_time_of_departure;
}
void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::setScheduledTimeOfDeparture(const QDateTime &scheduled_time_of_departure) {
    m_scheduled_time_of_departure = scheduled_time_of_departure;
    m_scheduled_time_of_departure_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_scheduled_time_of_departure_Set() const{
    return m_scheduled_time_of_departure_isSet;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_scheduled_time_of_departure_Valid() const{
    return m_scheduled_time_of_departure_isValid;
}

QString OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::getStationName() const {
    return m_station_name;
}
void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::setStationName(const QString &station_name) {
    m_station_name = station_name;
    m_station_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_station_name_Set() const{
    return m_station_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_station_name_Valid() const{
    return m_station_name_isValid;
}

OAITfl_Api_Presentation_Entities_PredictionTiming OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::getTiming() const {
    return m_timing;
}
void OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::setTiming(const OAITfl_Api_Presentation_Entities_PredictionTiming &timing) {
    m_timing = timing;
    m_timing_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_timing_Set() const{
    return m_timing_isSet;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::is_timing_Valid() const{
    return m_timing_isValid;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_naptan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_time_of_arrival_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_time_of_departure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minutes_and_seconds_to_arrival_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minutes_and_seconds_to_departure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_naptan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_time_of_arrival_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_time_of_departure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_station_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timing.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_ArrivalDepartureWithLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
