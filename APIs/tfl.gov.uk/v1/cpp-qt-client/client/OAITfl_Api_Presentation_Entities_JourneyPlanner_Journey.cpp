/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::~OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey() {}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::initializeModel() {

    m_arrival_date_time_isSet = false;
    m_arrival_date_time_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_fare_isSet = false;
    m_fare_isValid = false;

    m_legs_isSet = false;
    m_legs_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::fromJsonObject(QJsonObject json) {

    m_arrival_date_time_isValid = ::OpenAPI::fromJsonValue(m_arrival_date_time, json[QString("arrivalDateTime")]);
    m_arrival_date_time_isSet = !json[QString("arrivalDateTime")].isNull() && m_arrival_date_time_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_fare_isValid = ::OpenAPI::fromJsonValue(m_fare, json[QString("fare")]);
    m_fare_isSet = !json[QString("fare")].isNull() && m_fare_isValid;

    m_legs_isValid = ::OpenAPI::fromJsonValue(m_legs, json[QString("legs")]);
    m_legs_isSet = !json[QString("legs")].isNull() && m_legs_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::asJsonObject() const {
    QJsonObject obj;
    if (m_arrival_date_time_isSet) {
        obj.insert(QString("arrivalDateTime"), ::OpenAPI::toJsonValue(m_arrival_date_time));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_fare.isSet()) {
        obj.insert(QString("fare"), ::OpenAPI::toJsonValue(m_fare));
    }
    if (m_legs.size() > 0) {
        obj.insert(QString("legs"), ::OpenAPI::toJsonValue(m_legs));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    return obj;
}

QDateTime OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::getArrivalDateTime() const {
    return m_arrival_date_time;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::setArrivalDateTime(const QDateTime &arrival_date_time) {
    m_arrival_date_time = arrival_date_time;
    m_arrival_date_time_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::is_arrival_date_time_Set() const{
    return m_arrival_date_time_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::is_arrival_date_time_Valid() const{
    return m_arrival_date_time_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::getDuration() const {
    return m_duration;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::is_duration_Valid() const{
    return m_duration_isValid;
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::getFare() const {
    return m_fare;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::setFare(const OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyFare &fare) {
    m_fare = fare;
    m_fare_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::is_fare_Set() const{
    return m_fare_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::is_fare_Valid() const{
    return m_fare_isValid;
}

QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg> OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::getLegs() const {
    return m_legs;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::setLegs(const QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg> &legs) {
    m_legs = legs;
    m_legs_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::is_legs_Set() const{
    return m_legs_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::is_legs_Valid() const{
    return m_legs_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::getStartDateTime() const {
    return m_start_date_time;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::setStartDateTime(const QDateTime &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arrival_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fare.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
