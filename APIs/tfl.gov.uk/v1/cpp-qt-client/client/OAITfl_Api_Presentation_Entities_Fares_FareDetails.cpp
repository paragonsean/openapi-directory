/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Fares_FareDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Fares_FareDetails::OAITfl_Api_Presentation_Entities_Fares_FareDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Fares_FareDetails::OAITfl_Api_Presentation_Entities_Fares_FareDetails() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Fares_FareDetails::~OAITfl_Api_Presentation_Entities_Fares_FareDetails() {}

void OAITfl_Api_Presentation_Entities_Fares_FareDetails::initializeModel() {

    m_bounds_id_isSet = false;
    m_bounds_id_isValid = false;

    m_contactless_payg_only_fare_isSet = false;
    m_contactless_payg_only_fare_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_display_order_isSet = false;
    m_display_order_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_from_station_isSet = false;
    m_from_station_isValid = false;

    m_is_tour_isSet = false;
    m_is_tour_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_passenger_type_isSet = false;
    m_passenger_type_isValid = false;

    m_route_code_isSet = false;
    m_route_code_isValid = false;

    m_route_description_isSet = false;
    m_route_description_isValid = false;

    m_special_fare_isSet = false;
    m_special_fare_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_through_fare_isSet = false;
    m_through_fare_isValid = false;

    m_tickets_available_isSet = false;
    m_tickets_available_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_to_station_isSet = false;
    m_to_station_isValid = false;

    m_validator_information_isSet = false;
    m_validator_information_isValid = false;

    m_via_isSet = false;
    m_via_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Fares_FareDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Fares_FareDetails::fromJsonObject(QJsonObject json) {

    m_bounds_id_isValid = ::OpenAPI::fromJsonValue(m_bounds_id, json[QString("boundsId")]);
    m_bounds_id_isSet = !json[QString("boundsId")].isNull() && m_bounds_id_isValid;

    m_contactless_payg_only_fare_isValid = ::OpenAPI::fromJsonValue(m_contactless_payg_only_fare, json[QString("contactlessPAYGOnlyFare")]);
    m_contactless_payg_only_fare_isSet = !json[QString("contactlessPAYGOnlyFare")].isNull() && m_contactless_payg_only_fare_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_display_order_isValid = ::OpenAPI::fromJsonValue(m_display_order, json[QString("displayOrder")]);
    m_display_order_isSet = !json[QString("displayOrder")].isNull() && m_display_order_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_from_station_isValid = ::OpenAPI::fromJsonValue(m_from_station, json[QString("fromStation")]);
    m_from_station_isSet = !json[QString("fromStation")].isNull() && m_from_station_isValid;

    m_is_tour_isValid = ::OpenAPI::fromJsonValue(m_is_tour, json[QString("isTour")]);
    m_is_tour_isSet = !json[QString("isTour")].isNull() && m_is_tour_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_passenger_type_isValid = ::OpenAPI::fromJsonValue(m_passenger_type, json[QString("passengerType")]);
    m_passenger_type_isSet = !json[QString("passengerType")].isNull() && m_passenger_type_isValid;

    m_route_code_isValid = ::OpenAPI::fromJsonValue(m_route_code, json[QString("routeCode")]);
    m_route_code_isSet = !json[QString("routeCode")].isNull() && m_route_code_isValid;

    m_route_description_isValid = ::OpenAPI::fromJsonValue(m_route_description, json[QString("routeDescription")]);
    m_route_description_isSet = !json[QString("routeDescription")].isNull() && m_route_description_isValid;

    m_special_fare_isValid = ::OpenAPI::fromJsonValue(m_special_fare, json[QString("specialFare")]);
    m_special_fare_isSet = !json[QString("specialFare")].isNull() && m_special_fare_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_through_fare_isValid = ::OpenAPI::fromJsonValue(m_through_fare, json[QString("throughFare")]);
    m_through_fare_isSet = !json[QString("throughFare")].isNull() && m_through_fare_isValid;

    m_tickets_available_isValid = ::OpenAPI::fromJsonValue(m_tickets_available, json[QString("ticketsAvailable")]);
    m_tickets_available_isSet = !json[QString("ticketsAvailable")].isNull() && m_tickets_available_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_to_station_isValid = ::OpenAPI::fromJsonValue(m_to_station, json[QString("toStation")]);
    m_to_station_isSet = !json[QString("toStation")].isNull() && m_to_station_isValid;

    m_validator_information_isValid = ::OpenAPI::fromJsonValue(m_validator_information, json[QString("validatorInformation")]);
    m_validator_information_isSet = !json[QString("validatorInformation")].isNull() && m_validator_information_isValid;

    m_via_isValid = ::OpenAPI::fromJsonValue(m_via, json[QString("via")]);
    m_via_isSet = !json[QString("via")].isNull() && m_via_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Fares_FareDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_bounds_id_isSet) {
        obj.insert(QString("boundsId"), ::OpenAPI::toJsonValue(m_bounds_id));
    }
    if (m_contactless_payg_only_fare_isSet) {
        obj.insert(QString("contactlessPAYGOnlyFare"), ::OpenAPI::toJsonValue(m_contactless_payg_only_fare));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_display_order_isSet) {
        obj.insert(QString("displayOrder"), ::OpenAPI::toJsonValue(m_display_order));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_from_station_isSet) {
        obj.insert(QString("fromStation"), ::OpenAPI::toJsonValue(m_from_station));
    }
    if (m_is_tour_isSet) {
        obj.insert(QString("isTour"), ::OpenAPI::toJsonValue(m_is_tour));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_passenger_type_isSet) {
        obj.insert(QString("passengerType"), ::OpenAPI::toJsonValue(m_passenger_type));
    }
    if (m_route_code_isSet) {
        obj.insert(QString("routeCode"), ::OpenAPI::toJsonValue(m_route_code));
    }
    if (m_route_description_isSet) {
        obj.insert(QString("routeDescription"), ::OpenAPI::toJsonValue(m_route_description));
    }
    if (m_special_fare_isSet) {
        obj.insert(QString("specialFare"), ::OpenAPI::toJsonValue(m_special_fare));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_through_fare_isSet) {
        obj.insert(QString("throughFare"), ::OpenAPI::toJsonValue(m_through_fare));
    }
    if (m_tickets_available.size() > 0) {
        obj.insert(QString("ticketsAvailable"), ::OpenAPI::toJsonValue(m_tickets_available));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_to_station_isSet) {
        obj.insert(QString("toStation"), ::OpenAPI::toJsonValue(m_to_station));
    }
    if (m_validator_information_isSet) {
        obj.insert(QString("validatorInformation"), ::OpenAPI::toJsonValue(m_validator_information));
    }
    if (m_via_isSet) {
        obj.insert(QString("via"), ::OpenAPI::toJsonValue(m_via));
    }
    return obj;
}

qint32 OAITfl_Api_Presentation_Entities_Fares_FareDetails::getBoundsId() const {
    return m_bounds_id;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setBoundsId(const qint32 &bounds_id) {
    m_bounds_id = bounds_id;
    m_bounds_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_bounds_id_Set() const{
    return m_bounds_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_bounds_id_Valid() const{
    return m_bounds_id_isValid;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::isContactlessPaygOnlyFare() const {
    return m_contactless_payg_only_fare;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setContactlessPaygOnlyFare(const bool &contactless_payg_only_fare) {
    m_contactless_payg_only_fare = contactless_payg_only_fare;
    m_contactless_payg_only_fare_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_contactless_payg_only_fare_Set() const{
    return m_contactless_payg_only_fare_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_contactless_payg_only_fare_Valid() const{
    return m_contactless_payg_only_fare_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareDetails::getDisplayName() const {
    return m_display_name;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_Fares_FareDetails::getDisplayOrder() const {
    return m_display_order;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setDisplayOrder(const qint32 &display_order) {
    m_display_order = display_order;
    m_display_order_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_display_order_Set() const{
    return m_display_order_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_display_order_Valid() const{
    return m_display_order_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_Fares_FareDetails::getEndDate() const {
    return m_end_date;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareDetails::getFrom() const {
    return m_from;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_from_Set() const{
    return m_from_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_from_Valid() const{
    return m_from_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareDetails::getFromStation() const {
    return m_from_station;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setFromStation(const QString &from_station) {
    m_from_station = from_station;
    m_from_station_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_from_station_Set() const{
    return m_from_station_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_from_station_Valid() const{
    return m_from_station_isValid;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::isIsTour() const {
    return m_is_tour;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setIsTour(const bool &is_tour) {
    m_is_tour = is_tour;
    m_is_tour_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_is_tour_Set() const{
    return m_is_tour_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_is_tour_Valid() const{
    return m_is_tour_isValid;
}

QList<OAITfl_Api_Presentation_Entities_Message> OAITfl_Api_Presentation_Entities_Fares_FareDetails::getMessages() const {
    return m_messages;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setMessages(const QList<OAITfl_Api_Presentation_Entities_Message> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_messages_Valid() const{
    return m_messages_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareDetails::getMode() const {
    return m_mode;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareDetails::getROperator() const {
    return m_r_operator;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareDetails::getPassengerType() const {
    return m_passenger_type;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setPassengerType(const QString &passenger_type) {
    m_passenger_type = passenger_type;
    m_passenger_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_passenger_type_Set() const{
    return m_passenger_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_passenger_type_Valid() const{
    return m_passenger_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareDetails::getRouteCode() const {
    return m_route_code;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setRouteCode(const QString &route_code) {
    m_route_code = route_code;
    m_route_code_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_route_code_Set() const{
    return m_route_code_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_route_code_Valid() const{
    return m_route_code_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareDetails::getRouteDescription() const {
    return m_route_description;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setRouteDescription(const QString &route_description) {
    m_route_description = route_description;
    m_route_description_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_route_description_Set() const{
    return m_route_description_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_route_description_Valid() const{
    return m_route_description_isValid;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::isSpecialFare() const {
    return m_special_fare;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setSpecialFare(const bool &special_fare) {
    m_special_fare = special_fare;
    m_special_fare_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_special_fare_Set() const{
    return m_special_fare_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_special_fare_Valid() const{
    return m_special_fare_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_Fares_FareDetails::getStartDate() const {
    return m_start_date;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::isThroughFare() const {
    return m_through_fare;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setThroughFare(const bool &through_fare) {
    m_through_fare = through_fare;
    m_through_fare_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_through_fare_Set() const{
    return m_through_fare_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_through_fare_Valid() const{
    return m_through_fare_isValid;
}

QList<OAITfl_Api_Presentation_Entities_Fares_Ticket> OAITfl_Api_Presentation_Entities_Fares_FareDetails::getTicketsAvailable() const {
    return m_tickets_available;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setTicketsAvailable(const QList<OAITfl_Api_Presentation_Entities_Fares_Ticket> &tickets_available) {
    m_tickets_available = tickets_available;
    m_tickets_available_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_tickets_available_Set() const{
    return m_tickets_available_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_tickets_available_Valid() const{
    return m_tickets_available_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareDetails::getTo() const {
    return m_to;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_to_Set() const{
    return m_to_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_to_Valid() const{
    return m_to_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareDetails::getToStation() const {
    return m_to_station;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setToStation(const QString &to_station) {
    m_to_station = to_station;
    m_to_station_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_to_station_Set() const{
    return m_to_station_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_to_station_Valid() const{
    return m_to_station_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareDetails::getValidatorInformation() const {
    return m_validator_information;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setValidatorInformation(const QString &validator_information) {
    m_validator_information = validator_information;
    m_validator_information_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_validator_information_Set() const{
    return m_validator_information_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_validator_information_Valid() const{
    return m_validator_information_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FareDetails::getVia() const {
    return m_via;
}
void OAITfl_Api_Presentation_Entities_Fares_FareDetails::setVia(const QString &via) {
    m_via = via;
    m_via_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_via_Set() const{
    return m_via_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::is_via_Valid() const{
    return m_via_isValid;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounds_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contactless_payg_only_fare_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_station_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passenger_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_fare_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_through_fare_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tickets_available.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_station_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validator_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_via_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Fares_FareDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
