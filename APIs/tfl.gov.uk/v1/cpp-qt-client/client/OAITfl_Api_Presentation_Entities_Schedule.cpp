/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Schedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Schedule::OAITfl_Api_Presentation_Entities_Schedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Schedule::OAITfl_Api_Presentation_Entities_Schedule() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Schedule::~OAITfl_Api_Presentation_Entities_Schedule() {}

void OAITfl_Api_Presentation_Entities_Schedule::initializeModel() {

    m_first_journey_isSet = false;
    m_first_journey_isValid = false;

    m_known_journeys_isSet = false;
    m_known_journeys_isValid = false;

    m_last_journey_isSet = false;
    m_last_journey_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_periods_isSet = false;
    m_periods_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Schedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Schedule::fromJsonObject(QJsonObject json) {

    m_first_journey_isValid = ::OpenAPI::fromJsonValue(m_first_journey, json[QString("firstJourney")]);
    m_first_journey_isSet = !json[QString("firstJourney")].isNull() && m_first_journey_isValid;

    m_known_journeys_isValid = ::OpenAPI::fromJsonValue(m_known_journeys, json[QString("knownJourneys")]);
    m_known_journeys_isSet = !json[QString("knownJourneys")].isNull() && m_known_journeys_isValid;

    m_last_journey_isValid = ::OpenAPI::fromJsonValue(m_last_journey, json[QString("lastJourney")]);
    m_last_journey_isSet = !json[QString("lastJourney")].isNull() && m_last_journey_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_periods_isValid = ::OpenAPI::fromJsonValue(m_periods, json[QString("periods")]);
    m_periods_isSet = !json[QString("periods")].isNull() && m_periods_isValid;
}

QString OAITfl_Api_Presentation_Entities_Schedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Schedule::asJsonObject() const {
    QJsonObject obj;
    if (m_first_journey.isSet()) {
        obj.insert(QString("firstJourney"), ::OpenAPI::toJsonValue(m_first_journey));
    }
    if (m_known_journeys.size() > 0) {
        obj.insert(QString("knownJourneys"), ::OpenAPI::toJsonValue(m_known_journeys));
    }
    if (m_last_journey.isSet()) {
        obj.insert(QString("lastJourney"), ::OpenAPI::toJsonValue(m_last_journey));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_periods.size() > 0) {
        obj.insert(QString("periods"), ::OpenAPI::toJsonValue(m_periods));
    }
    return obj;
}

OAITfl_Api_Presentation_Entities_KnownJourney OAITfl_Api_Presentation_Entities_Schedule::getFirstJourney() const {
    return m_first_journey;
}
void OAITfl_Api_Presentation_Entities_Schedule::setFirstJourney(const OAITfl_Api_Presentation_Entities_KnownJourney &first_journey) {
    m_first_journey = first_journey;
    m_first_journey_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Schedule::is_first_journey_Set() const{
    return m_first_journey_isSet;
}

bool OAITfl_Api_Presentation_Entities_Schedule::is_first_journey_Valid() const{
    return m_first_journey_isValid;
}

QList<OAITfl_Api_Presentation_Entities_KnownJourney> OAITfl_Api_Presentation_Entities_Schedule::getKnownJourneys() const {
    return m_known_journeys;
}
void OAITfl_Api_Presentation_Entities_Schedule::setKnownJourneys(const QList<OAITfl_Api_Presentation_Entities_KnownJourney> &known_journeys) {
    m_known_journeys = known_journeys;
    m_known_journeys_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Schedule::is_known_journeys_Set() const{
    return m_known_journeys_isSet;
}

bool OAITfl_Api_Presentation_Entities_Schedule::is_known_journeys_Valid() const{
    return m_known_journeys_isValid;
}

OAITfl_Api_Presentation_Entities_KnownJourney OAITfl_Api_Presentation_Entities_Schedule::getLastJourney() const {
    return m_last_journey;
}
void OAITfl_Api_Presentation_Entities_Schedule::setLastJourney(const OAITfl_Api_Presentation_Entities_KnownJourney &last_journey) {
    m_last_journey = last_journey;
    m_last_journey_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Schedule::is_last_journey_Set() const{
    return m_last_journey_isSet;
}

bool OAITfl_Api_Presentation_Entities_Schedule::is_last_journey_Valid() const{
    return m_last_journey_isValid;
}

QString OAITfl_Api_Presentation_Entities_Schedule::getName() const {
    return m_name;
}
void OAITfl_Api_Presentation_Entities_Schedule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Schedule::is_name_Set() const{
    return m_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_Schedule::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAITfl_Api_Presentation_Entities_Period> OAITfl_Api_Presentation_Entities_Schedule::getPeriods() const {
    return m_periods;
}
void OAITfl_Api_Presentation_Entities_Schedule::setPeriods(const QList<OAITfl_Api_Presentation_Entities_Period> &periods) {
    m_periods = periods;
    m_periods_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Schedule::is_periods_Set() const{
    return m_periods_isSet;
}

bool OAITfl_Api_Presentation_Entities_Schedule::is_periods_Valid() const{
    return m_periods_isValid;
}

bool OAITfl_Api_Presentation_Entities_Schedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_journey.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_known_journeys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_journey.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_periods.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Schedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
