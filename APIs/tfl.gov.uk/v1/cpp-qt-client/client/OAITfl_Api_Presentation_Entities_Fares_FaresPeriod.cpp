/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Fares_FaresPeriod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::OAITfl_Api_Presentation_Entities_Fares_FaresPeriod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::OAITfl_Api_Presentation_Entities_Fares_FaresPeriod() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::~OAITfl_Api_Presentation_Entities_Fares_FaresPeriod() {}

void OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::initializeModel() {

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_future_isSet = false;
    m_is_future_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_viewable_date_isSet = false;
    m_viewable_date_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::fromJsonObject(QJsonObject json) {

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_future_isValid = ::OpenAPI::fromJsonValue(m_is_future, json[QString("isFuture")]);
    m_is_future_isSet = !json[QString("isFuture")].isNull() && m_is_future_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_viewable_date_isValid = ::OpenAPI::fromJsonValue(m_viewable_date, json[QString("viewableDate")]);
    m_viewable_date_isSet = !json[QString("viewableDate")].isNull() && m_viewable_date_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_future_isSet) {
        obj.insert(QString("isFuture"), ::OpenAPI::toJsonValue(m_is_future));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_viewable_date_isSet) {
        obj.insert(QString("viewableDate"), ::OpenAPI::toJsonValue(m_viewable_date));
    }
    return obj;
}

QDateTime OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::getEndDate() const {
    return m_end_date;
}
void OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::is_end_date_Valid() const{
    return m_end_date_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::getId() const {
    return m_id;
}
void OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::is_id_Set() const{
    return m_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::is_id_Valid() const{
    return m_id_isValid;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::isIsFuture() const {
    return m_is_future;
}
void OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::setIsFuture(const bool &is_future) {
    m_is_future = is_future;
    m_is_future_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::is_is_future_Set() const{
    return m_is_future_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::is_is_future_Valid() const{
    return m_is_future_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::getStartDate() const {
    return m_start_date;
}
void OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::getViewableDate() const {
    return m_viewable_date;
}
void OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::setViewableDate(const QDateTime &viewable_date) {
    m_viewable_date = viewable_date;
    m_viewable_date_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::is_viewable_date_Set() const{
    return m_viewable_date_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::is_viewable_date_Valid() const{
    return m_viewable_date_isValid;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_future_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewable_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Fares_FaresPeriod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
