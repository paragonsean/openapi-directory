/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Fares_Ticket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Fares_Ticket::OAITfl_Api_Presentation_Entities_Fares_Ticket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Fares_Ticket::OAITfl_Api_Presentation_Entities_Fares_Ticket() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Fares_Ticket::~OAITfl_Api_Presentation_Entities_Fares_Ticket() {}

void OAITfl_Api_Presentation_Entities_Fares_Ticket::initializeModel() {

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_order_isSet = false;
    m_display_order_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_passenger_type_isSet = false;
    m_passenger_type_isValid = false;

    m_ticket_time_isSet = false;
    m_ticket_time_isValid = false;

    m_ticket_type_isSet = false;
    m_ticket_type_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Fares_Ticket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Fares_Ticket::fromJsonObject(QJsonObject json) {

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_order_isValid = ::OpenAPI::fromJsonValue(m_display_order, json[QString("displayOrder")]);
    m_display_order_isSet = !json[QString("displayOrder")].isNull() && m_display_order_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_passenger_type_isValid = ::OpenAPI::fromJsonValue(m_passenger_type, json[QString("passengerType")]);
    m_passenger_type_isSet = !json[QString("passengerType")].isNull() && m_passenger_type_isValid;

    m_ticket_time_isValid = ::OpenAPI::fromJsonValue(m_ticket_time, json[QString("ticketTime")]);
    m_ticket_time_isSet = !json[QString("ticketTime")].isNull() && m_ticket_time_isValid;

    m_ticket_type_isValid = ::OpenAPI::fromJsonValue(m_ticket_type, json[QString("ticketType")]);
    m_ticket_type_isSet = !json[QString("ticketType")].isNull() && m_ticket_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Ticket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Fares_Ticket::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_order_isSet) {
        obj.insert(QString("displayOrder"), ::OpenAPI::toJsonValue(m_display_order));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_passenger_type_isSet) {
        obj.insert(QString("passengerType"), ::OpenAPI::toJsonValue(m_passenger_type));
    }
    if (m_ticket_time.isSet()) {
        obj.insert(QString("ticketTime"), ::OpenAPI::toJsonValue(m_ticket_time));
    }
    if (m_ticket_type.isSet()) {
        obj.insert(QString("ticketType"), ::OpenAPI::toJsonValue(m_ticket_type));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_Fares_Ticket::getCost() const {
    return m_cost;
}
void OAITfl_Api_Presentation_Entities_Fares_Ticket::setCost(const QString &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Ticket::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Ticket::is_cost_Valid() const{
    return m_cost_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Ticket::getDescription() const {
    return m_description;
}
void OAITfl_Api_Presentation_Entities_Fares_Ticket::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Ticket::is_description_Set() const{
    return m_description_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Ticket::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_Fares_Ticket::getDisplayOrder() const {
    return m_display_order;
}
void OAITfl_Api_Presentation_Entities_Fares_Ticket::setDisplayOrder(const qint32 &display_order) {
    m_display_order = display_order;
    m_display_order_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Ticket::is_display_order_Set() const{
    return m_display_order_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Ticket::is_display_order_Valid() const{
    return m_display_order_isValid;
}

QList<OAITfl_Api_Presentation_Entities_Message> OAITfl_Api_Presentation_Entities_Fares_Ticket::getMessages() const {
    return m_messages;
}
void OAITfl_Api_Presentation_Entities_Fares_Ticket::setMessages(const QList<OAITfl_Api_Presentation_Entities_Message> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Ticket::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Ticket::is_messages_Valid() const{
    return m_messages_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Ticket::getMode() const {
    return m_mode;
}
void OAITfl_Api_Presentation_Entities_Fares_Ticket::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Ticket::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Ticket::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAITfl_Api_Presentation_Entities_Fares_Ticket::getPassengerType() const {
    return m_passenger_type;
}
void OAITfl_Api_Presentation_Entities_Fares_Ticket::setPassengerType(const QString &passenger_type) {
    m_passenger_type = passenger_type;
    m_passenger_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Ticket::is_passenger_type_Set() const{
    return m_passenger_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Ticket::is_passenger_type_Valid() const{
    return m_passenger_type_isValid;
}

OAITfl_Api_Presentation_Entities_Fares_TicketTime OAITfl_Api_Presentation_Entities_Fares_Ticket::getTicketTime() const {
    return m_ticket_time;
}
void OAITfl_Api_Presentation_Entities_Fares_Ticket::setTicketTime(const OAITfl_Api_Presentation_Entities_Fares_TicketTime &ticket_time) {
    m_ticket_time = ticket_time;
    m_ticket_time_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Ticket::is_ticket_time_Set() const{
    return m_ticket_time_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Ticket::is_ticket_time_Valid() const{
    return m_ticket_time_isValid;
}

OAITfl_Api_Presentation_Entities_Fares_TicketType OAITfl_Api_Presentation_Entities_Fares_Ticket::getTicketType() const {
    return m_ticket_type;
}
void OAITfl_Api_Presentation_Entities_Fares_Ticket::setTicketType(const OAITfl_Api_Presentation_Entities_Fares_TicketType &ticket_type) {
    m_ticket_type = ticket_type;
    m_ticket_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Fares_Ticket::is_ticket_type_Set() const{
    return m_ticket_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_Fares_Ticket::is_ticket_type_Valid() const{
    return m_ticket_type_isValid;
}

bool OAITfl_Api_Presentation_Entities_Fares_Ticket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passenger_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Fares_Ticket::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
