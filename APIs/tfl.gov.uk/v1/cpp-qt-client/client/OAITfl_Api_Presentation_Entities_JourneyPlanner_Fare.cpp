/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::~OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare() {}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::initializeModel() {

    m_charge_level_isSet = false;
    m_charge_level_isValid = false;

    m_charge_profile_name_isSet = false;
    m_charge_profile_name_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_high_zone_isSet = false;
    m_high_zone_isValid = false;

    m_is_hopper_fare_isSet = false;
    m_is_hopper_fare_isValid = false;

    m_low_zone_isSet = false;
    m_low_zone_isValid = false;

    m_off_peak_isSet = false;
    m_off_peak_isValid = false;

    m_peak_isSet = false;
    m_peak_isValid = false;

    m_taps_isSet = false;
    m_taps_isValid = false;
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::fromJsonObject(QJsonObject json) {

    m_charge_level_isValid = ::OpenAPI::fromJsonValue(m_charge_level, json[QString("chargeLevel")]);
    m_charge_level_isSet = !json[QString("chargeLevel")].isNull() && m_charge_level_isValid;

    m_charge_profile_name_isValid = ::OpenAPI::fromJsonValue(m_charge_profile_name, json[QString("chargeProfileName")]);
    m_charge_profile_name_isSet = !json[QString("chargeProfileName")].isNull() && m_charge_profile_name_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_high_zone_isValid = ::OpenAPI::fromJsonValue(m_high_zone, json[QString("highZone")]);
    m_high_zone_isSet = !json[QString("highZone")].isNull() && m_high_zone_isValid;

    m_is_hopper_fare_isValid = ::OpenAPI::fromJsonValue(m_is_hopper_fare, json[QString("isHopperFare")]);
    m_is_hopper_fare_isSet = !json[QString("isHopperFare")].isNull() && m_is_hopper_fare_isValid;

    m_low_zone_isValid = ::OpenAPI::fromJsonValue(m_low_zone, json[QString("lowZone")]);
    m_low_zone_isSet = !json[QString("lowZone")].isNull() && m_low_zone_isValid;

    m_off_peak_isValid = ::OpenAPI::fromJsonValue(m_off_peak, json[QString("offPeak")]);
    m_off_peak_isSet = !json[QString("offPeak")].isNull() && m_off_peak_isValid;

    m_peak_isValid = ::OpenAPI::fromJsonValue(m_peak, json[QString("peak")]);
    m_peak_isSet = !json[QString("peak")].isNull() && m_peak_isValid;

    m_taps_isValid = ::OpenAPI::fromJsonValue(m_taps, json[QString("taps")]);
    m_taps_isSet = !json[QString("taps")].isNull() && m_taps_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::asJsonObject() const {
    QJsonObject obj;
    if (m_charge_level_isSet) {
        obj.insert(QString("chargeLevel"), ::OpenAPI::toJsonValue(m_charge_level));
    }
    if (m_charge_profile_name_isSet) {
        obj.insert(QString("chargeProfileName"), ::OpenAPI::toJsonValue(m_charge_profile_name));
    }
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_high_zone_isSet) {
        obj.insert(QString("highZone"), ::OpenAPI::toJsonValue(m_high_zone));
    }
    if (m_is_hopper_fare_isSet) {
        obj.insert(QString("isHopperFare"), ::OpenAPI::toJsonValue(m_is_hopper_fare));
    }
    if (m_low_zone_isSet) {
        obj.insert(QString("lowZone"), ::OpenAPI::toJsonValue(m_low_zone));
    }
    if (m_off_peak_isSet) {
        obj.insert(QString("offPeak"), ::OpenAPI::toJsonValue(m_off_peak));
    }
    if (m_peak_isSet) {
        obj.insert(QString("peak"), ::OpenAPI::toJsonValue(m_peak));
    }
    if (m_taps.size() > 0) {
        obj.insert(QString("taps"), ::OpenAPI::toJsonValue(m_taps));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::getChargeLevel() const {
    return m_charge_level;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::setChargeLevel(const QString &charge_level) {
    m_charge_level = charge_level;
    m_charge_level_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::is_charge_level_Set() const{
    return m_charge_level_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::is_charge_level_Valid() const{
    return m_charge_level_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::getChargeProfileName() const {
    return m_charge_profile_name;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::setChargeProfileName(const QString &charge_profile_name) {
    m_charge_profile_name = charge_profile_name;
    m_charge_profile_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::is_charge_profile_name_Set() const{
    return m_charge_profile_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::is_charge_profile_name_Valid() const{
    return m_charge_profile_name_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::getCost() const {
    return m_cost;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::setCost(const qint32 &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::is_cost_Valid() const{
    return m_cost_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::getHighZone() const {
    return m_high_zone;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::setHighZone(const qint32 &high_zone) {
    m_high_zone = high_zone;
    m_high_zone_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::is_high_zone_Set() const{
    return m_high_zone_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::is_high_zone_Valid() const{
    return m_high_zone_isValid;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::isIsHopperFare() const {
    return m_is_hopper_fare;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::setIsHopperFare(const bool &is_hopper_fare) {
    m_is_hopper_fare = is_hopper_fare;
    m_is_hopper_fare_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::is_is_hopper_fare_Set() const{
    return m_is_hopper_fare_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::is_is_hopper_fare_Valid() const{
    return m_is_hopper_fare_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::getLowZone() const {
    return m_low_zone;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::setLowZone(const qint32 &low_zone) {
    m_low_zone = low_zone;
    m_low_zone_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::is_low_zone_Set() const{
    return m_low_zone_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::is_low_zone_Valid() const{
    return m_low_zone_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::getOffPeak() const {
    return m_off_peak;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::setOffPeak(const qint32 &off_peak) {
    m_off_peak = off_peak;
    m_off_peak_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::is_off_peak_Set() const{
    return m_off_peak_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::is_off_peak_Valid() const{
    return m_off_peak_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::getPeak() const {
    return m_peak;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::setPeak(const qint32 &peak) {
    m_peak = peak;
    m_peak_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::is_peak_Set() const{
    return m_peak_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::is_peak_Valid() const{
    return m_peak_isValid;
}

QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTap> OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::getTaps() const {
    return m_taps;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::setTaps(const QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_FareTap> &taps) {
    m_taps = taps;
    m_taps_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::is_taps_Set() const{
    return m_taps_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::is_taps_Valid() const{
    return m_taps_isValid;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_charge_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charge_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_hopper_fare_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_off_peak_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peak_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taps.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Fare::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
