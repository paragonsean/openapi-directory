/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJourneyApi_H
#define OAI_OAIJourneyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult.h"
#include "OAITfl_Api_Presentation_Entities_Mode.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJourneyApi : public QObject {
    Q_OBJECT

public:
    OAIJourneyApi(const int timeOut = 0);
    ~OAIJourneyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  from QString [required]
    * @param[in]  to QString [required]
    * @param[in]  via QString [optional]
    * @param[in]  national_search bool [optional]
    * @param[in]  date QString [optional]
    * @param[in]  time QString [optional]
    * @param[in]  time_is QString [optional]
    * @param[in]  journey_preference QString [optional]
    * @param[in]  mode QList<QString> [optional]
    * @param[in]  accessibility_preference QList<QString> [optional]
    * @param[in]  from_name QString [optional]
    * @param[in]  to_name QString [optional]
    * @param[in]  via_name QString [optional]
    * @param[in]  max_transfer_minutes QString [optional]
    * @param[in]  max_walking_minutes QString [optional]
    * @param[in]  walking_speed QString [optional]
    * @param[in]  cycle_preference QString [optional]
    * @param[in]  adjustment QString [optional]
    * @param[in]  bike_proficiency QList<QString> [optional]
    * @param[in]  alternative_cycle bool [optional]
    * @param[in]  alternative_walking bool [optional]
    * @param[in]  apply_html_markup bool [optional]
    * @param[in]  use_multi_modal_call bool [optional]
    * @param[in]  walking_optimization bool [optional]
    * @param[in]  taxi_only_trip bool [optional]
    * @param[in]  route_between_entrances bool [optional]
    * @param[in]  use_real_time_live_arrivals bool [optional]
    * @param[in]  calc_one_direction bool [optional]
    */
    virtual void journeyJourneyResults(const QString &from, const QString &to, const ::OpenAPI::OptionalParam<QString> &via = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &national_search = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_is = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &journey_preference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &mode = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &accessibility_preference = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &from_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &via_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_transfer_minutes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_walking_minutes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &walking_speed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cycle_preference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &adjustment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &bike_proficiency = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &alternative_cycle = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &alternative_walking = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &apply_html_markup = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_multi_modal_call = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &walking_optimization = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &taxi_only_trip = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &route_between_entrances = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_real_time_live_arrivals = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &calc_one_direction = ::OpenAPI::OptionalParam<bool>());


    virtual void journeyMeta();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void journeyJourneyResultsCallback(OAIHttpRequestWorker *worker);
    void journeyMetaCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void journeyJourneyResultsSignal(OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult summary);
    void journeyMetaSignal(QList<OAITfl_Api_Presentation_Entities_Mode> summary);


    void journeyJourneyResultsSignalFull(OAIHttpRequestWorker *worker, OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult summary);
    void journeyMetaSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_Mode> summary);

    Q_DECL_DEPRECATED_X("Use journeyJourneyResultsSignalError() instead")
    void journeyJourneyResultsSignalE(OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void journeyJourneyResultsSignalError(OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use journeyMetaSignalError() instead")
    void journeyMetaSignalE(QList<OAITfl_Api_Presentation_Entities_Mode> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void journeyMetaSignalError(QList<OAITfl_Api_Presentation_Entities_Mode> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use journeyJourneyResultsSignalErrorFull() instead")
    void journeyJourneyResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void journeyJourneyResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use journeyMetaSignalErrorFull() instead")
    void journeyMetaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void journeyMetaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
