/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Common_JourneyPlanner_JpElevation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Common_JourneyPlanner_JpElevation::OAITfl_Api_Common_JourneyPlanner_JpElevation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Common_JourneyPlanner_JpElevation::OAITfl_Api_Common_JourneyPlanner_JpElevation() {
    this->initializeModel();
}

OAITfl_Api_Common_JourneyPlanner_JpElevation::~OAITfl_Api_Common_JourneyPlanner_JpElevation() {}

void OAITfl_Api_Common_JourneyPlanner_JpElevation::initializeModel() {

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_end_lat_isSet = false;
    m_end_lat_isValid = false;

    m_end_lon_isSet = false;
    m_end_lon_isValid = false;

    m_gradient_isSet = false;
    m_gradient_isValid = false;

    m_height_from_previous_point_isSet = false;
    m_height_from_previous_point_isValid = false;

    m_start_lat_isSet = false;
    m_start_lat_isValid = false;

    m_start_lon_isSet = false;
    m_start_lon_isValid = false;
}

void OAITfl_Api_Common_JourneyPlanner_JpElevation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Common_JourneyPlanner_JpElevation::fromJsonObject(QJsonObject json) {

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_end_lat_isValid = ::OpenAPI::fromJsonValue(m_end_lat, json[QString("endLat")]);
    m_end_lat_isSet = !json[QString("endLat")].isNull() && m_end_lat_isValid;

    m_end_lon_isValid = ::OpenAPI::fromJsonValue(m_end_lon, json[QString("endLon")]);
    m_end_lon_isSet = !json[QString("endLon")].isNull() && m_end_lon_isValid;

    m_gradient_isValid = ::OpenAPI::fromJsonValue(m_gradient, json[QString("gradient")]);
    m_gradient_isSet = !json[QString("gradient")].isNull() && m_gradient_isValid;

    m_height_from_previous_point_isValid = ::OpenAPI::fromJsonValue(m_height_from_previous_point, json[QString("heightFromPreviousPoint")]);
    m_height_from_previous_point_isSet = !json[QString("heightFromPreviousPoint")].isNull() && m_height_from_previous_point_isValid;

    m_start_lat_isValid = ::OpenAPI::fromJsonValue(m_start_lat, json[QString("startLat")]);
    m_start_lat_isSet = !json[QString("startLat")].isNull() && m_start_lat_isValid;

    m_start_lon_isValid = ::OpenAPI::fromJsonValue(m_start_lon, json[QString("startLon")]);
    m_start_lon_isSet = !json[QString("startLon")].isNull() && m_start_lon_isValid;
}

QString OAITfl_Api_Common_JourneyPlanner_JpElevation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Common_JourneyPlanner_JpElevation::asJsonObject() const {
    QJsonObject obj;
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_end_lat_isSet) {
        obj.insert(QString("endLat"), ::OpenAPI::toJsonValue(m_end_lat));
    }
    if (m_end_lon_isSet) {
        obj.insert(QString("endLon"), ::OpenAPI::toJsonValue(m_end_lon));
    }
    if (m_gradient_isSet) {
        obj.insert(QString("gradient"), ::OpenAPI::toJsonValue(m_gradient));
    }
    if (m_height_from_previous_point_isSet) {
        obj.insert(QString("heightFromPreviousPoint"), ::OpenAPI::toJsonValue(m_height_from_previous_point));
    }
    if (m_start_lat_isSet) {
        obj.insert(QString("startLat"), ::OpenAPI::toJsonValue(m_start_lat));
    }
    if (m_start_lon_isSet) {
        obj.insert(QString("startLon"), ::OpenAPI::toJsonValue(m_start_lon));
    }
    return obj;
}

qint32 OAITfl_Api_Common_JourneyPlanner_JpElevation::getDistance() const {
    return m_distance;
}
void OAITfl_Api_Common_JourneyPlanner_JpElevation::setDistance(const qint32 &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAITfl_Api_Common_JourneyPlanner_JpElevation::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAITfl_Api_Common_JourneyPlanner_JpElevation::is_distance_Valid() const{
    return m_distance_isValid;
}

double OAITfl_Api_Common_JourneyPlanner_JpElevation::getEndLat() const {
    return m_end_lat;
}
void OAITfl_Api_Common_JourneyPlanner_JpElevation::setEndLat(const double &end_lat) {
    m_end_lat = end_lat;
    m_end_lat_isSet = true;
}

bool OAITfl_Api_Common_JourneyPlanner_JpElevation::is_end_lat_Set() const{
    return m_end_lat_isSet;
}

bool OAITfl_Api_Common_JourneyPlanner_JpElevation::is_end_lat_Valid() const{
    return m_end_lat_isValid;
}

double OAITfl_Api_Common_JourneyPlanner_JpElevation::getEndLon() const {
    return m_end_lon;
}
void OAITfl_Api_Common_JourneyPlanner_JpElevation::setEndLon(const double &end_lon) {
    m_end_lon = end_lon;
    m_end_lon_isSet = true;
}

bool OAITfl_Api_Common_JourneyPlanner_JpElevation::is_end_lon_Set() const{
    return m_end_lon_isSet;
}

bool OAITfl_Api_Common_JourneyPlanner_JpElevation::is_end_lon_Valid() const{
    return m_end_lon_isValid;
}

double OAITfl_Api_Common_JourneyPlanner_JpElevation::getGradient() const {
    return m_gradient;
}
void OAITfl_Api_Common_JourneyPlanner_JpElevation::setGradient(const double &gradient) {
    m_gradient = gradient;
    m_gradient_isSet = true;
}

bool OAITfl_Api_Common_JourneyPlanner_JpElevation::is_gradient_Set() const{
    return m_gradient_isSet;
}

bool OAITfl_Api_Common_JourneyPlanner_JpElevation::is_gradient_Valid() const{
    return m_gradient_isValid;
}

qint32 OAITfl_Api_Common_JourneyPlanner_JpElevation::getHeightFromPreviousPoint() const {
    return m_height_from_previous_point;
}
void OAITfl_Api_Common_JourneyPlanner_JpElevation::setHeightFromPreviousPoint(const qint32 &height_from_previous_point) {
    m_height_from_previous_point = height_from_previous_point;
    m_height_from_previous_point_isSet = true;
}

bool OAITfl_Api_Common_JourneyPlanner_JpElevation::is_height_from_previous_point_Set() const{
    return m_height_from_previous_point_isSet;
}

bool OAITfl_Api_Common_JourneyPlanner_JpElevation::is_height_from_previous_point_Valid() const{
    return m_height_from_previous_point_isValid;
}

double OAITfl_Api_Common_JourneyPlanner_JpElevation::getStartLat() const {
    return m_start_lat;
}
void OAITfl_Api_Common_JourneyPlanner_JpElevation::setStartLat(const double &start_lat) {
    m_start_lat = start_lat;
    m_start_lat_isSet = true;
}

bool OAITfl_Api_Common_JourneyPlanner_JpElevation::is_start_lat_Set() const{
    return m_start_lat_isSet;
}

bool OAITfl_Api_Common_JourneyPlanner_JpElevation::is_start_lat_Valid() const{
    return m_start_lat_isValid;
}

double OAITfl_Api_Common_JourneyPlanner_JpElevation::getStartLon() const {
    return m_start_lon;
}
void OAITfl_Api_Common_JourneyPlanner_JpElevation::setStartLon(const double &start_lon) {
    m_start_lon = start_lon;
    m_start_lon_isSet = true;
}

bool OAITfl_Api_Common_JourneyPlanner_JpElevation::is_start_lon_Set() const{
    return m_start_lon_isSet;
}

bool OAITfl_Api_Common_JourneyPlanner_JpElevation::is_start_lon_Valid() const{
    return m_start_lon_isValid;
}

bool OAITfl_Api_Common_JourneyPlanner_JpElevation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gradient_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_from_previous_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_lon_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Common_JourneyPlanner_JpElevation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
