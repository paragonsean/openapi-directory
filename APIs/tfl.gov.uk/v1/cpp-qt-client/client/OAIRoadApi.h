/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRoadApi_H
#define OAI_OAIRoadApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAITfl_Api_Presentation_Entities_RoadCorridor.h"
#include "OAITfl_Api_Presentation_Entities_RoadDisruption.h"
#include "OAITfl_Api_Presentation_Entities_StatusSeverity.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRoadApi : public QObject {
    Q_OBJECT

public:
    OAIRoadApi(const int timeOut = 0);
    ~OAIRoadApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  start_date QDateTime [required]
    * @param[in]  end_date QDateTime [required]
    */
    virtual void roadDisruptedStreets(const QDateTime &start_date, const QDateTime &end_date);

    /**
    * @param[in]  ids QList<QString> [required]
    * @param[in]  strip_content bool [optional]
    * @param[in]  severities QList<QString> [optional]
    * @param[in]  categories QList<QString> [optional]
    * @param[in]  closures bool [optional]
    */
    virtual void roadDisruption(const QList<QString> &ids, const ::OpenAPI::OptionalParam<bool> &strip_content = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &severities = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &categories = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &closures = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  disruption_ids QList<QString> [required]
    * @param[in]  strip_content bool [optional]
    */
    virtual void roadDisruptionById(const QList<QString> &disruption_ids, const ::OpenAPI::OptionalParam<bool> &strip_content = ::OpenAPI::OptionalParam<bool>());


    virtual void roadGet();

    /**
    * @param[in]  ids QList<QString> [required]
    */
    virtual void roadIdsGet(const QList<QString> &ids);


    virtual void roadMetaCategories();


    virtual void roadMetaSeverities();

    /**
    * @param[in]  ids QList<QString> [required]
    * @param[in]  date_range_nullable_start_date QDateTime [optional]
    * @param[in]  date_range_nullable_end_date QDateTime [optional]
    */
    virtual void roadStatus(const QList<QString> &ids, const ::OpenAPI::OptionalParam<QDateTime> &date_range_nullable_start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_range_nullable_end_date = ::OpenAPI::OptionalParam<QDateTime>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void roadDisruptedStreetsCallback(OAIHttpRequestWorker *worker);
    void roadDisruptionCallback(OAIHttpRequestWorker *worker);
    void roadDisruptionByIdCallback(OAIHttpRequestWorker *worker);
    void roadGetCallback(OAIHttpRequestWorker *worker);
    void roadIdsGetCallback(OAIHttpRequestWorker *worker);
    void roadMetaCategoriesCallback(OAIHttpRequestWorker *worker);
    void roadMetaSeveritiesCallback(OAIHttpRequestWorker *worker);
    void roadStatusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void roadDisruptedStreetsSignal(OAIObject summary);
    void roadDisruptionSignal(QList<OAITfl_Api_Presentation_Entities_RoadDisruption> summary);
    void roadDisruptionByIdSignal(OAITfl_Api_Presentation_Entities_RoadDisruption summary);
    void roadGetSignal(QList<OAITfl_Api_Presentation_Entities_RoadCorridor> summary);
    void roadIdsGetSignal(QList<OAITfl_Api_Presentation_Entities_RoadCorridor> summary);
    void roadMetaCategoriesSignal(QList<QString> summary);
    void roadMetaSeveritiesSignal(QList<OAITfl_Api_Presentation_Entities_StatusSeverity> summary);
    void roadStatusSignal(QList<OAITfl_Api_Presentation_Entities_RoadCorridor> summary);


    void roadDisruptedStreetsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void roadDisruptionSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_RoadDisruption> summary);
    void roadDisruptionByIdSignalFull(OAIHttpRequestWorker *worker, OAITfl_Api_Presentation_Entities_RoadDisruption summary);
    void roadGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_RoadCorridor> summary);
    void roadIdsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_RoadCorridor> summary);
    void roadMetaCategoriesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void roadMetaSeveritiesSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_StatusSeverity> summary);
    void roadStatusSignalFull(OAIHttpRequestWorker *worker, QList<OAITfl_Api_Presentation_Entities_RoadCorridor> summary);

    Q_DECL_DEPRECATED_X("Use roadDisruptedStreetsSignalError() instead")
    void roadDisruptedStreetsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roadDisruptedStreetsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roadDisruptionSignalError() instead")
    void roadDisruptionSignalE(QList<OAITfl_Api_Presentation_Entities_RoadDisruption> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roadDisruptionSignalError(QList<OAITfl_Api_Presentation_Entities_RoadDisruption> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roadDisruptionByIdSignalError() instead")
    void roadDisruptionByIdSignalE(OAITfl_Api_Presentation_Entities_RoadDisruption summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roadDisruptionByIdSignalError(OAITfl_Api_Presentation_Entities_RoadDisruption summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roadGetSignalError() instead")
    void roadGetSignalE(QList<OAITfl_Api_Presentation_Entities_RoadCorridor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roadGetSignalError(QList<OAITfl_Api_Presentation_Entities_RoadCorridor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roadIdsGetSignalError() instead")
    void roadIdsGetSignalE(QList<OAITfl_Api_Presentation_Entities_RoadCorridor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roadIdsGetSignalError(QList<OAITfl_Api_Presentation_Entities_RoadCorridor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roadMetaCategoriesSignalError() instead")
    void roadMetaCategoriesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roadMetaCategoriesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roadMetaSeveritiesSignalError() instead")
    void roadMetaSeveritiesSignalE(QList<OAITfl_Api_Presentation_Entities_StatusSeverity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roadMetaSeveritiesSignalError(QList<OAITfl_Api_Presentation_Entities_StatusSeverity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roadStatusSignalError() instead")
    void roadStatusSignalE(QList<OAITfl_Api_Presentation_Entities_RoadCorridor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roadStatusSignalError(QList<OAITfl_Api_Presentation_Entities_RoadCorridor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use roadDisruptedStreetsSignalErrorFull() instead")
    void roadDisruptedStreetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roadDisruptedStreetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roadDisruptionSignalErrorFull() instead")
    void roadDisruptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roadDisruptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roadDisruptionByIdSignalErrorFull() instead")
    void roadDisruptionByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roadDisruptionByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roadGetSignalErrorFull() instead")
    void roadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roadIdsGetSignalErrorFull() instead")
    void roadIdsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roadIdsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roadMetaCategoriesSignalErrorFull() instead")
    void roadMetaCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roadMetaCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roadMetaSeveritiesSignalErrorFull() instead")
    void roadMetaSeveritiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roadMetaSeveritiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roadStatusSignalErrorFull() instead")
    void roadStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roadStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
