/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Street.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Street::OAITfl_Api_Presentation_Entities_Street(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Street::OAITfl_Api_Presentation_Entities_Street() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Street::~OAITfl_Api_Presentation_Entities_Street() {}

void OAITfl_Api_Presentation_Entities_Street::initializeModel() {

    m_closure_isSet = false;
    m_closure_isValid = false;

    m_directions_isSet = false;
    m_directions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_segments_isSet = false;
    m_segments_isValid = false;

    m_source_system_id_isSet = false;
    m_source_system_id_isValid = false;

    m_source_system_key_isSet = false;
    m_source_system_key_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Street::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Street::fromJsonObject(QJsonObject json) {

    m_closure_isValid = ::OpenAPI::fromJsonValue(m_closure, json[QString("closure")]);
    m_closure_isSet = !json[QString("closure")].isNull() && m_closure_isValid;

    m_directions_isValid = ::OpenAPI::fromJsonValue(m_directions, json[QString("directions")]);
    m_directions_isSet = !json[QString("directions")].isNull() && m_directions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_segments_isValid = ::OpenAPI::fromJsonValue(m_segments, json[QString("segments")]);
    m_segments_isSet = !json[QString("segments")].isNull() && m_segments_isValid;

    m_source_system_id_isValid = ::OpenAPI::fromJsonValue(m_source_system_id, json[QString("sourceSystemId")]);
    m_source_system_id_isSet = !json[QString("sourceSystemId")].isNull() && m_source_system_id_isValid;

    m_source_system_key_isValid = ::OpenAPI::fromJsonValue(m_source_system_key, json[QString("sourceSystemKey")]);
    m_source_system_key_isSet = !json[QString("sourceSystemKey")].isNull() && m_source_system_key_isValid;
}

QString OAITfl_Api_Presentation_Entities_Street::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Street::asJsonObject() const {
    QJsonObject obj;
    if (m_closure_isSet) {
        obj.insert(QString("closure"), ::OpenAPI::toJsonValue(m_closure));
    }
    if (m_directions_isSet) {
        obj.insert(QString("directions"), ::OpenAPI::toJsonValue(m_directions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_segments.size() > 0) {
        obj.insert(QString("segments"), ::OpenAPI::toJsonValue(m_segments));
    }
    if (m_source_system_id_isSet) {
        obj.insert(QString("sourceSystemId"), ::OpenAPI::toJsonValue(m_source_system_id));
    }
    if (m_source_system_key_isSet) {
        obj.insert(QString("sourceSystemKey"), ::OpenAPI::toJsonValue(m_source_system_key));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_Street::getClosure() const {
    return m_closure;
}
void OAITfl_Api_Presentation_Entities_Street::setClosure(const QString &closure) {
    m_closure = closure;
    m_closure_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Street::is_closure_Set() const{
    return m_closure_isSet;
}

bool OAITfl_Api_Presentation_Entities_Street::is_closure_Valid() const{
    return m_closure_isValid;
}

QString OAITfl_Api_Presentation_Entities_Street::getDirections() const {
    return m_directions;
}
void OAITfl_Api_Presentation_Entities_Street::setDirections(const QString &directions) {
    m_directions = directions;
    m_directions_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Street::is_directions_Set() const{
    return m_directions_isSet;
}

bool OAITfl_Api_Presentation_Entities_Street::is_directions_Valid() const{
    return m_directions_isValid;
}

QString OAITfl_Api_Presentation_Entities_Street::getName() const {
    return m_name;
}
void OAITfl_Api_Presentation_Entities_Street::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Street::is_name_Set() const{
    return m_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_Street::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAITfl_Api_Presentation_Entities_StreetSegment> OAITfl_Api_Presentation_Entities_Street::getSegments() const {
    return m_segments;
}
void OAITfl_Api_Presentation_Entities_Street::setSegments(const QList<OAITfl_Api_Presentation_Entities_StreetSegment> &segments) {
    m_segments = segments;
    m_segments_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Street::is_segments_Set() const{
    return m_segments_isSet;
}

bool OAITfl_Api_Presentation_Entities_Street::is_segments_Valid() const{
    return m_segments_isValid;
}

qint64 OAITfl_Api_Presentation_Entities_Street::getSourceSystemId() const {
    return m_source_system_id;
}
void OAITfl_Api_Presentation_Entities_Street::setSourceSystemId(const qint64 &source_system_id) {
    m_source_system_id = source_system_id;
    m_source_system_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Street::is_source_system_id_Set() const{
    return m_source_system_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_Street::is_source_system_id_Valid() const{
    return m_source_system_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_Street::getSourceSystemKey() const {
    return m_source_system_key;
}
void OAITfl_Api_Presentation_Entities_Street::setSourceSystemKey(const QString &source_system_key) {
    m_source_system_key = source_system_key;
    m_source_system_key_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Street::is_source_system_key_Set() const{
    return m_source_system_key_isSet;
}

bool OAITfl_Api_Presentation_Entities_Street::is_source_system_key_Valid() const{
    return m_source_system_key_isValid;
}

bool OAITfl_Api_Presentation_Entities_Street::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_system_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Street::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
