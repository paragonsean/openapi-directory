/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::~OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary() {}

void OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::initializeModel() {

    m_accidents_isSet = false;
    m_accidents_isValid = false;

    m_borough_isSet = false;
    m_borough_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::fromJsonObject(QJsonObject json) {

    m_accidents_isValid = ::OpenAPI::fromJsonValue(m_accidents, json[QString("accidents")]);
    m_accidents_isSet = !json[QString("accidents")].isNull() && m_accidents_isValid;

    m_borough_isValid = ::OpenAPI::fromJsonValue(m_borough, json[QString("borough")]);
    m_borough_isSet = !json[QString("borough")].isNull() && m_borough_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_accidents_isSet) {
        obj.insert(QString("accidents"), ::OpenAPI::toJsonValue(m_accidents));
    }
    if (m_borough_isSet) {
        obj.insert(QString("borough"), ::OpenAPI::toJsonValue(m_borough));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

qint32 OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::getAccidents() const {
    return m_accidents;
}
void OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::setAccidents(const qint32 &accidents) {
    m_accidents = accidents;
    m_accidents_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::is_accidents_Set() const{
    return m_accidents_isSet;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::is_accidents_Valid() const{
    return m_accidents_isValid;
}

QString OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::getBorough() const {
    return m_borough;
}
void OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::setBorough(const QString &borough) {
    m_borough = borough;
    m_borough_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::is_borough_Set() const{
    return m_borough_isSet;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::is_borough_Valid() const{
    return m_borough_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::getYear() const {
    return m_year;
}
void OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::is_year_Set() const{
    return m_year_isSet;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::is_year_Valid() const{
    return m_year_isValid;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accidents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_borough_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentStatsOrderedSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
