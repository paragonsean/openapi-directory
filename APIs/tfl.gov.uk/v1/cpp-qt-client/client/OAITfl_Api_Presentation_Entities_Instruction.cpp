/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Instruction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Instruction::OAITfl_Api_Presentation_Entities_Instruction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Instruction::OAITfl_Api_Presentation_Entities_Instruction() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Instruction::~OAITfl_Api_Presentation_Entities_Instruction() {}

void OAITfl_Api_Presentation_Entities_Instruction::initializeModel() {

    m_detailed_isSet = false;
    m_detailed_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Instruction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Instruction::fromJsonObject(QJsonObject json) {

    m_detailed_isValid = ::OpenAPI::fromJsonValue(m_detailed, json[QString("detailed")]);
    m_detailed_isSet = !json[QString("detailed")].isNull() && m_detailed_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("steps")]);
    m_steps_isSet = !json[QString("steps")].isNull() && m_steps_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAITfl_Api_Presentation_Entities_Instruction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Instruction::asJsonObject() const {
    QJsonObject obj;
    if (m_detailed_isSet) {
        obj.insert(QString("detailed"), ::OpenAPI::toJsonValue(m_detailed));
    }
    if (m_steps.size() > 0) {
        obj.insert(QString("steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_Instruction::getDetailed() const {
    return m_detailed;
}
void OAITfl_Api_Presentation_Entities_Instruction::setDetailed(const QString &detailed) {
    m_detailed = detailed;
    m_detailed_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Instruction::is_detailed_Set() const{
    return m_detailed_isSet;
}

bool OAITfl_Api_Presentation_Entities_Instruction::is_detailed_Valid() const{
    return m_detailed_isValid;
}

QList<OAITfl_Api_Presentation_Entities_InstructionStep> OAITfl_Api_Presentation_Entities_Instruction::getSteps() const {
    return m_steps;
}
void OAITfl_Api_Presentation_Entities_Instruction::setSteps(const QList<OAITfl_Api_Presentation_Entities_InstructionStep> &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Instruction::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAITfl_Api_Presentation_Entities_Instruction::is_steps_Valid() const{
    return m_steps_isValid;
}

QString OAITfl_Api_Presentation_Entities_Instruction::getSummary() const {
    return m_summary;
}
void OAITfl_Api_Presentation_Entities_Instruction::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Instruction::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAITfl_Api_Presentation_Entities_Instruction::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAITfl_Api_Presentation_Entities_Instruction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detailed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Instruction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
