/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_Path.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::OAITfl_Api_Presentation_Entities_JourneyPlanner_Path(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::OAITfl_Api_Presentation_Entities_JourneyPlanner_Path() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::~OAITfl_Api_Presentation_Entities_JourneyPlanner_Path() {}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::initializeModel() {

    m_elevation_isSet = false;
    m_elevation_isValid = false;

    m_line_string_isSet = false;
    m_line_string_isValid = false;

    m_stop_points_isSet = false;
    m_stop_points_isValid = false;
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::fromJsonObject(QJsonObject json) {

    m_elevation_isValid = ::OpenAPI::fromJsonValue(m_elevation, json[QString("elevation")]);
    m_elevation_isSet = !json[QString("elevation")].isNull() && m_elevation_isValid;

    m_line_string_isValid = ::OpenAPI::fromJsonValue(m_line_string, json[QString("lineString")]);
    m_line_string_isSet = !json[QString("lineString")].isNull() && m_line_string_isValid;

    m_stop_points_isValid = ::OpenAPI::fromJsonValue(m_stop_points, json[QString("stopPoints")]);
    m_stop_points_isSet = !json[QString("stopPoints")].isNull() && m_stop_points_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::asJsonObject() const {
    QJsonObject obj;
    if (m_elevation.size() > 0) {
        obj.insert(QString("elevation"), ::OpenAPI::toJsonValue(m_elevation));
    }
    if (m_line_string_isSet) {
        obj.insert(QString("lineString"), ::OpenAPI::toJsonValue(m_line_string));
    }
    if (m_stop_points.size() > 0) {
        obj.insert(QString("stopPoints"), ::OpenAPI::toJsonValue(m_stop_points));
    }
    return obj;
}

QList<OAITfl_Api_Common_JourneyPlanner_JpElevation> OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::getElevation() const {
    return m_elevation;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::setElevation(const QList<OAITfl_Api_Common_JourneyPlanner_JpElevation> &elevation) {
    m_elevation = elevation;
    m_elevation_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::is_elevation_Set() const{
    return m_elevation_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::is_elevation_Valid() const{
    return m_elevation_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::getLineString() const {
    return m_line_string;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::setLineString(const QString &line_string) {
    m_line_string = line_string;
    m_line_string_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::is_line_string_Set() const{
    return m_line_string_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::is_line_string_Valid() const{
    return m_line_string_isValid;
}

QList<OAITfl_Api_Presentation_Entities_Identifier> OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::getStopPoints() const {
    return m_stop_points;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::setStopPoints(const QList<OAITfl_Api_Presentation_Entities_Identifier> &stop_points) {
    m_stop_points = stop_points;
    m_stop_points_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::is_stop_points_Set() const{
    return m_stop_points_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::is_stop_points_Valid() const{
    return m_stop_points_isValid;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_elevation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Path::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
