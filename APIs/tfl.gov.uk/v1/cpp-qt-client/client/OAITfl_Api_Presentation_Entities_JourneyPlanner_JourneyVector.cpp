/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::~OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector() {}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::initializeModel() {

    m_from_isSet = false;
    m_from_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_via_isSet = false;
    m_via_isValid = false;
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::fromJsonObject(QJsonObject json) {

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_via_isValid = ::OpenAPI::fromJsonValue(m_via, json[QString("via")]);
    m_via_isSet = !json[QString("via")].isNull() && m_via_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::asJsonObject() const {
    QJsonObject obj;
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_via_isSet) {
        obj.insert(QString("via"), ::OpenAPI::toJsonValue(m_via));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::getFrom() const {
    return m_from;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::is_from_Set() const{
    return m_from_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::is_from_Valid() const{
    return m_from_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::getTo() const {
    return m_to;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::is_to_Set() const{
    return m_to_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::is_to_Valid() const{
    return m_to_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::getUri() const {
    return m_uri;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::getVia() const {
    return m_via;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::setVia(const QString &via) {
    m_via = via;
    m_via_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::is_via_Set() const{
    return m_via_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::is_via_Valid() const{
    return m_via_isValid;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_via_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
