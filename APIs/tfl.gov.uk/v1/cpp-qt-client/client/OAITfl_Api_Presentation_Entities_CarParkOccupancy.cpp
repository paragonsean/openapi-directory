/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_CarParkOccupancy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_CarParkOccupancy::OAITfl_Api_Presentation_Entities_CarParkOccupancy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_CarParkOccupancy::OAITfl_Api_Presentation_Entities_CarParkOccupancy() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_CarParkOccupancy::~OAITfl_Api_Presentation_Entities_CarParkOccupancy() {}

void OAITfl_Api_Presentation_Entities_CarParkOccupancy::initializeModel() {

    m_bays_isSet = false;
    m_bays_isValid = false;

    m_car_park_details_url_isSet = false;
    m_car_park_details_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAITfl_Api_Presentation_Entities_CarParkOccupancy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_CarParkOccupancy::fromJsonObject(QJsonObject json) {

    m_bays_isValid = ::OpenAPI::fromJsonValue(m_bays, json[QString("bays")]);
    m_bays_isSet = !json[QString("bays")].isNull() && m_bays_isValid;

    m_car_park_details_url_isValid = ::OpenAPI::fromJsonValue(m_car_park_details_url, json[QString("carParkDetailsUrl")]);
    m_car_park_details_url_isSet = !json[QString("carParkDetailsUrl")].isNull() && m_car_park_details_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_CarParkOccupancy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_CarParkOccupancy::asJsonObject() const {
    QJsonObject obj;
    if (m_bays.size() > 0) {
        obj.insert(QString("bays"), ::OpenAPI::toJsonValue(m_bays));
    }
    if (m_car_park_details_url_isSet) {
        obj.insert(QString("carParkDetailsUrl"), ::OpenAPI::toJsonValue(m_car_park_details_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<OAITfl_Api_Presentation_Entities_Bay> OAITfl_Api_Presentation_Entities_CarParkOccupancy::getBays() const {
    return m_bays;
}
void OAITfl_Api_Presentation_Entities_CarParkOccupancy::setBays(const QList<OAITfl_Api_Presentation_Entities_Bay> &bays) {
    m_bays = bays;
    m_bays_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_CarParkOccupancy::is_bays_Set() const{
    return m_bays_isSet;
}

bool OAITfl_Api_Presentation_Entities_CarParkOccupancy::is_bays_Valid() const{
    return m_bays_isValid;
}

QString OAITfl_Api_Presentation_Entities_CarParkOccupancy::getCarParkDetailsUrl() const {
    return m_car_park_details_url;
}
void OAITfl_Api_Presentation_Entities_CarParkOccupancy::setCarParkDetailsUrl(const QString &car_park_details_url) {
    m_car_park_details_url = car_park_details_url;
    m_car_park_details_url_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_CarParkOccupancy::is_car_park_details_url_Set() const{
    return m_car_park_details_url_isSet;
}

bool OAITfl_Api_Presentation_Entities_CarParkOccupancy::is_car_park_details_url_Valid() const{
    return m_car_park_details_url_isValid;
}

QString OAITfl_Api_Presentation_Entities_CarParkOccupancy::getId() const {
    return m_id;
}
void OAITfl_Api_Presentation_Entities_CarParkOccupancy::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_CarParkOccupancy::is_id_Set() const{
    return m_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_CarParkOccupancy::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_CarParkOccupancy::getName() const {
    return m_name;
}
void OAITfl_Api_Presentation_Entities_CarParkOccupancy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_CarParkOccupancy::is_name_Set() const{
    return m_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_CarParkOccupancy::is_name_Valid() const{
    return m_name_isValid;
}

bool OAITfl_Api_Presentation_Entities_CarParkOccupancy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bays.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_park_details_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_CarParkOccupancy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
