/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISearchApi_H
#define OAI_OAISearchApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAITfl_Api_Presentation_Entities_SearchResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISearchApi : public QObject {
    Q_OBJECT

public:
    OAISearchApi(const int timeOut = 0);
    ~OAISearchApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  query QString [required]
    */
    virtual void searchBusSchedules(const QString &query);

    /**
    * @param[in]  query QString [required]
    */
    virtual void searchGet(const QString &query);


    virtual void searchMetaCategories();


    virtual void searchMetaSearchProviders();


    virtual void searchMetaSorts();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void searchBusSchedulesCallback(OAIHttpRequestWorker *worker);
    void searchGetCallback(OAIHttpRequestWorker *worker);
    void searchMetaCategoriesCallback(OAIHttpRequestWorker *worker);
    void searchMetaSearchProvidersCallback(OAIHttpRequestWorker *worker);
    void searchMetaSortsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void searchBusSchedulesSignal(OAITfl_Api_Presentation_Entities_SearchResponse summary);
    void searchGetSignal(OAITfl_Api_Presentation_Entities_SearchResponse summary);
    void searchMetaCategoriesSignal(QList<QString> summary);
    void searchMetaSearchProvidersSignal(QList<QString> summary);
    void searchMetaSortsSignal(QList<QString> summary);


    void searchBusSchedulesSignalFull(OAIHttpRequestWorker *worker, OAITfl_Api_Presentation_Entities_SearchResponse summary);
    void searchGetSignalFull(OAIHttpRequestWorker *worker, OAITfl_Api_Presentation_Entities_SearchResponse summary);
    void searchMetaCategoriesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void searchMetaSearchProvidersSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void searchMetaSortsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);

    Q_DECL_DEPRECATED_X("Use searchBusSchedulesSignalError() instead")
    void searchBusSchedulesSignalE(OAITfl_Api_Presentation_Entities_SearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchBusSchedulesSignalError(OAITfl_Api_Presentation_Entities_SearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchGetSignalError() instead")
    void searchGetSignalE(OAITfl_Api_Presentation_Entities_SearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchGetSignalError(OAITfl_Api_Presentation_Entities_SearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchMetaCategoriesSignalError() instead")
    void searchMetaCategoriesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchMetaCategoriesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchMetaSearchProvidersSignalError() instead")
    void searchMetaSearchProvidersSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchMetaSearchProvidersSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchMetaSortsSignalError() instead")
    void searchMetaSortsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchMetaSortsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use searchBusSchedulesSignalErrorFull() instead")
    void searchBusSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchBusSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchGetSignalErrorFull() instead")
    void searchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchMetaCategoriesSignalErrorFull() instead")
    void searchMetaCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchMetaCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchMetaSearchProvidersSignalErrorFull() instead")
    void searchMetaSearchProvidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchMetaSearchProvidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchMetaSortsSignalErrorFull() instead")
    void searchMetaSortsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchMetaSortsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
