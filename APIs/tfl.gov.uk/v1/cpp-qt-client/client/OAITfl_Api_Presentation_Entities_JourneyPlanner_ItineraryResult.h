/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult.h
 *
 * A DTO representing a list of possible journeys.
 */

#ifndef OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult_H
#define OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult_H

#include <QJsonObject>

#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey.h"
#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData.h"
#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector.h"
#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria.h"
#include "OAITfl_Api_Presentation_Entities_Line.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData;
class OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector;
class OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey;
class OAITfl_Api_Presentation_Entities_Line;
class OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria;

class OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult : public OAIObject {
public:
    OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult();
    OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult(QString json);
    ~OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData getCycleHireDockingStationData() const;
    void setCycleHireDockingStationData(const OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData &cycle_hire_docking_station_data);
    bool is_cycle_hire_docking_station_data_Set() const;
    bool is_cycle_hire_docking_station_data_Valid() const;

    OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector getJourneyVector() const;
    void setJourneyVector(const OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector &journey_vector);
    bool is_journey_vector_Set() const;
    bool is_journey_vector_Valid() const;

    QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey> getJourneys() const;
    void setJourneys(const QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey> &journeys);
    bool is_journeys_Set() const;
    bool is_journeys_Valid() const;

    QList<OAITfl_Api_Presentation_Entities_Line> getLines() const;
    void setLines(const QList<OAITfl_Api_Presentation_Entities_Line> &lines);
    bool is_lines_Set() const;
    bool is_lines_Valid() const;

    qint32 getRecommendedMaxAgeMinutes() const;
    void setRecommendedMaxAgeMinutes(const qint32 &recommended_max_age_minutes);
    bool is_recommended_max_age_minutes_Set() const;
    bool is_recommended_max_age_minutes_Valid() const;

    OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria getSearchCriteria() const;
    void setSearchCriteria(const OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria &search_criteria);
    bool is_search_criteria_Set() const;
    bool is_search_criteria_Valid() const;

    QList<QString> getStopMessages() const;
    void setStopMessages(const QList<QString> &stop_messages);
    bool is_stop_messages_Set() const;
    bool is_stop_messages_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyPlannerCycleHireDockingStationData m_cycle_hire_docking_station_data;
    bool m_cycle_hire_docking_station_data_isSet;
    bool m_cycle_hire_docking_station_data_isValid;

    OAITfl_Api_Presentation_Entities_JourneyPlanner_JourneyVector m_journey_vector;
    bool m_journey_vector_isSet;
    bool m_journey_vector_isValid;

    QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_Journey> m_journeys;
    bool m_journeys_isSet;
    bool m_journeys_isValid;

    QList<OAITfl_Api_Presentation_Entities_Line> m_lines;
    bool m_lines_isSet;
    bool m_lines_isValid;

    qint32 m_recommended_max_age_minutes;
    bool m_recommended_max_age_minutes_isSet;
    bool m_recommended_max_age_minutes_isValid;

    OAITfl_Api_Presentation_Entities_JourneyPlanner_SearchCriteria m_search_criteria;
    bool m_search_criteria_isSet;
    bool m_search_criteria_isValid;

    QList<QString> m_stop_messages;
    bool m_stop_messages_isSet;
    bool m_stop_messages_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult)

#endif // OAITfl_Api_Presentation_Entities_JourneyPlanner_ItineraryResult_H
