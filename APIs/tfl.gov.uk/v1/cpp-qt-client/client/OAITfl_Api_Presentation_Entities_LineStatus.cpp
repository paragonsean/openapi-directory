/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_LineStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_LineStatus::OAITfl_Api_Presentation_Entities_LineStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_LineStatus::OAITfl_Api_Presentation_Entities_LineStatus() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_LineStatus::~OAITfl_Api_Presentation_Entities_LineStatus() {}

void OAITfl_Api_Presentation_Entities_LineStatus::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_disruption_isSet = false;
    m_disruption_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_line_id_isSet = false;
    m_line_id_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_severity_isSet = false;
    m_status_severity_isValid = false;

    m_status_severity_description_isSet = false;
    m_status_severity_description_isValid = false;

    m_validity_periods_isSet = false;
    m_validity_periods_isValid = false;
}

void OAITfl_Api_Presentation_Entities_LineStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_LineStatus::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_disruption_isValid = ::OpenAPI::fromJsonValue(m_disruption, json[QString("disruption")]);
    m_disruption_isSet = !json[QString("disruption")].isNull() && m_disruption_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_line_id_isValid = ::OpenAPI::fromJsonValue(m_line_id, json[QString("lineId")]);
    m_line_id_isSet = !json[QString("lineId")].isNull() && m_line_id_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_severity_isValid = ::OpenAPI::fromJsonValue(m_status_severity, json[QString("statusSeverity")]);
    m_status_severity_isSet = !json[QString("statusSeverity")].isNull() && m_status_severity_isValid;

    m_status_severity_description_isValid = ::OpenAPI::fromJsonValue(m_status_severity_description, json[QString("statusSeverityDescription")]);
    m_status_severity_description_isSet = !json[QString("statusSeverityDescription")].isNull() && m_status_severity_description_isValid;

    m_validity_periods_isValid = ::OpenAPI::fromJsonValue(m_validity_periods, json[QString("validityPeriods")]);
    m_validity_periods_isSet = !json[QString("validityPeriods")].isNull() && m_validity_periods_isValid;
}

QString OAITfl_Api_Presentation_Entities_LineStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_LineStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_disruption.isSet()) {
        obj.insert(QString("disruption"), ::OpenAPI::toJsonValue(m_disruption));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_line_id_isSet) {
        obj.insert(QString("lineId"), ::OpenAPI::toJsonValue(m_line_id));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_severity_isSet) {
        obj.insert(QString("statusSeverity"), ::OpenAPI::toJsonValue(m_status_severity));
    }
    if (m_status_severity_description_isSet) {
        obj.insert(QString("statusSeverityDescription"), ::OpenAPI::toJsonValue(m_status_severity_description));
    }
    if (m_validity_periods.size() > 0) {
        obj.insert(QString("validityPeriods"), ::OpenAPI::toJsonValue(m_validity_periods));
    }
    return obj;
}

QDateTime OAITfl_Api_Presentation_Entities_LineStatus::getCreated() const {
    return m_created;
}
void OAITfl_Api_Presentation_Entities_LineStatus::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::is_created_Set() const{
    return m_created_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::is_created_Valid() const{
    return m_created_isValid;
}

OAITfl_Api_Presentation_Entities_Disruption OAITfl_Api_Presentation_Entities_LineStatus::getDisruption() const {
    return m_disruption;
}
void OAITfl_Api_Presentation_Entities_LineStatus::setDisruption(const OAITfl_Api_Presentation_Entities_Disruption &disruption) {
    m_disruption = disruption;
    m_disruption_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::is_disruption_Set() const{
    return m_disruption_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::is_disruption_Valid() const{
    return m_disruption_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_LineStatus::getId() const {
    return m_id;
}
void OAITfl_Api_Presentation_Entities_LineStatus::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::is_id_Set() const{
    return m_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_LineStatus::getLineId() const {
    return m_line_id;
}
void OAITfl_Api_Presentation_Entities_LineStatus::setLineId(const QString &line_id) {
    m_line_id = line_id;
    m_line_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::is_line_id_Set() const{
    return m_line_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::is_line_id_Valid() const{
    return m_line_id_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_LineStatus::getModified() const {
    return m_modified;
}
void OAITfl_Api_Presentation_Entities_LineStatus::setModified(const QDateTime &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::is_modified_Valid() const{
    return m_modified_isValid;
}

QString OAITfl_Api_Presentation_Entities_LineStatus::getReason() const {
    return m_reason;
}
void OAITfl_Api_Presentation_Entities_LineStatus::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::is_reason_Valid() const{
    return m_reason_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_LineStatus::getStatusSeverity() const {
    return m_status_severity;
}
void OAITfl_Api_Presentation_Entities_LineStatus::setStatusSeverity(const qint32 &status_severity) {
    m_status_severity = status_severity;
    m_status_severity_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::is_status_severity_Set() const{
    return m_status_severity_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::is_status_severity_Valid() const{
    return m_status_severity_isValid;
}

QString OAITfl_Api_Presentation_Entities_LineStatus::getStatusSeverityDescription() const {
    return m_status_severity_description;
}
void OAITfl_Api_Presentation_Entities_LineStatus::setStatusSeverityDescription(const QString &status_severity_description) {
    m_status_severity_description = status_severity_description;
    m_status_severity_description_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::is_status_severity_description_Set() const{
    return m_status_severity_description_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::is_status_severity_description_Valid() const{
    return m_status_severity_description_isValid;
}

QList<OAITfl_Api_Presentation_Entities_ValidityPeriod> OAITfl_Api_Presentation_Entities_LineStatus::getValidityPeriods() const {
    return m_validity_periods;
}
void OAITfl_Api_Presentation_Entities_LineStatus::setValidityPeriods(const QList<OAITfl_Api_Presentation_Entities_ValidityPeriod> &validity_periods) {
    m_validity_periods = validity_periods;
    m_validity_periods_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::is_validity_periods_Set() const{
    return m_validity_periods_isSet;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::is_validity_periods_Valid() const{
    return m_validity_periods_isValid;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disruption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_severity_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity_periods.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_LineStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
