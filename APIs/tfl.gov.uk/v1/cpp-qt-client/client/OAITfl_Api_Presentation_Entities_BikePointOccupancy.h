/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITfl_Api_Presentation_Entities_BikePointOccupancy.h
 *
 * Bike point occupancy
 */

#ifndef OAITfl_Api_Presentation_Entities_BikePointOccupancy_H
#define OAITfl_Api_Presentation_Entities_BikePointOccupancy_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITfl_Api_Presentation_Entities_BikePointOccupancy : public OAIObject {
public:
    OAITfl_Api_Presentation_Entities_BikePointOccupancy();
    OAITfl_Api_Presentation_Entities_BikePointOccupancy(QString json);
    ~OAITfl_Api_Presentation_Entities_BikePointOccupancy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBikesCount() const;
    void setBikesCount(const qint32 &bikes_count);
    bool is_bikes_count_Set() const;
    bool is_bikes_count_Valid() const;

    qint32 getEBikesCount() const;
    void setEBikesCount(const qint32 &e_bikes_count);
    bool is_e_bikes_count_Set() const;
    bool is_e_bikes_count_Valid() const;

    qint32 getEmptyDocks() const;
    void setEmptyDocks(const qint32 &empty_docks);
    bool is_empty_docks_Set() const;
    bool is_empty_docks_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getStandardBikesCount() const;
    void setStandardBikesCount(const qint32 &standard_bikes_count);
    bool is_standard_bikes_count_Set() const;
    bool is_standard_bikes_count_Valid() const;

    qint32 getTotalDocks() const;
    void setTotalDocks(const qint32 &total_docks);
    bool is_total_docks_Set() const;
    bool is_total_docks_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bikes_count;
    bool m_bikes_count_isSet;
    bool m_bikes_count_isValid;

    qint32 m_e_bikes_count;
    bool m_e_bikes_count_isSet;
    bool m_e_bikes_count_isValid;

    qint32 m_empty_docks;
    bool m_empty_docks_isSet;
    bool m_empty_docks_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_standard_bikes_count;
    bool m_standard_bikes_count_isSet;
    bool m_standard_bikes_count_isValid;

    qint32 m_total_docks;
    bool m_total_docks_isSet;
    bool m_total_docks_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITfl_Api_Presentation_Entities_BikePointOccupancy)

#endif // OAITfl_Api_Presentation_Entities_BikePointOccupancy_H
