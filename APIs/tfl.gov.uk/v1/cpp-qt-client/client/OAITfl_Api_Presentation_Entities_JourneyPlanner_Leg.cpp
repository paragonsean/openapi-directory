/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::~OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg() {}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::initializeModel() {

    m_arrival_point_isSet = false;
    m_arrival_point_isValid = false;

    m_arrival_time_isSet = false;
    m_arrival_time_isValid = false;

    m_departure_point_isSet = false;
    m_departure_point_isValid = false;

    m_departure_time_isSet = false;
    m_departure_time_isValid = false;

    m_disruptions_isSet = false;
    m_disruptions_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_has_fixed_locations_isSet = false;
    m_has_fixed_locations_isValid = false;

    m_instruction_isSet = false;
    m_instruction_isValid = false;

    m_inter_change_duration_isSet = false;
    m_inter_change_duration_isValid = false;

    m_inter_change_position_isSet = false;
    m_inter_change_position_isValid = false;

    m_is_disrupted_isSet = false;
    m_is_disrupted_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_obstacles_isSet = false;
    m_obstacles_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_planned_works_isSet = false;
    m_planned_works_isValid = false;

    m_route_options_isSet = false;
    m_route_options_isValid = false;

    m_scheduled_arrival_time_isSet = false;
    m_scheduled_arrival_time_isValid = false;

    m_scheduled_departure_time_isSet = false;
    m_scheduled_departure_time_isValid = false;

    m_speed_isSet = false;
    m_speed_isValid = false;
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::fromJsonObject(QJsonObject json) {

    m_arrival_point_isValid = ::OpenAPI::fromJsonValue(m_arrival_point, json[QString("arrivalPoint")]);
    m_arrival_point_isSet = !json[QString("arrivalPoint")].isNull() && m_arrival_point_isValid;

    m_arrival_time_isValid = ::OpenAPI::fromJsonValue(m_arrival_time, json[QString("arrivalTime")]);
    m_arrival_time_isSet = !json[QString("arrivalTime")].isNull() && m_arrival_time_isValid;

    m_departure_point_isValid = ::OpenAPI::fromJsonValue(m_departure_point, json[QString("departurePoint")]);
    m_departure_point_isSet = !json[QString("departurePoint")].isNull() && m_departure_point_isValid;

    m_departure_time_isValid = ::OpenAPI::fromJsonValue(m_departure_time, json[QString("departureTime")]);
    m_departure_time_isSet = !json[QString("departureTime")].isNull() && m_departure_time_isValid;

    m_disruptions_isValid = ::OpenAPI::fromJsonValue(m_disruptions, json[QString("disruptions")]);
    m_disruptions_isSet = !json[QString("disruptions")].isNull() && m_disruptions_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_has_fixed_locations_isValid = ::OpenAPI::fromJsonValue(m_has_fixed_locations, json[QString("hasFixedLocations")]);
    m_has_fixed_locations_isSet = !json[QString("hasFixedLocations")].isNull() && m_has_fixed_locations_isValid;

    m_instruction_isValid = ::OpenAPI::fromJsonValue(m_instruction, json[QString("instruction")]);
    m_instruction_isSet = !json[QString("instruction")].isNull() && m_instruction_isValid;

    m_inter_change_duration_isValid = ::OpenAPI::fromJsonValue(m_inter_change_duration, json[QString("interChangeDuration")]);
    m_inter_change_duration_isSet = !json[QString("interChangeDuration")].isNull() && m_inter_change_duration_isValid;

    m_inter_change_position_isValid = ::OpenAPI::fromJsonValue(m_inter_change_position, json[QString("interChangePosition")]);
    m_inter_change_position_isSet = !json[QString("interChangePosition")].isNull() && m_inter_change_position_isValid;

    m_is_disrupted_isValid = ::OpenAPI::fromJsonValue(m_is_disrupted, json[QString("isDisrupted")]);
    m_is_disrupted_isSet = !json[QString("isDisrupted")].isNull() && m_is_disrupted_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_obstacles_isValid = ::OpenAPI::fromJsonValue(m_obstacles, json[QString("obstacles")]);
    m_obstacles_isSet = !json[QString("obstacles")].isNull() && m_obstacles_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_planned_works_isValid = ::OpenAPI::fromJsonValue(m_planned_works, json[QString("plannedWorks")]);
    m_planned_works_isSet = !json[QString("plannedWorks")].isNull() && m_planned_works_isValid;

    m_route_options_isValid = ::OpenAPI::fromJsonValue(m_route_options, json[QString("routeOptions")]);
    m_route_options_isSet = !json[QString("routeOptions")].isNull() && m_route_options_isValid;

    m_scheduled_arrival_time_isValid = ::OpenAPI::fromJsonValue(m_scheduled_arrival_time, json[QString("scheduledArrivalTime")]);
    m_scheduled_arrival_time_isSet = !json[QString("scheduledArrivalTime")].isNull() && m_scheduled_arrival_time_isValid;

    m_scheduled_departure_time_isValid = ::OpenAPI::fromJsonValue(m_scheduled_departure_time, json[QString("scheduledDepartureTime")]);
    m_scheduled_departure_time_isSet = !json[QString("scheduledDepartureTime")].isNull() && m_scheduled_departure_time_isValid;

    m_speed_isValid = ::OpenAPI::fromJsonValue(m_speed, json[QString("speed")]);
    m_speed_isSet = !json[QString("speed")].isNull() && m_speed_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::asJsonObject() const {
    QJsonObject obj;
    if (m_arrival_point.isSet()) {
        obj.insert(QString("arrivalPoint"), ::OpenAPI::toJsonValue(m_arrival_point));
    }
    if (m_arrival_time_isSet) {
        obj.insert(QString("arrivalTime"), ::OpenAPI::toJsonValue(m_arrival_time));
    }
    if (m_departure_point.isSet()) {
        obj.insert(QString("departurePoint"), ::OpenAPI::toJsonValue(m_departure_point));
    }
    if (m_departure_time_isSet) {
        obj.insert(QString("departureTime"), ::OpenAPI::toJsonValue(m_departure_time));
    }
    if (m_disruptions.size() > 0) {
        obj.insert(QString("disruptions"), ::OpenAPI::toJsonValue(m_disruptions));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_has_fixed_locations_isSet) {
        obj.insert(QString("hasFixedLocations"), ::OpenAPI::toJsonValue(m_has_fixed_locations));
    }
    if (m_instruction.isSet()) {
        obj.insert(QString("instruction"), ::OpenAPI::toJsonValue(m_instruction));
    }
    if (m_inter_change_duration_isSet) {
        obj.insert(QString("interChangeDuration"), ::OpenAPI::toJsonValue(m_inter_change_duration));
    }
    if (m_inter_change_position_isSet) {
        obj.insert(QString("interChangePosition"), ::OpenAPI::toJsonValue(m_inter_change_position));
    }
    if (m_is_disrupted_isSet) {
        obj.insert(QString("isDisrupted"), ::OpenAPI::toJsonValue(m_is_disrupted));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_obstacles.size() > 0) {
        obj.insert(QString("obstacles"), ::OpenAPI::toJsonValue(m_obstacles));
    }
    if (m_path.isSet()) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_planned_works.size() > 0) {
        obj.insert(QString("plannedWorks"), ::OpenAPI::toJsonValue(m_planned_works));
    }
    if (m_route_options.size() > 0) {
        obj.insert(QString("routeOptions"), ::OpenAPI::toJsonValue(m_route_options));
    }
    if (m_scheduled_arrival_time_isSet) {
        obj.insert(QString("scheduledArrivalTime"), ::OpenAPI::toJsonValue(m_scheduled_arrival_time));
    }
    if (m_scheduled_departure_time_isSet) {
        obj.insert(QString("scheduledDepartureTime"), ::OpenAPI::toJsonValue(m_scheduled_departure_time));
    }
    if (m_speed_isSet) {
        obj.insert(QString("speed"), ::OpenAPI::toJsonValue(m_speed));
    }
    return obj;
}

OAITfl_Api_Presentation_Entities_Point OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::getArrivalPoint() const {
    return m_arrival_point;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setArrivalPoint(const OAITfl_Api_Presentation_Entities_Point &arrival_point) {
    m_arrival_point = arrival_point;
    m_arrival_point_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_arrival_point_Set() const{
    return m_arrival_point_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_arrival_point_Valid() const{
    return m_arrival_point_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::getArrivalTime() const {
    return m_arrival_time;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setArrivalTime(const QDateTime &arrival_time) {
    m_arrival_time = arrival_time;
    m_arrival_time_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_arrival_time_Set() const{
    return m_arrival_time_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_arrival_time_Valid() const{
    return m_arrival_time_isValid;
}

OAITfl_Api_Presentation_Entities_Point OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::getDeparturePoint() const {
    return m_departure_point;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setDeparturePoint(const OAITfl_Api_Presentation_Entities_Point &departure_point) {
    m_departure_point = departure_point;
    m_departure_point_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_departure_point_Set() const{
    return m_departure_point_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_departure_point_Valid() const{
    return m_departure_point_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::getDepartureTime() const {
    return m_departure_time;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setDepartureTime(const QDateTime &departure_time) {
    m_departure_time = departure_time;
    m_departure_time_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_departure_time_Set() const{
    return m_departure_time_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_departure_time_Valid() const{
    return m_departure_time_isValid;
}

QList<OAITfl_Api_Presentation_Entities_Disruption> OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::getDisruptions() const {
    return m_disruptions;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setDisruptions(const QList<OAITfl_Api_Presentation_Entities_Disruption> &disruptions) {
    m_disruptions = disruptions;
    m_disruptions_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_disruptions_Set() const{
    return m_disruptions_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_disruptions_Valid() const{
    return m_disruptions_isValid;
}

double OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::getDistance() const {
    return m_distance;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_distance_Valid() const{
    return m_distance_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::getDuration() const {
    return m_duration;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_duration_Valid() const{
    return m_duration_isValid;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::isHasFixedLocations() const {
    return m_has_fixed_locations;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setHasFixedLocations(const bool &has_fixed_locations) {
    m_has_fixed_locations = has_fixed_locations;
    m_has_fixed_locations_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_has_fixed_locations_Set() const{
    return m_has_fixed_locations_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_has_fixed_locations_Valid() const{
    return m_has_fixed_locations_isValid;
}

OAITfl_Api_Presentation_Entities_Instruction OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::getInstruction() const {
    return m_instruction;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setInstruction(const OAITfl_Api_Presentation_Entities_Instruction &instruction) {
    m_instruction = instruction;
    m_instruction_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_instruction_Set() const{
    return m_instruction_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_instruction_Valid() const{
    return m_instruction_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::getInterChangeDuration() const {
    return m_inter_change_duration;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setInterChangeDuration(const QString &inter_change_duration) {
    m_inter_change_duration = inter_change_duration;
    m_inter_change_duration_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_inter_change_duration_Set() const{
    return m_inter_change_duration_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_inter_change_duration_Valid() const{
    return m_inter_change_duration_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::getInterChangePosition() const {
    return m_inter_change_position;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setInterChangePosition(const QString &inter_change_position) {
    m_inter_change_position = inter_change_position;
    m_inter_change_position_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_inter_change_position_Set() const{
    return m_inter_change_position_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_inter_change_position_Valid() const{
    return m_inter_change_position_isValid;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::isIsDisrupted() const {
    return m_is_disrupted;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setIsDisrupted(const bool &is_disrupted) {
    m_is_disrupted = is_disrupted;
    m_is_disrupted_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_is_disrupted_Set() const{
    return m_is_disrupted_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_is_disrupted_Valid() const{
    return m_is_disrupted_isValid;
}

OAITfl_Api_Presentation_Entities_Identifier OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::getMode() const {
    return m_mode;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setMode(const OAITfl_Api_Presentation_Entities_Identifier &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_mode_Valid() const{
    return m_mode_isValid;
}

QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_Obstacle> OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::getObstacles() const {
    return m_obstacles;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setObstacles(const QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_Obstacle> &obstacles) {
    m_obstacles = obstacles;
    m_obstacles_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_obstacles_Set() const{
    return m_obstacles_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_obstacles_Valid() const{
    return m_obstacles_isValid;
}

OAITfl_Api_Presentation_Entities_JourneyPlanner_Path OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::getPath() const {
    return m_path;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setPath(const OAITfl_Api_Presentation_Entities_JourneyPlanner_Path &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_path_Set() const{
    return m_path_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_path_Valid() const{
    return m_path_isValid;
}

QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_PlannedWork> OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::getPlannedWorks() const {
    return m_planned_works;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setPlannedWorks(const QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_PlannedWork> &planned_works) {
    m_planned_works = planned_works;
    m_planned_works_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_planned_works_Set() const{
    return m_planned_works_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_planned_works_Valid() const{
    return m_planned_works_isValid;
}

QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_RouteOption> OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::getRouteOptions() const {
    return m_route_options;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setRouteOptions(const QList<OAITfl_Api_Presentation_Entities_JourneyPlanner_RouteOption> &route_options) {
    m_route_options = route_options;
    m_route_options_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_route_options_Set() const{
    return m_route_options_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_route_options_Valid() const{
    return m_route_options_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::getScheduledArrivalTime() const {
    return m_scheduled_arrival_time;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setScheduledArrivalTime(const QDateTime &scheduled_arrival_time) {
    m_scheduled_arrival_time = scheduled_arrival_time;
    m_scheduled_arrival_time_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_scheduled_arrival_time_Set() const{
    return m_scheduled_arrival_time_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_scheduled_arrival_time_Valid() const{
    return m_scheduled_arrival_time_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::getScheduledDepartureTime() const {
    return m_scheduled_departure_time;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setScheduledDepartureTime(const QDateTime &scheduled_departure_time) {
    m_scheduled_departure_time = scheduled_departure_time;
    m_scheduled_departure_time_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_scheduled_departure_time_Set() const{
    return m_scheduled_departure_time_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_scheduled_departure_time_Valid() const{
    return m_scheduled_departure_time_isValid;
}

QString OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::getSpeed() const {
    return m_speed;
}
void OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::setSpeed(const QString &speed) {
    m_speed = speed;
    m_speed_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_speed_Set() const{
    return m_speed_isSet;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::is_speed_Valid() const{
    return m_speed_isValid;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arrival_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arrival_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disruptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_fixed_locations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instruction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inter_change_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inter_change_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_disrupted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_obstacles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_planned_works.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_arrival_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_departure_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_JourneyPlanner_Leg::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
