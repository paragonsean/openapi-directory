/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_NetworkStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_NetworkStatus::OAITfl_Api_Presentation_Entities_NetworkStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_NetworkStatus::OAITfl_Api_Presentation_Entities_NetworkStatus() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_NetworkStatus::~OAITfl_Api_Presentation_Entities_NetworkStatus() {}

void OAITfl_Api_Presentation_Entities_NetworkStatus::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_level_isSet = false;
    m_status_level_isValid = false;
}

void OAITfl_Api_Presentation_Entities_NetworkStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_NetworkStatus::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_level_isValid = ::OpenAPI::fromJsonValue(m_status_level, json[QString("statusLevel")]);
    m_status_level_isSet = !json[QString("statusLevel")].isNull() && m_status_level_isValid;
}

QString OAITfl_Api_Presentation_Entities_NetworkStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_NetworkStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_level_isSet) {
        obj.insert(QString("statusLevel"), ::OpenAPI::toJsonValue(m_status_level));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_NetworkStatus::getMessage() const {
    return m_message;
}
void OAITfl_Api_Presentation_Entities_NetworkStatus::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_NetworkStatus::is_message_Set() const{
    return m_message_isSet;
}

bool OAITfl_Api_Presentation_Entities_NetworkStatus::is_message_Valid() const{
    return m_message_isValid;
}

QString OAITfl_Api_Presentation_Entities_NetworkStatus::getROperator() const {
    return m_r_operator;
}
void OAITfl_Api_Presentation_Entities_NetworkStatus::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_NetworkStatus::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAITfl_Api_Presentation_Entities_NetworkStatus::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QString OAITfl_Api_Presentation_Entities_NetworkStatus::getStatus() const {
    return m_status;
}
void OAITfl_Api_Presentation_Entities_NetworkStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_NetworkStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAITfl_Api_Presentation_Entities_NetworkStatus::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_NetworkStatus::getStatusLevel() const {
    return m_status_level;
}
void OAITfl_Api_Presentation_Entities_NetworkStatus::setStatusLevel(const qint32 &status_level) {
    m_status_level = status_level;
    m_status_level_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_NetworkStatus::is_status_level_Set() const{
    return m_status_level_isSet;
}

bool OAITfl_Api_Presentation_Entities_NetworkStatus::is_status_level_Valid() const{
    return m_status_level_isValid;
}

bool OAITfl_Api_Presentation_Entities_NetworkStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_NetworkStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
