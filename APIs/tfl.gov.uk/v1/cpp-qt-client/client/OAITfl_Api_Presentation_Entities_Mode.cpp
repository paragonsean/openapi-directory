/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Mode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Mode::OAITfl_Api_Presentation_Entities_Mode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Mode::OAITfl_Api_Presentation_Entities_Mode() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Mode::~OAITfl_Api_Presentation_Entities_Mode() {}

void OAITfl_Api_Presentation_Entities_Mode::initializeModel() {

    m_is_fare_paying_isSet = false;
    m_is_fare_paying_isValid = false;

    m_is_scheduled_service_isSet = false;
    m_is_scheduled_service_isValid = false;

    m_is_tfl_service_isSet = false;
    m_is_tfl_service_isValid = false;

    m_mode_name_isSet = false;
    m_mode_name_isValid = false;

    m_mot_type_isSet = false;
    m_mot_type_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Mode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Mode::fromJsonObject(QJsonObject json) {

    m_is_fare_paying_isValid = ::OpenAPI::fromJsonValue(m_is_fare_paying, json[QString("isFarePaying")]);
    m_is_fare_paying_isSet = !json[QString("isFarePaying")].isNull() && m_is_fare_paying_isValid;

    m_is_scheduled_service_isValid = ::OpenAPI::fromJsonValue(m_is_scheduled_service, json[QString("isScheduledService")]);
    m_is_scheduled_service_isSet = !json[QString("isScheduledService")].isNull() && m_is_scheduled_service_isValid;

    m_is_tfl_service_isValid = ::OpenAPI::fromJsonValue(m_is_tfl_service, json[QString("isTflService")]);
    m_is_tfl_service_isSet = !json[QString("isTflService")].isNull() && m_is_tfl_service_isValid;

    m_mode_name_isValid = ::OpenAPI::fromJsonValue(m_mode_name, json[QString("modeName")]);
    m_mode_name_isSet = !json[QString("modeName")].isNull() && m_mode_name_isValid;

    m_mot_type_isValid = ::OpenAPI::fromJsonValue(m_mot_type, json[QString("motType")]);
    m_mot_type_isSet = !json[QString("motType")].isNull() && m_mot_type_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;
}

QString OAITfl_Api_Presentation_Entities_Mode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Mode::asJsonObject() const {
    QJsonObject obj;
    if (m_is_fare_paying_isSet) {
        obj.insert(QString("isFarePaying"), ::OpenAPI::toJsonValue(m_is_fare_paying));
    }
    if (m_is_scheduled_service_isSet) {
        obj.insert(QString("isScheduledService"), ::OpenAPI::toJsonValue(m_is_scheduled_service));
    }
    if (m_is_tfl_service_isSet) {
        obj.insert(QString("isTflService"), ::OpenAPI::toJsonValue(m_is_tfl_service));
    }
    if (m_mode_name_isSet) {
        obj.insert(QString("modeName"), ::OpenAPI::toJsonValue(m_mode_name));
    }
    if (m_mot_type_isSet) {
        obj.insert(QString("motType"), ::OpenAPI::toJsonValue(m_mot_type));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    return obj;
}

bool OAITfl_Api_Presentation_Entities_Mode::isIsFarePaying() const {
    return m_is_fare_paying;
}
void OAITfl_Api_Presentation_Entities_Mode::setIsFarePaying(const bool &is_fare_paying) {
    m_is_fare_paying = is_fare_paying;
    m_is_fare_paying_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Mode::is_is_fare_paying_Set() const{
    return m_is_fare_paying_isSet;
}

bool OAITfl_Api_Presentation_Entities_Mode::is_is_fare_paying_Valid() const{
    return m_is_fare_paying_isValid;
}

bool OAITfl_Api_Presentation_Entities_Mode::isIsScheduledService() const {
    return m_is_scheduled_service;
}
void OAITfl_Api_Presentation_Entities_Mode::setIsScheduledService(const bool &is_scheduled_service) {
    m_is_scheduled_service = is_scheduled_service;
    m_is_scheduled_service_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Mode::is_is_scheduled_service_Set() const{
    return m_is_scheduled_service_isSet;
}

bool OAITfl_Api_Presentation_Entities_Mode::is_is_scheduled_service_Valid() const{
    return m_is_scheduled_service_isValid;
}

bool OAITfl_Api_Presentation_Entities_Mode::isIsTflService() const {
    return m_is_tfl_service;
}
void OAITfl_Api_Presentation_Entities_Mode::setIsTflService(const bool &is_tfl_service) {
    m_is_tfl_service = is_tfl_service;
    m_is_tfl_service_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Mode::is_is_tfl_service_Set() const{
    return m_is_tfl_service_isSet;
}

bool OAITfl_Api_Presentation_Entities_Mode::is_is_tfl_service_Valid() const{
    return m_is_tfl_service_isValid;
}

QString OAITfl_Api_Presentation_Entities_Mode::getModeName() const {
    return m_mode_name;
}
void OAITfl_Api_Presentation_Entities_Mode::setModeName(const QString &mode_name) {
    m_mode_name = mode_name;
    m_mode_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Mode::is_mode_name_Set() const{
    return m_mode_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_Mode::is_mode_name_Valid() const{
    return m_mode_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_Mode::getMotType() const {
    return m_mot_type;
}
void OAITfl_Api_Presentation_Entities_Mode::setMotType(const QString &mot_type) {
    m_mot_type = mot_type;
    m_mot_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Mode::is_mot_type_Set() const{
    return m_mot_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_Mode::is_mot_type_Valid() const{
    return m_mot_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_Mode::getNetwork() const {
    return m_network;
}
void OAITfl_Api_Presentation_Entities_Mode::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Mode::is_network_Set() const{
    return m_network_isSet;
}

bool OAITfl_Api_Presentation_Entities_Mode::is_network_Valid() const{
    return m_network_isValid;
}

bool OAITfl_Api_Presentation_Entities_Mode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_fare_paying_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_scheduled_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tfl_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mot_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Mode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
