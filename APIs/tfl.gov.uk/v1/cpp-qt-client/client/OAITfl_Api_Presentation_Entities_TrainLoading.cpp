/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_TrainLoading.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_TrainLoading::OAITfl_Api_Presentation_Entities_TrainLoading(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_TrainLoading::OAITfl_Api_Presentation_Entities_TrainLoading() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_TrainLoading::~OAITfl_Api_Presentation_Entities_TrainLoading() {}

void OAITfl_Api_Presentation_Entities_TrainLoading::initializeModel() {

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;

    m_line_direction_isSet = false;
    m_line_direction_isValid = false;

    m_naptan_to_isSet = false;
    m_naptan_to_isValid = false;

    m_platform_direction_isSet = false;
    m_platform_direction_isValid = false;

    m_time_slice_isSet = false;
    m_time_slice_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAITfl_Api_Presentation_Entities_TrainLoading::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_TrainLoading::fromJsonObject(QJsonObject json) {

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(m_line, json[QString("line")]);
    m_line_isSet = !json[QString("line")].isNull() && m_line_isValid;

    m_line_direction_isValid = ::OpenAPI::fromJsonValue(m_line_direction, json[QString("lineDirection")]);
    m_line_direction_isSet = !json[QString("lineDirection")].isNull() && m_line_direction_isValid;

    m_naptan_to_isValid = ::OpenAPI::fromJsonValue(m_naptan_to, json[QString("naptanTo")]);
    m_naptan_to_isSet = !json[QString("naptanTo")].isNull() && m_naptan_to_isValid;

    m_platform_direction_isValid = ::OpenAPI::fromJsonValue(m_platform_direction, json[QString("platformDirection")]);
    m_platform_direction_isSet = !json[QString("platformDirection")].isNull() && m_platform_direction_isValid;

    m_time_slice_isValid = ::OpenAPI::fromJsonValue(m_time_slice, json[QString("timeSlice")]);
    m_time_slice_isSet = !json[QString("timeSlice")].isNull() && m_time_slice_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAITfl_Api_Presentation_Entities_TrainLoading::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_TrainLoading::asJsonObject() const {
    QJsonObject obj;
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_line_isSet) {
        obj.insert(QString("line"), ::OpenAPI::toJsonValue(m_line));
    }
    if (m_line_direction_isSet) {
        obj.insert(QString("lineDirection"), ::OpenAPI::toJsonValue(m_line_direction));
    }
    if (m_naptan_to_isSet) {
        obj.insert(QString("naptanTo"), ::OpenAPI::toJsonValue(m_naptan_to));
    }
    if (m_platform_direction_isSet) {
        obj.insert(QString("platformDirection"), ::OpenAPI::toJsonValue(m_platform_direction));
    }
    if (m_time_slice_isSet) {
        obj.insert(QString("timeSlice"), ::OpenAPI::toJsonValue(m_time_slice));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_TrainLoading::getDirection() const {
    return m_direction;
}
void OAITfl_Api_Presentation_Entities_TrainLoading::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_TrainLoading::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAITfl_Api_Presentation_Entities_TrainLoading::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAITfl_Api_Presentation_Entities_TrainLoading::getLine() const {
    return m_line;
}
void OAITfl_Api_Presentation_Entities_TrainLoading::setLine(const QString &line) {
    m_line = line;
    m_line_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_TrainLoading::is_line_Set() const{
    return m_line_isSet;
}

bool OAITfl_Api_Presentation_Entities_TrainLoading::is_line_Valid() const{
    return m_line_isValid;
}

QString OAITfl_Api_Presentation_Entities_TrainLoading::getLineDirection() const {
    return m_line_direction;
}
void OAITfl_Api_Presentation_Entities_TrainLoading::setLineDirection(const QString &line_direction) {
    m_line_direction = line_direction;
    m_line_direction_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_TrainLoading::is_line_direction_Set() const{
    return m_line_direction_isSet;
}

bool OAITfl_Api_Presentation_Entities_TrainLoading::is_line_direction_Valid() const{
    return m_line_direction_isValid;
}

QString OAITfl_Api_Presentation_Entities_TrainLoading::getNaptanTo() const {
    return m_naptan_to;
}
void OAITfl_Api_Presentation_Entities_TrainLoading::setNaptanTo(const QString &naptan_to) {
    m_naptan_to = naptan_to;
    m_naptan_to_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_TrainLoading::is_naptan_to_Set() const{
    return m_naptan_to_isSet;
}

bool OAITfl_Api_Presentation_Entities_TrainLoading::is_naptan_to_Valid() const{
    return m_naptan_to_isValid;
}

QString OAITfl_Api_Presentation_Entities_TrainLoading::getPlatformDirection() const {
    return m_platform_direction;
}
void OAITfl_Api_Presentation_Entities_TrainLoading::setPlatformDirection(const QString &platform_direction) {
    m_platform_direction = platform_direction;
    m_platform_direction_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_TrainLoading::is_platform_direction_Set() const{
    return m_platform_direction_isSet;
}

bool OAITfl_Api_Presentation_Entities_TrainLoading::is_platform_direction_Valid() const{
    return m_platform_direction_isValid;
}

QString OAITfl_Api_Presentation_Entities_TrainLoading::getTimeSlice() const {
    return m_time_slice;
}
void OAITfl_Api_Presentation_Entities_TrainLoading::setTimeSlice(const QString &time_slice) {
    m_time_slice = time_slice;
    m_time_slice_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_TrainLoading::is_time_slice_Set() const{
    return m_time_slice_isSet;
}

bool OAITfl_Api_Presentation_Entities_TrainLoading::is_time_slice_Valid() const{
    return m_time_slice_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_TrainLoading::getValue() const {
    return m_value;
}
void OAITfl_Api_Presentation_Entities_TrainLoading::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_TrainLoading::is_value_Set() const{
    return m_value_isSet;
}

bool OAITfl_Api_Presentation_Entities_TrainLoading::is_value_Valid() const{
    return m_value_isValid;
}

bool OAITfl_Api_Presentation_Entities_TrainLoading::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_naptan_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_slice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_TrainLoading::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
