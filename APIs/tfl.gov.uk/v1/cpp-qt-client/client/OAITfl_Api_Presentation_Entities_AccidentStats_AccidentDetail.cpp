/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::~OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail() {}

void OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::initializeModel() {

    m_borough_isSet = false;
    m_borough_isValid = false;

    m_casualties_isSet = false;
    m_casualties_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_vehicles_isSet = false;
    m_vehicles_isValid = false;
}

void OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::fromJsonObject(QJsonObject json) {

    m_borough_isValid = ::OpenAPI::fromJsonValue(m_borough, json[QString("borough")]);
    m_borough_isSet = !json[QString("borough")].isNull() && m_borough_isValid;

    m_casualties_isValid = ::OpenAPI::fromJsonValue(m_casualties, json[QString("casualties")]);
    m_casualties_isSet = !json[QString("casualties")].isNull() && m_casualties_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_vehicles_isValid = ::OpenAPI::fromJsonValue(m_vehicles, json[QString("vehicles")]);
    m_vehicles_isSet = !json[QString("vehicles")].isNull() && m_vehicles_isValid;
}

QString OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_borough_isSet) {
        obj.insert(QString("borough"), ::OpenAPI::toJsonValue(m_borough));
    }
    if (m_casualties.size() > 0) {
        obj.insert(QString("casualties"), ::OpenAPI::toJsonValue(m_casualties));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_vehicles.size() > 0) {
        obj.insert(QString("vehicles"), ::OpenAPI::toJsonValue(m_vehicles));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::getBorough() const {
    return m_borough;
}
void OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::setBorough(const QString &borough) {
    m_borough = borough;
    m_borough_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::is_borough_Set() const{
    return m_borough_isSet;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::is_borough_Valid() const{
    return m_borough_isValid;
}

QList<OAITfl_Api_Presentation_Entities_AccidentStats_Casualty> OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::getCasualties() const {
    return m_casualties;
}
void OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::setCasualties(const QList<OAITfl_Api_Presentation_Entities_AccidentStats_Casualty> &casualties) {
    m_casualties = casualties;
    m_casualties_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::is_casualties_Set() const{
    return m_casualties_isSet;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::is_casualties_Valid() const{
    return m_casualties_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::getDate() const {
    return m_date;
}
void OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::is_date_Set() const{
    return m_date_isSet;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::getId() const {
    return m_id;
}
void OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::is_id_Valid() const{
    return m_id_isValid;
}

double OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::getLat() const {
    return m_lat;
}
void OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::is_lat_Valid() const{
    return m_lat_isValid;
}

QString OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::getLocation() const {
    return m_location;
}
void OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::is_location_Set() const{
    return m_location_isSet;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::is_location_Valid() const{
    return m_location_isValid;
}

double OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::getLon() const {
    return m_lon;
}
void OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::setLon(const double &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::is_lon_Valid() const{
    return m_lon_isValid;
}

QString OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::getSeverity() const {
    return m_severity;
}
void OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::is_severity_Valid() const{
    return m_severity_isValid;
}

QList<OAITfl_Api_Presentation_Entities_AccidentStats_Vehicle> OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::getVehicles() const {
    return m_vehicles;
}
void OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::setVehicles(const QList<OAITfl_Api_Presentation_Entities_AccidentStats_Vehicle> &vehicles) {
    m_vehicles = vehicles;
    m_vehicles_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::is_vehicles_Set() const{
    return m_vehicles_isSet;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::is_vehicles_Valid() const{
    return m_vehicles_isValid;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_borough_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_casualties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vehicles.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_AccidentStats_AccidentDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
