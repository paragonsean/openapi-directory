/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Line.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Line::OAITfl_Api_Presentation_Entities_Line(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Line::OAITfl_Api_Presentation_Entities_Line() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Line::~OAITfl_Api_Presentation_Entities_Line() {}

void OAITfl_Api_Presentation_Entities_Line::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_crowding_isSet = false;
    m_crowding_isValid = false;

    m_disruptions_isSet = false;
    m_disruptions_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_line_statuses_isSet = false;
    m_line_statuses_isValid = false;

    m_mode_name_isSet = false;
    m_mode_name_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_route_sections_isSet = false;
    m_route_sections_isValid = false;

    m_service_types_isSet = false;
    m_service_types_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Line::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Line::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_crowding_isValid = ::OpenAPI::fromJsonValue(m_crowding, json[QString("crowding")]);
    m_crowding_isSet = !json[QString("crowding")].isNull() && m_crowding_isValid;

    m_disruptions_isValid = ::OpenAPI::fromJsonValue(m_disruptions, json[QString("disruptions")]);
    m_disruptions_isSet = !json[QString("disruptions")].isNull() && m_disruptions_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_line_statuses_isValid = ::OpenAPI::fromJsonValue(m_line_statuses, json[QString("lineStatuses")]);
    m_line_statuses_isSet = !json[QString("lineStatuses")].isNull() && m_line_statuses_isValid;

    m_mode_name_isValid = ::OpenAPI::fromJsonValue(m_mode_name, json[QString("modeName")]);
    m_mode_name_isSet = !json[QString("modeName")].isNull() && m_mode_name_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_route_sections_isValid = ::OpenAPI::fromJsonValue(m_route_sections, json[QString("routeSections")]);
    m_route_sections_isSet = !json[QString("routeSections")].isNull() && m_route_sections_isValid;

    m_service_types_isValid = ::OpenAPI::fromJsonValue(m_service_types, json[QString("serviceTypes")]);
    m_service_types_isSet = !json[QString("serviceTypes")].isNull() && m_service_types_isValid;
}

QString OAITfl_Api_Presentation_Entities_Line::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Line::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_crowding.isSet()) {
        obj.insert(QString("crowding"), ::OpenAPI::toJsonValue(m_crowding));
    }
    if (m_disruptions.size() > 0) {
        obj.insert(QString("disruptions"), ::OpenAPI::toJsonValue(m_disruptions));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_line_statuses.size() > 0) {
        obj.insert(QString("lineStatuses"), ::OpenAPI::toJsonValue(m_line_statuses));
    }
    if (m_mode_name_isSet) {
        obj.insert(QString("modeName"), ::OpenAPI::toJsonValue(m_mode_name));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_route_sections.size() > 0) {
        obj.insert(QString("routeSections"), ::OpenAPI::toJsonValue(m_route_sections));
    }
    if (m_service_types.size() > 0) {
        obj.insert(QString("serviceTypes"), ::OpenAPI::toJsonValue(m_service_types));
    }
    return obj;
}

QDateTime OAITfl_Api_Presentation_Entities_Line::getCreated() const {
    return m_created;
}
void OAITfl_Api_Presentation_Entities_Line::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Line::is_created_Set() const{
    return m_created_isSet;
}

bool OAITfl_Api_Presentation_Entities_Line::is_created_Valid() const{
    return m_created_isValid;
}

OAITfl_Api_Presentation_Entities_Crowding OAITfl_Api_Presentation_Entities_Line::getCrowding() const {
    return m_crowding;
}
void OAITfl_Api_Presentation_Entities_Line::setCrowding(const OAITfl_Api_Presentation_Entities_Crowding &crowding) {
    m_crowding = crowding;
    m_crowding_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Line::is_crowding_Set() const{
    return m_crowding_isSet;
}

bool OAITfl_Api_Presentation_Entities_Line::is_crowding_Valid() const{
    return m_crowding_isValid;
}

QList<OAITfl_Api_Presentation_Entities_Disruption> OAITfl_Api_Presentation_Entities_Line::getDisruptions() const {
    return m_disruptions;
}
void OAITfl_Api_Presentation_Entities_Line::setDisruptions(const QList<OAITfl_Api_Presentation_Entities_Disruption> &disruptions) {
    m_disruptions = disruptions;
    m_disruptions_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Line::is_disruptions_Set() const{
    return m_disruptions_isSet;
}

bool OAITfl_Api_Presentation_Entities_Line::is_disruptions_Valid() const{
    return m_disruptions_isValid;
}

QString OAITfl_Api_Presentation_Entities_Line::getId() const {
    return m_id;
}
void OAITfl_Api_Presentation_Entities_Line::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Line::is_id_Set() const{
    return m_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_Line::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAITfl_Api_Presentation_Entities_LineStatus> OAITfl_Api_Presentation_Entities_Line::getLineStatuses() const {
    return m_line_statuses;
}
void OAITfl_Api_Presentation_Entities_Line::setLineStatuses(const QList<OAITfl_Api_Presentation_Entities_LineStatus> &line_statuses) {
    m_line_statuses = line_statuses;
    m_line_statuses_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Line::is_line_statuses_Set() const{
    return m_line_statuses_isSet;
}

bool OAITfl_Api_Presentation_Entities_Line::is_line_statuses_Valid() const{
    return m_line_statuses_isValid;
}

QString OAITfl_Api_Presentation_Entities_Line::getModeName() const {
    return m_mode_name;
}
void OAITfl_Api_Presentation_Entities_Line::setModeName(const QString &mode_name) {
    m_mode_name = mode_name;
    m_mode_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Line::is_mode_name_Set() const{
    return m_mode_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_Line::is_mode_name_Valid() const{
    return m_mode_name_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_Line::getModified() const {
    return m_modified;
}
void OAITfl_Api_Presentation_Entities_Line::setModified(const QDateTime &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Line::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAITfl_Api_Presentation_Entities_Line::is_modified_Valid() const{
    return m_modified_isValid;
}

QString OAITfl_Api_Presentation_Entities_Line::getName() const {
    return m_name;
}
void OAITfl_Api_Presentation_Entities_Line::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Line::is_name_Set() const{
    return m_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_Line::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAITfl_Api_Presentation_Entities_MatchedRoute> OAITfl_Api_Presentation_Entities_Line::getRouteSections() const {
    return m_route_sections;
}
void OAITfl_Api_Presentation_Entities_Line::setRouteSections(const QList<OAITfl_Api_Presentation_Entities_MatchedRoute> &route_sections) {
    m_route_sections = route_sections;
    m_route_sections_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Line::is_route_sections_Set() const{
    return m_route_sections_isSet;
}

bool OAITfl_Api_Presentation_Entities_Line::is_route_sections_Valid() const{
    return m_route_sections_isValid;
}

QList<OAITfl_Api_Presentation_Entities_LineServiceTypeInfo> OAITfl_Api_Presentation_Entities_Line::getServiceTypes() const {
    return m_service_types;
}
void OAITfl_Api_Presentation_Entities_Line::setServiceTypes(const QList<OAITfl_Api_Presentation_Entities_LineServiceTypeInfo> &service_types) {
    m_service_types = service_types;
    m_service_types_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Line::is_service_types_Set() const{
    return m_service_types_isSet;
}

bool OAITfl_Api_Presentation_Entities_Line::is_service_types_Valid() const{
    return m_service_types_isValid;
}

bool OAITfl_Api_Presentation_Entities_Line::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crowding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disruptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_sections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Line::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
