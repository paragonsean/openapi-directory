/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_RoadCorridor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_RoadCorridor::OAITfl_Api_Presentation_Entities_RoadCorridor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_RoadCorridor::OAITfl_Api_Presentation_Entities_RoadCorridor() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_RoadCorridor::~OAITfl_Api_Presentation_Entities_RoadCorridor() {}

void OAITfl_Api_Presentation_Entities_RoadCorridor::initializeModel() {

    m_bounds_isSet = false;
    m_bounds_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_envelope_isSet = false;
    m_envelope_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_aggregation_end_date_isSet = false;
    m_status_aggregation_end_date_isValid = false;

    m_status_aggregation_start_date_isSet = false;
    m_status_aggregation_start_date_isValid = false;

    m_status_severity_isSet = false;
    m_status_severity_isValid = false;

    m_status_severity_description_isSet = false;
    m_status_severity_description_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAITfl_Api_Presentation_Entities_RoadCorridor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_RoadCorridor::fromJsonObject(QJsonObject json) {

    m_bounds_isValid = ::OpenAPI::fromJsonValue(m_bounds, json[QString("bounds")]);
    m_bounds_isSet = !json[QString("bounds")].isNull() && m_bounds_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_envelope_isValid = ::OpenAPI::fromJsonValue(m_envelope, json[QString("envelope")]);
    m_envelope_isSet = !json[QString("envelope")].isNull() && m_envelope_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_aggregation_end_date_isValid = ::OpenAPI::fromJsonValue(m_status_aggregation_end_date, json[QString("statusAggregationEndDate")]);
    m_status_aggregation_end_date_isSet = !json[QString("statusAggregationEndDate")].isNull() && m_status_aggregation_end_date_isValid;

    m_status_aggregation_start_date_isValid = ::OpenAPI::fromJsonValue(m_status_aggregation_start_date, json[QString("statusAggregationStartDate")]);
    m_status_aggregation_start_date_isSet = !json[QString("statusAggregationStartDate")].isNull() && m_status_aggregation_start_date_isValid;

    m_status_severity_isValid = ::OpenAPI::fromJsonValue(m_status_severity, json[QString("statusSeverity")]);
    m_status_severity_isSet = !json[QString("statusSeverity")].isNull() && m_status_severity_isValid;

    m_status_severity_description_isValid = ::OpenAPI::fromJsonValue(m_status_severity_description, json[QString("statusSeverityDescription")]);
    m_status_severity_description_isSet = !json[QString("statusSeverityDescription")].isNull() && m_status_severity_description_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadCorridor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_RoadCorridor::asJsonObject() const {
    QJsonObject obj;
    if (m_bounds_isSet) {
        obj.insert(QString("bounds"), ::OpenAPI::toJsonValue(m_bounds));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_envelope_isSet) {
        obj.insert(QString("envelope"), ::OpenAPI::toJsonValue(m_envelope));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status_aggregation_end_date_isSet) {
        obj.insert(QString("statusAggregationEndDate"), ::OpenAPI::toJsonValue(m_status_aggregation_end_date));
    }
    if (m_status_aggregation_start_date_isSet) {
        obj.insert(QString("statusAggregationStartDate"), ::OpenAPI::toJsonValue(m_status_aggregation_start_date));
    }
    if (m_status_severity_isSet) {
        obj.insert(QString("statusSeverity"), ::OpenAPI::toJsonValue(m_status_severity));
    }
    if (m_status_severity_description_isSet) {
        obj.insert(QString("statusSeverityDescription"), ::OpenAPI::toJsonValue(m_status_severity_description));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_RoadCorridor::getBounds() const {
    return m_bounds;
}
void OAITfl_Api_Presentation_Entities_RoadCorridor::setBounds(const QString &bounds) {
    m_bounds = bounds;
    m_bounds_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_bounds_Set() const{
    return m_bounds_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_bounds_Valid() const{
    return m_bounds_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadCorridor::getDisplayName() const {
    return m_display_name;
}
void OAITfl_Api_Presentation_Entities_RoadCorridor::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadCorridor::getEnvelope() const {
    return m_envelope;
}
void OAITfl_Api_Presentation_Entities_RoadCorridor::setEnvelope(const QString &envelope) {
    m_envelope = envelope;
    m_envelope_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_envelope_Set() const{
    return m_envelope_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_envelope_Valid() const{
    return m_envelope_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadCorridor::getGroup() const {
    return m_group;
}
void OAITfl_Api_Presentation_Entities_RoadCorridor::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_group_Set() const{
    return m_group_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_group_Valid() const{
    return m_group_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadCorridor::getId() const {
    return m_id;
}
void OAITfl_Api_Presentation_Entities_RoadCorridor::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_id_Set() const{
    return m_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_RoadCorridor::getStatusAggregationEndDate() const {
    return m_status_aggregation_end_date;
}
void OAITfl_Api_Presentation_Entities_RoadCorridor::setStatusAggregationEndDate(const QDateTime &status_aggregation_end_date) {
    m_status_aggregation_end_date = status_aggregation_end_date;
    m_status_aggregation_end_date_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_status_aggregation_end_date_Set() const{
    return m_status_aggregation_end_date_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_status_aggregation_end_date_Valid() const{
    return m_status_aggregation_end_date_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_RoadCorridor::getStatusAggregationStartDate() const {
    return m_status_aggregation_start_date;
}
void OAITfl_Api_Presentation_Entities_RoadCorridor::setStatusAggregationStartDate(const QDateTime &status_aggregation_start_date) {
    m_status_aggregation_start_date = status_aggregation_start_date;
    m_status_aggregation_start_date_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_status_aggregation_start_date_Set() const{
    return m_status_aggregation_start_date_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_status_aggregation_start_date_Valid() const{
    return m_status_aggregation_start_date_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadCorridor::getStatusSeverity() const {
    return m_status_severity;
}
void OAITfl_Api_Presentation_Entities_RoadCorridor::setStatusSeverity(const QString &status_severity) {
    m_status_severity = status_severity;
    m_status_severity_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_status_severity_Set() const{
    return m_status_severity_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_status_severity_Valid() const{
    return m_status_severity_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadCorridor::getStatusSeverityDescription() const {
    return m_status_severity_description;
}
void OAITfl_Api_Presentation_Entities_RoadCorridor::setStatusSeverityDescription(const QString &status_severity_description) {
    m_status_severity_description = status_severity_description;
    m_status_severity_description_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_status_severity_description_Set() const{
    return m_status_severity_description_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_status_severity_description_Valid() const{
    return m_status_severity_description_isValid;
}

QString OAITfl_Api_Presentation_Entities_RoadCorridor::getUrl() const {
    return m_url;
}
void OAITfl_Api_Presentation_Entities_RoadCorridor::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_url_Set() const{
    return m_url_isSet;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::is_url_Valid() const{
    return m_url_isValid;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_envelope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_aggregation_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_aggregation_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_severity_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_RoadCorridor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
