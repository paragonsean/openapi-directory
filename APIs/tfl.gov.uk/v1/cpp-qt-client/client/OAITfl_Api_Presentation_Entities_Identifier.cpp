/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Identifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Identifier::OAITfl_Api_Presentation_Entities_Identifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Identifier::OAITfl_Api_Presentation_Entities_Identifier() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Identifier::~OAITfl_Api_Presentation_Entities_Identifier() {}

void OAITfl_Api_Presentation_Entities_Identifier::initializeModel() {

    m_crowding_isSet = false;
    m_crowding_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mot_type_isSet = false;
    m_mot_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_route_type_isSet = false;
    m_route_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Identifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Identifier::fromJsonObject(QJsonObject json) {

    m_crowding_isValid = ::OpenAPI::fromJsonValue(m_crowding, json[QString("crowding")]);
    m_crowding_isSet = !json[QString("crowding")].isNull() && m_crowding_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("fullName")]);
    m_full_name_isSet = !json[QString("fullName")].isNull() && m_full_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mot_type_isValid = ::OpenAPI::fromJsonValue(m_mot_type, json[QString("motType")]);
    m_mot_type_isSet = !json[QString("motType")].isNull() && m_mot_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_route_type_isValid = ::OpenAPI::fromJsonValue(m_route_type, json[QString("routeType")]);
    m_route_type_isSet = !json[QString("routeType")].isNull() && m_route_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAITfl_Api_Presentation_Entities_Identifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Identifier::asJsonObject() const {
    QJsonObject obj;
    if (m_crowding.isSet()) {
        obj.insert(QString("crowding"), ::OpenAPI::toJsonValue(m_crowding));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("fullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mot_type_isSet) {
        obj.insert(QString("motType"), ::OpenAPI::toJsonValue(m_mot_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_route_type_isSet) {
        obj.insert(QString("routeType"), ::OpenAPI::toJsonValue(m_route_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

OAITfl_Api_Presentation_Entities_Crowding OAITfl_Api_Presentation_Entities_Identifier::getCrowding() const {
    return m_crowding;
}
void OAITfl_Api_Presentation_Entities_Identifier::setCrowding(const OAITfl_Api_Presentation_Entities_Crowding &crowding) {
    m_crowding = crowding;
    m_crowding_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_crowding_Set() const{
    return m_crowding_isSet;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_crowding_Valid() const{
    return m_crowding_isValid;
}

QString OAITfl_Api_Presentation_Entities_Identifier::getFullName() const {
    return m_full_name;
}
void OAITfl_Api_Presentation_Entities_Identifier::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_Identifier::getId() const {
    return m_id;
}
void OAITfl_Api_Presentation_Entities_Identifier::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_id_Set() const{
    return m_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_Identifier::getMotType() const {
    return m_mot_type;
}
void OAITfl_Api_Presentation_Entities_Identifier::setMotType(const QString &mot_type) {
    m_mot_type = mot_type;
    m_mot_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_mot_type_Set() const{
    return m_mot_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_mot_type_Valid() const{
    return m_mot_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_Identifier::getName() const {
    return m_name;
}
void OAITfl_Api_Presentation_Entities_Identifier::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_name_Set() const{
    return m_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_Identifier::getNetwork() const {
    return m_network;
}
void OAITfl_Api_Presentation_Entities_Identifier::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_network_Set() const{
    return m_network_isSet;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_network_Valid() const{
    return m_network_isValid;
}

QString OAITfl_Api_Presentation_Entities_Identifier::getRouteType() const {
    return m_route_type;
}
void OAITfl_Api_Presentation_Entities_Identifier::setRouteType(const QString &route_type) {
    m_route_type = route_type;
    m_route_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_route_type_Set() const{
    return m_route_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_route_type_Valid() const{
    return m_route_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_Identifier::getStatus() const {
    return m_status;
}
void OAITfl_Api_Presentation_Entities_Identifier::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_status_Set() const{
    return m_status_isSet;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITfl_Api_Presentation_Entities_Identifier::getType() const {
    return m_type;
}
void OAITfl_Api_Presentation_Entities_Identifier::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_type_Set() const{
    return m_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_Identifier::getUri() const {
    return m_uri;
}
void OAITfl_Api_Presentation_Entities_Identifier::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAITfl_Api_Presentation_Entities_Identifier::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAITfl_Api_Presentation_Entities_Identifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crowding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mot_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Identifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
