/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfl_Api_Presentation_Entities_Prediction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfl_Api_Presentation_Entities_Prediction::OAITfl_Api_Presentation_Entities_Prediction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfl_Api_Presentation_Entities_Prediction::OAITfl_Api_Presentation_Entities_Prediction() {
    this->initializeModel();
}

OAITfl_Api_Presentation_Entities_Prediction::~OAITfl_Api_Presentation_Entities_Prediction() {}

void OAITfl_Api_Presentation_Entities_Prediction::initializeModel() {

    m_bearing_isSet = false;
    m_bearing_isValid = false;

    m_current_location_isSet = false;
    m_current_location_isValid = false;

    m_destination_name_isSet = false;
    m_destination_name_isValid = false;

    m_destination_naptan_id_isSet = false;
    m_destination_naptan_id_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_expected_arrival_isSet = false;
    m_expected_arrival_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_line_id_isSet = false;
    m_line_id_isValid = false;

    m_line_name_isSet = false;
    m_line_name_isValid = false;

    m_mode_name_isSet = false;
    m_mode_name_isValid = false;

    m_naptan_id_isSet = false;
    m_naptan_id_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;

    m_platform_name_isSet = false;
    m_platform_name_isValid = false;

    m_station_name_isSet = false;
    m_station_name_isValid = false;

    m_time_to_live_isSet = false;
    m_time_to_live_isValid = false;

    m_time_to_station_isSet = false;
    m_time_to_station_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_timing_isSet = false;
    m_timing_isValid = false;

    m_towards_isSet = false;
    m_towards_isValid = false;

    m_vehicle_id_isSet = false;
    m_vehicle_id_isValid = false;
}

void OAITfl_Api_Presentation_Entities_Prediction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfl_Api_Presentation_Entities_Prediction::fromJsonObject(QJsonObject json) {

    m_bearing_isValid = ::OpenAPI::fromJsonValue(m_bearing, json[QString("bearing")]);
    m_bearing_isSet = !json[QString("bearing")].isNull() && m_bearing_isValid;

    m_current_location_isValid = ::OpenAPI::fromJsonValue(m_current_location, json[QString("currentLocation")]);
    m_current_location_isSet = !json[QString("currentLocation")].isNull() && m_current_location_isValid;

    m_destination_name_isValid = ::OpenAPI::fromJsonValue(m_destination_name, json[QString("destinationName")]);
    m_destination_name_isSet = !json[QString("destinationName")].isNull() && m_destination_name_isValid;

    m_destination_naptan_id_isValid = ::OpenAPI::fromJsonValue(m_destination_naptan_id, json[QString("destinationNaptanId")]);
    m_destination_naptan_id_isSet = !json[QString("destinationNaptanId")].isNull() && m_destination_naptan_id_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_expected_arrival_isValid = ::OpenAPI::fromJsonValue(m_expected_arrival, json[QString("expectedArrival")]);
    m_expected_arrival_isSet = !json[QString("expectedArrival")].isNull() && m_expected_arrival_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_line_id_isValid = ::OpenAPI::fromJsonValue(m_line_id, json[QString("lineId")]);
    m_line_id_isSet = !json[QString("lineId")].isNull() && m_line_id_isValid;

    m_line_name_isValid = ::OpenAPI::fromJsonValue(m_line_name, json[QString("lineName")]);
    m_line_name_isSet = !json[QString("lineName")].isNull() && m_line_name_isValid;

    m_mode_name_isValid = ::OpenAPI::fromJsonValue(m_mode_name, json[QString("modeName")]);
    m_mode_name_isSet = !json[QString("modeName")].isNull() && m_mode_name_isValid;

    m_naptan_id_isValid = ::OpenAPI::fromJsonValue(m_naptan_id, json[QString("naptanId")]);
    m_naptan_id_isSet = !json[QString("naptanId")].isNull() && m_naptan_id_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("operationType")]);
    m_operation_type_isSet = !json[QString("operationType")].isNull() && m_operation_type_isValid;

    m_platform_name_isValid = ::OpenAPI::fromJsonValue(m_platform_name, json[QString("platformName")]);
    m_platform_name_isSet = !json[QString("platformName")].isNull() && m_platform_name_isValid;

    m_station_name_isValid = ::OpenAPI::fromJsonValue(m_station_name, json[QString("stationName")]);
    m_station_name_isSet = !json[QString("stationName")].isNull() && m_station_name_isValid;

    m_time_to_live_isValid = ::OpenAPI::fromJsonValue(m_time_to_live, json[QString("timeToLive")]);
    m_time_to_live_isSet = !json[QString("timeToLive")].isNull() && m_time_to_live_isValid;

    m_time_to_station_isValid = ::OpenAPI::fromJsonValue(m_time_to_station, json[QString("timeToStation")]);
    m_time_to_station_isSet = !json[QString("timeToStation")].isNull() && m_time_to_station_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_timing_isValid = ::OpenAPI::fromJsonValue(m_timing, json[QString("timing")]);
    m_timing_isSet = !json[QString("timing")].isNull() && m_timing_isValid;

    m_towards_isValid = ::OpenAPI::fromJsonValue(m_towards, json[QString("towards")]);
    m_towards_isSet = !json[QString("towards")].isNull() && m_towards_isValid;

    m_vehicle_id_isValid = ::OpenAPI::fromJsonValue(m_vehicle_id, json[QString("vehicleId")]);
    m_vehicle_id_isSet = !json[QString("vehicleId")].isNull() && m_vehicle_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_Prediction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfl_Api_Presentation_Entities_Prediction::asJsonObject() const {
    QJsonObject obj;
    if (m_bearing_isSet) {
        obj.insert(QString("bearing"), ::OpenAPI::toJsonValue(m_bearing));
    }
    if (m_current_location_isSet) {
        obj.insert(QString("currentLocation"), ::OpenAPI::toJsonValue(m_current_location));
    }
    if (m_destination_name_isSet) {
        obj.insert(QString("destinationName"), ::OpenAPI::toJsonValue(m_destination_name));
    }
    if (m_destination_naptan_id_isSet) {
        obj.insert(QString("destinationNaptanId"), ::OpenAPI::toJsonValue(m_destination_naptan_id));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_expected_arrival_isSet) {
        obj.insert(QString("expectedArrival"), ::OpenAPI::toJsonValue(m_expected_arrival));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_line_id_isSet) {
        obj.insert(QString("lineId"), ::OpenAPI::toJsonValue(m_line_id));
    }
    if (m_line_name_isSet) {
        obj.insert(QString("lineName"), ::OpenAPI::toJsonValue(m_line_name));
    }
    if (m_mode_name_isSet) {
        obj.insert(QString("modeName"), ::OpenAPI::toJsonValue(m_mode_name));
    }
    if (m_naptan_id_isSet) {
        obj.insert(QString("naptanId"), ::OpenAPI::toJsonValue(m_naptan_id));
    }
    if (m_operation_type_isSet) {
        obj.insert(QString("operationType"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    if (m_platform_name_isSet) {
        obj.insert(QString("platformName"), ::OpenAPI::toJsonValue(m_platform_name));
    }
    if (m_station_name_isSet) {
        obj.insert(QString("stationName"), ::OpenAPI::toJsonValue(m_station_name));
    }
    if (m_time_to_live_isSet) {
        obj.insert(QString("timeToLive"), ::OpenAPI::toJsonValue(m_time_to_live));
    }
    if (m_time_to_station_isSet) {
        obj.insert(QString("timeToStation"), ::OpenAPI::toJsonValue(m_time_to_station));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_timing.isSet()) {
        obj.insert(QString("timing"), ::OpenAPI::toJsonValue(m_timing));
    }
    if (m_towards_isSet) {
        obj.insert(QString("towards"), ::OpenAPI::toJsonValue(m_towards));
    }
    if (m_vehicle_id_isSet) {
        obj.insert(QString("vehicleId"), ::OpenAPI::toJsonValue(m_vehicle_id));
    }
    return obj;
}

QString OAITfl_Api_Presentation_Entities_Prediction::getBearing() const {
    return m_bearing;
}
void OAITfl_Api_Presentation_Entities_Prediction::setBearing(const QString &bearing) {
    m_bearing = bearing;
    m_bearing_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_bearing_Set() const{
    return m_bearing_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_bearing_Valid() const{
    return m_bearing_isValid;
}

QString OAITfl_Api_Presentation_Entities_Prediction::getCurrentLocation() const {
    return m_current_location;
}
void OAITfl_Api_Presentation_Entities_Prediction::setCurrentLocation(const QString &current_location) {
    m_current_location = current_location;
    m_current_location_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_current_location_Set() const{
    return m_current_location_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_current_location_Valid() const{
    return m_current_location_isValid;
}

QString OAITfl_Api_Presentation_Entities_Prediction::getDestinationName() const {
    return m_destination_name;
}
void OAITfl_Api_Presentation_Entities_Prediction::setDestinationName(const QString &destination_name) {
    m_destination_name = destination_name;
    m_destination_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_destination_name_Set() const{
    return m_destination_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_destination_name_Valid() const{
    return m_destination_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_Prediction::getDestinationNaptanId() const {
    return m_destination_naptan_id;
}
void OAITfl_Api_Presentation_Entities_Prediction::setDestinationNaptanId(const QString &destination_naptan_id) {
    m_destination_naptan_id = destination_naptan_id;
    m_destination_naptan_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_destination_naptan_id_Set() const{
    return m_destination_naptan_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_destination_naptan_id_Valid() const{
    return m_destination_naptan_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_Prediction::getDirection() const {
    return m_direction;
}
void OAITfl_Api_Presentation_Entities_Prediction::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_direction_Valid() const{
    return m_direction_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_Prediction::getExpectedArrival() const {
    return m_expected_arrival;
}
void OAITfl_Api_Presentation_Entities_Prediction::setExpectedArrival(const QDateTime &expected_arrival) {
    m_expected_arrival = expected_arrival;
    m_expected_arrival_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_expected_arrival_Set() const{
    return m_expected_arrival_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_expected_arrival_Valid() const{
    return m_expected_arrival_isValid;
}

QString OAITfl_Api_Presentation_Entities_Prediction::getId() const {
    return m_id;
}
void OAITfl_Api_Presentation_Entities_Prediction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_id_Set() const{
    return m_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_Prediction::getLineId() const {
    return m_line_id;
}
void OAITfl_Api_Presentation_Entities_Prediction::setLineId(const QString &line_id) {
    m_line_id = line_id;
    m_line_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_line_id_Set() const{
    return m_line_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_line_id_Valid() const{
    return m_line_id_isValid;
}

QString OAITfl_Api_Presentation_Entities_Prediction::getLineName() const {
    return m_line_name;
}
void OAITfl_Api_Presentation_Entities_Prediction::setLineName(const QString &line_name) {
    m_line_name = line_name;
    m_line_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_line_name_Set() const{
    return m_line_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_line_name_Valid() const{
    return m_line_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_Prediction::getModeName() const {
    return m_mode_name;
}
void OAITfl_Api_Presentation_Entities_Prediction::setModeName(const QString &mode_name) {
    m_mode_name = mode_name;
    m_mode_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_mode_name_Set() const{
    return m_mode_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_mode_name_Valid() const{
    return m_mode_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_Prediction::getNaptanId() const {
    return m_naptan_id;
}
void OAITfl_Api_Presentation_Entities_Prediction::setNaptanId(const QString &naptan_id) {
    m_naptan_id = naptan_id;
    m_naptan_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_naptan_id_Set() const{
    return m_naptan_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_naptan_id_Valid() const{
    return m_naptan_id_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_Prediction::getOperationType() const {
    return m_operation_type;
}
void OAITfl_Api_Presentation_Entities_Prediction::setOperationType(const qint32 &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

QString OAITfl_Api_Presentation_Entities_Prediction::getPlatformName() const {
    return m_platform_name;
}
void OAITfl_Api_Presentation_Entities_Prediction::setPlatformName(const QString &platform_name) {
    m_platform_name = platform_name;
    m_platform_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_platform_name_Set() const{
    return m_platform_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_platform_name_Valid() const{
    return m_platform_name_isValid;
}

QString OAITfl_Api_Presentation_Entities_Prediction::getStationName() const {
    return m_station_name;
}
void OAITfl_Api_Presentation_Entities_Prediction::setStationName(const QString &station_name) {
    m_station_name = station_name;
    m_station_name_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_station_name_Set() const{
    return m_station_name_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_station_name_Valid() const{
    return m_station_name_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_Prediction::getTimeToLive() const {
    return m_time_to_live;
}
void OAITfl_Api_Presentation_Entities_Prediction::setTimeToLive(const QDateTime &time_to_live) {
    m_time_to_live = time_to_live;
    m_time_to_live_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_time_to_live_Set() const{
    return m_time_to_live_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_time_to_live_Valid() const{
    return m_time_to_live_isValid;
}

qint32 OAITfl_Api_Presentation_Entities_Prediction::getTimeToStation() const {
    return m_time_to_station;
}
void OAITfl_Api_Presentation_Entities_Prediction::setTimeToStation(const qint32 &time_to_station) {
    m_time_to_station = time_to_station;
    m_time_to_station_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_time_to_station_Set() const{
    return m_time_to_station_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_time_to_station_Valid() const{
    return m_time_to_station_isValid;
}

QDateTime OAITfl_Api_Presentation_Entities_Prediction::getTimestamp() const {
    return m_timestamp;
}
void OAITfl_Api_Presentation_Entities_Prediction::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAITfl_Api_Presentation_Entities_PredictionTiming OAITfl_Api_Presentation_Entities_Prediction::getTiming() const {
    return m_timing;
}
void OAITfl_Api_Presentation_Entities_Prediction::setTiming(const OAITfl_Api_Presentation_Entities_PredictionTiming &timing) {
    m_timing = timing;
    m_timing_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_timing_Set() const{
    return m_timing_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_timing_Valid() const{
    return m_timing_isValid;
}

QString OAITfl_Api_Presentation_Entities_Prediction::getTowards() const {
    return m_towards;
}
void OAITfl_Api_Presentation_Entities_Prediction::setTowards(const QString &towards) {
    m_towards = towards;
    m_towards_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_towards_Set() const{
    return m_towards_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_towards_Valid() const{
    return m_towards_isValid;
}

QString OAITfl_Api_Presentation_Entities_Prediction::getVehicleId() const {
    return m_vehicle_id;
}
void OAITfl_Api_Presentation_Entities_Prediction::setVehicleId(const QString &vehicle_id) {
    m_vehicle_id = vehicle_id;
    m_vehicle_id_isSet = true;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_vehicle_id_Set() const{
    return m_vehicle_id_isSet;
}

bool OAITfl_Api_Presentation_Entities_Prediction::is_vehicle_id_Valid() const{
    return m_vehicle_id_isValid;
}

bool OAITfl_Api_Presentation_Entities_Prediction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bearing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_naptan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_arrival_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_naptan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_station_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_station_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_towards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vehicle_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfl_Api_Presentation_Entities_Prediction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
