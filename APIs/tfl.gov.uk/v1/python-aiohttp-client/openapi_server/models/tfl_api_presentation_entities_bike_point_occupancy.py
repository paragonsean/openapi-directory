# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TflApiPresentationEntitiesBikePointOccupancy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bikes_count: int=None, e_bikes_count: int=None, empty_docks: int=None, id: str=None, name: str=None, standard_bikes_count: int=None, total_docks: int=None):
        """TflApiPresentationEntitiesBikePointOccupancy - a model defined in OpenAPI

        :param bikes_count: The bikes_count of this TflApiPresentationEntitiesBikePointOccupancy.
        :param e_bikes_count: The e_bikes_count of this TflApiPresentationEntitiesBikePointOccupancy.
        :param empty_docks: The empty_docks of this TflApiPresentationEntitiesBikePointOccupancy.
        :param id: The id of this TflApiPresentationEntitiesBikePointOccupancy.
        :param name: The name of this TflApiPresentationEntitiesBikePointOccupancy.
        :param standard_bikes_count: The standard_bikes_count of this TflApiPresentationEntitiesBikePointOccupancy.
        :param total_docks: The total_docks of this TflApiPresentationEntitiesBikePointOccupancy.
        """
        self.openapi_types = {
            'bikes_count': int,
            'e_bikes_count': int,
            'empty_docks': int,
            'id': str,
            'name': str,
            'standard_bikes_count': int,
            'total_docks': int
        }

        self.attribute_map = {
            'bikes_count': 'bikesCount',
            'e_bikes_count': 'eBikesCount',
            'empty_docks': 'emptyDocks',
            'id': 'id',
            'name': 'name',
            'standard_bikes_count': 'standardBikesCount',
            'total_docks': 'totalDocks'
        }

        self._bikes_count = bikes_count
        self._e_bikes_count = e_bikes_count
        self._empty_docks = empty_docks
        self._id = id
        self._name = name
        self._standard_bikes_count = standard_bikes_count
        self._total_docks = total_docks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TflApiPresentationEntitiesBikePointOccupancy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tfl.Api.Presentation.Entities.BikePointOccupancy of this TflApiPresentationEntitiesBikePointOccupancy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bikes_count(self):
        """Gets the bikes_count of this TflApiPresentationEntitiesBikePointOccupancy.

        Total bike counts

        :return: The bikes_count of this TflApiPresentationEntitiesBikePointOccupancy.
        :rtype: int
        """
        return self._bikes_count

    @bikes_count.setter
    def bikes_count(self, bikes_count):
        """Sets the bikes_count of this TflApiPresentationEntitiesBikePointOccupancy.

        Total bike counts

        :param bikes_count: The bikes_count of this TflApiPresentationEntitiesBikePointOccupancy.
        :type bikes_count: int
        """

        self._bikes_count = bikes_count

    @property
    def e_bikes_count(self):
        """Gets the e_bikes_count of this TflApiPresentationEntitiesBikePointOccupancy.

        Total ebikes count

        :return: The e_bikes_count of this TflApiPresentationEntitiesBikePointOccupancy.
        :rtype: int
        """
        return self._e_bikes_count

    @e_bikes_count.setter
    def e_bikes_count(self, e_bikes_count):
        """Sets the e_bikes_count of this TflApiPresentationEntitiesBikePointOccupancy.

        Total ebikes count

        :param e_bikes_count: The e_bikes_count of this TflApiPresentationEntitiesBikePointOccupancy.
        :type e_bikes_count: int
        """

        self._e_bikes_count = e_bikes_count

    @property
    def empty_docks(self):
        """Gets the empty_docks of this TflApiPresentationEntitiesBikePointOccupancy.

        Empty docks

        :return: The empty_docks of this TflApiPresentationEntitiesBikePointOccupancy.
        :rtype: int
        """
        return self._empty_docks

    @empty_docks.setter
    def empty_docks(self, empty_docks):
        """Sets the empty_docks of this TflApiPresentationEntitiesBikePointOccupancy.

        Empty docks

        :param empty_docks: The empty_docks of this TflApiPresentationEntitiesBikePointOccupancy.
        :type empty_docks: int
        """

        self._empty_docks = empty_docks

    @property
    def id(self):
        """Gets the id of this TflApiPresentationEntitiesBikePointOccupancy.

        Id of the bike point such as BikePoints_1

        :return: The id of this TflApiPresentationEntitiesBikePointOccupancy.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TflApiPresentationEntitiesBikePointOccupancy.

        Id of the bike point such as BikePoints_1

        :param id: The id of this TflApiPresentationEntitiesBikePointOccupancy.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TflApiPresentationEntitiesBikePointOccupancy.

        Name / Common name of the bike point

        :return: The name of this TflApiPresentationEntitiesBikePointOccupancy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TflApiPresentationEntitiesBikePointOccupancy.

        Name / Common name of the bike point

        :param name: The name of this TflApiPresentationEntitiesBikePointOccupancy.
        :type name: str
        """

        self._name = name

    @property
    def standard_bikes_count(self):
        """Gets the standard_bikes_count of this TflApiPresentationEntitiesBikePointOccupancy.

        Total standard bikes count

        :return: The standard_bikes_count of this TflApiPresentationEntitiesBikePointOccupancy.
        :rtype: int
        """
        return self._standard_bikes_count

    @standard_bikes_count.setter
    def standard_bikes_count(self, standard_bikes_count):
        """Sets the standard_bikes_count of this TflApiPresentationEntitiesBikePointOccupancy.

        Total standard bikes count

        :param standard_bikes_count: The standard_bikes_count of this TflApiPresentationEntitiesBikePointOccupancy.
        :type standard_bikes_count: int
        """

        self._standard_bikes_count = standard_bikes_count

    @property
    def total_docks(self):
        """Gets the total_docks of this TflApiPresentationEntitiesBikePointOccupancy.

        Total docks available

        :return: The total_docks of this TflApiPresentationEntitiesBikePointOccupancy.
        :rtype: int
        """
        return self._total_docks

    @total_docks.setter
    def total_docks(self, total_docks):
        """Sets the total_docks of this TflApiPresentationEntitiesBikePointOccupancy.

        Total docks available

        :param total_docks: The total_docks of this TflApiPresentationEntitiesBikePointOccupancy.
        :type total_docks: int
        """

        self._total_docks = total_docks
