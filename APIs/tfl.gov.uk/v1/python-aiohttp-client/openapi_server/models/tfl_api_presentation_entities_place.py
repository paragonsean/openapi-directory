# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tfl_api_presentation_entities_additional_properties import TflApiPresentationEntitiesAdditionalProperties
from openapi_server import util


class TflApiPresentationEntitiesPlace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_properties: List[TflApiPresentationEntitiesAdditionalProperties]=None, children: List[TflApiPresentationEntitiesPlace]=None, children_urls: List[str]=None, common_name: str=None, distance: float=None, id: str=None, lat: float=None, lon: float=None, place_type: str=None, url: str=None):
        """TflApiPresentationEntitiesPlace - a model defined in OpenAPI

        :param additional_properties: The additional_properties of this TflApiPresentationEntitiesPlace.
        :param children: The children of this TflApiPresentationEntitiesPlace.
        :param children_urls: The children_urls of this TflApiPresentationEntitiesPlace.
        :param common_name: The common_name of this TflApiPresentationEntitiesPlace.
        :param distance: The distance of this TflApiPresentationEntitiesPlace.
        :param id: The id of this TflApiPresentationEntitiesPlace.
        :param lat: The lat of this TflApiPresentationEntitiesPlace.
        :param lon: The lon of this TflApiPresentationEntitiesPlace.
        :param place_type: The place_type of this TflApiPresentationEntitiesPlace.
        :param url: The url of this TflApiPresentationEntitiesPlace.
        """
        self.openapi_types = {
            'additional_properties': List[TflApiPresentationEntitiesAdditionalProperties],
            'children': List[TflApiPresentationEntitiesPlace],
            'children_urls': List[str],
            'common_name': str,
            'distance': float,
            'id': str,
            'lat': float,
            'lon': float,
            'place_type': str,
            'url': str
        }

        self.attribute_map = {
            'additional_properties': 'additionalProperties',
            'children': 'children',
            'children_urls': 'childrenUrls',
            'common_name': 'commonName',
            'distance': 'distance',
            'id': 'id',
            'lat': 'lat',
            'lon': 'lon',
            'place_type': 'placeType',
            'url': 'url'
        }

        self._additional_properties = additional_properties
        self._children = children
        self._children_urls = children_urls
        self._common_name = common_name
        self._distance = distance
        self._id = id
        self._lat = lat
        self._lon = lon
        self._place_type = place_type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TflApiPresentationEntitiesPlace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tfl.Api.Presentation.Entities.Place of this TflApiPresentationEntitiesPlace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_properties(self):
        """Gets the additional_properties of this TflApiPresentationEntitiesPlace.

        A bag of additional key/value pairs with extra information about this place.

        :return: The additional_properties of this TflApiPresentationEntitiesPlace.
        :rtype: List[TflApiPresentationEntitiesAdditionalProperties]
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this TflApiPresentationEntitiesPlace.

        A bag of additional key/value pairs with extra information about this place.

        :param additional_properties: The additional_properties of this TflApiPresentationEntitiesPlace.
        :type additional_properties: List[TflApiPresentationEntitiesAdditionalProperties]
        """

        self._additional_properties = additional_properties

    @property
    def children(self):
        """Gets the children of this TflApiPresentationEntitiesPlace.


        :return: The children of this TflApiPresentationEntitiesPlace.
        :rtype: List[TflApiPresentationEntitiesPlace]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this TflApiPresentationEntitiesPlace.


        :param children: The children of this TflApiPresentationEntitiesPlace.
        :type children: List[TflApiPresentationEntitiesPlace]
        """

        self._children = children

    @property
    def children_urls(self):
        """Gets the children_urls of this TflApiPresentationEntitiesPlace.


        :return: The children_urls of this TflApiPresentationEntitiesPlace.
        :rtype: List[str]
        """
        return self._children_urls

    @children_urls.setter
    def children_urls(self, children_urls):
        """Sets the children_urls of this TflApiPresentationEntitiesPlace.


        :param children_urls: The children_urls of this TflApiPresentationEntitiesPlace.
        :type children_urls: List[str]
        """

        self._children_urls = children_urls

    @property
    def common_name(self):
        """Gets the common_name of this TflApiPresentationEntitiesPlace.

        A human readable name.

        :return: The common_name of this TflApiPresentationEntitiesPlace.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this TflApiPresentationEntitiesPlace.

        A human readable name.

        :param common_name: The common_name of this TflApiPresentationEntitiesPlace.
        :type common_name: str
        """

        self._common_name = common_name

    @property
    def distance(self):
        """Gets the distance of this TflApiPresentationEntitiesPlace.

        The distance of the place from its search point, if this is the result              of a geographical search, otherwise zero.

        :return: The distance of this TflApiPresentationEntitiesPlace.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this TflApiPresentationEntitiesPlace.

        The distance of the place from its search point, if this is the result              of a geographical search, otherwise zero.

        :param distance: The distance of this TflApiPresentationEntitiesPlace.
        :type distance: float
        """

        self._distance = distance

    @property
    def id(self):
        """Gets the id of this TflApiPresentationEntitiesPlace.

        A unique identifier.

        :return: The id of this TflApiPresentationEntitiesPlace.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TflApiPresentationEntitiesPlace.

        A unique identifier.

        :param id: The id of this TflApiPresentationEntitiesPlace.
        :type id: str
        """

        self._id = id

    @property
    def lat(self):
        """Gets the lat of this TflApiPresentationEntitiesPlace.

        WGS84 latitude of the location.

        :return: The lat of this TflApiPresentationEntitiesPlace.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this TflApiPresentationEntitiesPlace.

        WGS84 latitude of the location.

        :param lat: The lat of this TflApiPresentationEntitiesPlace.
        :type lat: float
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this TflApiPresentationEntitiesPlace.

        WGS84 longitude of the location.

        :return: The lon of this TflApiPresentationEntitiesPlace.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this TflApiPresentationEntitiesPlace.

        WGS84 longitude of the location.

        :param lon: The lon of this TflApiPresentationEntitiesPlace.
        :type lon: float
        """

        self._lon = lon

    @property
    def place_type(self):
        """Gets the place_type of this TflApiPresentationEntitiesPlace.

        The type of Place. See /Place/Meta/placeTypes for possible values.

        :return: The place_type of this TflApiPresentationEntitiesPlace.
        :rtype: str
        """
        return self._place_type

    @place_type.setter
    def place_type(self, place_type):
        """Sets the place_type of this TflApiPresentationEntitiesPlace.

        The type of Place. See /Place/Meta/placeTypes for possible values.

        :param place_type: The place_type of this TflApiPresentationEntitiesPlace.
        :type place_type: str
        """

        self._place_type = place_type

    @property
    def url(self):
        """Gets the url of this TflApiPresentationEntitiesPlace.

        The unique location of this resource.

        :return: The url of this TflApiPresentationEntitiesPlace.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TflApiPresentationEntitiesPlace.

        The unique location of this resource.

        :param url: The url of this TflApiPresentationEntitiesPlace.
        :type url: str
        """

        self._url = url
