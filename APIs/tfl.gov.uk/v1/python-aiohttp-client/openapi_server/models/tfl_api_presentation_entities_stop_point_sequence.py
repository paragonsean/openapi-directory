# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tfl_api_presentation_entities_matched_stop import TflApiPresentationEntitiesMatchedStop
from openapi_server import util


class TflApiPresentationEntitiesStopPointSequence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch_id: int=None, direction: str=None, line_id: str=None, line_name: str=None, next_branch_ids: List[int]=None, prev_branch_ids: List[int]=None, service_type: str=None, stop_point: List[TflApiPresentationEntitiesMatchedStop]=None):
        """TflApiPresentationEntitiesStopPointSequence - a model defined in OpenAPI

        :param branch_id: The branch_id of this TflApiPresentationEntitiesStopPointSequence.
        :param direction: The direction of this TflApiPresentationEntitiesStopPointSequence.
        :param line_id: The line_id of this TflApiPresentationEntitiesStopPointSequence.
        :param line_name: The line_name of this TflApiPresentationEntitiesStopPointSequence.
        :param next_branch_ids: The next_branch_ids of this TflApiPresentationEntitiesStopPointSequence.
        :param prev_branch_ids: The prev_branch_ids of this TflApiPresentationEntitiesStopPointSequence.
        :param service_type: The service_type of this TflApiPresentationEntitiesStopPointSequence.
        :param stop_point: The stop_point of this TflApiPresentationEntitiesStopPointSequence.
        """
        self.openapi_types = {
            'branch_id': int,
            'direction': str,
            'line_id': str,
            'line_name': str,
            'next_branch_ids': List[int],
            'prev_branch_ids': List[int],
            'service_type': str,
            'stop_point': List[TflApiPresentationEntitiesMatchedStop]
        }

        self.attribute_map = {
            'branch_id': 'branchId',
            'direction': 'direction',
            'line_id': 'lineId',
            'line_name': 'lineName',
            'next_branch_ids': 'nextBranchIds',
            'prev_branch_ids': 'prevBranchIds',
            'service_type': 'serviceType',
            'stop_point': 'stopPoint'
        }

        self._branch_id = branch_id
        self._direction = direction
        self._line_id = line_id
        self._line_name = line_name
        self._next_branch_ids = next_branch_ids
        self._prev_branch_ids = prev_branch_ids
        self._service_type = service_type
        self._stop_point = stop_point

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TflApiPresentationEntitiesStopPointSequence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tfl.Api.Presentation.Entities.StopPointSequence of this TflApiPresentationEntitiesStopPointSequence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch_id(self):
        """Gets the branch_id of this TflApiPresentationEntitiesStopPointSequence.

        The id of this branch.

        :return: The branch_id of this TflApiPresentationEntitiesStopPointSequence.
        :rtype: int
        """
        return self._branch_id

    @branch_id.setter
    def branch_id(self, branch_id):
        """Sets the branch_id of this TflApiPresentationEntitiesStopPointSequence.

        The id of this branch.

        :param branch_id: The branch_id of this TflApiPresentationEntitiesStopPointSequence.
        :type branch_id: int
        """

        self._branch_id = branch_id

    @property
    def direction(self):
        """Gets the direction of this TflApiPresentationEntitiesStopPointSequence.


        :return: The direction of this TflApiPresentationEntitiesStopPointSequence.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this TflApiPresentationEntitiesStopPointSequence.


        :param direction: The direction of this TflApiPresentationEntitiesStopPointSequence.
        :type direction: str
        """

        self._direction = direction

    @property
    def line_id(self):
        """Gets the line_id of this TflApiPresentationEntitiesStopPointSequence.


        :return: The line_id of this TflApiPresentationEntitiesStopPointSequence.
        :rtype: str
        """
        return self._line_id

    @line_id.setter
    def line_id(self, line_id):
        """Sets the line_id of this TflApiPresentationEntitiesStopPointSequence.


        :param line_id: The line_id of this TflApiPresentationEntitiesStopPointSequence.
        :type line_id: str
        """

        self._line_id = line_id

    @property
    def line_name(self):
        """Gets the line_name of this TflApiPresentationEntitiesStopPointSequence.


        :return: The line_name of this TflApiPresentationEntitiesStopPointSequence.
        :rtype: str
        """
        return self._line_name

    @line_name.setter
    def line_name(self, line_name):
        """Sets the line_name of this TflApiPresentationEntitiesStopPointSequence.


        :param line_name: The line_name of this TflApiPresentationEntitiesStopPointSequence.
        :type line_name: str
        """

        self._line_name = line_name

    @property
    def next_branch_ids(self):
        """Gets the next_branch_ids of this TflApiPresentationEntitiesStopPointSequence.

        The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be              identical in the case of a looped route e.g. the Circle line.

        :return: The next_branch_ids of this TflApiPresentationEntitiesStopPointSequence.
        :rtype: List[int]
        """
        return self._next_branch_ids

    @next_branch_ids.setter
    def next_branch_ids(self, next_branch_ids):
        """Sets the next_branch_ids of this TflApiPresentationEntitiesStopPointSequence.

        The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be              identical in the case of a looped route e.g. the Circle line.

        :param next_branch_ids: The next_branch_ids of this TflApiPresentationEntitiesStopPointSequence.
        :type next_branch_ids: List[int]
        """

        self._next_branch_ids = next_branch_ids

    @property
    def prev_branch_ids(self):
        """Gets the prev_branch_ids of this TflApiPresentationEntitiesStopPointSequence.

        The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be              identical in the case of a looped route e.g. the Circle line.

        :return: The prev_branch_ids of this TflApiPresentationEntitiesStopPointSequence.
        :rtype: List[int]
        """
        return self._prev_branch_ids

    @prev_branch_ids.setter
    def prev_branch_ids(self, prev_branch_ids):
        """Sets the prev_branch_ids of this TflApiPresentationEntitiesStopPointSequence.

        The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be              identical in the case of a looped route e.g. the Circle line.

        :param prev_branch_ids: The prev_branch_ids of this TflApiPresentationEntitiesStopPointSequence.
        :type prev_branch_ids: List[int]
        """

        self._prev_branch_ids = prev_branch_ids

    @property
    def service_type(self):
        """Gets the service_type of this TflApiPresentationEntitiesStopPointSequence.


        :return: The service_type of this TflApiPresentationEntitiesStopPointSequence.
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this TflApiPresentationEntitiesStopPointSequence.


        :param service_type: The service_type of this TflApiPresentationEntitiesStopPointSequence.
        :type service_type: str
        """
        allowed_values = ["Regular", "Night"]  # noqa: E501
        if service_type not in allowed_values:
            raise ValueError(
                "Invalid value for `service_type` ({0}), must be one of {1}"
                .format(service_type, allowed_values)
            )

        self._service_type = service_type

    @property
    def stop_point(self):
        """Gets the stop_point of this TflApiPresentationEntitiesStopPointSequence.


        :return: The stop_point of this TflApiPresentationEntitiesStopPointSequence.
        :rtype: List[TflApiPresentationEntitiesMatchedStop]
        """
        return self._stop_point

    @stop_point.setter
    def stop_point(self, stop_point):
        """Sets the stop_point of this TflApiPresentationEntitiesStopPointSequence.


        :param stop_point: The stop_point of this TflApiPresentationEntitiesStopPointSequence.
        :type stop_point: List[TflApiPresentationEntitiesMatchedStop]
        """

        self._stop_point = stop_point
