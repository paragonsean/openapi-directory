# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tfl_api_presentation_entities_crowding import TflApiPresentationEntitiesCrowding
from openapi_server import util


class TflApiPresentationEntitiesIdentifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crowding: TflApiPresentationEntitiesCrowding=None, full_name: str=None, id: str=None, mot_type: str=None, name: str=None, network: str=None, route_type: str=None, status: str=None, type: str=None, uri: str=None):
        """TflApiPresentationEntitiesIdentifier - a model defined in OpenAPI

        :param crowding: The crowding of this TflApiPresentationEntitiesIdentifier.
        :param full_name: The full_name of this TflApiPresentationEntitiesIdentifier.
        :param id: The id of this TflApiPresentationEntitiesIdentifier.
        :param mot_type: The mot_type of this TflApiPresentationEntitiesIdentifier.
        :param name: The name of this TflApiPresentationEntitiesIdentifier.
        :param network: The network of this TflApiPresentationEntitiesIdentifier.
        :param route_type: The route_type of this TflApiPresentationEntitiesIdentifier.
        :param status: The status of this TflApiPresentationEntitiesIdentifier.
        :param type: The type of this TflApiPresentationEntitiesIdentifier.
        :param uri: The uri of this TflApiPresentationEntitiesIdentifier.
        """
        self.openapi_types = {
            'crowding': TflApiPresentationEntitiesCrowding,
            'full_name': str,
            'id': str,
            'mot_type': str,
            'name': str,
            'network': str,
            'route_type': str,
            'status': str,
            'type': str,
            'uri': str
        }

        self.attribute_map = {
            'crowding': 'crowding',
            'full_name': 'fullName',
            'id': 'id',
            'mot_type': 'motType',
            'name': 'name',
            'network': 'network',
            'route_type': 'routeType',
            'status': 'status',
            'type': 'type',
            'uri': 'uri'
        }

        self._crowding = crowding
        self._full_name = full_name
        self._id = id
        self._mot_type = mot_type
        self._name = name
        self._network = network
        self._route_type = route_type
        self._status = status
        self._type = type
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TflApiPresentationEntitiesIdentifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tfl.Api.Presentation.Entities.Identifier of this TflApiPresentationEntitiesIdentifier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crowding(self):
        """Gets the crowding of this TflApiPresentationEntitiesIdentifier.


        :return: The crowding of this TflApiPresentationEntitiesIdentifier.
        :rtype: TflApiPresentationEntitiesCrowding
        """
        return self._crowding

    @crowding.setter
    def crowding(self, crowding):
        """Sets the crowding of this TflApiPresentationEntitiesIdentifier.


        :param crowding: The crowding of this TflApiPresentationEntitiesIdentifier.
        :type crowding: TflApiPresentationEntitiesCrowding
        """

        self._crowding = crowding

    @property
    def full_name(self):
        """Gets the full_name of this TflApiPresentationEntitiesIdentifier.


        :return: The full_name of this TflApiPresentationEntitiesIdentifier.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this TflApiPresentationEntitiesIdentifier.


        :param full_name: The full_name of this TflApiPresentationEntitiesIdentifier.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def id(self):
        """Gets the id of this TflApiPresentationEntitiesIdentifier.


        :return: The id of this TflApiPresentationEntitiesIdentifier.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TflApiPresentationEntitiesIdentifier.


        :param id: The id of this TflApiPresentationEntitiesIdentifier.
        :type id: str
        """

        self._id = id

    @property
    def mot_type(self):
        """Gets the mot_type of this TflApiPresentationEntitiesIdentifier.


        :return: The mot_type of this TflApiPresentationEntitiesIdentifier.
        :rtype: str
        """
        return self._mot_type

    @mot_type.setter
    def mot_type(self, mot_type):
        """Sets the mot_type of this TflApiPresentationEntitiesIdentifier.


        :param mot_type: The mot_type of this TflApiPresentationEntitiesIdentifier.
        :type mot_type: str
        """

        self._mot_type = mot_type

    @property
    def name(self):
        """Gets the name of this TflApiPresentationEntitiesIdentifier.


        :return: The name of this TflApiPresentationEntitiesIdentifier.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TflApiPresentationEntitiesIdentifier.


        :param name: The name of this TflApiPresentationEntitiesIdentifier.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this TflApiPresentationEntitiesIdentifier.


        :return: The network of this TflApiPresentationEntitiesIdentifier.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this TflApiPresentationEntitiesIdentifier.


        :param network: The network of this TflApiPresentationEntitiesIdentifier.
        :type network: str
        """

        self._network = network

    @property
    def route_type(self):
        """Gets the route_type of this TflApiPresentationEntitiesIdentifier.


        :return: The route_type of this TflApiPresentationEntitiesIdentifier.
        :rtype: str
        """
        return self._route_type

    @route_type.setter
    def route_type(self, route_type):
        """Sets the route_type of this TflApiPresentationEntitiesIdentifier.


        :param route_type: The route_type of this TflApiPresentationEntitiesIdentifier.
        :type route_type: str
        """
        allowed_values = ["Unknown", "All", "Cycle Superhighways", "Quietways", "Cycleways", "Mini-Hollands", "Central London Grid", "Streetspace Route"]  # noqa: E501
        if route_type not in allowed_values:
            raise ValueError(
                "Invalid value for `route_type` ({0}), must be one of {1}"
                .format(route_type, allowed_values)
            )

        self._route_type = route_type

    @property
    def status(self):
        """Gets the status of this TflApiPresentationEntitiesIdentifier.


        :return: The status of this TflApiPresentationEntitiesIdentifier.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TflApiPresentationEntitiesIdentifier.


        :param status: The status of this TflApiPresentationEntitiesIdentifier.
        :type status: str
        """
        allowed_values = ["Unknown", "All", "Open", "In Progress", "Planned", "Planned - Subject to feasibility and consultation.", "Not Open"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this TflApiPresentationEntitiesIdentifier.


        :return: The type of this TflApiPresentationEntitiesIdentifier.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TflApiPresentationEntitiesIdentifier.


        :param type: The type of this TflApiPresentationEntitiesIdentifier.
        :type type: str
        """

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this TflApiPresentationEntitiesIdentifier.


        :return: The uri of this TflApiPresentationEntitiesIdentifier.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this TflApiPresentationEntitiesIdentifier.


        :param uri: The uri of this TflApiPresentationEntitiesIdentifier.
        :type uri: str
        """

        self._uri = uri
