# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TflApiPresentationEntitiesBay(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bay_count: int=None, bay_type: str=None, free: int=None, occupied: int=None):
        """TflApiPresentationEntitiesBay - a model defined in OpenAPI

        :param bay_count: The bay_count of this TflApiPresentationEntitiesBay.
        :param bay_type: The bay_type of this TflApiPresentationEntitiesBay.
        :param free: The free of this TflApiPresentationEntitiesBay.
        :param occupied: The occupied of this TflApiPresentationEntitiesBay.
        """
        self.openapi_types = {
            'bay_count': int,
            'bay_type': str,
            'free': int,
            'occupied': int
        }

        self.attribute_map = {
            'bay_count': 'bayCount',
            'bay_type': 'bayType',
            'free': 'free',
            'occupied': 'occupied'
        }

        self._bay_count = bay_count
        self._bay_type = bay_type
        self._free = free
        self._occupied = occupied

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TflApiPresentationEntitiesBay':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tfl.Api.Presentation.Entities.Bay of this TflApiPresentationEntitiesBay.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bay_count(self):
        """Gets the bay_count of this TflApiPresentationEntitiesBay.


        :return: The bay_count of this TflApiPresentationEntitiesBay.
        :rtype: int
        """
        return self._bay_count

    @bay_count.setter
    def bay_count(self, bay_count):
        """Sets the bay_count of this TflApiPresentationEntitiesBay.


        :param bay_count: The bay_count of this TflApiPresentationEntitiesBay.
        :type bay_count: int
        """

        self._bay_count = bay_count

    @property
    def bay_type(self):
        """Gets the bay_type of this TflApiPresentationEntitiesBay.


        :return: The bay_type of this TflApiPresentationEntitiesBay.
        :rtype: str
        """
        return self._bay_type

    @bay_type.setter
    def bay_type(self, bay_type):
        """Sets the bay_type of this TflApiPresentationEntitiesBay.


        :param bay_type: The bay_type of this TflApiPresentationEntitiesBay.
        :type bay_type: str
        """

        self._bay_type = bay_type

    @property
    def free(self):
        """Gets the free of this TflApiPresentationEntitiesBay.


        :return: The free of this TflApiPresentationEntitiesBay.
        :rtype: int
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this TflApiPresentationEntitiesBay.


        :param free: The free of this TflApiPresentationEntitiesBay.
        :type free: int
        """

        self._free = free

    @property
    def occupied(self):
        """Gets the occupied of this TflApiPresentationEntitiesBay.


        :return: The occupied of this TflApiPresentationEntitiesBay.
        :rtype: int
        """
        return self._occupied

    @occupied.setter
    def occupied(self, occupied):
        """Sets the occupied of this TflApiPresentationEntitiesBay.


        :param occupied: The occupied of this TflApiPresentationEntitiesBay.
        :type occupied: int
        """

        self._occupied = occupied
