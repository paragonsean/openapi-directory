# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TflApiPresentationEntitiesGeoCodeSearchMatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, id: str=None, lat: float=None, lon: float=None, name: str=None, types: List[str]=None, url: str=None):
        """TflApiPresentationEntitiesGeoCodeSearchMatch - a model defined in OpenAPI

        :param address: The address of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :param id: The id of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :param lat: The lat of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :param lon: The lon of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :param name: The name of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :param types: The types of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :param url: The url of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        """
        self.openapi_types = {
            'address': str,
            'id': str,
            'lat': float,
            'lon': float,
            'name': str,
            'types': List[str],
            'url': str
        }

        self.attribute_map = {
            'address': 'address',
            'id': 'id',
            'lat': 'lat',
            'lon': 'lon',
            'name': 'name',
            'types': 'types',
            'url': 'url'
        }

        self._address = address
        self._id = id
        self._lat = lat
        self._lon = lon
        self._name = name
        self._types = types
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TflApiPresentationEntitiesGeoCodeSearchMatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tfl.Api.Presentation.Entities.GeoCodeSearchMatch of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this TflApiPresentationEntitiesGeoCodeSearchMatch.

        A string describing the formatted address of the place. Adds additional context to the place's Name.

        :return: The address of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this TflApiPresentationEntitiesGeoCodeSearchMatch.

        A string describing the formatted address of the place. Adds additional context to the place's Name.

        :param address: The address of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :type address: str
        """

        self._address = address

    @property
    def id(self):
        """Gets the id of this TflApiPresentationEntitiesGeoCodeSearchMatch.


        :return: The id of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TflApiPresentationEntitiesGeoCodeSearchMatch.


        :param id: The id of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :type id: str
        """

        self._id = id

    @property
    def lat(self):
        """Gets the lat of this TflApiPresentationEntitiesGeoCodeSearchMatch.


        :return: The lat of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this TflApiPresentationEntitiesGeoCodeSearchMatch.


        :param lat: The lat of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :type lat: float
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this TflApiPresentationEntitiesGeoCodeSearchMatch.


        :return: The lon of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this TflApiPresentationEntitiesGeoCodeSearchMatch.


        :param lon: The lon of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :type lon: float
        """

        self._lon = lon

    @property
    def name(self):
        """Gets the name of this TflApiPresentationEntitiesGeoCodeSearchMatch.


        :return: The name of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TflApiPresentationEntitiesGeoCodeSearchMatch.


        :param name: The name of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :type name: str
        """

        self._name = name

    @property
    def types(self):
        """Gets the types of this TflApiPresentationEntitiesGeoCodeSearchMatch.

        The type of the place e.g. \"street_address\"

        :return: The types of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this TflApiPresentationEntitiesGeoCodeSearchMatch.

        The type of the place e.g. \"street_address\"

        :param types: The types of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :type types: List[str]
        """

        self._types = types

    @property
    def url(self):
        """Gets the url of this TflApiPresentationEntitiesGeoCodeSearchMatch.


        :return: The url of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TflApiPresentationEntitiesGeoCodeSearchMatch.


        :param url: The url of this TflApiPresentationEntitiesGeoCodeSearchMatch.
        :type url: str
        """

        self._url = url
