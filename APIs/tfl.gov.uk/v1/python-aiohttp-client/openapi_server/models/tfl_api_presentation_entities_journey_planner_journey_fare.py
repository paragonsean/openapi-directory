# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tfl_api_presentation_entities_journey_planner_fare import TflApiPresentationEntitiesJourneyPlannerFare
from openapi_server.models.tfl_api_presentation_entities_journey_planner_fare_caveat import TflApiPresentationEntitiesJourneyPlannerFareCaveat
from openapi_server import util


class TflApiPresentationEntitiesJourneyPlannerJourneyFare(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caveats: List[TflApiPresentationEntitiesJourneyPlannerFareCaveat]=None, fares: List[TflApiPresentationEntitiesJourneyPlannerFare]=None, total_cost: int=None):
        """TflApiPresentationEntitiesJourneyPlannerJourneyFare - a model defined in OpenAPI

        :param caveats: The caveats of this TflApiPresentationEntitiesJourneyPlannerJourneyFare.
        :param fares: The fares of this TflApiPresentationEntitiesJourneyPlannerJourneyFare.
        :param total_cost: The total_cost of this TflApiPresentationEntitiesJourneyPlannerJourneyFare.
        """
        self.openapi_types = {
            'caveats': List[TflApiPresentationEntitiesJourneyPlannerFareCaveat],
            'fares': List[TflApiPresentationEntitiesJourneyPlannerFare],
            'total_cost': int
        }

        self.attribute_map = {
            'caveats': 'caveats',
            'fares': 'fares',
            'total_cost': 'totalCost'
        }

        self._caveats = caveats
        self._fares = fares
        self._total_cost = total_cost

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TflApiPresentationEntitiesJourneyPlannerJourneyFare':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyFare of this TflApiPresentationEntitiesJourneyPlannerJourneyFare.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caveats(self):
        """Gets the caveats of this TflApiPresentationEntitiesJourneyPlannerJourneyFare.


        :return: The caveats of this TflApiPresentationEntitiesJourneyPlannerJourneyFare.
        :rtype: List[TflApiPresentationEntitiesJourneyPlannerFareCaveat]
        """
        return self._caveats

    @caveats.setter
    def caveats(self, caveats):
        """Sets the caveats of this TflApiPresentationEntitiesJourneyPlannerJourneyFare.


        :param caveats: The caveats of this TflApiPresentationEntitiesJourneyPlannerJourneyFare.
        :type caveats: List[TflApiPresentationEntitiesJourneyPlannerFareCaveat]
        """

        self._caveats = caveats

    @property
    def fares(self):
        """Gets the fares of this TflApiPresentationEntitiesJourneyPlannerJourneyFare.


        :return: The fares of this TflApiPresentationEntitiesJourneyPlannerJourneyFare.
        :rtype: List[TflApiPresentationEntitiesJourneyPlannerFare]
        """
        return self._fares

    @fares.setter
    def fares(self, fares):
        """Sets the fares of this TflApiPresentationEntitiesJourneyPlannerJourneyFare.


        :param fares: The fares of this TflApiPresentationEntitiesJourneyPlannerJourneyFare.
        :type fares: List[TflApiPresentationEntitiesJourneyPlannerFare]
        """

        self._fares = fares

    @property
    def total_cost(self):
        """Gets the total_cost of this TflApiPresentationEntitiesJourneyPlannerJourneyFare.


        :return: The total_cost of this TflApiPresentationEntitiesJourneyPlannerJourneyFare.
        :rtype: int
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this TflApiPresentationEntitiesJourneyPlannerJourneyFare.


        :param total_cost: The total_cost of this TflApiPresentationEntitiesJourneyPlannerJourneyFare.
        :type total_cost: int
        """

        self._total_cost = total_cost
