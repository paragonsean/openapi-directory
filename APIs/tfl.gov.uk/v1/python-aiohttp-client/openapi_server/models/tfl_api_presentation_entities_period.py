# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tfl_api_presentation_entities_service_frequency import TflApiPresentationEntitiesServiceFrequency
from openapi_server.models.tfl_api_presentation_entities_twenty_four_hour_clock_time import TflApiPresentationEntitiesTwentyFourHourClockTime
from openapi_server import util


class TflApiPresentationEntitiesPeriod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frequency: TflApiPresentationEntitiesServiceFrequency=None, from_time: TflApiPresentationEntitiesTwentyFourHourClockTime=None, to_time: TflApiPresentationEntitiesTwentyFourHourClockTime=None, type: str=None):
        """TflApiPresentationEntitiesPeriod - a model defined in OpenAPI

        :param frequency: The frequency of this TflApiPresentationEntitiesPeriod.
        :param from_time: The from_time of this TflApiPresentationEntitiesPeriod.
        :param to_time: The to_time of this TflApiPresentationEntitiesPeriod.
        :param type: The type of this TflApiPresentationEntitiesPeriod.
        """
        self.openapi_types = {
            'frequency': TflApiPresentationEntitiesServiceFrequency,
            'from_time': TflApiPresentationEntitiesTwentyFourHourClockTime,
            'to_time': TflApiPresentationEntitiesTwentyFourHourClockTime,
            'type': str
        }

        self.attribute_map = {
            'frequency': 'frequency',
            'from_time': 'fromTime',
            'to_time': 'toTime',
            'type': 'type'
        }

        self._frequency = frequency
        self._from_time = from_time
        self._to_time = to_time
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TflApiPresentationEntitiesPeriod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tfl.Api.Presentation.Entities.Period of this TflApiPresentationEntitiesPeriod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frequency(self):
        """Gets the frequency of this TflApiPresentationEntitiesPeriod.


        :return: The frequency of this TflApiPresentationEntitiesPeriod.
        :rtype: TflApiPresentationEntitiesServiceFrequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this TflApiPresentationEntitiesPeriod.


        :param frequency: The frequency of this TflApiPresentationEntitiesPeriod.
        :type frequency: TflApiPresentationEntitiesServiceFrequency
        """

        self._frequency = frequency

    @property
    def from_time(self):
        """Gets the from_time of this TflApiPresentationEntitiesPeriod.


        :return: The from_time of this TflApiPresentationEntitiesPeriod.
        :rtype: TflApiPresentationEntitiesTwentyFourHourClockTime
        """
        return self._from_time

    @from_time.setter
    def from_time(self, from_time):
        """Sets the from_time of this TflApiPresentationEntitiesPeriod.


        :param from_time: The from_time of this TflApiPresentationEntitiesPeriod.
        :type from_time: TflApiPresentationEntitiesTwentyFourHourClockTime
        """

        self._from_time = from_time

    @property
    def to_time(self):
        """Gets the to_time of this TflApiPresentationEntitiesPeriod.


        :return: The to_time of this TflApiPresentationEntitiesPeriod.
        :rtype: TflApiPresentationEntitiesTwentyFourHourClockTime
        """
        return self._to_time

    @to_time.setter
    def to_time(self, to_time):
        """Sets the to_time of this TflApiPresentationEntitiesPeriod.


        :param to_time: The to_time of this TflApiPresentationEntitiesPeriod.
        :type to_time: TflApiPresentationEntitiesTwentyFourHourClockTime
        """

        self._to_time = to_time

    @property
    def type(self):
        """Gets the type of this TflApiPresentationEntitiesPeriod.


        :return: The type of this TflApiPresentationEntitiesPeriod.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TflApiPresentationEntitiesPeriod.


        :param type: The type of this TflApiPresentationEntitiesPeriod.
        :type type: str
        """
        allowed_values = ["Normal", "FrequencyHours", "FrequencyMinutes", "Unknown"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
