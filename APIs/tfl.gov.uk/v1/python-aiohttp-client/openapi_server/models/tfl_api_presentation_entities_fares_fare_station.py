# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TflApiPresentationEntitiesFaresFareStation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, atco_code: str=None, common_name: str=None, fare_category: str=None):
        """TflApiPresentationEntitiesFaresFareStation - a model defined in OpenAPI

        :param atco_code: The atco_code of this TflApiPresentationEntitiesFaresFareStation.
        :param common_name: The common_name of this TflApiPresentationEntitiesFaresFareStation.
        :param fare_category: The fare_category of this TflApiPresentationEntitiesFaresFareStation.
        """
        self.openapi_types = {
            'atco_code': str,
            'common_name': str,
            'fare_category': str
        }

        self.attribute_map = {
            'atco_code': 'atcoCode',
            'common_name': 'commonName',
            'fare_category': 'fareCategory'
        }

        self._atco_code = atco_code
        self._common_name = common_name
        self._fare_category = fare_category

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TflApiPresentationEntitiesFaresFareStation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tfl.Api.Presentation.Entities.Fares.FareStation of this TflApiPresentationEntitiesFaresFareStation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def atco_code(self):
        """Gets the atco_code of this TflApiPresentationEntitiesFaresFareStation.


        :return: The atco_code of this TflApiPresentationEntitiesFaresFareStation.
        :rtype: str
        """
        return self._atco_code

    @atco_code.setter
    def atco_code(self, atco_code):
        """Sets the atco_code of this TflApiPresentationEntitiesFaresFareStation.


        :param atco_code: The atco_code of this TflApiPresentationEntitiesFaresFareStation.
        :type atco_code: str
        """

        self._atco_code = atco_code

    @property
    def common_name(self):
        """Gets the common_name of this TflApiPresentationEntitiesFaresFareStation.


        :return: The common_name of this TflApiPresentationEntitiesFaresFareStation.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this TflApiPresentationEntitiesFaresFareStation.


        :param common_name: The common_name of this TflApiPresentationEntitiesFaresFareStation.
        :type common_name: str
        """

        self._common_name = common_name

    @property
    def fare_category(self):
        """Gets the fare_category of this TflApiPresentationEntitiesFaresFareStation.


        :return: The fare_category of this TflApiPresentationEntitiesFaresFareStation.
        :rtype: str
        """
        return self._fare_category

    @fare_category.setter
    def fare_category(self, fare_category):
        """Sets the fare_category of this TflApiPresentationEntitiesFaresFareStation.


        :param fare_category: The fare_category of this TflApiPresentationEntitiesFaresFareStation.
        :type fare_category: str
        """
        allowed_values = ["Cash", "Oyster", "Contactless", "ContactlessOnly", "All"]  # noqa: E501
        if fare_category not in allowed_values:
            raise ValueError(
                "Invalid value for `fare_category` ({0}), must be one of {1}"
                .format(fare_category, allowed_values)
            )

        self._fare_category = fare_category
