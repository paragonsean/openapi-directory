# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tfl_api_presentation_entities_stop_point import TflApiPresentationEntitiesStopPoint
from openapi_server import util


class TflApiPresentationEntitiesStopPointsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, centre_point: List[float]=None, page: int=None, page_size: int=None, stop_points: List[TflApiPresentationEntitiesStopPoint]=None, total: int=None):
        """TflApiPresentationEntitiesStopPointsResponse - a model defined in OpenAPI

        :param centre_point: The centre_point of this TflApiPresentationEntitiesStopPointsResponse.
        :param page: The page of this TflApiPresentationEntitiesStopPointsResponse.
        :param page_size: The page_size of this TflApiPresentationEntitiesStopPointsResponse.
        :param stop_points: The stop_points of this TflApiPresentationEntitiesStopPointsResponse.
        :param total: The total of this TflApiPresentationEntitiesStopPointsResponse.
        """
        self.openapi_types = {
            'centre_point': List[float],
            'page': int,
            'page_size': int,
            'stop_points': List[TflApiPresentationEntitiesStopPoint],
            'total': int
        }

        self.attribute_map = {
            'centre_point': 'centrePoint',
            'page': 'page',
            'page_size': 'pageSize',
            'stop_points': 'stopPoints',
            'total': 'total'
        }

        self._centre_point = centre_point
        self._page = page
        self._page_size = page_size
        self._stop_points = stop_points
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TflApiPresentationEntitiesStopPointsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tfl.Api.Presentation.Entities.StopPointsResponse of this TflApiPresentationEntitiesStopPointsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def centre_point(self):
        """Gets the centre_point of this TflApiPresentationEntitiesStopPointsResponse.

        The centre latitude/longitude of this list of StopPoints

        :return: The centre_point of this TflApiPresentationEntitiesStopPointsResponse.
        :rtype: List[float]
        """
        return self._centre_point

    @centre_point.setter
    def centre_point(self, centre_point):
        """Sets the centre_point of this TflApiPresentationEntitiesStopPointsResponse.

        The centre latitude/longitude of this list of StopPoints

        :param centre_point: The centre_point of this TflApiPresentationEntitiesStopPointsResponse.
        :type centre_point: List[float]
        """

        self._centre_point = centre_point

    @property
    def page(self):
        """Gets the page of this TflApiPresentationEntitiesStopPointsResponse.

        The index of this page

        :return: The page of this TflApiPresentationEntitiesStopPointsResponse.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this TflApiPresentationEntitiesStopPointsResponse.

        The index of this page

        :param page: The page of this TflApiPresentationEntitiesStopPointsResponse.
        :type page: int
        """

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this TflApiPresentationEntitiesStopPointsResponse.

        The maximum size of the page in this response i.e. the maximum number of StopPoints

        :return: The page_size of this TflApiPresentationEntitiesStopPointsResponse.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this TflApiPresentationEntitiesStopPointsResponse.

        The maximum size of the page in this response i.e. the maximum number of StopPoints

        :param page_size: The page_size of this TflApiPresentationEntitiesStopPointsResponse.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def stop_points(self):
        """Gets the stop_points of this TflApiPresentationEntitiesStopPointsResponse.

        Collection of stop points

        :return: The stop_points of this TflApiPresentationEntitiesStopPointsResponse.
        :rtype: List[TflApiPresentationEntitiesStopPoint]
        """
        return self._stop_points

    @stop_points.setter
    def stop_points(self, stop_points):
        """Sets the stop_points of this TflApiPresentationEntitiesStopPointsResponse.

        Collection of stop points

        :param stop_points: The stop_points of this TflApiPresentationEntitiesStopPointsResponse.
        :type stop_points: List[TflApiPresentationEntitiesStopPoint]
        """

        self._stop_points = stop_points

    @property
    def total(self):
        """Gets the total of this TflApiPresentationEntitiesStopPointsResponse.

        The total number of StopPoints available across all pages

        :return: The total of this TflApiPresentationEntitiesStopPointsResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this TflApiPresentationEntitiesStopPointsResponse.

        The total number of StopPoints available across all pages

        :param total: The total of this TflApiPresentationEntitiesStopPointsResponse.
        :type total: int
        """

        self._total = total
