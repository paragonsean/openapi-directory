# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.system_data_spatial_db_geography import SystemDataSpatialDbGeography
from openapi_server import util


class TflApiPresentationEntitiesCycleSuperhighway(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, geography: SystemDataSpatialDbGeography=None, id: str=None, label: str=None, label_short: str=None, modified: datetime=None, route_type: str=None, segmented: bool=None, status: str=None):
        """TflApiPresentationEntitiesCycleSuperhighway - a model defined in OpenAPI

        :param geography: The geography of this TflApiPresentationEntitiesCycleSuperhighway.
        :param id: The id of this TflApiPresentationEntitiesCycleSuperhighway.
        :param label: The label of this TflApiPresentationEntitiesCycleSuperhighway.
        :param label_short: The label_short of this TflApiPresentationEntitiesCycleSuperhighway.
        :param modified: The modified of this TflApiPresentationEntitiesCycleSuperhighway.
        :param route_type: The route_type of this TflApiPresentationEntitiesCycleSuperhighway.
        :param segmented: The segmented of this TflApiPresentationEntitiesCycleSuperhighway.
        :param status: The status of this TflApiPresentationEntitiesCycleSuperhighway.
        """
        self.openapi_types = {
            'geography': SystemDataSpatialDbGeography,
            'id': str,
            'label': str,
            'label_short': str,
            'modified': datetime,
            'route_type': str,
            'segmented': bool,
            'status': str
        }

        self.attribute_map = {
            'geography': 'geography',
            'id': 'id',
            'label': 'label',
            'label_short': 'labelShort',
            'modified': 'modified',
            'route_type': 'routeType',
            'segmented': 'segmented',
            'status': 'status'
        }

        self._geography = geography
        self._id = id
        self._label = label
        self._label_short = label_short
        self._modified = modified
        self._route_type = route_type
        self._segmented = segmented
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TflApiPresentationEntitiesCycleSuperhighway':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tfl.Api.Presentation.Entities.CycleSuperhighway of this TflApiPresentationEntitiesCycleSuperhighway.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geography(self):
        """Gets the geography of this TflApiPresentationEntitiesCycleSuperhighway.


        :return: The geography of this TflApiPresentationEntitiesCycleSuperhighway.
        :rtype: SystemDataSpatialDbGeography
        """
        return self._geography

    @geography.setter
    def geography(self, geography):
        """Sets the geography of this TflApiPresentationEntitiesCycleSuperhighway.


        :param geography: The geography of this TflApiPresentationEntitiesCycleSuperhighway.
        :type geography: SystemDataSpatialDbGeography
        """

        self._geography = geography

    @property
    def id(self):
        """Gets the id of this TflApiPresentationEntitiesCycleSuperhighway.

        The Id

        :return: The id of this TflApiPresentationEntitiesCycleSuperhighway.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TflApiPresentationEntitiesCycleSuperhighway.

        The Id

        :param id: The id of this TflApiPresentationEntitiesCycleSuperhighway.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this TflApiPresentationEntitiesCycleSuperhighway.

        The long label to show on maps when zoomed in

        :return: The label of this TflApiPresentationEntitiesCycleSuperhighway.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this TflApiPresentationEntitiesCycleSuperhighway.

        The long label to show on maps when zoomed in

        :param label: The label of this TflApiPresentationEntitiesCycleSuperhighway.
        :type label: str
        """

        self._label = label

    @property
    def label_short(self):
        """Gets the label_short of this TflApiPresentationEntitiesCycleSuperhighway.

        The short label to show on maps

        :return: The label_short of this TflApiPresentationEntitiesCycleSuperhighway.
        :rtype: str
        """
        return self._label_short

    @label_short.setter
    def label_short(self, label_short):
        """Sets the label_short of this TflApiPresentationEntitiesCycleSuperhighway.

        The short label to show on maps

        :param label_short: The label_short of this TflApiPresentationEntitiesCycleSuperhighway.
        :type label_short: str
        """

        self._label_short = label_short

    @property
    def modified(self):
        """Gets the modified of this TflApiPresentationEntitiesCycleSuperhighway.

        When the data was last updated

        :return: The modified of this TflApiPresentationEntitiesCycleSuperhighway.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this TflApiPresentationEntitiesCycleSuperhighway.

        When the data was last updated

        :param modified: The modified of this TflApiPresentationEntitiesCycleSuperhighway.
        :type modified: datetime
        """

        self._modified = modified

    @property
    def route_type(self):
        """Gets the route_type of this TflApiPresentationEntitiesCycleSuperhighway.

        Type of cycle route e.g CycleSuperhighways, Quietways, MiniHollands etc

        :return: The route_type of this TflApiPresentationEntitiesCycleSuperhighway.
        :rtype: str
        """
        return self._route_type

    @route_type.setter
    def route_type(self, route_type):
        """Sets the route_type of this TflApiPresentationEntitiesCycleSuperhighway.

        Type of cycle route e.g CycleSuperhighways, Quietways, MiniHollands etc

        :param route_type: The route_type of this TflApiPresentationEntitiesCycleSuperhighway.
        :type route_type: str
        """
        allowed_values = ["Unknown", "All", "Cycle Superhighways", "Quietways", "Cycleways", "Mini-Hollands", "Central London Grid", "Streetspace Route"]  # noqa: E501
        if route_type not in allowed_values:
            raise ValueError(
                "Invalid value for `route_type` ({0}), must be one of {1}"
                .format(route_type, allowed_values)
            )

        self._route_type = route_type

    @property
    def segmented(self):
        """Gets the segmented of this TflApiPresentationEntitiesCycleSuperhighway.

        True if the route is split into segments

        :return: The segmented of this TflApiPresentationEntitiesCycleSuperhighway.
        :rtype: bool
        """
        return self._segmented

    @segmented.setter
    def segmented(self, segmented):
        """Sets the segmented of this TflApiPresentationEntitiesCycleSuperhighway.

        True if the route is split into segments

        :param segmented: The segmented of this TflApiPresentationEntitiesCycleSuperhighway.
        :type segmented: bool
        """

        self._segmented = segmented

    @property
    def status(self):
        """Gets the status of this TflApiPresentationEntitiesCycleSuperhighway.

        Cycle route status i.e Proposed, Existing etc

        :return: The status of this TflApiPresentationEntitiesCycleSuperhighway.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TflApiPresentationEntitiesCycleSuperhighway.

        Cycle route status i.e Proposed, Existing etc

        :param status: The status of this TflApiPresentationEntitiesCycleSuperhighway.
        :type status: str
        """
        allowed_values = ["Unknown", "All", "Open", "In Progress", "Planned", "Planned - Subject to feasibility and consultation.", "Not Open"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
