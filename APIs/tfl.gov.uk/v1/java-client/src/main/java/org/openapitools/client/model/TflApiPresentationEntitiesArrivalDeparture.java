/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.TflApiPresentationEntitiesPredictionTiming;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DTO to capture the prediction details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:40.735472-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TflApiPresentationEntitiesArrivalDeparture {
  public static final String SERIALIZED_NAME_CAUSE = "cause";
  @SerializedName(SERIALIZED_NAME_CAUSE)
  private String cause;

  /**
   * Status of departure
   */
  @JsonAdapter(DepartureStatusEnum.Adapter.class)
  public enum DepartureStatusEnum {
    ON_TIME("OnTime"),
    
    DELAYED("Delayed"),
    
    CANCELLED("Cancelled"),
    
    NOT_STOPPING_AT_STATION("NotStoppingAtStation");

    private String value;

    DepartureStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DepartureStatusEnum fromValue(String value) {
      for (DepartureStatusEnum b : DepartureStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DepartureStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DepartureStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DepartureStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DepartureStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DepartureStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEPARTURE_STATUS = "departureStatus";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_STATUS)
  private DepartureStatusEnum departureStatus;

  public static final String SERIALIZED_NAME_DESTINATION_NAME = "destinationName";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NAME)
  private String destinationName;

  public static final String SERIALIZED_NAME_DESTINATION_NAPTAN_ID = "destinationNaptanId";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NAPTAN_ID)
  private String destinationNaptanId;

  public static final String SERIALIZED_NAME_ESTIMATED_TIME_OF_ARRIVAL = "estimatedTimeOfArrival";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_TIME_OF_ARRIVAL)
  private OffsetDateTime estimatedTimeOfArrival;

  public static final String SERIALIZED_NAME_ESTIMATED_TIME_OF_DEPARTURE = "estimatedTimeOfDeparture";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_TIME_OF_DEPARTURE)
  private OffsetDateTime estimatedTimeOfDeparture;

  public static final String SERIALIZED_NAME_MINUTES_AND_SECONDS_TO_ARRIVAL = "minutesAndSecondsToArrival";
  @SerializedName(SERIALIZED_NAME_MINUTES_AND_SECONDS_TO_ARRIVAL)
  private String minutesAndSecondsToArrival;

  public static final String SERIALIZED_NAME_MINUTES_AND_SECONDS_TO_DEPARTURE = "minutesAndSecondsToDeparture";
  @SerializedName(SERIALIZED_NAME_MINUTES_AND_SECONDS_TO_DEPARTURE)
  private String minutesAndSecondsToDeparture;

  public static final String SERIALIZED_NAME_NAPTAN_ID = "naptanId";
  @SerializedName(SERIALIZED_NAME_NAPTAN_ID)
  private String naptanId;

  public static final String SERIALIZED_NAME_PLATFORM_NAME = "platformName";
  @SerializedName(SERIALIZED_NAME_PLATFORM_NAME)
  private String platformName;

  public static final String SERIALIZED_NAME_SCHEDULED_TIME_OF_ARRIVAL = "scheduledTimeOfArrival";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TIME_OF_ARRIVAL)
  private OffsetDateTime scheduledTimeOfArrival;

  public static final String SERIALIZED_NAME_SCHEDULED_TIME_OF_DEPARTURE = "scheduledTimeOfDeparture";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TIME_OF_DEPARTURE)
  private OffsetDateTime scheduledTimeOfDeparture;

  public static final String SERIALIZED_NAME_STATION_NAME = "stationName";
  @SerializedName(SERIALIZED_NAME_STATION_NAME)
  private String stationName;

  public static final String SERIALIZED_NAME_TIMING = "timing";
  @SerializedName(SERIALIZED_NAME_TIMING)
  private TflApiPresentationEntitiesPredictionTiming timing;

  public TflApiPresentationEntitiesArrivalDeparture() {
  }

  public TflApiPresentationEntitiesArrivalDeparture cause(String cause) {
    this.cause = cause;
    return this;
  }

  /**
   * Reason for cancellation or delay
   * @return cause
   */
  @javax.annotation.Nullable
  public String getCause() {
    return cause;
  }

  public void setCause(String cause) {
    this.cause = cause;
  }


  public TflApiPresentationEntitiesArrivalDeparture departureStatus(DepartureStatusEnum departureStatus) {
    this.departureStatus = departureStatus;
    return this;
  }

  /**
   * Status of departure
   * @return departureStatus
   */
  @javax.annotation.Nullable
  public DepartureStatusEnum getDepartureStatus() {
    return departureStatus;
  }

  public void setDepartureStatus(DepartureStatusEnum departureStatus) {
    this.departureStatus = departureStatus;
  }


  public TflApiPresentationEntitiesArrivalDeparture destinationName(String destinationName) {
    this.destinationName = destinationName;
    return this;
  }

  /**
   * Name of the destination
   * @return destinationName
   */
  @javax.annotation.Nullable
  public String getDestinationName() {
    return destinationName;
  }

  public void setDestinationName(String destinationName) {
    this.destinationName = destinationName;
  }


  public TflApiPresentationEntitiesArrivalDeparture destinationNaptanId(String destinationNaptanId) {
    this.destinationNaptanId = destinationNaptanId;
    return this;
  }

  /**
   * Naptan Identifier for the prediction&#39;s destination
   * @return destinationNaptanId
   */
  @javax.annotation.Nullable
  public String getDestinationNaptanId() {
    return destinationNaptanId;
  }

  public void setDestinationNaptanId(String destinationNaptanId) {
    this.destinationNaptanId = destinationNaptanId;
  }


  public TflApiPresentationEntitiesArrivalDeparture estimatedTimeOfArrival(OffsetDateTime estimatedTimeOfArrival) {
    this.estimatedTimeOfArrival = estimatedTimeOfArrival;
    return this;
  }

  /**
   * Estimated time of arrival
   * @return estimatedTimeOfArrival
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEstimatedTimeOfArrival() {
    return estimatedTimeOfArrival;
  }

  public void setEstimatedTimeOfArrival(OffsetDateTime estimatedTimeOfArrival) {
    this.estimatedTimeOfArrival = estimatedTimeOfArrival;
  }


  public TflApiPresentationEntitiesArrivalDeparture estimatedTimeOfDeparture(OffsetDateTime estimatedTimeOfDeparture) {
    this.estimatedTimeOfDeparture = estimatedTimeOfDeparture;
    return this;
  }

  /**
   * Estimated time of arrival
   * @return estimatedTimeOfDeparture
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEstimatedTimeOfDeparture() {
    return estimatedTimeOfDeparture;
  }

  public void setEstimatedTimeOfDeparture(OffsetDateTime estimatedTimeOfDeparture) {
    this.estimatedTimeOfDeparture = estimatedTimeOfDeparture;
  }


  public TflApiPresentationEntitiesArrivalDeparture minutesAndSecondsToArrival(String minutesAndSecondsToArrival) {
    this.minutesAndSecondsToArrival = minutesAndSecondsToArrival;
    return this;
  }

  /**
   * Estimated time of arrival
   * @return minutesAndSecondsToArrival
   */
  @javax.annotation.Nullable
  public String getMinutesAndSecondsToArrival() {
    return minutesAndSecondsToArrival;
  }

  public void setMinutesAndSecondsToArrival(String minutesAndSecondsToArrival) {
    this.minutesAndSecondsToArrival = minutesAndSecondsToArrival;
  }


  public TflApiPresentationEntitiesArrivalDeparture minutesAndSecondsToDeparture(String minutesAndSecondsToDeparture) {
    this.minutesAndSecondsToDeparture = minutesAndSecondsToDeparture;
    return this;
  }

  /**
   * Estimated time of arrival
   * @return minutesAndSecondsToDeparture
   */
  @javax.annotation.Nullable
  public String getMinutesAndSecondsToDeparture() {
    return minutesAndSecondsToDeparture;
  }

  public void setMinutesAndSecondsToDeparture(String minutesAndSecondsToDeparture) {
    this.minutesAndSecondsToDeparture = minutesAndSecondsToDeparture;
  }


  public TflApiPresentationEntitiesArrivalDeparture naptanId(String naptanId) {
    this.naptanId = naptanId;
    return this;
  }

  /**
   * Identifier for the prediction
   * @return naptanId
   */
  @javax.annotation.Nullable
  public String getNaptanId() {
    return naptanId;
  }

  public void setNaptanId(String naptanId) {
    this.naptanId = naptanId;
  }


  public TflApiPresentationEntitiesArrivalDeparture platformName(String platformName) {
    this.platformName = platformName;
    return this;
  }

  /**
   * Platform name (for bus, this is the stop letter)
   * @return platformName
   */
  @javax.annotation.Nullable
  public String getPlatformName() {
    return platformName;
  }

  public void setPlatformName(String platformName) {
    this.platformName = platformName;
  }


  public TflApiPresentationEntitiesArrivalDeparture scheduledTimeOfArrival(OffsetDateTime scheduledTimeOfArrival) {
    this.scheduledTimeOfArrival = scheduledTimeOfArrival;
    return this;
  }

  /**
   * Estimated time of arrival
   * @return scheduledTimeOfArrival
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledTimeOfArrival() {
    return scheduledTimeOfArrival;
  }

  public void setScheduledTimeOfArrival(OffsetDateTime scheduledTimeOfArrival) {
    this.scheduledTimeOfArrival = scheduledTimeOfArrival;
  }


  public TflApiPresentationEntitiesArrivalDeparture scheduledTimeOfDeparture(OffsetDateTime scheduledTimeOfDeparture) {
    this.scheduledTimeOfDeparture = scheduledTimeOfDeparture;
    return this;
  }

  /**
   * Estimated time of arrival
   * @return scheduledTimeOfDeparture
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledTimeOfDeparture() {
    return scheduledTimeOfDeparture;
  }

  public void setScheduledTimeOfDeparture(OffsetDateTime scheduledTimeOfDeparture) {
    this.scheduledTimeOfDeparture = scheduledTimeOfDeparture;
  }


  public TflApiPresentationEntitiesArrivalDeparture stationName(String stationName) {
    this.stationName = stationName;
    return this;
  }

  /**
   * Station name
   * @return stationName
   */
  @javax.annotation.Nullable
  public String getStationName() {
    return stationName;
  }

  public void setStationName(String stationName) {
    this.stationName = stationName;
  }


  public TflApiPresentationEntitiesArrivalDeparture timing(TflApiPresentationEntitiesPredictionTiming timing) {
    this.timing = timing;
    return this;
  }

  /**
   * Get timing
   * @return timing
   */
  @javax.annotation.Nullable
  public TflApiPresentationEntitiesPredictionTiming getTiming() {
    return timing;
  }

  public void setTiming(TflApiPresentationEntitiesPredictionTiming timing) {
    this.timing = timing;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TflApiPresentationEntitiesArrivalDeparture tflApiPresentationEntitiesArrivalDeparture = (TflApiPresentationEntitiesArrivalDeparture) o;
    return Objects.equals(this.cause, tflApiPresentationEntitiesArrivalDeparture.cause) &&
        Objects.equals(this.departureStatus, tflApiPresentationEntitiesArrivalDeparture.departureStatus) &&
        Objects.equals(this.destinationName, tflApiPresentationEntitiesArrivalDeparture.destinationName) &&
        Objects.equals(this.destinationNaptanId, tflApiPresentationEntitiesArrivalDeparture.destinationNaptanId) &&
        Objects.equals(this.estimatedTimeOfArrival, tflApiPresentationEntitiesArrivalDeparture.estimatedTimeOfArrival) &&
        Objects.equals(this.estimatedTimeOfDeparture, tflApiPresentationEntitiesArrivalDeparture.estimatedTimeOfDeparture) &&
        Objects.equals(this.minutesAndSecondsToArrival, tflApiPresentationEntitiesArrivalDeparture.minutesAndSecondsToArrival) &&
        Objects.equals(this.minutesAndSecondsToDeparture, tflApiPresentationEntitiesArrivalDeparture.minutesAndSecondsToDeparture) &&
        Objects.equals(this.naptanId, tflApiPresentationEntitiesArrivalDeparture.naptanId) &&
        Objects.equals(this.platformName, tflApiPresentationEntitiesArrivalDeparture.platformName) &&
        Objects.equals(this.scheduledTimeOfArrival, tflApiPresentationEntitiesArrivalDeparture.scheduledTimeOfArrival) &&
        Objects.equals(this.scheduledTimeOfDeparture, tflApiPresentationEntitiesArrivalDeparture.scheduledTimeOfDeparture) &&
        Objects.equals(this.stationName, tflApiPresentationEntitiesArrivalDeparture.stationName) &&
        Objects.equals(this.timing, tflApiPresentationEntitiesArrivalDeparture.timing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cause, departureStatus, destinationName, destinationNaptanId, estimatedTimeOfArrival, estimatedTimeOfDeparture, minutesAndSecondsToArrival, minutesAndSecondsToDeparture, naptanId, platformName, scheduledTimeOfArrival, scheduledTimeOfDeparture, stationName, timing);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TflApiPresentationEntitiesArrivalDeparture {\n");
    sb.append("    cause: ").append(toIndentedString(cause)).append("\n");
    sb.append("    departureStatus: ").append(toIndentedString(departureStatus)).append("\n");
    sb.append("    destinationName: ").append(toIndentedString(destinationName)).append("\n");
    sb.append("    destinationNaptanId: ").append(toIndentedString(destinationNaptanId)).append("\n");
    sb.append("    estimatedTimeOfArrival: ").append(toIndentedString(estimatedTimeOfArrival)).append("\n");
    sb.append("    estimatedTimeOfDeparture: ").append(toIndentedString(estimatedTimeOfDeparture)).append("\n");
    sb.append("    minutesAndSecondsToArrival: ").append(toIndentedString(minutesAndSecondsToArrival)).append("\n");
    sb.append("    minutesAndSecondsToDeparture: ").append(toIndentedString(minutesAndSecondsToDeparture)).append("\n");
    sb.append("    naptanId: ").append(toIndentedString(naptanId)).append("\n");
    sb.append("    platformName: ").append(toIndentedString(platformName)).append("\n");
    sb.append("    scheduledTimeOfArrival: ").append(toIndentedString(scheduledTimeOfArrival)).append("\n");
    sb.append("    scheduledTimeOfDeparture: ").append(toIndentedString(scheduledTimeOfDeparture)).append("\n");
    sb.append("    stationName: ").append(toIndentedString(stationName)).append("\n");
    sb.append("    timing: ").append(toIndentedString(timing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cause");
    openapiFields.add("departureStatus");
    openapiFields.add("destinationName");
    openapiFields.add("destinationNaptanId");
    openapiFields.add("estimatedTimeOfArrival");
    openapiFields.add("estimatedTimeOfDeparture");
    openapiFields.add("minutesAndSecondsToArrival");
    openapiFields.add("minutesAndSecondsToDeparture");
    openapiFields.add("naptanId");
    openapiFields.add("platformName");
    openapiFields.add("scheduledTimeOfArrival");
    openapiFields.add("scheduledTimeOfDeparture");
    openapiFields.add("stationName");
    openapiFields.add("timing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TflApiPresentationEntitiesArrivalDeparture
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TflApiPresentationEntitiesArrivalDeparture.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TflApiPresentationEntitiesArrivalDeparture is not found in the empty JSON string", TflApiPresentationEntitiesArrivalDeparture.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TflApiPresentationEntitiesArrivalDeparture.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TflApiPresentationEntitiesArrivalDeparture` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cause") != null && !jsonObj.get("cause").isJsonNull()) && !jsonObj.get("cause").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cause` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cause").toString()));
      }
      if ((jsonObj.get("departureStatus") != null && !jsonObj.get("departureStatus").isJsonNull()) && !jsonObj.get("departureStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departureStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departureStatus").toString()));
      }
      // validate the optional field `departureStatus`
      if (jsonObj.get("departureStatus") != null && !jsonObj.get("departureStatus").isJsonNull()) {
        DepartureStatusEnum.validateJsonElement(jsonObj.get("departureStatus"));
      }
      if ((jsonObj.get("destinationName") != null && !jsonObj.get("destinationName").isJsonNull()) && !jsonObj.get("destinationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationName").toString()));
      }
      if ((jsonObj.get("destinationNaptanId") != null && !jsonObj.get("destinationNaptanId").isJsonNull()) && !jsonObj.get("destinationNaptanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationNaptanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationNaptanId").toString()));
      }
      if ((jsonObj.get("minutesAndSecondsToArrival") != null && !jsonObj.get("minutesAndSecondsToArrival").isJsonNull()) && !jsonObj.get("minutesAndSecondsToArrival").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minutesAndSecondsToArrival` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minutesAndSecondsToArrival").toString()));
      }
      if ((jsonObj.get("minutesAndSecondsToDeparture") != null && !jsonObj.get("minutesAndSecondsToDeparture").isJsonNull()) && !jsonObj.get("minutesAndSecondsToDeparture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minutesAndSecondsToDeparture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minutesAndSecondsToDeparture").toString()));
      }
      if ((jsonObj.get("naptanId") != null && !jsonObj.get("naptanId").isJsonNull()) && !jsonObj.get("naptanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `naptanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("naptanId").toString()));
      }
      if ((jsonObj.get("platformName") != null && !jsonObj.get("platformName").isJsonNull()) && !jsonObj.get("platformName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformName").toString()));
      }
      if ((jsonObj.get("stationName") != null && !jsonObj.get("stationName").isJsonNull()) && !jsonObj.get("stationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stationName").toString()));
      }
      // validate the optional field `timing`
      if (jsonObj.get("timing") != null && !jsonObj.get("timing").isJsonNull()) {
        TflApiPresentationEntitiesPredictionTiming.validateJsonElement(jsonObj.get("timing"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TflApiPresentationEntitiesArrivalDeparture.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TflApiPresentationEntitiesArrivalDeparture' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TflApiPresentationEntitiesArrivalDeparture> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TflApiPresentationEntitiesArrivalDeparture.class));

       return (TypeAdapter<T>) new TypeAdapter<TflApiPresentationEntitiesArrivalDeparture>() {
           @Override
           public void write(JsonWriter out, TflApiPresentationEntitiesArrivalDeparture value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TflApiPresentationEntitiesArrivalDeparture read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TflApiPresentationEntitiesArrivalDeparture given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TflApiPresentationEntitiesArrivalDeparture
   * @throws IOException if the JSON string is invalid with respect to TflApiPresentationEntitiesArrivalDeparture
   */
  public static TflApiPresentationEntitiesArrivalDeparture fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TflApiPresentationEntitiesArrivalDeparture.class);
  }

  /**
   * Convert an instance of TflApiPresentationEntitiesArrivalDeparture to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

