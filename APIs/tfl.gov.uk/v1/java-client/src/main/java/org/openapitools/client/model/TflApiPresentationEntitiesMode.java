/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TflApiPresentationEntitiesMode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:40.735472-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TflApiPresentationEntitiesMode {
  public static final String SERIALIZED_NAME_IS_FARE_PAYING = "isFarePaying";
  @SerializedName(SERIALIZED_NAME_IS_FARE_PAYING)
  private Boolean isFarePaying;

  public static final String SERIALIZED_NAME_IS_SCHEDULED_SERVICE = "isScheduledService";
  @SerializedName(SERIALIZED_NAME_IS_SCHEDULED_SERVICE)
  private Boolean isScheduledService;

  public static final String SERIALIZED_NAME_IS_TFL_SERVICE = "isTflService";
  @SerializedName(SERIALIZED_NAME_IS_TFL_SERVICE)
  private Boolean isTflService;

  public static final String SERIALIZED_NAME_MODE_NAME = "modeName";
  @SerializedName(SERIALIZED_NAME_MODE_NAME)
  private String modeName;

  public static final String SERIALIZED_NAME_MOT_TYPE = "motType";
  @SerializedName(SERIALIZED_NAME_MOT_TYPE)
  private String motType;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public TflApiPresentationEntitiesMode() {
  }

  public TflApiPresentationEntitiesMode isFarePaying(Boolean isFarePaying) {
    this.isFarePaying = isFarePaying;
    return this;
  }

  /**
   * Get isFarePaying
   * @return isFarePaying
   */
  @javax.annotation.Nullable
  public Boolean getIsFarePaying() {
    return isFarePaying;
  }

  public void setIsFarePaying(Boolean isFarePaying) {
    this.isFarePaying = isFarePaying;
  }


  public TflApiPresentationEntitiesMode isScheduledService(Boolean isScheduledService) {
    this.isScheduledService = isScheduledService;
    return this;
  }

  /**
   * Get isScheduledService
   * @return isScheduledService
   */
  @javax.annotation.Nullable
  public Boolean getIsScheduledService() {
    return isScheduledService;
  }

  public void setIsScheduledService(Boolean isScheduledService) {
    this.isScheduledService = isScheduledService;
  }


  public TflApiPresentationEntitiesMode isTflService(Boolean isTflService) {
    this.isTflService = isTflService;
    return this;
  }

  /**
   * Get isTflService
   * @return isTflService
   */
  @javax.annotation.Nullable
  public Boolean getIsTflService() {
    return isTflService;
  }

  public void setIsTflService(Boolean isTflService) {
    this.isTflService = isTflService;
  }


  public TflApiPresentationEntitiesMode modeName(String modeName) {
    this.modeName = modeName;
    return this;
  }

  /**
   * Get modeName
   * @return modeName
   */
  @javax.annotation.Nullable
  public String getModeName() {
    return modeName;
  }

  public void setModeName(String modeName) {
    this.modeName = modeName;
  }


  public TflApiPresentationEntitiesMode motType(String motType) {
    this.motType = motType;
    return this;
  }

  /**
   * Get motType
   * @return motType
   */
  @javax.annotation.Nullable
  public String getMotType() {
    return motType;
  }

  public void setMotType(String motType) {
    this.motType = motType;
  }


  public TflApiPresentationEntitiesMode network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Get network
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TflApiPresentationEntitiesMode tflApiPresentationEntitiesMode = (TflApiPresentationEntitiesMode) o;
    return Objects.equals(this.isFarePaying, tflApiPresentationEntitiesMode.isFarePaying) &&
        Objects.equals(this.isScheduledService, tflApiPresentationEntitiesMode.isScheduledService) &&
        Objects.equals(this.isTflService, tflApiPresentationEntitiesMode.isTflService) &&
        Objects.equals(this.modeName, tflApiPresentationEntitiesMode.modeName) &&
        Objects.equals(this.motType, tflApiPresentationEntitiesMode.motType) &&
        Objects.equals(this.network, tflApiPresentationEntitiesMode.network);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isFarePaying, isScheduledService, isTflService, modeName, motType, network);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TflApiPresentationEntitiesMode {\n");
    sb.append("    isFarePaying: ").append(toIndentedString(isFarePaying)).append("\n");
    sb.append("    isScheduledService: ").append(toIndentedString(isScheduledService)).append("\n");
    sb.append("    isTflService: ").append(toIndentedString(isTflService)).append("\n");
    sb.append("    modeName: ").append(toIndentedString(modeName)).append("\n");
    sb.append("    motType: ").append(toIndentedString(motType)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isFarePaying");
    openapiFields.add("isScheduledService");
    openapiFields.add("isTflService");
    openapiFields.add("modeName");
    openapiFields.add("motType");
    openapiFields.add("network");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TflApiPresentationEntitiesMode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TflApiPresentationEntitiesMode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TflApiPresentationEntitiesMode is not found in the empty JSON string", TflApiPresentationEntitiesMode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TflApiPresentationEntitiesMode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TflApiPresentationEntitiesMode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("modeName") != null && !jsonObj.get("modeName").isJsonNull()) && !jsonObj.get("modeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modeName").toString()));
      }
      if ((jsonObj.get("motType") != null && !jsonObj.get("motType").isJsonNull()) && !jsonObj.get("motType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `motType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("motType").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TflApiPresentationEntitiesMode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TflApiPresentationEntitiesMode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TflApiPresentationEntitiesMode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TflApiPresentationEntitiesMode.class));

       return (TypeAdapter<T>) new TypeAdapter<TflApiPresentationEntitiesMode>() {
           @Override
           public void write(JsonWriter out, TflApiPresentationEntitiesMode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TflApiPresentationEntitiesMode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TflApiPresentationEntitiesMode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TflApiPresentationEntitiesMode
   * @throws IOException if the JSON string is invalid with respect to TflApiPresentationEntitiesMode
   */
  public static TflApiPresentationEntitiesMode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TflApiPresentationEntitiesMode.class);
  }

  /**
   * Convert an instance of TflApiPresentationEntitiesMode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

