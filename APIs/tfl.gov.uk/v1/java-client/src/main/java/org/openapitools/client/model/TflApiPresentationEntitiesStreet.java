/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TflApiPresentationEntitiesStreetSegment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TflApiPresentationEntitiesStreet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:40.735472-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TflApiPresentationEntitiesStreet {
  public static final String SERIALIZED_NAME_CLOSURE = "closure";
  @SerializedName(SERIALIZED_NAME_CLOSURE)
  private String closure;

  public static final String SERIALIZED_NAME_DIRECTIONS = "directions";
  @SerializedName(SERIALIZED_NAME_DIRECTIONS)
  private String directions;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SEGMENTS = "segments";
  @SerializedName(SERIALIZED_NAME_SEGMENTS)
  private List<TflApiPresentationEntitiesStreetSegment> segments = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_SYSTEM_ID = "sourceSystemId";
  @SerializedName(SERIALIZED_NAME_SOURCE_SYSTEM_ID)
  private Long sourceSystemId;

  public static final String SERIALIZED_NAME_SOURCE_SYSTEM_KEY = "sourceSystemKey";
  @SerializedName(SERIALIZED_NAME_SOURCE_SYSTEM_KEY)
  private String sourceSystemKey;

  public TflApiPresentationEntitiesStreet() {
  }

  public TflApiPresentationEntitiesStreet closure(String closure) {
    this.closure = closure;
    return this;
  }

  /**
   * Type of road closure. Some example values:              Open &#x3D; road is open, not blocked, not closed, not restricted. It maybe that the disruption has been moved out of the carriageway.              Partial Closure &#x3D; road is partially blocked, closed or restricted.               Full Closure &#x3D; road is fully blocked or closed.
   * @return closure
   */
  @javax.annotation.Nullable
  public String getClosure() {
    return closure;
  }

  public void setClosure(String closure) {
    this.closure = closure;
  }


  public TflApiPresentationEntitiesStreet directions(String directions) {
    this.directions = directions;
    return this;
  }

  /**
   * The direction of the disruption on the street. Some example values:              All Directions              All Approaches              Clockwise              Anti-Clockwise              Northbound              Eastbound              Southbound              Westbound              Both Directions
   * @return directions
   */
  @javax.annotation.Nullable
  public String getDirections() {
    return directions;
  }

  public void setDirections(String directions) {
    this.directions = directions;
  }


  public TflApiPresentationEntitiesStreet name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Street name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TflApiPresentationEntitiesStreet segments(List<TflApiPresentationEntitiesStreetSegment> segments) {
    this.segments = segments;
    return this;
  }

  public TflApiPresentationEntitiesStreet addSegmentsItem(TflApiPresentationEntitiesStreetSegment segmentsItem) {
    if (this.segments == null) {
      this.segments = new ArrayList<>();
    }
    this.segments.add(segmentsItem);
    return this;
  }

  /**
   * Geographic description of the sections of this street that are affected.
   * @return segments
   */
  @javax.annotation.Nullable
  public List<TflApiPresentationEntitiesStreetSegment> getSegments() {
    return segments;
  }

  public void setSegments(List<TflApiPresentationEntitiesStreetSegment> segments) {
    this.segments = segments;
  }


  public TflApiPresentationEntitiesStreet sourceSystemId(Long sourceSystemId) {
    this.sourceSystemId = sourceSystemId;
    return this;
  }

  /**
   * The ID from the source system of the disruption that this street belongs to.
   * @return sourceSystemId
   */
  @javax.annotation.Nullable
  public Long getSourceSystemId() {
    return sourceSystemId;
  }

  public void setSourceSystemId(Long sourceSystemId) {
    this.sourceSystemId = sourceSystemId;
  }


  public TflApiPresentationEntitiesStreet sourceSystemKey(String sourceSystemKey) {
    this.sourceSystemKey = sourceSystemKey;
    return this;
  }

  /**
   * The key of the source system of the disruption that this street belongs to.
   * @return sourceSystemKey
   */
  @javax.annotation.Nullable
  public String getSourceSystemKey() {
    return sourceSystemKey;
  }

  public void setSourceSystemKey(String sourceSystemKey) {
    this.sourceSystemKey = sourceSystemKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TflApiPresentationEntitiesStreet tflApiPresentationEntitiesStreet = (TflApiPresentationEntitiesStreet) o;
    return Objects.equals(this.closure, tflApiPresentationEntitiesStreet.closure) &&
        Objects.equals(this.directions, tflApiPresentationEntitiesStreet.directions) &&
        Objects.equals(this.name, tflApiPresentationEntitiesStreet.name) &&
        Objects.equals(this.segments, tflApiPresentationEntitiesStreet.segments) &&
        Objects.equals(this.sourceSystemId, tflApiPresentationEntitiesStreet.sourceSystemId) &&
        Objects.equals(this.sourceSystemKey, tflApiPresentationEntitiesStreet.sourceSystemKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closure, directions, name, segments, sourceSystemId, sourceSystemKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TflApiPresentationEntitiesStreet {\n");
    sb.append("    closure: ").append(toIndentedString(closure)).append("\n");
    sb.append("    directions: ").append(toIndentedString(directions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    segments: ").append(toIndentedString(segments)).append("\n");
    sb.append("    sourceSystemId: ").append(toIndentedString(sourceSystemId)).append("\n");
    sb.append("    sourceSystemKey: ").append(toIndentedString(sourceSystemKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closure");
    openapiFields.add("directions");
    openapiFields.add("name");
    openapiFields.add("segments");
    openapiFields.add("sourceSystemId");
    openapiFields.add("sourceSystemKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TflApiPresentationEntitiesStreet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TflApiPresentationEntitiesStreet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TflApiPresentationEntitiesStreet is not found in the empty JSON string", TflApiPresentationEntitiesStreet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TflApiPresentationEntitiesStreet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TflApiPresentationEntitiesStreet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("closure") != null && !jsonObj.get("closure").isJsonNull()) && !jsonObj.get("closure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closure").toString()));
      }
      if ((jsonObj.get("directions") != null && !jsonObj.get("directions").isJsonNull()) && !jsonObj.get("directions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directions").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("segments") != null && !jsonObj.get("segments").isJsonNull()) {
        JsonArray jsonArraysegments = jsonObj.getAsJsonArray("segments");
        if (jsonArraysegments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("segments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `segments` to be an array in the JSON string but got `%s`", jsonObj.get("segments").toString()));
          }

          // validate the optional field `segments` (array)
          for (int i = 0; i < jsonArraysegments.size(); i++) {
            TflApiPresentationEntitiesStreetSegment.validateJsonElement(jsonArraysegments.get(i));
          };
        }
      }
      if ((jsonObj.get("sourceSystemKey") != null && !jsonObj.get("sourceSystemKey").isJsonNull()) && !jsonObj.get("sourceSystemKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceSystemKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceSystemKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TflApiPresentationEntitiesStreet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TflApiPresentationEntitiesStreet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TflApiPresentationEntitiesStreet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TflApiPresentationEntitiesStreet.class));

       return (TypeAdapter<T>) new TypeAdapter<TflApiPresentationEntitiesStreet>() {
           @Override
           public void write(JsonWriter out, TflApiPresentationEntitiesStreet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TflApiPresentationEntitiesStreet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TflApiPresentationEntitiesStreet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TflApiPresentationEntitiesStreet
   * @throws IOException if the JSON string is invalid with respect to TflApiPresentationEntitiesStreet
   */
  public static TflApiPresentationEntitiesStreet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TflApiPresentationEntitiesStreet.class);
  }

  /**
   * Convert an instance of TflApiPresentationEntitiesStreet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

