/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TflApiPresentationEntitiesMatchedStop;
import org.openapitools.client.model.TflApiPresentationEntitiesTimetable;
import org.openapitools.client.model.TflApiPresentationEntitiesTimetablesDisambiguation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TflApiPresentationEntitiesTimetableResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:40.735472-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TflApiPresentationEntitiesTimetableResponse {
  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private String direction;

  public static final String SERIALIZED_NAME_DISAMBIGUATION = "disambiguation";
  @SerializedName(SERIALIZED_NAME_DISAMBIGUATION)
  private TflApiPresentationEntitiesTimetablesDisambiguation disambiguation;

  public static final String SERIALIZED_NAME_LINE_ID = "lineId";
  @SerializedName(SERIALIZED_NAME_LINE_ID)
  private String lineId;

  public static final String SERIALIZED_NAME_LINE_NAME = "lineName";
  @SerializedName(SERIALIZED_NAME_LINE_NAME)
  private String lineName;

  public static final String SERIALIZED_NAME_PDF_URL = "pdfUrl";
  @SerializedName(SERIALIZED_NAME_PDF_URL)
  private String pdfUrl;

  public static final String SERIALIZED_NAME_STATIONS = "stations";
  @SerializedName(SERIALIZED_NAME_STATIONS)
  private List<TflApiPresentationEntitiesMatchedStop> stations = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS_ERROR_MESSAGE = "statusErrorMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_ERROR_MESSAGE)
  private String statusErrorMessage;

  public static final String SERIALIZED_NAME_STOPS = "stops";
  @SerializedName(SERIALIZED_NAME_STOPS)
  private List<TflApiPresentationEntitiesMatchedStop> stops = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMETABLE = "timetable";
  @SerializedName(SERIALIZED_NAME_TIMETABLE)
  private TflApiPresentationEntitiesTimetable timetable;

  public TflApiPresentationEntitiesTimetableResponse() {
  }

  public TflApiPresentationEntitiesTimetableResponse direction(String direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Get direction
   * @return direction
   */
  @javax.annotation.Nullable
  public String getDirection() {
    return direction;
  }

  public void setDirection(String direction) {
    this.direction = direction;
  }


  public TflApiPresentationEntitiesTimetableResponse disambiguation(TflApiPresentationEntitiesTimetablesDisambiguation disambiguation) {
    this.disambiguation = disambiguation;
    return this;
  }

  /**
   * Get disambiguation
   * @return disambiguation
   */
  @javax.annotation.Nullable
  public TflApiPresentationEntitiesTimetablesDisambiguation getDisambiguation() {
    return disambiguation;
  }

  public void setDisambiguation(TflApiPresentationEntitiesTimetablesDisambiguation disambiguation) {
    this.disambiguation = disambiguation;
  }


  public TflApiPresentationEntitiesTimetableResponse lineId(String lineId) {
    this.lineId = lineId;
    return this;
  }

  /**
   * Get lineId
   * @return lineId
   */
  @javax.annotation.Nullable
  public String getLineId() {
    return lineId;
  }

  public void setLineId(String lineId) {
    this.lineId = lineId;
  }


  public TflApiPresentationEntitiesTimetableResponse lineName(String lineName) {
    this.lineName = lineName;
    return this;
  }

  /**
   * Get lineName
   * @return lineName
   */
  @javax.annotation.Nullable
  public String getLineName() {
    return lineName;
  }

  public void setLineName(String lineName) {
    this.lineName = lineName;
  }


  public TflApiPresentationEntitiesTimetableResponse pdfUrl(String pdfUrl) {
    this.pdfUrl = pdfUrl;
    return this;
  }

  /**
   * Get pdfUrl
   * @return pdfUrl
   */
  @javax.annotation.Nullable
  public String getPdfUrl() {
    return pdfUrl;
  }

  public void setPdfUrl(String pdfUrl) {
    this.pdfUrl = pdfUrl;
  }


  public TflApiPresentationEntitiesTimetableResponse stations(List<TflApiPresentationEntitiesMatchedStop> stations) {
    this.stations = stations;
    return this;
  }

  public TflApiPresentationEntitiesTimetableResponse addStationsItem(TflApiPresentationEntitiesMatchedStop stationsItem) {
    if (this.stations == null) {
      this.stations = new ArrayList<>();
    }
    this.stations.add(stationsItem);
    return this;
  }

  /**
   * Get stations
   * @return stations
   */
  @javax.annotation.Nullable
  public List<TflApiPresentationEntitiesMatchedStop> getStations() {
    return stations;
  }

  public void setStations(List<TflApiPresentationEntitiesMatchedStop> stations) {
    this.stations = stations;
  }


  public TflApiPresentationEntitiesTimetableResponse statusErrorMessage(String statusErrorMessage) {
    this.statusErrorMessage = statusErrorMessage;
    return this;
  }

  /**
   * Get statusErrorMessage
   * @return statusErrorMessage
   */
  @javax.annotation.Nullable
  public String getStatusErrorMessage() {
    return statusErrorMessage;
  }

  public void setStatusErrorMessage(String statusErrorMessage) {
    this.statusErrorMessage = statusErrorMessage;
  }


  public TflApiPresentationEntitiesTimetableResponse stops(List<TflApiPresentationEntitiesMatchedStop> stops) {
    this.stops = stops;
    return this;
  }

  public TflApiPresentationEntitiesTimetableResponse addStopsItem(TflApiPresentationEntitiesMatchedStop stopsItem) {
    if (this.stops == null) {
      this.stops = new ArrayList<>();
    }
    this.stops.add(stopsItem);
    return this;
  }

  /**
   * Get stops
   * @return stops
   */
  @javax.annotation.Nullable
  public List<TflApiPresentationEntitiesMatchedStop> getStops() {
    return stops;
  }

  public void setStops(List<TflApiPresentationEntitiesMatchedStop> stops) {
    this.stops = stops;
  }


  public TflApiPresentationEntitiesTimetableResponse timetable(TflApiPresentationEntitiesTimetable timetable) {
    this.timetable = timetable;
    return this;
  }

  /**
   * Get timetable
   * @return timetable
   */
  @javax.annotation.Nullable
  public TflApiPresentationEntitiesTimetable getTimetable() {
    return timetable;
  }

  public void setTimetable(TflApiPresentationEntitiesTimetable timetable) {
    this.timetable = timetable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TflApiPresentationEntitiesTimetableResponse tflApiPresentationEntitiesTimetableResponse = (TflApiPresentationEntitiesTimetableResponse) o;
    return Objects.equals(this.direction, tflApiPresentationEntitiesTimetableResponse.direction) &&
        Objects.equals(this.disambiguation, tflApiPresentationEntitiesTimetableResponse.disambiguation) &&
        Objects.equals(this.lineId, tflApiPresentationEntitiesTimetableResponse.lineId) &&
        Objects.equals(this.lineName, tflApiPresentationEntitiesTimetableResponse.lineName) &&
        Objects.equals(this.pdfUrl, tflApiPresentationEntitiesTimetableResponse.pdfUrl) &&
        Objects.equals(this.stations, tflApiPresentationEntitiesTimetableResponse.stations) &&
        Objects.equals(this.statusErrorMessage, tflApiPresentationEntitiesTimetableResponse.statusErrorMessage) &&
        Objects.equals(this.stops, tflApiPresentationEntitiesTimetableResponse.stops) &&
        Objects.equals(this.timetable, tflApiPresentationEntitiesTimetableResponse.timetable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(direction, disambiguation, lineId, lineName, pdfUrl, stations, statusErrorMessage, stops, timetable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TflApiPresentationEntitiesTimetableResponse {\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    disambiguation: ").append(toIndentedString(disambiguation)).append("\n");
    sb.append("    lineId: ").append(toIndentedString(lineId)).append("\n");
    sb.append("    lineName: ").append(toIndentedString(lineName)).append("\n");
    sb.append("    pdfUrl: ").append(toIndentedString(pdfUrl)).append("\n");
    sb.append("    stations: ").append(toIndentedString(stations)).append("\n");
    sb.append("    statusErrorMessage: ").append(toIndentedString(statusErrorMessage)).append("\n");
    sb.append("    stops: ").append(toIndentedString(stops)).append("\n");
    sb.append("    timetable: ").append(toIndentedString(timetable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("direction");
    openapiFields.add("disambiguation");
    openapiFields.add("lineId");
    openapiFields.add("lineName");
    openapiFields.add("pdfUrl");
    openapiFields.add("stations");
    openapiFields.add("statusErrorMessage");
    openapiFields.add("stops");
    openapiFields.add("timetable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TflApiPresentationEntitiesTimetableResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TflApiPresentationEntitiesTimetableResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TflApiPresentationEntitiesTimetableResponse is not found in the empty JSON string", TflApiPresentationEntitiesTimetableResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TflApiPresentationEntitiesTimetableResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TflApiPresentationEntitiesTimetableResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      // validate the optional field `disambiguation`
      if (jsonObj.get("disambiguation") != null && !jsonObj.get("disambiguation").isJsonNull()) {
        TflApiPresentationEntitiesTimetablesDisambiguation.validateJsonElement(jsonObj.get("disambiguation"));
      }
      if ((jsonObj.get("lineId") != null && !jsonObj.get("lineId").isJsonNull()) && !jsonObj.get("lineId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineId").toString()));
      }
      if ((jsonObj.get("lineName") != null && !jsonObj.get("lineName").isJsonNull()) && !jsonObj.get("lineName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineName").toString()));
      }
      if ((jsonObj.get("pdfUrl") != null && !jsonObj.get("pdfUrl").isJsonNull()) && !jsonObj.get("pdfUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pdfUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pdfUrl").toString()));
      }
      if (jsonObj.get("stations") != null && !jsonObj.get("stations").isJsonNull()) {
        JsonArray jsonArraystations = jsonObj.getAsJsonArray("stations");
        if (jsonArraystations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stations` to be an array in the JSON string but got `%s`", jsonObj.get("stations").toString()));
          }

          // validate the optional field `stations` (array)
          for (int i = 0; i < jsonArraystations.size(); i++) {
            TflApiPresentationEntitiesMatchedStop.validateJsonElement(jsonArraystations.get(i));
          };
        }
      }
      if ((jsonObj.get("statusErrorMessage") != null && !jsonObj.get("statusErrorMessage").isJsonNull()) && !jsonObj.get("statusErrorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusErrorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusErrorMessage").toString()));
      }
      if (jsonObj.get("stops") != null && !jsonObj.get("stops").isJsonNull()) {
        JsonArray jsonArraystops = jsonObj.getAsJsonArray("stops");
        if (jsonArraystops != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stops").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stops` to be an array in the JSON string but got `%s`", jsonObj.get("stops").toString()));
          }

          // validate the optional field `stops` (array)
          for (int i = 0; i < jsonArraystops.size(); i++) {
            TflApiPresentationEntitiesMatchedStop.validateJsonElement(jsonArraystops.get(i));
          };
        }
      }
      // validate the optional field `timetable`
      if (jsonObj.get("timetable") != null && !jsonObj.get("timetable").isJsonNull()) {
        TflApiPresentationEntitiesTimetable.validateJsonElement(jsonObj.get("timetable"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TflApiPresentationEntitiesTimetableResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TflApiPresentationEntitiesTimetableResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TflApiPresentationEntitiesTimetableResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TflApiPresentationEntitiesTimetableResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TflApiPresentationEntitiesTimetableResponse>() {
           @Override
           public void write(JsonWriter out, TflApiPresentationEntitiesTimetableResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TflApiPresentationEntitiesTimetableResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TflApiPresentationEntitiesTimetableResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TflApiPresentationEntitiesTimetableResponse
   * @throws IOException if the JSON string is invalid with respect to TflApiPresentationEntitiesTimetableResponse
   */
  public static TflApiPresentationEntitiesTimetableResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TflApiPresentationEntitiesTimetableResponse.class);
  }

  /**
   * Convert an instance of TflApiPresentationEntitiesTimetableResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

