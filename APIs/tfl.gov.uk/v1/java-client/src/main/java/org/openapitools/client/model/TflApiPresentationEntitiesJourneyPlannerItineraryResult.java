/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TflApiPresentationEntitiesJourneyPlannerJourney;
import org.openapitools.client.model.TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData;
import org.openapitools.client.model.TflApiPresentationEntitiesJourneyPlannerJourneyVector;
import org.openapitools.client.model.TflApiPresentationEntitiesJourneyPlannerSearchCriteria;
import org.openapitools.client.model.TflApiPresentationEntitiesLine;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A DTO representing a list of possible journeys.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:40.735472-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TflApiPresentationEntitiesJourneyPlannerItineraryResult {
  public static final String SERIALIZED_NAME_CYCLE_HIRE_DOCKING_STATION_DATA = "cycleHireDockingStationData";
  @SerializedName(SERIALIZED_NAME_CYCLE_HIRE_DOCKING_STATION_DATA)
  private TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData cycleHireDockingStationData;

  public static final String SERIALIZED_NAME_JOURNEY_VECTOR = "journeyVector";
  @SerializedName(SERIALIZED_NAME_JOURNEY_VECTOR)
  private TflApiPresentationEntitiesJourneyPlannerJourneyVector journeyVector;

  public static final String SERIALIZED_NAME_JOURNEYS = "journeys";
  @SerializedName(SERIALIZED_NAME_JOURNEYS)
  private List<TflApiPresentationEntitiesJourneyPlannerJourney> journeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINES = "lines";
  @SerializedName(SERIALIZED_NAME_LINES)
  private List<TflApiPresentationEntitiesLine> lines = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECOMMENDED_MAX_AGE_MINUTES = "recommendedMaxAgeMinutes";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_MAX_AGE_MINUTES)
  private Integer recommendedMaxAgeMinutes;

  public static final String SERIALIZED_NAME_SEARCH_CRITERIA = "searchCriteria";
  @SerializedName(SERIALIZED_NAME_SEARCH_CRITERIA)
  private TflApiPresentationEntitiesJourneyPlannerSearchCriteria searchCriteria;

  public static final String SERIALIZED_NAME_STOP_MESSAGES = "stopMessages";
  @SerializedName(SERIALIZED_NAME_STOP_MESSAGES)
  private List<String> stopMessages = new ArrayList<>();

  public TflApiPresentationEntitiesJourneyPlannerItineraryResult() {
  }

  public TflApiPresentationEntitiesJourneyPlannerItineraryResult cycleHireDockingStationData(TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData cycleHireDockingStationData) {
    this.cycleHireDockingStationData = cycleHireDockingStationData;
    return this;
  }

  /**
   * Get cycleHireDockingStationData
   * @return cycleHireDockingStationData
   */
  @javax.annotation.Nullable
  public TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData getCycleHireDockingStationData() {
    return cycleHireDockingStationData;
  }

  public void setCycleHireDockingStationData(TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData cycleHireDockingStationData) {
    this.cycleHireDockingStationData = cycleHireDockingStationData;
  }


  public TflApiPresentationEntitiesJourneyPlannerItineraryResult journeyVector(TflApiPresentationEntitiesJourneyPlannerJourneyVector journeyVector) {
    this.journeyVector = journeyVector;
    return this;
  }

  /**
   * Get journeyVector
   * @return journeyVector
   */
  @javax.annotation.Nullable
  public TflApiPresentationEntitiesJourneyPlannerJourneyVector getJourneyVector() {
    return journeyVector;
  }

  public void setJourneyVector(TflApiPresentationEntitiesJourneyPlannerJourneyVector journeyVector) {
    this.journeyVector = journeyVector;
  }


  public TflApiPresentationEntitiesJourneyPlannerItineraryResult journeys(List<TflApiPresentationEntitiesJourneyPlannerJourney> journeys) {
    this.journeys = journeys;
    return this;
  }

  public TflApiPresentationEntitiesJourneyPlannerItineraryResult addJourneysItem(TflApiPresentationEntitiesJourneyPlannerJourney journeysItem) {
    if (this.journeys == null) {
      this.journeys = new ArrayList<>();
    }
    this.journeys.add(journeysItem);
    return this;
  }

  /**
   * Get journeys
   * @return journeys
   */
  @javax.annotation.Nullable
  public List<TflApiPresentationEntitiesJourneyPlannerJourney> getJourneys() {
    return journeys;
  }

  public void setJourneys(List<TflApiPresentationEntitiesJourneyPlannerJourney> journeys) {
    this.journeys = journeys;
  }


  public TflApiPresentationEntitiesJourneyPlannerItineraryResult lines(List<TflApiPresentationEntitiesLine> lines) {
    this.lines = lines;
    return this;
  }

  public TflApiPresentationEntitiesJourneyPlannerItineraryResult addLinesItem(TflApiPresentationEntitiesLine linesItem) {
    if (this.lines == null) {
      this.lines = new ArrayList<>();
    }
    this.lines.add(linesItem);
    return this;
  }

  /**
   * Get lines
   * @return lines
   */
  @javax.annotation.Nullable
  public List<TflApiPresentationEntitiesLine> getLines() {
    return lines;
  }

  public void setLines(List<TflApiPresentationEntitiesLine> lines) {
    this.lines = lines;
  }


  public TflApiPresentationEntitiesJourneyPlannerItineraryResult recommendedMaxAgeMinutes(Integer recommendedMaxAgeMinutes) {
    this.recommendedMaxAgeMinutes = recommendedMaxAgeMinutes;
    return this;
  }

  /**
   * Get recommendedMaxAgeMinutes
   * @return recommendedMaxAgeMinutes
   */
  @javax.annotation.Nullable
  public Integer getRecommendedMaxAgeMinutes() {
    return recommendedMaxAgeMinutes;
  }

  public void setRecommendedMaxAgeMinutes(Integer recommendedMaxAgeMinutes) {
    this.recommendedMaxAgeMinutes = recommendedMaxAgeMinutes;
  }


  public TflApiPresentationEntitiesJourneyPlannerItineraryResult searchCriteria(TflApiPresentationEntitiesJourneyPlannerSearchCriteria searchCriteria) {
    this.searchCriteria = searchCriteria;
    return this;
  }

  /**
   * Get searchCriteria
   * @return searchCriteria
   */
  @javax.annotation.Nullable
  public TflApiPresentationEntitiesJourneyPlannerSearchCriteria getSearchCriteria() {
    return searchCriteria;
  }

  public void setSearchCriteria(TflApiPresentationEntitiesJourneyPlannerSearchCriteria searchCriteria) {
    this.searchCriteria = searchCriteria;
  }


  public TflApiPresentationEntitiesJourneyPlannerItineraryResult stopMessages(List<String> stopMessages) {
    this.stopMessages = stopMessages;
    return this;
  }

  public TflApiPresentationEntitiesJourneyPlannerItineraryResult addStopMessagesItem(String stopMessagesItem) {
    if (this.stopMessages == null) {
      this.stopMessages = new ArrayList<>();
    }
    this.stopMessages.add(stopMessagesItem);
    return this;
  }

  /**
   * Get stopMessages
   * @return stopMessages
   */
  @javax.annotation.Nullable
  public List<String> getStopMessages() {
    return stopMessages;
  }

  public void setStopMessages(List<String> stopMessages) {
    this.stopMessages = stopMessages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TflApiPresentationEntitiesJourneyPlannerItineraryResult tflApiPresentationEntitiesJourneyPlannerItineraryResult = (TflApiPresentationEntitiesJourneyPlannerItineraryResult) o;
    return Objects.equals(this.cycleHireDockingStationData, tflApiPresentationEntitiesJourneyPlannerItineraryResult.cycleHireDockingStationData) &&
        Objects.equals(this.journeyVector, tflApiPresentationEntitiesJourneyPlannerItineraryResult.journeyVector) &&
        Objects.equals(this.journeys, tflApiPresentationEntitiesJourneyPlannerItineraryResult.journeys) &&
        Objects.equals(this.lines, tflApiPresentationEntitiesJourneyPlannerItineraryResult.lines) &&
        Objects.equals(this.recommendedMaxAgeMinutes, tflApiPresentationEntitiesJourneyPlannerItineraryResult.recommendedMaxAgeMinutes) &&
        Objects.equals(this.searchCriteria, tflApiPresentationEntitiesJourneyPlannerItineraryResult.searchCriteria) &&
        Objects.equals(this.stopMessages, tflApiPresentationEntitiesJourneyPlannerItineraryResult.stopMessages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cycleHireDockingStationData, journeyVector, journeys, lines, recommendedMaxAgeMinutes, searchCriteria, stopMessages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TflApiPresentationEntitiesJourneyPlannerItineraryResult {\n");
    sb.append("    cycleHireDockingStationData: ").append(toIndentedString(cycleHireDockingStationData)).append("\n");
    sb.append("    journeyVector: ").append(toIndentedString(journeyVector)).append("\n");
    sb.append("    journeys: ").append(toIndentedString(journeys)).append("\n");
    sb.append("    lines: ").append(toIndentedString(lines)).append("\n");
    sb.append("    recommendedMaxAgeMinutes: ").append(toIndentedString(recommendedMaxAgeMinutes)).append("\n");
    sb.append("    searchCriteria: ").append(toIndentedString(searchCriteria)).append("\n");
    sb.append("    stopMessages: ").append(toIndentedString(stopMessages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cycleHireDockingStationData");
    openapiFields.add("journeyVector");
    openapiFields.add("journeys");
    openapiFields.add("lines");
    openapiFields.add("recommendedMaxAgeMinutes");
    openapiFields.add("searchCriteria");
    openapiFields.add("stopMessages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TflApiPresentationEntitiesJourneyPlannerItineraryResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TflApiPresentationEntitiesJourneyPlannerItineraryResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TflApiPresentationEntitiesJourneyPlannerItineraryResult is not found in the empty JSON string", TflApiPresentationEntitiesJourneyPlannerItineraryResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TflApiPresentationEntitiesJourneyPlannerItineraryResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TflApiPresentationEntitiesJourneyPlannerItineraryResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cycleHireDockingStationData`
      if (jsonObj.get("cycleHireDockingStationData") != null && !jsonObj.get("cycleHireDockingStationData").isJsonNull()) {
        TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData.validateJsonElement(jsonObj.get("cycleHireDockingStationData"));
      }
      // validate the optional field `journeyVector`
      if (jsonObj.get("journeyVector") != null && !jsonObj.get("journeyVector").isJsonNull()) {
        TflApiPresentationEntitiesJourneyPlannerJourneyVector.validateJsonElement(jsonObj.get("journeyVector"));
      }
      if (jsonObj.get("journeys") != null && !jsonObj.get("journeys").isJsonNull()) {
        JsonArray jsonArrayjourneys = jsonObj.getAsJsonArray("journeys");
        if (jsonArrayjourneys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("journeys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `journeys` to be an array in the JSON string but got `%s`", jsonObj.get("journeys").toString()));
          }

          // validate the optional field `journeys` (array)
          for (int i = 0; i < jsonArrayjourneys.size(); i++) {
            TflApiPresentationEntitiesJourneyPlannerJourney.validateJsonElement(jsonArrayjourneys.get(i));
          };
        }
      }
      if (jsonObj.get("lines") != null && !jsonObj.get("lines").isJsonNull()) {
        JsonArray jsonArraylines = jsonObj.getAsJsonArray("lines");
        if (jsonArraylines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lines` to be an array in the JSON string but got `%s`", jsonObj.get("lines").toString()));
          }

          // validate the optional field `lines` (array)
          for (int i = 0; i < jsonArraylines.size(); i++) {
            TflApiPresentationEntitiesLine.validateJsonElement(jsonArraylines.get(i));
          };
        }
      }
      // validate the optional field `searchCriteria`
      if (jsonObj.get("searchCriteria") != null && !jsonObj.get("searchCriteria").isJsonNull()) {
        TflApiPresentationEntitiesJourneyPlannerSearchCriteria.validateJsonElement(jsonObj.get("searchCriteria"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("stopMessages") != null && !jsonObj.get("stopMessages").isJsonNull() && !jsonObj.get("stopMessages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopMessages` to be an array in the JSON string but got `%s`", jsonObj.get("stopMessages").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TflApiPresentationEntitiesJourneyPlannerItineraryResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TflApiPresentationEntitiesJourneyPlannerItineraryResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TflApiPresentationEntitiesJourneyPlannerItineraryResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TflApiPresentationEntitiesJourneyPlannerItineraryResult.class));

       return (TypeAdapter<T>) new TypeAdapter<TflApiPresentationEntitiesJourneyPlannerItineraryResult>() {
           @Override
           public void write(JsonWriter out, TflApiPresentationEntitiesJourneyPlannerItineraryResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TflApiPresentationEntitiesJourneyPlannerItineraryResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TflApiPresentationEntitiesJourneyPlannerItineraryResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TflApiPresentationEntitiesJourneyPlannerItineraryResult
   * @throws IOException if the JSON string is invalid with respect to TflApiPresentationEntitiesJourneyPlannerItineraryResult
   */
  public static TflApiPresentationEntitiesJourneyPlannerItineraryResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TflApiPresentationEntitiesJourneyPlannerItineraryResult.class);
  }

  /**
   * Convert an instance of TflApiPresentationEntitiesJourneyPlannerItineraryResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

