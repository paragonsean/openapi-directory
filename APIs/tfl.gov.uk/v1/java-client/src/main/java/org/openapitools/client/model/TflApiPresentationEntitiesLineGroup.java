/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TflApiPresentationEntitiesLineGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:40.735472-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TflApiPresentationEntitiesLineGroup {
  public static final String SERIALIZED_NAME_LINE_IDENTIFIER = "lineIdentifier";
  @SerializedName(SERIALIZED_NAME_LINE_IDENTIFIER)
  private List<String> lineIdentifier = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAPTAN_ID_REFERENCE = "naptanIdReference";
  @SerializedName(SERIALIZED_NAME_NAPTAN_ID_REFERENCE)
  private String naptanIdReference;

  public static final String SERIALIZED_NAME_STATION_ATCO_CODE = "stationAtcoCode";
  @SerializedName(SERIALIZED_NAME_STATION_ATCO_CODE)
  private String stationAtcoCode;

  public TflApiPresentationEntitiesLineGroup() {
  }

  public TflApiPresentationEntitiesLineGroup lineIdentifier(List<String> lineIdentifier) {
    this.lineIdentifier = lineIdentifier;
    return this;
  }

  public TflApiPresentationEntitiesLineGroup addLineIdentifierItem(String lineIdentifierItem) {
    if (this.lineIdentifier == null) {
      this.lineIdentifier = new ArrayList<>();
    }
    this.lineIdentifier.add(lineIdentifierItem);
    return this;
  }

  /**
   * Get lineIdentifier
   * @return lineIdentifier
   */
  @javax.annotation.Nullable
  public List<String> getLineIdentifier() {
    return lineIdentifier;
  }

  public void setLineIdentifier(List<String> lineIdentifier) {
    this.lineIdentifier = lineIdentifier;
  }


  public TflApiPresentationEntitiesLineGroup naptanIdReference(String naptanIdReference) {
    this.naptanIdReference = naptanIdReference;
    return this;
  }

  /**
   * Get naptanIdReference
   * @return naptanIdReference
   */
  @javax.annotation.Nullable
  public String getNaptanIdReference() {
    return naptanIdReference;
  }

  public void setNaptanIdReference(String naptanIdReference) {
    this.naptanIdReference = naptanIdReference;
  }


  public TflApiPresentationEntitiesLineGroup stationAtcoCode(String stationAtcoCode) {
    this.stationAtcoCode = stationAtcoCode;
    return this;
  }

  /**
   * Get stationAtcoCode
   * @return stationAtcoCode
   */
  @javax.annotation.Nullable
  public String getStationAtcoCode() {
    return stationAtcoCode;
  }

  public void setStationAtcoCode(String stationAtcoCode) {
    this.stationAtcoCode = stationAtcoCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TflApiPresentationEntitiesLineGroup tflApiPresentationEntitiesLineGroup = (TflApiPresentationEntitiesLineGroup) o;
    return Objects.equals(this.lineIdentifier, tflApiPresentationEntitiesLineGroup.lineIdentifier) &&
        Objects.equals(this.naptanIdReference, tflApiPresentationEntitiesLineGroup.naptanIdReference) &&
        Objects.equals(this.stationAtcoCode, tflApiPresentationEntitiesLineGroup.stationAtcoCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lineIdentifier, naptanIdReference, stationAtcoCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TflApiPresentationEntitiesLineGroup {\n");
    sb.append("    lineIdentifier: ").append(toIndentedString(lineIdentifier)).append("\n");
    sb.append("    naptanIdReference: ").append(toIndentedString(naptanIdReference)).append("\n");
    sb.append("    stationAtcoCode: ").append(toIndentedString(stationAtcoCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lineIdentifier");
    openapiFields.add("naptanIdReference");
    openapiFields.add("stationAtcoCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TflApiPresentationEntitiesLineGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TflApiPresentationEntitiesLineGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TflApiPresentationEntitiesLineGroup is not found in the empty JSON string", TflApiPresentationEntitiesLineGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TflApiPresentationEntitiesLineGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TflApiPresentationEntitiesLineGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("lineIdentifier") != null && !jsonObj.get("lineIdentifier").isJsonNull() && !jsonObj.get("lineIdentifier").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineIdentifier` to be an array in the JSON string but got `%s`", jsonObj.get("lineIdentifier").toString()));
      }
      if ((jsonObj.get("naptanIdReference") != null && !jsonObj.get("naptanIdReference").isJsonNull()) && !jsonObj.get("naptanIdReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `naptanIdReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("naptanIdReference").toString()));
      }
      if ((jsonObj.get("stationAtcoCode") != null && !jsonObj.get("stationAtcoCode").isJsonNull()) && !jsonObj.get("stationAtcoCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stationAtcoCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stationAtcoCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TflApiPresentationEntitiesLineGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TflApiPresentationEntitiesLineGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TflApiPresentationEntitiesLineGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TflApiPresentationEntitiesLineGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<TflApiPresentationEntitiesLineGroup>() {
           @Override
           public void write(JsonWriter out, TflApiPresentationEntitiesLineGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TflApiPresentationEntitiesLineGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TflApiPresentationEntitiesLineGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TflApiPresentationEntitiesLineGroup
   * @throws IOException if the JSON string is invalid with respect to TflApiPresentationEntitiesLineGroup
   */
  public static TflApiPresentationEntitiesLineGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TflApiPresentationEntitiesLineGroup.class);
  }

  /**
   * Convert an instance of TflApiPresentationEntitiesLineGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

