/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.TflApiPresentationEntitiesDisruption;
import org.openapitools.client.model.TflApiPresentationEntitiesLine;
import org.openapitools.client.model.TflApiPresentationEntitiesMode;
import org.openapitools.client.model.TflApiPresentationEntitiesPrediction;
import org.openapitools.client.model.TflApiPresentationEntitiesRouteSearchResponse;
import org.openapitools.client.model.TflApiPresentationEntitiesRouteSequence;
import org.openapitools.client.model.TflApiPresentationEntitiesStatusSeverity;
import org.openapitools.client.model.TflApiPresentationEntitiesStopPoint;
import org.openapitools.client.model.TflApiPresentationEntitiesTimetableResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LineApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LineApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LineApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for lineArrivals
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param stopPointId Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param direction Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all (optional)
     * @param destinationStationId Optional. Id of destination stop (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineArrivalsCall(List<String> ids, String stopPointId, String direction, String destinationStationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{ids}/Arrivals/{stopPointId}"
            .replace("{" + "ids" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ids)))
            .replace("{" + "stopPointId" + "}", localVarApiClient.escapeString(stopPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (destinationStationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destinationStationId", destinationStationId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineArrivalsValidateBeforeCall(List<String> ids, String stopPointId, String direction, String destinationStationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling lineArrivals(Async)");
        }

        // verify the required parameter 'stopPointId' is set
        if (stopPointId == null) {
            throw new ApiException("Missing the required parameter 'stopPointId' when calling lineArrivals(Async)");
        }

        return lineArrivalsCall(ids, stopPointId, direction, destinationStationId, _callback);

    }

    /**
     * Get the list of arrival predictions for given line ids based at the given stop
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param stopPointId Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param direction Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all (optional)
     * @param destinationStationId Optional. Id of destination stop (optional)
     * @return List&lt;TflApiPresentationEntitiesPrediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesPrediction> lineArrivals(List<String> ids, String stopPointId, String direction, String destinationStationId) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesPrediction>> localVarResp = lineArrivalsWithHttpInfo(ids, stopPointId, direction, destinationStationId);
        return localVarResp.getData();
    }

    /**
     * Get the list of arrival predictions for given line ids based at the given stop
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param stopPointId Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param direction Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all (optional)
     * @param destinationStationId Optional. Id of destination stop (optional)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesPrediction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesPrediction>> lineArrivalsWithHttpInfo(List<String> ids, String stopPointId, String direction, String destinationStationId) throws ApiException {
        okhttp3.Call localVarCall = lineArrivalsValidateBeforeCall(ids, stopPointId, direction, destinationStationId, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesPrediction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of arrival predictions for given line ids based at the given stop (asynchronously)
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param stopPointId Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param direction Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all (optional)
     * @param destinationStationId Optional. Id of destination stop (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineArrivalsAsync(List<String> ids, String stopPointId, String direction, String destinationStationId, final ApiCallback<List<TflApiPresentationEntitiesPrediction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineArrivalsValidateBeforeCall(ids, stopPointId, direction, destinationStationId, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesPrediction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineDisruption
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineDisruptionCall(List<String> ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{ids}/Disruption"
            .replace("{" + "ids" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineDisruptionValidateBeforeCall(List<String> ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling lineDisruption(Async)");
        }

        return lineDisruptionCall(ids, _callback);

    }

    /**
     * Get disruptions for the given line ids
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @return List&lt;TflApiPresentationEntitiesDisruption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesDisruption> lineDisruption(List<String> ids) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesDisruption>> localVarResp = lineDisruptionWithHttpInfo(ids);
        return localVarResp.getData();
    }

    /**
     * Get disruptions for the given line ids
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesDisruption&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesDisruption>> lineDisruptionWithHttpInfo(List<String> ids) throws ApiException {
        okhttp3.Call localVarCall = lineDisruptionValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesDisruption>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get disruptions for the given line ids (asynchronously)
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineDisruptionAsync(List<String> ids, final ApiCallback<List<TflApiPresentationEntitiesDisruption>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineDisruptionValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesDisruption>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineDisruptionByMode
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineDisruptionByModeCall(List<String> modes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Mode/{modes}/Disruption"
            .replace("{" + "modes" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", modes)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineDisruptionByModeValidateBeforeCall(List<String> modes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modes' is set
        if (modes == null) {
            throw new ApiException("Missing the required parameter 'modes' when calling lineDisruptionByMode(Async)");
        }

        return lineDisruptionByModeCall(modes, _callback);

    }

    /**
     * Get disruptions for all lines of the given modes.
     * 
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @return List&lt;TflApiPresentationEntitiesDisruption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesDisruption> lineDisruptionByMode(List<String> modes) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesDisruption>> localVarResp = lineDisruptionByModeWithHttpInfo(modes);
        return localVarResp.getData();
    }

    /**
     * Get disruptions for all lines of the given modes.
     * 
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesDisruption&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesDisruption>> lineDisruptionByModeWithHttpInfo(List<String> modes) throws ApiException {
        okhttp3.Call localVarCall = lineDisruptionByModeValidateBeforeCall(modes, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesDisruption>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get disruptions for all lines of the given modes. (asynchronously)
     * 
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineDisruptionByModeAsync(List<String> modes, final ApiCallback<List<TflApiPresentationEntitiesDisruption>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineDisruptionByModeValidateBeforeCall(modes, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesDisruption>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineGet
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineGetCall(List<String> ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{ids}"
            .replace("{" + "ids" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineGetValidateBeforeCall(List<String> ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling lineGet(Async)");
        }

        return lineGetCall(ids, _callback);

    }

    /**
     * Gets lines that match the specified line ids.
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @return List&lt;TflApiPresentationEntitiesLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesLine> lineGet(List<String> ids) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResp = lineGetWithHttpInfo(ids);
        return localVarResp.getData();
    }

    /**
     * Gets lines that match the specified line ids.
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesLine&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesLine>> lineGetWithHttpInfo(List<String> ids) throws ApiException {
        okhttp3.Call localVarCall = lineGetValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesLine>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets lines that match the specified line ids. (asynchronously)
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineGetAsync(List<String> ids, final ApiCallback<List<TflApiPresentationEntitiesLine>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineGetValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesLine>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineGetByMode
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineGetByModeCall(List<String> modes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Mode/{modes}"
            .replace("{" + "modes" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", modes)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineGetByModeValidateBeforeCall(List<String> modes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modes' is set
        if (modes == null) {
            throw new ApiException("Missing the required parameter 'modes' when calling lineGetByMode(Async)");
        }

        return lineGetByModeCall(modes, _callback);

    }

    /**
     * Gets lines that serve the given modes.
     * 
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @return List&lt;TflApiPresentationEntitiesLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesLine> lineGetByMode(List<String> modes) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResp = lineGetByModeWithHttpInfo(modes);
        return localVarResp.getData();
    }

    /**
     * Gets lines that serve the given modes.
     * 
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesLine&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesLine>> lineGetByModeWithHttpInfo(List<String> modes) throws ApiException {
        okhttp3.Call localVarCall = lineGetByModeValidateBeforeCall(modes, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesLine>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets lines that serve the given modes. (asynchronously)
     * 
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineGetByModeAsync(List<String> modes, final ApiCallback<List<TflApiPresentationEntitiesLine>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineGetByModeValidateBeforeCall(modes, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesLine>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineLineRoutesByIds
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineLineRoutesByIdsCall(List<String> ids, List<String> serviceTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{ids}/Route"
            .replace("{" + "ids" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (serviceTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "serviceTypes", serviceTypes));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineLineRoutesByIdsValidateBeforeCall(List<String> ids, List<String> serviceTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling lineLineRoutesByIds(Async)");
        }

        return lineLineRoutesByIdsCall(ids, serviceTypes, _callback);

    }

    /**
     * Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return List&lt;TflApiPresentationEntitiesLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesLine> lineLineRoutesByIds(List<String> ids, List<String> serviceTypes) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResp = lineLineRoutesByIdsWithHttpInfo(ids, serviceTypes);
        return localVarResp.getData();
    }

    /**
     * Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesLine&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesLine>> lineLineRoutesByIdsWithHttpInfo(List<String> ids, List<String> serviceTypes) throws ApiException {
        okhttp3.Call localVarCall = lineLineRoutesByIdsValidateBeforeCall(ids, serviceTypes, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesLine>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route. (asynchronously)
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineLineRoutesByIdsAsync(List<String> ids, List<String> serviceTypes, final ApiCallback<List<TflApiPresentationEntitiesLine>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineLineRoutesByIdsValidateBeforeCall(ids, serviceTypes, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesLine>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineMetaDisruptionCategories
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineMetaDisruptionCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Meta/DisruptionCategories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineMetaDisruptionCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return lineMetaDisruptionCategoriesCall(_callback);

    }

    /**
     * Gets a list of valid disruption categories
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<String> lineMetaDisruptionCategories() throws ApiException {
        ApiResponse<List<String>> localVarResp = lineMetaDisruptionCategoriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets a list of valid disruption categories
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> lineMetaDisruptionCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = lineMetaDisruptionCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of valid disruption categories (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineMetaDisruptionCategoriesAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineMetaDisruptionCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineMetaModes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineMetaModesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Meta/Modes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineMetaModesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return lineMetaModesCall(_callback);

    }

    /**
     * Gets a list of valid modes
     * 
     * @return List&lt;TflApiPresentationEntitiesMode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesMode> lineMetaModes() throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesMode>> localVarResp = lineMetaModesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets a list of valid modes
     * 
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesMode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesMode>> lineMetaModesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = lineMetaModesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesMode>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of valid modes (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineMetaModesAsync(final ApiCallback<List<TflApiPresentationEntitiesMode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineMetaModesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesMode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineMetaServiceTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineMetaServiceTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Meta/ServiceTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineMetaServiceTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return lineMetaServiceTypesCall(_callback);

    }

    /**
     * Gets a list of valid ServiceTypes to filter on
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<String> lineMetaServiceTypes() throws ApiException {
        ApiResponse<List<String>> localVarResp = lineMetaServiceTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets a list of valid ServiceTypes to filter on
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> lineMetaServiceTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = lineMetaServiceTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of valid ServiceTypes to filter on (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineMetaServiceTypesAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineMetaServiceTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineMetaSeverity
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineMetaSeverityCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Meta/Severity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineMetaSeverityValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return lineMetaSeverityCall(_callback);

    }

    /**
     * Gets a list of valid severity codes
     * 
     * @return List&lt;TflApiPresentationEntitiesStatusSeverity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesStatusSeverity> lineMetaSeverity() throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>> localVarResp = lineMetaSeverityWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets a list of valid severity codes
     * 
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesStatusSeverity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>> lineMetaSeverityWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = lineMetaSeverityValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesStatusSeverity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of valid severity codes (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineMetaSeverityAsync(final ApiCallback<List<TflApiPresentationEntitiesStatusSeverity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineMetaSeverityValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesStatusSeverity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineRoute
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineRouteCall(List<String> serviceTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Route";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (serviceTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "serviceTypes", serviceTypes));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineRouteValidateBeforeCall(List<String> serviceTypes, final ApiCallback _callback) throws ApiException {
        return lineRouteCall(serviceTypes, _callback);

    }

    /**
     * Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
     * 
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return List&lt;TflApiPresentationEntitiesLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesLine> lineRoute(List<String> serviceTypes) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResp = lineRouteWithHttpInfo(serviceTypes);
        return localVarResp.getData();
    }

    /**
     * Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
     * 
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesLine&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesLine>> lineRouteWithHttpInfo(List<String> serviceTypes) throws ApiException {
        okhttp3.Call localVarCall = lineRouteValidateBeforeCall(serviceTypes, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesLine>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route. (asynchronously)
     * 
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineRouteAsync(List<String> serviceTypes, final ApiCallback<List<TflApiPresentationEntitiesLine>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineRouteValidateBeforeCall(serviceTypes, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesLine>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineRouteByMode
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineRouteByModeCall(List<String> modes, List<String> serviceTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Mode/{modes}/Route"
            .replace("{" + "modes" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", modes)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (serviceTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "serviceTypes", serviceTypes));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineRouteByModeValidateBeforeCall(List<String> modes, List<String> serviceTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modes' is set
        if (modes == null) {
            throw new ApiException("Missing the required parameter 'modes' when calling lineRouteByMode(Async)");
        }

        return lineRouteByModeCall(modes, serviceTypes, _callback);

    }

    /**
     * Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
     * 
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return List&lt;TflApiPresentationEntitiesLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesLine> lineRouteByMode(List<String> modes, List<String> serviceTypes) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResp = lineRouteByModeWithHttpInfo(modes, serviceTypes);
        return localVarResp.getData();
    }

    /**
     * Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
     * 
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesLine&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesLine>> lineRouteByModeWithHttpInfo(List<String> modes, List<String> serviceTypes) throws ApiException {
        okhttp3.Call localVarCall = lineRouteByModeValidateBeforeCall(modes, serviceTypes, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesLine>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route (asynchronously)
     * 
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineRouteByModeAsync(List<String> modes, List<String> serviceTypes, final ApiCallback<List<TflApiPresentationEntitiesLine>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineRouteByModeValidateBeforeCall(modes, serviceTypes, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesLine>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineRouteSequence
     * @param id A single line id e.g. victoria (required)
     * @param direction The direction of travel. Can be inbound or outbound. (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param excludeCrowding That excludes crowding from line disruptions. Can be true or false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineRouteSequenceCall(String id, String direction, List<String> serviceTypes, Boolean excludeCrowding, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{id}/Route/Sequence/{direction}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "direction" + "}", localVarApiClient.escapeString(direction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (serviceTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "serviceTypes", serviceTypes));
        }

        if (excludeCrowding != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeCrowding", excludeCrowding));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineRouteSequenceValidateBeforeCall(String id, String direction, List<String> serviceTypes, Boolean excludeCrowding, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lineRouteSequence(Async)");
        }

        // verify the required parameter 'direction' is set
        if (direction == null) {
            throw new ApiException("Missing the required parameter 'direction' when calling lineRouteSequence(Async)");
        }

        return lineRouteSequenceCall(id, direction, serviceTypes, excludeCrowding, _callback);

    }

    /**
     * Gets all valid routes for given line id, including the sequence of stops on each route.
     * 
     * @param id A single line id e.g. victoria (required)
     * @param direction The direction of travel. Can be inbound or outbound. (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param excludeCrowding That excludes crowding from line disruptions. Can be true or false. (optional)
     * @return TflApiPresentationEntitiesRouteSequence
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TflApiPresentationEntitiesRouteSequence lineRouteSequence(String id, String direction, List<String> serviceTypes, Boolean excludeCrowding) throws ApiException {
        ApiResponse<TflApiPresentationEntitiesRouteSequence> localVarResp = lineRouteSequenceWithHttpInfo(id, direction, serviceTypes, excludeCrowding);
        return localVarResp.getData();
    }

    /**
     * Gets all valid routes for given line id, including the sequence of stops on each route.
     * 
     * @param id A single line id e.g. victoria (required)
     * @param direction The direction of travel. Can be inbound or outbound. (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param excludeCrowding That excludes crowding from line disruptions. Can be true or false. (optional)
     * @return ApiResponse&lt;TflApiPresentationEntitiesRouteSequence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TflApiPresentationEntitiesRouteSequence> lineRouteSequenceWithHttpInfo(String id, String direction, List<String> serviceTypes, Boolean excludeCrowding) throws ApiException {
        okhttp3.Call localVarCall = lineRouteSequenceValidateBeforeCall(id, direction, serviceTypes, excludeCrowding, null);
        Type localVarReturnType = new TypeToken<TflApiPresentationEntitiesRouteSequence>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all valid routes for given line id, including the sequence of stops on each route. (asynchronously)
     * 
     * @param id A single line id e.g. victoria (required)
     * @param direction The direction of travel. Can be inbound or outbound. (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param excludeCrowding That excludes crowding from line disruptions. Can be true or false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineRouteSequenceAsync(String id, String direction, List<String> serviceTypes, Boolean excludeCrowding, final ApiCallback<TflApiPresentationEntitiesRouteSequence> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineRouteSequenceValidateBeforeCall(id, direction, serviceTypes, excludeCrowding, _callback);
        Type localVarReturnType = new TypeToken<TflApiPresentationEntitiesRouteSequence>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineSearch
     * @param query Search term e.g victoria (required)
     * @param modes Optionally filter by the specified modes (optional)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineSearchCall(String query, List<String> modes, List<String> serviceTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Search/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "modes", modes));
        }

        if (serviceTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "serviceTypes", serviceTypes));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineSearchValidateBeforeCall(String query, List<String> modes, List<String> serviceTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling lineSearch(Async)");
        }

        return lineSearchCall(query, modes, serviceTypes, _callback);

    }

    /**
     * Search for lines or routes matching the query string
     * 
     * @param query Search term e.g victoria (required)
     * @param modes Optionally filter by the specified modes (optional)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return TflApiPresentationEntitiesRouteSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TflApiPresentationEntitiesRouteSearchResponse lineSearch(String query, List<String> modes, List<String> serviceTypes) throws ApiException {
        ApiResponse<TflApiPresentationEntitiesRouteSearchResponse> localVarResp = lineSearchWithHttpInfo(query, modes, serviceTypes);
        return localVarResp.getData();
    }

    /**
     * Search for lines or routes matching the query string
     * 
     * @param query Search term e.g victoria (required)
     * @param modes Optionally filter by the specified modes (optional)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return ApiResponse&lt;TflApiPresentationEntitiesRouteSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TflApiPresentationEntitiesRouteSearchResponse> lineSearchWithHttpInfo(String query, List<String> modes, List<String> serviceTypes) throws ApiException {
        okhttp3.Call localVarCall = lineSearchValidateBeforeCall(query, modes, serviceTypes, null);
        Type localVarReturnType = new TypeToken<TflApiPresentationEntitiesRouteSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for lines or routes matching the query string (asynchronously)
     * 
     * @param query Search term e.g victoria (required)
     * @param modes Optionally filter by the specified modes (optional)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineSearchAsync(String query, List<String> modes, List<String> serviceTypes, final ApiCallback<TflApiPresentationEntitiesRouteSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineSearchValidateBeforeCall(query, modes, serviceTypes, _callback);
        Type localVarReturnType = new TypeToken<TflApiPresentationEntitiesRouteSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineStatus
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @param startDate2 Automatically added (required)
     * @param endDate2 Automatically added (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param dateRangeStartDate  (optional)
     * @param dateRangeEndDate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineStatusCall(List<String> ids, String startDate, String endDate, String startDate2, String endDate2, Boolean detail, OffsetDateTime dateRangeStartDate, OffsetDateTime dateRangeEndDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{ids}/Status/{StartDate}/to/{EndDate}"
            .replace("{" + "ids" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ids)))
            .replace("{" + "StartDate" + "}", localVarApiClient.escapeString(startDate2.toString()))
            .replace("{" + "EndDate" + "}", localVarApiClient.escapeString(endDate2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (detail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detail", detail));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (dateRangeStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateRange.startDate", dateRangeStartDate));
        }

        if (dateRangeEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateRange.endDate", dateRangeEndDate));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineStatusValidateBeforeCall(List<String> ids, String startDate, String endDate, String startDate2, String endDate2, Boolean detail, OffsetDateTime dateRangeStartDate, OffsetDateTime dateRangeEndDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling lineStatus(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling lineStatus(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling lineStatus(Async)");
        }

        // verify the required parameter 'startDate2' is set
        if (startDate2 == null) {
            throw new ApiException("Missing the required parameter 'startDate2' when calling lineStatus(Async)");
        }

        // verify the required parameter 'endDate2' is set
        if (endDate2 == null) {
            throw new ApiException("Missing the required parameter 'endDate2' when calling lineStatus(Async)");
        }

        return lineStatusCall(ids, startDate, endDate, startDate2, endDate2, detail, dateRangeStartDate, dateRangeEndDate, _callback);

    }

    /**
     * Gets the line status for given line ids during the provided dates e.g Minor Delays
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @param startDate2 Automatically added (required)
     * @param endDate2 Automatically added (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param dateRangeStartDate  (optional)
     * @param dateRangeEndDate  (optional)
     * @return List&lt;TflApiPresentationEntitiesLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesLine> lineStatus(List<String> ids, String startDate, String endDate, String startDate2, String endDate2, Boolean detail, OffsetDateTime dateRangeStartDate, OffsetDateTime dateRangeEndDate) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResp = lineStatusWithHttpInfo(ids, startDate, endDate, startDate2, endDate2, detail, dateRangeStartDate, dateRangeEndDate);
        return localVarResp.getData();
    }

    /**
     * Gets the line status for given line ids during the provided dates e.g Minor Delays
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @param startDate2 Automatically added (required)
     * @param endDate2 Automatically added (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param dateRangeStartDate  (optional)
     * @param dateRangeEndDate  (optional)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesLine&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesLine>> lineStatusWithHttpInfo(List<String> ids, String startDate, String endDate, String startDate2, String endDate2, Boolean detail, OffsetDateTime dateRangeStartDate, OffsetDateTime dateRangeEndDate) throws ApiException {
        okhttp3.Call localVarCall = lineStatusValidateBeforeCall(ids, startDate, endDate, startDate2, endDate2, detail, dateRangeStartDate, dateRangeEndDate, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesLine>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the line status for given line ids during the provided dates e.g Minor Delays (asynchronously)
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @param startDate2 Automatically added (required)
     * @param endDate2 Automatically added (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param dateRangeStartDate  (optional)
     * @param dateRangeEndDate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineStatusAsync(List<String> ids, String startDate, String endDate, String startDate2, String endDate2, Boolean detail, OffsetDateTime dateRangeStartDate, OffsetDateTime dateRangeEndDate, final ApiCallback<List<TflApiPresentationEntitiesLine>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineStatusValidateBeforeCall(ids, startDate, endDate, startDate2, endDate2, detail, dateRangeStartDate, dateRangeEndDate, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesLine>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineStatusByIds
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineStatusByIdsCall(List<String> ids, Boolean detail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{ids}/Status"
            .replace("{" + "ids" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (detail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detail", detail));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineStatusByIdsValidateBeforeCall(List<String> ids, Boolean detail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling lineStatusByIds(Async)");
        }

        return lineStatusByIdsCall(ids, detail, _callback);

    }

    /**
     * Gets the line status of for given line ids e.g Minor Delays
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @return List&lt;TflApiPresentationEntitiesLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesLine> lineStatusByIds(List<String> ids, Boolean detail) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResp = lineStatusByIdsWithHttpInfo(ids, detail);
        return localVarResp.getData();
    }

    /**
     * Gets the line status of for given line ids e.g Minor Delays
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesLine&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesLine>> lineStatusByIdsWithHttpInfo(List<String> ids, Boolean detail) throws ApiException {
        okhttp3.Call localVarCall = lineStatusByIdsValidateBeforeCall(ids, detail, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesLine>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the line status of for given line ids e.g Minor Delays (asynchronously)
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineStatusByIdsAsync(List<String> ids, Boolean detail, final ApiCallback<List<TflApiPresentationEntitiesLine>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineStatusByIdsValidateBeforeCall(ids, detail, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesLine>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineStatusByMode
     * @param modes A comma-separated list of modes to filter by. e.g. tube,dlr (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param severityLevel If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineStatusByModeCall(List<String> modes, Boolean detail, String severityLevel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Mode/{modes}/Status"
            .replace("{" + "modes" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", modes)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (detail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detail", detail));
        }

        if (severityLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("severityLevel", severityLevel));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineStatusByModeValidateBeforeCall(List<String> modes, Boolean detail, String severityLevel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modes' is set
        if (modes == null) {
            throw new ApiException("Missing the required parameter 'modes' when calling lineStatusByMode(Async)");
        }

        return lineStatusByModeCall(modes, detail, severityLevel, _callback);

    }

    /**
     * Gets the line status of for all lines for the given modes
     * 
     * @param modes A comma-separated list of modes to filter by. e.g. tube,dlr (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param severityLevel If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level. (optional)
     * @return List&lt;TflApiPresentationEntitiesLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesLine> lineStatusByMode(List<String> modes, Boolean detail, String severityLevel) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResp = lineStatusByModeWithHttpInfo(modes, detail, severityLevel);
        return localVarResp.getData();
    }

    /**
     * Gets the line status of for all lines for the given modes
     * 
     * @param modes A comma-separated list of modes to filter by. e.g. tube,dlr (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param severityLevel If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level. (optional)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesLine&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesLine>> lineStatusByModeWithHttpInfo(List<String> modes, Boolean detail, String severityLevel) throws ApiException {
        okhttp3.Call localVarCall = lineStatusByModeValidateBeforeCall(modes, detail, severityLevel, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesLine>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the line status of for all lines for the given modes (asynchronously)
     * 
     * @param modes A comma-separated list of modes to filter by. e.g. tube,dlr (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param severityLevel If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineStatusByModeAsync(List<String> modes, Boolean detail, String severityLevel, final ApiCallback<List<TflApiPresentationEntitiesLine>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineStatusByModeValidateBeforeCall(modes, detail, severityLevel, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesLine>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineStatusBySeverity
     * @param severity The level of severity (eg: a number from 0 to 14) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineStatusBySeverityCall(Integer severity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Status/{severity}"
            .replace("{" + "severity" + "}", localVarApiClient.escapeString(severity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineStatusBySeverityValidateBeforeCall(Integer severity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'severity' is set
        if (severity == null) {
            throw new ApiException("Missing the required parameter 'severity' when calling lineStatusBySeverity(Async)");
        }

        return lineStatusBySeverityCall(severity, _callback);

    }

    /**
     * Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity
     * 
     * @param severity The level of severity (eg: a number from 0 to 14) (required)
     * @return List&lt;TflApiPresentationEntitiesLine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesLine> lineStatusBySeverity(Integer severity) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesLine>> localVarResp = lineStatusBySeverityWithHttpInfo(severity);
        return localVarResp.getData();
    }

    /**
     * Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity
     * 
     * @param severity The level of severity (eg: a number from 0 to 14) (required)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesLine&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesLine>> lineStatusBySeverityWithHttpInfo(Integer severity) throws ApiException {
        okhttp3.Call localVarCall = lineStatusBySeverityValidateBeforeCall(severity, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesLine>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity (asynchronously)
     * 
     * @param severity The level of severity (eg: a number from 0 to 14) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineStatusBySeverityAsync(Integer severity, final ApiCallback<List<TflApiPresentationEntitiesLine>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineStatusBySeverityValidateBeforeCall(severity, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesLine>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineStopPoints
     * @param id A single line id e.g. victoria (required)
     * @param tflOperatedNationalRailStationsOnly If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineStopPointsCall(String id, Boolean tflOperatedNationalRailStationsOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{id}/StopPoints"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tflOperatedNationalRailStationsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tflOperatedNationalRailStationsOnly", tflOperatedNationalRailStationsOnly));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineStopPointsValidateBeforeCall(String id, Boolean tflOperatedNationalRailStationsOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lineStopPoints(Async)");
        }

        return lineStopPointsCall(id, tflOperatedNationalRailStationsOnly, _callback);

    }

    /**
     * Gets a list of the stations that serve the given line id
     * 
     * @param id A single line id e.g. victoria (required)
     * @param tflOperatedNationalRailStationsOnly If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)
     * @return List&lt;TflApiPresentationEntitiesStopPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesStopPoint> lineStopPoints(String id, Boolean tflOperatedNationalRailStationsOnly) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesStopPoint>> localVarResp = lineStopPointsWithHttpInfo(id, tflOperatedNationalRailStationsOnly);
        return localVarResp.getData();
    }

    /**
     * Gets a list of the stations that serve the given line id
     * 
     * @param id A single line id e.g. victoria (required)
     * @param tflOperatedNationalRailStationsOnly If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesStopPoint&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesStopPoint>> lineStopPointsWithHttpInfo(String id, Boolean tflOperatedNationalRailStationsOnly) throws ApiException {
        okhttp3.Call localVarCall = lineStopPointsValidateBeforeCall(id, tflOperatedNationalRailStationsOnly, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesStopPoint>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of the stations that serve the given line id (asynchronously)
     * 
     * @param id A single line id e.g. victoria (required)
     * @param tflOperatedNationalRailStationsOnly If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineStopPointsAsync(String id, Boolean tflOperatedNationalRailStationsOnly, final ApiCallback<List<TflApiPresentationEntitiesStopPoint>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineStopPointsValidateBeforeCall(id, tflOperatedNationalRailStationsOnly, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesStopPoint>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineTimetable
     * @param fromStopPointId The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param id A single line id e.g. victoria (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineTimetableCall(String fromStopPointId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{id}/Timetable/{fromStopPointId}"
            .replace("{" + "fromStopPointId" + "}", localVarApiClient.escapeString(fromStopPointId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineTimetableValidateBeforeCall(String fromStopPointId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fromStopPointId' is set
        if (fromStopPointId == null) {
            throw new ApiException("Missing the required parameter 'fromStopPointId' when calling lineTimetable(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lineTimetable(Async)");
        }

        return lineTimetableCall(fromStopPointId, id, _callback);

    }

    /**
     * Gets the timetable for a specified station on the give line
     * 
     * @param fromStopPointId The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param id A single line id e.g. victoria (required)
     * @return TflApiPresentationEntitiesTimetableResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TflApiPresentationEntitiesTimetableResponse lineTimetable(String fromStopPointId, String id) throws ApiException {
        ApiResponse<TflApiPresentationEntitiesTimetableResponse> localVarResp = lineTimetableWithHttpInfo(fromStopPointId, id);
        return localVarResp.getData();
    }

    /**
     * Gets the timetable for a specified station on the give line
     * 
     * @param fromStopPointId The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param id A single line id e.g. victoria (required)
     * @return ApiResponse&lt;TflApiPresentationEntitiesTimetableResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TflApiPresentationEntitiesTimetableResponse> lineTimetableWithHttpInfo(String fromStopPointId, String id) throws ApiException {
        okhttp3.Call localVarCall = lineTimetableValidateBeforeCall(fromStopPointId, id, null);
        Type localVarReturnType = new TypeToken<TflApiPresentationEntitiesTimetableResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the timetable for a specified station on the give line (asynchronously)
     * 
     * @param fromStopPointId The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param id A single line id e.g. victoria (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineTimetableAsync(String fromStopPointId, String id, final ApiCallback<TflApiPresentationEntitiesTimetableResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineTimetableValidateBeforeCall(fromStopPointId, id, _callback);
        Type localVarReturnType = new TypeToken<TflApiPresentationEntitiesTimetableResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineTimetableTo
     * @param fromStopPointId The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param id A single line id e.g. victoria (required)
     * @param toStopPointId The destination stations&#39;s Naptan code (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineTimetableToCall(String fromStopPointId, String id, String toStopPointId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}"
            .replace("{" + "fromStopPointId" + "}", localVarApiClient.escapeString(fromStopPointId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "toStopPointId" + "}", localVarApiClient.escapeString(toStopPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineTimetableToValidateBeforeCall(String fromStopPointId, String id, String toStopPointId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fromStopPointId' is set
        if (fromStopPointId == null) {
            throw new ApiException("Missing the required parameter 'fromStopPointId' when calling lineTimetableTo(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lineTimetableTo(Async)");
        }

        // verify the required parameter 'toStopPointId' is set
        if (toStopPointId == null) {
            throw new ApiException("Missing the required parameter 'toStopPointId' when calling lineTimetableTo(Async)");
        }

        return lineTimetableToCall(fromStopPointId, id, toStopPointId, _callback);

    }

    /**
     * Gets the timetable for a specified station on the give line with specified destination
     * 
     * @param fromStopPointId The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param id A single line id e.g. victoria (required)
     * @param toStopPointId The destination stations&#39;s Naptan code (required)
     * @return TflApiPresentationEntitiesTimetableResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TflApiPresentationEntitiesTimetableResponse lineTimetableTo(String fromStopPointId, String id, String toStopPointId) throws ApiException {
        ApiResponse<TflApiPresentationEntitiesTimetableResponse> localVarResp = lineTimetableToWithHttpInfo(fromStopPointId, id, toStopPointId);
        return localVarResp.getData();
    }

    /**
     * Gets the timetable for a specified station on the give line with specified destination
     * 
     * @param fromStopPointId The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param id A single line id e.g. victoria (required)
     * @param toStopPointId The destination stations&#39;s Naptan code (required)
     * @return ApiResponse&lt;TflApiPresentationEntitiesTimetableResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TflApiPresentationEntitiesTimetableResponse> lineTimetableToWithHttpInfo(String fromStopPointId, String id, String toStopPointId) throws ApiException {
        okhttp3.Call localVarCall = lineTimetableToValidateBeforeCall(fromStopPointId, id, toStopPointId, null);
        Type localVarReturnType = new TypeToken<TflApiPresentationEntitiesTimetableResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the timetable for a specified station on the give line with specified destination (asynchronously)
     * 
     * @param fromStopPointId The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param id A single line id e.g. victoria (required)
     * @param toStopPointId The destination stations&#39;s Naptan code (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineTimetableToAsync(String fromStopPointId, String id, String toStopPointId, final ApiCallback<TflApiPresentationEntitiesTimetableResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineTimetableToValidateBeforeCall(fromStopPointId, id, toStopPointId, _callback);
        Type localVarReturnType = new TypeToken<TflApiPresentationEntitiesTimetableResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
