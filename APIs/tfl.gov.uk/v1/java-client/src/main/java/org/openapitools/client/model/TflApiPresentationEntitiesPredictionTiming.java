/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TflApiPresentationEntitiesPredictionTiming
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:40.735472-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TflApiPresentationEntitiesPredictionTiming {
  public static final String SERIALIZED_NAME_COUNTDOWN_SERVER_ADJUSTMENT = "countdownServerAdjustment";
  @SerializedName(SERIALIZED_NAME_COUNTDOWN_SERVER_ADJUSTMENT)
  private String countdownServerAdjustment;

  public static final String SERIALIZED_NAME_INSERT = "insert";
  @SerializedName(SERIALIZED_NAME_INSERT)
  private OffsetDateTime insert;

  public static final String SERIALIZED_NAME_READ = "read";
  @SerializedName(SERIALIZED_NAME_READ)
  private OffsetDateTime read;

  public static final String SERIALIZED_NAME_RECEIVED = "received";
  @SerializedName(SERIALIZED_NAME_RECEIVED)
  private OffsetDateTime received;

  public static final String SERIALIZED_NAME_SENT = "sent";
  @SerializedName(SERIALIZED_NAME_SENT)
  private OffsetDateTime sent;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private OffsetDateTime source;

  public TflApiPresentationEntitiesPredictionTiming() {
  }

  public TflApiPresentationEntitiesPredictionTiming countdownServerAdjustment(String countdownServerAdjustment) {
    this.countdownServerAdjustment = countdownServerAdjustment;
    return this;
  }

  /**
   * Get countdownServerAdjustment
   * @return countdownServerAdjustment
   */
  @javax.annotation.Nullable
  public String getCountdownServerAdjustment() {
    return countdownServerAdjustment;
  }

  public void setCountdownServerAdjustment(String countdownServerAdjustment) {
    this.countdownServerAdjustment = countdownServerAdjustment;
  }


  public TflApiPresentationEntitiesPredictionTiming insert(OffsetDateTime insert) {
    this.insert = insert;
    return this;
  }

  /**
   * Get insert
   * @return insert
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInsert() {
    return insert;
  }

  public void setInsert(OffsetDateTime insert) {
    this.insert = insert;
  }


  public TflApiPresentationEntitiesPredictionTiming read(OffsetDateTime read) {
    this.read = read;
    return this;
  }

  /**
   * Get read
   * @return read
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRead() {
    return read;
  }

  public void setRead(OffsetDateTime read) {
    this.read = read;
  }


  public TflApiPresentationEntitiesPredictionTiming received(OffsetDateTime received) {
    this.received = received;
    return this;
  }

  /**
   * Get received
   * @return received
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReceived() {
    return received;
  }

  public void setReceived(OffsetDateTime received) {
    this.received = received;
  }


  public TflApiPresentationEntitiesPredictionTiming sent(OffsetDateTime sent) {
    this.sent = sent;
    return this;
  }

  /**
   * Get sent
   * @return sent
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSent() {
    return sent;
  }

  public void setSent(OffsetDateTime sent) {
    this.sent = sent;
  }


  public TflApiPresentationEntitiesPredictionTiming source(OffsetDateTime source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSource() {
    return source;
  }

  public void setSource(OffsetDateTime source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TflApiPresentationEntitiesPredictionTiming tflApiPresentationEntitiesPredictionTiming = (TflApiPresentationEntitiesPredictionTiming) o;
    return Objects.equals(this.countdownServerAdjustment, tflApiPresentationEntitiesPredictionTiming.countdownServerAdjustment) &&
        Objects.equals(this.insert, tflApiPresentationEntitiesPredictionTiming.insert) &&
        Objects.equals(this.read, tflApiPresentationEntitiesPredictionTiming.read) &&
        Objects.equals(this.received, tflApiPresentationEntitiesPredictionTiming.received) &&
        Objects.equals(this.sent, tflApiPresentationEntitiesPredictionTiming.sent) &&
        Objects.equals(this.source, tflApiPresentationEntitiesPredictionTiming.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countdownServerAdjustment, insert, read, received, sent, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TflApiPresentationEntitiesPredictionTiming {\n");
    sb.append("    countdownServerAdjustment: ").append(toIndentedString(countdownServerAdjustment)).append("\n");
    sb.append("    insert: ").append(toIndentedString(insert)).append("\n");
    sb.append("    read: ").append(toIndentedString(read)).append("\n");
    sb.append("    received: ").append(toIndentedString(received)).append("\n");
    sb.append("    sent: ").append(toIndentedString(sent)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countdownServerAdjustment");
    openapiFields.add("insert");
    openapiFields.add("read");
    openapiFields.add("received");
    openapiFields.add("sent");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TflApiPresentationEntitiesPredictionTiming
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TflApiPresentationEntitiesPredictionTiming.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TflApiPresentationEntitiesPredictionTiming is not found in the empty JSON string", TflApiPresentationEntitiesPredictionTiming.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TflApiPresentationEntitiesPredictionTiming.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TflApiPresentationEntitiesPredictionTiming` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("countdownServerAdjustment") != null && !jsonObj.get("countdownServerAdjustment").isJsonNull()) && !jsonObj.get("countdownServerAdjustment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countdownServerAdjustment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countdownServerAdjustment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TflApiPresentationEntitiesPredictionTiming.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TflApiPresentationEntitiesPredictionTiming' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TflApiPresentationEntitiesPredictionTiming> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TflApiPresentationEntitiesPredictionTiming.class));

       return (TypeAdapter<T>) new TypeAdapter<TflApiPresentationEntitiesPredictionTiming>() {
           @Override
           public void write(JsonWriter out, TflApiPresentationEntitiesPredictionTiming value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TflApiPresentationEntitiesPredictionTiming read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TflApiPresentationEntitiesPredictionTiming given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TflApiPresentationEntitiesPredictionTiming
   * @throws IOException if the JSON string is invalid with respect to TflApiPresentationEntitiesPredictionTiming
   */
  public static TflApiPresentationEntitiesPredictionTiming fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TflApiPresentationEntitiesPredictionTiming.class);
  }

  /**
   * Convert an instance of TflApiPresentationEntitiesPredictionTiming to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

