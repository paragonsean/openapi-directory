/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TflApiPresentationEntitiesAdditionalProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TflApiPresentationEntitiesPlace
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:40.735472-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TflApiPresentationEntitiesPlace {
  public static final String SERIALIZED_NAME_ADDITIONAL_PROPERTIES = "additionalProperties";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PROPERTIES)
  private List<TflApiPresentationEntitiesAdditionalProperties> additionalProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private List<TflApiPresentationEntitiesPlace> children = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHILDREN_URLS = "childrenUrls";
  @SerializedName(SERIALIZED_NAME_CHILDREN_URLS)
  private List<String> childrenUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMON_NAME = "commonName";
  @SerializedName(SERIALIZED_NAME_COMMON_NAME)
  private String commonName;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Double distance;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private Double lat;

  public static final String SERIALIZED_NAME_LON = "lon";
  @SerializedName(SERIALIZED_NAME_LON)
  private Double lon;

  public static final String SERIALIZED_NAME_PLACE_TYPE = "placeType";
  @SerializedName(SERIALIZED_NAME_PLACE_TYPE)
  private String placeType;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public TflApiPresentationEntitiesPlace() {
  }

  public TflApiPresentationEntitiesPlace additionalProperties(List<TflApiPresentationEntitiesAdditionalProperties> additionalProperties) {
    this.additionalProperties = additionalProperties;
    return this;
  }

  public TflApiPresentationEntitiesPlace addAdditionalPropertiesItem(TflApiPresentationEntitiesAdditionalProperties additionalPropertiesItem) {
    if (this.additionalProperties == null) {
      this.additionalProperties = new ArrayList<>();
    }
    this.additionalProperties.add(additionalPropertiesItem);
    return this;
  }

  /**
   * A bag of additional key/value pairs with extra information about this place.
   * @return additionalProperties
   */
  @javax.annotation.Nullable
  public List<TflApiPresentationEntitiesAdditionalProperties> getAdditionalProperties() {
    return additionalProperties;
  }

  public void setAdditionalProperties(List<TflApiPresentationEntitiesAdditionalProperties> additionalProperties) {
    this.additionalProperties = additionalProperties;
  }


  public TflApiPresentationEntitiesPlace children(List<TflApiPresentationEntitiesPlace> children) {
    this.children = children;
    return this;
  }

  public TflApiPresentationEntitiesPlace addChildrenItem(TflApiPresentationEntitiesPlace childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<>();
    }
    this.children.add(childrenItem);
    return this;
  }

  /**
   * Get children
   * @return children
   */
  @javax.annotation.Nullable
  public List<TflApiPresentationEntitiesPlace> getChildren() {
    return children;
  }

  public void setChildren(List<TflApiPresentationEntitiesPlace> children) {
    this.children = children;
  }


  public TflApiPresentationEntitiesPlace childrenUrls(List<String> childrenUrls) {
    this.childrenUrls = childrenUrls;
    return this;
  }

  public TflApiPresentationEntitiesPlace addChildrenUrlsItem(String childrenUrlsItem) {
    if (this.childrenUrls == null) {
      this.childrenUrls = new ArrayList<>();
    }
    this.childrenUrls.add(childrenUrlsItem);
    return this;
  }

  /**
   * Get childrenUrls
   * @return childrenUrls
   */
  @javax.annotation.Nullable
  public List<String> getChildrenUrls() {
    return childrenUrls;
  }

  public void setChildrenUrls(List<String> childrenUrls) {
    this.childrenUrls = childrenUrls;
  }


  public TflApiPresentationEntitiesPlace commonName(String commonName) {
    this.commonName = commonName;
    return this;
  }

  /**
   * A human readable name.
   * @return commonName
   */
  @javax.annotation.Nullable
  public String getCommonName() {
    return commonName;
  }

  public void setCommonName(String commonName) {
    this.commonName = commonName;
  }


  public TflApiPresentationEntitiesPlace distance(Double distance) {
    this.distance = distance;
    return this;
  }

  /**
   * The distance of the place from its search point, if this is the result              of a geographical search, otherwise zero.
   * @return distance
   */
  @javax.annotation.Nullable
  public Double getDistance() {
    return distance;
  }

  public void setDistance(Double distance) {
    this.distance = distance;
  }


  public TflApiPresentationEntitiesPlace id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A unique identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TflApiPresentationEntitiesPlace lat(Double lat) {
    this.lat = lat;
    return this;
  }

  /**
   * WGS84 latitude of the location.
   * @return lat
   */
  @javax.annotation.Nullable
  public Double getLat() {
    return lat;
  }

  public void setLat(Double lat) {
    this.lat = lat;
  }


  public TflApiPresentationEntitiesPlace lon(Double lon) {
    this.lon = lon;
    return this;
  }

  /**
   * WGS84 longitude of the location.
   * @return lon
   */
  @javax.annotation.Nullable
  public Double getLon() {
    return lon;
  }

  public void setLon(Double lon) {
    this.lon = lon;
  }


  public TflApiPresentationEntitiesPlace placeType(String placeType) {
    this.placeType = placeType;
    return this;
  }

  /**
   * The type of Place. See /Place/Meta/placeTypes for possible values.
   * @return placeType
   */
  @javax.annotation.Nullable
  public String getPlaceType() {
    return placeType;
  }

  public void setPlaceType(String placeType) {
    this.placeType = placeType;
  }


  public TflApiPresentationEntitiesPlace url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The unique location of this resource.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TflApiPresentationEntitiesPlace tflApiPresentationEntitiesPlace = (TflApiPresentationEntitiesPlace) o;
    return Objects.equals(this.additionalProperties, tflApiPresentationEntitiesPlace.additionalProperties) &&
        Objects.equals(this.children, tflApiPresentationEntitiesPlace.children) &&
        Objects.equals(this.childrenUrls, tflApiPresentationEntitiesPlace.childrenUrls) &&
        Objects.equals(this.commonName, tflApiPresentationEntitiesPlace.commonName) &&
        Objects.equals(this.distance, tflApiPresentationEntitiesPlace.distance) &&
        Objects.equals(this.id, tflApiPresentationEntitiesPlace.id) &&
        Objects.equals(this.lat, tflApiPresentationEntitiesPlace.lat) &&
        Objects.equals(this.lon, tflApiPresentationEntitiesPlace.lon) &&
        Objects.equals(this.placeType, tflApiPresentationEntitiesPlace.placeType) &&
        Objects.equals(this.url, tflApiPresentationEntitiesPlace.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalProperties, children, childrenUrls, commonName, distance, id, lat, lon, placeType, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TflApiPresentationEntitiesPlace {\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    childrenUrls: ").append(toIndentedString(childrenUrls)).append("\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    placeType: ").append(toIndentedString(placeType)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalProperties");
    openapiFields.add("children");
    openapiFields.add("childrenUrls");
    openapiFields.add("commonName");
    openapiFields.add("distance");
    openapiFields.add("id");
    openapiFields.add("lat");
    openapiFields.add("lon");
    openapiFields.add("placeType");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TflApiPresentationEntitiesPlace
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TflApiPresentationEntitiesPlace.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TflApiPresentationEntitiesPlace is not found in the empty JSON string", TflApiPresentationEntitiesPlace.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TflApiPresentationEntitiesPlace.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TflApiPresentationEntitiesPlace` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalProperties") != null && !jsonObj.get("additionalProperties").isJsonNull()) {
        JsonArray jsonArrayadditionalProperties = jsonObj.getAsJsonArray("additionalProperties");
        if (jsonArrayadditionalProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalProperties` to be an array in the JSON string but got `%s`", jsonObj.get("additionalProperties").toString()));
          }

          // validate the optional field `additionalProperties` (array)
          for (int i = 0; i < jsonArrayadditionalProperties.size(); i++) {
            TflApiPresentationEntitiesAdditionalProperties.validateJsonElement(jsonArrayadditionalProperties.get(i));
          };
        }
      }
      if (jsonObj.get("children") != null && !jsonObj.get("children").isJsonNull()) {
        JsonArray jsonArraychildren = jsonObj.getAsJsonArray("children");
        if (jsonArraychildren != null) {
          // ensure the json data is an array
          if (!jsonObj.get("children").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `children` to be an array in the JSON string but got `%s`", jsonObj.get("children").toString()));
          }

          // validate the optional field `children` (array)
          for (int i = 0; i < jsonArraychildren.size(); i++) {
            TflApiPresentationEntitiesPlace.validateJsonElement(jsonArraychildren.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("childrenUrls") != null && !jsonObj.get("childrenUrls").isJsonNull() && !jsonObj.get("childrenUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `childrenUrls` to be an array in the JSON string but got `%s`", jsonObj.get("childrenUrls").toString()));
      }
      if ((jsonObj.get("commonName") != null && !jsonObj.get("commonName").isJsonNull()) && !jsonObj.get("commonName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commonName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commonName").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("placeType") != null && !jsonObj.get("placeType").isJsonNull()) && !jsonObj.get("placeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeType").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TflApiPresentationEntitiesPlace.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TflApiPresentationEntitiesPlace' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TflApiPresentationEntitiesPlace> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TflApiPresentationEntitiesPlace.class));

       return (TypeAdapter<T>) new TypeAdapter<TflApiPresentationEntitiesPlace>() {
           @Override
           public void write(JsonWriter out, TflApiPresentationEntitiesPlace value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TflApiPresentationEntitiesPlace read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TflApiPresentationEntitiesPlace given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TflApiPresentationEntitiesPlace
   * @throws IOException if the JSON string is invalid with respect to TflApiPresentationEntitiesPlace
   */
  public static TflApiPresentationEntitiesPlace fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TflApiPresentationEntitiesPlace.class);
  }

  /**
   * Convert an instance of TflApiPresentationEntitiesPlace to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

