/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TflApiPresentationEntitiesMatchedStop;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TflApiPresentationEntitiesStopPointSequence
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:40.735472-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TflApiPresentationEntitiesStopPointSequence {
  public static final String SERIALIZED_NAME_BRANCH_ID = "branchId";
  @SerializedName(SERIALIZED_NAME_BRANCH_ID)
  private Integer branchId;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private String direction;

  public static final String SERIALIZED_NAME_LINE_ID = "lineId";
  @SerializedName(SERIALIZED_NAME_LINE_ID)
  private String lineId;

  public static final String SERIALIZED_NAME_LINE_NAME = "lineName";
  @SerializedName(SERIALIZED_NAME_LINE_NAME)
  private String lineName;

  public static final String SERIALIZED_NAME_NEXT_BRANCH_IDS = "nextBranchIds";
  @SerializedName(SERIALIZED_NAME_NEXT_BRANCH_IDS)
  private List<Integer> nextBranchIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREV_BRANCH_IDS = "prevBranchIds";
  @SerializedName(SERIALIZED_NAME_PREV_BRANCH_IDS)
  private List<Integer> prevBranchIds = new ArrayList<>();

  /**
   * Gets or Sets serviceType
   */
  @JsonAdapter(ServiceTypeEnum.Adapter.class)
  public enum ServiceTypeEnum {
    REGULAR("Regular"),
    
    NIGHT("Night");

    private String value;

    ServiceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceTypeEnum fromValue(String value) {
      for (ServiceTypeEnum b : ServiceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServiceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICE_TYPE = "serviceType";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE)
  private ServiceTypeEnum serviceType;

  public static final String SERIALIZED_NAME_STOP_POINT = "stopPoint";
  @SerializedName(SERIALIZED_NAME_STOP_POINT)
  private List<TflApiPresentationEntitiesMatchedStop> stopPoint = new ArrayList<>();

  public TflApiPresentationEntitiesStopPointSequence() {
  }

  public TflApiPresentationEntitiesStopPointSequence branchId(Integer branchId) {
    this.branchId = branchId;
    return this;
  }

  /**
   * The id of this branch.
   * @return branchId
   */
  @javax.annotation.Nullable
  public Integer getBranchId() {
    return branchId;
  }

  public void setBranchId(Integer branchId) {
    this.branchId = branchId;
  }


  public TflApiPresentationEntitiesStopPointSequence direction(String direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Get direction
   * @return direction
   */
  @javax.annotation.Nullable
  public String getDirection() {
    return direction;
  }

  public void setDirection(String direction) {
    this.direction = direction;
  }


  public TflApiPresentationEntitiesStopPointSequence lineId(String lineId) {
    this.lineId = lineId;
    return this;
  }

  /**
   * Get lineId
   * @return lineId
   */
  @javax.annotation.Nullable
  public String getLineId() {
    return lineId;
  }

  public void setLineId(String lineId) {
    this.lineId = lineId;
  }


  public TflApiPresentationEntitiesStopPointSequence lineName(String lineName) {
    this.lineName = lineName;
    return this;
  }

  /**
   * Get lineName
   * @return lineName
   */
  @javax.annotation.Nullable
  public String getLineName() {
    return lineName;
  }

  public void setLineName(String lineName) {
    this.lineName = lineName;
  }


  public TflApiPresentationEntitiesStopPointSequence nextBranchIds(List<Integer> nextBranchIds) {
    this.nextBranchIds = nextBranchIds;
    return this;
  }

  public TflApiPresentationEntitiesStopPointSequence addNextBranchIdsItem(Integer nextBranchIdsItem) {
    if (this.nextBranchIds == null) {
      this.nextBranchIds = new ArrayList<>();
    }
    this.nextBranchIds.add(nextBranchIdsItem);
    return this;
  }

  /**
   * The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be              identical in the case of a looped route e.g. the Circle line.
   * @return nextBranchIds
   */
  @javax.annotation.Nullable
  public List<Integer> getNextBranchIds() {
    return nextBranchIds;
  }

  public void setNextBranchIds(List<Integer> nextBranchIds) {
    this.nextBranchIds = nextBranchIds;
  }


  public TflApiPresentationEntitiesStopPointSequence prevBranchIds(List<Integer> prevBranchIds) {
    this.prevBranchIds = prevBranchIds;
    return this;
  }

  public TflApiPresentationEntitiesStopPointSequence addPrevBranchIdsItem(Integer prevBranchIdsItem) {
    if (this.prevBranchIds == null) {
      this.prevBranchIds = new ArrayList<>();
    }
    this.prevBranchIds.add(prevBranchIdsItem);
    return this;
  }

  /**
   * The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be              identical in the case of a looped route e.g. the Circle line.
   * @return prevBranchIds
   */
  @javax.annotation.Nullable
  public List<Integer> getPrevBranchIds() {
    return prevBranchIds;
  }

  public void setPrevBranchIds(List<Integer> prevBranchIds) {
    this.prevBranchIds = prevBranchIds;
  }


  public TflApiPresentationEntitiesStopPointSequence serviceType(ServiceTypeEnum serviceType) {
    this.serviceType = serviceType;
    return this;
  }

  /**
   * Get serviceType
   * @return serviceType
   */
  @javax.annotation.Nullable
  public ServiceTypeEnum getServiceType() {
    return serviceType;
  }

  public void setServiceType(ServiceTypeEnum serviceType) {
    this.serviceType = serviceType;
  }


  public TflApiPresentationEntitiesStopPointSequence stopPoint(List<TflApiPresentationEntitiesMatchedStop> stopPoint) {
    this.stopPoint = stopPoint;
    return this;
  }

  public TflApiPresentationEntitiesStopPointSequence addStopPointItem(TflApiPresentationEntitiesMatchedStop stopPointItem) {
    if (this.stopPoint == null) {
      this.stopPoint = new ArrayList<>();
    }
    this.stopPoint.add(stopPointItem);
    return this;
  }

  /**
   * Get stopPoint
   * @return stopPoint
   */
  @javax.annotation.Nullable
  public List<TflApiPresentationEntitiesMatchedStop> getStopPoint() {
    return stopPoint;
  }

  public void setStopPoint(List<TflApiPresentationEntitiesMatchedStop> stopPoint) {
    this.stopPoint = stopPoint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TflApiPresentationEntitiesStopPointSequence tflApiPresentationEntitiesStopPointSequence = (TflApiPresentationEntitiesStopPointSequence) o;
    return Objects.equals(this.branchId, tflApiPresentationEntitiesStopPointSequence.branchId) &&
        Objects.equals(this.direction, tflApiPresentationEntitiesStopPointSequence.direction) &&
        Objects.equals(this.lineId, tflApiPresentationEntitiesStopPointSequence.lineId) &&
        Objects.equals(this.lineName, tflApiPresentationEntitiesStopPointSequence.lineName) &&
        Objects.equals(this.nextBranchIds, tflApiPresentationEntitiesStopPointSequence.nextBranchIds) &&
        Objects.equals(this.prevBranchIds, tflApiPresentationEntitiesStopPointSequence.prevBranchIds) &&
        Objects.equals(this.serviceType, tflApiPresentationEntitiesStopPointSequence.serviceType) &&
        Objects.equals(this.stopPoint, tflApiPresentationEntitiesStopPointSequence.stopPoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branchId, direction, lineId, lineName, nextBranchIds, prevBranchIds, serviceType, stopPoint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TflApiPresentationEntitiesStopPointSequence {\n");
    sb.append("    branchId: ").append(toIndentedString(branchId)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    lineId: ").append(toIndentedString(lineId)).append("\n");
    sb.append("    lineName: ").append(toIndentedString(lineName)).append("\n");
    sb.append("    nextBranchIds: ").append(toIndentedString(nextBranchIds)).append("\n");
    sb.append("    prevBranchIds: ").append(toIndentedString(prevBranchIds)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    stopPoint: ").append(toIndentedString(stopPoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("branchId");
    openapiFields.add("direction");
    openapiFields.add("lineId");
    openapiFields.add("lineName");
    openapiFields.add("nextBranchIds");
    openapiFields.add("prevBranchIds");
    openapiFields.add("serviceType");
    openapiFields.add("stopPoint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TflApiPresentationEntitiesStopPointSequence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TflApiPresentationEntitiesStopPointSequence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TflApiPresentationEntitiesStopPointSequence is not found in the empty JSON string", TflApiPresentationEntitiesStopPointSequence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TflApiPresentationEntitiesStopPointSequence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TflApiPresentationEntitiesStopPointSequence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      if ((jsonObj.get("lineId") != null && !jsonObj.get("lineId").isJsonNull()) && !jsonObj.get("lineId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineId").toString()));
      }
      if ((jsonObj.get("lineName") != null && !jsonObj.get("lineName").isJsonNull()) && !jsonObj.get("lineName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nextBranchIds") != null && !jsonObj.get("nextBranchIds").isJsonNull() && !jsonObj.get("nextBranchIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextBranchIds` to be an array in the JSON string but got `%s`", jsonObj.get("nextBranchIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("prevBranchIds") != null && !jsonObj.get("prevBranchIds").isJsonNull() && !jsonObj.get("prevBranchIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `prevBranchIds` to be an array in the JSON string but got `%s`", jsonObj.get("prevBranchIds").toString()));
      }
      if ((jsonObj.get("serviceType") != null && !jsonObj.get("serviceType").isJsonNull()) && !jsonObj.get("serviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceType").toString()));
      }
      // validate the optional field `serviceType`
      if (jsonObj.get("serviceType") != null && !jsonObj.get("serviceType").isJsonNull()) {
        ServiceTypeEnum.validateJsonElement(jsonObj.get("serviceType"));
      }
      if (jsonObj.get("stopPoint") != null && !jsonObj.get("stopPoint").isJsonNull()) {
        JsonArray jsonArraystopPoint = jsonObj.getAsJsonArray("stopPoint");
        if (jsonArraystopPoint != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stopPoint").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stopPoint` to be an array in the JSON string but got `%s`", jsonObj.get("stopPoint").toString()));
          }

          // validate the optional field `stopPoint` (array)
          for (int i = 0; i < jsonArraystopPoint.size(); i++) {
            TflApiPresentationEntitiesMatchedStop.validateJsonElement(jsonArraystopPoint.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TflApiPresentationEntitiesStopPointSequence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TflApiPresentationEntitiesStopPointSequence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TflApiPresentationEntitiesStopPointSequence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TflApiPresentationEntitiesStopPointSequence.class));

       return (TypeAdapter<T>) new TypeAdapter<TflApiPresentationEntitiesStopPointSequence>() {
           @Override
           public void write(JsonWriter out, TflApiPresentationEntitiesStopPointSequence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TflApiPresentationEntitiesStopPointSequence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TflApiPresentationEntitiesStopPointSequence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TflApiPresentationEntitiesStopPointSequence
   * @throws IOException if the JSON string is invalid with respect to TflApiPresentationEntitiesStopPointSequence
   */
  public static TflApiPresentationEntitiesStopPointSequence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TflApiPresentationEntitiesStopPointSequence.class);
  }

  /**
   * Convert an instance of TflApiPresentationEntitiesStopPointSequence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

