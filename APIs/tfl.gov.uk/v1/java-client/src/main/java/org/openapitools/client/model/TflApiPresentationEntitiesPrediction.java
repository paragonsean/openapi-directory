/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.TflApiPresentationEntitiesPredictionTiming;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DTO to capture the prediction details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:40.735472-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TflApiPresentationEntitiesPrediction {
  public static final String SERIALIZED_NAME_BEARING = "bearing";
  @SerializedName(SERIALIZED_NAME_BEARING)
  private String bearing;

  public static final String SERIALIZED_NAME_CURRENT_LOCATION = "currentLocation";
  @SerializedName(SERIALIZED_NAME_CURRENT_LOCATION)
  private String currentLocation;

  public static final String SERIALIZED_NAME_DESTINATION_NAME = "destinationName";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NAME)
  private String destinationName;

  public static final String SERIALIZED_NAME_DESTINATION_NAPTAN_ID = "destinationNaptanId";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NAPTAN_ID)
  private String destinationNaptanId;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private String direction;

  public static final String SERIALIZED_NAME_EXPECTED_ARRIVAL = "expectedArrival";
  @SerializedName(SERIALIZED_NAME_EXPECTED_ARRIVAL)
  private OffsetDateTime expectedArrival;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LINE_ID = "lineId";
  @SerializedName(SERIALIZED_NAME_LINE_ID)
  private String lineId;

  public static final String SERIALIZED_NAME_LINE_NAME = "lineName";
  @SerializedName(SERIALIZED_NAME_LINE_NAME)
  private String lineName;

  public static final String SERIALIZED_NAME_MODE_NAME = "modeName";
  @SerializedName(SERIALIZED_NAME_MODE_NAME)
  private String modeName;

  public static final String SERIALIZED_NAME_NAPTAN_ID = "naptanId";
  @SerializedName(SERIALIZED_NAME_NAPTAN_ID)
  private String naptanId;

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  private Integer operationType;

  public static final String SERIALIZED_NAME_PLATFORM_NAME = "platformName";
  @SerializedName(SERIALIZED_NAME_PLATFORM_NAME)
  private String platformName;

  public static final String SERIALIZED_NAME_STATION_NAME = "stationName";
  @SerializedName(SERIALIZED_NAME_STATION_NAME)
  private String stationName;

  public static final String SERIALIZED_NAME_TIME_TO_LIVE = "timeToLive";
  @SerializedName(SERIALIZED_NAME_TIME_TO_LIVE)
  private OffsetDateTime timeToLive;

  public static final String SERIALIZED_NAME_TIME_TO_STATION = "timeToStation";
  @SerializedName(SERIALIZED_NAME_TIME_TO_STATION)
  private Integer timeToStation;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_TIMING = "timing";
  @SerializedName(SERIALIZED_NAME_TIMING)
  private TflApiPresentationEntitiesPredictionTiming timing;

  public static final String SERIALIZED_NAME_TOWARDS = "towards";
  @SerializedName(SERIALIZED_NAME_TOWARDS)
  private String towards;

  public static final String SERIALIZED_NAME_VEHICLE_ID = "vehicleId";
  @SerializedName(SERIALIZED_NAME_VEHICLE_ID)
  private String vehicleId;

  public TflApiPresentationEntitiesPrediction() {
  }

  public TflApiPresentationEntitiesPrediction bearing(String bearing) {
    this.bearing = bearing;
    return this;
  }

  /**
   * Bearing (between 0 to 359)
   * @return bearing
   */
  @javax.annotation.Nullable
  public String getBearing() {
    return bearing;
  }

  public void setBearing(String bearing) {
    this.bearing = bearing;
  }


  public TflApiPresentationEntitiesPrediction currentLocation(String currentLocation) {
    this.currentLocation = currentLocation;
    return this;
  }

  /**
   * The current location of the vehicle.
   * @return currentLocation
   */
  @javax.annotation.Nullable
  public String getCurrentLocation() {
    return currentLocation;
  }

  public void setCurrentLocation(String currentLocation) {
    this.currentLocation = currentLocation;
  }


  public TflApiPresentationEntitiesPrediction destinationName(String destinationName) {
    this.destinationName = destinationName;
    return this;
  }

  /**
   * Name of the destination
   * @return destinationName
   */
  @javax.annotation.Nullable
  public String getDestinationName() {
    return destinationName;
  }

  public void setDestinationName(String destinationName) {
    this.destinationName = destinationName;
  }


  public TflApiPresentationEntitiesPrediction destinationNaptanId(String destinationNaptanId) {
    this.destinationNaptanId = destinationNaptanId;
    return this;
  }

  /**
   * Naptan Identifier for the prediction&#39;s destination
   * @return destinationNaptanId
   */
  @javax.annotation.Nullable
  public String getDestinationNaptanId() {
    return destinationNaptanId;
  }

  public void setDestinationNaptanId(String destinationNaptanId) {
    this.destinationNaptanId = destinationNaptanId;
  }


  public TflApiPresentationEntitiesPrediction direction(String direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Direction (unified to inbound/outbound)
   * @return direction
   */
  @javax.annotation.Nullable
  public String getDirection() {
    return direction;
  }

  public void setDirection(String direction) {
    this.direction = direction;
  }


  public TflApiPresentationEntitiesPrediction expectedArrival(OffsetDateTime expectedArrival) {
    this.expectedArrival = expectedArrival;
    return this;
  }

  /**
   * The expected arrival time of the vehicle at the stop/station
   * @return expectedArrival
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpectedArrival() {
    return expectedArrival;
  }

  public void setExpectedArrival(OffsetDateTime expectedArrival) {
    this.expectedArrival = expectedArrival;
  }


  public TflApiPresentationEntitiesPrediction id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The identitier for the prediction
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TflApiPresentationEntitiesPrediction lineId(String lineId) {
    this.lineId = lineId;
    return this;
  }

  /**
   * Unique identifier for the Line
   * @return lineId
   */
  @javax.annotation.Nullable
  public String getLineId() {
    return lineId;
  }

  public void setLineId(String lineId) {
    this.lineId = lineId;
  }


  public TflApiPresentationEntitiesPrediction lineName(String lineName) {
    this.lineName = lineName;
    return this;
  }

  /**
   * Line Name
   * @return lineName
   */
  @javax.annotation.Nullable
  public String getLineName() {
    return lineName;
  }

  public void setLineName(String lineName) {
    this.lineName = lineName;
  }


  public TflApiPresentationEntitiesPrediction modeName(String modeName) {
    this.modeName = modeName;
    return this;
  }

  /**
   * The mode name of the station/line the prediction relates to
   * @return modeName
   */
  @javax.annotation.Nullable
  public String getModeName() {
    return modeName;
  }

  public void setModeName(String modeName) {
    this.modeName = modeName;
  }


  public TflApiPresentationEntitiesPrediction naptanId(String naptanId) {
    this.naptanId = naptanId;
    return this;
  }

  /**
   * Identifier for the prediction
   * @return naptanId
   */
  @javax.annotation.Nullable
  public String getNaptanId() {
    return naptanId;
  }

  public void setNaptanId(String naptanId) {
    this.naptanId = naptanId;
  }


  public TflApiPresentationEntitiesPrediction operationType(Integer operationType) {
    this.operationType = operationType;
    return this;
  }

  /**
   * The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache)
   * @return operationType
   */
  @javax.annotation.Nullable
  public Integer getOperationType() {
    return operationType;
  }

  public void setOperationType(Integer operationType) {
    this.operationType = operationType;
  }


  public TflApiPresentationEntitiesPrediction platformName(String platformName) {
    this.platformName = platformName;
    return this;
  }

  /**
   * Platform name (for bus, this is the stop letter)
   * @return platformName
   */
  @javax.annotation.Nullable
  public String getPlatformName() {
    return platformName;
  }

  public void setPlatformName(String platformName) {
    this.platformName = platformName;
  }


  public TflApiPresentationEntitiesPrediction stationName(String stationName) {
    this.stationName = stationName;
    return this;
  }

  /**
   * Station name
   * @return stationName
   */
  @javax.annotation.Nullable
  public String getStationName() {
    return stationName;
  }

  public void setStationName(String stationName) {
    this.stationName = stationName;
  }


  public TflApiPresentationEntitiesPrediction timeToLive(OffsetDateTime timeToLive) {
    this.timeToLive = timeToLive;
    return this;
  }

  /**
   * The expiry time for the prediction
   * @return timeToLive
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeToLive() {
    return timeToLive;
  }

  public void setTimeToLive(OffsetDateTime timeToLive) {
    this.timeToLive = timeToLive;
  }


  public TflApiPresentationEntitiesPrediction timeToStation(Integer timeToStation) {
    this.timeToStation = timeToStation;
    return this;
  }

  /**
   * Prediction of the Time to station in seconds
   * @return timeToStation
   */
  @javax.annotation.Nullable
  public Integer getTimeToStation() {
    return timeToStation;
  }

  public void setTimeToStation(Integer timeToStation) {
    this.timeToStation = timeToStation;
  }


  public TflApiPresentationEntitiesPrediction timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration)
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public TflApiPresentationEntitiesPrediction timing(TflApiPresentationEntitiesPredictionTiming timing) {
    this.timing = timing;
    return this;
  }

  /**
   * Get timing
   * @return timing
   */
  @javax.annotation.Nullable
  public TflApiPresentationEntitiesPredictionTiming getTiming() {
    return timing;
  }

  public void setTiming(TflApiPresentationEntitiesPredictionTiming timing) {
    this.timing = timing;
  }


  public TflApiPresentationEntitiesPrediction towards(String towards) {
    this.towards = towards;
    return this;
  }

  /**
   * Routing information or other descriptive text about the path of the vehicle towards the destination
   * @return towards
   */
  @javax.annotation.Nullable
  public String getTowards() {
    return towards;
  }

  public void setTowards(String towards) {
    this.towards = towards;
  }


  public TflApiPresentationEntitiesPrediction vehicleId(String vehicleId) {
    this.vehicleId = vehicleId;
    return this;
  }

  /**
   * The actual vehicle in transit (for train modes, the leading car of the rolling set)
   * @return vehicleId
   */
  @javax.annotation.Nullable
  public String getVehicleId() {
    return vehicleId;
  }

  public void setVehicleId(String vehicleId) {
    this.vehicleId = vehicleId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TflApiPresentationEntitiesPrediction tflApiPresentationEntitiesPrediction = (TflApiPresentationEntitiesPrediction) o;
    return Objects.equals(this.bearing, tflApiPresentationEntitiesPrediction.bearing) &&
        Objects.equals(this.currentLocation, tflApiPresentationEntitiesPrediction.currentLocation) &&
        Objects.equals(this.destinationName, tflApiPresentationEntitiesPrediction.destinationName) &&
        Objects.equals(this.destinationNaptanId, tflApiPresentationEntitiesPrediction.destinationNaptanId) &&
        Objects.equals(this.direction, tflApiPresentationEntitiesPrediction.direction) &&
        Objects.equals(this.expectedArrival, tflApiPresentationEntitiesPrediction.expectedArrival) &&
        Objects.equals(this.id, tflApiPresentationEntitiesPrediction.id) &&
        Objects.equals(this.lineId, tflApiPresentationEntitiesPrediction.lineId) &&
        Objects.equals(this.lineName, tflApiPresentationEntitiesPrediction.lineName) &&
        Objects.equals(this.modeName, tflApiPresentationEntitiesPrediction.modeName) &&
        Objects.equals(this.naptanId, tflApiPresentationEntitiesPrediction.naptanId) &&
        Objects.equals(this.operationType, tflApiPresentationEntitiesPrediction.operationType) &&
        Objects.equals(this.platformName, tflApiPresentationEntitiesPrediction.platformName) &&
        Objects.equals(this.stationName, tflApiPresentationEntitiesPrediction.stationName) &&
        Objects.equals(this.timeToLive, tflApiPresentationEntitiesPrediction.timeToLive) &&
        Objects.equals(this.timeToStation, tflApiPresentationEntitiesPrediction.timeToStation) &&
        Objects.equals(this.timestamp, tflApiPresentationEntitiesPrediction.timestamp) &&
        Objects.equals(this.timing, tflApiPresentationEntitiesPrediction.timing) &&
        Objects.equals(this.towards, tflApiPresentationEntitiesPrediction.towards) &&
        Objects.equals(this.vehicleId, tflApiPresentationEntitiesPrediction.vehicleId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bearing, currentLocation, destinationName, destinationNaptanId, direction, expectedArrival, id, lineId, lineName, modeName, naptanId, operationType, platformName, stationName, timeToLive, timeToStation, timestamp, timing, towards, vehicleId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TflApiPresentationEntitiesPrediction {\n");
    sb.append("    bearing: ").append(toIndentedString(bearing)).append("\n");
    sb.append("    currentLocation: ").append(toIndentedString(currentLocation)).append("\n");
    sb.append("    destinationName: ").append(toIndentedString(destinationName)).append("\n");
    sb.append("    destinationNaptanId: ").append(toIndentedString(destinationNaptanId)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    expectedArrival: ").append(toIndentedString(expectedArrival)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lineId: ").append(toIndentedString(lineId)).append("\n");
    sb.append("    lineName: ").append(toIndentedString(lineName)).append("\n");
    sb.append("    modeName: ").append(toIndentedString(modeName)).append("\n");
    sb.append("    naptanId: ").append(toIndentedString(naptanId)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    platformName: ").append(toIndentedString(platformName)).append("\n");
    sb.append("    stationName: ").append(toIndentedString(stationName)).append("\n");
    sb.append("    timeToLive: ").append(toIndentedString(timeToLive)).append("\n");
    sb.append("    timeToStation: ").append(toIndentedString(timeToStation)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    timing: ").append(toIndentedString(timing)).append("\n");
    sb.append("    towards: ").append(toIndentedString(towards)).append("\n");
    sb.append("    vehicleId: ").append(toIndentedString(vehicleId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bearing");
    openapiFields.add("currentLocation");
    openapiFields.add("destinationName");
    openapiFields.add("destinationNaptanId");
    openapiFields.add("direction");
    openapiFields.add("expectedArrival");
    openapiFields.add("id");
    openapiFields.add("lineId");
    openapiFields.add("lineName");
    openapiFields.add("modeName");
    openapiFields.add("naptanId");
    openapiFields.add("operationType");
    openapiFields.add("platformName");
    openapiFields.add("stationName");
    openapiFields.add("timeToLive");
    openapiFields.add("timeToStation");
    openapiFields.add("timestamp");
    openapiFields.add("timing");
    openapiFields.add("towards");
    openapiFields.add("vehicleId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TflApiPresentationEntitiesPrediction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TflApiPresentationEntitiesPrediction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TflApiPresentationEntitiesPrediction is not found in the empty JSON string", TflApiPresentationEntitiesPrediction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TflApiPresentationEntitiesPrediction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TflApiPresentationEntitiesPrediction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bearing") != null && !jsonObj.get("bearing").isJsonNull()) && !jsonObj.get("bearing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bearing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bearing").toString()));
      }
      if ((jsonObj.get("currentLocation") != null && !jsonObj.get("currentLocation").isJsonNull()) && !jsonObj.get("currentLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentLocation").toString()));
      }
      if ((jsonObj.get("destinationName") != null && !jsonObj.get("destinationName").isJsonNull()) && !jsonObj.get("destinationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationName").toString()));
      }
      if ((jsonObj.get("destinationNaptanId") != null && !jsonObj.get("destinationNaptanId").isJsonNull()) && !jsonObj.get("destinationNaptanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationNaptanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationNaptanId").toString()));
      }
      if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lineId") != null && !jsonObj.get("lineId").isJsonNull()) && !jsonObj.get("lineId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineId").toString()));
      }
      if ((jsonObj.get("lineName") != null && !jsonObj.get("lineName").isJsonNull()) && !jsonObj.get("lineName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineName").toString()));
      }
      if ((jsonObj.get("modeName") != null && !jsonObj.get("modeName").isJsonNull()) && !jsonObj.get("modeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modeName").toString()));
      }
      if ((jsonObj.get("naptanId") != null && !jsonObj.get("naptanId").isJsonNull()) && !jsonObj.get("naptanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `naptanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("naptanId").toString()));
      }
      if ((jsonObj.get("platformName") != null && !jsonObj.get("platformName").isJsonNull()) && !jsonObj.get("platformName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformName").toString()));
      }
      if ((jsonObj.get("stationName") != null && !jsonObj.get("stationName").isJsonNull()) && !jsonObj.get("stationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stationName").toString()));
      }
      // validate the optional field `timing`
      if (jsonObj.get("timing") != null && !jsonObj.get("timing").isJsonNull()) {
        TflApiPresentationEntitiesPredictionTiming.validateJsonElement(jsonObj.get("timing"));
      }
      if ((jsonObj.get("towards") != null && !jsonObj.get("towards").isJsonNull()) && !jsonObj.get("towards").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `towards` to be a primitive type in the JSON string but got `%s`", jsonObj.get("towards").toString()));
      }
      if ((jsonObj.get("vehicleId") != null && !jsonObj.get("vehicleId").isJsonNull()) && !jsonObj.get("vehicleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicleId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TflApiPresentationEntitiesPrediction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TflApiPresentationEntitiesPrediction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TflApiPresentationEntitiesPrediction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TflApiPresentationEntitiesPrediction.class));

       return (TypeAdapter<T>) new TypeAdapter<TflApiPresentationEntitiesPrediction>() {
           @Override
           public void write(JsonWriter out, TflApiPresentationEntitiesPrediction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TflApiPresentationEntitiesPrediction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TflApiPresentationEntitiesPrediction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TflApiPresentationEntitiesPrediction
   * @throws IOException if the JSON string is invalid with respect to TflApiPresentationEntitiesPrediction
   */
  public static TflApiPresentationEntitiesPrediction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TflApiPresentationEntitiesPrediction.class);
  }

  /**
   * Convert an instance of TflApiPresentationEntitiesPrediction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

