/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TflApiPresentationEntitiesJourneyPlannerFareTapDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:40.735472-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TflApiPresentationEntitiesJourneyPlannerFareTapDetails {
  public static final String SERIALIZED_NAME_BUS_ROUTE_ID = "busRouteId";
  @SerializedName(SERIALIZED_NAME_BUS_ROUTE_ID)
  private String busRouteId;

  public static final String SERIALIZED_NAME_HOST_DEVICE_TYPE = "hostDeviceType";
  @SerializedName(SERIALIZED_NAME_HOST_DEVICE_TYPE)
  private String hostDeviceType;

  public static final String SERIALIZED_NAME_MODE_TYPE = "modeType";
  @SerializedName(SERIALIZED_NAME_MODE_TYPE)
  private String modeType;

  public static final String SERIALIZED_NAME_NATIONAL_LOCATION_CODE = "nationalLocationCode";
  @SerializedName(SERIALIZED_NAME_NATIONAL_LOCATION_CODE)
  private Integer nationalLocationCode;

  public static final String SERIALIZED_NAME_TAP_TIMESTAMP = "tapTimestamp";
  @SerializedName(SERIALIZED_NAME_TAP_TIMESTAMP)
  private OffsetDateTime tapTimestamp;

  public static final String SERIALIZED_NAME_VALIDATION_TYPE = "validationType";
  @SerializedName(SERIALIZED_NAME_VALIDATION_TYPE)
  private String validationType;

  public TflApiPresentationEntitiesJourneyPlannerFareTapDetails() {
  }

  public TflApiPresentationEntitiesJourneyPlannerFareTapDetails busRouteId(String busRouteId) {
    this.busRouteId = busRouteId;
    return this;
  }

  /**
   * Get busRouteId
   * @return busRouteId
   */
  @javax.annotation.Nullable
  public String getBusRouteId() {
    return busRouteId;
  }

  public void setBusRouteId(String busRouteId) {
    this.busRouteId = busRouteId;
  }


  public TflApiPresentationEntitiesJourneyPlannerFareTapDetails hostDeviceType(String hostDeviceType) {
    this.hostDeviceType = hostDeviceType;
    return this;
  }

  /**
   * Get hostDeviceType
   * @return hostDeviceType
   */
  @javax.annotation.Nullable
  public String getHostDeviceType() {
    return hostDeviceType;
  }

  public void setHostDeviceType(String hostDeviceType) {
    this.hostDeviceType = hostDeviceType;
  }


  public TflApiPresentationEntitiesJourneyPlannerFareTapDetails modeType(String modeType) {
    this.modeType = modeType;
    return this;
  }

  /**
   * Get modeType
   * @return modeType
   */
  @javax.annotation.Nullable
  public String getModeType() {
    return modeType;
  }

  public void setModeType(String modeType) {
    this.modeType = modeType;
  }


  public TflApiPresentationEntitiesJourneyPlannerFareTapDetails nationalLocationCode(Integer nationalLocationCode) {
    this.nationalLocationCode = nationalLocationCode;
    return this;
  }

  /**
   * Get nationalLocationCode
   * @return nationalLocationCode
   */
  @javax.annotation.Nullable
  public Integer getNationalLocationCode() {
    return nationalLocationCode;
  }

  public void setNationalLocationCode(Integer nationalLocationCode) {
    this.nationalLocationCode = nationalLocationCode;
  }


  public TflApiPresentationEntitiesJourneyPlannerFareTapDetails tapTimestamp(OffsetDateTime tapTimestamp) {
    this.tapTimestamp = tapTimestamp;
    return this;
  }

  /**
   * Get tapTimestamp
   * @return tapTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTapTimestamp() {
    return tapTimestamp;
  }

  public void setTapTimestamp(OffsetDateTime tapTimestamp) {
    this.tapTimestamp = tapTimestamp;
  }


  public TflApiPresentationEntitiesJourneyPlannerFareTapDetails validationType(String validationType) {
    this.validationType = validationType;
    return this;
  }

  /**
   * Get validationType
   * @return validationType
   */
  @javax.annotation.Nullable
  public String getValidationType() {
    return validationType;
  }

  public void setValidationType(String validationType) {
    this.validationType = validationType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TflApiPresentationEntitiesJourneyPlannerFareTapDetails tflApiPresentationEntitiesJourneyPlannerFareTapDetails = (TflApiPresentationEntitiesJourneyPlannerFareTapDetails) o;
    return Objects.equals(this.busRouteId, tflApiPresentationEntitiesJourneyPlannerFareTapDetails.busRouteId) &&
        Objects.equals(this.hostDeviceType, tflApiPresentationEntitiesJourneyPlannerFareTapDetails.hostDeviceType) &&
        Objects.equals(this.modeType, tflApiPresentationEntitiesJourneyPlannerFareTapDetails.modeType) &&
        Objects.equals(this.nationalLocationCode, tflApiPresentationEntitiesJourneyPlannerFareTapDetails.nationalLocationCode) &&
        Objects.equals(this.tapTimestamp, tflApiPresentationEntitiesJourneyPlannerFareTapDetails.tapTimestamp) &&
        Objects.equals(this.validationType, tflApiPresentationEntitiesJourneyPlannerFareTapDetails.validationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(busRouteId, hostDeviceType, modeType, nationalLocationCode, tapTimestamp, validationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TflApiPresentationEntitiesJourneyPlannerFareTapDetails {\n");
    sb.append("    busRouteId: ").append(toIndentedString(busRouteId)).append("\n");
    sb.append("    hostDeviceType: ").append(toIndentedString(hostDeviceType)).append("\n");
    sb.append("    modeType: ").append(toIndentedString(modeType)).append("\n");
    sb.append("    nationalLocationCode: ").append(toIndentedString(nationalLocationCode)).append("\n");
    sb.append("    tapTimestamp: ").append(toIndentedString(tapTimestamp)).append("\n");
    sb.append("    validationType: ").append(toIndentedString(validationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("busRouteId");
    openapiFields.add("hostDeviceType");
    openapiFields.add("modeType");
    openapiFields.add("nationalLocationCode");
    openapiFields.add("tapTimestamp");
    openapiFields.add("validationType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TflApiPresentationEntitiesJourneyPlannerFareTapDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TflApiPresentationEntitiesJourneyPlannerFareTapDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TflApiPresentationEntitiesJourneyPlannerFareTapDetails is not found in the empty JSON string", TflApiPresentationEntitiesJourneyPlannerFareTapDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TflApiPresentationEntitiesJourneyPlannerFareTapDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TflApiPresentationEntitiesJourneyPlannerFareTapDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("busRouteId") != null && !jsonObj.get("busRouteId").isJsonNull()) && !jsonObj.get("busRouteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `busRouteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("busRouteId").toString()));
      }
      if ((jsonObj.get("hostDeviceType") != null && !jsonObj.get("hostDeviceType").isJsonNull()) && !jsonObj.get("hostDeviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostDeviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostDeviceType").toString()));
      }
      if ((jsonObj.get("modeType") != null && !jsonObj.get("modeType").isJsonNull()) && !jsonObj.get("modeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modeType").toString()));
      }
      if ((jsonObj.get("validationType") != null && !jsonObj.get("validationType").isJsonNull()) && !jsonObj.get("validationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TflApiPresentationEntitiesJourneyPlannerFareTapDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TflApiPresentationEntitiesJourneyPlannerFareTapDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TflApiPresentationEntitiesJourneyPlannerFareTapDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TflApiPresentationEntitiesJourneyPlannerFareTapDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<TflApiPresentationEntitiesJourneyPlannerFareTapDetails>() {
           @Override
           public void write(JsonWriter out, TflApiPresentationEntitiesJourneyPlannerFareTapDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TflApiPresentationEntitiesJourneyPlannerFareTapDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TflApiPresentationEntitiesJourneyPlannerFareTapDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TflApiPresentationEntitiesJourneyPlannerFareTapDetails
   * @throws IOException if the JSON string is invalid with respect to TflApiPresentationEntitiesJourneyPlannerFareTapDetails
   */
  public static TflApiPresentationEntitiesJourneyPlannerFareTapDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TflApiPresentationEntitiesJourneyPlannerFareTapDetails.class);
  }

  /**
   * Convert an instance of TflApiPresentationEntitiesJourneyPlannerFareTapDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

