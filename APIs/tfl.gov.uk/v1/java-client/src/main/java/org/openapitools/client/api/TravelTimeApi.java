/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TravelTimeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TravelTimeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TravelTimeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for travelTimeGetCompareOverlay
     * @param z The zoom level. (required)
     * @param pinLat The latitude of the pin. (required)
     * @param pinLon The longitude of the pin. (required)
     * @param mapCenterLat The map center latitude. (required)
     * @param mapCenterLon The map center longitude. (required)
     * @param scenarioTitle The title of the scenario. (required)
     * @param timeOfDayId The id for the time of day (AM/INTER/PM) (required)
     * @param modeId The id of the mode. (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param direction The direction of travel. (required)
     * @param travelTimeInterval The total minutes between the travel time bands (required)
     * @param compareType  (required)
     * @param compareValue  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelTimeGetCompareOverlayCall(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval, String compareType, String compareValue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}"
            .replace("{" + "z" + "}", localVarApiClient.escapeString(z.toString()))
            .replace("{" + "pinLat" + "}", localVarApiClient.escapeString(pinLat.toString()))
            .replace("{" + "pinLon" + "}", localVarApiClient.escapeString(pinLon.toString()))
            .replace("{" + "mapCenterLat" + "}", localVarApiClient.escapeString(mapCenterLat.toString()))
            .replace("{" + "mapCenterLon" + "}", localVarApiClient.escapeString(mapCenterLon.toString()))
            .replace("{" + "width" + "}", localVarApiClient.escapeString(width.toString()))
            .replace("{" + "height" + "}", localVarApiClient.escapeString(height.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioTitle", scenarioTitle));
        }

        if (timeOfDayId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeOfDayId", timeOfDayId));
        }

        if (modeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modeId", modeId));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (travelTimeInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travelTimeInterval", travelTimeInterval));
        }

        if (compareType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("compareType", compareType));
        }

        if (compareValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("compareValue", compareValue));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelTimeGetCompareOverlayValidateBeforeCall(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval, String compareType, String compareValue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'z' is set
        if (z == null) {
            throw new ApiException("Missing the required parameter 'z' when calling travelTimeGetCompareOverlay(Async)");
        }

        // verify the required parameter 'pinLat' is set
        if (pinLat == null) {
            throw new ApiException("Missing the required parameter 'pinLat' when calling travelTimeGetCompareOverlay(Async)");
        }

        // verify the required parameter 'pinLon' is set
        if (pinLon == null) {
            throw new ApiException("Missing the required parameter 'pinLon' when calling travelTimeGetCompareOverlay(Async)");
        }

        // verify the required parameter 'mapCenterLat' is set
        if (mapCenterLat == null) {
            throw new ApiException("Missing the required parameter 'mapCenterLat' when calling travelTimeGetCompareOverlay(Async)");
        }

        // verify the required parameter 'mapCenterLon' is set
        if (mapCenterLon == null) {
            throw new ApiException("Missing the required parameter 'mapCenterLon' when calling travelTimeGetCompareOverlay(Async)");
        }

        // verify the required parameter 'scenarioTitle' is set
        if (scenarioTitle == null) {
            throw new ApiException("Missing the required parameter 'scenarioTitle' when calling travelTimeGetCompareOverlay(Async)");
        }

        // verify the required parameter 'timeOfDayId' is set
        if (timeOfDayId == null) {
            throw new ApiException("Missing the required parameter 'timeOfDayId' when calling travelTimeGetCompareOverlay(Async)");
        }

        // verify the required parameter 'modeId' is set
        if (modeId == null) {
            throw new ApiException("Missing the required parameter 'modeId' when calling travelTimeGetCompareOverlay(Async)");
        }

        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling travelTimeGetCompareOverlay(Async)");
        }

        // verify the required parameter 'height' is set
        if (height == null) {
            throw new ApiException("Missing the required parameter 'height' when calling travelTimeGetCompareOverlay(Async)");
        }

        // verify the required parameter 'direction' is set
        if (direction == null) {
            throw new ApiException("Missing the required parameter 'direction' when calling travelTimeGetCompareOverlay(Async)");
        }

        // verify the required parameter 'travelTimeInterval' is set
        if (travelTimeInterval == null) {
            throw new ApiException("Missing the required parameter 'travelTimeInterval' when calling travelTimeGetCompareOverlay(Async)");
        }

        // verify the required parameter 'compareType' is set
        if (compareType == null) {
            throw new ApiException("Missing the required parameter 'compareType' when calling travelTimeGetCompareOverlay(Async)");
        }

        // verify the required parameter 'compareValue' is set
        if (compareValue == null) {
            throw new ApiException("Missing the required parameter 'compareValue' when calling travelTimeGetCompareOverlay(Async)");
        }

        return travelTimeGetCompareOverlayCall(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval, compareType, compareValue, _callback);

    }

    /**
     * Gets the TravelTime overlay.
     * 
     * @param z The zoom level. (required)
     * @param pinLat The latitude of the pin. (required)
     * @param pinLon The longitude of the pin. (required)
     * @param mapCenterLat The map center latitude. (required)
     * @param mapCenterLon The map center longitude. (required)
     * @param scenarioTitle The title of the scenario. (required)
     * @param timeOfDayId The id for the time of day (AM/INTER/PM) (required)
     * @param modeId The id of the mode. (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param direction The direction of travel. (required)
     * @param travelTimeInterval The total minutes between the travel time bands (required)
     * @param compareType  (required)
     * @param compareValue  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object travelTimeGetCompareOverlay(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval, String compareType, String compareValue) throws ApiException {
        ApiResponse<Object> localVarResp = travelTimeGetCompareOverlayWithHttpInfo(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval, compareType, compareValue);
        return localVarResp.getData();
    }

    /**
     * Gets the TravelTime overlay.
     * 
     * @param z The zoom level. (required)
     * @param pinLat The latitude of the pin. (required)
     * @param pinLon The longitude of the pin. (required)
     * @param mapCenterLat The map center latitude. (required)
     * @param mapCenterLon The map center longitude. (required)
     * @param scenarioTitle The title of the scenario. (required)
     * @param timeOfDayId The id for the time of day (AM/INTER/PM) (required)
     * @param modeId The id of the mode. (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param direction The direction of travel. (required)
     * @param travelTimeInterval The total minutes between the travel time bands (required)
     * @param compareType  (required)
     * @param compareValue  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> travelTimeGetCompareOverlayWithHttpInfo(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval, String compareType, String compareValue) throws ApiException {
        okhttp3.Call localVarCall = travelTimeGetCompareOverlayValidateBeforeCall(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval, compareType, compareValue, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the TravelTime overlay. (asynchronously)
     * 
     * @param z The zoom level. (required)
     * @param pinLat The latitude of the pin. (required)
     * @param pinLon The longitude of the pin. (required)
     * @param mapCenterLat The map center latitude. (required)
     * @param mapCenterLon The map center longitude. (required)
     * @param scenarioTitle The title of the scenario. (required)
     * @param timeOfDayId The id for the time of day (AM/INTER/PM) (required)
     * @param modeId The id of the mode. (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param direction The direction of travel. (required)
     * @param travelTimeInterval The total minutes between the travel time bands (required)
     * @param compareType  (required)
     * @param compareValue  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelTimeGetCompareOverlayAsync(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval, String compareType, String compareValue, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelTimeGetCompareOverlayValidateBeforeCall(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval, compareType, compareValue, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for travelTimeGetOverlay
     * @param z The zoom level. (required)
     * @param pinLat The latitude of the pin. (required)
     * @param pinLon The longitude of the pin. (required)
     * @param mapCenterLat The map center latitude. (required)
     * @param mapCenterLon The map center longitude. (required)
     * @param scenarioTitle The title of the scenario. (required)
     * @param timeOfDayId The id for the time of day (AM/INTER/PM) (required)
     * @param modeId The id of the mode. (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param direction The direction of travel. (required)
     * @param travelTimeInterval The total minutes between the travel time bands (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelTimeGetOverlayCall(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}"
            .replace("{" + "z" + "}", localVarApiClient.escapeString(z.toString()))
            .replace("{" + "pinLat" + "}", localVarApiClient.escapeString(pinLat.toString()))
            .replace("{" + "pinLon" + "}", localVarApiClient.escapeString(pinLon.toString()))
            .replace("{" + "mapCenterLat" + "}", localVarApiClient.escapeString(mapCenterLat.toString()))
            .replace("{" + "mapCenterLon" + "}", localVarApiClient.escapeString(mapCenterLon.toString()))
            .replace("{" + "width" + "}", localVarApiClient.escapeString(width.toString()))
            .replace("{" + "height" + "}", localVarApiClient.escapeString(height.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioTitle", scenarioTitle));
        }

        if (timeOfDayId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeOfDayId", timeOfDayId));
        }

        if (modeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modeId", modeId));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (travelTimeInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travelTimeInterval", travelTimeInterval));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call travelTimeGetOverlayValidateBeforeCall(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'z' is set
        if (z == null) {
            throw new ApiException("Missing the required parameter 'z' when calling travelTimeGetOverlay(Async)");
        }

        // verify the required parameter 'pinLat' is set
        if (pinLat == null) {
            throw new ApiException("Missing the required parameter 'pinLat' when calling travelTimeGetOverlay(Async)");
        }

        // verify the required parameter 'pinLon' is set
        if (pinLon == null) {
            throw new ApiException("Missing the required parameter 'pinLon' when calling travelTimeGetOverlay(Async)");
        }

        // verify the required parameter 'mapCenterLat' is set
        if (mapCenterLat == null) {
            throw new ApiException("Missing the required parameter 'mapCenterLat' when calling travelTimeGetOverlay(Async)");
        }

        // verify the required parameter 'mapCenterLon' is set
        if (mapCenterLon == null) {
            throw new ApiException("Missing the required parameter 'mapCenterLon' when calling travelTimeGetOverlay(Async)");
        }

        // verify the required parameter 'scenarioTitle' is set
        if (scenarioTitle == null) {
            throw new ApiException("Missing the required parameter 'scenarioTitle' when calling travelTimeGetOverlay(Async)");
        }

        // verify the required parameter 'timeOfDayId' is set
        if (timeOfDayId == null) {
            throw new ApiException("Missing the required parameter 'timeOfDayId' when calling travelTimeGetOverlay(Async)");
        }

        // verify the required parameter 'modeId' is set
        if (modeId == null) {
            throw new ApiException("Missing the required parameter 'modeId' when calling travelTimeGetOverlay(Async)");
        }

        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling travelTimeGetOverlay(Async)");
        }

        // verify the required parameter 'height' is set
        if (height == null) {
            throw new ApiException("Missing the required parameter 'height' when calling travelTimeGetOverlay(Async)");
        }

        // verify the required parameter 'direction' is set
        if (direction == null) {
            throw new ApiException("Missing the required parameter 'direction' when calling travelTimeGetOverlay(Async)");
        }

        // verify the required parameter 'travelTimeInterval' is set
        if (travelTimeInterval == null) {
            throw new ApiException("Missing the required parameter 'travelTimeInterval' when calling travelTimeGetOverlay(Async)");
        }

        return travelTimeGetOverlayCall(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval, _callback);

    }

    /**
     * Gets the TravelTime overlay.
     * 
     * @param z The zoom level. (required)
     * @param pinLat The latitude of the pin. (required)
     * @param pinLon The longitude of the pin. (required)
     * @param mapCenterLat The map center latitude. (required)
     * @param mapCenterLon The map center longitude. (required)
     * @param scenarioTitle The title of the scenario. (required)
     * @param timeOfDayId The id for the time of day (AM/INTER/PM) (required)
     * @param modeId The id of the mode. (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param direction The direction of travel. (required)
     * @param travelTimeInterval The total minutes between the travel time bands (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object travelTimeGetOverlay(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval) throws ApiException {
        ApiResponse<Object> localVarResp = travelTimeGetOverlayWithHttpInfo(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval);
        return localVarResp.getData();
    }

    /**
     * Gets the TravelTime overlay.
     * 
     * @param z The zoom level. (required)
     * @param pinLat The latitude of the pin. (required)
     * @param pinLon The longitude of the pin. (required)
     * @param mapCenterLat The map center latitude. (required)
     * @param mapCenterLon The map center longitude. (required)
     * @param scenarioTitle The title of the scenario. (required)
     * @param timeOfDayId The id for the time of day (AM/INTER/PM) (required)
     * @param modeId The id of the mode. (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param direction The direction of travel. (required)
     * @param travelTimeInterval The total minutes between the travel time bands (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> travelTimeGetOverlayWithHttpInfo(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval) throws ApiException {
        okhttp3.Call localVarCall = travelTimeGetOverlayValidateBeforeCall(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the TravelTime overlay. (asynchronously)
     * 
     * @param z The zoom level. (required)
     * @param pinLat The latitude of the pin. (required)
     * @param pinLon The longitude of the pin. (required)
     * @param mapCenterLat The map center latitude. (required)
     * @param mapCenterLon The map center longitude. (required)
     * @param scenarioTitle The title of the scenario. (required)
     * @param timeOfDayId The id for the time of day (AM/INTER/PM) (required)
     * @param modeId The id of the mode. (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param direction The direction of travel. (required)
     * @param travelTimeInterval The total minutes between the travel time bands (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call travelTimeGetOverlayAsync(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = travelTimeGetOverlayValidateBeforeCall(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
