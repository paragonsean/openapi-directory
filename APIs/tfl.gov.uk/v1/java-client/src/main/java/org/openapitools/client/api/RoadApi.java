/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.TflApiPresentationEntitiesRoadCorridor;
import org.openapitools.client.model.TflApiPresentationEntitiesRoadDisruption;
import org.openapitools.client.model.TflApiPresentationEntitiesStatusSeverity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RoadApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RoadApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoadApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for roadDisruptedStreets
     * @param startDate Optional, the start time to filter on. (required)
     * @param endDate Optional, The end time to filter on. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roadDisruptedStreetsCall(OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Road/all/Street/Disruption";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roadDisruptedStreetsValidateBeforeCall(OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling roadDisruptedStreets(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling roadDisruptedStreets(Async)");
        }

        return roadDisruptedStreetsCall(startDate, endDate, _callback);

    }

    /**
     * Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned.
     * 
     * @param startDate Optional, the start time to filter on. (required)
     * @param endDate Optional, The end time to filter on. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object roadDisruptedStreets(OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<Object> localVarResp = roadDisruptedStreetsWithHttpInfo(startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned.
     * 
     * @param startDate Optional, the start time to filter on. (required)
     * @param endDate Optional, The end time to filter on. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> roadDisruptedStreetsWithHttpInfo(OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        okhttp3.Call localVarCall = roadDisruptedStreetsValidateBeforeCall(startDate, endDate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned. (asynchronously)
     * 
     * @param startDate Optional, the start time to filter on. (required)
     * @param endDate Optional, The end time to filter on. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roadDisruptedStreetsAsync(OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = roadDisruptedStreetsValidateBeforeCall(startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roadDisruption
     * @param ids Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint) (required)
     * @param stripContent Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets (optional)
     * @param severities an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint) (optional)
     * @param categories an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint) (optional)
     * @param closures Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roadDisruptionCall(List<String> ids, Boolean stripContent, List<String> severities, List<String> categories, Boolean closures, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Road/{ids}/Disruption"
            .replace("{" + "ids" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stripContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stripContent", stripContent));
        }

        if (severities != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "severities", severities));
        }

        if (categories != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "categories", categories));
        }

        if (closures != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("closures", closures));
        }

        final String[] localVarAccepts = {
            "application/geo+json",
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roadDisruptionValidateBeforeCall(List<String> ids, Boolean stripContent, List<String> severities, List<String> categories, Boolean closures, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling roadDisruption(Async)");
        }

        return roadDisruptionCall(ids, stripContent, severities, categories, closures, _callback);

    }

    /**
     * Get active disruptions, filtered by road ids
     * 
     * @param ids Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint) (required)
     * @param stripContent Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets (optional)
     * @param severities an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint) (optional)
     * @param categories an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint) (optional)
     * @param closures Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal. (optional)
     * @return List&lt;TflApiPresentationEntitiesRoadDisruption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesRoadDisruption> roadDisruption(List<String> ids, Boolean stripContent, List<String> severities, List<String> categories, Boolean closures) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesRoadDisruption>> localVarResp = roadDisruptionWithHttpInfo(ids, stripContent, severities, categories, closures);
        return localVarResp.getData();
    }

    /**
     * Get active disruptions, filtered by road ids
     * 
     * @param ids Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint) (required)
     * @param stripContent Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets (optional)
     * @param severities an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint) (optional)
     * @param categories an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint) (optional)
     * @param closures Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal. (optional)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesRoadDisruption&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesRoadDisruption>> roadDisruptionWithHttpInfo(List<String> ids, Boolean stripContent, List<String> severities, List<String> categories, Boolean closures) throws ApiException {
        okhttp3.Call localVarCall = roadDisruptionValidateBeforeCall(ids, stripContent, severities, categories, closures, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesRoadDisruption>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get active disruptions, filtered by road ids (asynchronously)
     * 
     * @param ids Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint) (required)
     * @param stripContent Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets (optional)
     * @param severities an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint) (optional)
     * @param categories an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint) (optional)
     * @param closures Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roadDisruptionAsync(List<String> ids, Boolean stripContent, List<String> severities, List<String> categories, Boolean closures, final ApiCallback<List<TflApiPresentationEntitiesRoadDisruption>> _callback) throws ApiException {

        okhttp3.Call localVarCall = roadDisruptionValidateBeforeCall(ids, stripContent, severities, categories, closures, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesRoadDisruption>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roadDisruptionById
     * @param disruptionIds Comma-separated list of disruption identifiers to filter by. (required)
     * @param stripContent Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roadDisruptionByIdCall(List<String> disruptionIds, Boolean stripContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Road/all/Disruption/{disruptionIds}"
            .replace("{" + "disruptionIds" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", disruptionIds)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stripContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stripContent", stripContent));
        }

        final String[] localVarAccepts = {
            "application/geo+json",
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roadDisruptionByIdValidateBeforeCall(List<String> disruptionIds, Boolean stripContent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'disruptionIds' is set
        if (disruptionIds == null) {
            throw new ApiException("Missing the required parameter 'disruptionIds' when calling roadDisruptionById(Async)");
        }

        return roadDisruptionByIdCall(disruptionIds, stripContent, _callback);

    }

    /**
     * Gets a list of active disruptions filtered by disruption Ids.
     * 
     * @param disruptionIds Comma-separated list of disruption identifiers to filter by. (required)
     * @param stripContent Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments. (optional)
     * @return TflApiPresentationEntitiesRoadDisruption
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TflApiPresentationEntitiesRoadDisruption roadDisruptionById(List<String> disruptionIds, Boolean stripContent) throws ApiException {
        ApiResponse<TflApiPresentationEntitiesRoadDisruption> localVarResp = roadDisruptionByIdWithHttpInfo(disruptionIds, stripContent);
        return localVarResp.getData();
    }

    /**
     * Gets a list of active disruptions filtered by disruption Ids.
     * 
     * @param disruptionIds Comma-separated list of disruption identifiers to filter by. (required)
     * @param stripContent Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments. (optional)
     * @return ApiResponse&lt;TflApiPresentationEntitiesRoadDisruption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TflApiPresentationEntitiesRoadDisruption> roadDisruptionByIdWithHttpInfo(List<String> disruptionIds, Boolean stripContent) throws ApiException {
        okhttp3.Call localVarCall = roadDisruptionByIdValidateBeforeCall(disruptionIds, stripContent, null);
        Type localVarReturnType = new TypeToken<TflApiPresentationEntitiesRoadDisruption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of active disruptions filtered by disruption Ids. (asynchronously)
     * 
     * @param disruptionIds Comma-separated list of disruption identifiers to filter by. (required)
     * @param stripContent Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roadDisruptionByIdAsync(List<String> disruptionIds, Boolean stripContent, final ApiCallback<TflApiPresentationEntitiesRoadDisruption> _callback) throws ApiException {

        okhttp3.Call localVarCall = roadDisruptionByIdValidateBeforeCall(disruptionIds, stripContent, _callback);
        Type localVarReturnType = new TypeToken<TflApiPresentationEntitiesRoadDisruption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roadGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roadGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Road";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roadGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return roadGetCall(_callback);

    }

    /**
     * Gets all roads managed by TfL
     * 
     * @return List&lt;TflApiPresentationEntitiesRoadCorridor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesRoadCorridor> roadGet() throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>> localVarResp = roadGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets all roads managed by TfL
     * 
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesRoadCorridor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>> roadGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = roadGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesRoadCorridor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all roads managed by TfL (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roadGetAsync(final ApiCallback<List<TflApiPresentationEntitiesRoadCorridor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = roadGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesRoadCorridor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roadIdsGet
     * @param ids Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; (a full list of supported road identifiers can be found at the /Road/ endpoint) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roadIdsGetCall(List<String> ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Road/{ids}"
            .replace("{" + "ids" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roadIdsGetValidateBeforeCall(List<String> ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling roadIdsGet(Async)");
        }

        return roadIdsGetCall(ids, _callback);

    }

    /**
     * Gets the road with the specified id (e.g. A1)
     * 
     * @param ids Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; (a full list of supported road identifiers can be found at the /Road/ endpoint) (required)
     * @return List&lt;TflApiPresentationEntitiesRoadCorridor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesRoadCorridor> roadIdsGet(List<String> ids) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>> localVarResp = roadIdsGetWithHttpInfo(ids);
        return localVarResp.getData();
    }

    /**
     * Gets the road with the specified id (e.g. A1)
     * 
     * @param ids Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; (a full list of supported road identifiers can be found at the /Road/ endpoint) (required)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesRoadCorridor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>> roadIdsGetWithHttpInfo(List<String> ids) throws ApiException {
        okhttp3.Call localVarCall = roadIdsGetValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesRoadCorridor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the road with the specified id (e.g. A1) (asynchronously)
     * 
     * @param ids Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; (a full list of supported road identifiers can be found at the /Road/ endpoint) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roadIdsGetAsync(List<String> ids, final ApiCallback<List<TflApiPresentationEntitiesRoadCorridor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = roadIdsGetValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesRoadCorridor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roadMetaCategories
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roadMetaCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Road/Meta/Categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roadMetaCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return roadMetaCategoriesCall(_callback);

    }

    /**
     * Gets a list of valid RoadDisruption categories
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<String> roadMetaCategories() throws ApiException {
        ApiResponse<List<String>> localVarResp = roadMetaCategoriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets a list of valid RoadDisruption categories
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> roadMetaCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = roadMetaCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of valid RoadDisruption categories (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roadMetaCategoriesAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = roadMetaCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roadMetaSeverities
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roadMetaSeveritiesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Road/Meta/Severities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roadMetaSeveritiesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return roadMetaSeveritiesCall(_callback);

    }

    /**
     * Gets a list of valid RoadDisruption severity codes
     * 
     * @return List&lt;TflApiPresentationEntitiesStatusSeverity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesStatusSeverity> roadMetaSeverities() throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>> localVarResp = roadMetaSeveritiesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets a list of valid RoadDisruption severity codes
     * 
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesStatusSeverity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesStatusSeverity>> roadMetaSeveritiesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = roadMetaSeveritiesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesStatusSeverity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of valid RoadDisruption severity codes (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roadMetaSeveritiesAsync(final ApiCallback<List<TflApiPresentationEntitiesStatusSeverity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = roadMetaSeveritiesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesStatusSeverity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roadStatus
     * @param ids Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; or use \&quot;all\&quot; to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint) (required)
     * @param dateRangeNullableStartDate  (optional)
     * @param dateRangeNullableEndDate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roadStatusCall(List<String> ids, OffsetDateTime dateRangeNullableStartDate, OffsetDateTime dateRangeNullableEndDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Road/{ids}/Status"
            .replace("{" + "ids" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", ids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateRangeNullableStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateRangeNullable.startDate", dateRangeNullableStartDate));
        }

        if (dateRangeNullableEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateRangeNullable.endDate", dateRangeNullableEndDate));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roadStatusValidateBeforeCall(List<String> ids, OffsetDateTime dateRangeNullableStartDate, OffsetDateTime dateRangeNullableEndDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling roadStatus(Async)");
        }

        return roadStatusCall(ids, dateRangeNullableStartDate, dateRangeNullableEndDate, _callback);

    }

    /**
     * Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed.
     * 
     * @param ids Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; or use \&quot;all\&quot; to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint) (required)
     * @param dateRangeNullableStartDate  (optional)
     * @param dateRangeNullableEndDate  (optional)
     * @return List&lt;TflApiPresentationEntitiesRoadCorridor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesRoadCorridor> roadStatus(List<String> ids, OffsetDateTime dateRangeNullableStartDate, OffsetDateTime dateRangeNullableEndDate) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>> localVarResp = roadStatusWithHttpInfo(ids, dateRangeNullableStartDate, dateRangeNullableEndDate);
        return localVarResp.getData();
    }

    /**
     * Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed.
     * 
     * @param ids Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; or use \&quot;all\&quot; to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint) (required)
     * @param dateRangeNullableStartDate  (optional)
     * @param dateRangeNullableEndDate  (optional)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesRoadCorridor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesRoadCorridor>> roadStatusWithHttpInfo(List<String> ids, OffsetDateTime dateRangeNullableStartDate, OffsetDateTime dateRangeNullableEndDate) throws ApiException {
        okhttp3.Call localVarCall = roadStatusValidateBeforeCall(ids, dateRangeNullableStartDate, dateRangeNullableEndDate, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesRoadCorridor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed. (asynchronously)
     * 
     * @param ids Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; or use \&quot;all\&quot; to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint) (required)
     * @param dateRangeNullableStartDate  (optional)
     * @param dateRangeNullableEndDate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roadStatusAsync(List<String> ids, OffsetDateTime dateRangeNullableStartDate, OffsetDateTime dateRangeNullableEndDate, final ApiCallback<List<TflApiPresentationEntitiesRoadCorridor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = roadStatusValidateBeforeCall(ids, dateRangeNullableStartDate, dateRangeNullableEndDate, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesRoadCorridor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
