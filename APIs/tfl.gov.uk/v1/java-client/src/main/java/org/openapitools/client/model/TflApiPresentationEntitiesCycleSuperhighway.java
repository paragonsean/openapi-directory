/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.SystemDataSpatialDbGeography;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:40.735472-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TflApiPresentationEntitiesCycleSuperhighway {
  public static final String SERIALIZED_NAME_GEOGRAPHY = "geography";
  @SerializedName(SERIALIZED_NAME_GEOGRAPHY)
  private SystemDataSpatialDbGeography geography;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_LABEL_SHORT = "labelShort";
  @SerializedName(SERIALIZED_NAME_LABEL_SHORT)
  private String labelShort;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  /**
   * Type of cycle route e.g CycleSuperhighways, Quietways, MiniHollands etc
   */
  @JsonAdapter(RouteTypeEnum.Adapter.class)
  public enum RouteTypeEnum {
    UNKNOWN("Unknown"),
    
    ALL("All"),
    
    CYCLE_SUPERHIGHWAYS("Cycle Superhighways"),
    
    QUIETWAYS("Quietways"),
    
    CYCLEWAYS("Cycleways"),
    
    MINI_HOLLANDS("Mini-Hollands"),
    
    CENTRAL_LONDON_GRID("Central London Grid"),
    
    STREETSPACE_ROUTE("Streetspace Route");

    private String value;

    RouteTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RouteTypeEnum fromValue(String value) {
      for (RouteTypeEnum b : RouteTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RouteTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RouteTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RouteTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RouteTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RouteTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROUTE_TYPE = "routeType";
  @SerializedName(SERIALIZED_NAME_ROUTE_TYPE)
  private RouteTypeEnum routeType;

  public static final String SERIALIZED_NAME_SEGMENTED = "segmented";
  @SerializedName(SERIALIZED_NAME_SEGMENTED)
  private Boolean segmented;

  /**
   * Cycle route status i.e Proposed, Existing etc
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UNKNOWN("Unknown"),
    
    ALL("All"),
    
    OPEN("Open"),
    
    IN_PROGRESS("In Progress"),
    
    PLANNED("Planned"),
    
    PLANNED_SUBJECT_TO_FEASIBILITY_AND_CONSULTATION_("Planned - Subject to feasibility and consultation."),
    
    NOT_OPEN("Not Open");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public TflApiPresentationEntitiesCycleSuperhighway() {
  }

  public TflApiPresentationEntitiesCycleSuperhighway geography(SystemDataSpatialDbGeography geography) {
    this.geography = geography;
    return this;
  }

  /**
   * Get geography
   * @return geography
   */
  @javax.annotation.Nullable
  public SystemDataSpatialDbGeography getGeography() {
    return geography;
  }

  public void setGeography(SystemDataSpatialDbGeography geography) {
    this.geography = geography;
  }


  public TflApiPresentationEntitiesCycleSuperhighway id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TflApiPresentationEntitiesCycleSuperhighway label(String label) {
    this.label = label;
    return this;
  }

  /**
   * The long label to show on maps when zoomed in
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public TflApiPresentationEntitiesCycleSuperhighway labelShort(String labelShort) {
    this.labelShort = labelShort;
    return this;
  }

  /**
   * The short label to show on maps
   * @return labelShort
   */
  @javax.annotation.Nullable
  public String getLabelShort() {
    return labelShort;
  }

  public void setLabelShort(String labelShort) {
    this.labelShort = labelShort;
  }


  public TflApiPresentationEntitiesCycleSuperhighway modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

  /**
   * When the data was last updated
   * @return modified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public TflApiPresentationEntitiesCycleSuperhighway routeType(RouteTypeEnum routeType) {
    this.routeType = routeType;
    return this;
  }

  /**
   * Type of cycle route e.g CycleSuperhighways, Quietways, MiniHollands etc
   * @return routeType
   */
  @javax.annotation.Nullable
  public RouteTypeEnum getRouteType() {
    return routeType;
  }

  public void setRouteType(RouteTypeEnum routeType) {
    this.routeType = routeType;
  }


  public TflApiPresentationEntitiesCycleSuperhighway segmented(Boolean segmented) {
    this.segmented = segmented;
    return this;
  }

  /**
   * True if the route is split into segments
   * @return segmented
   */
  @javax.annotation.Nullable
  public Boolean getSegmented() {
    return segmented;
  }

  public void setSegmented(Boolean segmented) {
    this.segmented = segmented;
  }


  public TflApiPresentationEntitiesCycleSuperhighway status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Cycle route status i.e Proposed, Existing etc
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TflApiPresentationEntitiesCycleSuperhighway tflApiPresentationEntitiesCycleSuperhighway = (TflApiPresentationEntitiesCycleSuperhighway) o;
    return Objects.equals(this.geography, tflApiPresentationEntitiesCycleSuperhighway.geography) &&
        Objects.equals(this.id, tflApiPresentationEntitiesCycleSuperhighway.id) &&
        Objects.equals(this.label, tflApiPresentationEntitiesCycleSuperhighway.label) &&
        Objects.equals(this.labelShort, tflApiPresentationEntitiesCycleSuperhighway.labelShort) &&
        Objects.equals(this.modified, tflApiPresentationEntitiesCycleSuperhighway.modified) &&
        Objects.equals(this.routeType, tflApiPresentationEntitiesCycleSuperhighway.routeType) &&
        Objects.equals(this.segmented, tflApiPresentationEntitiesCycleSuperhighway.segmented) &&
        Objects.equals(this.status, tflApiPresentationEntitiesCycleSuperhighway.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(geography, id, label, labelShort, modified, routeType, segmented, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TflApiPresentationEntitiesCycleSuperhighway {\n");
    sb.append("    geography: ").append(toIndentedString(geography)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    labelShort: ").append(toIndentedString(labelShort)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    routeType: ").append(toIndentedString(routeType)).append("\n");
    sb.append("    segmented: ").append(toIndentedString(segmented)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("geography");
    openapiFields.add("id");
    openapiFields.add("label");
    openapiFields.add("labelShort");
    openapiFields.add("modified");
    openapiFields.add("routeType");
    openapiFields.add("segmented");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TflApiPresentationEntitiesCycleSuperhighway
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TflApiPresentationEntitiesCycleSuperhighway.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TflApiPresentationEntitiesCycleSuperhighway is not found in the empty JSON string", TflApiPresentationEntitiesCycleSuperhighway.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TflApiPresentationEntitiesCycleSuperhighway.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TflApiPresentationEntitiesCycleSuperhighway` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `geography`
      if (jsonObj.get("geography") != null && !jsonObj.get("geography").isJsonNull()) {
        SystemDataSpatialDbGeography.validateJsonElement(jsonObj.get("geography"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("labelShort") != null && !jsonObj.get("labelShort").isJsonNull()) && !jsonObj.get("labelShort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelShort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelShort").toString()));
      }
      if ((jsonObj.get("routeType") != null && !jsonObj.get("routeType").isJsonNull()) && !jsonObj.get("routeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeType").toString()));
      }
      // validate the optional field `routeType`
      if (jsonObj.get("routeType") != null && !jsonObj.get("routeType").isJsonNull()) {
        RouteTypeEnum.validateJsonElement(jsonObj.get("routeType"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TflApiPresentationEntitiesCycleSuperhighway.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TflApiPresentationEntitiesCycleSuperhighway' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TflApiPresentationEntitiesCycleSuperhighway> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TflApiPresentationEntitiesCycleSuperhighway.class));

       return (TypeAdapter<T>) new TypeAdapter<TflApiPresentationEntitiesCycleSuperhighway>() {
           @Override
           public void write(JsonWriter out, TflApiPresentationEntitiesCycleSuperhighway value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TflApiPresentationEntitiesCycleSuperhighway read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TflApiPresentationEntitiesCycleSuperhighway given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TflApiPresentationEntitiesCycleSuperhighway
   * @throws IOException if the JSON string is invalid with respect to TflApiPresentationEntitiesCycleSuperhighway
   */
  public static TflApiPresentationEntitiesCycleSuperhighway fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TflApiPresentationEntitiesCycleSuperhighway.class);
  }

  /**
   * Convert an instance of TflApiPresentationEntitiesCycleSuperhighway to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

