/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.TflApiPresentationEntitiesJourneyPlannerItineraryResult;
import org.openapitools.client.model.TflApiPresentationEntitiesMode;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JourneyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JourneyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JourneyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for journeyJourneyResults
     * @param from Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (required)
     * @param to Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (required)
     * @param via Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)
     * @param nationalSearch Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)
     * @param date The date must be in yyyyMMdd format (optional)
     * @param time The time must be in HHmm format (optional)
     * @param timeIs Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)
     * @param journeyPreference The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)
     * @param mode The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)
     * @param accessibilityPreference The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)
     * @param fromName An optional name to associate with the origin of the journey in the results. (optional)
     * @param toName An optional name to associate with the destination of the journey in the results. (optional)
     * @param viaName An optional name to associate with the via point of the journey in the results. (optional)
     * @param maxTransferMinutes The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)
     * @param maxWalkingMinutes The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)
     * @param walkingSpeed The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)
     * @param cyclePreference The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)
     * @param adjustment Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)
     * @param bikeProficiency A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)
     * @param alternativeCycle Option to determine whether to return alternative cycling journey (optional)
     * @param alternativeWalking Option to determine whether to return alternative walking journey (optional)
     * @param applyHtmlMarkup Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)
     * @param useMultiModalCall A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)
     * @param walkingOptimization A boolean to indicate whether to optimize journeys using walking (optional)
     * @param taxiOnlyTrip A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \&quot;useMultiModalCall\&quot;. (optional)
     * @param routeBetweenEntrances A boolean to indicate whether public transport routes should include directions between platforms and station entrances. (optional)
     * @param useRealTimeLiveArrivals A boolean to indicate if we want to receive real time live arrivals data where available. (optional)
     * @param calcOneDirection A boolean to make Journey Planner calculate journeys in one temporal direction only. In other words, only calculate journeys after the &#39;depart&#39; time, or before the &#39;arrive&#39; time. By default, the Journey Planner engine (EFA) calculates journeys in both temporal directions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call journeyJourneyResultsCall(String from, String to, String via, Boolean nationalSearch, String date, String time, String timeIs, String journeyPreference, List<String> mode, List<String> accessibilityPreference, String fromName, String toName, String viaName, String maxTransferMinutes, String maxWalkingMinutes, String walkingSpeed, String cyclePreference, String adjustment, List<String> bikeProficiency, Boolean alternativeCycle, Boolean alternativeWalking, Boolean applyHtmlMarkup, Boolean useMultiModalCall, Boolean walkingOptimization, Boolean taxiOnlyTrip, Boolean routeBetweenEntrances, Boolean useRealTimeLiveArrivals, Boolean calcOneDirection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Journey/JourneyResults/{from}/to/{to}"
            .replace("{" + "from" + "}", localVarApiClient.escapeString(from.toString()))
            .replace("{" + "to" + "}", localVarApiClient.escapeString(to.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (via != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("via", via));
        }

        if (nationalSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nationalSearch", nationalSearch));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (timeIs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeIs", timeIs));
        }

        if (journeyPreference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("journeyPreference", journeyPreference));
        }

        if (mode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mode", mode));
        }

        if (accessibilityPreference != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "accessibilityPreference", accessibilityPreference));
        }

        if (fromName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromName", fromName));
        }

        if (toName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toName", toName));
        }

        if (viaName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("viaName", viaName));
        }

        if (maxTransferMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxTransferMinutes", maxTransferMinutes));
        }

        if (maxWalkingMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWalkingMinutes", maxWalkingMinutes));
        }

        if (walkingSpeed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walkingSpeed", walkingSpeed));
        }

        if (cyclePreference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cyclePreference", cyclePreference));
        }

        if (adjustment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adjustment", adjustment));
        }

        if (bikeProficiency != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "bikeProficiency", bikeProficiency));
        }

        if (alternativeCycle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alternativeCycle", alternativeCycle));
        }

        if (alternativeWalking != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alternativeWalking", alternativeWalking));
        }

        if (applyHtmlMarkup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applyHtmlMarkup", applyHtmlMarkup));
        }

        if (useMultiModalCall != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useMultiModalCall", useMultiModalCall));
        }

        if (walkingOptimization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walkingOptimization", walkingOptimization));
        }

        if (taxiOnlyTrip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taxiOnlyTrip", taxiOnlyTrip));
        }

        if (routeBetweenEntrances != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeBetweenEntrances", routeBetweenEntrances));
        }

        if (useRealTimeLiveArrivals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useRealTimeLiveArrivals", useRealTimeLiveArrivals));
        }

        if (calcOneDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calcOneDirection", calcOneDirection));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call journeyJourneyResultsValidateBeforeCall(String from, String to, String via, Boolean nationalSearch, String date, String time, String timeIs, String journeyPreference, List<String> mode, List<String> accessibilityPreference, String fromName, String toName, String viaName, String maxTransferMinutes, String maxWalkingMinutes, String walkingSpeed, String cyclePreference, String adjustment, List<String> bikeProficiency, Boolean alternativeCycle, Boolean alternativeWalking, Boolean applyHtmlMarkup, Boolean useMultiModalCall, Boolean walkingOptimization, Boolean taxiOnlyTrip, Boolean routeBetweenEntrances, Boolean useRealTimeLiveArrivals, Boolean calcOneDirection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling journeyJourneyResults(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling journeyJourneyResults(Async)");
        }

        return journeyJourneyResultsCall(from, to, via, nationalSearch, date, time, timeIs, journeyPreference, mode, accessibilityPreference, fromName, toName, viaName, maxTransferMinutes, maxWalkingMinutes, walkingSpeed, cyclePreference, adjustment, bikeProficiency, alternativeCycle, alternativeWalking, applyHtmlMarkup, useMultiModalCall, walkingOptimization, taxiOnlyTrip, routeBetweenEntrances, useRealTimeLiveArrivals, calcOneDirection, _callback);

    }

    /**
     * Perform a Journey Planner search from the parameters specified in simple types
     * 
     * @param from Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (required)
     * @param to Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (required)
     * @param via Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)
     * @param nationalSearch Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)
     * @param date The date must be in yyyyMMdd format (optional)
     * @param time The time must be in HHmm format (optional)
     * @param timeIs Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)
     * @param journeyPreference The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)
     * @param mode The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)
     * @param accessibilityPreference The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)
     * @param fromName An optional name to associate with the origin of the journey in the results. (optional)
     * @param toName An optional name to associate with the destination of the journey in the results. (optional)
     * @param viaName An optional name to associate with the via point of the journey in the results. (optional)
     * @param maxTransferMinutes The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)
     * @param maxWalkingMinutes The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)
     * @param walkingSpeed The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)
     * @param cyclePreference The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)
     * @param adjustment Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)
     * @param bikeProficiency A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)
     * @param alternativeCycle Option to determine whether to return alternative cycling journey (optional)
     * @param alternativeWalking Option to determine whether to return alternative walking journey (optional)
     * @param applyHtmlMarkup Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)
     * @param useMultiModalCall A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)
     * @param walkingOptimization A boolean to indicate whether to optimize journeys using walking (optional)
     * @param taxiOnlyTrip A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \&quot;useMultiModalCall\&quot;. (optional)
     * @param routeBetweenEntrances A boolean to indicate whether public transport routes should include directions between platforms and station entrances. (optional)
     * @param useRealTimeLiveArrivals A boolean to indicate if we want to receive real time live arrivals data where available. (optional)
     * @param calcOneDirection A boolean to make Journey Planner calculate journeys in one temporal direction only. In other words, only calculate journeys after the &#39;depart&#39; time, or before the &#39;arrive&#39; time. By default, the Journey Planner engine (EFA) calculates journeys in both temporal directions. (optional)
     * @return TflApiPresentationEntitiesJourneyPlannerItineraryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TflApiPresentationEntitiesJourneyPlannerItineraryResult journeyJourneyResults(String from, String to, String via, Boolean nationalSearch, String date, String time, String timeIs, String journeyPreference, List<String> mode, List<String> accessibilityPreference, String fromName, String toName, String viaName, String maxTransferMinutes, String maxWalkingMinutes, String walkingSpeed, String cyclePreference, String adjustment, List<String> bikeProficiency, Boolean alternativeCycle, Boolean alternativeWalking, Boolean applyHtmlMarkup, Boolean useMultiModalCall, Boolean walkingOptimization, Boolean taxiOnlyTrip, Boolean routeBetweenEntrances, Boolean useRealTimeLiveArrivals, Boolean calcOneDirection) throws ApiException {
        ApiResponse<TflApiPresentationEntitiesJourneyPlannerItineraryResult> localVarResp = journeyJourneyResultsWithHttpInfo(from, to, via, nationalSearch, date, time, timeIs, journeyPreference, mode, accessibilityPreference, fromName, toName, viaName, maxTransferMinutes, maxWalkingMinutes, walkingSpeed, cyclePreference, adjustment, bikeProficiency, alternativeCycle, alternativeWalking, applyHtmlMarkup, useMultiModalCall, walkingOptimization, taxiOnlyTrip, routeBetweenEntrances, useRealTimeLiveArrivals, calcOneDirection);
        return localVarResp.getData();
    }

    /**
     * Perform a Journey Planner search from the parameters specified in simple types
     * 
     * @param from Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (required)
     * @param to Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (required)
     * @param via Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)
     * @param nationalSearch Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)
     * @param date The date must be in yyyyMMdd format (optional)
     * @param time The time must be in HHmm format (optional)
     * @param timeIs Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)
     * @param journeyPreference The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)
     * @param mode The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)
     * @param accessibilityPreference The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)
     * @param fromName An optional name to associate with the origin of the journey in the results. (optional)
     * @param toName An optional name to associate with the destination of the journey in the results. (optional)
     * @param viaName An optional name to associate with the via point of the journey in the results. (optional)
     * @param maxTransferMinutes The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)
     * @param maxWalkingMinutes The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)
     * @param walkingSpeed The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)
     * @param cyclePreference The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)
     * @param adjustment Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)
     * @param bikeProficiency A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)
     * @param alternativeCycle Option to determine whether to return alternative cycling journey (optional)
     * @param alternativeWalking Option to determine whether to return alternative walking journey (optional)
     * @param applyHtmlMarkup Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)
     * @param useMultiModalCall A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)
     * @param walkingOptimization A boolean to indicate whether to optimize journeys using walking (optional)
     * @param taxiOnlyTrip A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \&quot;useMultiModalCall\&quot;. (optional)
     * @param routeBetweenEntrances A boolean to indicate whether public transport routes should include directions between platforms and station entrances. (optional)
     * @param useRealTimeLiveArrivals A boolean to indicate if we want to receive real time live arrivals data where available. (optional)
     * @param calcOneDirection A boolean to make Journey Planner calculate journeys in one temporal direction only. In other words, only calculate journeys after the &#39;depart&#39; time, or before the &#39;arrive&#39; time. By default, the Journey Planner engine (EFA) calculates journeys in both temporal directions. (optional)
     * @return ApiResponse&lt;TflApiPresentationEntitiesJourneyPlannerItineraryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TflApiPresentationEntitiesJourneyPlannerItineraryResult> journeyJourneyResultsWithHttpInfo(String from, String to, String via, Boolean nationalSearch, String date, String time, String timeIs, String journeyPreference, List<String> mode, List<String> accessibilityPreference, String fromName, String toName, String viaName, String maxTransferMinutes, String maxWalkingMinutes, String walkingSpeed, String cyclePreference, String adjustment, List<String> bikeProficiency, Boolean alternativeCycle, Boolean alternativeWalking, Boolean applyHtmlMarkup, Boolean useMultiModalCall, Boolean walkingOptimization, Boolean taxiOnlyTrip, Boolean routeBetweenEntrances, Boolean useRealTimeLiveArrivals, Boolean calcOneDirection) throws ApiException {
        okhttp3.Call localVarCall = journeyJourneyResultsValidateBeforeCall(from, to, via, nationalSearch, date, time, timeIs, journeyPreference, mode, accessibilityPreference, fromName, toName, viaName, maxTransferMinutes, maxWalkingMinutes, walkingSpeed, cyclePreference, adjustment, bikeProficiency, alternativeCycle, alternativeWalking, applyHtmlMarkup, useMultiModalCall, walkingOptimization, taxiOnlyTrip, routeBetweenEntrances, useRealTimeLiveArrivals, calcOneDirection, null);
        Type localVarReturnType = new TypeToken<TflApiPresentationEntitiesJourneyPlannerItineraryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform a Journey Planner search from the parameters specified in simple types (asynchronously)
     * 
     * @param from Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (required)
     * @param to Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (required)
     * @param via Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)
     * @param nationalSearch Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)
     * @param date The date must be in yyyyMMdd format (optional)
     * @param time The time must be in HHmm format (optional)
     * @param timeIs Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)
     * @param journeyPreference The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)
     * @param mode The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)
     * @param accessibilityPreference The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)
     * @param fromName An optional name to associate with the origin of the journey in the results. (optional)
     * @param toName An optional name to associate with the destination of the journey in the results. (optional)
     * @param viaName An optional name to associate with the via point of the journey in the results. (optional)
     * @param maxTransferMinutes The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)
     * @param maxWalkingMinutes The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)
     * @param walkingSpeed The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)
     * @param cyclePreference The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)
     * @param adjustment Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)
     * @param bikeProficiency A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)
     * @param alternativeCycle Option to determine whether to return alternative cycling journey (optional)
     * @param alternativeWalking Option to determine whether to return alternative walking journey (optional)
     * @param applyHtmlMarkup Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)
     * @param useMultiModalCall A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)
     * @param walkingOptimization A boolean to indicate whether to optimize journeys using walking (optional)
     * @param taxiOnlyTrip A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \&quot;useMultiModalCall\&quot;. (optional)
     * @param routeBetweenEntrances A boolean to indicate whether public transport routes should include directions between platforms and station entrances. (optional)
     * @param useRealTimeLiveArrivals A boolean to indicate if we want to receive real time live arrivals data where available. (optional)
     * @param calcOneDirection A boolean to make Journey Planner calculate journeys in one temporal direction only. In other words, only calculate journeys after the &#39;depart&#39; time, or before the &#39;arrive&#39; time. By default, the Journey Planner engine (EFA) calculates journeys in both temporal directions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call journeyJourneyResultsAsync(String from, String to, String via, Boolean nationalSearch, String date, String time, String timeIs, String journeyPreference, List<String> mode, List<String> accessibilityPreference, String fromName, String toName, String viaName, String maxTransferMinutes, String maxWalkingMinutes, String walkingSpeed, String cyclePreference, String adjustment, List<String> bikeProficiency, Boolean alternativeCycle, Boolean alternativeWalking, Boolean applyHtmlMarkup, Boolean useMultiModalCall, Boolean walkingOptimization, Boolean taxiOnlyTrip, Boolean routeBetweenEntrances, Boolean useRealTimeLiveArrivals, Boolean calcOneDirection, final ApiCallback<TflApiPresentationEntitiesJourneyPlannerItineraryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = journeyJourneyResultsValidateBeforeCall(from, to, via, nationalSearch, date, time, timeIs, journeyPreference, mode, accessibilityPreference, fromName, toName, viaName, maxTransferMinutes, maxWalkingMinutes, walkingSpeed, cyclePreference, adjustment, bikeProficiency, alternativeCycle, alternativeWalking, applyHtmlMarkup, useMultiModalCall, walkingOptimization, taxiOnlyTrip, routeBetweenEntrances, useRealTimeLiveArrivals, calcOneDirection, _callback);
        Type localVarReturnType = new TypeToken<TflApiPresentationEntitiesJourneyPlannerItineraryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for journeyMeta
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call journeyMetaCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Journey/Meta/Modes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call journeyMetaValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return journeyMetaCall(_callback);

    }

    /**
     * Gets a list of all of the available journey planner modes
     * 
     * @return List&lt;TflApiPresentationEntitiesMode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesMode> journeyMeta() throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesMode>> localVarResp = journeyMetaWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets a list of all of the available journey planner modes
     * 
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesMode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesMode>> journeyMetaWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = journeyMetaValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesMode>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of all of the available journey planner modes (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call journeyMetaAsync(final ApiCallback<List<TflApiPresentationEntitiesMode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = journeyMetaValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesMode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
