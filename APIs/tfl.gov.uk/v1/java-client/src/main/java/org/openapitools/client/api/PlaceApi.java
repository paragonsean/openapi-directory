/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.TflApiPresentationEntitiesPlace;
import org.openapitools.client.model.TflApiPresentationEntitiesPlaceCategory;
import org.openapitools.client.model.TflApiPresentationEntitiesStopPoint;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlaceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlaceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlaceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for placeGet
     * @param id The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids (required)
     * @param includeChildren Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeGetCall(String id, Boolean includeChildren, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Place/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeChildren", includeChildren));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeGetValidateBeforeCall(String id, Boolean includeChildren, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling placeGet(Async)");
        }

        return placeGetCall(id, includeChildren, _callback);

    }

    /**
     * Gets the place with the given id.
     * 
     * @param id The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids (required)
     * @param includeChildren Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @return List&lt;TflApiPresentationEntitiesPlace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesPlace> placeGet(String id, Boolean includeChildren) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesPlace>> localVarResp = placeGetWithHttpInfo(id, includeChildren);
        return localVarResp.getData();
    }

    /**
     * Gets the place with the given id.
     * 
     * @param id The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids (required)
     * @param includeChildren Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesPlace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesPlace>> placeGetWithHttpInfo(String id, Boolean includeChildren) throws ApiException {
        okhttp3.Call localVarCall = placeGetValidateBeforeCall(id, includeChildren, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesPlace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the place with the given id. (asynchronously)
     * 
     * @param id The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids (required)
     * @param includeChildren Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeGetAsync(String id, Boolean includeChildren, final ApiCallback<List<TflApiPresentationEntitiesPlace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeGetValidateBeforeCall(id, includeChildren, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesPlace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeGetAt
     * @param type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param lat  (required)
     * @param lon  (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @param lat2 Automatically added (required)
     * @param lon2 Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeGetAtCall(List<String> type, String lat, String lon, Double locationLat, Double locationLon, String lat2, String lon2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Place/{type}/At/{Lat}/{Lon}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", type)))
            .replace("{" + "Lat" + "}", localVarApiClient.escapeString(lat2.toString()))
            .replace("{" + "Lon" + "}", localVarApiClient.escapeString(lon2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (locationLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location.lat", locationLat));
        }

        if (locationLon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location.lon", locationLon));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeGetAtValidateBeforeCall(List<String> type, String lat, String lon, Double locationLat, Double locationLon, String lat2, String lon2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling placeGetAt(Async)");
        }

        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling placeGetAt(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling placeGetAt(Async)");
        }

        // verify the required parameter 'locationLat' is set
        if (locationLat == null) {
            throw new ApiException("Missing the required parameter 'locationLat' when calling placeGetAt(Async)");
        }

        // verify the required parameter 'locationLon' is set
        if (locationLon == null) {
            throw new ApiException("Missing the required parameter 'locationLon' when calling placeGetAt(Async)");
        }

        // verify the required parameter 'lat2' is set
        if (lat2 == null) {
            throw new ApiException("Missing the required parameter 'lat2' when calling placeGetAt(Async)");
        }

        // verify the required parameter 'lon2' is set
        if (lon2 == null) {
            throw new ApiException("Missing the required parameter 'lon2' when calling placeGetAt(Async)");
        }

        return placeGetAtCall(type, lat, lon, locationLat, locationLon, lat2, lon2, _callback);

    }

    /**
     * Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary.
     * 
     * @param type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param lat  (required)
     * @param lon  (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @param lat2 Automatically added (required)
     * @param lon2 Automatically added (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object placeGetAt(List<String> type, String lat, String lon, Double locationLat, Double locationLon, String lat2, String lon2) throws ApiException {
        ApiResponse<Object> localVarResp = placeGetAtWithHttpInfo(type, lat, lon, locationLat, locationLon, lat2, lon2);
        return localVarResp.getData();
    }

    /**
     * Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary.
     * 
     * @param type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param lat  (required)
     * @param lon  (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @param lat2 Automatically added (required)
     * @param lon2 Automatically added (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> placeGetAtWithHttpInfo(List<String> type, String lat, String lon, Double locationLat, Double locationLon, String lat2, String lon2) throws ApiException {
        okhttp3.Call localVarCall = placeGetAtValidateBeforeCall(type, lat, lon, locationLat, locationLon, lat2, lon2, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary. (asynchronously)
     * 
     * @param type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param lat  (required)
     * @param lon  (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @param lat2 Automatically added (required)
     * @param lon2 Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeGetAtAsync(List<String> type, String lat, String lon, Double locationLat, Double locationLon, String lat2, String lon2, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeGetAtValidateBeforeCall(type, lat, lon, locationLat, locationLon, lat2, lon2, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeGetByGeo
     * @param radius The radius of the bounding circle in metres when only lat/lon are specified. (optional)
     * @param categories An optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)
     * @param includeChildren Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @param type Place types to filter on, or null to return all types (optional)
     * @param activeOnly An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @param numberOfPlacesToReturn If specified, limits the number of returned places equal to the given value (optional)
     * @param placeGeoSwLat  (optional)
     * @param placeGeoSwLon  (optional)
     * @param placeGeoNeLat  (optional)
     * @param placeGeoNeLon  (optional)
     * @param placeGeoLat  (optional)
     * @param placeGeoLon  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeGetByGeoCall(Double radius, List<String> categories, Boolean includeChildren, List<String> type, Boolean activeOnly, Integer numberOfPlacesToReturn, Double placeGeoSwLat, Double placeGeoSwLon, Double placeGeoNeLat, Double placeGeoNeLon, Double placeGeoLat, Double placeGeoLon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Place";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (categories != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "categories", categories));
        }

        if (includeChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeChildren", includeChildren));
        }

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "type", type));
        }

        if (activeOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activeOnly", activeOnly));
        }

        if (numberOfPlacesToReturn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfPlacesToReturn", numberOfPlacesToReturn));
        }

        if (placeGeoSwLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("placeGeo.swLat", placeGeoSwLat));
        }

        if (placeGeoSwLon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("placeGeo.swLon", placeGeoSwLon));
        }

        if (placeGeoNeLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("placeGeo.neLat", placeGeoNeLat));
        }

        if (placeGeoNeLon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("placeGeo.neLon", placeGeoNeLon));
        }

        if (placeGeoLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("placeGeo.lat", placeGeoLat));
        }

        if (placeGeoLon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("placeGeo.lon", placeGeoLon));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeGetByGeoValidateBeforeCall(Double radius, List<String> categories, Boolean includeChildren, List<String> type, Boolean activeOnly, Integer numberOfPlacesToReturn, Double placeGeoSwLat, Double placeGeoSwLon, Double placeGeoNeLat, Double placeGeoNeLon, Double placeGeoLat, Double placeGeoLon, final ApiCallback _callback) throws ApiException {
        return placeGetByGeoCall(radius, categories, includeChildren, type, activeOnly, numberOfPlacesToReturn, placeGeoSwLat, placeGeoSwLon, placeGeoNeLat, placeGeoNeLon, placeGeoLat, placeGeoLon, _callback);

    }

    /**
     * Gets the places that lie within a geographic region. The geographic region of interest can either be specified              by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of              its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.              Optionally filters on type and can strip properties for a smaller payload.
     * 
     * @param radius The radius of the bounding circle in metres when only lat/lon are specified. (optional)
     * @param categories An optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)
     * @param includeChildren Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @param type Place types to filter on, or null to return all types (optional)
     * @param activeOnly An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @param numberOfPlacesToReturn If specified, limits the number of returned places equal to the given value (optional)
     * @param placeGeoSwLat  (optional)
     * @param placeGeoSwLon  (optional)
     * @param placeGeoNeLat  (optional)
     * @param placeGeoNeLon  (optional)
     * @param placeGeoLat  (optional)
     * @param placeGeoLon  (optional)
     * @return List&lt;TflApiPresentationEntitiesStopPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesStopPoint> placeGetByGeo(Double radius, List<String> categories, Boolean includeChildren, List<String> type, Boolean activeOnly, Integer numberOfPlacesToReturn, Double placeGeoSwLat, Double placeGeoSwLon, Double placeGeoNeLat, Double placeGeoNeLon, Double placeGeoLat, Double placeGeoLon) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesStopPoint>> localVarResp = placeGetByGeoWithHttpInfo(radius, categories, includeChildren, type, activeOnly, numberOfPlacesToReturn, placeGeoSwLat, placeGeoSwLon, placeGeoNeLat, placeGeoNeLon, placeGeoLat, placeGeoLon);
        return localVarResp.getData();
    }

    /**
     * Gets the places that lie within a geographic region. The geographic region of interest can either be specified              by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of              its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.              Optionally filters on type and can strip properties for a smaller payload.
     * 
     * @param radius The radius of the bounding circle in metres when only lat/lon are specified. (optional)
     * @param categories An optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)
     * @param includeChildren Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @param type Place types to filter on, or null to return all types (optional)
     * @param activeOnly An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @param numberOfPlacesToReturn If specified, limits the number of returned places equal to the given value (optional)
     * @param placeGeoSwLat  (optional)
     * @param placeGeoSwLon  (optional)
     * @param placeGeoNeLat  (optional)
     * @param placeGeoNeLon  (optional)
     * @param placeGeoLat  (optional)
     * @param placeGeoLon  (optional)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesStopPoint&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesStopPoint>> placeGetByGeoWithHttpInfo(Double radius, List<String> categories, Boolean includeChildren, List<String> type, Boolean activeOnly, Integer numberOfPlacesToReturn, Double placeGeoSwLat, Double placeGeoSwLon, Double placeGeoNeLat, Double placeGeoNeLon, Double placeGeoLat, Double placeGeoLon) throws ApiException {
        okhttp3.Call localVarCall = placeGetByGeoValidateBeforeCall(radius, categories, includeChildren, type, activeOnly, numberOfPlacesToReturn, placeGeoSwLat, placeGeoSwLon, placeGeoNeLat, placeGeoNeLon, placeGeoLat, placeGeoLon, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesStopPoint>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the places that lie within a geographic region. The geographic region of interest can either be specified              by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of              its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.              Optionally filters on type and can strip properties for a smaller payload. (asynchronously)
     * 
     * @param radius The radius of the bounding circle in metres when only lat/lon are specified. (optional)
     * @param categories An optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)
     * @param includeChildren Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @param type Place types to filter on, or null to return all types (optional)
     * @param activeOnly An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @param numberOfPlacesToReturn If specified, limits the number of returned places equal to the given value (optional)
     * @param placeGeoSwLat  (optional)
     * @param placeGeoSwLon  (optional)
     * @param placeGeoNeLat  (optional)
     * @param placeGeoNeLon  (optional)
     * @param placeGeoLat  (optional)
     * @param placeGeoLon  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeGetByGeoAsync(Double radius, List<String> categories, Boolean includeChildren, List<String> type, Boolean activeOnly, Integer numberOfPlacesToReturn, Double placeGeoSwLat, Double placeGeoSwLon, Double placeGeoNeLat, Double placeGeoNeLon, Double placeGeoLat, Double placeGeoLon, final ApiCallback<List<TflApiPresentationEntitiesStopPoint>> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeGetByGeoValidateBeforeCall(radius, categories, includeChildren, type, activeOnly, numberOfPlacesToReturn, placeGeoSwLat, placeGeoSwLon, placeGeoNeLat, placeGeoNeLon, placeGeoLat, placeGeoLon, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesStopPoint>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeGetByType
     * @param types A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint. (required)
     * @param activeOnly An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeGetByTypeCall(List<String> types, Boolean activeOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Place/Type/{types}"
            .replace("{" + "types" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", types)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (activeOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activeOnly", activeOnly));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeGetByTypeValidateBeforeCall(List<String> types, Boolean activeOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'types' is set
        if (types == null) {
            throw new ApiException("Missing the required parameter 'types' when calling placeGetByType(Async)");
        }

        return placeGetByTypeCall(types, activeOnly, _callback);

    }

    /**
     * Gets all places of a given type
     * 
     * @param types A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint. (required)
     * @param activeOnly An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @return List&lt;TflApiPresentationEntitiesPlace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesPlace> placeGetByType(List<String> types, Boolean activeOnly) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesPlace>> localVarResp = placeGetByTypeWithHttpInfo(types, activeOnly);
        return localVarResp.getData();
    }

    /**
     * Gets all places of a given type
     * 
     * @param types A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint. (required)
     * @param activeOnly An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesPlace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesPlace>> placeGetByTypeWithHttpInfo(List<String> types, Boolean activeOnly) throws ApiException {
        okhttp3.Call localVarCall = placeGetByTypeValidateBeforeCall(types, activeOnly, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesPlace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all places of a given type (asynchronously)
     * 
     * @param types A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint. (required)
     * @param activeOnly An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeGetByTypeAsync(List<String> types, Boolean activeOnly, final ApiCallback<List<TflApiPresentationEntitiesPlace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeGetByTypeValidateBeforeCall(types, activeOnly, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesPlace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeGetOverlay
     * @param z The zoom level (required)
     * @param type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param lat  (required)
     * @param lon  (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @param lat2 Automatically added (required)
     * @param lon2 Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeGetOverlayCall(Integer z, List<String> type, Integer width, Integer height, String lat, String lon, Double locationLat, Double locationLon, String lat2, String lon2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}"
            .replace("{" + "z" + "}", localVarApiClient.escapeString(z.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", type)))
            .replace("{" + "width" + "}", localVarApiClient.escapeString(width.toString()))
            .replace("{" + "height" + "}", localVarApiClient.escapeString(height.toString()))
            .replace("{" + "Lat" + "}", localVarApiClient.escapeString(lat2.toString()))
            .replace("{" + "Lon" + "}", localVarApiClient.escapeString(lon2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (locationLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location.lat", locationLat));
        }

        if (locationLon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location.lon", locationLon));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeGetOverlayValidateBeforeCall(Integer z, List<String> type, Integer width, Integer height, String lat, String lon, Double locationLat, Double locationLon, String lat2, String lon2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'z' is set
        if (z == null) {
            throw new ApiException("Missing the required parameter 'z' when calling placeGetOverlay(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling placeGetOverlay(Async)");
        }

        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling placeGetOverlay(Async)");
        }

        // verify the required parameter 'height' is set
        if (height == null) {
            throw new ApiException("Missing the required parameter 'height' when calling placeGetOverlay(Async)");
        }

        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling placeGetOverlay(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling placeGetOverlay(Async)");
        }

        // verify the required parameter 'locationLat' is set
        if (locationLat == null) {
            throw new ApiException("Missing the required parameter 'locationLat' when calling placeGetOverlay(Async)");
        }

        // verify the required parameter 'locationLon' is set
        if (locationLon == null) {
            throw new ApiException("Missing the required parameter 'locationLon' when calling placeGetOverlay(Async)");
        }

        // verify the required parameter 'lat2' is set
        if (lat2 == null) {
            throw new ApiException("Missing the required parameter 'lat2' when calling placeGetOverlay(Async)");
        }

        // verify the required parameter 'lon2' is set
        if (lon2 == null) {
            throw new ApiException("Missing the required parameter 'lon2' when calling placeGetOverlay(Async)");
        }

        return placeGetOverlayCall(z, type, width, height, lat, lon, locationLat, locationLon, lat2, lon2, _callback);

    }

    /**
     * Gets the place overlay for a given set of co-ordinates and a given width/height.
     * 
     * @param z The zoom level (required)
     * @param type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param lat  (required)
     * @param lon  (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @param lat2 Automatically added (required)
     * @param lon2 Automatically added (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object placeGetOverlay(Integer z, List<String> type, Integer width, Integer height, String lat, String lon, Double locationLat, Double locationLon, String lat2, String lon2) throws ApiException {
        ApiResponse<Object> localVarResp = placeGetOverlayWithHttpInfo(z, type, width, height, lat, lon, locationLat, locationLon, lat2, lon2);
        return localVarResp.getData();
    }

    /**
     * Gets the place overlay for a given set of co-ordinates and a given width/height.
     * 
     * @param z The zoom level (required)
     * @param type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param lat  (required)
     * @param lon  (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @param lat2 Automatically added (required)
     * @param lon2 Automatically added (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> placeGetOverlayWithHttpInfo(Integer z, List<String> type, Integer width, Integer height, String lat, String lon, Double locationLat, Double locationLon, String lat2, String lon2) throws ApiException {
        okhttp3.Call localVarCall = placeGetOverlayValidateBeforeCall(z, type, width, height, lat, lon, locationLat, locationLon, lat2, lon2, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the place overlay for a given set of co-ordinates and a given width/height. (asynchronously)
     * 
     * @param z The zoom level (required)
     * @param type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param lat  (required)
     * @param lon  (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @param lat2 Automatically added (required)
     * @param lon2 Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeGetOverlayAsync(Integer z, List<String> type, Integer width, Integer height, String lat, String lon, Double locationLat, Double locationLon, String lat2, String lon2, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeGetOverlayValidateBeforeCall(z, type, width, height, lat, lon, locationLat, locationLon, lat2, lon2, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeGetStreetsByPostCode
     * @param postcode  (required)
     * @param postcode2 Automatically added (required)
     * @param postcodeInputPostcode  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeGetStreetsByPostCodeCall(String postcode, String postcode2, String postcodeInputPostcode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Place/Address/Streets/{Postcode}"
            .replace("{" + "Postcode" + "}", localVarApiClient.escapeString(postcode2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (postcode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postcode", postcode));
        }

        if (postcodeInputPostcode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postcodeInput.postcode", postcodeInputPostcode));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeGetStreetsByPostCodeValidateBeforeCall(String postcode, String postcode2, String postcodeInputPostcode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postcode' is set
        if (postcode == null) {
            throw new ApiException("Missing the required parameter 'postcode' when calling placeGetStreetsByPostCode(Async)");
        }

        // verify the required parameter 'postcode2' is set
        if (postcode2 == null) {
            throw new ApiException("Missing the required parameter 'postcode2' when calling placeGetStreetsByPostCode(Async)");
        }

        return placeGetStreetsByPostCodeCall(postcode, postcode2, postcodeInputPostcode, _callback);

    }

    /**
     * Gets the set of streets associated with a post code.
     * 
     * @param postcode  (required)
     * @param postcode2 Automatically added (required)
     * @param postcodeInputPostcode  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object placeGetStreetsByPostCode(String postcode, String postcode2, String postcodeInputPostcode) throws ApiException {
        ApiResponse<Object> localVarResp = placeGetStreetsByPostCodeWithHttpInfo(postcode, postcode2, postcodeInputPostcode);
        return localVarResp.getData();
    }

    /**
     * Gets the set of streets associated with a post code.
     * 
     * @param postcode  (required)
     * @param postcode2 Automatically added (required)
     * @param postcodeInputPostcode  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> placeGetStreetsByPostCodeWithHttpInfo(String postcode, String postcode2, String postcodeInputPostcode) throws ApiException {
        okhttp3.Call localVarCall = placeGetStreetsByPostCodeValidateBeforeCall(postcode, postcode2, postcodeInputPostcode, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the set of streets associated with a post code. (asynchronously)
     * 
     * @param postcode  (required)
     * @param postcode2 Automatically added (required)
     * @param postcodeInputPostcode  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeGetStreetsByPostCodeAsync(String postcode, String postcode2, String postcodeInputPostcode, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeGetStreetsByPostCodeValidateBeforeCall(postcode, postcode2, postcodeInputPostcode, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeMetaCategories
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeMetaCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Place/Meta/Categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeMetaCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return placeMetaCategoriesCall(_callback);

    }

    /**
     * Gets a list of all of the available place property categories and keys.
     * 
     * @return List&lt;TflApiPresentationEntitiesPlaceCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesPlaceCategory> placeMetaCategories() throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesPlaceCategory>> localVarResp = placeMetaCategoriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets a list of all of the available place property categories and keys.
     * 
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesPlaceCategory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesPlaceCategory>> placeMetaCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = placeMetaCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesPlaceCategory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of all of the available place property categories and keys. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeMetaCategoriesAsync(final ApiCallback<List<TflApiPresentationEntitiesPlaceCategory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeMetaCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesPlaceCategory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeMetaPlaceTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeMetaPlaceTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Place/Meta/PlaceTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeMetaPlaceTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return placeMetaPlaceTypesCall(_callback);

    }

    /**
     * Gets a list of the available types of Place.
     * 
     * @return List&lt;TflApiPresentationEntitiesPlaceCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesPlaceCategory> placeMetaPlaceTypes() throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesPlaceCategory>> localVarResp = placeMetaPlaceTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets a list of the available types of Place.
     * 
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesPlaceCategory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesPlaceCategory>> placeMetaPlaceTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = placeMetaPlaceTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesPlaceCategory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of the available types of Place. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeMetaPlaceTypesAsync(final ApiCallback<List<TflApiPresentationEntitiesPlaceCategory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeMetaPlaceTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesPlaceCategory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeSearch
     * @param name The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names. (required)
     * @param types A comma-separated list of the types to return. Max. approx 12 types. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeSearchCall(String name, List<String> types, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Place/Search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (types != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "types", types));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeSearchValidateBeforeCall(String name, List<String> types, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling placeSearch(Async)");
        }

        return placeSearchCall(name, types, _callback);

    }

    /**
     * Gets all places that matches the given query
     * 
     * @param name The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names. (required)
     * @param types A comma-separated list of the types to return. Max. approx 12 types. (optional)
     * @return List&lt;TflApiPresentationEntitiesPlace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TflApiPresentationEntitiesPlace> placeSearch(String name, List<String> types) throws ApiException {
        ApiResponse<List<TflApiPresentationEntitiesPlace>> localVarResp = placeSearchWithHttpInfo(name, types);
        return localVarResp.getData();
    }

    /**
     * Gets all places that matches the given query
     * 
     * @param name The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names. (required)
     * @param types A comma-separated list of the types to return. Max. approx 12 types. (optional)
     * @return ApiResponse&lt;List&lt;TflApiPresentationEntitiesPlace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TflApiPresentationEntitiesPlace>> placeSearchWithHttpInfo(String name, List<String> types) throws ApiException {
        okhttp3.Call localVarCall = placeSearchValidateBeforeCall(name, types, null);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesPlace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all places that matches the given query (asynchronously)
     * 
     * @param name The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names. (required)
     * @param types A comma-separated list of the types to return. Max. approx 12 types. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeSearchAsync(String name, List<String> types, final ApiCallback<List<TflApiPresentationEntitiesPlace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeSearchValidateBeforeCall(name, types, _callback);
        Type localVarReturnType = new TypeToken<List<TflApiPresentationEntitiesPlace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
