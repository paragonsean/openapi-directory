/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TflApiPresentationEntitiesStopPointRouteSection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:40.735472-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TflApiPresentationEntitiesStopPointRouteSection {
  public static final String SERIALIZED_NAME_DESTINATION_NAME = "destinationName";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NAME)
  private String destinationName;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private String direction;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_LINE_ID = "lineId";
  @SerializedName(SERIALIZED_NAME_LINE_ID)
  private String lineId;

  public static final String SERIALIZED_NAME_LINE_STRING = "lineString";
  @SerializedName(SERIALIZED_NAME_LINE_STRING)
  private String lineString;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private String mode;

  public static final String SERIALIZED_NAME_NAPTAN_ID = "naptanId";
  @SerializedName(SERIALIZED_NAME_NAPTAN_ID)
  private String naptanId;

  public static final String SERIALIZED_NAME_ROUTE_SECTION_NAME = "routeSectionName";
  @SerializedName(SERIALIZED_NAME_ROUTE_SECTION_NAME)
  private String routeSectionName;

  public static final String SERIALIZED_NAME_SERVICE_TYPE = "serviceType";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE)
  private String serviceType;

  public static final String SERIALIZED_NAME_VALID_FROM = "validFrom";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  private OffsetDateTime validFrom;

  public static final String SERIALIZED_NAME_VALID_TO = "validTo";
  @SerializedName(SERIALIZED_NAME_VALID_TO)
  private OffsetDateTime validTo;

  public static final String SERIALIZED_NAME_VEHICLE_DESTINATION_TEXT = "vehicleDestinationText";
  @SerializedName(SERIALIZED_NAME_VEHICLE_DESTINATION_TEXT)
  private String vehicleDestinationText;

  public TflApiPresentationEntitiesStopPointRouteSection() {
  }

  public TflApiPresentationEntitiesStopPointRouteSection destinationName(String destinationName) {
    this.destinationName = destinationName;
    return this;
  }

  /**
   * Get destinationName
   * @return destinationName
   */
  @javax.annotation.Nullable
  public String getDestinationName() {
    return destinationName;
  }

  public void setDestinationName(String destinationName) {
    this.destinationName = destinationName;
  }


  public TflApiPresentationEntitiesStopPointRouteSection direction(String direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Get direction
   * @return direction
   */
  @javax.annotation.Nullable
  public String getDirection() {
    return direction;
  }

  public void setDirection(String direction) {
    this.direction = direction;
  }


  public TflApiPresentationEntitiesStopPointRouteSection isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Get isActive
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public TflApiPresentationEntitiesStopPointRouteSection lineId(String lineId) {
    this.lineId = lineId;
    return this;
  }

  /**
   * Get lineId
   * @return lineId
   */
  @javax.annotation.Nullable
  public String getLineId() {
    return lineId;
  }

  public void setLineId(String lineId) {
    this.lineId = lineId;
  }


  public TflApiPresentationEntitiesStopPointRouteSection lineString(String lineString) {
    this.lineString = lineString;
    return this;
  }

  /**
   * Get lineString
   * @return lineString
   */
  @javax.annotation.Nullable
  public String getLineString() {
    return lineString;
  }

  public void setLineString(String lineString) {
    this.lineString = lineString;
  }


  public TflApiPresentationEntitiesStopPointRouteSection mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }


  public TflApiPresentationEntitiesStopPointRouteSection naptanId(String naptanId) {
    this.naptanId = naptanId;
    return this;
  }

  /**
   * Get naptanId
   * @return naptanId
   */
  @javax.annotation.Nullable
  public String getNaptanId() {
    return naptanId;
  }

  public void setNaptanId(String naptanId) {
    this.naptanId = naptanId;
  }


  public TflApiPresentationEntitiesStopPointRouteSection routeSectionName(String routeSectionName) {
    this.routeSectionName = routeSectionName;
    return this;
  }

  /**
   * Get routeSectionName
   * @return routeSectionName
   */
  @javax.annotation.Nullable
  public String getRouteSectionName() {
    return routeSectionName;
  }

  public void setRouteSectionName(String routeSectionName) {
    this.routeSectionName = routeSectionName;
  }


  public TflApiPresentationEntitiesStopPointRouteSection serviceType(String serviceType) {
    this.serviceType = serviceType;
    return this;
  }

  /**
   * Get serviceType
   * @return serviceType
   */
  @javax.annotation.Nullable
  public String getServiceType() {
    return serviceType;
  }

  public void setServiceType(String serviceType) {
    this.serviceType = serviceType;
  }


  public TflApiPresentationEntitiesStopPointRouteSection validFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
    return this;
  }

  /**
   * Get validFrom
   * @return validFrom
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidFrom() {
    return validFrom;
  }

  public void setValidFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
  }


  public TflApiPresentationEntitiesStopPointRouteSection validTo(OffsetDateTime validTo) {
    this.validTo = validTo;
    return this;
  }

  /**
   * Get validTo
   * @return validTo
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidTo() {
    return validTo;
  }

  public void setValidTo(OffsetDateTime validTo) {
    this.validTo = validTo;
  }


  public TflApiPresentationEntitiesStopPointRouteSection vehicleDestinationText(String vehicleDestinationText) {
    this.vehicleDestinationText = vehicleDestinationText;
    return this;
  }

  /**
   * Get vehicleDestinationText
   * @return vehicleDestinationText
   */
  @javax.annotation.Nullable
  public String getVehicleDestinationText() {
    return vehicleDestinationText;
  }

  public void setVehicleDestinationText(String vehicleDestinationText) {
    this.vehicleDestinationText = vehicleDestinationText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TflApiPresentationEntitiesStopPointRouteSection tflApiPresentationEntitiesStopPointRouteSection = (TflApiPresentationEntitiesStopPointRouteSection) o;
    return Objects.equals(this.destinationName, tflApiPresentationEntitiesStopPointRouteSection.destinationName) &&
        Objects.equals(this.direction, tflApiPresentationEntitiesStopPointRouteSection.direction) &&
        Objects.equals(this.isActive, tflApiPresentationEntitiesStopPointRouteSection.isActive) &&
        Objects.equals(this.lineId, tflApiPresentationEntitiesStopPointRouteSection.lineId) &&
        Objects.equals(this.lineString, tflApiPresentationEntitiesStopPointRouteSection.lineString) &&
        Objects.equals(this.mode, tflApiPresentationEntitiesStopPointRouteSection.mode) &&
        Objects.equals(this.naptanId, tflApiPresentationEntitiesStopPointRouteSection.naptanId) &&
        Objects.equals(this.routeSectionName, tflApiPresentationEntitiesStopPointRouteSection.routeSectionName) &&
        Objects.equals(this.serviceType, tflApiPresentationEntitiesStopPointRouteSection.serviceType) &&
        Objects.equals(this.validFrom, tflApiPresentationEntitiesStopPointRouteSection.validFrom) &&
        Objects.equals(this.validTo, tflApiPresentationEntitiesStopPointRouteSection.validTo) &&
        Objects.equals(this.vehicleDestinationText, tflApiPresentationEntitiesStopPointRouteSection.vehicleDestinationText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationName, direction, isActive, lineId, lineString, mode, naptanId, routeSectionName, serviceType, validFrom, validTo, vehicleDestinationText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TflApiPresentationEntitiesStopPointRouteSection {\n");
    sb.append("    destinationName: ").append(toIndentedString(destinationName)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    lineId: ").append(toIndentedString(lineId)).append("\n");
    sb.append("    lineString: ").append(toIndentedString(lineString)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    naptanId: ").append(toIndentedString(naptanId)).append("\n");
    sb.append("    routeSectionName: ").append(toIndentedString(routeSectionName)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validTo: ").append(toIndentedString(validTo)).append("\n");
    sb.append("    vehicleDestinationText: ").append(toIndentedString(vehicleDestinationText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationName");
    openapiFields.add("direction");
    openapiFields.add("isActive");
    openapiFields.add("lineId");
    openapiFields.add("lineString");
    openapiFields.add("mode");
    openapiFields.add("naptanId");
    openapiFields.add("routeSectionName");
    openapiFields.add("serviceType");
    openapiFields.add("validFrom");
    openapiFields.add("validTo");
    openapiFields.add("vehicleDestinationText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TflApiPresentationEntitiesStopPointRouteSection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TflApiPresentationEntitiesStopPointRouteSection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TflApiPresentationEntitiesStopPointRouteSection is not found in the empty JSON string", TflApiPresentationEntitiesStopPointRouteSection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TflApiPresentationEntitiesStopPointRouteSection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TflApiPresentationEntitiesStopPointRouteSection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("destinationName") != null && !jsonObj.get("destinationName").isJsonNull()) && !jsonObj.get("destinationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationName").toString()));
      }
      if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      if ((jsonObj.get("lineId") != null && !jsonObj.get("lineId").isJsonNull()) && !jsonObj.get("lineId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineId").toString()));
      }
      if ((jsonObj.get("lineString") != null && !jsonObj.get("lineString").isJsonNull()) && !jsonObj.get("lineString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineString").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      if ((jsonObj.get("naptanId") != null && !jsonObj.get("naptanId").isJsonNull()) && !jsonObj.get("naptanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `naptanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("naptanId").toString()));
      }
      if ((jsonObj.get("routeSectionName") != null && !jsonObj.get("routeSectionName").isJsonNull()) && !jsonObj.get("routeSectionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeSectionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeSectionName").toString()));
      }
      if ((jsonObj.get("serviceType") != null && !jsonObj.get("serviceType").isJsonNull()) && !jsonObj.get("serviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceType").toString()));
      }
      if ((jsonObj.get("vehicleDestinationText") != null && !jsonObj.get("vehicleDestinationText").isJsonNull()) && !jsonObj.get("vehicleDestinationText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicleDestinationText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicleDestinationText").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TflApiPresentationEntitiesStopPointRouteSection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TflApiPresentationEntitiesStopPointRouteSection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TflApiPresentationEntitiesStopPointRouteSection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TflApiPresentationEntitiesStopPointRouteSection.class));

       return (TypeAdapter<T>) new TypeAdapter<TflApiPresentationEntitiesStopPointRouteSection>() {
           @Override
           public void write(JsonWriter out, TflApiPresentationEntitiesStopPointRouteSection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TflApiPresentationEntitiesStopPointRouteSection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TflApiPresentationEntitiesStopPointRouteSection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TflApiPresentationEntitiesStopPointRouteSection
   * @throws IOException if the JSON string is invalid with respect to TflApiPresentationEntitiesStopPointRouteSection
   */
  public static TflApiPresentationEntitiesStopPointRouteSection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TflApiPresentationEntitiesStopPointRouteSection.class);
  }

  /**
   * Convert an instance of TflApiPresentationEntitiesStopPointRouteSection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

