/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TflApiPresentationEntitiesFaresFare
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:40.735472-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TflApiPresentationEntitiesFaresFare {
  public static final String SERIALIZED_NAME_CAP = "cap";
  @SerializedName(SERIALIZED_NAME_CAP)
  private Double cap;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private String cost;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private String mode;

  public static final String SERIALIZED_NAME_PASSENGER_TYPE = "passengerType";
  @SerializedName(SERIALIZED_NAME_PASSENGER_TYPE)
  private String passengerType;

  public static final String SERIALIZED_NAME_TICKET_TIME = "ticketTime";
  @SerializedName(SERIALIZED_NAME_TICKET_TIME)
  private String ticketTime;

  public static final String SERIALIZED_NAME_TICKET_TYPE = "ticketType";
  @SerializedName(SERIALIZED_NAME_TICKET_TYPE)
  private String ticketType;

  public static final String SERIALIZED_NAME_VALID_FROM = "validFrom";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  private OffsetDateTime validFrom;

  public static final String SERIALIZED_NAME_VALID_UNTIL = "validUntil";
  @SerializedName(SERIALIZED_NAME_VALID_UNTIL)
  private OffsetDateTime validUntil;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public TflApiPresentationEntitiesFaresFare() {
  }

  public TflApiPresentationEntitiesFaresFare cap(Double cap) {
    this.cap = cap;
    return this;
  }

  /**
   * Get cap
   * @return cap
   */
  @javax.annotation.Nullable
  public Double getCap() {
    return cap;
  }

  public void setCap(Double cap) {
    this.cap = cap;
  }


  public TflApiPresentationEntitiesFaresFare cost(String cost) {
    this.cost = cost;
    return this;
  }

  /**
   * Get cost
   * @return cost
   */
  @javax.annotation.Nullable
  public String getCost() {
    return cost;
  }

  public void setCost(String cost) {
    this.cost = cost;
  }


  public TflApiPresentationEntitiesFaresFare description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TflApiPresentationEntitiesFaresFare id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public TflApiPresentationEntitiesFaresFare mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }


  public TflApiPresentationEntitiesFaresFare passengerType(String passengerType) {
    this.passengerType = passengerType;
    return this;
  }

  /**
   * Get passengerType
   * @return passengerType
   */
  @javax.annotation.Nullable
  public String getPassengerType() {
    return passengerType;
  }

  public void setPassengerType(String passengerType) {
    this.passengerType = passengerType;
  }


  public TflApiPresentationEntitiesFaresFare ticketTime(String ticketTime) {
    this.ticketTime = ticketTime;
    return this;
  }

  /**
   * Get ticketTime
   * @return ticketTime
   */
  @javax.annotation.Nullable
  public String getTicketTime() {
    return ticketTime;
  }

  public void setTicketTime(String ticketTime) {
    this.ticketTime = ticketTime;
  }


  public TflApiPresentationEntitiesFaresFare ticketType(String ticketType) {
    this.ticketType = ticketType;
    return this;
  }

  /**
   * Get ticketType
   * @return ticketType
   */
  @javax.annotation.Nullable
  public String getTicketType() {
    return ticketType;
  }

  public void setTicketType(String ticketType) {
    this.ticketType = ticketType;
  }


  public TflApiPresentationEntitiesFaresFare validFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
    return this;
  }

  /**
   * Get validFrom
   * @return validFrom
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidFrom() {
    return validFrom;
  }

  public void setValidFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
  }


  public TflApiPresentationEntitiesFaresFare validUntil(OffsetDateTime validUntil) {
    this.validUntil = validUntil;
    return this;
  }

  /**
   * Get validUntil
   * @return validUntil
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidUntil() {
    return validUntil;
  }

  public void setValidUntil(OffsetDateTime validUntil) {
    this.validUntil = validUntil;
  }


  public TflApiPresentationEntitiesFaresFare zone(String zone) {
    this.zone = zone;
    return this;
  }

  /**
   * Get zone
   * @return zone
   */
  @javax.annotation.Nullable
  public String getZone() {
    return zone;
  }

  public void setZone(String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TflApiPresentationEntitiesFaresFare tflApiPresentationEntitiesFaresFare = (TflApiPresentationEntitiesFaresFare) o;
    return Objects.equals(this.cap, tflApiPresentationEntitiesFaresFare.cap) &&
        Objects.equals(this.cost, tflApiPresentationEntitiesFaresFare.cost) &&
        Objects.equals(this.description, tflApiPresentationEntitiesFaresFare.description) &&
        Objects.equals(this.id, tflApiPresentationEntitiesFaresFare.id) &&
        Objects.equals(this.mode, tflApiPresentationEntitiesFaresFare.mode) &&
        Objects.equals(this.passengerType, tflApiPresentationEntitiesFaresFare.passengerType) &&
        Objects.equals(this.ticketTime, tflApiPresentationEntitiesFaresFare.ticketTime) &&
        Objects.equals(this.ticketType, tflApiPresentationEntitiesFaresFare.ticketType) &&
        Objects.equals(this.validFrom, tflApiPresentationEntitiesFaresFare.validFrom) &&
        Objects.equals(this.validUntil, tflApiPresentationEntitiesFaresFare.validUntil) &&
        Objects.equals(this.zone, tflApiPresentationEntitiesFaresFare.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cap, cost, description, id, mode, passengerType, ticketTime, ticketType, validFrom, validUntil, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TflApiPresentationEntitiesFaresFare {\n");
    sb.append("    cap: ").append(toIndentedString(cap)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    passengerType: ").append(toIndentedString(passengerType)).append("\n");
    sb.append("    ticketTime: ").append(toIndentedString(ticketTime)).append("\n");
    sb.append("    ticketType: ").append(toIndentedString(ticketType)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validUntil: ").append(toIndentedString(validUntil)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cap");
    openapiFields.add("cost");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("mode");
    openapiFields.add("passengerType");
    openapiFields.add("ticketTime");
    openapiFields.add("ticketType");
    openapiFields.add("validFrom");
    openapiFields.add("validUntil");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TflApiPresentationEntitiesFaresFare
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TflApiPresentationEntitiesFaresFare.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TflApiPresentationEntitiesFaresFare is not found in the empty JSON string", TflApiPresentationEntitiesFaresFare.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TflApiPresentationEntitiesFaresFare.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TflApiPresentationEntitiesFaresFare` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cost") != null && !jsonObj.get("cost").isJsonNull()) && !jsonObj.get("cost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cost").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      if ((jsonObj.get("passengerType") != null && !jsonObj.get("passengerType").isJsonNull()) && !jsonObj.get("passengerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passengerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passengerType").toString()));
      }
      if ((jsonObj.get("ticketTime") != null && !jsonObj.get("ticketTime").isJsonNull()) && !jsonObj.get("ticketTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ticketTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ticketTime").toString()));
      }
      if ((jsonObj.get("ticketType") != null && !jsonObj.get("ticketType").isJsonNull()) && !jsonObj.get("ticketType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ticketType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ticketType").toString()));
      }
      if ((jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) && !jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TflApiPresentationEntitiesFaresFare.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TflApiPresentationEntitiesFaresFare' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TflApiPresentationEntitiesFaresFare> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TflApiPresentationEntitiesFaresFare.class));

       return (TypeAdapter<T>) new TypeAdapter<TflApiPresentationEntitiesFaresFare>() {
           @Override
           public void write(JsonWriter out, TflApiPresentationEntitiesFaresFare value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TflApiPresentationEntitiesFaresFare read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TflApiPresentationEntitiesFaresFare given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TflApiPresentationEntitiesFaresFare
   * @throws IOException if the JSON string is invalid with respect to TflApiPresentationEntitiesFaresFare
   */
  public static TflApiPresentationEntitiesFaresFare fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TflApiPresentationEntitiesFaresFare.class);
  }

  /**
   * Convert an instance of TflApiPresentationEntitiesFaresFare to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

