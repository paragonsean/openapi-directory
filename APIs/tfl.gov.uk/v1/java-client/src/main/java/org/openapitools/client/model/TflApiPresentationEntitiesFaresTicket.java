/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TflApiPresentationEntitiesFaresTicketTime;
import org.openapitools.client.model.TflApiPresentationEntitiesFaresTicketType;
import org.openapitools.client.model.TflApiPresentationEntitiesMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TflApiPresentationEntitiesFaresTicket
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:40.735472-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TflApiPresentationEntitiesFaresTicket {
  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private String cost;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_ORDER = "displayOrder";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ORDER)
  private Integer displayOrder;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<TflApiPresentationEntitiesMessage> messages = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private String mode;

  public static final String SERIALIZED_NAME_PASSENGER_TYPE = "passengerType";
  @SerializedName(SERIALIZED_NAME_PASSENGER_TYPE)
  private String passengerType;

  public static final String SERIALIZED_NAME_TICKET_TIME = "ticketTime";
  @SerializedName(SERIALIZED_NAME_TICKET_TIME)
  private TflApiPresentationEntitiesFaresTicketTime ticketTime;

  public static final String SERIALIZED_NAME_TICKET_TYPE = "ticketType";
  @SerializedName(SERIALIZED_NAME_TICKET_TYPE)
  private TflApiPresentationEntitiesFaresTicketType ticketType;

  public TflApiPresentationEntitiesFaresTicket() {
  }

  public TflApiPresentationEntitiesFaresTicket cost(String cost) {
    this.cost = cost;
    return this;
  }

  /**
   * Get cost
   * @return cost
   */
  @javax.annotation.Nullable
  public String getCost() {
    return cost;
  }

  public void setCost(String cost) {
    this.cost = cost;
  }


  public TflApiPresentationEntitiesFaresTicket description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TflApiPresentationEntitiesFaresTicket displayOrder(Integer displayOrder) {
    this.displayOrder = displayOrder;
    return this;
  }

  /**
   * Get displayOrder
   * @return displayOrder
   */
  @javax.annotation.Nullable
  public Integer getDisplayOrder() {
    return displayOrder;
  }

  public void setDisplayOrder(Integer displayOrder) {
    this.displayOrder = displayOrder;
  }


  public TflApiPresentationEntitiesFaresTicket messages(List<TflApiPresentationEntitiesMessage> messages) {
    this.messages = messages;
    return this;
  }

  public TflApiPresentationEntitiesFaresTicket addMessagesItem(TflApiPresentationEntitiesMessage messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * Get messages
   * @return messages
   */
  @javax.annotation.Nullable
  public List<TflApiPresentationEntitiesMessage> getMessages() {
    return messages;
  }

  public void setMessages(List<TflApiPresentationEntitiesMessage> messages) {
    this.messages = messages;
  }


  public TflApiPresentationEntitiesFaresTicket mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }


  public TflApiPresentationEntitiesFaresTicket passengerType(String passengerType) {
    this.passengerType = passengerType;
    return this;
  }

  /**
   * Get passengerType
   * @return passengerType
   */
  @javax.annotation.Nullable
  public String getPassengerType() {
    return passengerType;
  }

  public void setPassengerType(String passengerType) {
    this.passengerType = passengerType;
  }


  public TflApiPresentationEntitiesFaresTicket ticketTime(TflApiPresentationEntitiesFaresTicketTime ticketTime) {
    this.ticketTime = ticketTime;
    return this;
  }

  /**
   * Get ticketTime
   * @return ticketTime
   */
  @javax.annotation.Nullable
  public TflApiPresentationEntitiesFaresTicketTime getTicketTime() {
    return ticketTime;
  }

  public void setTicketTime(TflApiPresentationEntitiesFaresTicketTime ticketTime) {
    this.ticketTime = ticketTime;
  }


  public TflApiPresentationEntitiesFaresTicket ticketType(TflApiPresentationEntitiesFaresTicketType ticketType) {
    this.ticketType = ticketType;
    return this;
  }

  /**
   * Get ticketType
   * @return ticketType
   */
  @javax.annotation.Nullable
  public TflApiPresentationEntitiesFaresTicketType getTicketType() {
    return ticketType;
  }

  public void setTicketType(TflApiPresentationEntitiesFaresTicketType ticketType) {
    this.ticketType = ticketType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TflApiPresentationEntitiesFaresTicket tflApiPresentationEntitiesFaresTicket = (TflApiPresentationEntitiesFaresTicket) o;
    return Objects.equals(this.cost, tflApiPresentationEntitiesFaresTicket.cost) &&
        Objects.equals(this.description, tflApiPresentationEntitiesFaresTicket.description) &&
        Objects.equals(this.displayOrder, tflApiPresentationEntitiesFaresTicket.displayOrder) &&
        Objects.equals(this.messages, tflApiPresentationEntitiesFaresTicket.messages) &&
        Objects.equals(this.mode, tflApiPresentationEntitiesFaresTicket.mode) &&
        Objects.equals(this.passengerType, tflApiPresentationEntitiesFaresTicket.passengerType) &&
        Objects.equals(this.ticketTime, tflApiPresentationEntitiesFaresTicket.ticketTime) &&
        Objects.equals(this.ticketType, tflApiPresentationEntitiesFaresTicket.ticketType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cost, description, displayOrder, messages, mode, passengerType, ticketTime, ticketType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TflApiPresentationEntitiesFaresTicket {\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayOrder: ").append(toIndentedString(displayOrder)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    passengerType: ").append(toIndentedString(passengerType)).append("\n");
    sb.append("    ticketTime: ").append(toIndentedString(ticketTime)).append("\n");
    sb.append("    ticketType: ").append(toIndentedString(ticketType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cost");
    openapiFields.add("description");
    openapiFields.add("displayOrder");
    openapiFields.add("messages");
    openapiFields.add("mode");
    openapiFields.add("passengerType");
    openapiFields.add("ticketTime");
    openapiFields.add("ticketType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TflApiPresentationEntitiesFaresTicket
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TflApiPresentationEntitiesFaresTicket.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TflApiPresentationEntitiesFaresTicket is not found in the empty JSON string", TflApiPresentationEntitiesFaresTicket.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TflApiPresentationEntitiesFaresTicket.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TflApiPresentationEntitiesFaresTicket` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cost") != null && !jsonObj.get("cost").isJsonNull()) && !jsonObj.get("cost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cost").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
        if (jsonArraymessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
          }

          // validate the optional field `messages` (array)
          for (int i = 0; i < jsonArraymessages.size(); i++) {
            TflApiPresentationEntitiesMessage.validateJsonElement(jsonArraymessages.get(i));
          };
        }
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      if ((jsonObj.get("passengerType") != null && !jsonObj.get("passengerType").isJsonNull()) && !jsonObj.get("passengerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passengerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passengerType").toString()));
      }
      // validate the optional field `ticketTime`
      if (jsonObj.get("ticketTime") != null && !jsonObj.get("ticketTime").isJsonNull()) {
        TflApiPresentationEntitiesFaresTicketTime.validateJsonElement(jsonObj.get("ticketTime"));
      }
      // validate the optional field `ticketType`
      if (jsonObj.get("ticketType") != null && !jsonObj.get("ticketType").isJsonNull()) {
        TflApiPresentationEntitiesFaresTicketType.validateJsonElement(jsonObj.get("ticketType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TflApiPresentationEntitiesFaresTicket.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TflApiPresentationEntitiesFaresTicket' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TflApiPresentationEntitiesFaresTicket> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TflApiPresentationEntitiesFaresTicket.class));

       return (TypeAdapter<T>) new TypeAdapter<TflApiPresentationEntitiesFaresTicket>() {
           @Override
           public void write(JsonWriter out, TflApiPresentationEntitiesFaresTicket value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TflApiPresentationEntitiesFaresTicket read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TflApiPresentationEntitiesFaresTicket given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TflApiPresentationEntitiesFaresTicket
   * @throws IOException if the JSON string is invalid with respect to TflApiPresentationEntitiesFaresTicket
   */
  public static TflApiPresentationEntitiesFaresTicket fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TflApiPresentationEntitiesFaresTicket.class);
  }

  /**
   * Convert an instance of TflApiPresentationEntitiesFaresTicket to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

