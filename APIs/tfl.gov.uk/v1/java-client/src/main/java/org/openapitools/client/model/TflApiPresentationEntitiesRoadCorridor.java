/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TflApiPresentationEntitiesRoadCorridor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:40.735472-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TflApiPresentationEntitiesRoadCorridor {
  public static final String SERIALIZED_NAME_BOUNDS = "bounds";
  @SerializedName(SERIALIZED_NAME_BOUNDS)
  private String bounds;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENVELOPE = "envelope";
  @SerializedName(SERIALIZED_NAME_ENVELOPE)
  private String envelope;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_STATUS_AGGREGATION_END_DATE = "statusAggregationEndDate";
  @SerializedName(SERIALIZED_NAME_STATUS_AGGREGATION_END_DATE)
  private OffsetDateTime statusAggregationEndDate;

  public static final String SERIALIZED_NAME_STATUS_AGGREGATION_START_DATE = "statusAggregationStartDate";
  @SerializedName(SERIALIZED_NAME_STATUS_AGGREGATION_START_DATE)
  private OffsetDateTime statusAggregationStartDate;

  public static final String SERIALIZED_NAME_STATUS_SEVERITY = "statusSeverity";
  @SerializedName(SERIALIZED_NAME_STATUS_SEVERITY)
  private String statusSeverity;

  public static final String SERIALIZED_NAME_STATUS_SEVERITY_DESCRIPTION = "statusSeverityDescription";
  @SerializedName(SERIALIZED_NAME_STATUS_SEVERITY_DESCRIPTION)
  private String statusSeverityDescription;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public TflApiPresentationEntitiesRoadCorridor() {
  }

  public TflApiPresentationEntitiesRoadCorridor bounds(String bounds) {
    this.bounds = bounds;
    return this;
  }

  /**
   * The Bounds of the Corridor, given by the south-east followed by the north-west co-ordinate              pair in geoJSON format e.g. \&quot;[[-1.241531,51.242151],[1.641223,53.765721]]\&quot;
   * @return bounds
   */
  @javax.annotation.Nullable
  public String getBounds() {
    return bounds;
  }

  public void setBounds(String bounds) {
    this.bounds = bounds;
  }


  public TflApiPresentationEntitiesRoadCorridor displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the Corridor e.g. \&quot;North Circular (A406)\&quot;. This              may be identical to the Id.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public TflApiPresentationEntitiesRoadCorridor envelope(String envelope) {
    this.envelope = envelope;
    return this;
  }

  /**
   * The Envelope of the Corridor, given by the corner co-ordinates of a rectangular (four-point) polygon              in geoJSON format e.g. \&quot;[[-1.241531,51.242151],[-1.241531,53.765721],[1.641223,53.765721],[1.641223,51.242151]]\&quot;
   * @return envelope
   */
  @javax.annotation.Nullable
  public String getEnvelope() {
    return envelope;
  }

  public void setEnvelope(String envelope) {
    this.envelope = envelope;
  }


  public TflApiPresentationEntitiesRoadCorridor group(String group) {
    this.group = group;
    return this;
  }

  /**
   * The group name of the Corridor e.g. \&quot;Central London\&quot;. Most corridors are not grouped, in which case this field can be null.
   * @return group
   */
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  public TflApiPresentationEntitiesRoadCorridor id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Id of the Corridor e.g. \&quot;A406\&quot;
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TflApiPresentationEntitiesRoadCorridor statusAggregationEndDate(OffsetDateTime statusAggregationEndDate) {
    this.statusAggregationEndDate = statusAggregationEndDate;
    return this;
  }

  /**
   * The end of the period over which status has been aggregated, or null if this is the current corridor status.
   * @return statusAggregationEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStatusAggregationEndDate() {
    return statusAggregationEndDate;
  }

  public void setStatusAggregationEndDate(OffsetDateTime statusAggregationEndDate) {
    this.statusAggregationEndDate = statusAggregationEndDate;
  }


  public TflApiPresentationEntitiesRoadCorridor statusAggregationStartDate(OffsetDateTime statusAggregationStartDate) {
    this.statusAggregationStartDate = statusAggregationStartDate;
    return this;
  }

  /**
   * The start of the period over which status has been aggregated, or null if this is the current corridor status.
   * @return statusAggregationStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStatusAggregationStartDate() {
    return statusAggregationStartDate;
  }

  public void setStatusAggregationStartDate(OffsetDateTime statusAggregationStartDate) {
    this.statusAggregationStartDate = statusAggregationStartDate;
  }


  public TflApiPresentationEntitiesRoadCorridor statusSeverity(String statusSeverity) {
    this.statusSeverity = statusSeverity;
    return this;
  }

  /**
   * Standard multi-mode status severity code
   * @return statusSeverity
   */
  @javax.annotation.Nullable
  public String getStatusSeverity() {
    return statusSeverity;
  }

  public void setStatusSeverity(String statusSeverity) {
    this.statusSeverity = statusSeverity;
  }


  public TflApiPresentationEntitiesRoadCorridor statusSeverityDescription(String statusSeverityDescription) {
    this.statusSeverityDescription = statusSeverityDescription;
    return this;
  }

  /**
   * Description of the status severity as applied to RoadCorridors
   * @return statusSeverityDescription
   */
  @javax.annotation.Nullable
  public String getStatusSeverityDescription() {
    return statusSeverityDescription;
  }

  public void setStatusSeverityDescription(String statusSeverityDescription) {
    this.statusSeverityDescription = statusSeverityDescription;
  }


  public TflApiPresentationEntitiesRoadCorridor url(String url) {
    this.url = url;
    return this;
  }

  /**
   * URL to retrieve this Corridor.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TflApiPresentationEntitiesRoadCorridor tflApiPresentationEntitiesRoadCorridor = (TflApiPresentationEntitiesRoadCorridor) o;
    return Objects.equals(this.bounds, tflApiPresentationEntitiesRoadCorridor.bounds) &&
        Objects.equals(this.displayName, tflApiPresentationEntitiesRoadCorridor.displayName) &&
        Objects.equals(this.envelope, tflApiPresentationEntitiesRoadCorridor.envelope) &&
        Objects.equals(this.group, tflApiPresentationEntitiesRoadCorridor.group) &&
        Objects.equals(this.id, tflApiPresentationEntitiesRoadCorridor.id) &&
        Objects.equals(this.statusAggregationEndDate, tflApiPresentationEntitiesRoadCorridor.statusAggregationEndDate) &&
        Objects.equals(this.statusAggregationStartDate, tflApiPresentationEntitiesRoadCorridor.statusAggregationStartDate) &&
        Objects.equals(this.statusSeverity, tflApiPresentationEntitiesRoadCorridor.statusSeverity) &&
        Objects.equals(this.statusSeverityDescription, tflApiPresentationEntitiesRoadCorridor.statusSeverityDescription) &&
        Objects.equals(this.url, tflApiPresentationEntitiesRoadCorridor.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bounds, displayName, envelope, group, id, statusAggregationEndDate, statusAggregationStartDate, statusSeverity, statusSeverityDescription, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TflApiPresentationEntitiesRoadCorridor {\n");
    sb.append("    bounds: ").append(toIndentedString(bounds)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    envelope: ").append(toIndentedString(envelope)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    statusAggregationEndDate: ").append(toIndentedString(statusAggregationEndDate)).append("\n");
    sb.append("    statusAggregationStartDate: ").append(toIndentedString(statusAggregationStartDate)).append("\n");
    sb.append("    statusSeverity: ").append(toIndentedString(statusSeverity)).append("\n");
    sb.append("    statusSeverityDescription: ").append(toIndentedString(statusSeverityDescription)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bounds");
    openapiFields.add("displayName");
    openapiFields.add("envelope");
    openapiFields.add("group");
    openapiFields.add("id");
    openapiFields.add("statusAggregationEndDate");
    openapiFields.add("statusAggregationStartDate");
    openapiFields.add("statusSeverity");
    openapiFields.add("statusSeverityDescription");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TflApiPresentationEntitiesRoadCorridor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TflApiPresentationEntitiesRoadCorridor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TflApiPresentationEntitiesRoadCorridor is not found in the empty JSON string", TflApiPresentationEntitiesRoadCorridor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TflApiPresentationEntitiesRoadCorridor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TflApiPresentationEntitiesRoadCorridor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bounds") != null && !jsonObj.get("bounds").isJsonNull()) && !jsonObj.get("bounds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bounds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bounds").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("envelope") != null && !jsonObj.get("envelope").isJsonNull()) && !jsonObj.get("envelope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `envelope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("envelope").toString()));
      }
      if ((jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) && !jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("statusSeverity") != null && !jsonObj.get("statusSeverity").isJsonNull()) && !jsonObj.get("statusSeverity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusSeverity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusSeverity").toString()));
      }
      if ((jsonObj.get("statusSeverityDescription") != null && !jsonObj.get("statusSeverityDescription").isJsonNull()) && !jsonObj.get("statusSeverityDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusSeverityDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusSeverityDescription").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TflApiPresentationEntitiesRoadCorridor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TflApiPresentationEntitiesRoadCorridor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TflApiPresentationEntitiesRoadCorridor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TflApiPresentationEntitiesRoadCorridor.class));

       return (TypeAdapter<T>) new TypeAdapter<TflApiPresentationEntitiesRoadCorridor>() {
           @Override
           public void write(JsonWriter out, TflApiPresentationEntitiesRoadCorridor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TflApiPresentationEntitiesRoadCorridor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TflApiPresentationEntitiesRoadCorridor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TflApiPresentationEntitiesRoadCorridor
   * @throws IOException if the JSON string is invalid with respect to TflApiPresentationEntitiesRoadCorridor
   */
  public static TflApiPresentationEntitiesRoadCorridor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TflApiPresentationEntitiesRoadCorridor.class);
  }

  /**
   * Convert an instance of TflApiPresentationEntitiesRoadCorridor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

