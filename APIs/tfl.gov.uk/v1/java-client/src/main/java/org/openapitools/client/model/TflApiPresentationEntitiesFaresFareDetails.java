/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TflApiPresentationEntitiesFaresTicket;
import org.openapitools.client.model.TflApiPresentationEntitiesMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TflApiPresentationEntitiesFaresFareDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:40.735472-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TflApiPresentationEntitiesFaresFareDetails {
  public static final String SERIALIZED_NAME_BOUNDS_ID = "boundsId";
  @SerializedName(SERIALIZED_NAME_BOUNDS_ID)
  private Integer boundsId;

  public static final String SERIALIZED_NAME_CONTACTLESS_P_A_Y_G_ONLY_FARE = "contactlessPAYGOnlyFare";
  @SerializedName(SERIALIZED_NAME_CONTACTLESS_P_A_Y_G_ONLY_FARE)
  private Boolean contactlessPAYGOnlyFare;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DISPLAY_ORDER = "displayOrder";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ORDER)
  private Integer displayOrder;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_FROM_STATION = "fromStation";
  @SerializedName(SERIALIZED_NAME_FROM_STATION)
  private String fromStation;

  public static final String SERIALIZED_NAME_IS_TOUR = "isTour";
  @SerializedName(SERIALIZED_NAME_IS_TOUR)
  private Boolean isTour;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<TflApiPresentationEntitiesMessage> messages = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private String mode;

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private String operator;

  public static final String SERIALIZED_NAME_PASSENGER_TYPE = "passengerType";
  @SerializedName(SERIALIZED_NAME_PASSENGER_TYPE)
  private String passengerType;

  public static final String SERIALIZED_NAME_ROUTE_CODE = "routeCode";
  @SerializedName(SERIALIZED_NAME_ROUTE_CODE)
  private String routeCode;

  public static final String SERIALIZED_NAME_ROUTE_DESCRIPTION = "routeDescription";
  @SerializedName(SERIALIZED_NAME_ROUTE_DESCRIPTION)
  private String routeDescription;

  public static final String SERIALIZED_NAME_SPECIAL_FARE = "specialFare";
  @SerializedName(SERIALIZED_NAME_SPECIAL_FARE)
  private Boolean specialFare;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_THROUGH_FARE = "throughFare";
  @SerializedName(SERIALIZED_NAME_THROUGH_FARE)
  private Boolean throughFare;

  public static final String SERIALIZED_NAME_TICKETS_AVAILABLE = "ticketsAvailable";
  @SerializedName(SERIALIZED_NAME_TICKETS_AVAILABLE)
  private List<TflApiPresentationEntitiesFaresTicket> ticketsAvailable = new ArrayList<>();

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_TO_STATION = "toStation";
  @SerializedName(SERIALIZED_NAME_TO_STATION)
  private String toStation;

  public static final String SERIALIZED_NAME_VALIDATOR_INFORMATION = "validatorInformation";
  @SerializedName(SERIALIZED_NAME_VALIDATOR_INFORMATION)
  private String validatorInformation;

  public static final String SERIALIZED_NAME_VIA = "via";
  @SerializedName(SERIALIZED_NAME_VIA)
  private String via;

  public TflApiPresentationEntitiesFaresFareDetails() {
  }

  public TflApiPresentationEntitiesFaresFareDetails boundsId(Integer boundsId) {
    this.boundsId = boundsId;
    return this;
  }

  /**
   * Get boundsId
   * @return boundsId
   */
  @javax.annotation.Nullable
  public Integer getBoundsId() {
    return boundsId;
  }

  public void setBoundsId(Integer boundsId) {
    this.boundsId = boundsId;
  }


  public TflApiPresentationEntitiesFaresFareDetails contactlessPAYGOnlyFare(Boolean contactlessPAYGOnlyFare) {
    this.contactlessPAYGOnlyFare = contactlessPAYGOnlyFare;
    return this;
  }

  /**
   * Get contactlessPAYGOnlyFare
   * @return contactlessPAYGOnlyFare
   */
  @javax.annotation.Nullable
  public Boolean getContactlessPAYGOnlyFare() {
    return contactlessPAYGOnlyFare;
  }

  public void setContactlessPAYGOnlyFare(Boolean contactlessPAYGOnlyFare) {
    this.contactlessPAYGOnlyFare = contactlessPAYGOnlyFare;
  }


  public TflApiPresentationEntitiesFaresFareDetails displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public TflApiPresentationEntitiesFaresFareDetails displayOrder(Integer displayOrder) {
    this.displayOrder = displayOrder;
    return this;
  }

  /**
   * Get displayOrder
   * @return displayOrder
   */
  @javax.annotation.Nullable
  public Integer getDisplayOrder() {
    return displayOrder;
  }

  public void setDisplayOrder(Integer displayOrder) {
    this.displayOrder = displayOrder;
  }


  public TflApiPresentationEntitiesFaresFareDetails endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public TflApiPresentationEntitiesFaresFareDetails from(String from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public TflApiPresentationEntitiesFaresFareDetails fromStation(String fromStation) {
    this.fromStation = fromStation;
    return this;
  }

  /**
   * Get fromStation
   * @return fromStation
   */
  @javax.annotation.Nullable
  public String getFromStation() {
    return fromStation;
  }

  public void setFromStation(String fromStation) {
    this.fromStation = fromStation;
  }


  public TflApiPresentationEntitiesFaresFareDetails isTour(Boolean isTour) {
    this.isTour = isTour;
    return this;
  }

  /**
   * Get isTour
   * @return isTour
   */
  @javax.annotation.Nullable
  public Boolean getIsTour() {
    return isTour;
  }

  public void setIsTour(Boolean isTour) {
    this.isTour = isTour;
  }


  public TflApiPresentationEntitiesFaresFareDetails messages(List<TflApiPresentationEntitiesMessage> messages) {
    this.messages = messages;
    return this;
  }

  public TflApiPresentationEntitiesFaresFareDetails addMessagesItem(TflApiPresentationEntitiesMessage messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * Get messages
   * @return messages
   */
  @javax.annotation.Nullable
  public List<TflApiPresentationEntitiesMessage> getMessages() {
    return messages;
  }

  public void setMessages(List<TflApiPresentationEntitiesMessage> messages) {
    this.messages = messages;
  }


  public TflApiPresentationEntitiesFaresFareDetails mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }


  public TflApiPresentationEntitiesFaresFareDetails operator(String operator) {
    this.operator = operator;
    return this;
  }

  /**
   * Get operator
   * @return operator
   */
  @javax.annotation.Nullable
  public String getOperator() {
    return operator;
  }

  public void setOperator(String operator) {
    this.operator = operator;
  }


  public TflApiPresentationEntitiesFaresFareDetails passengerType(String passengerType) {
    this.passengerType = passengerType;
    return this;
  }

  /**
   * Get passengerType
   * @return passengerType
   */
  @javax.annotation.Nullable
  public String getPassengerType() {
    return passengerType;
  }

  public void setPassengerType(String passengerType) {
    this.passengerType = passengerType;
  }


  public TflApiPresentationEntitiesFaresFareDetails routeCode(String routeCode) {
    this.routeCode = routeCode;
    return this;
  }

  /**
   * Get routeCode
   * @return routeCode
   */
  @javax.annotation.Nullable
  public String getRouteCode() {
    return routeCode;
  }

  public void setRouteCode(String routeCode) {
    this.routeCode = routeCode;
  }


  public TflApiPresentationEntitiesFaresFareDetails routeDescription(String routeDescription) {
    this.routeDescription = routeDescription;
    return this;
  }

  /**
   * Get routeDescription
   * @return routeDescription
   */
  @javax.annotation.Nullable
  public String getRouteDescription() {
    return routeDescription;
  }

  public void setRouteDescription(String routeDescription) {
    this.routeDescription = routeDescription;
  }


  public TflApiPresentationEntitiesFaresFareDetails specialFare(Boolean specialFare) {
    this.specialFare = specialFare;
    return this;
  }

  /**
   * Get specialFare
   * @return specialFare
   */
  @javax.annotation.Nullable
  public Boolean getSpecialFare() {
    return specialFare;
  }

  public void setSpecialFare(Boolean specialFare) {
    this.specialFare = specialFare;
  }


  public TflApiPresentationEntitiesFaresFareDetails startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public TflApiPresentationEntitiesFaresFareDetails throughFare(Boolean throughFare) {
    this.throughFare = throughFare;
    return this;
  }

  /**
   * Get throughFare
   * @return throughFare
   */
  @javax.annotation.Nullable
  public Boolean getThroughFare() {
    return throughFare;
  }

  public void setThroughFare(Boolean throughFare) {
    this.throughFare = throughFare;
  }


  public TflApiPresentationEntitiesFaresFareDetails ticketsAvailable(List<TflApiPresentationEntitiesFaresTicket> ticketsAvailable) {
    this.ticketsAvailable = ticketsAvailable;
    return this;
  }

  public TflApiPresentationEntitiesFaresFareDetails addTicketsAvailableItem(TflApiPresentationEntitiesFaresTicket ticketsAvailableItem) {
    if (this.ticketsAvailable == null) {
      this.ticketsAvailable = new ArrayList<>();
    }
    this.ticketsAvailable.add(ticketsAvailableItem);
    return this;
  }

  /**
   * Get ticketsAvailable
   * @return ticketsAvailable
   */
  @javax.annotation.Nullable
  public List<TflApiPresentationEntitiesFaresTicket> getTicketsAvailable() {
    return ticketsAvailable;
  }

  public void setTicketsAvailable(List<TflApiPresentationEntitiesFaresTicket> ticketsAvailable) {
    this.ticketsAvailable = ticketsAvailable;
  }


  public TflApiPresentationEntitiesFaresFareDetails to(String to) {
    this.to = to;
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }


  public TflApiPresentationEntitiesFaresFareDetails toStation(String toStation) {
    this.toStation = toStation;
    return this;
  }

  /**
   * Get toStation
   * @return toStation
   */
  @javax.annotation.Nullable
  public String getToStation() {
    return toStation;
  }

  public void setToStation(String toStation) {
    this.toStation = toStation;
  }


  public TflApiPresentationEntitiesFaresFareDetails validatorInformation(String validatorInformation) {
    this.validatorInformation = validatorInformation;
    return this;
  }

  /**
   * Get validatorInformation
   * @return validatorInformation
   */
  @javax.annotation.Nullable
  public String getValidatorInformation() {
    return validatorInformation;
  }

  public void setValidatorInformation(String validatorInformation) {
    this.validatorInformation = validatorInformation;
  }


  public TflApiPresentationEntitiesFaresFareDetails via(String via) {
    this.via = via;
    return this;
  }

  /**
   * Get via
   * @return via
   */
  @javax.annotation.Nullable
  public String getVia() {
    return via;
  }

  public void setVia(String via) {
    this.via = via;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TflApiPresentationEntitiesFaresFareDetails tflApiPresentationEntitiesFaresFareDetails = (TflApiPresentationEntitiesFaresFareDetails) o;
    return Objects.equals(this.boundsId, tflApiPresentationEntitiesFaresFareDetails.boundsId) &&
        Objects.equals(this.contactlessPAYGOnlyFare, tflApiPresentationEntitiesFaresFareDetails.contactlessPAYGOnlyFare) &&
        Objects.equals(this.displayName, tflApiPresentationEntitiesFaresFareDetails.displayName) &&
        Objects.equals(this.displayOrder, tflApiPresentationEntitiesFaresFareDetails.displayOrder) &&
        Objects.equals(this.endDate, tflApiPresentationEntitiesFaresFareDetails.endDate) &&
        Objects.equals(this.from, tflApiPresentationEntitiesFaresFareDetails.from) &&
        Objects.equals(this.fromStation, tflApiPresentationEntitiesFaresFareDetails.fromStation) &&
        Objects.equals(this.isTour, tflApiPresentationEntitiesFaresFareDetails.isTour) &&
        Objects.equals(this.messages, tflApiPresentationEntitiesFaresFareDetails.messages) &&
        Objects.equals(this.mode, tflApiPresentationEntitiesFaresFareDetails.mode) &&
        Objects.equals(this.operator, tflApiPresentationEntitiesFaresFareDetails.operator) &&
        Objects.equals(this.passengerType, tflApiPresentationEntitiesFaresFareDetails.passengerType) &&
        Objects.equals(this.routeCode, tflApiPresentationEntitiesFaresFareDetails.routeCode) &&
        Objects.equals(this.routeDescription, tflApiPresentationEntitiesFaresFareDetails.routeDescription) &&
        Objects.equals(this.specialFare, tflApiPresentationEntitiesFaresFareDetails.specialFare) &&
        Objects.equals(this.startDate, tflApiPresentationEntitiesFaresFareDetails.startDate) &&
        Objects.equals(this.throughFare, tflApiPresentationEntitiesFaresFareDetails.throughFare) &&
        Objects.equals(this.ticketsAvailable, tflApiPresentationEntitiesFaresFareDetails.ticketsAvailable) &&
        Objects.equals(this.to, tflApiPresentationEntitiesFaresFareDetails.to) &&
        Objects.equals(this.toStation, tflApiPresentationEntitiesFaresFareDetails.toStation) &&
        Objects.equals(this.validatorInformation, tflApiPresentationEntitiesFaresFareDetails.validatorInformation) &&
        Objects.equals(this.via, tflApiPresentationEntitiesFaresFareDetails.via);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boundsId, contactlessPAYGOnlyFare, displayName, displayOrder, endDate, from, fromStation, isTour, messages, mode, operator, passengerType, routeCode, routeDescription, specialFare, startDate, throughFare, ticketsAvailable, to, toStation, validatorInformation, via);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TflApiPresentationEntitiesFaresFareDetails {\n");
    sb.append("    boundsId: ").append(toIndentedString(boundsId)).append("\n");
    sb.append("    contactlessPAYGOnlyFare: ").append(toIndentedString(contactlessPAYGOnlyFare)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    displayOrder: ").append(toIndentedString(displayOrder)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    fromStation: ").append(toIndentedString(fromStation)).append("\n");
    sb.append("    isTour: ").append(toIndentedString(isTour)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    passengerType: ").append(toIndentedString(passengerType)).append("\n");
    sb.append("    routeCode: ").append(toIndentedString(routeCode)).append("\n");
    sb.append("    routeDescription: ").append(toIndentedString(routeDescription)).append("\n");
    sb.append("    specialFare: ").append(toIndentedString(specialFare)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    throughFare: ").append(toIndentedString(throughFare)).append("\n");
    sb.append("    ticketsAvailable: ").append(toIndentedString(ticketsAvailable)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    toStation: ").append(toIndentedString(toStation)).append("\n");
    sb.append("    validatorInformation: ").append(toIndentedString(validatorInformation)).append("\n");
    sb.append("    via: ").append(toIndentedString(via)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boundsId");
    openapiFields.add("contactlessPAYGOnlyFare");
    openapiFields.add("displayName");
    openapiFields.add("displayOrder");
    openapiFields.add("endDate");
    openapiFields.add("from");
    openapiFields.add("fromStation");
    openapiFields.add("isTour");
    openapiFields.add("messages");
    openapiFields.add("mode");
    openapiFields.add("operator");
    openapiFields.add("passengerType");
    openapiFields.add("routeCode");
    openapiFields.add("routeDescription");
    openapiFields.add("specialFare");
    openapiFields.add("startDate");
    openapiFields.add("throughFare");
    openapiFields.add("ticketsAvailable");
    openapiFields.add("to");
    openapiFields.add("toStation");
    openapiFields.add("validatorInformation");
    openapiFields.add("via");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TflApiPresentationEntitiesFaresFareDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TflApiPresentationEntitiesFaresFareDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TflApiPresentationEntitiesFaresFareDetails is not found in the empty JSON string", TflApiPresentationEntitiesFaresFareDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TflApiPresentationEntitiesFaresFareDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TflApiPresentationEntitiesFaresFareDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("fromStation") != null && !jsonObj.get("fromStation").isJsonNull()) && !jsonObj.get("fromStation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromStation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromStation").toString()));
      }
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
        if (jsonArraymessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
          }

          // validate the optional field `messages` (array)
          for (int i = 0; i < jsonArraymessages.size(); i++) {
            TflApiPresentationEntitiesMessage.validateJsonElement(jsonArraymessages.get(i));
          };
        }
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      if ((jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) && !jsonObj.get("operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator").toString()));
      }
      if ((jsonObj.get("passengerType") != null && !jsonObj.get("passengerType").isJsonNull()) && !jsonObj.get("passengerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passengerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passengerType").toString()));
      }
      if ((jsonObj.get("routeCode") != null && !jsonObj.get("routeCode").isJsonNull()) && !jsonObj.get("routeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeCode").toString()));
      }
      if ((jsonObj.get("routeDescription") != null && !jsonObj.get("routeDescription").isJsonNull()) && !jsonObj.get("routeDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeDescription").toString()));
      }
      if (jsonObj.get("ticketsAvailable") != null && !jsonObj.get("ticketsAvailable").isJsonNull()) {
        JsonArray jsonArrayticketsAvailable = jsonObj.getAsJsonArray("ticketsAvailable");
        if (jsonArrayticketsAvailable != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ticketsAvailable").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ticketsAvailable` to be an array in the JSON string but got `%s`", jsonObj.get("ticketsAvailable").toString()));
          }

          // validate the optional field `ticketsAvailable` (array)
          for (int i = 0; i < jsonArrayticketsAvailable.size(); i++) {
            TflApiPresentationEntitiesFaresTicket.validateJsonElement(jsonArrayticketsAvailable.get(i));
          };
        }
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if ((jsonObj.get("toStation") != null && !jsonObj.get("toStation").isJsonNull()) && !jsonObj.get("toStation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toStation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toStation").toString()));
      }
      if ((jsonObj.get("validatorInformation") != null && !jsonObj.get("validatorInformation").isJsonNull()) && !jsonObj.get("validatorInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validatorInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validatorInformation").toString()));
      }
      if ((jsonObj.get("via") != null && !jsonObj.get("via").isJsonNull()) && !jsonObj.get("via").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `via` to be a primitive type in the JSON string but got `%s`", jsonObj.get("via").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TflApiPresentationEntitiesFaresFareDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TflApiPresentationEntitiesFaresFareDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TflApiPresentationEntitiesFaresFareDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TflApiPresentationEntitiesFaresFareDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<TflApiPresentationEntitiesFaresFareDetails>() {
           @Override
           public void write(JsonWriter out, TflApiPresentationEntitiesFaresFareDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TflApiPresentationEntitiesFaresFareDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TflApiPresentationEntitiesFaresFareDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TflApiPresentationEntitiesFaresFareDetails
   * @throws IOException if the JSON string is invalid with respect to TflApiPresentationEntitiesFaresFareDetails
   */
  public static TflApiPresentationEntitiesFaresFareDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TflApiPresentationEntitiesFaresFareDetails.class);
  }

  /**
   * Convert an instance of TflApiPresentationEntitiesFaresFareDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

