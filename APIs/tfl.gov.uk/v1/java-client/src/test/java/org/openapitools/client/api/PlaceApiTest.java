/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.TflApiPresentationEntitiesPlace;
import org.openapitools.client.model.TflApiPresentationEntitiesPlaceCategory;
import org.openapitools.client.model.TflApiPresentationEntitiesStopPoint;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlaceApi
 */
@Disabled
public class PlaceApiTest {

    private final PlaceApi api = new PlaceApi();

    /**
     * Gets the place with the given id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeGetTest() throws ApiException {
        String id = null;
        Boolean includeChildren = null;
        List<TflApiPresentationEntitiesPlace> response = api.placeGet(id, includeChildren);
        // TODO: test validations
    }

    /**
     * Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeGetAtTest() throws ApiException {
        List<String> type = null;
        String lat = null;
        String lon = null;
        Double locationLat = null;
        Double locationLon = null;
        String lat2 = null;
        String lon2 = null;
        Object response = api.placeGetAt(type, lat, lon, locationLat, locationLon, lat2, lon2);
        // TODO: test validations
    }

    /**
     * Gets the places that lie within a geographic region. The geographic region of interest can either be specified              by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of              its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.              Optionally filters on type and can strip properties for a smaller payload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeGetByGeoTest() throws ApiException {
        Double radius = null;
        List<String> categories = null;
        Boolean includeChildren = null;
        List<String> type = null;
        Boolean activeOnly = null;
        Integer numberOfPlacesToReturn = null;
        Double placeGeoSwLat = null;
        Double placeGeoSwLon = null;
        Double placeGeoNeLat = null;
        Double placeGeoNeLon = null;
        Double placeGeoLat = null;
        Double placeGeoLon = null;
        List<TflApiPresentationEntitiesStopPoint> response = api.placeGetByGeo(radius, categories, includeChildren, type, activeOnly, numberOfPlacesToReturn, placeGeoSwLat, placeGeoSwLon, placeGeoNeLat, placeGeoNeLon, placeGeoLat, placeGeoLon);
        // TODO: test validations
    }

    /**
     * Gets all places of a given type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeGetByTypeTest() throws ApiException {
        List<String> types = null;
        Boolean activeOnly = null;
        List<TflApiPresentationEntitiesPlace> response = api.placeGetByType(types, activeOnly);
        // TODO: test validations
    }

    /**
     * Gets the place overlay for a given set of co-ordinates and a given width/height.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeGetOverlayTest() throws ApiException {
        Integer z = null;
        List<String> type = null;
        Integer width = null;
        Integer height = null;
        String lat = null;
        String lon = null;
        Double locationLat = null;
        Double locationLon = null;
        String lat2 = null;
        String lon2 = null;
        Object response = api.placeGetOverlay(z, type, width, height, lat, lon, locationLat, locationLon, lat2, lon2);
        // TODO: test validations
    }

    /**
     * Gets the set of streets associated with a post code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeGetStreetsByPostCodeTest() throws ApiException {
        String postcode = null;
        String postcode2 = null;
        String postcodeInputPostcode = null;
        Object response = api.placeGetStreetsByPostCode(postcode, postcode2, postcodeInputPostcode);
        // TODO: test validations
    }

    /**
     * Gets a list of all of the available place property categories and keys.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeMetaCategoriesTest() throws ApiException {
        List<TflApiPresentationEntitiesPlaceCategory> response = api.placeMetaCategories();
        // TODO: test validations
    }

    /**
     * Gets a list of the available types of Place.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeMetaPlaceTypesTest() throws ApiException {
        List<TflApiPresentationEntitiesPlaceCategory> response = api.placeMetaPlaceTypes();
        // TODO: test validations
    }

    /**
     * Gets all places that matches the given query
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeSearchTest() throws ApiException {
        String name = null;
        List<String> types = null;
        List<TflApiPresentationEntitiesPlace> response = api.placeSearch(name, types);
        // TODO: test validations
    }

}
