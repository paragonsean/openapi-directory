/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.TflApiPresentationEntitiesDisruption;
import org.openapitools.client.model.TflApiPresentationEntitiesLine;
import org.openapitools.client.model.TflApiPresentationEntitiesMode;
import org.openapitools.client.model.TflApiPresentationEntitiesPrediction;
import org.openapitools.client.model.TflApiPresentationEntitiesRouteSearchResponse;
import org.openapitools.client.model.TflApiPresentationEntitiesRouteSequence;
import org.openapitools.client.model.TflApiPresentationEntitiesStatusSeverity;
import org.openapitools.client.model.TflApiPresentationEntitiesStopPoint;
import org.openapitools.client.model.TflApiPresentationEntitiesTimetableResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LineApi
 */
@Disabled
public class LineApiTest {

    private final LineApi api = new LineApi();

    /**
     * Get the list of arrival predictions for given line ids based at the given stop
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineArrivalsTest() throws ApiException {
        List<String> ids = null;
        String stopPointId = null;
        String direction = null;
        String destinationStationId = null;
        List<TflApiPresentationEntitiesPrediction> response = api.lineArrivals(ids, stopPointId, direction, destinationStationId);
        // TODO: test validations
    }

    /**
     * Get disruptions for the given line ids
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineDisruptionTest() throws ApiException {
        List<String> ids = null;
        List<TflApiPresentationEntitiesDisruption> response = api.lineDisruption(ids);
        // TODO: test validations
    }

    /**
     * Get disruptions for all lines of the given modes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineDisruptionByModeTest() throws ApiException {
        List<String> modes = null;
        List<TflApiPresentationEntitiesDisruption> response = api.lineDisruptionByMode(modes);
        // TODO: test validations
    }

    /**
     * Gets lines that match the specified line ids.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineGetTest() throws ApiException {
        List<String> ids = null;
        List<TflApiPresentationEntitiesLine> response = api.lineGet(ids);
        // TODO: test validations
    }

    /**
     * Gets lines that serve the given modes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineGetByModeTest() throws ApiException {
        List<String> modes = null;
        List<TflApiPresentationEntitiesLine> response = api.lineGetByMode(modes);
        // TODO: test validations
    }

    /**
     * Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineLineRoutesByIdsTest() throws ApiException {
        List<String> ids = null;
        List<String> serviceTypes = null;
        List<TflApiPresentationEntitiesLine> response = api.lineLineRoutesByIds(ids, serviceTypes);
        // TODO: test validations
    }

    /**
     * Gets a list of valid disruption categories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineMetaDisruptionCategoriesTest() throws ApiException {
        List<String> response = api.lineMetaDisruptionCategories();
        // TODO: test validations
    }

    /**
     * Gets a list of valid modes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineMetaModesTest() throws ApiException {
        List<TflApiPresentationEntitiesMode> response = api.lineMetaModes();
        // TODO: test validations
    }

    /**
     * Gets a list of valid ServiceTypes to filter on
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineMetaServiceTypesTest() throws ApiException {
        List<String> response = api.lineMetaServiceTypes();
        // TODO: test validations
    }

    /**
     * Gets a list of valid severity codes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineMetaSeverityTest() throws ApiException {
        List<TflApiPresentationEntitiesStatusSeverity> response = api.lineMetaSeverity();
        // TODO: test validations
    }

    /**
     * Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineRouteTest() throws ApiException {
        List<String> serviceTypes = null;
        List<TflApiPresentationEntitiesLine> response = api.lineRoute(serviceTypes);
        // TODO: test validations
    }

    /**
     * Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineRouteByModeTest() throws ApiException {
        List<String> modes = null;
        List<String> serviceTypes = null;
        List<TflApiPresentationEntitiesLine> response = api.lineRouteByMode(modes, serviceTypes);
        // TODO: test validations
    }

    /**
     * Gets all valid routes for given line id, including the sequence of stops on each route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineRouteSequenceTest() throws ApiException {
        String id = null;
        String direction = null;
        List<String> serviceTypes = null;
        Boolean excludeCrowding = null;
        TflApiPresentationEntitiesRouteSequence response = api.lineRouteSequence(id, direction, serviceTypes, excludeCrowding);
        // TODO: test validations
    }

    /**
     * Search for lines or routes matching the query string
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineSearchTest() throws ApiException {
        String query = null;
        List<String> modes = null;
        List<String> serviceTypes = null;
        TflApiPresentationEntitiesRouteSearchResponse response = api.lineSearch(query, modes, serviceTypes);
        // TODO: test validations
    }

    /**
     * Gets the line status for given line ids during the provided dates e.g Minor Delays
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineStatusTest() throws ApiException {
        List<String> ids = null;
        String startDate = null;
        String endDate = null;
        String startDate2 = null;
        String endDate2 = null;
        Boolean detail = null;
        OffsetDateTime dateRangeStartDate = null;
        OffsetDateTime dateRangeEndDate = null;
        List<TflApiPresentationEntitiesLine> response = api.lineStatus(ids, startDate, endDate, startDate2, endDate2, detail, dateRangeStartDate, dateRangeEndDate);
        // TODO: test validations
    }

    /**
     * Gets the line status of for given line ids e.g Minor Delays
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineStatusByIdsTest() throws ApiException {
        List<String> ids = null;
        Boolean detail = null;
        List<TflApiPresentationEntitiesLine> response = api.lineStatusByIds(ids, detail);
        // TODO: test validations
    }

    /**
     * Gets the line status of for all lines for the given modes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineStatusByModeTest() throws ApiException {
        List<String> modes = null;
        Boolean detail = null;
        String severityLevel = null;
        List<TflApiPresentationEntitiesLine> response = api.lineStatusByMode(modes, detail, severityLevel);
        // TODO: test validations
    }

    /**
     * Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineStatusBySeverityTest() throws ApiException {
        Integer severity = null;
        List<TflApiPresentationEntitiesLine> response = api.lineStatusBySeverity(severity);
        // TODO: test validations
    }

    /**
     * Gets a list of the stations that serve the given line id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineStopPointsTest() throws ApiException {
        String id = null;
        Boolean tflOperatedNationalRailStationsOnly = null;
        List<TflApiPresentationEntitiesStopPoint> response = api.lineStopPoints(id, tflOperatedNationalRailStationsOnly);
        // TODO: test validations
    }

    /**
     * Gets the timetable for a specified station on the give line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineTimetableTest() throws ApiException {
        String fromStopPointId = null;
        String id = null;
        TflApiPresentationEntitiesTimetableResponse response = api.lineTimetable(fromStopPointId, id);
        // TODO: test validations
    }

    /**
     * Gets the timetable for a specified station on the give line with specified destination
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lineTimetableToTest() throws ApiException {
        String fromStopPointId = null;
        String id = null;
        String toStopPointId = null;
        TflApiPresentationEntitiesTimetableResponse response = api.lineTimetableTo(fromStopPointId, id, toStopPointId);
        // TODO: test validations
    }

}
