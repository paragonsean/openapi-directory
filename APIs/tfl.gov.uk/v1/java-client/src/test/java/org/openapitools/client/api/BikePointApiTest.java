/*
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.TflApiPresentationEntitiesPlace;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BikePointApi
 */
@Disabled
public class BikePointApiTest {

    private final BikePointApi api = new BikePointApi();

    /**
     * Gets the bike point with the given id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bikePointGetTest() throws ApiException {
        String id = null;
        TflApiPresentationEntitiesPlace response = api.bikePointGet(id);
        // TODO: test validations
    }

    /**
     * Gets all bike point locations. The Place object has an addtionalProperties array which contains the nbBikes, nbDocks and nbSpaces              numbers which give the status of the BikePoint. A mismatch in these numbers i.e. nbDocks - (nbBikes + nbSpaces) !&#x3D; 0 indicates broken docks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bikePointGetAllTest() throws ApiException {
        List<TflApiPresentationEntitiesPlace> response = api.bikePointGetAll();
        // TODO: test validations
    }

    /**
     * Search for bike stations by their name, a bike point&#39;s name often contains information about the name of the street              or nearby landmarks, for example. Note that the search result does not contain the PlaceProperties i.e. the status              or occupancy of the BikePoint, to get that information you should retrieve the BikePoint by its id on /BikePoint/id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bikePointSearchTest() throws ApiException {
        String query = null;
        List<TflApiPresentationEntitiesPlace> response = api.bikePointSearch(query);
        // TODO: test validations
    }

}
