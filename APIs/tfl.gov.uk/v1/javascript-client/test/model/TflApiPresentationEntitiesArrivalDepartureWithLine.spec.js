/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TransportForLondonUnifiedApi);
  }
}(this, function(expect, TransportForLondonUnifiedApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TflApiPresentationEntitiesArrivalDepartureWithLine', function() {
    it('should create an instance of TflApiPresentationEntitiesArrivalDepartureWithLine', function() {
      // uncomment below and update the code to test TflApiPresentationEntitiesArrivalDepartureWithLine
      //var instance = new TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine();
      //expect(instance).to.be.a(TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine);
    });

    it('should have the property cause (base name: "cause")', function() {
      // uncomment below and update the code to test the property cause
      //var instance = new TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine();
      //expect(instance).to.be();
    });

    it('should have the property departureStatus (base name: "departureStatus")', function() {
      // uncomment below and update the code to test the property departureStatus
      //var instance = new TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine();
      //expect(instance).to.be();
    });

    it('should have the property destinationName (base name: "destinationName")', function() {
      // uncomment below and update the code to test the property destinationName
      //var instance = new TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine();
      //expect(instance).to.be();
    });

    it('should have the property destinationNaptanId (base name: "destinationNaptanId")', function() {
      // uncomment below and update the code to test the property destinationNaptanId
      //var instance = new TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine();
      //expect(instance).to.be();
    });

    it('should have the property estimatedTimeOfArrival (base name: "estimatedTimeOfArrival")', function() {
      // uncomment below and update the code to test the property estimatedTimeOfArrival
      //var instance = new TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine();
      //expect(instance).to.be();
    });

    it('should have the property estimatedTimeOfDeparture (base name: "estimatedTimeOfDeparture")', function() {
      // uncomment below and update the code to test the property estimatedTimeOfDeparture
      //var instance = new TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine();
      //expect(instance).to.be();
    });

    it('should have the property lineId (base name: "lineId")', function() {
      // uncomment below and update the code to test the property lineId
      //var instance = new TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine();
      //expect(instance).to.be();
    });

    it('should have the property lineName (base name: "lineName")', function() {
      // uncomment below and update the code to test the property lineName
      //var instance = new TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine();
      //expect(instance).to.be();
    });

    it('should have the property minutesAndSecondsToArrival (base name: "minutesAndSecondsToArrival")', function() {
      // uncomment below and update the code to test the property minutesAndSecondsToArrival
      //var instance = new TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine();
      //expect(instance).to.be();
    });

    it('should have the property minutesAndSecondsToDeparture (base name: "minutesAndSecondsToDeparture")', function() {
      // uncomment below and update the code to test the property minutesAndSecondsToDeparture
      //var instance = new TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine();
      //expect(instance).to.be();
    });

    it('should have the property naptanId (base name: "naptanId")', function() {
      // uncomment below and update the code to test the property naptanId
      //var instance = new TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine();
      //expect(instance).to.be();
    });

    it('should have the property platformName (base name: "platformName")', function() {
      // uncomment below and update the code to test the property platformName
      //var instance = new TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine();
      //expect(instance).to.be();
    });

    it('should have the property scheduledTimeOfArrival (base name: "scheduledTimeOfArrival")', function() {
      // uncomment below and update the code to test the property scheduledTimeOfArrival
      //var instance = new TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine();
      //expect(instance).to.be();
    });

    it('should have the property scheduledTimeOfDeparture (base name: "scheduledTimeOfDeparture")', function() {
      // uncomment below and update the code to test the property scheduledTimeOfDeparture
      //var instance = new TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine();
      //expect(instance).to.be();
    });

    it('should have the property stationName (base name: "stationName")', function() {
      // uncomment below and update the code to test the property stationName
      //var instance = new TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine();
      //expect(instance).to.be();
    });

    it('should have the property timing (base name: "timing")', function() {
      // uncomment below and update the code to test the property timing
      //var instance = new TransportForLondonUnifiedApi.TflApiPresentationEntitiesArrivalDepartureWithLine();
      //expect(instance).to.be();
    });

  });

}));
