/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TransportForLondonUnifiedApi);
  }
}(this, function(expect, TransportForLondonUnifiedApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TransportForLondonUnifiedApi.LineApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LineApi', function() {
    describe('lineArrivals', function() {
      it('should call lineArrivals successfully', function(done) {
        //uncomment below and update the code to test lineArrivals
        //instance.lineArrivals(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineDisruption', function() {
      it('should call lineDisruption successfully', function(done) {
        //uncomment below and update the code to test lineDisruption
        //instance.lineDisruption(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineDisruptionByMode', function() {
      it('should call lineDisruptionByMode successfully', function(done) {
        //uncomment below and update the code to test lineDisruptionByMode
        //instance.lineDisruptionByMode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineGet', function() {
      it('should call lineGet successfully', function(done) {
        //uncomment below and update the code to test lineGet
        //instance.lineGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineGetByMode', function() {
      it('should call lineGetByMode successfully', function(done) {
        //uncomment below and update the code to test lineGetByMode
        //instance.lineGetByMode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineLineRoutesByIds', function() {
      it('should call lineLineRoutesByIds successfully', function(done) {
        //uncomment below and update the code to test lineLineRoutesByIds
        //instance.lineLineRoutesByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineMetaDisruptionCategories', function() {
      it('should call lineMetaDisruptionCategories successfully', function(done) {
        //uncomment below and update the code to test lineMetaDisruptionCategories
        //instance.lineMetaDisruptionCategories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineMetaModes', function() {
      it('should call lineMetaModes successfully', function(done) {
        //uncomment below and update the code to test lineMetaModes
        //instance.lineMetaModes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineMetaServiceTypes', function() {
      it('should call lineMetaServiceTypes successfully', function(done) {
        //uncomment below and update the code to test lineMetaServiceTypes
        //instance.lineMetaServiceTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineMetaSeverity', function() {
      it('should call lineMetaSeverity successfully', function(done) {
        //uncomment below and update the code to test lineMetaSeverity
        //instance.lineMetaSeverity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineRoute', function() {
      it('should call lineRoute successfully', function(done) {
        //uncomment below and update the code to test lineRoute
        //instance.lineRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineRouteByMode', function() {
      it('should call lineRouteByMode successfully', function(done) {
        //uncomment below and update the code to test lineRouteByMode
        //instance.lineRouteByMode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineRouteSequence', function() {
      it('should call lineRouteSequence successfully', function(done) {
        //uncomment below and update the code to test lineRouteSequence
        //instance.lineRouteSequence(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineSearch', function() {
      it('should call lineSearch successfully', function(done) {
        //uncomment below and update the code to test lineSearch
        //instance.lineSearch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineStatus', function() {
      it('should call lineStatus successfully', function(done) {
        //uncomment below and update the code to test lineStatus
        //instance.lineStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineStatusByIds', function() {
      it('should call lineStatusByIds successfully', function(done) {
        //uncomment below and update the code to test lineStatusByIds
        //instance.lineStatusByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineStatusByMode', function() {
      it('should call lineStatusByMode successfully', function(done) {
        //uncomment below and update the code to test lineStatusByMode
        //instance.lineStatusByMode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineStatusBySeverity', function() {
      it('should call lineStatusBySeverity successfully', function(done) {
        //uncomment below and update the code to test lineStatusBySeverity
        //instance.lineStatusBySeverity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineStopPoints', function() {
      it('should call lineStopPoints successfully', function(done) {
        //uncomment below and update the code to test lineStopPoints
        //instance.lineStopPoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineTimetable', function() {
      it('should call lineTimetable successfully', function(done) {
        //uncomment below and update the code to test lineTimetable
        //instance.lineTimetable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lineTimetableTo', function() {
      it('should call lineTimetableTo successfully', function(done) {
        //uncomment below and update the code to test lineTimetableTo
        //instance.lineTimetableTo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
