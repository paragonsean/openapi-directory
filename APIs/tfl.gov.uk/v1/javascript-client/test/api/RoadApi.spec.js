/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TransportForLondonUnifiedApi);
  }
}(this, function(expect, TransportForLondonUnifiedApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TransportForLondonUnifiedApi.RoadApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RoadApi', function() {
    describe('roadDisruptedStreets', function() {
      it('should call roadDisruptedStreets successfully', function(done) {
        //uncomment below and update the code to test roadDisruptedStreets
        //instance.roadDisruptedStreets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('roadDisruption', function() {
      it('should call roadDisruption successfully', function(done) {
        //uncomment below and update the code to test roadDisruption
        //instance.roadDisruption(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('roadDisruptionById', function() {
      it('should call roadDisruptionById successfully', function(done) {
        //uncomment below and update the code to test roadDisruptionById
        //instance.roadDisruptionById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('roadGet', function() {
      it('should call roadGet successfully', function(done) {
        //uncomment below and update the code to test roadGet
        //instance.roadGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('roadIdsGet', function() {
      it('should call roadIdsGet successfully', function(done) {
        //uncomment below and update the code to test roadIdsGet
        //instance.roadIdsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('roadMetaCategories', function() {
      it('should call roadMetaCategories successfully', function(done) {
        //uncomment below and update the code to test roadMetaCategories
        //instance.roadMetaCategories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('roadMetaSeverities', function() {
      it('should call roadMetaSeverities successfully', function(done) {
        //uncomment below and update the code to test roadMetaSeverities
        //instance.roadMetaSeverities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('roadStatus', function() {
      it('should call roadStatus successfully', function(done) {
        //uncomment below and update the code to test roadStatus
        //instance.roadStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
