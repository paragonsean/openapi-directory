/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TransportForLondonUnifiedApi);
  }
}(this, function(expect, TransportForLondonUnifiedApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TransportForLondonUnifiedApi.StopPointApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StopPointApi', function() {
    describe('stopPointArrivalDepartures', function() {
      it('should call stopPointArrivalDepartures successfully', function(done) {
        //uncomment below and update the code to test stopPointArrivalDepartures
        //instance.stopPointArrivalDepartures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointArrivals', function() {
      it('should call stopPointArrivals successfully', function(done) {
        //uncomment below and update the code to test stopPointArrivals
        //instance.stopPointArrivals(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointCrowding', function() {
      it('should call stopPointCrowding successfully', function(done) {
        //uncomment below and update the code to test stopPointCrowding
        //instance.stopPointCrowding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointDirection', function() {
      it('should call stopPointDirection successfully', function(done) {
        //uncomment below and update the code to test stopPointDirection
        //instance.stopPointDirection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointDisruption', function() {
      it('should call stopPointDisruption successfully', function(done) {
        //uncomment below and update the code to test stopPointDisruption
        //instance.stopPointDisruption(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointDisruptionByMode', function() {
      it('should call stopPointDisruptionByMode successfully', function(done) {
        //uncomment below and update the code to test stopPointDisruptionByMode
        //instance.stopPointDisruptionByMode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointGet', function() {
      it('should call stopPointGet successfully', function(done) {
        //uncomment below and update the code to test stopPointGet
        //instance.stopPointGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointGetByGeoPoint', function() {
      it('should call stopPointGetByGeoPoint successfully', function(done) {
        //uncomment below and update the code to test stopPointGetByGeoPoint
        //instance.stopPointGetByGeoPoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointGetByMode', function() {
      it('should call stopPointGetByMode successfully', function(done) {
        //uncomment below and update the code to test stopPointGetByMode
        //instance.stopPointGetByMode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointGetBySms', function() {
      it('should call stopPointGetBySms successfully', function(done) {
        //uncomment below and update the code to test stopPointGetBySms
        //instance.stopPointGetBySms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointGetByType', function() {
      it('should call stopPointGetByType successfully', function(done) {
        //uncomment below and update the code to test stopPointGetByType
        //instance.stopPointGetByType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointGetByTypeWithPagination', function() {
      it('should call stopPointGetByTypeWithPagination successfully', function(done) {
        //uncomment below and update the code to test stopPointGetByTypeWithPagination
        //instance.stopPointGetByTypeWithPagination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointGetCarParksById', function() {
      it('should call stopPointGetCarParksById successfully', function(done) {
        //uncomment below and update the code to test stopPointGetCarParksById
        //instance.stopPointGetCarParksById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointGetServiceTypes', function() {
      it('should call stopPointGetServiceTypes successfully', function(done) {
        //uncomment below and update the code to test stopPointGetServiceTypes
        //instance.stopPointGetServiceTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointGetTaxiRanksByIds', function() {
      it('should call stopPointGetTaxiRanksByIds successfully', function(done) {
        //uncomment below and update the code to test stopPointGetTaxiRanksByIds
        //instance.stopPointGetTaxiRanksByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointIdPlaceTypesGet', function() {
      it('should call stopPointIdPlaceTypesGet successfully', function(done) {
        //uncomment below and update the code to test stopPointIdPlaceTypesGet
        //instance.stopPointIdPlaceTypesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointMetaCategories', function() {
      it('should call stopPointMetaCategories successfully', function(done) {
        //uncomment below and update the code to test stopPointMetaCategories
        //instance.stopPointMetaCategories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointMetaModes', function() {
      it('should call stopPointMetaModes successfully', function(done) {
        //uncomment below and update the code to test stopPointMetaModes
        //instance.stopPointMetaModes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointMetaStopTypes', function() {
      it('should call stopPointMetaStopTypes successfully', function(done) {
        //uncomment below and update the code to test stopPointMetaStopTypes
        //instance.stopPointMetaStopTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointReachableFrom', function() {
      it('should call stopPointReachableFrom successfully', function(done) {
        //uncomment below and update the code to test stopPointReachableFrom
        //instance.stopPointReachableFrom(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointRoute', function() {
      it('should call stopPointRoute successfully', function(done) {
        //uncomment below and update the code to test stopPointRoute
        //instance.stopPointRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointSearch', function() {
      it('should call stopPointSearch successfully', function(done) {
        //uncomment below and update the code to test stopPointSearch
        //instance.stopPointSearch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPointSearchGet', function() {
      it('should call stopPointSearchGet successfully', function(done) {
        //uncomment below and update the code to test stopPointSearchGet
        //instance.stopPointSearchGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
