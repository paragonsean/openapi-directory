/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TflApiPresentationEntitiesPredictionTiming from './TflApiPresentationEntitiesPredictionTiming';

/**
 * The TflApiPresentationEntitiesPrediction model module.
 * @module model/TflApiPresentationEntitiesPrediction
 * @version v1
 */
class TflApiPresentationEntitiesPrediction {
    /**
     * Constructs a new <code>TflApiPresentationEntitiesPrediction</code>.
     * DTO to capture the prediction details
     * @alias module:model/TflApiPresentationEntitiesPrediction
     */
    constructor() { 
        
        TflApiPresentationEntitiesPrediction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TflApiPresentationEntitiesPrediction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TflApiPresentationEntitiesPrediction} obj Optional instance to populate.
     * @return {module:model/TflApiPresentationEntitiesPrediction} The populated <code>TflApiPresentationEntitiesPrediction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TflApiPresentationEntitiesPrediction();

            if (data.hasOwnProperty('bearing')) {
                obj['bearing'] = ApiClient.convertToType(data['bearing'], 'String');
            }
            if (data.hasOwnProperty('currentLocation')) {
                obj['currentLocation'] = ApiClient.convertToType(data['currentLocation'], 'String');
            }
            if (data.hasOwnProperty('destinationName')) {
                obj['destinationName'] = ApiClient.convertToType(data['destinationName'], 'String');
            }
            if (data.hasOwnProperty('destinationNaptanId')) {
                obj['destinationNaptanId'] = ApiClient.convertToType(data['destinationNaptanId'], 'String');
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('expectedArrival')) {
                obj['expectedArrival'] = ApiClient.convertToType(data['expectedArrival'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lineId')) {
                obj['lineId'] = ApiClient.convertToType(data['lineId'], 'String');
            }
            if (data.hasOwnProperty('lineName')) {
                obj['lineName'] = ApiClient.convertToType(data['lineName'], 'String');
            }
            if (data.hasOwnProperty('modeName')) {
                obj['modeName'] = ApiClient.convertToType(data['modeName'], 'String');
            }
            if (data.hasOwnProperty('naptanId')) {
                obj['naptanId'] = ApiClient.convertToType(data['naptanId'], 'String');
            }
            if (data.hasOwnProperty('operationType')) {
                obj['operationType'] = ApiClient.convertToType(data['operationType'], 'Number');
            }
            if (data.hasOwnProperty('platformName')) {
                obj['platformName'] = ApiClient.convertToType(data['platformName'], 'String');
            }
            if (data.hasOwnProperty('stationName')) {
                obj['stationName'] = ApiClient.convertToType(data['stationName'], 'String');
            }
            if (data.hasOwnProperty('timeToLive')) {
                obj['timeToLive'] = ApiClient.convertToType(data['timeToLive'], 'Date');
            }
            if (data.hasOwnProperty('timeToStation')) {
                obj['timeToStation'] = ApiClient.convertToType(data['timeToStation'], 'Number');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('timing')) {
                obj['timing'] = TflApiPresentationEntitiesPredictionTiming.constructFromObject(data['timing']);
            }
            if (data.hasOwnProperty('towards')) {
                obj['towards'] = ApiClient.convertToType(data['towards'], 'String');
            }
            if (data.hasOwnProperty('vehicleId')) {
                obj['vehicleId'] = ApiClient.convertToType(data['vehicleId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TflApiPresentationEntitiesPrediction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TflApiPresentationEntitiesPrediction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bearing'] && !(typeof data['bearing'] === 'string' || data['bearing'] instanceof String)) {
            throw new Error("Expected the field `bearing` to be a primitive type in the JSON string but got " + data['bearing']);
        }
        // ensure the json data is a string
        if (data['currentLocation'] && !(typeof data['currentLocation'] === 'string' || data['currentLocation'] instanceof String)) {
            throw new Error("Expected the field `currentLocation` to be a primitive type in the JSON string but got " + data['currentLocation']);
        }
        // ensure the json data is a string
        if (data['destinationName'] && !(typeof data['destinationName'] === 'string' || data['destinationName'] instanceof String)) {
            throw new Error("Expected the field `destinationName` to be a primitive type in the JSON string but got " + data['destinationName']);
        }
        // ensure the json data is a string
        if (data['destinationNaptanId'] && !(typeof data['destinationNaptanId'] === 'string' || data['destinationNaptanId'] instanceof String)) {
            throw new Error("Expected the field `destinationNaptanId` to be a primitive type in the JSON string but got " + data['destinationNaptanId']);
        }
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lineId'] && !(typeof data['lineId'] === 'string' || data['lineId'] instanceof String)) {
            throw new Error("Expected the field `lineId` to be a primitive type in the JSON string but got " + data['lineId']);
        }
        // ensure the json data is a string
        if (data['lineName'] && !(typeof data['lineName'] === 'string' || data['lineName'] instanceof String)) {
            throw new Error("Expected the field `lineName` to be a primitive type in the JSON string but got " + data['lineName']);
        }
        // ensure the json data is a string
        if (data['modeName'] && !(typeof data['modeName'] === 'string' || data['modeName'] instanceof String)) {
            throw new Error("Expected the field `modeName` to be a primitive type in the JSON string but got " + data['modeName']);
        }
        // ensure the json data is a string
        if (data['naptanId'] && !(typeof data['naptanId'] === 'string' || data['naptanId'] instanceof String)) {
            throw new Error("Expected the field `naptanId` to be a primitive type in the JSON string but got " + data['naptanId']);
        }
        // ensure the json data is a string
        if (data['platformName'] && !(typeof data['platformName'] === 'string' || data['platformName'] instanceof String)) {
            throw new Error("Expected the field `platformName` to be a primitive type in the JSON string but got " + data['platformName']);
        }
        // ensure the json data is a string
        if (data['stationName'] && !(typeof data['stationName'] === 'string' || data['stationName'] instanceof String)) {
            throw new Error("Expected the field `stationName` to be a primitive type in the JSON string but got " + data['stationName']);
        }
        // validate the optional field `timing`
        if (data['timing']) { // data not null
          TflApiPresentationEntitiesPredictionTiming.validateJSON(data['timing']);
        }
        // ensure the json data is a string
        if (data['towards'] && !(typeof data['towards'] === 'string' || data['towards'] instanceof String)) {
            throw new Error("Expected the field `towards` to be a primitive type in the JSON string but got " + data['towards']);
        }
        // ensure the json data is a string
        if (data['vehicleId'] && !(typeof data['vehicleId'] === 'string' || data['vehicleId'] instanceof String)) {
            throw new Error("Expected the field `vehicleId` to be a primitive type in the JSON string but got " + data['vehicleId']);
        }

        return true;
    }


}



/**
 * Bearing (between 0 to 359)
 * @member {String} bearing
 */
TflApiPresentationEntitiesPrediction.prototype['bearing'] = undefined;

/**
 * The current location of the vehicle.
 * @member {String} currentLocation
 */
TflApiPresentationEntitiesPrediction.prototype['currentLocation'] = undefined;

/**
 * Name of the destination
 * @member {String} destinationName
 */
TflApiPresentationEntitiesPrediction.prototype['destinationName'] = undefined;

/**
 * Naptan Identifier for the prediction's destination
 * @member {String} destinationNaptanId
 */
TflApiPresentationEntitiesPrediction.prototype['destinationNaptanId'] = undefined;

/**
 * Direction (unified to inbound/outbound)
 * @member {String} direction
 */
TflApiPresentationEntitiesPrediction.prototype['direction'] = undefined;

/**
 * The expected arrival time of the vehicle at the stop/station
 * @member {Date} expectedArrival
 */
TflApiPresentationEntitiesPrediction.prototype['expectedArrival'] = undefined;

/**
 * The identitier for the prediction
 * @member {String} id
 */
TflApiPresentationEntitiesPrediction.prototype['id'] = undefined;

/**
 * Unique identifier for the Line
 * @member {String} lineId
 */
TflApiPresentationEntitiesPrediction.prototype['lineId'] = undefined;

/**
 * Line Name
 * @member {String} lineName
 */
TflApiPresentationEntitiesPrediction.prototype['lineName'] = undefined;

/**
 * The mode name of the station/line the prediction relates to
 * @member {String} modeName
 */
TflApiPresentationEntitiesPrediction.prototype['modeName'] = undefined;

/**
 * Identifier for the prediction
 * @member {String} naptanId
 */
TflApiPresentationEntitiesPrediction.prototype['naptanId'] = undefined;

/**
 * The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache)
 * @member {Number} operationType
 */
TflApiPresentationEntitiesPrediction.prototype['operationType'] = undefined;

/**
 * Platform name (for bus, this is the stop letter)
 * @member {String} platformName
 */
TflApiPresentationEntitiesPrediction.prototype['platformName'] = undefined;

/**
 * Station name
 * @member {String} stationName
 */
TflApiPresentationEntitiesPrediction.prototype['stationName'] = undefined;

/**
 * The expiry time for the prediction
 * @member {Date} timeToLive
 */
TflApiPresentationEntitiesPrediction.prototype['timeToLive'] = undefined;

/**
 * Prediction of the Time to station in seconds
 * @member {Number} timeToStation
 */
TflApiPresentationEntitiesPrediction.prototype['timeToStation'] = undefined;

/**
 * Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration)
 * @member {Date} timestamp
 */
TflApiPresentationEntitiesPrediction.prototype['timestamp'] = undefined;

/**
 * @member {module:model/TflApiPresentationEntitiesPredictionTiming} timing
 */
TflApiPresentationEntitiesPrediction.prototype['timing'] = undefined;

/**
 * Routing information or other descriptive text about the path of the vehicle towards the destination
 * @member {String} towards
 */
TflApiPresentationEntitiesPrediction.prototype['towards'] = undefined;

/**
 * The actual vehicle in transit (for train modes, the leading car of the rolling set)
 * @member {String} vehicleId
 */
TflApiPresentationEntitiesPrediction.prototype['vehicleId'] = undefined;






export default TflApiPresentationEntitiesPrediction;

