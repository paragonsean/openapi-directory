/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TflApiPresentationEntitiesMatchedStop from './TflApiPresentationEntitiesMatchedStop';

/**
 * The TflApiPresentationEntitiesStopPointSequence model module.
 * @module model/TflApiPresentationEntitiesStopPointSequence
 * @version v1
 */
class TflApiPresentationEntitiesStopPointSequence {
    /**
     * Constructs a new <code>TflApiPresentationEntitiesStopPointSequence</code>.
     * @alias module:model/TflApiPresentationEntitiesStopPointSequence
     */
    constructor() { 
        
        TflApiPresentationEntitiesStopPointSequence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TflApiPresentationEntitiesStopPointSequence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TflApiPresentationEntitiesStopPointSequence} obj Optional instance to populate.
     * @return {module:model/TflApiPresentationEntitiesStopPointSequence} The populated <code>TflApiPresentationEntitiesStopPointSequence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TflApiPresentationEntitiesStopPointSequence();

            if (data.hasOwnProperty('branchId')) {
                obj['branchId'] = ApiClient.convertToType(data['branchId'], 'Number');
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('lineId')) {
                obj['lineId'] = ApiClient.convertToType(data['lineId'], 'String');
            }
            if (data.hasOwnProperty('lineName')) {
                obj['lineName'] = ApiClient.convertToType(data['lineName'], 'String');
            }
            if (data.hasOwnProperty('nextBranchIds')) {
                obj['nextBranchIds'] = ApiClient.convertToType(data['nextBranchIds'], ['Number']);
            }
            if (data.hasOwnProperty('prevBranchIds')) {
                obj['prevBranchIds'] = ApiClient.convertToType(data['prevBranchIds'], ['Number']);
            }
            if (data.hasOwnProperty('serviceType')) {
                obj['serviceType'] = ApiClient.convertToType(data['serviceType'], 'String');
            }
            if (data.hasOwnProperty('stopPoint')) {
                obj['stopPoint'] = ApiClient.convertToType(data['stopPoint'], [TflApiPresentationEntitiesMatchedStop]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TflApiPresentationEntitiesStopPointSequence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TflApiPresentationEntitiesStopPointSequence</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }
        // ensure the json data is a string
        if (data['lineId'] && !(typeof data['lineId'] === 'string' || data['lineId'] instanceof String)) {
            throw new Error("Expected the field `lineId` to be a primitive type in the JSON string but got " + data['lineId']);
        }
        // ensure the json data is a string
        if (data['lineName'] && !(typeof data['lineName'] === 'string' || data['lineName'] instanceof String)) {
            throw new Error("Expected the field `lineName` to be a primitive type in the JSON string but got " + data['lineName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nextBranchIds'])) {
            throw new Error("Expected the field `nextBranchIds` to be an array in the JSON data but got " + data['nextBranchIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['prevBranchIds'])) {
            throw new Error("Expected the field `prevBranchIds` to be an array in the JSON data but got " + data['prevBranchIds']);
        }
        // ensure the json data is a string
        if (data['serviceType'] && !(typeof data['serviceType'] === 'string' || data['serviceType'] instanceof String)) {
            throw new Error("Expected the field `serviceType` to be a primitive type in the JSON string but got " + data['serviceType']);
        }
        if (data['stopPoint']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['stopPoint'])) {
                throw new Error("Expected the field `stopPoint` to be an array in the JSON data but got " + data['stopPoint']);
            }
            // validate the optional field `stopPoint` (array)
            for (const item of data['stopPoint']) {
                TflApiPresentationEntitiesMatchedStop.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The id of this branch.
 * @member {Number} branchId
 */
TflApiPresentationEntitiesStopPointSequence.prototype['branchId'] = undefined;

/**
 * @member {String} direction
 */
TflApiPresentationEntitiesStopPointSequence.prototype['direction'] = undefined;

/**
 * @member {String} lineId
 */
TflApiPresentationEntitiesStopPointSequence.prototype['lineId'] = undefined;

/**
 * @member {String} lineName
 */
TflApiPresentationEntitiesStopPointSequence.prototype['lineName'] = undefined;

/**
 * The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be              identical in the case of a looped route e.g. the Circle line.
 * @member {Array.<Number>} nextBranchIds
 */
TflApiPresentationEntitiesStopPointSequence.prototype['nextBranchIds'] = undefined;

/**
 * The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be              identical in the case of a looped route e.g. the Circle line.
 * @member {Array.<Number>} prevBranchIds
 */
TflApiPresentationEntitiesStopPointSequence.prototype['prevBranchIds'] = undefined;

/**
 * @member {module:model/TflApiPresentationEntitiesStopPointSequence.ServiceTypeEnum} serviceType
 */
TflApiPresentationEntitiesStopPointSequence.prototype['serviceType'] = undefined;

/**
 * @member {Array.<module:model/TflApiPresentationEntitiesMatchedStop>} stopPoint
 */
TflApiPresentationEntitiesStopPointSequence.prototype['stopPoint'] = undefined;





/**
 * Allowed values for the <code>serviceType</code> property.
 * @enum {String}
 * @readonly
 */
TflApiPresentationEntitiesStopPointSequence['ServiceTypeEnum'] = {

    /**
     * value: "Regular"
     * @const
     */
    "Regular": "Regular",

    /**
     * value: "Night"
     * @const
     */
    "Night": "Night"
};



export default TflApiPresentationEntitiesStopPointSequence;

