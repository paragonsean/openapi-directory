/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TflApiPresentationEntitiesRoadCorridor model module.
 * @module model/TflApiPresentationEntitiesRoadCorridor
 * @version v1
 */
class TflApiPresentationEntitiesRoadCorridor {
    /**
     * Constructs a new <code>TflApiPresentationEntitiesRoadCorridor</code>.
     * @alias module:model/TflApiPresentationEntitiesRoadCorridor
     */
    constructor() { 
        
        TflApiPresentationEntitiesRoadCorridor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TflApiPresentationEntitiesRoadCorridor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TflApiPresentationEntitiesRoadCorridor} obj Optional instance to populate.
     * @return {module:model/TflApiPresentationEntitiesRoadCorridor} The populated <code>TflApiPresentationEntitiesRoadCorridor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TflApiPresentationEntitiesRoadCorridor();

            if (data.hasOwnProperty('bounds')) {
                obj['bounds'] = ApiClient.convertToType(data['bounds'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('envelope')) {
                obj['envelope'] = ApiClient.convertToType(data['envelope'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('statusAggregationEndDate')) {
                obj['statusAggregationEndDate'] = ApiClient.convertToType(data['statusAggregationEndDate'], 'Date');
            }
            if (data.hasOwnProperty('statusAggregationStartDate')) {
                obj['statusAggregationStartDate'] = ApiClient.convertToType(data['statusAggregationStartDate'], 'Date');
            }
            if (data.hasOwnProperty('statusSeverity')) {
                obj['statusSeverity'] = ApiClient.convertToType(data['statusSeverity'], 'String');
            }
            if (data.hasOwnProperty('statusSeverityDescription')) {
                obj['statusSeverityDescription'] = ApiClient.convertToType(data['statusSeverityDescription'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TflApiPresentationEntitiesRoadCorridor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TflApiPresentationEntitiesRoadCorridor</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bounds'] && !(typeof data['bounds'] === 'string' || data['bounds'] instanceof String)) {
            throw new Error("Expected the field `bounds` to be a primitive type in the JSON string but got " + data['bounds']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['envelope'] && !(typeof data['envelope'] === 'string' || data['envelope'] instanceof String)) {
            throw new Error("Expected the field `envelope` to be a primitive type in the JSON string but got " + data['envelope']);
        }
        // ensure the json data is a string
        if (data['group'] && !(typeof data['group'] === 'string' || data['group'] instanceof String)) {
            throw new Error("Expected the field `group` to be a primitive type in the JSON string but got " + data['group']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['statusSeverity'] && !(typeof data['statusSeverity'] === 'string' || data['statusSeverity'] instanceof String)) {
            throw new Error("Expected the field `statusSeverity` to be a primitive type in the JSON string but got " + data['statusSeverity']);
        }
        // ensure the json data is a string
        if (data['statusSeverityDescription'] && !(typeof data['statusSeverityDescription'] === 'string' || data['statusSeverityDescription'] instanceof String)) {
            throw new Error("Expected the field `statusSeverityDescription` to be a primitive type in the JSON string but got " + data['statusSeverityDescription']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The Bounds of the Corridor, given by the south-east followed by the north-west co-ordinate              pair in geoJSON format e.g. \"[[-1.241531,51.242151],[1.641223,53.765721]]\"
 * @member {String} bounds
 */
TflApiPresentationEntitiesRoadCorridor.prototype['bounds'] = undefined;

/**
 * The display name of the Corridor e.g. \"North Circular (A406)\". This              may be identical to the Id.
 * @member {String} displayName
 */
TflApiPresentationEntitiesRoadCorridor.prototype['displayName'] = undefined;

/**
 * The Envelope of the Corridor, given by the corner co-ordinates of a rectangular (four-point) polygon              in geoJSON format e.g. \"[[-1.241531,51.242151],[-1.241531,53.765721],[1.641223,53.765721],[1.641223,51.242151]]\"
 * @member {String} envelope
 */
TflApiPresentationEntitiesRoadCorridor.prototype['envelope'] = undefined;

/**
 * The group name of the Corridor e.g. \"Central London\". Most corridors are not grouped, in which case this field can be null.
 * @member {String} group
 */
TflApiPresentationEntitiesRoadCorridor.prototype['group'] = undefined;

/**
 * The Id of the Corridor e.g. \"A406\"
 * @member {String} id
 */
TflApiPresentationEntitiesRoadCorridor.prototype['id'] = undefined;

/**
 * The end of the period over which status has been aggregated, or null if this is the current corridor status.
 * @member {Date} statusAggregationEndDate
 */
TflApiPresentationEntitiesRoadCorridor.prototype['statusAggregationEndDate'] = undefined;

/**
 * The start of the period over which status has been aggregated, or null if this is the current corridor status.
 * @member {Date} statusAggregationStartDate
 */
TflApiPresentationEntitiesRoadCorridor.prototype['statusAggregationStartDate'] = undefined;

/**
 * Standard multi-mode status severity code
 * @member {String} statusSeverity
 */
TflApiPresentationEntitiesRoadCorridor.prototype['statusSeverity'] = undefined;

/**
 * Description of the status severity as applied to RoadCorridors
 * @member {String} statusSeverityDescription
 */
TflApiPresentationEntitiesRoadCorridor.prototype['statusSeverityDescription'] = undefined;

/**
 * URL to retrieve this Corridor.
 * @member {String} url
 */
TflApiPresentationEntitiesRoadCorridor.prototype['url'] = undefined;






export default TflApiPresentationEntitiesRoadCorridor;

