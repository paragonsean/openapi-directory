/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TflApiPresentationEntitiesDisruptedPoint model module.
 * @module model/TflApiPresentationEntitiesDisruptedPoint
 * @version v1
 */
class TflApiPresentationEntitiesDisruptedPoint {
    /**
     * Constructs a new <code>TflApiPresentationEntitiesDisruptedPoint</code>.
     * @alias module:model/TflApiPresentationEntitiesDisruptedPoint
     */
    constructor() { 
        
        TflApiPresentationEntitiesDisruptedPoint.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TflApiPresentationEntitiesDisruptedPoint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TflApiPresentationEntitiesDisruptedPoint} obj Optional instance to populate.
     * @return {module:model/TflApiPresentationEntitiesDisruptedPoint} The populated <code>TflApiPresentationEntitiesDisruptedPoint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TflApiPresentationEntitiesDisruptedPoint();

            if (data.hasOwnProperty('additionalInformation')) {
                obj['additionalInformation'] = ApiClient.convertToType(data['additionalInformation'], 'String');
            }
            if (data.hasOwnProperty('appearance')) {
                obj['appearance'] = ApiClient.convertToType(data['appearance'], 'String');
            }
            if (data.hasOwnProperty('atcoCode')) {
                obj['atcoCode'] = ApiClient.convertToType(data['atcoCode'], 'String');
            }
            if (data.hasOwnProperty('commonName')) {
                obj['commonName'] = ApiClient.convertToType(data['commonName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('fromDate')) {
                obj['fromDate'] = ApiClient.convertToType(data['fromDate'], 'Date');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('stationAtcoCode')) {
                obj['stationAtcoCode'] = ApiClient.convertToType(data['stationAtcoCode'], 'String');
            }
            if (data.hasOwnProperty('toDate')) {
                obj['toDate'] = ApiClient.convertToType(data['toDate'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TflApiPresentationEntitiesDisruptedPoint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TflApiPresentationEntitiesDisruptedPoint</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['additionalInformation'] && !(typeof data['additionalInformation'] === 'string' || data['additionalInformation'] instanceof String)) {
            throw new Error("Expected the field `additionalInformation` to be a primitive type in the JSON string but got " + data['additionalInformation']);
        }
        // ensure the json data is a string
        if (data['appearance'] && !(typeof data['appearance'] === 'string' || data['appearance'] instanceof String)) {
            throw new Error("Expected the field `appearance` to be a primitive type in the JSON string but got " + data['appearance']);
        }
        // ensure the json data is a string
        if (data['atcoCode'] && !(typeof data['atcoCode'] === 'string' || data['atcoCode'] instanceof String)) {
            throw new Error("Expected the field `atcoCode` to be a primitive type in the JSON string but got " + data['atcoCode']);
        }
        // ensure the json data is a string
        if (data['commonName'] && !(typeof data['commonName'] === 'string' || data['commonName'] instanceof String)) {
            throw new Error("Expected the field `commonName` to be a primitive type in the JSON string but got " + data['commonName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['stationAtcoCode'] && !(typeof data['stationAtcoCode'] === 'string' || data['stationAtcoCode'] instanceof String)) {
            throw new Error("Expected the field `stationAtcoCode` to be a primitive type in the JSON string but got " + data['stationAtcoCode']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {String} additionalInformation
 */
TflApiPresentationEntitiesDisruptedPoint.prototype['additionalInformation'] = undefined;

/**
 * @member {String} appearance
 */
TflApiPresentationEntitiesDisruptedPoint.prototype['appearance'] = undefined;

/**
 * @member {String} atcoCode
 */
TflApiPresentationEntitiesDisruptedPoint.prototype['atcoCode'] = undefined;

/**
 * @member {String} commonName
 */
TflApiPresentationEntitiesDisruptedPoint.prototype['commonName'] = undefined;

/**
 * @member {String} description
 */
TflApiPresentationEntitiesDisruptedPoint.prototype['description'] = undefined;

/**
 * @member {Date} fromDate
 */
TflApiPresentationEntitiesDisruptedPoint.prototype['fromDate'] = undefined;

/**
 * @member {String} mode
 */
TflApiPresentationEntitiesDisruptedPoint.prototype['mode'] = undefined;

/**
 * @member {String} stationAtcoCode
 */
TflApiPresentationEntitiesDisruptedPoint.prototype['stationAtcoCode'] = undefined;

/**
 * @member {Date} toDate
 */
TflApiPresentationEntitiesDisruptedPoint.prototype['toDate'] = undefined;

/**
 * @member {String} type
 */
TflApiPresentationEntitiesDisruptedPoint.prototype['type'] = undefined;






export default TflApiPresentationEntitiesDisruptedPoint;

