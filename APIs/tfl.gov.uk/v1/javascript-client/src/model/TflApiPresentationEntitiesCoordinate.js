/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TflApiPresentationEntitiesCoordinate model module.
 * @module model/TflApiPresentationEntitiesCoordinate
 * @version v1
 */
class TflApiPresentationEntitiesCoordinate {
    /**
     * Constructs a new <code>TflApiPresentationEntitiesCoordinate</code>.
     * @alias module:model/TflApiPresentationEntitiesCoordinate
     */
    constructor() { 
        
        TflApiPresentationEntitiesCoordinate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TflApiPresentationEntitiesCoordinate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TflApiPresentationEntitiesCoordinate} obj Optional instance to populate.
     * @return {module:model/TflApiPresentationEntitiesCoordinate} The populated <code>TflApiPresentationEntitiesCoordinate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TflApiPresentationEntitiesCoordinate();

            if (data.hasOwnProperty('easting')) {
                obj['easting'] = ApiClient.convertToType(data['easting'], 'Number');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('northing')) {
                obj['northing'] = ApiClient.convertToType(data['northing'], 'Number');
            }
            if (data.hasOwnProperty('xCoord')) {
                obj['xCoord'] = ApiClient.convertToType(data['xCoord'], 'Number');
            }
            if (data.hasOwnProperty('yCoord')) {
                obj['yCoord'] = ApiClient.convertToType(data['yCoord'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TflApiPresentationEntitiesCoordinate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TflApiPresentationEntitiesCoordinate</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * @member {Number} easting
 */
TflApiPresentationEntitiesCoordinate.prototype['easting'] = undefined;

/**
 * @member {Number} latitude
 */
TflApiPresentationEntitiesCoordinate.prototype['latitude'] = undefined;

/**
 * @member {Number} longitude
 */
TflApiPresentationEntitiesCoordinate.prototype['longitude'] = undefined;

/**
 * @member {Number} northing
 */
TflApiPresentationEntitiesCoordinate.prototype['northing'] = undefined;

/**
 * @member {Number} xCoord
 */
TflApiPresentationEntitiesCoordinate.prototype['xCoord'] = undefined;

/**
 * @member {Number} yCoord
 */
TflApiPresentationEntitiesCoordinate.prototype['yCoord'] = undefined;






export default TflApiPresentationEntitiesCoordinate;

