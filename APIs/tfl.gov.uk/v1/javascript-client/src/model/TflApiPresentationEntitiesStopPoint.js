/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TflApiPresentationEntitiesAdditionalProperties from './TflApiPresentationEntitiesAdditionalProperties';
import TflApiPresentationEntitiesIdentifier from './TflApiPresentationEntitiesIdentifier';
import TflApiPresentationEntitiesLineGroup from './TflApiPresentationEntitiesLineGroup';
import TflApiPresentationEntitiesLineModeGroup from './TflApiPresentationEntitiesLineModeGroup';
import TflApiPresentationEntitiesPlace from './TflApiPresentationEntitiesPlace';

/**
 * The TflApiPresentationEntitiesStopPoint model module.
 * @module model/TflApiPresentationEntitiesStopPoint
 * @version v1
 */
class TflApiPresentationEntitiesStopPoint {
    /**
     * Constructs a new <code>TflApiPresentationEntitiesStopPoint</code>.
     * @alias module:model/TflApiPresentationEntitiesStopPoint
     */
    constructor() { 
        
        TflApiPresentationEntitiesStopPoint.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TflApiPresentationEntitiesStopPoint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TflApiPresentationEntitiesStopPoint} obj Optional instance to populate.
     * @return {module:model/TflApiPresentationEntitiesStopPoint} The populated <code>TflApiPresentationEntitiesStopPoint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TflApiPresentationEntitiesStopPoint();

            if (data.hasOwnProperty('accessibilitySummary')) {
                obj['accessibilitySummary'] = ApiClient.convertToType(data['accessibilitySummary'], 'String');
            }
            if (data.hasOwnProperty('additionalProperties')) {
                obj['additionalProperties'] = ApiClient.convertToType(data['additionalProperties'], [TflApiPresentationEntitiesAdditionalProperties]);
            }
            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [TflApiPresentationEntitiesPlace]);
            }
            if (data.hasOwnProperty('childrenUrls')) {
                obj['childrenUrls'] = ApiClient.convertToType(data['childrenUrls'], ['String']);
            }
            if (data.hasOwnProperty('commonName')) {
                obj['commonName'] = ApiClient.convertToType(data['commonName'], 'String');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('fullName')) {
                obj['fullName'] = ApiClient.convertToType(data['fullName'], 'String');
            }
            if (data.hasOwnProperty('hubNaptanCode')) {
                obj['hubNaptanCode'] = ApiClient.convertToType(data['hubNaptanCode'], 'String');
            }
            if (data.hasOwnProperty('icsCode')) {
                obj['icsCode'] = ApiClient.convertToType(data['icsCode'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('indicator')) {
                obj['indicator'] = ApiClient.convertToType(data['indicator'], 'String');
            }
            if (data.hasOwnProperty('individualStopId')) {
                obj['individualStopId'] = ApiClient.convertToType(data['individualStopId'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lineGroup')) {
                obj['lineGroup'] = ApiClient.convertToType(data['lineGroup'], [TflApiPresentationEntitiesLineGroup]);
            }
            if (data.hasOwnProperty('lineModeGroups')) {
                obj['lineModeGroups'] = ApiClient.convertToType(data['lineModeGroups'], [TflApiPresentationEntitiesLineModeGroup]);
            }
            if (data.hasOwnProperty('lines')) {
                obj['lines'] = ApiClient.convertToType(data['lines'], [TflApiPresentationEntitiesIdentifier]);
            }
            if (data.hasOwnProperty('lon')) {
                obj['lon'] = ApiClient.convertToType(data['lon'], 'Number');
            }
            if (data.hasOwnProperty('modes')) {
                obj['modes'] = ApiClient.convertToType(data['modes'], ['String']);
            }
            if (data.hasOwnProperty('naptanId')) {
                obj['naptanId'] = ApiClient.convertToType(data['naptanId'], 'String');
            }
            if (data.hasOwnProperty('naptanMode')) {
                obj['naptanMode'] = ApiClient.convertToType(data['naptanMode'], 'String');
            }
            if (data.hasOwnProperty('placeType')) {
                obj['placeType'] = ApiClient.convertToType(data['placeType'], 'String');
            }
            if (data.hasOwnProperty('platformName')) {
                obj['platformName'] = ApiClient.convertToType(data['platformName'], 'String');
            }
            if (data.hasOwnProperty('smsCode')) {
                obj['smsCode'] = ApiClient.convertToType(data['smsCode'], 'String');
            }
            if (data.hasOwnProperty('stationNaptan')) {
                obj['stationNaptan'] = ApiClient.convertToType(data['stationNaptan'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Boolean');
            }
            if (data.hasOwnProperty('stopLetter')) {
                obj['stopLetter'] = ApiClient.convertToType(data['stopLetter'], 'String');
            }
            if (data.hasOwnProperty('stopType')) {
                obj['stopType'] = ApiClient.convertToType(data['stopType'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TflApiPresentationEntitiesStopPoint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TflApiPresentationEntitiesStopPoint</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accessibilitySummary'] && !(typeof data['accessibilitySummary'] === 'string' || data['accessibilitySummary'] instanceof String)) {
            throw new Error("Expected the field `accessibilitySummary` to be a primitive type in the JSON string but got " + data['accessibilitySummary']);
        }
        if (data['additionalProperties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalProperties'])) {
                throw new Error("Expected the field `additionalProperties` to be an array in the JSON data but got " + data['additionalProperties']);
            }
            // validate the optional field `additionalProperties` (array)
            for (const item of data['additionalProperties']) {
                TflApiPresentationEntitiesAdditionalProperties.validateJSON(item);
            };
        }
        if (data['children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['children'])) {
                throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
            }
            // validate the optional field `children` (array)
            for (const item of data['children']) {
                TflApiPresentationEntitiesPlace.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['childrenUrls'])) {
            throw new Error("Expected the field `childrenUrls` to be an array in the JSON data but got " + data['childrenUrls']);
        }
        // ensure the json data is a string
        if (data['commonName'] && !(typeof data['commonName'] === 'string' || data['commonName'] instanceof String)) {
            throw new Error("Expected the field `commonName` to be a primitive type in the JSON string but got " + data['commonName']);
        }
        // ensure the json data is a string
        if (data['fullName'] && !(typeof data['fullName'] === 'string' || data['fullName'] instanceof String)) {
            throw new Error("Expected the field `fullName` to be a primitive type in the JSON string but got " + data['fullName']);
        }
        // ensure the json data is a string
        if (data['hubNaptanCode'] && !(typeof data['hubNaptanCode'] === 'string' || data['hubNaptanCode'] instanceof String)) {
            throw new Error("Expected the field `hubNaptanCode` to be a primitive type in the JSON string but got " + data['hubNaptanCode']);
        }
        // ensure the json data is a string
        if (data['icsCode'] && !(typeof data['icsCode'] === 'string' || data['icsCode'] instanceof String)) {
            throw new Error("Expected the field `icsCode` to be a primitive type in the JSON string but got " + data['icsCode']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['indicator'] && !(typeof data['indicator'] === 'string' || data['indicator'] instanceof String)) {
            throw new Error("Expected the field `indicator` to be a primitive type in the JSON string but got " + data['indicator']);
        }
        // ensure the json data is a string
        if (data['individualStopId'] && !(typeof data['individualStopId'] === 'string' || data['individualStopId'] instanceof String)) {
            throw new Error("Expected the field `individualStopId` to be a primitive type in the JSON string but got " + data['individualStopId']);
        }
        if (data['lineGroup']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lineGroup'])) {
                throw new Error("Expected the field `lineGroup` to be an array in the JSON data but got " + data['lineGroup']);
            }
            // validate the optional field `lineGroup` (array)
            for (const item of data['lineGroup']) {
                TflApiPresentationEntitiesLineGroup.validateJSON(item);
            };
        }
        if (data['lineModeGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lineModeGroups'])) {
                throw new Error("Expected the field `lineModeGroups` to be an array in the JSON data but got " + data['lineModeGroups']);
            }
            // validate the optional field `lineModeGroups` (array)
            for (const item of data['lineModeGroups']) {
                TflApiPresentationEntitiesLineModeGroup.validateJSON(item);
            };
        }
        if (data['lines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lines'])) {
                throw new Error("Expected the field `lines` to be an array in the JSON data but got " + data['lines']);
            }
            // validate the optional field `lines` (array)
            for (const item of data['lines']) {
                TflApiPresentationEntitiesIdentifier.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['modes'])) {
            throw new Error("Expected the field `modes` to be an array in the JSON data but got " + data['modes']);
        }
        // ensure the json data is a string
        if (data['naptanId'] && !(typeof data['naptanId'] === 'string' || data['naptanId'] instanceof String)) {
            throw new Error("Expected the field `naptanId` to be a primitive type in the JSON string but got " + data['naptanId']);
        }
        // ensure the json data is a string
        if (data['naptanMode'] && !(typeof data['naptanMode'] === 'string' || data['naptanMode'] instanceof String)) {
            throw new Error("Expected the field `naptanMode` to be a primitive type in the JSON string but got " + data['naptanMode']);
        }
        // ensure the json data is a string
        if (data['placeType'] && !(typeof data['placeType'] === 'string' || data['placeType'] instanceof String)) {
            throw new Error("Expected the field `placeType` to be a primitive type in the JSON string but got " + data['placeType']);
        }
        // ensure the json data is a string
        if (data['platformName'] && !(typeof data['platformName'] === 'string' || data['platformName'] instanceof String)) {
            throw new Error("Expected the field `platformName` to be a primitive type in the JSON string but got " + data['platformName']);
        }
        // ensure the json data is a string
        if (data['smsCode'] && !(typeof data['smsCode'] === 'string' || data['smsCode'] instanceof String)) {
            throw new Error("Expected the field `smsCode` to be a primitive type in the JSON string but got " + data['smsCode']);
        }
        // ensure the json data is a string
        if (data['stationNaptan'] && !(typeof data['stationNaptan'] === 'string' || data['stationNaptan'] instanceof String)) {
            throw new Error("Expected the field `stationNaptan` to be a primitive type in the JSON string but got " + data['stationNaptan']);
        }
        // ensure the json data is a string
        if (data['stopLetter'] && !(typeof data['stopLetter'] === 'string' || data['stopLetter'] instanceof String)) {
            throw new Error("Expected the field `stopLetter` to be a primitive type in the JSON string but got " + data['stopLetter']);
        }
        // ensure the json data is a string
        if (data['stopType'] && !(typeof data['stopType'] === 'string' || data['stopType'] instanceof String)) {
            throw new Error("Expected the field `stopType` to be a primitive type in the JSON string but got " + data['stopType']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {String} accessibilitySummary
 */
TflApiPresentationEntitiesStopPoint.prototype['accessibilitySummary'] = undefined;

/**
 * A bag of additional key/value pairs with extra information about this place.
 * @member {Array.<module:model/TflApiPresentationEntitiesAdditionalProperties>} additionalProperties
 */
TflApiPresentationEntitiesStopPoint.prototype['additionalProperties'] = undefined;

/**
 * @member {Array.<module:model/TflApiPresentationEntitiesPlace>} children
 */
TflApiPresentationEntitiesStopPoint.prototype['children'] = undefined;

/**
 * @member {Array.<String>} childrenUrls
 */
TflApiPresentationEntitiesStopPoint.prototype['childrenUrls'] = undefined;

/**
 * A human readable name.
 * @member {String} commonName
 */
TflApiPresentationEntitiesStopPoint.prototype['commonName'] = undefined;

/**
 * The distance of the place from its search point, if this is the result              of a geographical search, otherwise zero.
 * @member {Number} distance
 */
TflApiPresentationEntitiesStopPoint.prototype['distance'] = undefined;

/**
 * @member {String} fullName
 */
TflApiPresentationEntitiesStopPoint.prototype['fullName'] = undefined;

/**
 * @member {String} hubNaptanCode
 */
TflApiPresentationEntitiesStopPoint.prototype['hubNaptanCode'] = undefined;

/**
 * @member {String} icsCode
 */
TflApiPresentationEntitiesStopPoint.prototype['icsCode'] = undefined;

/**
 * A unique identifier.
 * @member {String} id
 */
TflApiPresentationEntitiesStopPoint.prototype['id'] = undefined;

/**
 * The indicator of the stop point e.g. \"Stop K\"
 * @member {String} indicator
 */
TflApiPresentationEntitiesStopPoint.prototype['indicator'] = undefined;

/**
 * @member {String} individualStopId
 */
TflApiPresentationEntitiesStopPoint.prototype['individualStopId'] = undefined;

/**
 * WGS84 latitude of the location.
 * @member {Number} lat
 */
TflApiPresentationEntitiesStopPoint.prototype['lat'] = undefined;

/**
 * @member {Array.<module:model/TflApiPresentationEntitiesLineGroup>} lineGroup
 */
TflApiPresentationEntitiesStopPoint.prototype['lineGroup'] = undefined;

/**
 * @member {Array.<module:model/TflApiPresentationEntitiesLineModeGroup>} lineModeGroups
 */
TflApiPresentationEntitiesStopPoint.prototype['lineModeGroups'] = undefined;

/**
 * @member {Array.<module:model/TflApiPresentationEntitiesIdentifier>} lines
 */
TflApiPresentationEntitiesStopPoint.prototype['lines'] = undefined;

/**
 * WGS84 longitude of the location.
 * @member {Number} lon
 */
TflApiPresentationEntitiesStopPoint.prototype['lon'] = undefined;

/**
 * @member {Array.<String>} modes
 */
TflApiPresentationEntitiesStopPoint.prototype['modes'] = undefined;

/**
 * @member {String} naptanId
 */
TflApiPresentationEntitiesStopPoint.prototype['naptanId'] = undefined;

/**
 * @member {String} naptanMode
 */
TflApiPresentationEntitiesStopPoint.prototype['naptanMode'] = undefined;

/**
 * The type of Place. See /Place/Meta/placeTypes for possible values.
 * @member {String} placeType
 */
TflApiPresentationEntitiesStopPoint.prototype['placeType'] = undefined;

/**
 * @member {String} platformName
 */
TflApiPresentationEntitiesStopPoint.prototype['platformName'] = undefined;

/**
 * @member {String} smsCode
 */
TflApiPresentationEntitiesStopPoint.prototype['smsCode'] = undefined;

/**
 * @member {String} stationNaptan
 */
TflApiPresentationEntitiesStopPoint.prototype['stationNaptan'] = undefined;

/**
 * @member {Boolean} status
 */
TflApiPresentationEntitiesStopPoint.prototype['status'] = undefined;

/**
 * The stop letter, if it could be cleansed from the Indicator e.g. \"K\"
 * @member {String} stopLetter
 */
TflApiPresentationEntitiesStopPoint.prototype['stopLetter'] = undefined;

/**
 * @member {String} stopType
 */
TflApiPresentationEntitiesStopPoint.prototype['stopType'] = undefined;

/**
 * The unique location of this resource.
 * @member {String} url
 */
TflApiPresentationEntitiesStopPoint.prototype['url'] = undefined;






export default TflApiPresentationEntitiesStopPoint;

