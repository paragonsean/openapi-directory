/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TflApiPresentationEntitiesJourneyPlannerJourney from './TflApiPresentationEntitiesJourneyPlannerJourney';
import TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData from './TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData';
import TflApiPresentationEntitiesJourneyPlannerJourneyVector from './TflApiPresentationEntitiesJourneyPlannerJourneyVector';
import TflApiPresentationEntitiesJourneyPlannerSearchCriteria from './TflApiPresentationEntitiesJourneyPlannerSearchCriteria';
import TflApiPresentationEntitiesLine from './TflApiPresentationEntitiesLine';

/**
 * The TflApiPresentationEntitiesJourneyPlannerItineraryResult model module.
 * @module model/TflApiPresentationEntitiesJourneyPlannerItineraryResult
 * @version v1
 */
class TflApiPresentationEntitiesJourneyPlannerItineraryResult {
    /**
     * Constructs a new <code>TflApiPresentationEntitiesJourneyPlannerItineraryResult</code>.
     * A DTO representing a list of possible journeys.
     * @alias module:model/TflApiPresentationEntitiesJourneyPlannerItineraryResult
     */
    constructor() { 
        
        TflApiPresentationEntitiesJourneyPlannerItineraryResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TflApiPresentationEntitiesJourneyPlannerItineraryResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TflApiPresentationEntitiesJourneyPlannerItineraryResult} obj Optional instance to populate.
     * @return {module:model/TflApiPresentationEntitiesJourneyPlannerItineraryResult} The populated <code>TflApiPresentationEntitiesJourneyPlannerItineraryResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TflApiPresentationEntitiesJourneyPlannerItineraryResult();

            if (data.hasOwnProperty('cycleHireDockingStationData')) {
                obj['cycleHireDockingStationData'] = TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData.constructFromObject(data['cycleHireDockingStationData']);
            }
            if (data.hasOwnProperty('journeyVector')) {
                obj['journeyVector'] = TflApiPresentationEntitiesJourneyPlannerJourneyVector.constructFromObject(data['journeyVector']);
            }
            if (data.hasOwnProperty('journeys')) {
                obj['journeys'] = ApiClient.convertToType(data['journeys'], [TflApiPresentationEntitiesJourneyPlannerJourney]);
            }
            if (data.hasOwnProperty('lines')) {
                obj['lines'] = ApiClient.convertToType(data['lines'], [TflApiPresentationEntitiesLine]);
            }
            if (data.hasOwnProperty('recommendedMaxAgeMinutes')) {
                obj['recommendedMaxAgeMinutes'] = ApiClient.convertToType(data['recommendedMaxAgeMinutes'], 'Number');
            }
            if (data.hasOwnProperty('searchCriteria')) {
                obj['searchCriteria'] = TflApiPresentationEntitiesJourneyPlannerSearchCriteria.constructFromObject(data['searchCriteria']);
            }
            if (data.hasOwnProperty('stopMessages')) {
                obj['stopMessages'] = ApiClient.convertToType(data['stopMessages'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TflApiPresentationEntitiesJourneyPlannerItineraryResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TflApiPresentationEntitiesJourneyPlannerItineraryResult</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cycleHireDockingStationData`
        if (data['cycleHireDockingStationData']) { // data not null
          TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData.validateJSON(data['cycleHireDockingStationData']);
        }
        // validate the optional field `journeyVector`
        if (data['journeyVector']) { // data not null
          TflApiPresentationEntitiesJourneyPlannerJourneyVector.validateJSON(data['journeyVector']);
        }
        if (data['journeys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['journeys'])) {
                throw new Error("Expected the field `journeys` to be an array in the JSON data but got " + data['journeys']);
            }
            // validate the optional field `journeys` (array)
            for (const item of data['journeys']) {
                TflApiPresentationEntitiesJourneyPlannerJourney.validateJSON(item);
            };
        }
        if (data['lines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lines'])) {
                throw new Error("Expected the field `lines` to be an array in the JSON data but got " + data['lines']);
            }
            // validate the optional field `lines` (array)
            for (const item of data['lines']) {
                TflApiPresentationEntitiesLine.validateJSON(item);
            };
        }
        // validate the optional field `searchCriteria`
        if (data['searchCriteria']) { // data not null
          TflApiPresentationEntitiesJourneyPlannerSearchCriteria.validateJSON(data['searchCriteria']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['stopMessages'])) {
            throw new Error("Expected the field `stopMessages` to be an array in the JSON data but got " + data['stopMessages']);
        }

        return true;
    }


}



/**
 * @member {module:model/TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData} cycleHireDockingStationData
 */
TflApiPresentationEntitiesJourneyPlannerItineraryResult.prototype['cycleHireDockingStationData'] = undefined;

/**
 * @member {module:model/TflApiPresentationEntitiesJourneyPlannerJourneyVector} journeyVector
 */
TflApiPresentationEntitiesJourneyPlannerItineraryResult.prototype['journeyVector'] = undefined;

/**
 * @member {Array.<module:model/TflApiPresentationEntitiesJourneyPlannerJourney>} journeys
 */
TflApiPresentationEntitiesJourneyPlannerItineraryResult.prototype['journeys'] = undefined;

/**
 * @member {Array.<module:model/TflApiPresentationEntitiesLine>} lines
 */
TflApiPresentationEntitiesJourneyPlannerItineraryResult.prototype['lines'] = undefined;

/**
 * @member {Number} recommendedMaxAgeMinutes
 */
TflApiPresentationEntitiesJourneyPlannerItineraryResult.prototype['recommendedMaxAgeMinutes'] = undefined;

/**
 * @member {module:model/TflApiPresentationEntitiesJourneyPlannerSearchCriteria} searchCriteria
 */
TflApiPresentationEntitiesJourneyPlannerItineraryResult.prototype['searchCriteria'] = undefined;

/**
 * @member {Array.<String>} stopMessages
 */
TflApiPresentationEntitiesJourneyPlannerItineraryResult.prototype['stopMessages'] = undefined;






export default TflApiPresentationEntitiesJourneyPlannerItineraryResult;

