/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TflApiPresentationEntitiesFaresTicketTime from './TflApiPresentationEntitiesFaresTicketTime';
import TflApiPresentationEntitiesFaresTicketType from './TflApiPresentationEntitiesFaresTicketType';
import TflApiPresentationEntitiesMessage from './TflApiPresentationEntitiesMessage';

/**
 * The TflApiPresentationEntitiesFaresTicket model module.
 * @module model/TflApiPresentationEntitiesFaresTicket
 * @version v1
 */
class TflApiPresentationEntitiesFaresTicket {
    /**
     * Constructs a new <code>TflApiPresentationEntitiesFaresTicket</code>.
     * @alias module:model/TflApiPresentationEntitiesFaresTicket
     */
    constructor() { 
        
        TflApiPresentationEntitiesFaresTicket.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TflApiPresentationEntitiesFaresTicket</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TflApiPresentationEntitiesFaresTicket} obj Optional instance to populate.
     * @return {module:model/TflApiPresentationEntitiesFaresTicket} The populated <code>TflApiPresentationEntitiesFaresTicket</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TflApiPresentationEntitiesFaresTicket();

            if (data.hasOwnProperty('cost')) {
                obj['cost'] = ApiClient.convertToType(data['cost'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayOrder')) {
                obj['displayOrder'] = ApiClient.convertToType(data['displayOrder'], 'Number');
            }
            if (data.hasOwnProperty('messages')) {
                obj['messages'] = ApiClient.convertToType(data['messages'], [TflApiPresentationEntitiesMessage]);
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('passengerType')) {
                obj['passengerType'] = ApiClient.convertToType(data['passengerType'], 'String');
            }
            if (data.hasOwnProperty('ticketTime')) {
                obj['ticketTime'] = TflApiPresentationEntitiesFaresTicketTime.constructFromObject(data['ticketTime']);
            }
            if (data.hasOwnProperty('ticketType')) {
                obj['ticketType'] = TflApiPresentationEntitiesFaresTicketType.constructFromObject(data['ticketType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TflApiPresentationEntitiesFaresTicket</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TflApiPresentationEntitiesFaresTicket</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cost'] && !(typeof data['cost'] === 'string' || data['cost'] instanceof String)) {
            throw new Error("Expected the field `cost` to be a primitive type in the JSON string but got " + data['cost']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['messages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['messages'])) {
                throw new Error("Expected the field `messages` to be an array in the JSON data but got " + data['messages']);
            }
            // validate the optional field `messages` (array)
            for (const item of data['messages']) {
                TflApiPresentationEntitiesMessage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['passengerType'] && !(typeof data['passengerType'] === 'string' || data['passengerType'] instanceof String)) {
            throw new Error("Expected the field `passengerType` to be a primitive type in the JSON string but got " + data['passengerType']);
        }
        // validate the optional field `ticketTime`
        if (data['ticketTime']) { // data not null
          TflApiPresentationEntitiesFaresTicketTime.validateJSON(data['ticketTime']);
        }
        // validate the optional field `ticketType`
        if (data['ticketType']) { // data not null
          TflApiPresentationEntitiesFaresTicketType.validateJSON(data['ticketType']);
        }

        return true;
    }


}



/**
 * @member {String} cost
 */
TflApiPresentationEntitiesFaresTicket.prototype['cost'] = undefined;

/**
 * @member {String} description
 */
TflApiPresentationEntitiesFaresTicket.prototype['description'] = undefined;

/**
 * @member {Number} displayOrder
 */
TflApiPresentationEntitiesFaresTicket.prototype['displayOrder'] = undefined;

/**
 * @member {Array.<module:model/TflApiPresentationEntitiesMessage>} messages
 */
TflApiPresentationEntitiesFaresTicket.prototype['messages'] = undefined;

/**
 * @member {String} mode
 */
TflApiPresentationEntitiesFaresTicket.prototype['mode'] = undefined;

/**
 * @member {String} passengerType
 */
TflApiPresentationEntitiesFaresTicket.prototype['passengerType'] = undefined;

/**
 * @member {module:model/TflApiPresentationEntitiesFaresTicketTime} ticketTime
 */
TflApiPresentationEntitiesFaresTicket.prototype['ticketTime'] = undefined;

/**
 * @member {module:model/TflApiPresentationEntitiesFaresTicketType} ticketType
 */
TflApiPresentationEntitiesFaresTicket.prototype['ticketType'] = undefined;






export default TflApiPresentationEntitiesFaresTicket;

