/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TflApiPresentationEntitiesPredictionTiming from './TflApiPresentationEntitiesPredictionTiming';

/**
 * The TflApiPresentationEntitiesArrivalDeparture model module.
 * @module model/TflApiPresentationEntitiesArrivalDeparture
 * @version v1
 */
class TflApiPresentationEntitiesArrivalDeparture {
    /**
     * Constructs a new <code>TflApiPresentationEntitiesArrivalDeparture</code>.
     * DTO to capture the prediction details
     * @alias module:model/TflApiPresentationEntitiesArrivalDeparture
     */
    constructor() { 
        
        TflApiPresentationEntitiesArrivalDeparture.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TflApiPresentationEntitiesArrivalDeparture</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TflApiPresentationEntitiesArrivalDeparture} obj Optional instance to populate.
     * @return {module:model/TflApiPresentationEntitiesArrivalDeparture} The populated <code>TflApiPresentationEntitiesArrivalDeparture</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TflApiPresentationEntitiesArrivalDeparture();

            if (data.hasOwnProperty('cause')) {
                obj['cause'] = ApiClient.convertToType(data['cause'], 'String');
            }
            if (data.hasOwnProperty('departureStatus')) {
                obj['departureStatus'] = ApiClient.convertToType(data['departureStatus'], 'String');
            }
            if (data.hasOwnProperty('destinationName')) {
                obj['destinationName'] = ApiClient.convertToType(data['destinationName'], 'String');
            }
            if (data.hasOwnProperty('destinationNaptanId')) {
                obj['destinationNaptanId'] = ApiClient.convertToType(data['destinationNaptanId'], 'String');
            }
            if (data.hasOwnProperty('estimatedTimeOfArrival')) {
                obj['estimatedTimeOfArrival'] = ApiClient.convertToType(data['estimatedTimeOfArrival'], 'Date');
            }
            if (data.hasOwnProperty('estimatedTimeOfDeparture')) {
                obj['estimatedTimeOfDeparture'] = ApiClient.convertToType(data['estimatedTimeOfDeparture'], 'Date');
            }
            if (data.hasOwnProperty('minutesAndSecondsToArrival')) {
                obj['minutesAndSecondsToArrival'] = ApiClient.convertToType(data['minutesAndSecondsToArrival'], 'String');
            }
            if (data.hasOwnProperty('minutesAndSecondsToDeparture')) {
                obj['minutesAndSecondsToDeparture'] = ApiClient.convertToType(data['minutesAndSecondsToDeparture'], 'String');
            }
            if (data.hasOwnProperty('naptanId')) {
                obj['naptanId'] = ApiClient.convertToType(data['naptanId'], 'String');
            }
            if (data.hasOwnProperty('platformName')) {
                obj['platformName'] = ApiClient.convertToType(data['platformName'], 'String');
            }
            if (data.hasOwnProperty('scheduledTimeOfArrival')) {
                obj['scheduledTimeOfArrival'] = ApiClient.convertToType(data['scheduledTimeOfArrival'], 'Date');
            }
            if (data.hasOwnProperty('scheduledTimeOfDeparture')) {
                obj['scheduledTimeOfDeparture'] = ApiClient.convertToType(data['scheduledTimeOfDeparture'], 'Date');
            }
            if (data.hasOwnProperty('stationName')) {
                obj['stationName'] = ApiClient.convertToType(data['stationName'], 'String');
            }
            if (data.hasOwnProperty('timing')) {
                obj['timing'] = TflApiPresentationEntitiesPredictionTiming.constructFromObject(data['timing']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TflApiPresentationEntitiesArrivalDeparture</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TflApiPresentationEntitiesArrivalDeparture</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cause'] && !(typeof data['cause'] === 'string' || data['cause'] instanceof String)) {
            throw new Error("Expected the field `cause` to be a primitive type in the JSON string but got " + data['cause']);
        }
        // ensure the json data is a string
        if (data['departureStatus'] && !(typeof data['departureStatus'] === 'string' || data['departureStatus'] instanceof String)) {
            throw new Error("Expected the field `departureStatus` to be a primitive type in the JSON string but got " + data['departureStatus']);
        }
        // ensure the json data is a string
        if (data['destinationName'] && !(typeof data['destinationName'] === 'string' || data['destinationName'] instanceof String)) {
            throw new Error("Expected the field `destinationName` to be a primitive type in the JSON string but got " + data['destinationName']);
        }
        // ensure the json data is a string
        if (data['destinationNaptanId'] && !(typeof data['destinationNaptanId'] === 'string' || data['destinationNaptanId'] instanceof String)) {
            throw new Error("Expected the field `destinationNaptanId` to be a primitive type in the JSON string but got " + data['destinationNaptanId']);
        }
        // ensure the json data is a string
        if (data['minutesAndSecondsToArrival'] && !(typeof data['minutesAndSecondsToArrival'] === 'string' || data['minutesAndSecondsToArrival'] instanceof String)) {
            throw new Error("Expected the field `minutesAndSecondsToArrival` to be a primitive type in the JSON string but got " + data['minutesAndSecondsToArrival']);
        }
        // ensure the json data is a string
        if (data['minutesAndSecondsToDeparture'] && !(typeof data['minutesAndSecondsToDeparture'] === 'string' || data['minutesAndSecondsToDeparture'] instanceof String)) {
            throw new Error("Expected the field `minutesAndSecondsToDeparture` to be a primitive type in the JSON string but got " + data['minutesAndSecondsToDeparture']);
        }
        // ensure the json data is a string
        if (data['naptanId'] && !(typeof data['naptanId'] === 'string' || data['naptanId'] instanceof String)) {
            throw new Error("Expected the field `naptanId` to be a primitive type in the JSON string but got " + data['naptanId']);
        }
        // ensure the json data is a string
        if (data['platformName'] && !(typeof data['platformName'] === 'string' || data['platformName'] instanceof String)) {
            throw new Error("Expected the field `platformName` to be a primitive type in the JSON string but got " + data['platformName']);
        }
        // ensure the json data is a string
        if (data['stationName'] && !(typeof data['stationName'] === 'string' || data['stationName'] instanceof String)) {
            throw new Error("Expected the field `stationName` to be a primitive type in the JSON string but got " + data['stationName']);
        }
        // validate the optional field `timing`
        if (data['timing']) { // data not null
          TflApiPresentationEntitiesPredictionTiming.validateJSON(data['timing']);
        }

        return true;
    }


}



/**
 * Reason for cancellation or delay
 * @member {String} cause
 */
TflApiPresentationEntitiesArrivalDeparture.prototype['cause'] = undefined;

/**
 * Status of departure
 * @member {module:model/TflApiPresentationEntitiesArrivalDeparture.DepartureStatusEnum} departureStatus
 */
TflApiPresentationEntitiesArrivalDeparture.prototype['departureStatus'] = undefined;

/**
 * Name of the destination
 * @member {String} destinationName
 */
TflApiPresentationEntitiesArrivalDeparture.prototype['destinationName'] = undefined;

/**
 * Naptan Identifier for the prediction's destination
 * @member {String} destinationNaptanId
 */
TflApiPresentationEntitiesArrivalDeparture.prototype['destinationNaptanId'] = undefined;

/**
 * Estimated time of arrival
 * @member {Date} estimatedTimeOfArrival
 */
TflApiPresentationEntitiesArrivalDeparture.prototype['estimatedTimeOfArrival'] = undefined;

/**
 * Estimated time of arrival
 * @member {Date} estimatedTimeOfDeparture
 */
TflApiPresentationEntitiesArrivalDeparture.prototype['estimatedTimeOfDeparture'] = undefined;

/**
 * Estimated time of arrival
 * @member {String} minutesAndSecondsToArrival
 */
TflApiPresentationEntitiesArrivalDeparture.prototype['minutesAndSecondsToArrival'] = undefined;

/**
 * Estimated time of arrival
 * @member {String} minutesAndSecondsToDeparture
 */
TflApiPresentationEntitiesArrivalDeparture.prototype['minutesAndSecondsToDeparture'] = undefined;

/**
 * Identifier for the prediction
 * @member {String} naptanId
 */
TflApiPresentationEntitiesArrivalDeparture.prototype['naptanId'] = undefined;

/**
 * Platform name (for bus, this is the stop letter)
 * @member {String} platformName
 */
TflApiPresentationEntitiesArrivalDeparture.prototype['platformName'] = undefined;

/**
 * Estimated time of arrival
 * @member {Date} scheduledTimeOfArrival
 */
TflApiPresentationEntitiesArrivalDeparture.prototype['scheduledTimeOfArrival'] = undefined;

/**
 * Estimated time of arrival
 * @member {Date} scheduledTimeOfDeparture
 */
TflApiPresentationEntitiesArrivalDeparture.prototype['scheduledTimeOfDeparture'] = undefined;

/**
 * Station name
 * @member {String} stationName
 */
TflApiPresentationEntitiesArrivalDeparture.prototype['stationName'] = undefined;

/**
 * @member {module:model/TflApiPresentationEntitiesPredictionTiming} timing
 */
TflApiPresentationEntitiesArrivalDeparture.prototype['timing'] = undefined;





/**
 * Allowed values for the <code>departureStatus</code> property.
 * @enum {String}
 * @readonly
 */
TflApiPresentationEntitiesArrivalDeparture['DepartureStatusEnum'] = {

    /**
     * value: "OnTime"
     * @const
     */
    "OnTime": "OnTime",

    /**
     * value: "Delayed"
     * @const
     */
    "Delayed": "Delayed",

    /**
     * value: "Cancelled"
     * @const
     */
    "Cancelled": "Cancelled",

    /**
     * value: "NotStoppingAtStation"
     * @const
     */
    "NotStoppingAtStation": "NotStoppingAtStation"
};



export default TflApiPresentationEntitiesArrivalDeparture;

