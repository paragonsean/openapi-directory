/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TflApiPresentationEntitiesDisruption from './TflApiPresentationEntitiesDisruption';
import TflApiPresentationEntitiesIdentifier from './TflApiPresentationEntitiesIdentifier';
import TflApiPresentationEntitiesInstruction from './TflApiPresentationEntitiesInstruction';
import TflApiPresentationEntitiesJourneyPlannerObstacle from './TflApiPresentationEntitiesJourneyPlannerObstacle';
import TflApiPresentationEntitiesJourneyPlannerPath from './TflApiPresentationEntitiesJourneyPlannerPath';
import TflApiPresentationEntitiesJourneyPlannerPlannedWork from './TflApiPresentationEntitiesJourneyPlannerPlannedWork';
import TflApiPresentationEntitiesJourneyPlannerRouteOption from './TflApiPresentationEntitiesJourneyPlannerRouteOption';
import TflApiPresentationEntitiesPoint from './TflApiPresentationEntitiesPoint';

/**
 * The TflApiPresentationEntitiesJourneyPlannerLeg model module.
 * @module model/TflApiPresentationEntitiesJourneyPlannerLeg
 * @version v1
 */
class TflApiPresentationEntitiesJourneyPlannerLeg {
    /**
     * Constructs a new <code>TflApiPresentationEntitiesJourneyPlannerLeg</code>.
     * @alias module:model/TflApiPresentationEntitiesJourneyPlannerLeg
     */
    constructor() { 
        
        TflApiPresentationEntitiesJourneyPlannerLeg.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TflApiPresentationEntitiesJourneyPlannerLeg</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TflApiPresentationEntitiesJourneyPlannerLeg} obj Optional instance to populate.
     * @return {module:model/TflApiPresentationEntitiesJourneyPlannerLeg} The populated <code>TflApiPresentationEntitiesJourneyPlannerLeg</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TflApiPresentationEntitiesJourneyPlannerLeg();

            if (data.hasOwnProperty('arrivalPoint')) {
                obj['arrivalPoint'] = TflApiPresentationEntitiesPoint.constructFromObject(data['arrivalPoint']);
            }
            if (data.hasOwnProperty('arrivalTime')) {
                obj['arrivalTime'] = ApiClient.convertToType(data['arrivalTime'], 'Date');
            }
            if (data.hasOwnProperty('departurePoint')) {
                obj['departurePoint'] = TflApiPresentationEntitiesPoint.constructFromObject(data['departurePoint']);
            }
            if (data.hasOwnProperty('departureTime')) {
                obj['departureTime'] = ApiClient.convertToType(data['departureTime'], 'Date');
            }
            if (data.hasOwnProperty('disruptions')) {
                obj['disruptions'] = ApiClient.convertToType(data['disruptions'], [TflApiPresentationEntitiesDisruption]);
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('hasFixedLocations')) {
                obj['hasFixedLocations'] = ApiClient.convertToType(data['hasFixedLocations'], 'Boolean');
            }
            if (data.hasOwnProperty('instruction')) {
                obj['instruction'] = TflApiPresentationEntitiesInstruction.constructFromObject(data['instruction']);
            }
            if (data.hasOwnProperty('interChangeDuration')) {
                obj['interChangeDuration'] = ApiClient.convertToType(data['interChangeDuration'], 'String');
            }
            if (data.hasOwnProperty('interChangePosition')) {
                obj['interChangePosition'] = ApiClient.convertToType(data['interChangePosition'], 'String');
            }
            if (data.hasOwnProperty('isDisrupted')) {
                obj['isDisrupted'] = ApiClient.convertToType(data['isDisrupted'], 'Boolean');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = TflApiPresentationEntitiesIdentifier.constructFromObject(data['mode']);
            }
            if (data.hasOwnProperty('obstacles')) {
                obj['obstacles'] = ApiClient.convertToType(data['obstacles'], [TflApiPresentationEntitiesJourneyPlannerObstacle]);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = TflApiPresentationEntitiesJourneyPlannerPath.constructFromObject(data['path']);
            }
            if (data.hasOwnProperty('plannedWorks')) {
                obj['plannedWorks'] = ApiClient.convertToType(data['plannedWorks'], [TflApiPresentationEntitiesJourneyPlannerPlannedWork]);
            }
            if (data.hasOwnProperty('routeOptions')) {
                obj['routeOptions'] = ApiClient.convertToType(data['routeOptions'], [TflApiPresentationEntitiesJourneyPlannerRouteOption]);
            }
            if (data.hasOwnProperty('scheduledArrivalTime')) {
                obj['scheduledArrivalTime'] = ApiClient.convertToType(data['scheduledArrivalTime'], 'Date');
            }
            if (data.hasOwnProperty('scheduledDepartureTime')) {
                obj['scheduledDepartureTime'] = ApiClient.convertToType(data['scheduledDepartureTime'], 'Date');
            }
            if (data.hasOwnProperty('speed')) {
                obj['speed'] = ApiClient.convertToType(data['speed'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TflApiPresentationEntitiesJourneyPlannerLeg</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TflApiPresentationEntitiesJourneyPlannerLeg</code>.
     */
    static validateJSON(data) {
        // validate the optional field `arrivalPoint`
        if (data['arrivalPoint']) { // data not null
          TflApiPresentationEntitiesPoint.validateJSON(data['arrivalPoint']);
        }
        // validate the optional field `departurePoint`
        if (data['departurePoint']) { // data not null
          TflApiPresentationEntitiesPoint.validateJSON(data['departurePoint']);
        }
        if (data['disruptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['disruptions'])) {
                throw new Error("Expected the field `disruptions` to be an array in the JSON data but got " + data['disruptions']);
            }
            // validate the optional field `disruptions` (array)
            for (const item of data['disruptions']) {
                TflApiPresentationEntitiesDisruption.validateJSON(item);
            };
        }
        // validate the optional field `instruction`
        if (data['instruction']) { // data not null
          TflApiPresentationEntitiesInstruction.validateJSON(data['instruction']);
        }
        // ensure the json data is a string
        if (data['interChangeDuration'] && !(typeof data['interChangeDuration'] === 'string' || data['interChangeDuration'] instanceof String)) {
            throw new Error("Expected the field `interChangeDuration` to be a primitive type in the JSON string but got " + data['interChangeDuration']);
        }
        // ensure the json data is a string
        if (data['interChangePosition'] && !(typeof data['interChangePosition'] === 'string' || data['interChangePosition'] instanceof String)) {
            throw new Error("Expected the field `interChangePosition` to be a primitive type in the JSON string but got " + data['interChangePosition']);
        }
        // validate the optional field `mode`
        if (data['mode']) { // data not null
          TflApiPresentationEntitiesIdentifier.validateJSON(data['mode']);
        }
        if (data['obstacles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['obstacles'])) {
                throw new Error("Expected the field `obstacles` to be an array in the JSON data but got " + data['obstacles']);
            }
            // validate the optional field `obstacles` (array)
            for (const item of data['obstacles']) {
                TflApiPresentationEntitiesJourneyPlannerObstacle.validateJSON(item);
            };
        }
        // validate the optional field `path`
        if (data['path']) { // data not null
          TflApiPresentationEntitiesJourneyPlannerPath.validateJSON(data['path']);
        }
        if (data['plannedWorks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['plannedWorks'])) {
                throw new Error("Expected the field `plannedWorks` to be an array in the JSON data but got " + data['plannedWorks']);
            }
            // validate the optional field `plannedWorks` (array)
            for (const item of data['plannedWorks']) {
                TflApiPresentationEntitiesJourneyPlannerPlannedWork.validateJSON(item);
            };
        }
        if (data['routeOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['routeOptions'])) {
                throw new Error("Expected the field `routeOptions` to be an array in the JSON data but got " + data['routeOptions']);
            }
            // validate the optional field `routeOptions` (array)
            for (const item of data['routeOptions']) {
                TflApiPresentationEntitiesJourneyPlannerRouteOption.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['speed'] && !(typeof data['speed'] === 'string' || data['speed'] instanceof String)) {
            throw new Error("Expected the field `speed` to be a primitive type in the JSON string but got " + data['speed']);
        }

        return true;
    }


}



/**
 * @member {module:model/TflApiPresentationEntitiesPoint} arrivalPoint
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['arrivalPoint'] = undefined;

/**
 * @member {Date} arrivalTime
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['arrivalTime'] = undefined;

/**
 * @member {module:model/TflApiPresentationEntitiesPoint} departurePoint
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['departurePoint'] = undefined;

/**
 * @member {Date} departureTime
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['departureTime'] = undefined;

/**
 * @member {Array.<module:model/TflApiPresentationEntitiesDisruption>} disruptions
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['disruptions'] = undefined;

/**
 * @member {Number} distance
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['distance'] = undefined;

/**
 * @member {Number} duration
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['duration'] = undefined;

/**
 * @member {Boolean} hasFixedLocations
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['hasFixedLocations'] = undefined;

/**
 * @member {module:model/TflApiPresentationEntitiesInstruction} instruction
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['instruction'] = undefined;

/**
 * @member {String} interChangeDuration
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['interChangeDuration'] = undefined;

/**
 * @member {String} interChangePosition
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['interChangePosition'] = undefined;

/**
 * @member {Boolean} isDisrupted
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['isDisrupted'] = undefined;

/**
 * @member {module:model/TflApiPresentationEntitiesIdentifier} mode
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['mode'] = undefined;

/**
 * @member {Array.<module:model/TflApiPresentationEntitiesJourneyPlannerObstacle>} obstacles
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['obstacles'] = undefined;

/**
 * @member {module:model/TflApiPresentationEntitiesJourneyPlannerPath} path
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['path'] = undefined;

/**
 * @member {Array.<module:model/TflApiPresentationEntitiesJourneyPlannerPlannedWork>} plannedWorks
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['plannedWorks'] = undefined;

/**
 * @member {Array.<module:model/TflApiPresentationEntitiesJourneyPlannerRouteOption>} routeOptions
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['routeOptions'] = undefined;

/**
 * @member {Date} scheduledArrivalTime
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['scheduledArrivalTime'] = undefined;

/**
 * @member {Date} scheduledDepartureTime
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['scheduledDepartureTime'] = undefined;

/**
 * @member {String} speed
 */
TflApiPresentationEntitiesJourneyPlannerLeg.prototype['speed'] = undefined;






export default TflApiPresentationEntitiesJourneyPlannerLeg;

