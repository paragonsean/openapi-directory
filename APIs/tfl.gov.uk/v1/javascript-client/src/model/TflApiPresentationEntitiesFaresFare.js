/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TflApiPresentationEntitiesFaresFare model module.
 * @module model/TflApiPresentationEntitiesFaresFare
 * @version v1
 */
class TflApiPresentationEntitiesFaresFare {
    /**
     * Constructs a new <code>TflApiPresentationEntitiesFaresFare</code>.
     * @alias module:model/TflApiPresentationEntitiesFaresFare
     */
    constructor() { 
        
        TflApiPresentationEntitiesFaresFare.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TflApiPresentationEntitiesFaresFare</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TflApiPresentationEntitiesFaresFare} obj Optional instance to populate.
     * @return {module:model/TflApiPresentationEntitiesFaresFare} The populated <code>TflApiPresentationEntitiesFaresFare</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TflApiPresentationEntitiesFaresFare();

            if (data.hasOwnProperty('cap')) {
                obj['cap'] = ApiClient.convertToType(data['cap'], 'Number');
            }
            if (data.hasOwnProperty('cost')) {
                obj['cost'] = ApiClient.convertToType(data['cost'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('passengerType')) {
                obj['passengerType'] = ApiClient.convertToType(data['passengerType'], 'String');
            }
            if (data.hasOwnProperty('ticketTime')) {
                obj['ticketTime'] = ApiClient.convertToType(data['ticketTime'], 'String');
            }
            if (data.hasOwnProperty('ticketType')) {
                obj['ticketType'] = ApiClient.convertToType(data['ticketType'], 'String');
            }
            if (data.hasOwnProperty('validFrom')) {
                obj['validFrom'] = ApiClient.convertToType(data['validFrom'], 'Date');
            }
            if (data.hasOwnProperty('validUntil')) {
                obj['validUntil'] = ApiClient.convertToType(data['validUntil'], 'Date');
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TflApiPresentationEntitiesFaresFare</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TflApiPresentationEntitiesFaresFare</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cost'] && !(typeof data['cost'] === 'string' || data['cost'] instanceof String)) {
            throw new Error("Expected the field `cost` to be a primitive type in the JSON string but got " + data['cost']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['passengerType'] && !(typeof data['passengerType'] === 'string' || data['passengerType'] instanceof String)) {
            throw new Error("Expected the field `passengerType` to be a primitive type in the JSON string but got " + data['passengerType']);
        }
        // ensure the json data is a string
        if (data['ticketTime'] && !(typeof data['ticketTime'] === 'string' || data['ticketTime'] instanceof String)) {
            throw new Error("Expected the field `ticketTime` to be a primitive type in the JSON string but got " + data['ticketTime']);
        }
        // ensure the json data is a string
        if (data['ticketType'] && !(typeof data['ticketType'] === 'string' || data['ticketType'] instanceof String)) {
            throw new Error("Expected the field `ticketType` to be a primitive type in the JSON string but got " + data['ticketType']);
        }
        // ensure the json data is a string
        if (data['zone'] && !(typeof data['zone'] === 'string' || data['zone'] instanceof String)) {
            throw new Error("Expected the field `zone` to be a primitive type in the JSON string but got " + data['zone']);
        }

        return true;
    }


}



/**
 * @member {Number} cap
 */
TflApiPresentationEntitiesFaresFare.prototype['cap'] = undefined;

/**
 * @member {String} cost
 */
TflApiPresentationEntitiesFaresFare.prototype['cost'] = undefined;

/**
 * @member {String} description
 */
TflApiPresentationEntitiesFaresFare.prototype['description'] = undefined;

/**
 * @member {Number} id
 */
TflApiPresentationEntitiesFaresFare.prototype['id'] = undefined;

/**
 * @member {String} mode
 */
TflApiPresentationEntitiesFaresFare.prototype['mode'] = undefined;

/**
 * @member {String} passengerType
 */
TflApiPresentationEntitiesFaresFare.prototype['passengerType'] = undefined;

/**
 * @member {String} ticketTime
 */
TflApiPresentationEntitiesFaresFare.prototype['ticketTime'] = undefined;

/**
 * @member {String} ticketType
 */
TflApiPresentationEntitiesFaresFare.prototype['ticketType'] = undefined;

/**
 * @member {Date} validFrom
 */
TflApiPresentationEntitiesFaresFare.prototype['validFrom'] = undefined;

/**
 * @member {Date} validUntil
 */
TflApiPresentationEntitiesFaresFare.prototype['validUntil'] = undefined;

/**
 * @member {String} zone
 */
TflApiPresentationEntitiesFaresFare.prototype['zone'] = undefined;






export default TflApiPresentationEntitiesFaresFare;

