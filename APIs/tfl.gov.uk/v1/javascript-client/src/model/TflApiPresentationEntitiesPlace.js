/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TflApiPresentationEntitiesAdditionalProperties from './TflApiPresentationEntitiesAdditionalProperties';

/**
 * The TflApiPresentationEntitiesPlace model module.
 * @module model/TflApiPresentationEntitiesPlace
 * @version v1
 */
class TflApiPresentationEntitiesPlace {
    /**
     * Constructs a new <code>TflApiPresentationEntitiesPlace</code>.
     * @alias module:model/TflApiPresentationEntitiesPlace
     */
    constructor() { 
        
        TflApiPresentationEntitiesPlace.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TflApiPresentationEntitiesPlace</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TflApiPresentationEntitiesPlace} obj Optional instance to populate.
     * @return {module:model/TflApiPresentationEntitiesPlace} The populated <code>TflApiPresentationEntitiesPlace</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TflApiPresentationEntitiesPlace();

            if (data.hasOwnProperty('additionalProperties')) {
                obj['additionalProperties'] = ApiClient.convertToType(data['additionalProperties'], [TflApiPresentationEntitiesAdditionalProperties]);
            }
            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [TflApiPresentationEntitiesPlace]);
            }
            if (data.hasOwnProperty('childrenUrls')) {
                obj['childrenUrls'] = ApiClient.convertToType(data['childrenUrls'], ['String']);
            }
            if (data.hasOwnProperty('commonName')) {
                obj['commonName'] = ApiClient.convertToType(data['commonName'], 'String');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lon')) {
                obj['lon'] = ApiClient.convertToType(data['lon'], 'Number');
            }
            if (data.hasOwnProperty('placeType')) {
                obj['placeType'] = ApiClient.convertToType(data['placeType'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TflApiPresentationEntitiesPlace</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TflApiPresentationEntitiesPlace</code>.
     */
    static validateJSON(data) {
        if (data['additionalProperties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalProperties'])) {
                throw new Error("Expected the field `additionalProperties` to be an array in the JSON data but got " + data['additionalProperties']);
            }
            // validate the optional field `additionalProperties` (array)
            for (const item of data['additionalProperties']) {
                TflApiPresentationEntitiesAdditionalProperties.validateJSON(item);
            };
        }
        if (data['children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['children'])) {
                throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
            }
            // validate the optional field `children` (array)
            for (const item of data['children']) {
                TflApiPresentationEntitiesPlace.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['childrenUrls'])) {
            throw new Error("Expected the field `childrenUrls` to be an array in the JSON data but got " + data['childrenUrls']);
        }
        // ensure the json data is a string
        if (data['commonName'] && !(typeof data['commonName'] === 'string' || data['commonName'] instanceof String)) {
            throw new Error("Expected the field `commonName` to be a primitive type in the JSON string but got " + data['commonName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['placeType'] && !(typeof data['placeType'] === 'string' || data['placeType'] instanceof String)) {
            throw new Error("Expected the field `placeType` to be a primitive type in the JSON string but got " + data['placeType']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * A bag of additional key/value pairs with extra information about this place.
 * @member {Array.<module:model/TflApiPresentationEntitiesAdditionalProperties>} additionalProperties
 */
TflApiPresentationEntitiesPlace.prototype['additionalProperties'] = undefined;

/**
 * @member {Array.<module:model/TflApiPresentationEntitiesPlace>} children
 */
TflApiPresentationEntitiesPlace.prototype['children'] = undefined;

/**
 * @member {Array.<String>} childrenUrls
 */
TflApiPresentationEntitiesPlace.prototype['childrenUrls'] = undefined;

/**
 * A human readable name.
 * @member {String} commonName
 */
TflApiPresentationEntitiesPlace.prototype['commonName'] = undefined;

/**
 * The distance of the place from its search point, if this is the result              of a geographical search, otherwise zero.
 * @member {Number} distance
 */
TflApiPresentationEntitiesPlace.prototype['distance'] = undefined;

/**
 * A unique identifier.
 * @member {String} id
 */
TflApiPresentationEntitiesPlace.prototype['id'] = undefined;

/**
 * WGS84 latitude of the location.
 * @member {Number} lat
 */
TflApiPresentationEntitiesPlace.prototype['lat'] = undefined;

/**
 * WGS84 longitude of the location.
 * @member {Number} lon
 */
TflApiPresentationEntitiesPlace.prototype['lon'] = undefined;

/**
 * The type of Place. See /Place/Meta/placeTypes for possible values.
 * @member {String} placeType
 */
TflApiPresentationEntitiesPlace.prototype['placeType'] = undefined;

/**
 * The unique location of this resource.
 * @member {String} url
 */
TflApiPresentationEntitiesPlace.prototype['url'] = undefined;






export default TflApiPresentationEntitiesPlace;

