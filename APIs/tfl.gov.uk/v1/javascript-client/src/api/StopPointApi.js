/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TflApiPresentationEntitiesArrivalDeparture from '../model/TflApiPresentationEntitiesArrivalDeparture';
import TflApiPresentationEntitiesDisruptedPoint from '../model/TflApiPresentationEntitiesDisruptedPoint';
import TflApiPresentationEntitiesLineServiceType from '../model/TflApiPresentationEntitiesLineServiceType';
import TflApiPresentationEntitiesMode from '../model/TflApiPresentationEntitiesMode';
import TflApiPresentationEntitiesPlace from '../model/TflApiPresentationEntitiesPlace';
import TflApiPresentationEntitiesPrediction from '../model/TflApiPresentationEntitiesPrediction';
import TflApiPresentationEntitiesSearchResponse from '../model/TflApiPresentationEntitiesSearchResponse';
import TflApiPresentationEntitiesStopPoint from '../model/TflApiPresentationEntitiesStopPoint';
import TflApiPresentationEntitiesStopPointCategory from '../model/TflApiPresentationEntitiesStopPointCategory';
import TflApiPresentationEntitiesStopPointRouteSection from '../model/TflApiPresentationEntitiesStopPointRouteSection';
import TflApiPresentationEntitiesStopPointsResponse from '../model/TflApiPresentationEntitiesStopPointsResponse';

/**
* StopPoint service.
* @module api/StopPointApi
* @version v1
*/
export default class StopPointApi {

    /**
    * Constructs a new StopPointApi. 
    * @alias module:api/StopPointApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the stopPointArrivalDepartures operation.
     * @callback module:api/StopPointApi~stopPointArrivalDeparturesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesArrivalDeparture>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of arrival and departure predictions for the given stop point id (overground, Elizabeth line and thameslink only)
     * @param {String} id A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)
     * @param {Array.<String>} lineIds A comma-separated list of line ids e.g. elizabeth, london-overground, thameslink
     * @param {module:api/StopPointApi~stopPointArrivalDeparturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesArrivalDeparture>}
     */
    stopPointArrivalDepartures(id, lineIds, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopPointArrivalDepartures");
      }
      // verify the required parameter 'lineIds' is set
      if (lineIds === undefined || lineIds === null) {
        throw new Error("Missing the required parameter 'lineIds' when calling stopPointArrivalDepartures");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'lineIds': this.apiClient.buildCollectionParam(lineIds, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesArrivalDeparture];
      return this.apiClient.callApi(
        '/StopPoint/{id}/ArrivalDepartures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointArrivals operation.
     * @callback module:api/StopPointApi~stopPointArrivalsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesPrediction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of arrival predictions for the given stop point id
     * @param {String} id A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)
     * @param {module:api/StopPointApi~stopPointArrivalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesPrediction>}
     */
    stopPointArrivals(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopPointArrivals");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesPrediction];
      return this.apiClient.callApi(
        '/StopPoint/{id}/Arrivals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointCrowding operation.
     * @callback module:api/StopPointApi~stopPointCrowdingCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesStopPoint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction.
     * @param {String} id The Naptan id of the stop
     * @param {String} line A particular line e.g. victoria, circle, northern etc.
     * @param {module:model/String} direction The direction of travel. Can be inbound or outbound.
     * @param {module:api/StopPointApi~stopPointCrowdingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesStopPoint>}
     */
    stopPointCrowding(id, line, direction, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopPointCrowding");
      }
      // verify the required parameter 'line' is set
      if (line === undefined || line === null) {
        throw new Error("Missing the required parameter 'line' when calling stopPointCrowding");
      }
      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling stopPointCrowding");
      }

      let pathParams = {
        'id': id,
        'line': line
      };
      let queryParams = {
        'direction': direction
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesStopPoint];
      return this.apiClient.callApi(
        '/StopPoint/{id}/Crowding/{line}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointDirection operation.
     * @callback module:api/StopPointApi~stopPointDirectionCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the canonical direction, \"inbound\" or \"outbound\", for a given pair of stop point Ids in the direction from -&gt; to.
     * @param {String} id Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)
     * @param {String} toStopPointId Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)
     * @param {Object} opts Optional parameters
     * @param {String} [lineId] Optional line id filter e.g. victoria
     * @param {module:api/StopPointApi~stopPointDirectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    stopPointDirection(id, toStopPointId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopPointDirection");
      }
      // verify the required parameter 'toStopPointId' is set
      if (toStopPointId === undefined || toStopPointId === null) {
        throw new Error("Missing the required parameter 'toStopPointId' when calling stopPointDirection");
      }

      let pathParams = {
        'id': id,
        'toStopPointId': toStopPointId
      };
      let queryParams = {
        'lineId': opts['lineId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/StopPoint/{id}/DirectionTo/{toStopPointId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointDisruption operation.
     * @callback module:api/StopPointApi~stopPointDisruptionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesDisruptedPoint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.
     * @param {Array.<String>} ids A comma-seperated list of stop point ids. Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [getFamily] Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false.
     * @param {Boolean} [includeRouteBlockedStops] 
     * @param {Boolean} [flattenResponse] Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true).
     * @param {module:api/StopPointApi~stopPointDisruptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesDisruptedPoint>}
     */
    stopPointDisruption(ids, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling stopPointDisruption");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'getFamily': opts['getFamily'],
        'includeRouteBlockedStops': opts['includeRouteBlockedStops'],
        'flattenResponse': opts['flattenResponse']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesDisruptedPoint];
      return this.apiClient.callApi(
        '/StopPoint/{ids}/Disruption', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointDisruptionByMode operation.
     * @callback module:api/StopPointApi~stopPointDisruptionByModeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesDisruptedPoint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a distinct list of disrupted stop points for the given modes
     * @param {Array.<String>} modes A comma-seperated list of modes e.g. tube,dlr
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeRouteBlockedStops] 
     * @param {module:api/StopPointApi~stopPointDisruptionByModeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesDisruptedPoint>}
     */
    stopPointDisruptionByMode(modes, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'modes' is set
      if (modes === undefined || modes === null) {
        throw new Error("Missing the required parameter 'modes' when calling stopPointDisruptionByMode");
      }

      let pathParams = {
        'modes': modes
      };
      let queryParams = {
        'includeRouteBlockedStops': opts['includeRouteBlockedStops']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesDisruptedPoint];
      return this.apiClient.callApi(
        '/StopPoint/Mode/{modes}/Disruption', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointGet operation.
     * @callback module:api/StopPointApi~stopPointGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesStopPoint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of StopPoints corresponding to the given list of stop ids.
     * @param {Array.<String>} ids A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeCrowdingData] Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line}
     * @param {module:api/StopPointApi~stopPointGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesStopPoint>}
     */
    stopPointGet(ids, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling stopPointGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'includeCrowdingData': opts['includeCrowdingData']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesStopPoint];
      return this.apiClient.callApi(
        '/StopPoint/{ids}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointGetByGeoPoint operation.
     * @callback module:api/StopPointApi~stopPointGetByGeoPointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TflApiPresentationEntitiesStopPointsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of StopPoints within {radius} by the specified criteria
     * @param {Array.<String>} stopTypes a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint)
     * @param {Number} locationLat 
     * @param {Number} locationLon 
     * @param {Object} opts Optional parameters
     * @param {Number} [radius] the radius of the bounding circle in metres (default : 200)
     * @param {Boolean} [useStopPointHierarchy] Re-arrange the output into a parent/child hierarchy
     * @param {Array.<String>} [modes] the list of modes to search (comma separated mode names e.g. tube,dlr)
     * @param {Array.<String>} [categories] an optional list of comma separated property categories to return in the StopPoint's property bag. If null or empty, all categories of property are returned. Pass the keyword \"none\" to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint)
     * @param {Boolean} [returnLines] true to return the lines that each stop point serves as a nested resource
     * @param {module:api/StopPointApi~stopPointGetByGeoPointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TflApiPresentationEntitiesStopPointsResponse}
     */
    stopPointGetByGeoPoint(stopTypes, locationLat, locationLon, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'stopTypes' is set
      if (stopTypes === undefined || stopTypes === null) {
        throw new Error("Missing the required parameter 'stopTypes' when calling stopPointGetByGeoPoint");
      }
      // verify the required parameter 'locationLat' is set
      if (locationLat === undefined || locationLat === null) {
        throw new Error("Missing the required parameter 'locationLat' when calling stopPointGetByGeoPoint");
      }
      // verify the required parameter 'locationLon' is set
      if (locationLon === undefined || locationLon === null) {
        throw new Error("Missing the required parameter 'locationLon' when calling stopPointGetByGeoPoint");
      }

      let pathParams = {
      };
      let queryParams = {
        'stopTypes': this.apiClient.buildCollectionParam(stopTypes, 'multi'),
        'radius': opts['radius'],
        'useStopPointHierarchy': opts['useStopPointHierarchy'],
        'modes': this.apiClient.buildCollectionParam(opts['modes'], 'multi'),
        'categories': this.apiClient.buildCollectionParam(opts['categories'], 'multi'),
        'returnLines': opts['returnLines'],
        'location.lat': locationLat,
        'location.lon': locationLon
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = TflApiPresentationEntitiesStopPointsResponse;
      return this.apiClient.callApi(
        '/StopPoint', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointGetByMode operation.
     * @callback module:api/StopPointApi~stopPointGetByModeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TflApiPresentationEntitiesStopPointsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of StopPoints filtered by the modes available at that StopPoint.
     * @param {Array.<String>} modes A comma-seperated list of modes e.g. tube,dlr
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large.
     * @param {module:api/StopPointApi~stopPointGetByModeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TflApiPresentationEntitiesStopPointsResponse}
     */
    stopPointGetByMode(modes, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'modes' is set
      if (modes === undefined || modes === null) {
        throw new Error("Missing the required parameter 'modes' when calling stopPointGetByMode");
      }

      let pathParams = {
        'modes': modes
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = TflApiPresentationEntitiesStopPointsResponse;
      return this.apiClient.callApi(
        '/StopPoint/Mode/{modes}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointGetBySms operation.
     * @callback module:api/StopPointApi~stopPointGetBySmsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a StopPoint for a given sms code.
     * @param {String} id A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334.
     * @param {Object} opts Optional parameters
     * @param {String} [output] If set to \"web\", a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored.
     * @param {module:api/StopPointApi~stopPointGetBySmsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    stopPointGetBySms(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopPointGetBySms");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'output': opts['output']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/StopPoint/Sms/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointGetByType operation.
     * @callback module:api/StopPointApi~stopPointGetByTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesStopPoint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all stop points of a given type
     * @param {Array.<String>} types A comma-separated list of the types to return. Max. approx. 12 types.               A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint.
     * @param {module:api/StopPointApi~stopPointGetByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesStopPoint>}
     */
    stopPointGetByType(types, callback) {
      let postBody = null;
      // verify the required parameter 'types' is set
      if (types === undefined || types === null) {
        throw new Error("Missing the required parameter 'types' when calling stopPointGetByType");
      }

      let pathParams = {
        'types': types
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesStopPoint];
      return this.apiClient.callApi(
        '/StopPoint/Type/{types}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointGetByTypeWithPagination operation.
     * @callback module:api/StopPointApi~stopPointGetByTypeWithPaginationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesStopPoint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the stop points of given type(s) with a page number
     * @param {Array.<String>} types 
     * @param {Number} page 
     * @param {module:api/StopPointApi~stopPointGetByTypeWithPaginationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesStopPoint>}
     */
    stopPointGetByTypeWithPagination(types, page, callback) {
      let postBody = null;
      // verify the required parameter 'types' is set
      if (types === undefined || types === null) {
        throw new Error("Missing the required parameter 'types' when calling stopPointGetByTypeWithPagination");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling stopPointGetByTypeWithPagination");
      }

      let pathParams = {
        'types': types,
        'page': page
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesStopPoint];
      return this.apiClient.callApi(
        '/StopPoint/Type/{types}/page/{page}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointGetCarParksById operation.
     * @callback module:api/StopPointApi~stopPointGetCarParksByIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesPlace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get car parks corresponding to the given stop point id.
     * @param {String} stopPointId stopPointId is required to get the car parks.
     * @param {module:api/StopPointApi~stopPointGetCarParksByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesPlace>}
     */
    stopPointGetCarParksById(stopPointId, callback) {
      let postBody = null;
      // verify the required parameter 'stopPointId' is set
      if (stopPointId === undefined || stopPointId === null) {
        throw new Error("Missing the required parameter 'stopPointId' when calling stopPointGetCarParksById");
      }

      let pathParams = {
        'stopPointId': stopPointId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesPlace];
      return this.apiClient.callApi(
        '/StopPoint/{stopPointId}/CarParks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointGetServiceTypes operation.
     * @callback module:api/StopPointApi~stopPointGetServiceTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesLineServiceType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the service types for a given stoppoint
     * @param {String} id The Naptan id of the stop
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [lineIds] The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty)
     * @param {Array.<String>} [modes] The modes which the lines are relevant to (all if empty)
     * @param {module:api/StopPointApi~stopPointGetServiceTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesLineServiceType>}
     */
    stopPointGetServiceTypes(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopPointGetServiceTypes");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'lineIds': this.apiClient.buildCollectionParam(opts['lineIds'], 'multi'),
        'modes': this.apiClient.buildCollectionParam(opts['modes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesLineServiceType];
      return this.apiClient.callApi(
        '/StopPoint/ServiceTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointGetTaxiRanksByIds operation.
     * @callback module:api/StopPointApi~stopPointGetTaxiRanksByIdsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesPlace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of taxi ranks corresponding to the given stop point id.
     * @param {String} stopPointId stopPointId is required to get the taxi ranks.
     * @param {module:api/StopPointApi~stopPointGetTaxiRanksByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesPlace>}
     */
    stopPointGetTaxiRanksByIds(stopPointId, callback) {
      let postBody = null;
      // verify the required parameter 'stopPointId' is set
      if (stopPointId === undefined || stopPointId === null) {
        throw new Error("Missing the required parameter 'stopPointId' when calling stopPointGetTaxiRanksByIds");
      }

      let pathParams = {
        'stopPointId': stopPointId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesPlace];
      return this.apiClient.callApi(
        '/StopPoint/{stopPointId}/TaxiRanks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointIdPlaceTypesGet operation.
     * @callback module:api/StopPointApi~stopPointIdPlaceTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesPlace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of places corresponding to a given id and place types.
     * @param {String} id A naptan id for a stop point (station naptan code e.g. 940GZZLUASL).
     * @param {Array.<String>} placeTypes A comcomma-separated value representing the place types.
     * @param {module:api/StopPointApi~stopPointIdPlaceTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesPlace>}
     */
    stopPointIdPlaceTypesGet(id, placeTypes, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopPointIdPlaceTypesGet");
      }
      // verify the required parameter 'placeTypes' is set
      if (placeTypes === undefined || placeTypes === null) {
        throw new Error("Missing the required parameter 'placeTypes' when calling stopPointIdPlaceTypesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'placeTypes': this.apiClient.buildCollectionParam(placeTypes, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesPlace];
      return this.apiClient.callApi(
        '/StopPoint/{id}/placeTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointMetaCategories operation.
     * @callback module:api/StopPointApi~stopPointMetaCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesStopPointCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of available StopPoint additional information categories
     * @param {module:api/StopPointApi~stopPointMetaCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesStopPointCategory>}
     */
    stopPointMetaCategories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesStopPointCategory];
      return this.apiClient.callApi(
        '/StopPoint/Meta/Categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointMetaModes operation.
     * @callback module:api/StopPointApi~stopPointMetaModesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesMode>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of available StopPoint modes
     * @param {module:api/StopPointApi~stopPointMetaModesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesMode>}
     */
    stopPointMetaModes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesMode];
      return this.apiClient.callApi(
        '/StopPoint/Meta/Modes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointMetaStopTypes operation.
     * @callback module:api/StopPointApi~stopPointMetaStopTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of available StopPoint types
     * @param {module:api/StopPointApi~stopPointMetaStopTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    stopPointMetaStopTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/StopPoint/Meta/StopTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointReachableFrom operation.
     * @callback module:api/StopPointApi~stopPointReachableFromCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesStopPoint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets Stopoints that are reachable from a station/line combination.
     * @param {String} id The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by
     * @param {String} lineId Line id of the line to filter by (e.g. victoria)
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [serviceTypes] A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
     * @param {module:api/StopPointApi~stopPointReachableFromCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesStopPoint>}
     */
    stopPointReachableFrom(id, lineId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopPointReachableFrom");
      }
      // verify the required parameter 'lineId' is set
      if (lineId === undefined || lineId === null) {
        throw new Error("Missing the required parameter 'lineId' when calling stopPointReachableFrom");
      }

      let pathParams = {
        'id': id,
        'lineId': lineId
      };
      let queryParams = {
        'serviceTypes': this.apiClient.buildCollectionParam(opts['serviceTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesStopPoint];
      return this.apiClient.callApi(
        '/StopPoint/{id}/CanReachOnLine/{lineId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointRoute operation.
     * @callback module:api/StopPointApi~stopPointRouteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesStopPointRouteSection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the route sections for all the lines that service the given stop point ids
     * @param {String} id A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [serviceTypes] A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
     * @param {module:api/StopPointApi~stopPointRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesStopPointRouteSection>}
     */
    stopPointRoute(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopPointRoute");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'serviceTypes': this.apiClient.buildCollectionParam(opts['serviceTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesStopPointRouteSection];
      return this.apiClient.callApi(
        '/StopPoint/{id}/Route', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointSearch operation.
     * @callback module:api/StopPointApi~stopPointSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TflApiPresentationEntitiesSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
     * @param {String} query The query string, case-insensitive. Leading and trailing wildcards are applied automatically.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [modes] An optional, parameter separated list of the modes to filter by
     * @param {Boolean} [faresOnly] True to only return stations in that have Fares data available for single fares to another station.
     * @param {Number} [maxResults] An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items.
     * @param {Array.<String>} [lines] An optional, parameter separated list of the lines to filter by
     * @param {Boolean} [includeHubs] If true, returns results including HUBs.
     * @param {Boolean} [tflOperatedNationalRailStationsOnly] If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned
     * @param {module:api/StopPointApi~stopPointSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TflApiPresentationEntitiesSearchResponse}
     */
    stopPointSearch(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling stopPointSearch");
      }

      let pathParams = {
        'query': query
      };
      let queryParams = {
        'modes': this.apiClient.buildCollectionParam(opts['modes'], 'multi'),
        'faresOnly': opts['faresOnly'],
        'maxResults': opts['maxResults'],
        'lines': this.apiClient.buildCollectionParam(opts['lines'], 'multi'),
        'includeHubs': opts['includeHubs'],
        'tflOperatedNationalRailStationsOnly': opts['tflOperatedNationalRailStationsOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = TflApiPresentationEntitiesSearchResponse;
      return this.apiClient.callApi(
        '/StopPoint/Search/{query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPointSearchGet operation.
     * @callback module:api/StopPointApi~stopPointSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TflApiPresentationEntitiesSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
     * @param {String} query The query string, case-insensitive. Leading and trailing wildcards are applied automatically.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [modes] An optional, parameter separated list of the modes to filter by
     * @param {Boolean} [faresOnly] True to only return stations in that have Fares data available for single fares to another station.
     * @param {Number} [maxResults] An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items.
     * @param {Array.<String>} [lines] An optional, parameter separated list of the lines to filter by
     * @param {Boolean} [includeHubs] If true, returns results including HUBs.
     * @param {Boolean} [tflOperatedNationalRailStationsOnly] If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned
     * @param {module:api/StopPointApi~stopPointSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TflApiPresentationEntitiesSearchResponse}
     */
    stopPointSearchGet(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling stopPointSearchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'modes': this.apiClient.buildCollectionParam(opts['modes'], 'multi'),
        'faresOnly': opts['faresOnly'],
        'maxResults': opts['maxResults'],
        'lines': this.apiClient.buildCollectionParam(opts['lines'], 'multi'),
        'includeHubs': opts['includeHubs'],
        'tflOperatedNationalRailStationsOnly': opts['tflOperatedNationalRailStationsOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = TflApiPresentationEntitiesSearchResponse;
      return this.apiClient.callApi(
        '/StopPoint/Search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
