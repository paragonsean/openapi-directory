/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TflApiPresentationEntitiesJourneyPlannerItineraryResult from '../model/TflApiPresentationEntitiesJourneyPlannerItineraryResult';
import TflApiPresentationEntitiesMode from '../model/TflApiPresentationEntitiesMode';

/**
* Journey service.
* @module api/JourneyApi
* @version v1
*/
export default class JourneyApi {

    /**
    * Constructs a new JourneyApi. 
    * @alias module:api/JourneyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the journeyJourneyResults operation.
     * @callback module:api/JourneyApi~journeyJourneyResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TflApiPresentationEntitiesJourneyPlannerItineraryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a Journey Planner search from the parameters specified in simple types
     * @param {String} from Origin of the journey. Can be WGS84 coordinates expressed as \"lat,long\", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).
     * @param {String} to Destination of the journey. Can be WGS84 coordinates expressed as \"lat,long\", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).
     * @param {Object} opts Optional parameters
     * @param {String} [via] Travel through point on the journey. Can be WGS84 coordinates expressed as \"lat,long\", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).
     * @param {Boolean} [nationalSearch] Does the journey cover stops outside London? eg. \"nationalSearch=true\"
     * @param {String} [date] The date must be in yyyyMMdd format
     * @param {String} [time] The time must be in HHmm format
     * @param {module:model/String} [timeIs] Does the time given relate to arrival or leaving time? Possible options: \"departing\" | \"arriving\"
     * @param {module:model/String} [journeyPreference] The journey preference eg possible options: \"leastinterchange\" | \"leasttime\" | \"leastwalking\"
     * @param {Array.<String>} [mode] The mode must be a comma separated list of modes. eg possible options: \"public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\"
     * @param {Array.<module:model/String>} [accessibilityPreference] The accessibility preference must be a comma separated list eg. \"noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\"
     * @param {String} [fromName] An optional name to associate with the origin of the journey in the results.
     * @param {String} [toName] An optional name to associate with the destination of the journey in the results.
     * @param {String} [viaName] An optional name to associate with the via point of the journey in the results.
     * @param {String} [maxTransferMinutes] The max walking time in minutes for transfer eg. \"120\"
     * @param {String} [maxWalkingMinutes] The max walking time in minutes for journeys eg. \"120\"
     * @param {module:model/String} [walkingSpeed] The walking speed. eg possible options: \"slow\" | \"average\" | \"fast\".
     * @param {module:model/String} [cyclePreference] The cycle preference. eg possible options: \"allTheWay\" | \"leaveAtStation\" | \"takeOnTransport\" | \"cycleHire\"
     * @param {String} [adjustment] Time adjustment command. eg possible options: \"TripFirst\" | \"TripLast\"
     * @param {Array.<module:model/String>} [bikeProficiency] A comma separated list of cycling proficiency levels. eg possible options: \"easy,moderate,fast\"
     * @param {Boolean} [alternativeCycle] Option to determine whether to return alternative cycling journey
     * @param {Boolean} [alternativeWalking] Option to determine whether to return alternative walking journey
     * @param {Boolean} [applyHtmlMarkup] Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not.
     * @param {Boolean} [useMultiModalCall] A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey
     * @param {Boolean} [walkingOptimization] A boolean to indicate whether to optimize journeys using walking
     * @param {Boolean} [taxiOnlyTrip] A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \"useMultiModalCall\".
     * @param {Boolean} [routeBetweenEntrances] A boolean to indicate whether public transport routes should include directions between platforms and station entrances.
     * @param {Boolean} [useRealTimeLiveArrivals] A boolean to indicate if we want to receive real time live arrivals data where available.
     * @param {Boolean} [calcOneDirection] A boolean to make Journey Planner calculate journeys in one temporal direction only. In other words, only calculate journeys after the 'depart' time, or before the 'arrive' time. By default, the Journey Planner engine (EFA) calculates journeys in both temporal directions.
     * @param {module:api/JourneyApi~journeyJourneyResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TflApiPresentationEntitiesJourneyPlannerItineraryResult}
     */
    journeyJourneyResults(from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling journeyJourneyResults");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling journeyJourneyResults");
      }

      let pathParams = {
        'from': from,
        'to': to
      };
      let queryParams = {
        'via': opts['via'],
        'nationalSearch': opts['nationalSearch'],
        'date': opts['date'],
        'time': opts['time'],
        'timeIs': opts['timeIs'],
        'journeyPreference': opts['journeyPreference'],
        'mode': this.apiClient.buildCollectionParam(opts['mode'], 'multi'),
        'accessibilityPreference': this.apiClient.buildCollectionParam(opts['accessibilityPreference'], 'multi'),
        'fromName': opts['fromName'],
        'toName': opts['toName'],
        'viaName': opts['viaName'],
        'maxTransferMinutes': opts['maxTransferMinutes'],
        'maxWalkingMinutes': opts['maxWalkingMinutes'],
        'walkingSpeed': opts['walkingSpeed'],
        'cyclePreference': opts['cyclePreference'],
        'adjustment': opts['adjustment'],
        'bikeProficiency': this.apiClient.buildCollectionParam(opts['bikeProficiency'], 'multi'),
        'alternativeCycle': opts['alternativeCycle'],
        'alternativeWalking': opts['alternativeWalking'],
        'applyHtmlMarkup': opts['applyHtmlMarkup'],
        'useMultiModalCall': opts['useMultiModalCall'],
        'walkingOptimization': opts['walkingOptimization'],
        'taxiOnlyTrip': opts['taxiOnlyTrip'],
        'routeBetweenEntrances': opts['routeBetweenEntrances'],
        'useRealTimeLiveArrivals': opts['useRealTimeLiveArrivals'],
        'calcOneDirection': opts['calcOneDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = TflApiPresentationEntitiesJourneyPlannerItineraryResult;
      return this.apiClient.callApi(
        '/Journey/JourneyResults/{from}/to/{to}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the journeyMeta operation.
     * @callback module:api/JourneyApi~journeyMetaCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesMode>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all of the available journey planner modes
     * @param {module:api/JourneyApi~journeyMetaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesMode>}
     */
    journeyMeta(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesMode];
      return this.apiClient.callApi(
        '/Journey/Meta/Modes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
