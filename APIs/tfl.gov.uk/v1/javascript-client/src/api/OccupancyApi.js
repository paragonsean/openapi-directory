/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TflApiPresentationEntitiesBikePointOccupancy from '../model/TflApiPresentationEntitiesBikePointOccupancy';
import TflApiPresentationEntitiesCarParkOccupancy from '../model/TflApiPresentationEntitiesCarParkOccupancy';
import TflApiPresentationEntitiesChargeConnectorOccupancy from '../model/TflApiPresentationEntitiesChargeConnectorOccupancy';

/**
* Occupancy service.
* @module api/OccupancyApi
* @version v1
*/
export default class OccupancyApi {

    /**
    * Constructs a new OccupancyApi. 
    * @alias module:api/OccupancyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the occupancyCarParkGet operation.
     * @callback module:api/OccupancyApi~occupancyCarParkGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesCarParkOccupancy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the occupancy for all car parks that have occupancy data
     * @param {module:api/OccupancyApi~occupancyCarParkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesCarParkOccupancy>}
     */
    occupancyCarParkGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesCarParkOccupancy];
      return this.apiClient.callApi(
        '/Occupancy/CarPark', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the occupancyGet operation.
     * @callback module:api/OccupancyApi~occupancyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TflApiPresentationEntitiesCarParkOccupancy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the occupancy for a car park with a given id
     * @param {String} id 
     * @param {module:api/OccupancyApi~occupancyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TflApiPresentationEntitiesCarParkOccupancy}
     */
    occupancyGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling occupancyGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = TflApiPresentationEntitiesCarParkOccupancy;
      return this.apiClient.callApi(
        '/Occupancy/CarPark/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the occupancyGetAllChargeConnectorStatus operation.
     * @callback module:api/OccupancyApi~occupancyGetAllChargeConnectorStatusCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesChargeConnectorOccupancy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the occupancy for all charge connectors
     * @param {module:api/OccupancyApi~occupancyGetAllChargeConnectorStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesChargeConnectorOccupancy>}
     */
    occupancyGetAllChargeConnectorStatus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesChargeConnectorOccupancy];
      return this.apiClient.callApi(
        '/Occupancy/ChargeConnector', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the occupancyGetBikePointsOccupancies operation.
     * @callback module:api/OccupancyApi~occupancyGetBikePointsOccupanciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesBikePointOccupancy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the occupancy for bike points.
     * @param {Array.<String>} ids 
     * @param {module:api/OccupancyApi~occupancyGetBikePointsOccupanciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesBikePointOccupancy>}
     */
    occupancyGetBikePointsOccupancies(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling occupancyGetBikePointsOccupancies");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesBikePointOccupancy];
      return this.apiClient.callApi(
        '/Occupancy/BikePoints/{ids}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the occupancyGetChargeConnectorStatus operation.
     * @callback module:api/OccupancyApi~occupancyGetChargeConnectorStatusCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesChargeConnectorOccupancy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the occupancy for a charge connectors with a given id (sourceSystemPlaceId)
     * @param {Array.<String>} ids 
     * @param {module:api/OccupancyApi~occupancyGetChargeConnectorStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesChargeConnectorOccupancy>}
     */
    occupancyGetChargeConnectorStatus(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling occupancyGetChargeConnectorStatus");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesChargeConnectorOccupancy];
      return this.apiClient.callApi(
        '/Occupancy/ChargeConnector/{ids}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
