/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* TravelTime service.
* @module api/TravelTimeApi
* @version v1
*/
export default class TravelTimeApi {

    /**
    * Constructs a new TravelTimeApi. 
    * @alias module:api/TravelTimeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the travelTimeGetCompareOverlay operation.
     * @callback module:api/TravelTimeApi~travelTimeGetCompareOverlayCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the TravelTime overlay.
     * @param {Number} z The zoom level.
     * @param {Number} pinLat The latitude of the pin.
     * @param {Number} pinLon The longitude of the pin.
     * @param {Number} mapCenterLat The map center latitude.
     * @param {Number} mapCenterLon The map center longitude.
     * @param {String} scenarioTitle The title of the scenario.
     * @param {String} timeOfDayId The id for the time of day (AM/INTER/PM)
     * @param {String} modeId The id of the mode.
     * @param {Number} width The width of the requested overlay.
     * @param {Number} height The height of the requested overlay.
     * @param {module:model/String} direction The direction of travel.
     * @param {Number} travelTimeInterval The total minutes between the travel time bands
     * @param {String} compareType 
     * @param {String} compareValue 
     * @param {module:api/TravelTimeApi~travelTimeGetCompareOverlayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    travelTimeGetCompareOverlay(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval, compareType, compareValue, callback) {
      let postBody = null;
      // verify the required parameter 'z' is set
      if (z === undefined || z === null) {
        throw new Error("Missing the required parameter 'z' when calling travelTimeGetCompareOverlay");
      }
      // verify the required parameter 'pinLat' is set
      if (pinLat === undefined || pinLat === null) {
        throw new Error("Missing the required parameter 'pinLat' when calling travelTimeGetCompareOverlay");
      }
      // verify the required parameter 'pinLon' is set
      if (pinLon === undefined || pinLon === null) {
        throw new Error("Missing the required parameter 'pinLon' when calling travelTimeGetCompareOverlay");
      }
      // verify the required parameter 'mapCenterLat' is set
      if (mapCenterLat === undefined || mapCenterLat === null) {
        throw new Error("Missing the required parameter 'mapCenterLat' when calling travelTimeGetCompareOverlay");
      }
      // verify the required parameter 'mapCenterLon' is set
      if (mapCenterLon === undefined || mapCenterLon === null) {
        throw new Error("Missing the required parameter 'mapCenterLon' when calling travelTimeGetCompareOverlay");
      }
      // verify the required parameter 'scenarioTitle' is set
      if (scenarioTitle === undefined || scenarioTitle === null) {
        throw new Error("Missing the required parameter 'scenarioTitle' when calling travelTimeGetCompareOverlay");
      }
      // verify the required parameter 'timeOfDayId' is set
      if (timeOfDayId === undefined || timeOfDayId === null) {
        throw new Error("Missing the required parameter 'timeOfDayId' when calling travelTimeGetCompareOverlay");
      }
      // verify the required parameter 'modeId' is set
      if (modeId === undefined || modeId === null) {
        throw new Error("Missing the required parameter 'modeId' when calling travelTimeGetCompareOverlay");
      }
      // verify the required parameter 'width' is set
      if (width === undefined || width === null) {
        throw new Error("Missing the required parameter 'width' when calling travelTimeGetCompareOverlay");
      }
      // verify the required parameter 'height' is set
      if (height === undefined || height === null) {
        throw new Error("Missing the required parameter 'height' when calling travelTimeGetCompareOverlay");
      }
      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling travelTimeGetCompareOverlay");
      }
      // verify the required parameter 'travelTimeInterval' is set
      if (travelTimeInterval === undefined || travelTimeInterval === null) {
        throw new Error("Missing the required parameter 'travelTimeInterval' when calling travelTimeGetCompareOverlay");
      }
      // verify the required parameter 'compareType' is set
      if (compareType === undefined || compareType === null) {
        throw new Error("Missing the required parameter 'compareType' when calling travelTimeGetCompareOverlay");
      }
      // verify the required parameter 'compareValue' is set
      if (compareValue === undefined || compareValue === null) {
        throw new Error("Missing the required parameter 'compareValue' when calling travelTimeGetCompareOverlay");
      }

      let pathParams = {
        'z': z,
        'pinLat': pinLat,
        'pinLon': pinLon,
        'mapCenterLat': mapCenterLat,
        'mapCenterLon': mapCenterLon,
        'width': width,
        'height': height
      };
      let queryParams = {
        'scenarioTitle': scenarioTitle,
        'timeOfDayId': timeOfDayId,
        'modeId': modeId,
        'direction': direction,
        'travelTimeInterval': travelTimeInterval,
        'compareType': compareType,
        'compareValue': compareValue
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelTimeGetOverlay operation.
     * @callback module:api/TravelTimeApi~travelTimeGetOverlayCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the TravelTime overlay.
     * @param {Number} z The zoom level.
     * @param {Number} pinLat The latitude of the pin.
     * @param {Number} pinLon The longitude of the pin.
     * @param {Number} mapCenterLat The map center latitude.
     * @param {Number} mapCenterLon The map center longitude.
     * @param {String} scenarioTitle The title of the scenario.
     * @param {String} timeOfDayId The id for the time of day (AM/INTER/PM)
     * @param {String} modeId The id of the mode.
     * @param {Number} width The width of the requested overlay.
     * @param {Number} height The height of the requested overlay.
     * @param {module:model/String} direction The direction of travel.
     * @param {Number} travelTimeInterval The total minutes between the travel time bands
     * @param {module:api/TravelTimeApi~travelTimeGetOverlayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    travelTimeGetOverlay(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval, callback) {
      let postBody = null;
      // verify the required parameter 'z' is set
      if (z === undefined || z === null) {
        throw new Error("Missing the required parameter 'z' when calling travelTimeGetOverlay");
      }
      // verify the required parameter 'pinLat' is set
      if (pinLat === undefined || pinLat === null) {
        throw new Error("Missing the required parameter 'pinLat' when calling travelTimeGetOverlay");
      }
      // verify the required parameter 'pinLon' is set
      if (pinLon === undefined || pinLon === null) {
        throw new Error("Missing the required parameter 'pinLon' when calling travelTimeGetOverlay");
      }
      // verify the required parameter 'mapCenterLat' is set
      if (mapCenterLat === undefined || mapCenterLat === null) {
        throw new Error("Missing the required parameter 'mapCenterLat' when calling travelTimeGetOverlay");
      }
      // verify the required parameter 'mapCenterLon' is set
      if (mapCenterLon === undefined || mapCenterLon === null) {
        throw new Error("Missing the required parameter 'mapCenterLon' when calling travelTimeGetOverlay");
      }
      // verify the required parameter 'scenarioTitle' is set
      if (scenarioTitle === undefined || scenarioTitle === null) {
        throw new Error("Missing the required parameter 'scenarioTitle' when calling travelTimeGetOverlay");
      }
      // verify the required parameter 'timeOfDayId' is set
      if (timeOfDayId === undefined || timeOfDayId === null) {
        throw new Error("Missing the required parameter 'timeOfDayId' when calling travelTimeGetOverlay");
      }
      // verify the required parameter 'modeId' is set
      if (modeId === undefined || modeId === null) {
        throw new Error("Missing the required parameter 'modeId' when calling travelTimeGetOverlay");
      }
      // verify the required parameter 'width' is set
      if (width === undefined || width === null) {
        throw new Error("Missing the required parameter 'width' when calling travelTimeGetOverlay");
      }
      // verify the required parameter 'height' is set
      if (height === undefined || height === null) {
        throw new Error("Missing the required parameter 'height' when calling travelTimeGetOverlay");
      }
      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling travelTimeGetOverlay");
      }
      // verify the required parameter 'travelTimeInterval' is set
      if (travelTimeInterval === undefined || travelTimeInterval === null) {
        throw new Error("Missing the required parameter 'travelTimeInterval' when calling travelTimeGetOverlay");
      }

      let pathParams = {
        'z': z,
        'pinLat': pinLat,
        'pinLon': pinLon,
        'mapCenterLat': mapCenterLat,
        'mapCenterLon': mapCenterLon,
        'width': width,
        'height': height
      };
      let queryParams = {
        'scenarioTitle': scenarioTitle,
        'timeOfDayId': timeOfDayId,
        'modeId': modeId,
        'direction': direction,
        'travelTimeInterval': travelTimeInterval
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
