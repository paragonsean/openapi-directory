/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TflApiPresentationEntitiesDisruption from '../model/TflApiPresentationEntitiesDisruption';
import TflApiPresentationEntitiesLine from '../model/TflApiPresentationEntitiesLine';
import TflApiPresentationEntitiesMode from '../model/TflApiPresentationEntitiesMode';
import TflApiPresentationEntitiesPrediction from '../model/TflApiPresentationEntitiesPrediction';
import TflApiPresentationEntitiesRouteSearchResponse from '../model/TflApiPresentationEntitiesRouteSearchResponse';
import TflApiPresentationEntitiesRouteSequence from '../model/TflApiPresentationEntitiesRouteSequence';
import TflApiPresentationEntitiesStatusSeverity from '../model/TflApiPresentationEntitiesStatusSeverity';
import TflApiPresentationEntitiesStopPoint from '../model/TflApiPresentationEntitiesStopPoint';
import TflApiPresentationEntitiesTimetableResponse from '../model/TflApiPresentationEntitiesTimetableResponse';

/**
* Line service.
* @module api/LineApi
* @version v1
*/
export default class LineApi {

    /**
    * Constructs a new LineApi. 
    * @alias module:api/LineApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the lineArrivals operation.
     * @callback module:api/LineApi~lineArrivalsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesPrediction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of arrival predictions for given line ids based at the given stop
     * @param {Array.<String>} ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.
     * @param {String} stopPointId Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all
     * @param {String} [destinationStationId] Optional. Id of destination stop
     * @param {module:api/LineApi~lineArrivalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesPrediction>}
     */
    lineArrivals(ids, stopPointId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling lineArrivals");
      }
      // verify the required parameter 'stopPointId' is set
      if (stopPointId === undefined || stopPointId === null) {
        throw new Error("Missing the required parameter 'stopPointId' when calling lineArrivals");
      }

      let pathParams = {
        'ids': ids,
        'stopPointId': stopPointId
      };
      let queryParams = {
        'direction': opts['direction'],
        'destinationStationId': opts['destinationStationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesPrediction];
      return this.apiClient.callApi(
        '/Line/{ids}/Arrivals/{stopPointId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineDisruption operation.
     * @callback module:api/LineApi~lineDisruptionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesDisruption>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get disruptions for the given line ids
     * @param {Array.<String>} ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.
     * @param {module:api/LineApi~lineDisruptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesDisruption>}
     */
    lineDisruption(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling lineDisruption");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesDisruption];
      return this.apiClient.callApi(
        '/Line/{ids}/Disruption', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineDisruptionByMode operation.
     * @callback module:api/LineApi~lineDisruptionByModeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesDisruption>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get disruptions for all lines of the given modes.
     * @param {Array.<String>} modes A comma-separated list of modes e.g. tube,dlr
     * @param {module:api/LineApi~lineDisruptionByModeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesDisruption>}
     */
    lineDisruptionByMode(modes, callback) {
      let postBody = null;
      // verify the required parameter 'modes' is set
      if (modes === undefined || modes === null) {
        throw new Error("Missing the required parameter 'modes' when calling lineDisruptionByMode");
      }

      let pathParams = {
        'modes': modes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesDisruption];
      return this.apiClient.callApi(
        '/Line/Mode/{modes}/Disruption', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineGet operation.
     * @callback module:api/LineApi~lineGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesLine>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets lines that match the specified line ids.
     * @param {Array.<String>} ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.
     * @param {module:api/LineApi~lineGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesLine>}
     */
    lineGet(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling lineGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesLine];
      return this.apiClient.callApi(
        '/Line/{ids}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineGetByMode operation.
     * @callback module:api/LineApi~lineGetByModeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesLine>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets lines that serve the given modes.
     * @param {Array.<String>} modes A comma-separated list of modes e.g. tube,dlr
     * @param {module:api/LineApi~lineGetByModeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesLine>}
     */
    lineGetByMode(modes, callback) {
      let postBody = null;
      // verify the required parameter 'modes' is set
      if (modes === undefined || modes === null) {
        throw new Error("Missing the required parameter 'modes' when calling lineGetByMode");
      }

      let pathParams = {
        'modes': modes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesLine];
      return this.apiClient.callApi(
        '/Line/Mode/{modes}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineLineRoutesByIds operation.
     * @callback module:api/LineApi~lineLineRoutesByIdsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesLine>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
     * @param {Array.<String>} ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [serviceTypes] A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
     * @param {module:api/LineApi~lineLineRoutesByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesLine>}
     */
    lineLineRoutesByIds(ids, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling lineLineRoutesByIds");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'serviceTypes': this.apiClient.buildCollectionParam(opts['serviceTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesLine];
      return this.apiClient.callApi(
        '/Line/{ids}/Route', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineMetaDisruptionCategories operation.
     * @callback module:api/LineApi~lineMetaDisruptionCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of valid disruption categories
     * @param {module:api/LineApi~lineMetaDisruptionCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    lineMetaDisruptionCategories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/Line/Meta/DisruptionCategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineMetaModes operation.
     * @callback module:api/LineApi~lineMetaModesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesMode>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of valid modes
     * @param {module:api/LineApi~lineMetaModesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesMode>}
     */
    lineMetaModes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesMode];
      return this.apiClient.callApi(
        '/Line/Meta/Modes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineMetaServiceTypes operation.
     * @callback module:api/LineApi~lineMetaServiceTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of valid ServiceTypes to filter on
     * @param {module:api/LineApi~lineMetaServiceTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    lineMetaServiceTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/Line/Meta/ServiceTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineMetaSeverity operation.
     * @callback module:api/LineApi~lineMetaSeverityCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesStatusSeverity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of valid severity codes
     * @param {module:api/LineApi~lineMetaSeverityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesStatusSeverity>}
     */
    lineMetaSeverity(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesStatusSeverity];
      return this.apiClient.callApi(
        '/Line/Meta/Severity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineRoute operation.
     * @callback module:api/LineApi~lineRouteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesLine>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [serviceTypes] A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
     * @param {module:api/LineApi~lineRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesLine>}
     */
    lineRoute(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'serviceTypes': this.apiClient.buildCollectionParam(opts['serviceTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesLine];
      return this.apiClient.callApi(
        '/Line/Route', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineRouteByMode operation.
     * @callback module:api/LineApi~lineRouteByModeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesLine>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
     * @param {Array.<String>} modes A comma-separated list of modes e.g. tube,dlr
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [serviceTypes] A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
     * @param {module:api/LineApi~lineRouteByModeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesLine>}
     */
    lineRouteByMode(modes, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'modes' is set
      if (modes === undefined || modes === null) {
        throw new Error("Missing the required parameter 'modes' when calling lineRouteByMode");
      }

      let pathParams = {
        'modes': modes
      };
      let queryParams = {
        'serviceTypes': this.apiClient.buildCollectionParam(opts['serviceTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesLine];
      return this.apiClient.callApi(
        '/Line/Mode/{modes}/Route', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineRouteSequence operation.
     * @callback module:api/LineApi~lineRouteSequenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TflApiPresentationEntitiesRouteSequence} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all valid routes for given line id, including the sequence of stops on each route.
     * @param {String} id A single line id e.g. victoria
     * @param {module:model/String} direction The direction of travel. Can be inbound or outbound.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [serviceTypes] A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
     * @param {Boolean} [excludeCrowding] That excludes crowding from line disruptions. Can be true or false.
     * @param {module:api/LineApi~lineRouteSequenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TflApiPresentationEntitiesRouteSequence}
     */
    lineRouteSequence(id, direction, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lineRouteSequence");
      }
      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling lineRouteSequence");
      }

      let pathParams = {
        'id': id,
        'direction': direction
      };
      let queryParams = {
        'serviceTypes': this.apiClient.buildCollectionParam(opts['serviceTypes'], 'multi'),
        'excludeCrowding': opts['excludeCrowding']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = TflApiPresentationEntitiesRouteSequence;
      return this.apiClient.callApi(
        '/Line/{id}/Route/Sequence/{direction}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineSearch operation.
     * @callback module:api/LineApi~lineSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TflApiPresentationEntitiesRouteSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for lines or routes matching the query string
     * @param {String} query Search term e.g victoria
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [modes] Optionally filter by the specified modes
     * @param {Array.<module:model/String>} [serviceTypes] A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
     * @param {module:api/LineApi~lineSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TflApiPresentationEntitiesRouteSearchResponse}
     */
    lineSearch(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling lineSearch");
      }

      let pathParams = {
        'query': query
      };
      let queryParams = {
        'modes': this.apiClient.buildCollectionParam(opts['modes'], 'multi'),
        'serviceTypes': this.apiClient.buildCollectionParam(opts['serviceTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = TflApiPresentationEntitiesRouteSearchResponse;
      return this.apiClient.callApi(
        '/Line/Search/{query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineStatus operation.
     * @callback module:api/LineApi~lineStatusCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesLine>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the line status for given line ids during the provided dates e.g Minor Delays
     * @param {Array.<String>} ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.
     * @param {String} startDate 
     * @param {String} endDate 
     * @param {String} startDate2 Automatically added
     * @param {String} endDate2 Automatically added
     * @param {Object} opts Optional parameters
     * @param {Boolean} [detail] Include details of the disruptions that are causing the line status including the affected stops and routes
     * @param {Date} [dateRangeStartDate] 
     * @param {Date} [dateRangeEndDate] 
     * @param {module:api/LineApi~lineStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesLine>}
     */
    lineStatus(ids, startDate, endDate, startDate2, endDate2, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling lineStatus");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling lineStatus");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling lineStatus");
      }
      // verify the required parameter 'startDate2' is set
      if (startDate2 === undefined || startDate2 === null) {
        throw new Error("Missing the required parameter 'startDate2' when calling lineStatus");
      }
      // verify the required parameter 'endDate2' is set
      if (endDate2 === undefined || endDate2 === null) {
        throw new Error("Missing the required parameter 'endDate2' when calling lineStatus");
      }

      let pathParams = {
        'ids': ids,
        'StartDate': startDate2,
        'EndDate': endDate2
      };
      let queryParams = {
        'detail': opts['detail'],
        'startDate': startDate,
        'endDate': endDate,
        'dateRange.startDate': opts['dateRangeStartDate'],
        'dateRange.endDate': opts['dateRangeEndDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesLine];
      return this.apiClient.callApi(
        '/Line/{ids}/Status/{StartDate}/to/{EndDate}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineStatusByIds operation.
     * @callback module:api/LineApi~lineStatusByIdsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesLine>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the line status of for given line ids e.g Minor Delays
     * @param {Array.<String>} ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [detail] Include details of the disruptions that are causing the line status including the affected stops and routes
     * @param {module:api/LineApi~lineStatusByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesLine>}
     */
    lineStatusByIds(ids, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling lineStatusByIds");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'detail': opts['detail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesLine];
      return this.apiClient.callApi(
        '/Line/{ids}/Status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineStatusByMode operation.
     * @callback module:api/LineApi~lineStatusByModeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesLine>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the line status of for all lines for the given modes
     * @param {Array.<String>} modes A comma-separated list of modes to filter by. e.g. tube,dlr
     * @param {Object} opts Optional parameters
     * @param {Boolean} [detail] Include details of the disruptions that are causing the line status including the affected stops and routes
     * @param {String} [severityLevel] If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level.
     * @param {module:api/LineApi~lineStatusByModeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesLine>}
     */
    lineStatusByMode(modes, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'modes' is set
      if (modes === undefined || modes === null) {
        throw new Error("Missing the required parameter 'modes' when calling lineStatusByMode");
      }

      let pathParams = {
        'modes': modes
      };
      let queryParams = {
        'detail': opts['detail'],
        'severityLevel': opts['severityLevel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesLine];
      return this.apiClient.callApi(
        '/Line/Mode/{modes}/Status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineStatusBySeverity operation.
     * @callback module:api/LineApi~lineStatusBySeverityCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesLine>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity
     * @param {Number} severity The level of severity (eg: a number from 0 to 14)
     * @param {module:api/LineApi~lineStatusBySeverityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesLine>}
     */
    lineStatusBySeverity(severity, callback) {
      let postBody = null;
      // verify the required parameter 'severity' is set
      if (severity === undefined || severity === null) {
        throw new Error("Missing the required parameter 'severity' when calling lineStatusBySeverity");
      }

      let pathParams = {
        'severity': severity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesLine];
      return this.apiClient.callApi(
        '/Line/Status/{severity}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineStopPoints operation.
     * @callback module:api/LineApi~lineStopPointsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesStopPoint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of the stations that serve the given line id
     * @param {String} id A single line id e.g. victoria
     * @param {Object} opts Optional parameters
     * @param {Boolean} [tflOperatedNationalRailStationsOnly] If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned
     * @param {module:api/LineApi~lineStopPointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesStopPoint>}
     */
    lineStopPoints(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lineStopPoints");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tflOperatedNationalRailStationsOnly': opts['tflOperatedNationalRailStationsOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesStopPoint];
      return this.apiClient.callApi(
        '/Line/{id}/StopPoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineTimetable operation.
     * @callback module:api/LineApi~lineTimetableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TflApiPresentationEntitiesTimetableResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the timetable for a specified station on the give line
     * @param {String} fromStopPointId The originating station's stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)
     * @param {String} id A single line id e.g. victoria
     * @param {module:api/LineApi~lineTimetableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TflApiPresentationEntitiesTimetableResponse}
     */
    lineTimetable(fromStopPointId, id, callback) {
      let postBody = null;
      // verify the required parameter 'fromStopPointId' is set
      if (fromStopPointId === undefined || fromStopPointId === null) {
        throw new Error("Missing the required parameter 'fromStopPointId' when calling lineTimetable");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lineTimetable");
      }

      let pathParams = {
        'fromStopPointId': fromStopPointId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = TflApiPresentationEntitiesTimetableResponse;
      return this.apiClient.callApi(
        '/Line/{id}/Timetable/{fromStopPointId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lineTimetableTo operation.
     * @callback module:api/LineApi~lineTimetableToCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TflApiPresentationEntitiesTimetableResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the timetable for a specified station on the give line with specified destination
     * @param {String} fromStopPointId The originating station's stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)
     * @param {String} id A single line id e.g. victoria
     * @param {String} toStopPointId The destination stations's Naptan code
     * @param {module:api/LineApi~lineTimetableToCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TflApiPresentationEntitiesTimetableResponse}
     */
    lineTimetableTo(fromStopPointId, id, toStopPointId, callback) {
      let postBody = null;
      // verify the required parameter 'fromStopPointId' is set
      if (fromStopPointId === undefined || fromStopPointId === null) {
        throw new Error("Missing the required parameter 'fromStopPointId' when calling lineTimetableTo");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lineTimetableTo");
      }
      // verify the required parameter 'toStopPointId' is set
      if (toStopPointId === undefined || toStopPointId === null) {
        throw new Error("Missing the required parameter 'toStopPointId' when calling lineTimetableTo");
      }

      let pathParams = {
        'fromStopPointId': fromStopPointId,
        'id': id,
        'toStopPointId': toStopPointId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = TflApiPresentationEntitiesTimetableResponse;
      return this.apiClient.callApi(
        '/Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
