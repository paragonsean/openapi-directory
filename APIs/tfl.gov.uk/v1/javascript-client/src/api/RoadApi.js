/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TflApiPresentationEntitiesRoadCorridor from '../model/TflApiPresentationEntitiesRoadCorridor';
import TflApiPresentationEntitiesRoadDisruption from '../model/TflApiPresentationEntitiesRoadDisruption';
import TflApiPresentationEntitiesStatusSeverity from '../model/TflApiPresentationEntitiesStatusSeverity';

/**
* Road service.
* @module api/RoadApi
* @version v1
*/
export default class RoadApi {

    /**
    * Constructs a new RoadApi. 
    * @alias module:api/RoadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the roadDisruptedStreets operation.
     * @callback module:api/RoadApi~roadDisruptedStreetsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned.
     * @param {Date} startDate Optional, the start time to filter on.
     * @param {Date} endDate Optional, The end time to filter on.
     * @param {module:api/RoadApi~roadDisruptedStreetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    roadDisruptedStreets(startDate, endDate, callback) {
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling roadDisruptedStreets");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling roadDisruptedStreets");
      }

      let pathParams = {
      };
      let queryParams = {
        'startDate': startDate,
        'endDate': endDate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/Road/all/Street/Disruption', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roadDisruption operation.
     * @callback module:api/RoadApi~roadDisruptionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesRoadDisruption>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get active disruptions, filtered by road ids
     * @param {Array.<String>} ids Comma-separated list of road identifiers e.g. \"A406, A2\" use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)
     * @param {Object} opts Optional parameters
     * @param {Boolean} [stripContent] Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets
     * @param {Array.<String>} [severities] an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint)
     * @param {Array.<String>} [categories] an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint)
     * @param {Boolean} [closures] Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal.
     * @param {module:api/RoadApi~roadDisruptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesRoadDisruption>}
     */
    roadDisruption(ids, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling roadDisruption");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'stripContent': opts['stripContent'],
        'severities': this.apiClient.buildCollectionParam(opts['severities'], 'multi'),
        'categories': this.apiClient.buildCollectionParam(opts['categories'], 'multi'),
        'closures': opts['closures']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/geo+json', 'application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesRoadDisruption];
      return this.apiClient.callApi(
        '/Road/{ids}/Disruption', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roadDisruptionById operation.
     * @callback module:api/RoadApi~roadDisruptionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TflApiPresentationEntitiesRoadDisruption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of active disruptions filtered by disruption Ids.
     * @param {Array.<String>} disruptionIds Comma-separated list of disruption identifiers to filter by.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [stripContent] Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments.
     * @param {module:api/RoadApi~roadDisruptionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TflApiPresentationEntitiesRoadDisruption}
     */
    roadDisruptionById(disruptionIds, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'disruptionIds' is set
      if (disruptionIds === undefined || disruptionIds === null) {
        throw new Error("Missing the required parameter 'disruptionIds' when calling roadDisruptionById");
      }

      let pathParams = {
        'disruptionIds': disruptionIds
      };
      let queryParams = {
        'stripContent': opts['stripContent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/geo+json', 'application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = TflApiPresentationEntitiesRoadDisruption;
      return this.apiClient.callApi(
        '/Road/all/Disruption/{disruptionIds}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roadGet operation.
     * @callback module:api/RoadApi~roadGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesRoadCorridor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all roads managed by TfL
     * @param {module:api/RoadApi~roadGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesRoadCorridor>}
     */
    roadGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesRoadCorridor];
      return this.apiClient.callApi(
        '/Road', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roadIdsGet operation.
     * @callback module:api/RoadApi~roadIdsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesRoadCorridor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the road with the specified id (e.g. A1)
     * @param {Array.<String>} ids Comma-separated list of road identifiers e.g. \"A406, A2\" (a full list of supported road identifiers can be found at the /Road/ endpoint)
     * @param {module:api/RoadApi~roadIdsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesRoadCorridor>}
     */
    roadIdsGet(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling roadIdsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesRoadCorridor];
      return this.apiClient.callApi(
        '/Road/{ids}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roadMetaCategories operation.
     * @callback module:api/RoadApi~roadMetaCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of valid RoadDisruption categories
     * @param {module:api/RoadApi~roadMetaCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    roadMetaCategories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/Road/Meta/Categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roadMetaSeverities operation.
     * @callback module:api/RoadApi~roadMetaSeveritiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesStatusSeverity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of valid RoadDisruption severity codes
     * @param {module:api/RoadApi~roadMetaSeveritiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesStatusSeverity>}
     */
    roadMetaSeverities(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesStatusSeverity];
      return this.apiClient.callApi(
        '/Road/Meta/Severities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roadStatus operation.
     * @callback module:api/RoadApi~roadStatusCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesRoadCorridor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed.
     * @param {Array.<String>} ids Comma-separated list of road identifiers e.g. \"A406, A2\" or use \"all\" to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)
     * @param {Object} opts Optional parameters
     * @param {Date} [dateRangeNullableStartDate] 
     * @param {Date} [dateRangeNullableEndDate] 
     * @param {module:api/RoadApi~roadStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesRoadCorridor>}
     */
    roadStatus(ids, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling roadStatus");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'dateRangeNullable.startDate': opts['dateRangeNullableStartDate'],
        'dateRangeNullable.endDate': opts['dateRangeNullableEndDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesRoadCorridor];
      return this.apiClient.callApi(
        '/Road/{ids}/Status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
