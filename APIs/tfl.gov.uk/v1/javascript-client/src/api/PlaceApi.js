/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TflApiPresentationEntitiesPlace from '../model/TflApiPresentationEntitiesPlace';
import TflApiPresentationEntitiesPlaceCategory from '../model/TflApiPresentationEntitiesPlaceCategory';
import TflApiPresentationEntitiesStopPoint from '../model/TflApiPresentationEntitiesStopPoint';

/**
* Place service.
* @module api/PlaceApi
* @version v1
*/
export default class PlaceApi {

    /**
    * Constructs a new PlaceApi. 
    * @alias module:api/PlaceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the placeGet operation.
     * @callback module:api/PlaceApi~placeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesPlace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the place with the given id.
     * @param {String} id The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeChildren] Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned
     * @param {module:api/PlaceApi~placeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesPlace>}
     */
    placeGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling placeGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'includeChildren': opts['includeChildren']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesPlace];
      return this.apiClient.callApi(
        '/Place/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeGetAt operation.
     * @callback module:api/PlaceApi~placeGetAtCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary.
     * @param {Array.<String>} type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)
     * @param {String} lat 
     * @param {String} lon 
     * @param {Number} locationLat 
     * @param {Number} locationLon 
     * @param {String} lat2 Automatically added
     * @param {String} lon2 Automatically added
     * @param {module:api/PlaceApi~placeGetAtCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    placeGetAt(type, lat, lon, locationLat, locationLon, lat2, lon2, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling placeGetAt");
      }
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling placeGetAt");
      }
      // verify the required parameter 'lon' is set
      if (lon === undefined || lon === null) {
        throw new Error("Missing the required parameter 'lon' when calling placeGetAt");
      }
      // verify the required parameter 'locationLat' is set
      if (locationLat === undefined || locationLat === null) {
        throw new Error("Missing the required parameter 'locationLat' when calling placeGetAt");
      }
      // verify the required parameter 'locationLon' is set
      if (locationLon === undefined || locationLon === null) {
        throw new Error("Missing the required parameter 'locationLon' when calling placeGetAt");
      }
      // verify the required parameter 'lat2' is set
      if (lat2 === undefined || lat2 === null) {
        throw new Error("Missing the required parameter 'lat2' when calling placeGetAt");
      }
      // verify the required parameter 'lon2' is set
      if (lon2 === undefined || lon2 === null) {
        throw new Error("Missing the required parameter 'lon2' when calling placeGetAt");
      }

      let pathParams = {
        'type': type,
        'Lat': lat2,
        'Lon': lon2
      };
      let queryParams = {
        'lat': lat,
        'lon': lon,
        'location.lat': locationLat,
        'location.lon': locationLon
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/Place/{type}/At/{Lat}/{Lon}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeGetByGeo operation.
     * @callback module:api/PlaceApi~placeGetByGeoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesStopPoint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the places that lie within a geographic region. The geographic region of interest can either be specified              by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of              its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.              Optionally filters on type and can strip properties for a smaller payload.
     * @param {Object} opts Optional parameters
     * @param {Number} [radius] The radius of the bounding circle in metres when only lat/lon are specified.
     * @param {Array.<String>} [categories] An optional list of comma separated property categories to return in the Place's property bag. If null or empty, all categories of property are returned. Pass the keyword \"none\" to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint)
     * @param {Boolean} [includeChildren] Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned
     * @param {Array.<String>} [type] Place types to filter on, or null to return all types
     * @param {Boolean} [activeOnly] An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported)
     * @param {Number} [numberOfPlacesToReturn] If specified, limits the number of returned places equal to the given value
     * @param {Number} [placeGeoSwLat] 
     * @param {Number} [placeGeoSwLon] 
     * @param {Number} [placeGeoNeLat] 
     * @param {Number} [placeGeoNeLon] 
     * @param {Number} [placeGeoLat] 
     * @param {Number} [placeGeoLon] 
     * @param {module:api/PlaceApi~placeGetByGeoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesStopPoint>}
     */
    placeGetByGeo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'radius': opts['radius'],
        'categories': this.apiClient.buildCollectionParam(opts['categories'], 'multi'),
        'includeChildren': opts['includeChildren'],
        'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'activeOnly': opts['activeOnly'],
        'numberOfPlacesToReturn': opts['numberOfPlacesToReturn'],
        'placeGeo.swLat': opts['placeGeoSwLat'],
        'placeGeo.swLon': opts['placeGeoSwLon'],
        'placeGeo.neLat': opts['placeGeoNeLat'],
        'placeGeo.neLon': opts['placeGeoNeLon'],
        'placeGeo.lat': opts['placeGeoLat'],
        'placeGeo.lon': opts['placeGeoLon']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesStopPoint];
      return this.apiClient.callApi(
        '/Place', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeGetByType operation.
     * @callback module:api/PlaceApi~placeGetByTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesPlace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all places of a given type
     * @param {Array.<String>} types A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [activeOnly] An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported)
     * @param {module:api/PlaceApi~placeGetByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesPlace>}
     */
    placeGetByType(types, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'types' is set
      if (types === undefined || types === null) {
        throw new Error("Missing the required parameter 'types' when calling placeGetByType");
      }

      let pathParams = {
        'types': types
      };
      let queryParams = {
        'activeOnly': opts['activeOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesPlace];
      return this.apiClient.callApi(
        '/Place/Type/{types}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeGetOverlay operation.
     * @callback module:api/PlaceApi~placeGetOverlayCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the place overlay for a given set of co-ordinates and a given width/height.
     * @param {Number} z The zoom level
     * @param {Array.<String>} type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)
     * @param {Number} width The width of the requested overlay.
     * @param {Number} height The height of the requested overlay.
     * @param {String} lat 
     * @param {String} lon 
     * @param {Number} locationLat 
     * @param {Number} locationLon 
     * @param {String} lat2 Automatically added
     * @param {String} lon2 Automatically added
     * @param {module:api/PlaceApi~placeGetOverlayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    placeGetOverlay(z, type, width, height, lat, lon, locationLat, locationLon, lat2, lon2, callback) {
      let postBody = null;
      // verify the required parameter 'z' is set
      if (z === undefined || z === null) {
        throw new Error("Missing the required parameter 'z' when calling placeGetOverlay");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling placeGetOverlay");
      }
      // verify the required parameter 'width' is set
      if (width === undefined || width === null) {
        throw new Error("Missing the required parameter 'width' when calling placeGetOverlay");
      }
      // verify the required parameter 'height' is set
      if (height === undefined || height === null) {
        throw new Error("Missing the required parameter 'height' when calling placeGetOverlay");
      }
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling placeGetOverlay");
      }
      // verify the required parameter 'lon' is set
      if (lon === undefined || lon === null) {
        throw new Error("Missing the required parameter 'lon' when calling placeGetOverlay");
      }
      // verify the required parameter 'locationLat' is set
      if (locationLat === undefined || locationLat === null) {
        throw new Error("Missing the required parameter 'locationLat' when calling placeGetOverlay");
      }
      // verify the required parameter 'locationLon' is set
      if (locationLon === undefined || locationLon === null) {
        throw new Error("Missing the required parameter 'locationLon' when calling placeGetOverlay");
      }
      // verify the required parameter 'lat2' is set
      if (lat2 === undefined || lat2 === null) {
        throw new Error("Missing the required parameter 'lat2' when calling placeGetOverlay");
      }
      // verify the required parameter 'lon2' is set
      if (lon2 === undefined || lon2 === null) {
        throw new Error("Missing the required parameter 'lon2' when calling placeGetOverlay");
      }

      let pathParams = {
        'z': z,
        'type': type,
        'width': width,
        'height': height,
        'Lat': lat2,
        'Lon': lon2
      };
      let queryParams = {
        'lat': lat,
        'lon': lon,
        'location.lat': locationLat,
        'location.lon': locationLon
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeGetStreetsByPostCode operation.
     * @callback module:api/PlaceApi~placeGetStreetsByPostCodeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the set of streets associated with a post code.
     * @param {String} postcode 
     * @param {String} postcode2 Automatically added
     * @param {Object} opts Optional parameters
     * @param {String} [postcodeInputPostcode] 
     * @param {module:api/PlaceApi~placeGetStreetsByPostCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    placeGetStreetsByPostCode(postcode, postcode2, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'postcode' is set
      if (postcode === undefined || postcode === null) {
        throw new Error("Missing the required parameter 'postcode' when calling placeGetStreetsByPostCode");
      }
      // verify the required parameter 'postcode2' is set
      if (postcode2 === undefined || postcode2 === null) {
        throw new Error("Missing the required parameter 'postcode2' when calling placeGetStreetsByPostCode");
      }

      let pathParams = {
        'Postcode': postcode2
      };
      let queryParams = {
        'postcode': postcode,
        'postcodeInput.postcode': opts['postcodeInputPostcode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/Place/Address/Streets/{Postcode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeMetaCategories operation.
     * @callback module:api/PlaceApi~placeMetaCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesPlaceCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all of the available place property categories and keys.
     * @param {module:api/PlaceApi~placeMetaCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesPlaceCategory>}
     */
    placeMetaCategories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesPlaceCategory];
      return this.apiClient.callApi(
        '/Place/Meta/Categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeMetaPlaceTypes operation.
     * @callback module:api/PlaceApi~placeMetaPlaceTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesPlaceCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of the available types of Place.
     * @param {module:api/PlaceApi~placeMetaPlaceTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesPlaceCategory>}
     */
    placeMetaPlaceTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesPlaceCategory];
      return this.apiClient.callApi(
        '/Place/Meta/PlaceTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeSearch operation.
     * @callback module:api/PlaceApi~placeSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesPlace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all places that matches the given query
     * @param {String} name The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [types] A comma-separated list of the types to return. Max. approx 12 types.
     * @param {module:api/PlaceApi~placeSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesPlace>}
     */
    placeSearch(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling placeSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name,
        'types': this.apiClient.buildCollectionParam(opts['types'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesPlace];
      return this.apiClient.callApi(
        '/Place/Search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
