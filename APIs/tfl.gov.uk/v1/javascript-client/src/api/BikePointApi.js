/**
 * Transport for London Unified API
 * Our unified API brings together data across all modes of transport into a single RESTful API. This API provides access to the most highly requested realtime and status infomation across all the modes of transport, in a single and consistent way. Access to the developer documentation is available at https://api.tfl.gov.uk
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TflApiPresentationEntitiesPlace from '../model/TflApiPresentationEntitiesPlace';

/**
* BikePoint service.
* @module api/BikePointApi
* @version v1
*/
export default class BikePointApi {

    /**
    * Constructs a new BikePointApi. 
    * @alias module:api/BikePointApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bikePointGet operation.
     * @callback module:api/BikePointApi~bikePointGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TflApiPresentationEntitiesPlace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the bike point with the given id.
     * @param {String} id A bike point id (a list of ids can be obtained from the above BikePoint call)
     * @param {module:api/BikePointApi~bikePointGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TflApiPresentationEntitiesPlace}
     */
    bikePointGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bikePointGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = TflApiPresentationEntitiesPlace;
      return this.apiClient.callApi(
        '/BikePoint/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bikePointGetAll operation.
     * @callback module:api/BikePointApi~bikePointGetAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesPlace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all bike point locations. The Place object has an addtionalProperties array which contains the nbBikes, nbDocks and nbSpaces              numbers which give the status of the BikePoint. A mismatch in these numbers i.e. nbDocks - (nbBikes + nbSpaces) != 0 indicates broken docks.
     * @param {module:api/BikePointApi~bikePointGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesPlace>}
     */
    bikePointGetAll(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesPlace];
      return this.apiClient.callApi(
        '/BikePoint', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bikePointSearch operation.
     * @callback module:api/BikePointApi~bikePointSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TflApiPresentationEntitiesPlace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for bike stations by their name, a bike point's name often contains information about the name of the street              or nearby landmarks, for example. Note that the search result does not contain the PlaceProperties i.e. the status              or occupancy of the BikePoint, to get that information you should retrieve the BikePoint by its id on /BikePoint/id.
     * @param {String} query The search term e.g. \"St. James\"
     * @param {module:api/BikePointApi~bikePointSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TflApiPresentationEntitiesPlace>}
     */
    bikePointSearch(query, callback) {
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling bikePointSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [TflApiPresentationEntitiesPlace];
      return this.apiClient.callApi(
        '/BikePoint/Search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
