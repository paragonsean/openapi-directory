/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkWirelessSsid_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkWirelessSsid_request::OAIUpdateNetworkWirelessSsid_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkWirelessSsid_request::OAIUpdateNetworkWirelessSsid_request() {
    this->initializeModel();
}

OAIUpdateNetworkWirelessSsid_request::~OAIUpdateNetworkWirelessSsid_request() {}

void OAIUpdateNetworkWirelessSsid_request::initializeModel() {

    m_active_directory_isSet = false;
    m_active_directory_isValid = false;

    m_adult_content_filtering_enabled_isSet = false;
    m_adult_content_filtering_enabled_isValid = false;

    m_ap_tags_and_vlan_ids_isSet = false;
    m_ap_tags_and_vlan_ids_isValid = false;

    m_auth_mode_isSet = false;
    m_auth_mode_isValid = false;

    m_availability_tags_isSet = false;
    m_availability_tags_isValid = false;

    m_available_on_all_aps_isSet = false;
    m_available_on_all_aps_isValid = false;

    m_band_selection_isSet = false;
    m_band_selection_isValid = false;

    m_concentrator_network_id_isSet = false;
    m_concentrator_network_id_isValid = false;

    m_default_vlan_id_isSet = false;
    m_default_vlan_id_isValid = false;

    m_disassociate_clients_on_vpn_failover_isSet = false;
    m_disassociate_clients_on_vpn_failover_isValid = false;

    m_dns_rewrite_isSet = false;
    m_dns_rewrite_isValid = false;

    m_dot11r_isSet = false;
    m_dot11r_isValid = false;

    m_dot11w_isSet = false;
    m_dot11w_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_encryption_mode_isSet = false;
    m_encryption_mode_isValid = false;

    m_enterprise_admin_access_isSet = false;
    m_enterprise_admin_access_isValid = false;

    m_gre_isSet = false;
    m_gre_isValid = false;

    m_ip_assignment_mode_isSet = false;
    m_ip_assignment_mode_isValid = false;

    m_lan_isolation_enabled_isSet = false;
    m_lan_isolation_enabled_isValid = false;

    m_ldap_isSet = false;
    m_ldap_isValid = false;

    m_local_radius_isSet = false;
    m_local_radius_isValid = false;

    m_mandatory_dhcp_enabled_isSet = false;
    m_mandatory_dhcp_enabled_isValid = false;

    m_min_bitrate_isSet = false;
    m_min_bitrate_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_oauth_isSet = false;
    m_oauth_isValid = false;

    m_per_client_bandwidth_limit_down_isSet = false;
    m_per_client_bandwidth_limit_down_isValid = false;

    m_per_client_bandwidth_limit_up_isSet = false;
    m_per_client_bandwidth_limit_up_isValid = false;

    m_per_ssid_bandwidth_limit_down_isSet = false;
    m_per_ssid_bandwidth_limit_down_isValid = false;

    m_per_ssid_bandwidth_limit_up_isSet = false;
    m_per_ssid_bandwidth_limit_up_isValid = false;

    m_psk_isSet = false;
    m_psk_isValid = false;

    m_radius_accounting_enabled_isSet = false;
    m_radius_accounting_enabled_isValid = false;

    m_radius_accounting_interim_interval_isSet = false;
    m_radius_accounting_interim_interval_isValid = false;

    m_radius_accounting_servers_isSet = false;
    m_radius_accounting_servers_isValid = false;

    m_radius_attribute_for_group_policies_isSet = false;
    m_radius_attribute_for_group_policies_isValid = false;

    m_radius_authentication_nas_id_isSet = false;
    m_radius_authentication_nas_id_isValid = false;

    m_radius_called_station_id_isSet = false;
    m_radius_called_station_id_isValid = false;

    m_radius_coa_enabled_isSet = false;
    m_radius_coa_enabled_isValid = false;

    m_radius_failover_policy_isSet = false;
    m_radius_failover_policy_isValid = false;

    m_radius_fallback_enabled_isSet = false;
    m_radius_fallback_enabled_isValid = false;

    m_radius_guest_vlan_enabled_isSet = false;
    m_radius_guest_vlan_enabled_isValid = false;

    m_radius_guest_vlan_id_isSet = false;
    m_radius_guest_vlan_id_isValid = false;

    m_radius_load_balancing_policy_isSet = false;
    m_radius_load_balancing_policy_isValid = false;

    m_radius_override_isSet = false;
    m_radius_override_isValid = false;

    m_radius_proxy_enabled_isSet = false;
    m_radius_proxy_enabled_isValid = false;

    m_radius_server_attempts_limit_isSet = false;
    m_radius_server_attempts_limit_isValid = false;

    m_radius_server_timeout_isSet = false;
    m_radius_server_timeout_isValid = false;

    m_radius_servers_isSet = false;
    m_radius_servers_isValid = false;

    m_radius_testing_enabled_isSet = false;
    m_radius_testing_enabled_isValid = false;

    m_secondary_concentrator_network_id_isSet = false;
    m_secondary_concentrator_network_id_isValid = false;

    m_speed_burst_isSet = false;
    m_speed_burst_isValid = false;

    m_splash_guest_sponsor_domains_isSet = false;
    m_splash_guest_sponsor_domains_isValid = false;

    m_splash_page_isSet = false;
    m_splash_page_isValid = false;

    m_use_vlan_tagging_isSet = false;
    m_use_vlan_tagging_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;

    m_vlan_id_isSet = false;
    m_vlan_id_isValid = false;

    m_walled_garden_enabled_isSet = false;
    m_walled_garden_enabled_isValid = false;

    m_walled_garden_ranges_isSet = false;
    m_walled_garden_ranges_isValid = false;

    m_wpa_encryption_mode_isSet = false;
    m_wpa_encryption_mode_isValid = false;
}

void OAIUpdateNetworkWirelessSsid_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkWirelessSsid_request::fromJsonObject(QJsonObject json) {

    m_active_directory_isValid = ::OpenAPI::fromJsonValue(m_active_directory, json[QString("activeDirectory")]);
    m_active_directory_isSet = !json[QString("activeDirectory")].isNull() && m_active_directory_isValid;

    m_adult_content_filtering_enabled_isValid = ::OpenAPI::fromJsonValue(m_adult_content_filtering_enabled, json[QString("adultContentFilteringEnabled")]);
    m_adult_content_filtering_enabled_isSet = !json[QString("adultContentFilteringEnabled")].isNull() && m_adult_content_filtering_enabled_isValid;

    m_ap_tags_and_vlan_ids_isValid = ::OpenAPI::fromJsonValue(m_ap_tags_and_vlan_ids, json[QString("apTagsAndVlanIds")]);
    m_ap_tags_and_vlan_ids_isSet = !json[QString("apTagsAndVlanIds")].isNull() && m_ap_tags_and_vlan_ids_isValid;

    m_auth_mode_isValid = ::OpenAPI::fromJsonValue(m_auth_mode, json[QString("authMode")]);
    m_auth_mode_isSet = !json[QString("authMode")].isNull() && m_auth_mode_isValid;

    m_availability_tags_isValid = ::OpenAPI::fromJsonValue(m_availability_tags, json[QString("availabilityTags")]);
    m_availability_tags_isSet = !json[QString("availabilityTags")].isNull() && m_availability_tags_isValid;

    m_available_on_all_aps_isValid = ::OpenAPI::fromJsonValue(m_available_on_all_aps, json[QString("availableOnAllAps")]);
    m_available_on_all_aps_isSet = !json[QString("availableOnAllAps")].isNull() && m_available_on_all_aps_isValid;

    m_band_selection_isValid = ::OpenAPI::fromJsonValue(m_band_selection, json[QString("bandSelection")]);
    m_band_selection_isSet = !json[QString("bandSelection")].isNull() && m_band_selection_isValid;

    m_concentrator_network_id_isValid = ::OpenAPI::fromJsonValue(m_concentrator_network_id, json[QString("concentratorNetworkId")]);
    m_concentrator_network_id_isSet = !json[QString("concentratorNetworkId")].isNull() && m_concentrator_network_id_isValid;

    m_default_vlan_id_isValid = ::OpenAPI::fromJsonValue(m_default_vlan_id, json[QString("defaultVlanId")]);
    m_default_vlan_id_isSet = !json[QString("defaultVlanId")].isNull() && m_default_vlan_id_isValid;

    m_disassociate_clients_on_vpn_failover_isValid = ::OpenAPI::fromJsonValue(m_disassociate_clients_on_vpn_failover, json[QString("disassociateClientsOnVpnFailover")]);
    m_disassociate_clients_on_vpn_failover_isSet = !json[QString("disassociateClientsOnVpnFailover")].isNull() && m_disassociate_clients_on_vpn_failover_isValid;

    m_dns_rewrite_isValid = ::OpenAPI::fromJsonValue(m_dns_rewrite, json[QString("dnsRewrite")]);
    m_dns_rewrite_isSet = !json[QString("dnsRewrite")].isNull() && m_dns_rewrite_isValid;

    m_dot11r_isValid = ::OpenAPI::fromJsonValue(m_dot11r, json[QString("dot11r")]);
    m_dot11r_isSet = !json[QString("dot11r")].isNull() && m_dot11r_isValid;

    m_dot11w_isValid = ::OpenAPI::fromJsonValue(m_dot11w, json[QString("dot11w")]);
    m_dot11w_isSet = !json[QString("dot11w")].isNull() && m_dot11w_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_encryption_mode_isValid = ::OpenAPI::fromJsonValue(m_encryption_mode, json[QString("encryptionMode")]);
    m_encryption_mode_isSet = !json[QString("encryptionMode")].isNull() && m_encryption_mode_isValid;

    m_enterprise_admin_access_isValid = ::OpenAPI::fromJsonValue(m_enterprise_admin_access, json[QString("enterpriseAdminAccess")]);
    m_enterprise_admin_access_isSet = !json[QString("enterpriseAdminAccess")].isNull() && m_enterprise_admin_access_isValid;

    m_gre_isValid = ::OpenAPI::fromJsonValue(m_gre, json[QString("gre")]);
    m_gre_isSet = !json[QString("gre")].isNull() && m_gre_isValid;

    m_ip_assignment_mode_isValid = ::OpenAPI::fromJsonValue(m_ip_assignment_mode, json[QString("ipAssignmentMode")]);
    m_ip_assignment_mode_isSet = !json[QString("ipAssignmentMode")].isNull() && m_ip_assignment_mode_isValid;

    m_lan_isolation_enabled_isValid = ::OpenAPI::fromJsonValue(m_lan_isolation_enabled, json[QString("lanIsolationEnabled")]);
    m_lan_isolation_enabled_isSet = !json[QString("lanIsolationEnabled")].isNull() && m_lan_isolation_enabled_isValid;

    m_ldap_isValid = ::OpenAPI::fromJsonValue(m_ldap, json[QString("ldap")]);
    m_ldap_isSet = !json[QString("ldap")].isNull() && m_ldap_isValid;

    m_local_radius_isValid = ::OpenAPI::fromJsonValue(m_local_radius, json[QString("localRadius")]);
    m_local_radius_isSet = !json[QString("localRadius")].isNull() && m_local_radius_isValid;

    m_mandatory_dhcp_enabled_isValid = ::OpenAPI::fromJsonValue(m_mandatory_dhcp_enabled, json[QString("mandatoryDhcpEnabled")]);
    m_mandatory_dhcp_enabled_isSet = !json[QString("mandatoryDhcpEnabled")].isNull() && m_mandatory_dhcp_enabled_isValid;

    m_min_bitrate_isValid = ::OpenAPI::fromJsonValue(m_min_bitrate, json[QString("minBitrate")]);
    m_min_bitrate_isSet = !json[QString("minBitrate")].isNull() && m_min_bitrate_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_oauth_isValid = ::OpenAPI::fromJsonValue(m_oauth, json[QString("oauth")]);
    m_oauth_isSet = !json[QString("oauth")].isNull() && m_oauth_isValid;

    m_per_client_bandwidth_limit_down_isValid = ::OpenAPI::fromJsonValue(m_per_client_bandwidth_limit_down, json[QString("perClientBandwidthLimitDown")]);
    m_per_client_bandwidth_limit_down_isSet = !json[QString("perClientBandwidthLimitDown")].isNull() && m_per_client_bandwidth_limit_down_isValid;

    m_per_client_bandwidth_limit_up_isValid = ::OpenAPI::fromJsonValue(m_per_client_bandwidth_limit_up, json[QString("perClientBandwidthLimitUp")]);
    m_per_client_bandwidth_limit_up_isSet = !json[QString("perClientBandwidthLimitUp")].isNull() && m_per_client_bandwidth_limit_up_isValid;

    m_per_ssid_bandwidth_limit_down_isValid = ::OpenAPI::fromJsonValue(m_per_ssid_bandwidth_limit_down, json[QString("perSsidBandwidthLimitDown")]);
    m_per_ssid_bandwidth_limit_down_isSet = !json[QString("perSsidBandwidthLimitDown")].isNull() && m_per_ssid_bandwidth_limit_down_isValid;

    m_per_ssid_bandwidth_limit_up_isValid = ::OpenAPI::fromJsonValue(m_per_ssid_bandwidth_limit_up, json[QString("perSsidBandwidthLimitUp")]);
    m_per_ssid_bandwidth_limit_up_isSet = !json[QString("perSsidBandwidthLimitUp")].isNull() && m_per_ssid_bandwidth_limit_up_isValid;

    m_psk_isValid = ::OpenAPI::fromJsonValue(m_psk, json[QString("psk")]);
    m_psk_isSet = !json[QString("psk")].isNull() && m_psk_isValid;

    m_radius_accounting_enabled_isValid = ::OpenAPI::fromJsonValue(m_radius_accounting_enabled, json[QString("radiusAccountingEnabled")]);
    m_radius_accounting_enabled_isSet = !json[QString("radiusAccountingEnabled")].isNull() && m_radius_accounting_enabled_isValid;

    m_radius_accounting_interim_interval_isValid = ::OpenAPI::fromJsonValue(m_radius_accounting_interim_interval, json[QString("radiusAccountingInterimInterval")]);
    m_radius_accounting_interim_interval_isSet = !json[QString("radiusAccountingInterimInterval")].isNull() && m_radius_accounting_interim_interval_isValid;

    m_radius_accounting_servers_isValid = ::OpenAPI::fromJsonValue(m_radius_accounting_servers, json[QString("radiusAccountingServers")]);
    m_radius_accounting_servers_isSet = !json[QString("radiusAccountingServers")].isNull() && m_radius_accounting_servers_isValid;

    m_radius_attribute_for_group_policies_isValid = ::OpenAPI::fromJsonValue(m_radius_attribute_for_group_policies, json[QString("radiusAttributeForGroupPolicies")]);
    m_radius_attribute_for_group_policies_isSet = !json[QString("radiusAttributeForGroupPolicies")].isNull() && m_radius_attribute_for_group_policies_isValid;

    m_radius_authentication_nas_id_isValid = ::OpenAPI::fromJsonValue(m_radius_authentication_nas_id, json[QString("radiusAuthenticationNasId")]);
    m_radius_authentication_nas_id_isSet = !json[QString("radiusAuthenticationNasId")].isNull() && m_radius_authentication_nas_id_isValid;

    m_radius_called_station_id_isValid = ::OpenAPI::fromJsonValue(m_radius_called_station_id, json[QString("radiusCalledStationId")]);
    m_radius_called_station_id_isSet = !json[QString("radiusCalledStationId")].isNull() && m_radius_called_station_id_isValid;

    m_radius_coa_enabled_isValid = ::OpenAPI::fromJsonValue(m_radius_coa_enabled, json[QString("radiusCoaEnabled")]);
    m_radius_coa_enabled_isSet = !json[QString("radiusCoaEnabled")].isNull() && m_radius_coa_enabled_isValid;

    m_radius_failover_policy_isValid = ::OpenAPI::fromJsonValue(m_radius_failover_policy, json[QString("radiusFailoverPolicy")]);
    m_radius_failover_policy_isSet = !json[QString("radiusFailoverPolicy")].isNull() && m_radius_failover_policy_isValid;

    m_radius_fallback_enabled_isValid = ::OpenAPI::fromJsonValue(m_radius_fallback_enabled, json[QString("radiusFallbackEnabled")]);
    m_radius_fallback_enabled_isSet = !json[QString("radiusFallbackEnabled")].isNull() && m_radius_fallback_enabled_isValid;

    m_radius_guest_vlan_enabled_isValid = ::OpenAPI::fromJsonValue(m_radius_guest_vlan_enabled, json[QString("radiusGuestVlanEnabled")]);
    m_radius_guest_vlan_enabled_isSet = !json[QString("radiusGuestVlanEnabled")].isNull() && m_radius_guest_vlan_enabled_isValid;

    m_radius_guest_vlan_id_isValid = ::OpenAPI::fromJsonValue(m_radius_guest_vlan_id, json[QString("radiusGuestVlanId")]);
    m_radius_guest_vlan_id_isSet = !json[QString("radiusGuestVlanId")].isNull() && m_radius_guest_vlan_id_isValid;

    m_radius_load_balancing_policy_isValid = ::OpenAPI::fromJsonValue(m_radius_load_balancing_policy, json[QString("radiusLoadBalancingPolicy")]);
    m_radius_load_balancing_policy_isSet = !json[QString("radiusLoadBalancingPolicy")].isNull() && m_radius_load_balancing_policy_isValid;

    m_radius_override_isValid = ::OpenAPI::fromJsonValue(m_radius_override, json[QString("radiusOverride")]);
    m_radius_override_isSet = !json[QString("radiusOverride")].isNull() && m_radius_override_isValid;

    m_radius_proxy_enabled_isValid = ::OpenAPI::fromJsonValue(m_radius_proxy_enabled, json[QString("radiusProxyEnabled")]);
    m_radius_proxy_enabled_isSet = !json[QString("radiusProxyEnabled")].isNull() && m_radius_proxy_enabled_isValid;

    m_radius_server_attempts_limit_isValid = ::OpenAPI::fromJsonValue(m_radius_server_attempts_limit, json[QString("radiusServerAttemptsLimit")]);
    m_radius_server_attempts_limit_isSet = !json[QString("radiusServerAttemptsLimit")].isNull() && m_radius_server_attempts_limit_isValid;

    m_radius_server_timeout_isValid = ::OpenAPI::fromJsonValue(m_radius_server_timeout, json[QString("radiusServerTimeout")]);
    m_radius_server_timeout_isSet = !json[QString("radiusServerTimeout")].isNull() && m_radius_server_timeout_isValid;

    m_radius_servers_isValid = ::OpenAPI::fromJsonValue(m_radius_servers, json[QString("radiusServers")]);
    m_radius_servers_isSet = !json[QString("radiusServers")].isNull() && m_radius_servers_isValid;

    m_radius_testing_enabled_isValid = ::OpenAPI::fromJsonValue(m_radius_testing_enabled, json[QString("radiusTestingEnabled")]);
    m_radius_testing_enabled_isSet = !json[QString("radiusTestingEnabled")].isNull() && m_radius_testing_enabled_isValid;

    m_secondary_concentrator_network_id_isValid = ::OpenAPI::fromJsonValue(m_secondary_concentrator_network_id, json[QString("secondaryConcentratorNetworkId")]);
    m_secondary_concentrator_network_id_isSet = !json[QString("secondaryConcentratorNetworkId")].isNull() && m_secondary_concentrator_network_id_isValid;

    m_speed_burst_isValid = ::OpenAPI::fromJsonValue(m_speed_burst, json[QString("speedBurst")]);
    m_speed_burst_isSet = !json[QString("speedBurst")].isNull() && m_speed_burst_isValid;

    m_splash_guest_sponsor_domains_isValid = ::OpenAPI::fromJsonValue(m_splash_guest_sponsor_domains, json[QString("splashGuestSponsorDomains")]);
    m_splash_guest_sponsor_domains_isSet = !json[QString("splashGuestSponsorDomains")].isNull() && m_splash_guest_sponsor_domains_isValid;

    m_splash_page_isValid = ::OpenAPI::fromJsonValue(m_splash_page, json[QString("splashPage")]);
    m_splash_page_isSet = !json[QString("splashPage")].isNull() && m_splash_page_isValid;

    m_use_vlan_tagging_isValid = ::OpenAPI::fromJsonValue(m_use_vlan_tagging, json[QString("useVlanTagging")]);
    m_use_vlan_tagging_isSet = !json[QString("useVlanTagging")].isNull() && m_use_vlan_tagging_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;

    m_vlan_id_isValid = ::OpenAPI::fromJsonValue(m_vlan_id, json[QString("vlanId")]);
    m_vlan_id_isSet = !json[QString("vlanId")].isNull() && m_vlan_id_isValid;

    m_walled_garden_enabled_isValid = ::OpenAPI::fromJsonValue(m_walled_garden_enabled, json[QString("walledGardenEnabled")]);
    m_walled_garden_enabled_isSet = !json[QString("walledGardenEnabled")].isNull() && m_walled_garden_enabled_isValid;

    m_walled_garden_ranges_isValid = ::OpenAPI::fromJsonValue(m_walled_garden_ranges, json[QString("walledGardenRanges")]);
    m_walled_garden_ranges_isSet = !json[QString("walledGardenRanges")].isNull() && m_walled_garden_ranges_isValid;

    m_wpa_encryption_mode_isValid = ::OpenAPI::fromJsonValue(m_wpa_encryption_mode, json[QString("wpaEncryptionMode")]);
    m_wpa_encryption_mode_isSet = !json[QString("wpaEncryptionMode")].isNull() && m_wpa_encryption_mode_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkWirelessSsid_request::asJsonObject() const {
    QJsonObject obj;
    if (m_active_directory.isSet()) {
        obj.insert(QString("activeDirectory"), ::OpenAPI::toJsonValue(m_active_directory));
    }
    if (m_adult_content_filtering_enabled_isSet) {
        obj.insert(QString("adultContentFilteringEnabled"), ::OpenAPI::toJsonValue(m_adult_content_filtering_enabled));
    }
    if (m_ap_tags_and_vlan_ids.size() > 0) {
        obj.insert(QString("apTagsAndVlanIds"), ::OpenAPI::toJsonValue(m_ap_tags_and_vlan_ids));
    }
    if (m_auth_mode_isSet) {
        obj.insert(QString("authMode"), ::OpenAPI::toJsonValue(m_auth_mode));
    }
    if (m_availability_tags.size() > 0) {
        obj.insert(QString("availabilityTags"), ::OpenAPI::toJsonValue(m_availability_tags));
    }
    if (m_available_on_all_aps_isSet) {
        obj.insert(QString("availableOnAllAps"), ::OpenAPI::toJsonValue(m_available_on_all_aps));
    }
    if (m_band_selection_isSet) {
        obj.insert(QString("bandSelection"), ::OpenAPI::toJsonValue(m_band_selection));
    }
    if (m_concentrator_network_id_isSet) {
        obj.insert(QString("concentratorNetworkId"), ::OpenAPI::toJsonValue(m_concentrator_network_id));
    }
    if (m_default_vlan_id_isSet) {
        obj.insert(QString("defaultVlanId"), ::OpenAPI::toJsonValue(m_default_vlan_id));
    }
    if (m_disassociate_clients_on_vpn_failover_isSet) {
        obj.insert(QString("disassociateClientsOnVpnFailover"), ::OpenAPI::toJsonValue(m_disassociate_clients_on_vpn_failover));
    }
    if (m_dns_rewrite.isSet()) {
        obj.insert(QString("dnsRewrite"), ::OpenAPI::toJsonValue(m_dns_rewrite));
    }
    if (m_dot11r.isSet()) {
        obj.insert(QString("dot11r"), ::OpenAPI::toJsonValue(m_dot11r));
    }
    if (m_dot11w.isSet()) {
        obj.insert(QString("dot11w"), ::OpenAPI::toJsonValue(m_dot11w));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_encryption_mode_isSet) {
        obj.insert(QString("encryptionMode"), ::OpenAPI::toJsonValue(m_encryption_mode));
    }
    if (m_enterprise_admin_access_isSet) {
        obj.insert(QString("enterpriseAdminAccess"), ::OpenAPI::toJsonValue(m_enterprise_admin_access));
    }
    if (m_gre.isSet()) {
        obj.insert(QString("gre"), ::OpenAPI::toJsonValue(m_gre));
    }
    if (m_ip_assignment_mode_isSet) {
        obj.insert(QString("ipAssignmentMode"), ::OpenAPI::toJsonValue(m_ip_assignment_mode));
    }
    if (m_lan_isolation_enabled_isSet) {
        obj.insert(QString("lanIsolationEnabled"), ::OpenAPI::toJsonValue(m_lan_isolation_enabled));
    }
    if (m_ldap.isSet()) {
        obj.insert(QString("ldap"), ::OpenAPI::toJsonValue(m_ldap));
    }
    if (m_local_radius.isSet()) {
        obj.insert(QString("localRadius"), ::OpenAPI::toJsonValue(m_local_radius));
    }
    if (m_mandatory_dhcp_enabled_isSet) {
        obj.insert(QString("mandatoryDhcpEnabled"), ::OpenAPI::toJsonValue(m_mandatory_dhcp_enabled));
    }
    if (m_min_bitrate_isSet) {
        obj.insert(QString("minBitrate"), ::OpenAPI::toJsonValue(m_min_bitrate));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_oauth.isSet()) {
        obj.insert(QString("oauth"), ::OpenAPI::toJsonValue(m_oauth));
    }
    if (m_per_client_bandwidth_limit_down_isSet) {
        obj.insert(QString("perClientBandwidthLimitDown"), ::OpenAPI::toJsonValue(m_per_client_bandwidth_limit_down));
    }
    if (m_per_client_bandwidth_limit_up_isSet) {
        obj.insert(QString("perClientBandwidthLimitUp"), ::OpenAPI::toJsonValue(m_per_client_bandwidth_limit_up));
    }
    if (m_per_ssid_bandwidth_limit_down_isSet) {
        obj.insert(QString("perSsidBandwidthLimitDown"), ::OpenAPI::toJsonValue(m_per_ssid_bandwidth_limit_down));
    }
    if (m_per_ssid_bandwidth_limit_up_isSet) {
        obj.insert(QString("perSsidBandwidthLimitUp"), ::OpenAPI::toJsonValue(m_per_ssid_bandwidth_limit_up));
    }
    if (m_psk_isSet) {
        obj.insert(QString("psk"), ::OpenAPI::toJsonValue(m_psk));
    }
    if (m_radius_accounting_enabled_isSet) {
        obj.insert(QString("radiusAccountingEnabled"), ::OpenAPI::toJsonValue(m_radius_accounting_enabled));
    }
    if (m_radius_accounting_interim_interval_isSet) {
        obj.insert(QString("radiusAccountingInterimInterval"), ::OpenAPI::toJsonValue(m_radius_accounting_interim_interval));
    }
    if (m_radius_accounting_servers.size() > 0) {
        obj.insert(QString("radiusAccountingServers"), ::OpenAPI::toJsonValue(m_radius_accounting_servers));
    }
    if (m_radius_attribute_for_group_policies_isSet) {
        obj.insert(QString("radiusAttributeForGroupPolicies"), ::OpenAPI::toJsonValue(m_radius_attribute_for_group_policies));
    }
    if (m_radius_authentication_nas_id_isSet) {
        obj.insert(QString("radiusAuthenticationNasId"), ::OpenAPI::toJsonValue(m_radius_authentication_nas_id));
    }
    if (m_radius_called_station_id_isSet) {
        obj.insert(QString("radiusCalledStationId"), ::OpenAPI::toJsonValue(m_radius_called_station_id));
    }
    if (m_radius_coa_enabled_isSet) {
        obj.insert(QString("radiusCoaEnabled"), ::OpenAPI::toJsonValue(m_radius_coa_enabled));
    }
    if (m_radius_failover_policy_isSet) {
        obj.insert(QString("radiusFailoverPolicy"), ::OpenAPI::toJsonValue(m_radius_failover_policy));
    }
    if (m_radius_fallback_enabled_isSet) {
        obj.insert(QString("radiusFallbackEnabled"), ::OpenAPI::toJsonValue(m_radius_fallback_enabled));
    }
    if (m_radius_guest_vlan_enabled_isSet) {
        obj.insert(QString("radiusGuestVlanEnabled"), ::OpenAPI::toJsonValue(m_radius_guest_vlan_enabled));
    }
    if (m_radius_guest_vlan_id_isSet) {
        obj.insert(QString("radiusGuestVlanId"), ::OpenAPI::toJsonValue(m_radius_guest_vlan_id));
    }
    if (m_radius_load_balancing_policy_isSet) {
        obj.insert(QString("radiusLoadBalancingPolicy"), ::OpenAPI::toJsonValue(m_radius_load_balancing_policy));
    }
    if (m_radius_override_isSet) {
        obj.insert(QString("radiusOverride"), ::OpenAPI::toJsonValue(m_radius_override));
    }
    if (m_radius_proxy_enabled_isSet) {
        obj.insert(QString("radiusProxyEnabled"), ::OpenAPI::toJsonValue(m_radius_proxy_enabled));
    }
    if (m_radius_server_attempts_limit_isSet) {
        obj.insert(QString("radiusServerAttemptsLimit"), ::OpenAPI::toJsonValue(m_radius_server_attempts_limit));
    }
    if (m_radius_server_timeout_isSet) {
        obj.insert(QString("radiusServerTimeout"), ::OpenAPI::toJsonValue(m_radius_server_timeout));
    }
    if (m_radius_servers.size() > 0) {
        obj.insert(QString("radiusServers"), ::OpenAPI::toJsonValue(m_radius_servers));
    }
    if (m_radius_testing_enabled_isSet) {
        obj.insert(QString("radiusTestingEnabled"), ::OpenAPI::toJsonValue(m_radius_testing_enabled));
    }
    if (m_secondary_concentrator_network_id_isSet) {
        obj.insert(QString("secondaryConcentratorNetworkId"), ::OpenAPI::toJsonValue(m_secondary_concentrator_network_id));
    }
    if (m_speed_burst.isSet()) {
        obj.insert(QString("speedBurst"), ::OpenAPI::toJsonValue(m_speed_burst));
    }
    if (m_splash_guest_sponsor_domains.size() > 0) {
        obj.insert(QString("splashGuestSponsorDomains"), ::OpenAPI::toJsonValue(m_splash_guest_sponsor_domains));
    }
    if (m_splash_page_isSet) {
        obj.insert(QString("splashPage"), ::OpenAPI::toJsonValue(m_splash_page));
    }
    if (m_use_vlan_tagging_isSet) {
        obj.insert(QString("useVlanTagging"), ::OpenAPI::toJsonValue(m_use_vlan_tagging));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    if (m_vlan_id_isSet) {
        obj.insert(QString("vlanId"), ::OpenAPI::toJsonValue(m_vlan_id));
    }
    if (m_walled_garden_enabled_isSet) {
        obj.insert(QString("walledGardenEnabled"), ::OpenAPI::toJsonValue(m_walled_garden_enabled));
    }
    if (m_walled_garden_ranges.size() > 0) {
        obj.insert(QString("walledGardenRanges"), ::OpenAPI::toJsonValue(m_walled_garden_ranges));
    }
    if (m_wpa_encryption_mode_isSet) {
        obj.insert(QString("wpaEncryptionMode"), ::OpenAPI::toJsonValue(m_wpa_encryption_mode));
    }
    return obj;
}

OAIUpdateNetworkWirelessSsid_request_activeDirectory OAIUpdateNetworkWirelessSsid_request::getActiveDirectory() const {
    return m_active_directory;
}
void OAIUpdateNetworkWirelessSsid_request::setActiveDirectory(const OAIUpdateNetworkWirelessSsid_request_activeDirectory &active_directory) {
    m_active_directory = active_directory;
    m_active_directory_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_active_directory_Set() const{
    return m_active_directory_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_active_directory_Valid() const{
    return m_active_directory_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request::isAdultContentFilteringEnabled() const {
    return m_adult_content_filtering_enabled;
}
void OAIUpdateNetworkWirelessSsid_request::setAdultContentFilteringEnabled(const bool &adult_content_filtering_enabled) {
    m_adult_content_filtering_enabled = adult_content_filtering_enabled;
    m_adult_content_filtering_enabled_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_adult_content_filtering_enabled_Set() const{
    return m_adult_content_filtering_enabled_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_adult_content_filtering_enabled_Valid() const{
    return m_adult_content_filtering_enabled_isValid;
}

QList<OAIUpdateNetworkWirelessSsid_request_apTagsAndVlanIds_inner> OAIUpdateNetworkWirelessSsid_request::getApTagsAndVlanIds() const {
    return m_ap_tags_and_vlan_ids;
}
void OAIUpdateNetworkWirelessSsid_request::setApTagsAndVlanIds(const QList<OAIUpdateNetworkWirelessSsid_request_apTagsAndVlanIds_inner> &ap_tags_and_vlan_ids) {
    m_ap_tags_and_vlan_ids = ap_tags_and_vlan_ids;
    m_ap_tags_and_vlan_ids_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_ap_tags_and_vlan_ids_Set() const{
    return m_ap_tags_and_vlan_ids_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_ap_tags_and_vlan_ids_Valid() const{
    return m_ap_tags_and_vlan_ids_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request::getAuthMode() const {
    return m_auth_mode;
}
void OAIUpdateNetworkWirelessSsid_request::setAuthMode(const QString &auth_mode) {
    m_auth_mode = auth_mode;
    m_auth_mode_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_auth_mode_Set() const{
    return m_auth_mode_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_auth_mode_Valid() const{
    return m_auth_mode_isValid;
}

QList<QString> OAIUpdateNetworkWirelessSsid_request::getAvailabilityTags() const {
    return m_availability_tags;
}
void OAIUpdateNetworkWirelessSsid_request::setAvailabilityTags(const QList<QString> &availability_tags) {
    m_availability_tags = availability_tags;
    m_availability_tags_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_availability_tags_Set() const{
    return m_availability_tags_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_availability_tags_Valid() const{
    return m_availability_tags_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request::isAvailableOnAllAps() const {
    return m_available_on_all_aps;
}
void OAIUpdateNetworkWirelessSsid_request::setAvailableOnAllAps(const bool &available_on_all_aps) {
    m_available_on_all_aps = available_on_all_aps;
    m_available_on_all_aps_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_available_on_all_aps_Set() const{
    return m_available_on_all_aps_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_available_on_all_aps_Valid() const{
    return m_available_on_all_aps_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request::getBandSelection() const {
    return m_band_selection;
}
void OAIUpdateNetworkWirelessSsid_request::setBandSelection(const QString &band_selection) {
    m_band_selection = band_selection;
    m_band_selection_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_band_selection_Set() const{
    return m_band_selection_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_band_selection_Valid() const{
    return m_band_selection_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request::getConcentratorNetworkId() const {
    return m_concentrator_network_id;
}
void OAIUpdateNetworkWirelessSsid_request::setConcentratorNetworkId(const QString &concentrator_network_id) {
    m_concentrator_network_id = concentrator_network_id;
    m_concentrator_network_id_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_concentrator_network_id_Set() const{
    return m_concentrator_network_id_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_concentrator_network_id_Valid() const{
    return m_concentrator_network_id_isValid;
}

qint32 OAIUpdateNetworkWirelessSsid_request::getDefaultVlanId() const {
    return m_default_vlan_id;
}
void OAIUpdateNetworkWirelessSsid_request::setDefaultVlanId(const qint32 &default_vlan_id) {
    m_default_vlan_id = default_vlan_id;
    m_default_vlan_id_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_default_vlan_id_Set() const{
    return m_default_vlan_id_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_default_vlan_id_Valid() const{
    return m_default_vlan_id_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request::isDisassociateClientsOnVpnFailover() const {
    return m_disassociate_clients_on_vpn_failover;
}
void OAIUpdateNetworkWirelessSsid_request::setDisassociateClientsOnVpnFailover(const bool &disassociate_clients_on_vpn_failover) {
    m_disassociate_clients_on_vpn_failover = disassociate_clients_on_vpn_failover;
    m_disassociate_clients_on_vpn_failover_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_disassociate_clients_on_vpn_failover_Set() const{
    return m_disassociate_clients_on_vpn_failover_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_disassociate_clients_on_vpn_failover_Valid() const{
    return m_disassociate_clients_on_vpn_failover_isValid;
}

OAIUpdateNetworkWirelessSsid_request_dnsRewrite OAIUpdateNetworkWirelessSsid_request::getDnsRewrite() const {
    return m_dns_rewrite;
}
void OAIUpdateNetworkWirelessSsid_request::setDnsRewrite(const OAIUpdateNetworkWirelessSsid_request_dnsRewrite &dns_rewrite) {
    m_dns_rewrite = dns_rewrite;
    m_dns_rewrite_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_dns_rewrite_Set() const{
    return m_dns_rewrite_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_dns_rewrite_Valid() const{
    return m_dns_rewrite_isValid;
}

OAIUpdateNetworkWirelessSsid_request_dot11r OAIUpdateNetworkWirelessSsid_request::getDot11r() const {
    return m_dot11r;
}
void OAIUpdateNetworkWirelessSsid_request::setDot11r(const OAIUpdateNetworkWirelessSsid_request_dot11r &dot11r) {
    m_dot11r = dot11r;
    m_dot11r_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_dot11r_Set() const{
    return m_dot11r_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_dot11r_Valid() const{
    return m_dot11r_isValid;
}

OAIUpdateNetworkWirelessSsid_request_dot11w OAIUpdateNetworkWirelessSsid_request::getDot11w() const {
    return m_dot11w;
}
void OAIUpdateNetworkWirelessSsid_request::setDot11w(const OAIUpdateNetworkWirelessSsid_request_dot11w &dot11w) {
    m_dot11w = dot11w;
    m_dot11w_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_dot11w_Set() const{
    return m_dot11w_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_dot11w_Valid() const{
    return m_dot11w_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request::isEnabled() const {
    return m_enabled;
}
void OAIUpdateNetworkWirelessSsid_request::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request::getEncryptionMode() const {
    return m_encryption_mode;
}
void OAIUpdateNetworkWirelessSsid_request::setEncryptionMode(const QString &encryption_mode) {
    m_encryption_mode = encryption_mode;
    m_encryption_mode_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_encryption_mode_Set() const{
    return m_encryption_mode_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_encryption_mode_Valid() const{
    return m_encryption_mode_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request::getEnterpriseAdminAccess() const {
    return m_enterprise_admin_access;
}
void OAIUpdateNetworkWirelessSsid_request::setEnterpriseAdminAccess(const QString &enterprise_admin_access) {
    m_enterprise_admin_access = enterprise_admin_access;
    m_enterprise_admin_access_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_enterprise_admin_access_Set() const{
    return m_enterprise_admin_access_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_enterprise_admin_access_Valid() const{
    return m_enterprise_admin_access_isValid;
}

OAIUpdateNetworkWirelessSsid_request_gre OAIUpdateNetworkWirelessSsid_request::getGre() const {
    return m_gre;
}
void OAIUpdateNetworkWirelessSsid_request::setGre(const OAIUpdateNetworkWirelessSsid_request_gre &gre) {
    m_gre = gre;
    m_gre_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_gre_Set() const{
    return m_gre_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_gre_Valid() const{
    return m_gre_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request::getIpAssignmentMode() const {
    return m_ip_assignment_mode;
}
void OAIUpdateNetworkWirelessSsid_request::setIpAssignmentMode(const QString &ip_assignment_mode) {
    m_ip_assignment_mode = ip_assignment_mode;
    m_ip_assignment_mode_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_ip_assignment_mode_Set() const{
    return m_ip_assignment_mode_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_ip_assignment_mode_Valid() const{
    return m_ip_assignment_mode_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request::isLanIsolationEnabled() const {
    return m_lan_isolation_enabled;
}
void OAIUpdateNetworkWirelessSsid_request::setLanIsolationEnabled(const bool &lan_isolation_enabled) {
    m_lan_isolation_enabled = lan_isolation_enabled;
    m_lan_isolation_enabled_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_lan_isolation_enabled_Set() const{
    return m_lan_isolation_enabled_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_lan_isolation_enabled_Valid() const{
    return m_lan_isolation_enabled_isValid;
}

OAIUpdateNetworkWirelessSsid_request_ldap OAIUpdateNetworkWirelessSsid_request::getLdap() const {
    return m_ldap;
}
void OAIUpdateNetworkWirelessSsid_request::setLdap(const OAIUpdateNetworkWirelessSsid_request_ldap &ldap) {
    m_ldap = ldap;
    m_ldap_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_ldap_Set() const{
    return m_ldap_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_ldap_Valid() const{
    return m_ldap_isValid;
}

OAIUpdateNetworkWirelessSsid_request_localRadius OAIUpdateNetworkWirelessSsid_request::getLocalRadius() const {
    return m_local_radius;
}
void OAIUpdateNetworkWirelessSsid_request::setLocalRadius(const OAIUpdateNetworkWirelessSsid_request_localRadius &local_radius) {
    m_local_radius = local_radius;
    m_local_radius_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_local_radius_Set() const{
    return m_local_radius_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_local_radius_Valid() const{
    return m_local_radius_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request::isMandatoryDhcpEnabled() const {
    return m_mandatory_dhcp_enabled;
}
void OAIUpdateNetworkWirelessSsid_request::setMandatoryDhcpEnabled(const bool &mandatory_dhcp_enabled) {
    m_mandatory_dhcp_enabled = mandatory_dhcp_enabled;
    m_mandatory_dhcp_enabled_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_mandatory_dhcp_enabled_Set() const{
    return m_mandatory_dhcp_enabled_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_mandatory_dhcp_enabled_Valid() const{
    return m_mandatory_dhcp_enabled_isValid;
}

float OAIUpdateNetworkWirelessSsid_request::getMinBitrate() const {
    return m_min_bitrate;
}
void OAIUpdateNetworkWirelessSsid_request::setMinBitrate(const float &min_bitrate) {
    m_min_bitrate = min_bitrate;
    m_min_bitrate_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_min_bitrate_Set() const{
    return m_min_bitrate_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_min_bitrate_Valid() const{
    return m_min_bitrate_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request::getName() const {
    return m_name;
}
void OAIUpdateNetworkWirelessSsid_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_name_Valid() const{
    return m_name_isValid;
}

OAIUpdateNetworkWirelessSsid_request_oauth OAIUpdateNetworkWirelessSsid_request::getOauth() const {
    return m_oauth;
}
void OAIUpdateNetworkWirelessSsid_request::setOauth(const OAIUpdateNetworkWirelessSsid_request_oauth &oauth) {
    m_oauth = oauth;
    m_oauth_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_oauth_Set() const{
    return m_oauth_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_oauth_Valid() const{
    return m_oauth_isValid;
}

qint32 OAIUpdateNetworkWirelessSsid_request::getPerClientBandwidthLimitDown() const {
    return m_per_client_bandwidth_limit_down;
}
void OAIUpdateNetworkWirelessSsid_request::setPerClientBandwidthLimitDown(const qint32 &per_client_bandwidth_limit_down) {
    m_per_client_bandwidth_limit_down = per_client_bandwidth_limit_down;
    m_per_client_bandwidth_limit_down_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_per_client_bandwidth_limit_down_Set() const{
    return m_per_client_bandwidth_limit_down_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_per_client_bandwidth_limit_down_Valid() const{
    return m_per_client_bandwidth_limit_down_isValid;
}

qint32 OAIUpdateNetworkWirelessSsid_request::getPerClientBandwidthLimitUp() const {
    return m_per_client_bandwidth_limit_up;
}
void OAIUpdateNetworkWirelessSsid_request::setPerClientBandwidthLimitUp(const qint32 &per_client_bandwidth_limit_up) {
    m_per_client_bandwidth_limit_up = per_client_bandwidth_limit_up;
    m_per_client_bandwidth_limit_up_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_per_client_bandwidth_limit_up_Set() const{
    return m_per_client_bandwidth_limit_up_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_per_client_bandwidth_limit_up_Valid() const{
    return m_per_client_bandwidth_limit_up_isValid;
}

qint32 OAIUpdateNetworkWirelessSsid_request::getPerSsidBandwidthLimitDown() const {
    return m_per_ssid_bandwidth_limit_down;
}
void OAIUpdateNetworkWirelessSsid_request::setPerSsidBandwidthLimitDown(const qint32 &per_ssid_bandwidth_limit_down) {
    m_per_ssid_bandwidth_limit_down = per_ssid_bandwidth_limit_down;
    m_per_ssid_bandwidth_limit_down_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_per_ssid_bandwidth_limit_down_Set() const{
    return m_per_ssid_bandwidth_limit_down_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_per_ssid_bandwidth_limit_down_Valid() const{
    return m_per_ssid_bandwidth_limit_down_isValid;
}

qint32 OAIUpdateNetworkWirelessSsid_request::getPerSsidBandwidthLimitUp() const {
    return m_per_ssid_bandwidth_limit_up;
}
void OAIUpdateNetworkWirelessSsid_request::setPerSsidBandwidthLimitUp(const qint32 &per_ssid_bandwidth_limit_up) {
    m_per_ssid_bandwidth_limit_up = per_ssid_bandwidth_limit_up;
    m_per_ssid_bandwidth_limit_up_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_per_ssid_bandwidth_limit_up_Set() const{
    return m_per_ssid_bandwidth_limit_up_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_per_ssid_bandwidth_limit_up_Valid() const{
    return m_per_ssid_bandwidth_limit_up_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request::getPsk() const {
    return m_psk;
}
void OAIUpdateNetworkWirelessSsid_request::setPsk(const QString &psk) {
    m_psk = psk;
    m_psk_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_psk_Set() const{
    return m_psk_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_psk_Valid() const{
    return m_psk_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request::isRadiusAccountingEnabled() const {
    return m_radius_accounting_enabled;
}
void OAIUpdateNetworkWirelessSsid_request::setRadiusAccountingEnabled(const bool &radius_accounting_enabled) {
    m_radius_accounting_enabled = radius_accounting_enabled;
    m_radius_accounting_enabled_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_accounting_enabled_Set() const{
    return m_radius_accounting_enabled_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_accounting_enabled_Valid() const{
    return m_radius_accounting_enabled_isValid;
}

qint32 OAIUpdateNetworkWirelessSsid_request::getRadiusAccountingInterimInterval() const {
    return m_radius_accounting_interim_interval;
}
void OAIUpdateNetworkWirelessSsid_request::setRadiusAccountingInterimInterval(const qint32 &radius_accounting_interim_interval) {
    m_radius_accounting_interim_interval = radius_accounting_interim_interval;
    m_radius_accounting_interim_interval_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_accounting_interim_interval_Set() const{
    return m_radius_accounting_interim_interval_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_accounting_interim_interval_Valid() const{
    return m_radius_accounting_interim_interval_isValid;
}

QList<OAIUpdateNetworkWirelessSsid_request_radiusAccountingServers_inner> OAIUpdateNetworkWirelessSsid_request::getRadiusAccountingServers() const {
    return m_radius_accounting_servers;
}
void OAIUpdateNetworkWirelessSsid_request::setRadiusAccountingServers(const QList<OAIUpdateNetworkWirelessSsid_request_radiusAccountingServers_inner> &radius_accounting_servers) {
    m_radius_accounting_servers = radius_accounting_servers;
    m_radius_accounting_servers_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_accounting_servers_Set() const{
    return m_radius_accounting_servers_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_accounting_servers_Valid() const{
    return m_radius_accounting_servers_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request::getRadiusAttributeForGroupPolicies() const {
    return m_radius_attribute_for_group_policies;
}
void OAIUpdateNetworkWirelessSsid_request::setRadiusAttributeForGroupPolicies(const QString &radius_attribute_for_group_policies) {
    m_radius_attribute_for_group_policies = radius_attribute_for_group_policies;
    m_radius_attribute_for_group_policies_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_attribute_for_group_policies_Set() const{
    return m_radius_attribute_for_group_policies_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_attribute_for_group_policies_Valid() const{
    return m_radius_attribute_for_group_policies_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request::getRadiusAuthenticationNasId() const {
    return m_radius_authentication_nas_id;
}
void OAIUpdateNetworkWirelessSsid_request::setRadiusAuthenticationNasId(const QString &radius_authentication_nas_id) {
    m_radius_authentication_nas_id = radius_authentication_nas_id;
    m_radius_authentication_nas_id_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_authentication_nas_id_Set() const{
    return m_radius_authentication_nas_id_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_authentication_nas_id_Valid() const{
    return m_radius_authentication_nas_id_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request::getRadiusCalledStationId() const {
    return m_radius_called_station_id;
}
void OAIUpdateNetworkWirelessSsid_request::setRadiusCalledStationId(const QString &radius_called_station_id) {
    m_radius_called_station_id = radius_called_station_id;
    m_radius_called_station_id_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_called_station_id_Set() const{
    return m_radius_called_station_id_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_called_station_id_Valid() const{
    return m_radius_called_station_id_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request::isRadiusCoaEnabled() const {
    return m_radius_coa_enabled;
}
void OAIUpdateNetworkWirelessSsid_request::setRadiusCoaEnabled(const bool &radius_coa_enabled) {
    m_radius_coa_enabled = radius_coa_enabled;
    m_radius_coa_enabled_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_coa_enabled_Set() const{
    return m_radius_coa_enabled_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_coa_enabled_Valid() const{
    return m_radius_coa_enabled_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request::getRadiusFailoverPolicy() const {
    return m_radius_failover_policy;
}
void OAIUpdateNetworkWirelessSsid_request::setRadiusFailoverPolicy(const QString &radius_failover_policy) {
    m_radius_failover_policy = radius_failover_policy;
    m_radius_failover_policy_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_failover_policy_Set() const{
    return m_radius_failover_policy_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_failover_policy_Valid() const{
    return m_radius_failover_policy_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request::isRadiusFallbackEnabled() const {
    return m_radius_fallback_enabled;
}
void OAIUpdateNetworkWirelessSsid_request::setRadiusFallbackEnabled(const bool &radius_fallback_enabled) {
    m_radius_fallback_enabled = radius_fallback_enabled;
    m_radius_fallback_enabled_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_fallback_enabled_Set() const{
    return m_radius_fallback_enabled_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_fallback_enabled_Valid() const{
    return m_radius_fallback_enabled_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request::isRadiusGuestVlanEnabled() const {
    return m_radius_guest_vlan_enabled;
}
void OAIUpdateNetworkWirelessSsid_request::setRadiusGuestVlanEnabled(const bool &radius_guest_vlan_enabled) {
    m_radius_guest_vlan_enabled = radius_guest_vlan_enabled;
    m_radius_guest_vlan_enabled_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_guest_vlan_enabled_Set() const{
    return m_radius_guest_vlan_enabled_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_guest_vlan_enabled_Valid() const{
    return m_radius_guest_vlan_enabled_isValid;
}

qint32 OAIUpdateNetworkWirelessSsid_request::getRadiusGuestVlanId() const {
    return m_radius_guest_vlan_id;
}
void OAIUpdateNetworkWirelessSsid_request::setRadiusGuestVlanId(const qint32 &radius_guest_vlan_id) {
    m_radius_guest_vlan_id = radius_guest_vlan_id;
    m_radius_guest_vlan_id_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_guest_vlan_id_Set() const{
    return m_radius_guest_vlan_id_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_guest_vlan_id_Valid() const{
    return m_radius_guest_vlan_id_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request::getRadiusLoadBalancingPolicy() const {
    return m_radius_load_balancing_policy;
}
void OAIUpdateNetworkWirelessSsid_request::setRadiusLoadBalancingPolicy(const QString &radius_load_balancing_policy) {
    m_radius_load_balancing_policy = radius_load_balancing_policy;
    m_radius_load_balancing_policy_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_load_balancing_policy_Set() const{
    return m_radius_load_balancing_policy_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_load_balancing_policy_Valid() const{
    return m_radius_load_balancing_policy_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request::isRadiusOverride() const {
    return m_radius_override;
}
void OAIUpdateNetworkWirelessSsid_request::setRadiusOverride(const bool &radius_override) {
    m_radius_override = radius_override;
    m_radius_override_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_override_Set() const{
    return m_radius_override_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_override_Valid() const{
    return m_radius_override_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request::isRadiusProxyEnabled() const {
    return m_radius_proxy_enabled;
}
void OAIUpdateNetworkWirelessSsid_request::setRadiusProxyEnabled(const bool &radius_proxy_enabled) {
    m_radius_proxy_enabled = radius_proxy_enabled;
    m_radius_proxy_enabled_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_proxy_enabled_Set() const{
    return m_radius_proxy_enabled_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_proxy_enabled_Valid() const{
    return m_radius_proxy_enabled_isValid;
}

qint32 OAIUpdateNetworkWirelessSsid_request::getRadiusServerAttemptsLimit() const {
    return m_radius_server_attempts_limit;
}
void OAIUpdateNetworkWirelessSsid_request::setRadiusServerAttemptsLimit(const qint32 &radius_server_attempts_limit) {
    m_radius_server_attempts_limit = radius_server_attempts_limit;
    m_radius_server_attempts_limit_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_server_attempts_limit_Set() const{
    return m_radius_server_attempts_limit_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_server_attempts_limit_Valid() const{
    return m_radius_server_attempts_limit_isValid;
}

qint32 OAIUpdateNetworkWirelessSsid_request::getRadiusServerTimeout() const {
    return m_radius_server_timeout;
}
void OAIUpdateNetworkWirelessSsid_request::setRadiusServerTimeout(const qint32 &radius_server_timeout) {
    m_radius_server_timeout = radius_server_timeout;
    m_radius_server_timeout_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_server_timeout_Set() const{
    return m_radius_server_timeout_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_server_timeout_Valid() const{
    return m_radius_server_timeout_isValid;
}

QList<OAIUpdateNetworkWirelessSsid_request_radiusServers_inner> OAIUpdateNetworkWirelessSsid_request::getRadiusServers() const {
    return m_radius_servers;
}
void OAIUpdateNetworkWirelessSsid_request::setRadiusServers(const QList<OAIUpdateNetworkWirelessSsid_request_radiusServers_inner> &radius_servers) {
    m_radius_servers = radius_servers;
    m_radius_servers_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_servers_Set() const{
    return m_radius_servers_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_servers_Valid() const{
    return m_radius_servers_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request::isRadiusTestingEnabled() const {
    return m_radius_testing_enabled;
}
void OAIUpdateNetworkWirelessSsid_request::setRadiusTestingEnabled(const bool &radius_testing_enabled) {
    m_radius_testing_enabled = radius_testing_enabled;
    m_radius_testing_enabled_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_testing_enabled_Set() const{
    return m_radius_testing_enabled_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_radius_testing_enabled_Valid() const{
    return m_radius_testing_enabled_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request::getSecondaryConcentratorNetworkId() const {
    return m_secondary_concentrator_network_id;
}
void OAIUpdateNetworkWirelessSsid_request::setSecondaryConcentratorNetworkId(const QString &secondary_concentrator_network_id) {
    m_secondary_concentrator_network_id = secondary_concentrator_network_id;
    m_secondary_concentrator_network_id_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_secondary_concentrator_network_id_Set() const{
    return m_secondary_concentrator_network_id_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_secondary_concentrator_network_id_Valid() const{
    return m_secondary_concentrator_network_id_isValid;
}

OAIUpdateNetworkWirelessSsid_request_speedBurst OAIUpdateNetworkWirelessSsid_request::getSpeedBurst() const {
    return m_speed_burst;
}
void OAIUpdateNetworkWirelessSsid_request::setSpeedBurst(const OAIUpdateNetworkWirelessSsid_request_speedBurst &speed_burst) {
    m_speed_burst = speed_burst;
    m_speed_burst_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_speed_burst_Set() const{
    return m_speed_burst_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_speed_burst_Valid() const{
    return m_speed_burst_isValid;
}

QList<QString> OAIUpdateNetworkWirelessSsid_request::getSplashGuestSponsorDomains() const {
    return m_splash_guest_sponsor_domains;
}
void OAIUpdateNetworkWirelessSsid_request::setSplashGuestSponsorDomains(const QList<QString> &splash_guest_sponsor_domains) {
    m_splash_guest_sponsor_domains = splash_guest_sponsor_domains;
    m_splash_guest_sponsor_domains_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_splash_guest_sponsor_domains_Set() const{
    return m_splash_guest_sponsor_domains_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_splash_guest_sponsor_domains_Valid() const{
    return m_splash_guest_sponsor_domains_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request::getSplashPage() const {
    return m_splash_page;
}
void OAIUpdateNetworkWirelessSsid_request::setSplashPage(const QString &splash_page) {
    m_splash_page = splash_page;
    m_splash_page_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_splash_page_Set() const{
    return m_splash_page_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_splash_page_Valid() const{
    return m_splash_page_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request::isUseVlanTagging() const {
    return m_use_vlan_tagging;
}
void OAIUpdateNetworkWirelessSsid_request::setUseVlanTagging(const bool &use_vlan_tagging) {
    m_use_vlan_tagging = use_vlan_tagging;
    m_use_vlan_tagging_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_use_vlan_tagging_Set() const{
    return m_use_vlan_tagging_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_use_vlan_tagging_Valid() const{
    return m_use_vlan_tagging_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request::isVisible() const {
    return m_visible;
}
void OAIUpdateNetworkWirelessSsid_request::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_visible_Valid() const{
    return m_visible_isValid;
}

qint32 OAIUpdateNetworkWirelessSsid_request::getVlanId() const {
    return m_vlan_id;
}
void OAIUpdateNetworkWirelessSsid_request::setVlanId(const qint32 &vlan_id) {
    m_vlan_id = vlan_id;
    m_vlan_id_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_vlan_id_Set() const{
    return m_vlan_id_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_vlan_id_Valid() const{
    return m_vlan_id_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request::isWalledGardenEnabled() const {
    return m_walled_garden_enabled;
}
void OAIUpdateNetworkWirelessSsid_request::setWalledGardenEnabled(const bool &walled_garden_enabled) {
    m_walled_garden_enabled = walled_garden_enabled;
    m_walled_garden_enabled_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_walled_garden_enabled_Set() const{
    return m_walled_garden_enabled_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_walled_garden_enabled_Valid() const{
    return m_walled_garden_enabled_isValid;
}

QList<QString> OAIUpdateNetworkWirelessSsid_request::getWalledGardenRanges() const {
    return m_walled_garden_ranges;
}
void OAIUpdateNetworkWirelessSsid_request::setWalledGardenRanges(const QList<QString> &walled_garden_ranges) {
    m_walled_garden_ranges = walled_garden_ranges;
    m_walled_garden_ranges_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_walled_garden_ranges_Set() const{
    return m_walled_garden_ranges_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_walled_garden_ranges_Valid() const{
    return m_walled_garden_ranges_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request::getWpaEncryptionMode() const {
    return m_wpa_encryption_mode;
}
void OAIUpdateNetworkWirelessSsid_request::setWpaEncryptionMode(const QString &wpa_encryption_mode) {
    m_wpa_encryption_mode = wpa_encryption_mode;
    m_wpa_encryption_mode_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request::is_wpa_encryption_mode_Set() const{
    return m_wpa_encryption_mode_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request::is_wpa_encryption_mode_Valid() const{
    return m_wpa_encryption_mode_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_directory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_adult_content_filtering_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ap_tags_and_vlan_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_on_all_aps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_band_selection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concentrator_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_vlan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disassociate_clients_on_vpn_failover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_rewrite.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dot11r.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dot11w.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enterprise_admin_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gre.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_assignment_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lan_isolation_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_radius.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_dhcp_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_client_bandwidth_limit_down_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_client_bandwidth_limit_up_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_ssid_bandwidth_limit_down_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_ssid_bandwidth_limit_up_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_accounting_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_accounting_interim_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_accounting_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_attribute_for_group_policies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_authentication_nas_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_called_station_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_coa_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_failover_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_fallback_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_guest_vlan_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_guest_vlan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_load_balancing_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_proxy_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_server_attempts_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_server_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_testing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_concentrator_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speed_burst.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_splash_guest_sponsor_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_splash_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_vlan_tagging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_walled_garden_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_walled_garden_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_wpa_encryption_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkWirelessSsid_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
