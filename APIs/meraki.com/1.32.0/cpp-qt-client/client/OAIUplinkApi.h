/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUplinkApi_H
#define OAI_OAIUplinkApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner.h"
#include "OAIObject.h"
#include "OAIUpdateNetworkCellularGatewayUplink_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUplinkApi : public QObject {
    Q_OBJECT

public:
    OAIUplinkApi(const int timeOut = 0);
    ~OAIUplinkApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkCellularGatewayUplink(const QString &network_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  iccids QList<QString> [optional]
    */
    virtual void getOrganizationCellularGatewayUplinkStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &iccids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_cellular_gateway_uplink_request OAIUpdateNetworkCellularGatewayUplink_request [optional]
    */
    virtual void updateNetworkCellularGatewayUplink(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkCellularGatewayUplink_request> &oai_update_network_cellular_gateway_uplink_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkCellularGatewayUplink_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getNetworkCellularGatewayUplinkCallback(OAIHttpRequestWorker *worker);
    void getOrganizationCellularGatewayUplinkStatusesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkCellularGatewayUplinkCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getNetworkCellularGatewayUplinkSignal(OAIObject summary);
    void getOrganizationCellularGatewayUplinkStatusesSignal(QList<OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner> summary);
    void updateNetworkCellularGatewayUplinkSignal(OAIObject summary);


    void getNetworkCellularGatewayUplinkSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationCellularGatewayUplinkStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner> summary);
    void updateNetworkCellularGatewayUplinkSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use getNetworkCellularGatewayUplinkSignalError() instead")
    void getNetworkCellularGatewayUplinkSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCellularGatewayUplinkSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCellularGatewayUplinkStatusesSignalError() instead")
    void getOrganizationCellularGatewayUplinkStatusesSignalE(QList<OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCellularGatewayUplinkStatusesSignalError(QList<OAIGetOrganizationCellularGatewayUplinkStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCellularGatewayUplinkSignalError() instead")
    void updateNetworkCellularGatewayUplinkSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCellularGatewayUplinkSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getNetworkCellularGatewayUplinkSignalErrorFull() instead")
    void getNetworkCellularGatewayUplinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCellularGatewayUplinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationCellularGatewayUplinkStatusesSignalErrorFull() instead")
    void getOrganizationCellularGatewayUplinkStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationCellularGatewayUplinkStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCellularGatewayUplinkSignalErrorFull() instead")
    void updateNetworkCellularGatewayUplinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCellularGatewayUplinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
