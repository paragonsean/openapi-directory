/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMqttBrokersApi_H
#define OAI_OAIMqttBrokersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkMqttBroker_request.h"
#include "OAIObject.h"
#include "OAIUpdateNetworkMqttBroker_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMqttBrokersApi : public QObject {
    Q_OBJECT

public:
    OAIMqttBrokersApi(const int timeOut = 0);
    ~OAIMqttBrokersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_mqtt_broker_request OAICreateNetworkMqttBroker_request [required]
    */
    virtual void createNetworkMqttBroker(const QString &network_id, const OAICreateNetworkMqttBroker_request &oai_create_network_mqtt_broker_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  mqtt_broker_id QString [required]
    */
    virtual void deleteNetworkMqttBroker(const QString &network_id, const QString &mqtt_broker_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  mqtt_broker_id QString [required]
    */
    virtual void getNetworkMqttBroker(const QString &network_id, const QString &mqtt_broker_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkMqttBrokers(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  mqtt_broker_id QString [required]
    * @param[in]  oai_update_network_mqtt_broker_request OAIUpdateNetworkMqttBroker_request [optional]
    */
    virtual void updateNetworkMqttBroker(const QString &network_id, const QString &mqtt_broker_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkMqttBroker_request> &oai_update_network_mqtt_broker_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkMqttBroker_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkMqttBrokerCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkMqttBrokerCallback(OAIHttpRequestWorker *worker);
    void getNetworkMqttBrokerCallback(OAIHttpRequestWorker *worker);
    void getNetworkMqttBrokersCallback(OAIHttpRequestWorker *worker);
    void updateNetworkMqttBrokerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkMqttBrokerSignal(OAIObject summary);
    void deleteNetworkMqttBrokerSignal();
    void getNetworkMqttBrokerSignal(OAIObject summary);
    void getNetworkMqttBrokersSignal(QList<OAIObject> summary);
    void updateNetworkMqttBrokerSignal(OAIObject summary);


    void createNetworkMqttBrokerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteNetworkMqttBrokerSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkMqttBrokerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkMqttBrokersSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void updateNetworkMqttBrokerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createNetworkMqttBrokerSignalError() instead")
    void createNetworkMqttBrokerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkMqttBrokerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkMqttBrokerSignalError() instead")
    void deleteNetworkMqttBrokerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkMqttBrokerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMqttBrokerSignalError() instead")
    void getNetworkMqttBrokerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMqttBrokerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMqttBrokersSignalError() instead")
    void getNetworkMqttBrokersSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMqttBrokersSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkMqttBrokerSignalError() instead")
    void updateNetworkMqttBrokerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkMqttBrokerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkMqttBrokerSignalErrorFull() instead")
    void createNetworkMqttBrokerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkMqttBrokerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkMqttBrokerSignalErrorFull() instead")
    void deleteNetworkMqttBrokerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkMqttBrokerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMqttBrokerSignalErrorFull() instead")
    void getNetworkMqttBrokerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMqttBrokerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkMqttBrokersSignalErrorFull() instead")
    void getNetworkMqttBrokersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkMqttBrokersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkMqttBrokerSignalErrorFull() instead")
    void updateNetworkMqttBrokerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkMqttBrokerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
