/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetNetworkSmDeviceSoftwares_200_response_inner.h
 *
 * 
 */

#ifndef OAIGetNetworkSmDeviceSoftwares_200_response_inner_H
#define OAIGetNetworkSmDeviceSoftwares_200_response_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetNetworkSmDeviceSoftwares_200_response_inner : public OAIObject {
public:
    OAIGetNetworkSmDeviceSoftwares_200_response_inner();
    OAIGetNetworkSmDeviceSoftwares_200_response_inner(QString json);
    ~OAIGetNetworkSmDeviceSoftwares_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAppId() const;
    void setAppId(const QString &app_id);
    bool is_app_id_Set() const;
    bool is_app_id_Valid() const;

    qint32 getBundleSize() const;
    void setBundleSize(const qint32 &bundle_size);
    bool is_bundle_size_Set() const;
    bool is_bundle_size_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDeviceId() const;
    void setDeviceId(const QString &device_id);
    bool is_device_id_Set() const;
    bool is_device_id_Valid() const;

    qint32 getDynamicSize() const;
    void setDynamicSize(const qint32 &dynamic_size);
    bool is_dynamic_size_Set() const;
    bool is_dynamic_size_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getIdentifier() const;
    void setIdentifier(const QString &identifier);
    bool is_identifier_Set() const;
    bool is_identifier_Valid() const;

    QString getInstalledAt() const;
    void setInstalledAt(const QString &installed_at);
    bool is_installed_at_Set() const;
    bool is_installed_at_Valid() const;

    bool isIosRedemptionCode() const;
    void setIosRedemptionCode(const bool &ios_redemption_code);
    bool is_ios_redemption_code_Set() const;
    bool is_ios_redemption_code_Valid() const;

    bool isIsManaged() const;
    void setIsManaged(const bool &is_managed);
    bool is_is_managed_Set() const;
    bool is_is_managed_Valid() const;

    QString getItunesId() const;
    void setItunesId(const QString &itunes_id);
    bool is_itunes_id_Set() const;
    bool is_itunes_id_Valid() const;

    QString getLicenseKey() const;
    void setLicenseKey(const QString &license_key);
    bool is_license_key_Set() const;
    bool is_license_key_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    qint32 getRedemptionCode() const;
    void setRedemptionCode(const qint32 &redemption_code);
    bool is_redemption_code_Set() const;
    bool is_redemption_code_Valid() const;

    QString getShortVersion() const;
    void setShortVersion(const QString &short_version);
    bool is_short_version_Set() const;
    bool is_short_version_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    bool isToInstall() const;
    void setToInstall(const bool &to_install);
    bool is_to_install_Set() const;
    bool is_to_install_Valid() const;

    bool isToUninstall() const;
    void setToUninstall(const bool &to_uninstall);
    bool is_to_uninstall_Set() const;
    bool is_to_uninstall_Valid() const;

    QString getUninstalledAt() const;
    void setUninstalledAt(const QString &uninstalled_at);
    bool is_uninstalled_at_Set() const;
    bool is_uninstalled_at_Valid() const;

    QString getUpdatedAt() const;
    void setUpdatedAt(const QString &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getVendor() const;
    void setVendor(const QString &vendor);
    bool is_vendor_Set() const;
    bool is_vendor_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_app_id;
    bool m_app_id_isSet;
    bool m_app_id_isValid;

    qint32 m_bundle_size;
    bool m_bundle_size_isSet;
    bool m_bundle_size_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_device_id;
    bool m_device_id_isSet;
    bool m_device_id_isValid;

    qint32 m_dynamic_size;
    bool m_dynamic_size_isSet;
    bool m_dynamic_size_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_identifier;
    bool m_identifier_isSet;
    bool m_identifier_isValid;

    QString m_installed_at;
    bool m_installed_at_isSet;
    bool m_installed_at_isValid;

    bool m_ios_redemption_code;
    bool m_ios_redemption_code_isSet;
    bool m_ios_redemption_code_isValid;

    bool m_is_managed;
    bool m_is_managed_isSet;
    bool m_is_managed_isValid;

    QString m_itunes_id;
    bool m_itunes_id_isSet;
    bool m_itunes_id_isValid;

    QString m_license_key;
    bool m_license_key_isSet;
    bool m_license_key_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    qint32 m_redemption_code;
    bool m_redemption_code_isSet;
    bool m_redemption_code_isValid;

    QString m_short_version;
    bool m_short_version_isSet;
    bool m_short_version_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    bool m_to_install;
    bool m_to_install_isSet;
    bool m_to_install_isValid;

    bool m_to_uninstall;
    bool m_to_uninstall_isSet;
    bool m_to_uninstall_isValid;

    QString m_uninstalled_at;
    bool m_uninstalled_at_isSet;
    bool m_uninstalled_at_isValid;

    QString m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_vendor;
    bool m_vendor_isSet;
    bool m_vendor_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetNetworkSmDeviceSoftwares_200_response_inner)

#endif // OAIGetNetworkSmDeviceSoftwares_200_response_inner_H
