/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkSwitchAccessPolicy_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkSwitchAccessPolicy_request::OAIUpdateNetworkSwitchAccessPolicy_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkSwitchAccessPolicy_request::OAIUpdateNetworkSwitchAccessPolicy_request() {
    this->initializeModel();
}

OAIUpdateNetworkSwitchAccessPolicy_request::~OAIUpdateNetworkSwitchAccessPolicy_request() {}

void OAIUpdateNetworkSwitchAccessPolicy_request::initializeModel() {

    m_access_policy_type_isSet = false;
    m_access_policy_type_isValid = false;

    m_dot1x_isSet = false;
    m_dot1x_isValid = false;

    m_guest_port_bouncing_isSet = false;
    m_guest_port_bouncing_isValid = false;

    m_guest_vlan_id_isSet = false;
    m_guest_vlan_id_isValid = false;

    m_host_mode_isSet = false;
    m_host_mode_isValid = false;

    m_increase_access_speed_isSet = false;
    m_increase_access_speed_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_radius_isSet = false;
    m_radius_isValid = false;

    m_radius_accounting_enabled_isSet = false;
    m_radius_accounting_enabled_isValid = false;

    m_radius_accounting_servers_isSet = false;
    m_radius_accounting_servers_isValid = false;

    m_radius_coa_support_enabled_isSet = false;
    m_radius_coa_support_enabled_isValid = false;

    m_radius_group_attribute_isSet = false;
    m_radius_group_attribute_isValid = false;

    m_radius_servers_isSet = false;
    m_radius_servers_isValid = false;

    m_radius_testing_enabled_isSet = false;
    m_radius_testing_enabled_isValid = false;

    m_url_redirect_walled_garden_enabled_isSet = false;
    m_url_redirect_walled_garden_enabled_isValid = false;

    m_url_redirect_walled_garden_ranges_isSet = false;
    m_url_redirect_walled_garden_ranges_isValid = false;

    m_voice_vlan_clients_isSet = false;
    m_voice_vlan_clients_isValid = false;
}

void OAIUpdateNetworkSwitchAccessPolicy_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkSwitchAccessPolicy_request::fromJsonObject(QJsonObject json) {

    m_access_policy_type_isValid = ::OpenAPI::fromJsonValue(m_access_policy_type, json[QString("accessPolicyType")]);
    m_access_policy_type_isSet = !json[QString("accessPolicyType")].isNull() && m_access_policy_type_isValid;

    m_dot1x_isValid = ::OpenAPI::fromJsonValue(m_dot1x, json[QString("dot1x")]);
    m_dot1x_isSet = !json[QString("dot1x")].isNull() && m_dot1x_isValid;

    m_guest_port_bouncing_isValid = ::OpenAPI::fromJsonValue(m_guest_port_bouncing, json[QString("guestPortBouncing")]);
    m_guest_port_bouncing_isSet = !json[QString("guestPortBouncing")].isNull() && m_guest_port_bouncing_isValid;

    m_guest_vlan_id_isValid = ::OpenAPI::fromJsonValue(m_guest_vlan_id, json[QString("guestVlanId")]);
    m_guest_vlan_id_isSet = !json[QString("guestVlanId")].isNull() && m_guest_vlan_id_isValid;

    m_host_mode_isValid = ::OpenAPI::fromJsonValue(m_host_mode, json[QString("hostMode")]);
    m_host_mode_isSet = !json[QString("hostMode")].isNull() && m_host_mode_isValid;

    m_increase_access_speed_isValid = ::OpenAPI::fromJsonValue(m_increase_access_speed, json[QString("increaseAccessSpeed")]);
    m_increase_access_speed_isSet = !json[QString("increaseAccessSpeed")].isNull() && m_increase_access_speed_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_radius_isValid = ::OpenAPI::fromJsonValue(m_radius, json[QString("radius")]);
    m_radius_isSet = !json[QString("radius")].isNull() && m_radius_isValid;

    m_radius_accounting_enabled_isValid = ::OpenAPI::fromJsonValue(m_radius_accounting_enabled, json[QString("radiusAccountingEnabled")]);
    m_radius_accounting_enabled_isSet = !json[QString("radiusAccountingEnabled")].isNull() && m_radius_accounting_enabled_isValid;

    m_radius_accounting_servers_isValid = ::OpenAPI::fromJsonValue(m_radius_accounting_servers, json[QString("radiusAccountingServers")]);
    m_radius_accounting_servers_isSet = !json[QString("radiusAccountingServers")].isNull() && m_radius_accounting_servers_isValid;

    m_radius_coa_support_enabled_isValid = ::OpenAPI::fromJsonValue(m_radius_coa_support_enabled, json[QString("radiusCoaSupportEnabled")]);
    m_radius_coa_support_enabled_isSet = !json[QString("radiusCoaSupportEnabled")].isNull() && m_radius_coa_support_enabled_isValid;

    m_radius_group_attribute_isValid = ::OpenAPI::fromJsonValue(m_radius_group_attribute, json[QString("radiusGroupAttribute")]);
    m_radius_group_attribute_isSet = !json[QString("radiusGroupAttribute")].isNull() && m_radius_group_attribute_isValid;

    m_radius_servers_isValid = ::OpenAPI::fromJsonValue(m_radius_servers, json[QString("radiusServers")]);
    m_radius_servers_isSet = !json[QString("radiusServers")].isNull() && m_radius_servers_isValid;

    m_radius_testing_enabled_isValid = ::OpenAPI::fromJsonValue(m_radius_testing_enabled, json[QString("radiusTestingEnabled")]);
    m_radius_testing_enabled_isSet = !json[QString("radiusTestingEnabled")].isNull() && m_radius_testing_enabled_isValid;

    m_url_redirect_walled_garden_enabled_isValid = ::OpenAPI::fromJsonValue(m_url_redirect_walled_garden_enabled, json[QString("urlRedirectWalledGardenEnabled")]);
    m_url_redirect_walled_garden_enabled_isSet = !json[QString("urlRedirectWalledGardenEnabled")].isNull() && m_url_redirect_walled_garden_enabled_isValid;

    m_url_redirect_walled_garden_ranges_isValid = ::OpenAPI::fromJsonValue(m_url_redirect_walled_garden_ranges, json[QString("urlRedirectWalledGardenRanges")]);
    m_url_redirect_walled_garden_ranges_isSet = !json[QString("urlRedirectWalledGardenRanges")].isNull() && m_url_redirect_walled_garden_ranges_isValid;

    m_voice_vlan_clients_isValid = ::OpenAPI::fromJsonValue(m_voice_vlan_clients, json[QString("voiceVlanClients")]);
    m_voice_vlan_clients_isSet = !json[QString("voiceVlanClients")].isNull() && m_voice_vlan_clients_isValid;
}

QString OAIUpdateNetworkSwitchAccessPolicy_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkSwitchAccessPolicy_request::asJsonObject() const {
    QJsonObject obj;
    if (m_access_policy_type_isSet) {
        obj.insert(QString("accessPolicyType"), ::OpenAPI::toJsonValue(m_access_policy_type));
    }
    if (m_dot1x.isSet()) {
        obj.insert(QString("dot1x"), ::OpenAPI::toJsonValue(m_dot1x));
    }
    if (m_guest_port_bouncing_isSet) {
        obj.insert(QString("guestPortBouncing"), ::OpenAPI::toJsonValue(m_guest_port_bouncing));
    }
    if (m_guest_vlan_id_isSet) {
        obj.insert(QString("guestVlanId"), ::OpenAPI::toJsonValue(m_guest_vlan_id));
    }
    if (m_host_mode_isSet) {
        obj.insert(QString("hostMode"), ::OpenAPI::toJsonValue(m_host_mode));
    }
    if (m_increase_access_speed_isSet) {
        obj.insert(QString("increaseAccessSpeed"), ::OpenAPI::toJsonValue(m_increase_access_speed));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_radius.isSet()) {
        obj.insert(QString("radius"), ::OpenAPI::toJsonValue(m_radius));
    }
    if (m_radius_accounting_enabled_isSet) {
        obj.insert(QString("radiusAccountingEnabled"), ::OpenAPI::toJsonValue(m_radius_accounting_enabled));
    }
    if (m_radius_accounting_servers.size() > 0) {
        obj.insert(QString("radiusAccountingServers"), ::OpenAPI::toJsonValue(m_radius_accounting_servers));
    }
    if (m_radius_coa_support_enabled_isSet) {
        obj.insert(QString("radiusCoaSupportEnabled"), ::OpenAPI::toJsonValue(m_radius_coa_support_enabled));
    }
    if (m_radius_group_attribute_isSet) {
        obj.insert(QString("radiusGroupAttribute"), ::OpenAPI::toJsonValue(m_radius_group_attribute));
    }
    if (m_radius_servers.size() > 0) {
        obj.insert(QString("radiusServers"), ::OpenAPI::toJsonValue(m_radius_servers));
    }
    if (m_radius_testing_enabled_isSet) {
        obj.insert(QString("radiusTestingEnabled"), ::OpenAPI::toJsonValue(m_radius_testing_enabled));
    }
    if (m_url_redirect_walled_garden_enabled_isSet) {
        obj.insert(QString("urlRedirectWalledGardenEnabled"), ::OpenAPI::toJsonValue(m_url_redirect_walled_garden_enabled));
    }
    if (m_url_redirect_walled_garden_ranges.size() > 0) {
        obj.insert(QString("urlRedirectWalledGardenRanges"), ::OpenAPI::toJsonValue(m_url_redirect_walled_garden_ranges));
    }
    if (m_voice_vlan_clients_isSet) {
        obj.insert(QString("voiceVlanClients"), ::OpenAPI::toJsonValue(m_voice_vlan_clients));
    }
    return obj;
}

QString OAIUpdateNetworkSwitchAccessPolicy_request::getAccessPolicyType() const {
    return m_access_policy_type;
}
void OAIUpdateNetworkSwitchAccessPolicy_request::setAccessPolicyType(const QString &access_policy_type) {
    m_access_policy_type = access_policy_type;
    m_access_policy_type_isSet = true;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_access_policy_type_Set() const{
    return m_access_policy_type_isSet;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_access_policy_type_Valid() const{
    return m_access_policy_type_isValid;
}

OAIGetNetworkSwitchAccessPolicies_200_response_inner_dot1x OAIUpdateNetworkSwitchAccessPolicy_request::getDot1x() const {
    return m_dot1x;
}
void OAIUpdateNetworkSwitchAccessPolicy_request::setDot1x(const OAIGetNetworkSwitchAccessPolicies_200_response_inner_dot1x &dot1x) {
    m_dot1x = dot1x;
    m_dot1x_isSet = true;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_dot1x_Set() const{
    return m_dot1x_isSet;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_dot1x_Valid() const{
    return m_dot1x_isValid;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::isGuestPortBouncing() const {
    return m_guest_port_bouncing;
}
void OAIUpdateNetworkSwitchAccessPolicy_request::setGuestPortBouncing(const bool &guest_port_bouncing) {
    m_guest_port_bouncing = guest_port_bouncing;
    m_guest_port_bouncing_isSet = true;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_guest_port_bouncing_Set() const{
    return m_guest_port_bouncing_isSet;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_guest_port_bouncing_Valid() const{
    return m_guest_port_bouncing_isValid;
}

qint32 OAIUpdateNetworkSwitchAccessPolicy_request::getGuestVlanId() const {
    return m_guest_vlan_id;
}
void OAIUpdateNetworkSwitchAccessPolicy_request::setGuestVlanId(const qint32 &guest_vlan_id) {
    m_guest_vlan_id = guest_vlan_id;
    m_guest_vlan_id_isSet = true;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_guest_vlan_id_Set() const{
    return m_guest_vlan_id_isSet;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_guest_vlan_id_Valid() const{
    return m_guest_vlan_id_isValid;
}

QString OAIUpdateNetworkSwitchAccessPolicy_request::getHostMode() const {
    return m_host_mode;
}
void OAIUpdateNetworkSwitchAccessPolicy_request::setHostMode(const QString &host_mode) {
    m_host_mode = host_mode;
    m_host_mode_isSet = true;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_host_mode_Set() const{
    return m_host_mode_isSet;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_host_mode_Valid() const{
    return m_host_mode_isValid;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::isIncreaseAccessSpeed() const {
    return m_increase_access_speed;
}
void OAIUpdateNetworkSwitchAccessPolicy_request::setIncreaseAccessSpeed(const bool &increase_access_speed) {
    m_increase_access_speed = increase_access_speed;
    m_increase_access_speed_isSet = true;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_increase_access_speed_Set() const{
    return m_increase_access_speed_isSet;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_increase_access_speed_Valid() const{
    return m_increase_access_speed_isValid;
}

QString OAIUpdateNetworkSwitchAccessPolicy_request::getName() const {
    return m_name;
}
void OAIUpdateNetworkSwitchAccessPolicy_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_name_Valid() const{
    return m_name_isValid;
}

OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius OAIUpdateNetworkSwitchAccessPolicy_request::getRadius() const {
    return m_radius;
}
void OAIUpdateNetworkSwitchAccessPolicy_request::setRadius(const OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius &radius) {
    m_radius = radius;
    m_radius_isSet = true;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_radius_Set() const{
    return m_radius_isSet;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_radius_Valid() const{
    return m_radius_isValid;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::isRadiusAccountingEnabled() const {
    return m_radius_accounting_enabled;
}
void OAIUpdateNetworkSwitchAccessPolicy_request::setRadiusAccountingEnabled(const bool &radius_accounting_enabled) {
    m_radius_accounting_enabled = radius_accounting_enabled;
    m_radius_accounting_enabled_isSet = true;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_radius_accounting_enabled_Set() const{
    return m_radius_accounting_enabled_isSet;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_radius_accounting_enabled_Valid() const{
    return m_radius_accounting_enabled_isValid;
}

QList<OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner> OAIUpdateNetworkSwitchAccessPolicy_request::getRadiusAccountingServers() const {
    return m_radius_accounting_servers;
}
void OAIUpdateNetworkSwitchAccessPolicy_request::setRadiusAccountingServers(const QList<OAICreateNetworkSwitchAccessPolicy_request_radiusAccountingServers_inner> &radius_accounting_servers) {
    m_radius_accounting_servers = radius_accounting_servers;
    m_radius_accounting_servers_isSet = true;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_radius_accounting_servers_Set() const{
    return m_radius_accounting_servers_isSet;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_radius_accounting_servers_Valid() const{
    return m_radius_accounting_servers_isValid;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::isRadiusCoaSupportEnabled() const {
    return m_radius_coa_support_enabled;
}
void OAIUpdateNetworkSwitchAccessPolicy_request::setRadiusCoaSupportEnabled(const bool &radius_coa_support_enabled) {
    m_radius_coa_support_enabled = radius_coa_support_enabled;
    m_radius_coa_support_enabled_isSet = true;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_radius_coa_support_enabled_Set() const{
    return m_radius_coa_support_enabled_isSet;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_radius_coa_support_enabled_Valid() const{
    return m_radius_coa_support_enabled_isValid;
}

QString OAIUpdateNetworkSwitchAccessPolicy_request::getRadiusGroupAttribute() const {
    return m_radius_group_attribute;
}
void OAIUpdateNetworkSwitchAccessPolicy_request::setRadiusGroupAttribute(const QString &radius_group_attribute) {
    m_radius_group_attribute = radius_group_attribute;
    m_radius_group_attribute_isSet = true;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_radius_group_attribute_Set() const{
    return m_radius_group_attribute_isSet;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_radius_group_attribute_Valid() const{
    return m_radius_group_attribute_isValid;
}

QList<OAICreateNetworkSwitchAccessPolicy_request_radiusServers_inner> OAIUpdateNetworkSwitchAccessPolicy_request::getRadiusServers() const {
    return m_radius_servers;
}
void OAIUpdateNetworkSwitchAccessPolicy_request::setRadiusServers(const QList<OAICreateNetworkSwitchAccessPolicy_request_radiusServers_inner> &radius_servers) {
    m_radius_servers = radius_servers;
    m_radius_servers_isSet = true;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_radius_servers_Set() const{
    return m_radius_servers_isSet;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_radius_servers_Valid() const{
    return m_radius_servers_isValid;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::isRadiusTestingEnabled() const {
    return m_radius_testing_enabled;
}
void OAIUpdateNetworkSwitchAccessPolicy_request::setRadiusTestingEnabled(const bool &radius_testing_enabled) {
    m_radius_testing_enabled = radius_testing_enabled;
    m_radius_testing_enabled_isSet = true;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_radius_testing_enabled_Set() const{
    return m_radius_testing_enabled_isSet;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_radius_testing_enabled_Valid() const{
    return m_radius_testing_enabled_isValid;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::isUrlRedirectWalledGardenEnabled() const {
    return m_url_redirect_walled_garden_enabled;
}
void OAIUpdateNetworkSwitchAccessPolicy_request::setUrlRedirectWalledGardenEnabled(const bool &url_redirect_walled_garden_enabled) {
    m_url_redirect_walled_garden_enabled = url_redirect_walled_garden_enabled;
    m_url_redirect_walled_garden_enabled_isSet = true;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_url_redirect_walled_garden_enabled_Set() const{
    return m_url_redirect_walled_garden_enabled_isSet;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_url_redirect_walled_garden_enabled_Valid() const{
    return m_url_redirect_walled_garden_enabled_isValid;
}

QList<QString> OAIUpdateNetworkSwitchAccessPolicy_request::getUrlRedirectWalledGardenRanges() const {
    return m_url_redirect_walled_garden_ranges;
}
void OAIUpdateNetworkSwitchAccessPolicy_request::setUrlRedirectWalledGardenRanges(const QList<QString> &url_redirect_walled_garden_ranges) {
    m_url_redirect_walled_garden_ranges = url_redirect_walled_garden_ranges;
    m_url_redirect_walled_garden_ranges_isSet = true;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_url_redirect_walled_garden_ranges_Set() const{
    return m_url_redirect_walled_garden_ranges_isSet;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_url_redirect_walled_garden_ranges_Valid() const{
    return m_url_redirect_walled_garden_ranges_isValid;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::isVoiceVlanClients() const {
    return m_voice_vlan_clients;
}
void OAIUpdateNetworkSwitchAccessPolicy_request::setVoiceVlanClients(const bool &voice_vlan_clients) {
    m_voice_vlan_clients = voice_vlan_clients;
    m_voice_vlan_clients_isSet = true;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_voice_vlan_clients_Set() const{
    return m_voice_vlan_clients_isSet;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::is_voice_vlan_clients_Valid() const{
    return m_voice_vlan_clients_isValid;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_policy_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dot1x.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_port_bouncing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_vlan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_increase_access_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_accounting_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_accounting_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_coa_support_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_group_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_testing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_redirect_walled_garden_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_redirect_walled_garden_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_vlan_clients_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkSwitchAccessPolicy_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
