/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings::OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings::OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings() {
    this->initializeModel();
}

OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings::~OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings() {}

void OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings::initializeModel() {

    m_applies_to_isSet = false;
    m_applies_to_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings::fromJsonObject(QJsonObject json) {

    m_applies_to_isValid = ::OpenAPI::fromJsonValue(m_applies_to, json[QString("appliesTo")]);
    m_applies_to_isSet = !json[QString("appliesTo")].isNull() && m_applies_to_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_applies_to_isSet) {
        obj.insert(QString("appliesTo"), ::OpenAPI::toJsonValue(m_applies_to));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings::getAppliesTo() const {
    return m_applies_to;
}
void OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings::setAppliesTo(const QString &applies_to) {
    m_applies_to = applies_to;
    m_applies_to_isSet = true;
}

bool OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings::is_applies_to_Set() const{
    return m_applies_to_isSet;
}

bool OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings::is_applies_to_Valid() const{
    return m_applies_to_isValid;
}

QList<QString> OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings::getValues() const {
    return m_values;
}
void OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings::is_values_Set() const{
    return m_values_isSet;
}

bool OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applies_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationBrandingPolicies_200_response_inner_adminSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
