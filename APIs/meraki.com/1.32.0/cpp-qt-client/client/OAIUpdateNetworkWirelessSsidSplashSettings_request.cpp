/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkWirelessSsidSplashSettings_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkWirelessSsidSplashSettings_request::OAIUpdateNetworkWirelessSsidSplashSettings_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkWirelessSsidSplashSettings_request::OAIUpdateNetworkWirelessSsidSplashSettings_request() {
    this->initializeModel();
}

OAIUpdateNetworkWirelessSsidSplashSettings_request::~OAIUpdateNetworkWirelessSsidSplashSettings_request() {}

void OAIUpdateNetworkWirelessSsidSplashSettings_request::initializeModel() {

    m_allow_simultaneous_logins_isSet = false;
    m_allow_simultaneous_logins_isValid = false;

    m_billing_isSet = false;
    m_billing_isValid = false;

    m_block_all_traffic_before_sign_on_isSet = false;
    m_block_all_traffic_before_sign_on_isValid = false;

    m_controller_disconnection_behavior_isSet = false;
    m_controller_disconnection_behavior_isValid = false;

    m_guest_sponsorship_isSet = false;
    m_guest_sponsorship_isValid = false;

    m_redirect_url_isSet = false;
    m_redirect_url_isValid = false;

    m_sentry_enrollment_isSet = false;
    m_sentry_enrollment_isValid = false;

    m_splash_image_isSet = false;
    m_splash_image_isValid = false;

    m_splash_logo_isSet = false;
    m_splash_logo_isValid = false;

    m_splash_prepaid_front_isSet = false;
    m_splash_prepaid_front_isValid = false;

    m_splash_timeout_isSet = false;
    m_splash_timeout_isValid = false;

    m_splash_url_isSet = false;
    m_splash_url_isValid = false;

    m_use_redirect_url_isSet = false;
    m_use_redirect_url_isValid = false;

    m_use_splash_url_isSet = false;
    m_use_splash_url_isValid = false;

    m_welcome_message_isSet = false;
    m_welcome_message_isValid = false;
}

void OAIUpdateNetworkWirelessSsidSplashSettings_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkWirelessSsidSplashSettings_request::fromJsonObject(QJsonObject json) {

    m_allow_simultaneous_logins_isValid = ::OpenAPI::fromJsonValue(m_allow_simultaneous_logins, json[QString("allowSimultaneousLogins")]);
    m_allow_simultaneous_logins_isSet = !json[QString("allowSimultaneousLogins")].isNull() && m_allow_simultaneous_logins_isValid;

    m_billing_isValid = ::OpenAPI::fromJsonValue(m_billing, json[QString("billing")]);
    m_billing_isSet = !json[QString("billing")].isNull() && m_billing_isValid;

    m_block_all_traffic_before_sign_on_isValid = ::OpenAPI::fromJsonValue(m_block_all_traffic_before_sign_on, json[QString("blockAllTrafficBeforeSignOn")]);
    m_block_all_traffic_before_sign_on_isSet = !json[QString("blockAllTrafficBeforeSignOn")].isNull() && m_block_all_traffic_before_sign_on_isValid;

    m_controller_disconnection_behavior_isValid = ::OpenAPI::fromJsonValue(m_controller_disconnection_behavior, json[QString("controllerDisconnectionBehavior")]);
    m_controller_disconnection_behavior_isSet = !json[QString("controllerDisconnectionBehavior")].isNull() && m_controller_disconnection_behavior_isValid;

    m_guest_sponsorship_isValid = ::OpenAPI::fromJsonValue(m_guest_sponsorship, json[QString("guestSponsorship")]);
    m_guest_sponsorship_isSet = !json[QString("guestSponsorship")].isNull() && m_guest_sponsorship_isValid;

    m_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_redirect_url, json[QString("redirectUrl")]);
    m_redirect_url_isSet = !json[QString("redirectUrl")].isNull() && m_redirect_url_isValid;

    m_sentry_enrollment_isValid = ::OpenAPI::fromJsonValue(m_sentry_enrollment, json[QString("sentryEnrollment")]);
    m_sentry_enrollment_isSet = !json[QString("sentryEnrollment")].isNull() && m_sentry_enrollment_isValid;

    m_splash_image_isValid = ::OpenAPI::fromJsonValue(m_splash_image, json[QString("splashImage")]);
    m_splash_image_isSet = !json[QString("splashImage")].isNull() && m_splash_image_isValid;

    m_splash_logo_isValid = ::OpenAPI::fromJsonValue(m_splash_logo, json[QString("splashLogo")]);
    m_splash_logo_isSet = !json[QString("splashLogo")].isNull() && m_splash_logo_isValid;

    m_splash_prepaid_front_isValid = ::OpenAPI::fromJsonValue(m_splash_prepaid_front, json[QString("splashPrepaidFront")]);
    m_splash_prepaid_front_isSet = !json[QString("splashPrepaidFront")].isNull() && m_splash_prepaid_front_isValid;

    m_splash_timeout_isValid = ::OpenAPI::fromJsonValue(m_splash_timeout, json[QString("splashTimeout")]);
    m_splash_timeout_isSet = !json[QString("splashTimeout")].isNull() && m_splash_timeout_isValid;

    m_splash_url_isValid = ::OpenAPI::fromJsonValue(m_splash_url, json[QString("splashUrl")]);
    m_splash_url_isSet = !json[QString("splashUrl")].isNull() && m_splash_url_isValid;

    m_use_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_use_redirect_url, json[QString("useRedirectUrl")]);
    m_use_redirect_url_isSet = !json[QString("useRedirectUrl")].isNull() && m_use_redirect_url_isValid;

    m_use_splash_url_isValid = ::OpenAPI::fromJsonValue(m_use_splash_url, json[QString("useSplashUrl")]);
    m_use_splash_url_isSet = !json[QString("useSplashUrl")].isNull() && m_use_splash_url_isValid;

    m_welcome_message_isValid = ::OpenAPI::fromJsonValue(m_welcome_message, json[QString("welcomeMessage")]);
    m_welcome_message_isSet = !json[QString("welcomeMessage")].isNull() && m_welcome_message_isValid;
}

QString OAIUpdateNetworkWirelessSsidSplashSettings_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkWirelessSsidSplashSettings_request::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_simultaneous_logins_isSet) {
        obj.insert(QString("allowSimultaneousLogins"), ::OpenAPI::toJsonValue(m_allow_simultaneous_logins));
    }
    if (m_billing.isSet()) {
        obj.insert(QString("billing"), ::OpenAPI::toJsonValue(m_billing));
    }
    if (m_block_all_traffic_before_sign_on_isSet) {
        obj.insert(QString("blockAllTrafficBeforeSignOn"), ::OpenAPI::toJsonValue(m_block_all_traffic_before_sign_on));
    }
    if (m_controller_disconnection_behavior_isSet) {
        obj.insert(QString("controllerDisconnectionBehavior"), ::OpenAPI::toJsonValue(m_controller_disconnection_behavior));
    }
    if (m_guest_sponsorship.isSet()) {
        obj.insert(QString("guestSponsorship"), ::OpenAPI::toJsonValue(m_guest_sponsorship));
    }
    if (m_redirect_url_isSet) {
        obj.insert(QString("redirectUrl"), ::OpenAPI::toJsonValue(m_redirect_url));
    }
    if (m_sentry_enrollment.isSet()) {
        obj.insert(QString("sentryEnrollment"), ::OpenAPI::toJsonValue(m_sentry_enrollment));
    }
    if (m_splash_image.isSet()) {
        obj.insert(QString("splashImage"), ::OpenAPI::toJsonValue(m_splash_image));
    }
    if (m_splash_logo.isSet()) {
        obj.insert(QString("splashLogo"), ::OpenAPI::toJsonValue(m_splash_logo));
    }
    if (m_splash_prepaid_front.isSet()) {
        obj.insert(QString("splashPrepaidFront"), ::OpenAPI::toJsonValue(m_splash_prepaid_front));
    }
    if (m_splash_timeout_isSet) {
        obj.insert(QString("splashTimeout"), ::OpenAPI::toJsonValue(m_splash_timeout));
    }
    if (m_splash_url_isSet) {
        obj.insert(QString("splashUrl"), ::OpenAPI::toJsonValue(m_splash_url));
    }
    if (m_use_redirect_url_isSet) {
        obj.insert(QString("useRedirectUrl"), ::OpenAPI::toJsonValue(m_use_redirect_url));
    }
    if (m_use_splash_url_isSet) {
        obj.insert(QString("useSplashUrl"), ::OpenAPI::toJsonValue(m_use_splash_url));
    }
    if (m_welcome_message_isSet) {
        obj.insert(QString("welcomeMessage"), ::OpenAPI::toJsonValue(m_welcome_message));
    }
    return obj;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::isAllowSimultaneousLogins() const {
    return m_allow_simultaneous_logins;
}
void OAIUpdateNetworkWirelessSsidSplashSettings_request::setAllowSimultaneousLogins(const bool &allow_simultaneous_logins) {
    m_allow_simultaneous_logins = allow_simultaneous_logins;
    m_allow_simultaneous_logins_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_allow_simultaneous_logins_Set() const{
    return m_allow_simultaneous_logins_isSet;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_allow_simultaneous_logins_Valid() const{
    return m_allow_simultaneous_logins_isValid;
}

OAIUpdateNetworkWirelessSsidSplashSettings_request_billing OAIUpdateNetworkWirelessSsidSplashSettings_request::getBilling() const {
    return m_billing;
}
void OAIUpdateNetworkWirelessSsidSplashSettings_request::setBilling(const OAIUpdateNetworkWirelessSsidSplashSettings_request_billing &billing) {
    m_billing = billing;
    m_billing_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_billing_Set() const{
    return m_billing_isSet;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_billing_Valid() const{
    return m_billing_isValid;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::isBlockAllTrafficBeforeSignOn() const {
    return m_block_all_traffic_before_sign_on;
}
void OAIUpdateNetworkWirelessSsidSplashSettings_request::setBlockAllTrafficBeforeSignOn(const bool &block_all_traffic_before_sign_on) {
    m_block_all_traffic_before_sign_on = block_all_traffic_before_sign_on;
    m_block_all_traffic_before_sign_on_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_block_all_traffic_before_sign_on_Set() const{
    return m_block_all_traffic_before_sign_on_isSet;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_block_all_traffic_before_sign_on_Valid() const{
    return m_block_all_traffic_before_sign_on_isValid;
}

QString OAIUpdateNetworkWirelessSsidSplashSettings_request::getControllerDisconnectionBehavior() const {
    return m_controller_disconnection_behavior;
}
void OAIUpdateNetworkWirelessSsidSplashSettings_request::setControllerDisconnectionBehavior(const QString &controller_disconnection_behavior) {
    m_controller_disconnection_behavior = controller_disconnection_behavior;
    m_controller_disconnection_behavior_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_controller_disconnection_behavior_Set() const{
    return m_controller_disconnection_behavior_isSet;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_controller_disconnection_behavior_Valid() const{
    return m_controller_disconnection_behavior_isValid;
}

OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship OAIUpdateNetworkWirelessSsidSplashSettings_request::getGuestSponsorship() const {
    return m_guest_sponsorship;
}
void OAIUpdateNetworkWirelessSsidSplashSettings_request::setGuestSponsorship(const OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship &guest_sponsorship) {
    m_guest_sponsorship = guest_sponsorship;
    m_guest_sponsorship_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_guest_sponsorship_Set() const{
    return m_guest_sponsorship_isSet;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_guest_sponsorship_Valid() const{
    return m_guest_sponsorship_isValid;
}

QString OAIUpdateNetworkWirelessSsidSplashSettings_request::getRedirectUrl() const {
    return m_redirect_url;
}
void OAIUpdateNetworkWirelessSsidSplashSettings_request::setRedirectUrl(const QString &redirect_url) {
    m_redirect_url = redirect_url;
    m_redirect_url_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_redirect_url_Set() const{
    return m_redirect_url_isSet;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_redirect_url_Valid() const{
    return m_redirect_url_isValid;
}

OAIUpdateNetworkWirelessSsidSplashSettings_request_sentryEnrollment OAIUpdateNetworkWirelessSsidSplashSettings_request::getSentryEnrollment() const {
    return m_sentry_enrollment;
}
void OAIUpdateNetworkWirelessSsidSplashSettings_request::setSentryEnrollment(const OAIUpdateNetworkWirelessSsidSplashSettings_request_sentryEnrollment &sentry_enrollment) {
    m_sentry_enrollment = sentry_enrollment;
    m_sentry_enrollment_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_sentry_enrollment_Set() const{
    return m_sentry_enrollment_isSet;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_sentry_enrollment_Valid() const{
    return m_sentry_enrollment_isValid;
}

OAIUpdateNetworkWirelessSsidSplashSettings_request_splashImage OAIUpdateNetworkWirelessSsidSplashSettings_request::getSplashImage() const {
    return m_splash_image;
}
void OAIUpdateNetworkWirelessSsidSplashSettings_request::setSplashImage(const OAIUpdateNetworkWirelessSsidSplashSettings_request_splashImage &splash_image) {
    m_splash_image = splash_image;
    m_splash_image_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_splash_image_Set() const{
    return m_splash_image_isSet;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_splash_image_Valid() const{
    return m_splash_image_isValid;
}

OAIUpdateNetworkWirelessSsidSplashSettings_request_splashLogo OAIUpdateNetworkWirelessSsidSplashSettings_request::getSplashLogo() const {
    return m_splash_logo;
}
void OAIUpdateNetworkWirelessSsidSplashSettings_request::setSplashLogo(const OAIUpdateNetworkWirelessSsidSplashSettings_request_splashLogo &splash_logo) {
    m_splash_logo = splash_logo;
    m_splash_logo_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_splash_logo_Set() const{
    return m_splash_logo_isSet;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_splash_logo_Valid() const{
    return m_splash_logo_isValid;
}

OAIUpdateNetworkWirelessSsidSplashSettings_request_splashPrepaidFront OAIUpdateNetworkWirelessSsidSplashSettings_request::getSplashPrepaidFront() const {
    return m_splash_prepaid_front;
}
void OAIUpdateNetworkWirelessSsidSplashSettings_request::setSplashPrepaidFront(const OAIUpdateNetworkWirelessSsidSplashSettings_request_splashPrepaidFront &splash_prepaid_front) {
    m_splash_prepaid_front = splash_prepaid_front;
    m_splash_prepaid_front_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_splash_prepaid_front_Set() const{
    return m_splash_prepaid_front_isSet;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_splash_prepaid_front_Valid() const{
    return m_splash_prepaid_front_isValid;
}

qint32 OAIUpdateNetworkWirelessSsidSplashSettings_request::getSplashTimeout() const {
    return m_splash_timeout;
}
void OAIUpdateNetworkWirelessSsidSplashSettings_request::setSplashTimeout(const qint32 &splash_timeout) {
    m_splash_timeout = splash_timeout;
    m_splash_timeout_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_splash_timeout_Set() const{
    return m_splash_timeout_isSet;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_splash_timeout_Valid() const{
    return m_splash_timeout_isValid;
}

QString OAIUpdateNetworkWirelessSsidSplashSettings_request::getSplashUrl() const {
    return m_splash_url;
}
void OAIUpdateNetworkWirelessSsidSplashSettings_request::setSplashUrl(const QString &splash_url) {
    m_splash_url = splash_url;
    m_splash_url_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_splash_url_Set() const{
    return m_splash_url_isSet;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_splash_url_Valid() const{
    return m_splash_url_isValid;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::isUseRedirectUrl() const {
    return m_use_redirect_url;
}
void OAIUpdateNetworkWirelessSsidSplashSettings_request::setUseRedirectUrl(const bool &use_redirect_url) {
    m_use_redirect_url = use_redirect_url;
    m_use_redirect_url_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_use_redirect_url_Set() const{
    return m_use_redirect_url_isSet;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_use_redirect_url_Valid() const{
    return m_use_redirect_url_isValid;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::isUseSplashUrl() const {
    return m_use_splash_url;
}
void OAIUpdateNetworkWirelessSsidSplashSettings_request::setUseSplashUrl(const bool &use_splash_url) {
    m_use_splash_url = use_splash_url;
    m_use_splash_url_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_use_splash_url_Set() const{
    return m_use_splash_url_isSet;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_use_splash_url_Valid() const{
    return m_use_splash_url_isValid;
}

QString OAIUpdateNetworkWirelessSsidSplashSettings_request::getWelcomeMessage() const {
    return m_welcome_message;
}
void OAIUpdateNetworkWirelessSsidSplashSettings_request::setWelcomeMessage(const QString &welcome_message) {
    m_welcome_message = welcome_message;
    m_welcome_message_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_welcome_message_Set() const{
    return m_welcome_message_isSet;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::is_welcome_message_Valid() const{
    return m_welcome_message_isValid;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_simultaneous_logins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_all_traffic_before_sign_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_controller_disconnection_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_sponsorship.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentry_enrollment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_splash_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_splash_logo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_splash_prepaid_front.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_splash_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_splash_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_splash_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_welcome_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
