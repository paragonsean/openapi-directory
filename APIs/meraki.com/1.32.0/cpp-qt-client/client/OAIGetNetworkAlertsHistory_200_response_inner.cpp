/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkAlertsHistory_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkAlertsHistory_200_response_inner::OAIGetNetworkAlertsHistory_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkAlertsHistory_200_response_inner::OAIGetNetworkAlertsHistory_200_response_inner() {
    this->initializeModel();
}

OAIGetNetworkAlertsHistory_200_response_inner::~OAIGetNetworkAlertsHistory_200_response_inner() {}

void OAIGetNetworkAlertsHistory_200_response_inner::initializeModel() {

    m_alert_data_isSet = false;
    m_alert_data_isValid = false;

    m_alert_type_isSet = false;
    m_alert_type_isValid = false;

    m_alert_type_id_isSet = false;
    m_alert_type_id_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_occurred_at_isSet = false;
    m_occurred_at_isValid = false;
}

void OAIGetNetworkAlertsHistory_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkAlertsHistory_200_response_inner::fromJsonObject(QJsonObject json) {

    m_alert_data_isValid = ::OpenAPI::fromJsonValue(m_alert_data, json[QString("alertData")]);
    m_alert_data_isSet = !json[QString("alertData")].isNull() && m_alert_data_isValid;

    m_alert_type_isValid = ::OpenAPI::fromJsonValue(m_alert_type, json[QString("alertType")]);
    m_alert_type_isSet = !json[QString("alertType")].isNull() && m_alert_type_isValid;

    m_alert_type_id_isValid = ::OpenAPI::fromJsonValue(m_alert_type_id, json[QString("alertTypeId")]);
    m_alert_type_id_isSet = !json[QString("alertTypeId")].isNull() && m_alert_type_id_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_occurred_at_isValid = ::OpenAPI::fromJsonValue(m_occurred_at, json[QString("occurredAt")]);
    m_occurred_at_isSet = !json[QString("occurredAt")].isNull() && m_occurred_at_isValid;
}

QString OAIGetNetworkAlertsHistory_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkAlertsHistory_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_data_isSet) {
        obj.insert(QString("alertData"), ::OpenAPI::toJsonValue(m_alert_data));
    }
    if (m_alert_type_isSet) {
        obj.insert(QString("alertType"), ::OpenAPI::toJsonValue(m_alert_type));
    }
    if (m_alert_type_id_isSet) {
        obj.insert(QString("alertTypeId"), ::OpenAPI::toJsonValue(m_alert_type_id));
    }
    if (m_destinations.isSet()) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_occurred_at_isSet) {
        obj.insert(QString("occurredAt"), ::OpenAPI::toJsonValue(m_occurred_at));
    }
    return obj;
}

OAIObject OAIGetNetworkAlertsHistory_200_response_inner::getAlertData() const {
    return m_alert_data;
}
void OAIGetNetworkAlertsHistory_200_response_inner::setAlertData(const OAIObject &alert_data) {
    m_alert_data = alert_data;
    m_alert_data_isSet = true;
}

bool OAIGetNetworkAlertsHistory_200_response_inner::is_alert_data_Set() const{
    return m_alert_data_isSet;
}

bool OAIGetNetworkAlertsHistory_200_response_inner::is_alert_data_Valid() const{
    return m_alert_data_isValid;
}

QString OAIGetNetworkAlertsHistory_200_response_inner::getAlertType() const {
    return m_alert_type;
}
void OAIGetNetworkAlertsHistory_200_response_inner::setAlertType(const QString &alert_type) {
    m_alert_type = alert_type;
    m_alert_type_isSet = true;
}

bool OAIGetNetworkAlertsHistory_200_response_inner::is_alert_type_Set() const{
    return m_alert_type_isSet;
}

bool OAIGetNetworkAlertsHistory_200_response_inner::is_alert_type_Valid() const{
    return m_alert_type_isValid;
}

QString OAIGetNetworkAlertsHistory_200_response_inner::getAlertTypeId() const {
    return m_alert_type_id;
}
void OAIGetNetworkAlertsHistory_200_response_inner::setAlertTypeId(const QString &alert_type_id) {
    m_alert_type_id = alert_type_id;
    m_alert_type_id_isSet = true;
}

bool OAIGetNetworkAlertsHistory_200_response_inner::is_alert_type_id_Set() const{
    return m_alert_type_id_isSet;
}

bool OAIGetNetworkAlertsHistory_200_response_inner::is_alert_type_id_Valid() const{
    return m_alert_type_id_isValid;
}

OAIGetNetworkAlertsHistory_200_response_inner_destinations OAIGetNetworkAlertsHistory_200_response_inner::getDestinations() const {
    return m_destinations;
}
void OAIGetNetworkAlertsHistory_200_response_inner::setDestinations(const OAIGetNetworkAlertsHistory_200_response_inner_destinations &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIGetNetworkAlertsHistory_200_response_inner::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIGetNetworkAlertsHistory_200_response_inner::is_destinations_Valid() const{
    return m_destinations_isValid;
}

OAIGetNetworkAlertsHistory_200_response_inner_device OAIGetNetworkAlertsHistory_200_response_inner::getDevice() const {
    return m_device;
}
void OAIGetNetworkAlertsHistory_200_response_inner::setDevice(const OAIGetNetworkAlertsHistory_200_response_inner_device &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIGetNetworkAlertsHistory_200_response_inner::is_device_Set() const{
    return m_device_isSet;
}

bool OAIGetNetworkAlertsHistory_200_response_inner::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIGetNetworkAlertsHistory_200_response_inner::getOccurredAt() const {
    return m_occurred_at;
}
void OAIGetNetworkAlertsHistory_200_response_inner::setOccurredAt(const QString &occurred_at) {
    m_occurred_at = occurred_at;
    m_occurred_at_isSet = true;
}

bool OAIGetNetworkAlertsHistory_200_response_inner::is_occurred_at_Set() const{
    return m_occurred_at_isSet;
}

bool OAIGetNetworkAlertsHistory_200_response_inner::is_occurred_at_Valid() const{
    return m_occurred_at_isValid;
}

bool OAIGetNetworkAlertsHistory_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurred_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkAlertsHistory_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
