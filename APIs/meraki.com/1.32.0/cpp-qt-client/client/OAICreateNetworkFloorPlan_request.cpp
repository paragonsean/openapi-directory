/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNetworkFloorPlan_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNetworkFloorPlan_request::OAICreateNetworkFloorPlan_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNetworkFloorPlan_request::OAICreateNetworkFloorPlan_request() {
    this->initializeModel();
}

OAICreateNetworkFloorPlan_request::~OAICreateNetworkFloorPlan_request() {}

void OAICreateNetworkFloorPlan_request::initializeModel() {

    m_bottom_left_corner_isSet = false;
    m_bottom_left_corner_isValid = false;

    m_bottom_right_corner_isSet = false;
    m_bottom_right_corner_isValid = false;

    m_center_isSet = false;
    m_center_isValid = false;

    m_image_contents_isSet = false;
    m_image_contents_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_top_left_corner_isSet = false;
    m_top_left_corner_isValid = false;

    m_top_right_corner_isSet = false;
    m_top_right_corner_isValid = false;
}

void OAICreateNetworkFloorPlan_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNetworkFloorPlan_request::fromJsonObject(QJsonObject json) {

    m_bottom_left_corner_isValid = ::OpenAPI::fromJsonValue(m_bottom_left_corner, json[QString("bottomLeftCorner")]);
    m_bottom_left_corner_isSet = !json[QString("bottomLeftCorner")].isNull() && m_bottom_left_corner_isValid;

    m_bottom_right_corner_isValid = ::OpenAPI::fromJsonValue(m_bottom_right_corner, json[QString("bottomRightCorner")]);
    m_bottom_right_corner_isSet = !json[QString("bottomRightCorner")].isNull() && m_bottom_right_corner_isValid;

    m_center_isValid = ::OpenAPI::fromJsonValue(m_center, json[QString("center")]);
    m_center_isSet = !json[QString("center")].isNull() && m_center_isValid;

    m_image_contents_isValid = ::OpenAPI::fromJsonValue(m_image_contents, json[QString("imageContents")]);
    m_image_contents_isSet = !json[QString("imageContents")].isNull() && m_image_contents_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_top_left_corner_isValid = ::OpenAPI::fromJsonValue(m_top_left_corner, json[QString("topLeftCorner")]);
    m_top_left_corner_isSet = !json[QString("topLeftCorner")].isNull() && m_top_left_corner_isValid;

    m_top_right_corner_isValid = ::OpenAPI::fromJsonValue(m_top_right_corner, json[QString("topRightCorner")]);
    m_top_right_corner_isSet = !json[QString("topRightCorner")].isNull() && m_top_right_corner_isValid;
}

QString OAICreateNetworkFloorPlan_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNetworkFloorPlan_request::asJsonObject() const {
    QJsonObject obj;
    if (m_bottom_left_corner.isSet()) {
        obj.insert(QString("bottomLeftCorner"), ::OpenAPI::toJsonValue(m_bottom_left_corner));
    }
    if (m_bottom_right_corner.isSet()) {
        obj.insert(QString("bottomRightCorner"), ::OpenAPI::toJsonValue(m_bottom_right_corner));
    }
    if (m_center.isSet()) {
        obj.insert(QString("center"), ::OpenAPI::toJsonValue(m_center));
    }
    if (m_image_contents_isSet) {
        obj.insert(QString("imageContents"), ::OpenAPI::toJsonValue(m_image_contents));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_top_left_corner.isSet()) {
        obj.insert(QString("topLeftCorner"), ::OpenAPI::toJsonValue(m_top_left_corner));
    }
    if (m_top_right_corner.isSet()) {
        obj.insert(QString("topRightCorner"), ::OpenAPI::toJsonValue(m_top_right_corner));
    }
    return obj;
}

OAICreateNetworkFloorPlan_request_bottomLeftCorner OAICreateNetworkFloorPlan_request::getBottomLeftCorner() const {
    return m_bottom_left_corner;
}
void OAICreateNetworkFloorPlan_request::setBottomLeftCorner(const OAICreateNetworkFloorPlan_request_bottomLeftCorner &bottom_left_corner) {
    m_bottom_left_corner = bottom_left_corner;
    m_bottom_left_corner_isSet = true;
}

bool OAICreateNetworkFloorPlan_request::is_bottom_left_corner_Set() const{
    return m_bottom_left_corner_isSet;
}

bool OAICreateNetworkFloorPlan_request::is_bottom_left_corner_Valid() const{
    return m_bottom_left_corner_isValid;
}

OAICreateNetworkFloorPlan_request_bottomRightCorner OAICreateNetworkFloorPlan_request::getBottomRightCorner() const {
    return m_bottom_right_corner;
}
void OAICreateNetworkFloorPlan_request::setBottomRightCorner(const OAICreateNetworkFloorPlan_request_bottomRightCorner &bottom_right_corner) {
    m_bottom_right_corner = bottom_right_corner;
    m_bottom_right_corner_isSet = true;
}

bool OAICreateNetworkFloorPlan_request::is_bottom_right_corner_Set() const{
    return m_bottom_right_corner_isSet;
}

bool OAICreateNetworkFloorPlan_request::is_bottom_right_corner_Valid() const{
    return m_bottom_right_corner_isValid;
}

OAICreateNetworkFloorPlan_request_center OAICreateNetworkFloorPlan_request::getCenter() const {
    return m_center;
}
void OAICreateNetworkFloorPlan_request::setCenter(const OAICreateNetworkFloorPlan_request_center &center) {
    m_center = center;
    m_center_isSet = true;
}

bool OAICreateNetworkFloorPlan_request::is_center_Set() const{
    return m_center_isSet;
}

bool OAICreateNetworkFloorPlan_request::is_center_Valid() const{
    return m_center_isValid;
}

QByteArray OAICreateNetworkFloorPlan_request::getImageContents() const {
    return m_image_contents;
}
void OAICreateNetworkFloorPlan_request::setImageContents(const QByteArray &image_contents) {
    m_image_contents = image_contents;
    m_image_contents_isSet = true;
}

bool OAICreateNetworkFloorPlan_request::is_image_contents_Set() const{
    return m_image_contents_isSet;
}

bool OAICreateNetworkFloorPlan_request::is_image_contents_Valid() const{
    return m_image_contents_isValid;
}

QString OAICreateNetworkFloorPlan_request::getName() const {
    return m_name;
}
void OAICreateNetworkFloorPlan_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateNetworkFloorPlan_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateNetworkFloorPlan_request::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateNetworkFloorPlan_request_topLeftCorner OAICreateNetworkFloorPlan_request::getTopLeftCorner() const {
    return m_top_left_corner;
}
void OAICreateNetworkFloorPlan_request::setTopLeftCorner(const OAICreateNetworkFloorPlan_request_topLeftCorner &top_left_corner) {
    m_top_left_corner = top_left_corner;
    m_top_left_corner_isSet = true;
}

bool OAICreateNetworkFloorPlan_request::is_top_left_corner_Set() const{
    return m_top_left_corner_isSet;
}

bool OAICreateNetworkFloorPlan_request::is_top_left_corner_Valid() const{
    return m_top_left_corner_isValid;
}

OAICreateNetworkFloorPlan_request_topRightCorner OAICreateNetworkFloorPlan_request::getTopRightCorner() const {
    return m_top_right_corner;
}
void OAICreateNetworkFloorPlan_request::setTopRightCorner(const OAICreateNetworkFloorPlan_request_topRightCorner &top_right_corner) {
    m_top_right_corner = top_right_corner;
    m_top_right_corner_isSet = true;
}

bool OAICreateNetworkFloorPlan_request::is_top_right_corner_Set() const{
    return m_top_right_corner_isSet;
}

bool OAICreateNetworkFloorPlan_request::is_top_right_corner_Valid() const{
    return m_top_right_corner_isValid;
}

bool OAICreateNetworkFloorPlan_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bottom_left_corner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bottom_right_corner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_center.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_contents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_left_corner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_right_corner.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNetworkFloorPlan_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_contents_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
