/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner() {
    this->initializeModel();
}

OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::~OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner() {}

void OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::initializeModel() {

    m_access_policy_type_isSet = false;
    m_access_policy_type_isValid = false;

    m_allowed_vlans_isSet = false;
    m_allowed_vlans_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_link_negotiation_isSet = false;
    m_link_negotiation_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_poe_enabled_isSet = false;
    m_poe_enabled_isValid = false;

    m_port_id_isSet = false;
    m_port_id_isValid = false;

    m_rstp_enabled_isSet = false;
    m_rstp_enabled_isValid = false;

    m_sticky_mac_allow_list_isSet = false;
    m_sticky_mac_allow_list_isValid = false;

    m_sticky_mac_allow_list_limit_isSet = false;
    m_sticky_mac_allow_list_limit_isValid = false;

    m_stp_guard_isSet = false;
    m_stp_guard_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vlan_isSet = false;
    m_vlan_isValid = false;

    m_voice_vlan_isSet = false;
    m_voice_vlan_isValid = false;
}

void OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::fromJsonObject(QJsonObject json) {

    m_access_policy_type_isValid = ::OpenAPI::fromJsonValue(m_access_policy_type, json[QString("accessPolicyType")]);
    m_access_policy_type_isSet = !json[QString("accessPolicyType")].isNull() && m_access_policy_type_isValid;

    m_allowed_vlans_isValid = ::OpenAPI::fromJsonValue(m_allowed_vlans, json[QString("allowedVlans")]);
    m_allowed_vlans_isSet = !json[QString("allowedVlans")].isNull() && m_allowed_vlans_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_link_negotiation_isValid = ::OpenAPI::fromJsonValue(m_link_negotiation, json[QString("linkNegotiation")]);
    m_link_negotiation_isSet = !json[QString("linkNegotiation")].isNull() && m_link_negotiation_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_poe_enabled_isValid = ::OpenAPI::fromJsonValue(m_poe_enabled, json[QString("poeEnabled")]);
    m_poe_enabled_isSet = !json[QString("poeEnabled")].isNull() && m_poe_enabled_isValid;

    m_port_id_isValid = ::OpenAPI::fromJsonValue(m_port_id, json[QString("portId")]);
    m_port_id_isSet = !json[QString("portId")].isNull() && m_port_id_isValid;

    m_rstp_enabled_isValid = ::OpenAPI::fromJsonValue(m_rstp_enabled, json[QString("rstpEnabled")]);
    m_rstp_enabled_isSet = !json[QString("rstpEnabled")].isNull() && m_rstp_enabled_isValid;

    m_sticky_mac_allow_list_isValid = ::OpenAPI::fromJsonValue(m_sticky_mac_allow_list, json[QString("stickyMacAllowList")]);
    m_sticky_mac_allow_list_isSet = !json[QString("stickyMacAllowList")].isNull() && m_sticky_mac_allow_list_isValid;

    m_sticky_mac_allow_list_limit_isValid = ::OpenAPI::fromJsonValue(m_sticky_mac_allow_list_limit, json[QString("stickyMacAllowListLimit")]);
    m_sticky_mac_allow_list_limit_isSet = !json[QString("stickyMacAllowListLimit")].isNull() && m_sticky_mac_allow_list_limit_isValid;

    m_stp_guard_isValid = ::OpenAPI::fromJsonValue(m_stp_guard, json[QString("stpGuard")]);
    m_stp_guard_isSet = !json[QString("stpGuard")].isNull() && m_stp_guard_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vlan_isValid = ::OpenAPI::fromJsonValue(m_vlan, json[QString("vlan")]);
    m_vlan_isSet = !json[QString("vlan")].isNull() && m_vlan_isValid;

    m_voice_vlan_isValid = ::OpenAPI::fromJsonValue(m_voice_vlan, json[QString("voiceVlan")]);
    m_voice_vlan_isSet = !json[QString("voiceVlan")].isNull() && m_voice_vlan_isValid;
}

QString OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_access_policy_type_isSet) {
        obj.insert(QString("accessPolicyType"), ::OpenAPI::toJsonValue(m_access_policy_type));
    }
    if (m_allowed_vlans_isSet) {
        obj.insert(QString("allowedVlans"), ::OpenAPI::toJsonValue(m_allowed_vlans));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_link_negotiation_isSet) {
        obj.insert(QString("linkNegotiation"), ::OpenAPI::toJsonValue(m_link_negotiation));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_poe_enabled_isSet) {
        obj.insert(QString("poeEnabled"), ::OpenAPI::toJsonValue(m_poe_enabled));
    }
    if (m_port_id_isSet) {
        obj.insert(QString("portId"), ::OpenAPI::toJsonValue(m_port_id));
    }
    if (m_rstp_enabled_isSet) {
        obj.insert(QString("rstpEnabled"), ::OpenAPI::toJsonValue(m_rstp_enabled));
    }
    if (m_sticky_mac_allow_list.size() > 0) {
        obj.insert(QString("stickyMacAllowList"), ::OpenAPI::toJsonValue(m_sticky_mac_allow_list));
    }
    if (m_sticky_mac_allow_list_limit_isSet) {
        obj.insert(QString("stickyMacAllowListLimit"), ::OpenAPI::toJsonValue(m_sticky_mac_allow_list_limit));
    }
    if (m_stp_guard_isSet) {
        obj.insert(QString("stpGuard"), ::OpenAPI::toJsonValue(m_stp_guard));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vlan_isSet) {
        obj.insert(QString("vlan"), ::OpenAPI::toJsonValue(m_vlan));
    }
    if (m_voice_vlan_isSet) {
        obj.insert(QString("voiceVlan"), ::OpenAPI::toJsonValue(m_voice_vlan));
    }
    return obj;
}

QString OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::getAccessPolicyType() const {
    return m_access_policy_type;
}
void OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::setAccessPolicyType(const QString &access_policy_type) {
    m_access_policy_type = access_policy_type;
    m_access_policy_type_isSet = true;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_access_policy_type_Set() const{
    return m_access_policy_type_isSet;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_access_policy_type_Valid() const{
    return m_access_policy_type_isValid;
}

QString OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::getAllowedVlans() const {
    return m_allowed_vlans;
}
void OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::setAllowedVlans(const QString &allowed_vlans) {
    m_allowed_vlans = allowed_vlans;
    m_allowed_vlans_isSet = true;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_allowed_vlans_Set() const{
    return m_allowed_vlans_isSet;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_allowed_vlans_Valid() const{
    return m_allowed_vlans_isValid;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::isEnabled() const {
    return m_enabled;
}
void OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::getLinkNegotiation() const {
    return m_link_negotiation;
}
void OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::setLinkNegotiation(const QString &link_negotiation) {
    m_link_negotiation = link_negotiation;
    m_link_negotiation_isSet = true;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_link_negotiation_Set() const{
    return m_link_negotiation_isSet;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_link_negotiation_Valid() const{
    return m_link_negotiation_isValid;
}

QString OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::getName() const {
    return m_name;
}
void OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::isPoeEnabled() const {
    return m_poe_enabled;
}
void OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::setPoeEnabled(const bool &poe_enabled) {
    m_poe_enabled = poe_enabled;
    m_poe_enabled_isSet = true;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_poe_enabled_Set() const{
    return m_poe_enabled_isSet;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_poe_enabled_Valid() const{
    return m_poe_enabled_isValid;
}

QString OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::getPortId() const {
    return m_port_id;
}
void OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::setPortId(const QString &port_id) {
    m_port_id = port_id;
    m_port_id_isSet = true;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_port_id_Set() const{
    return m_port_id_isSet;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_port_id_Valid() const{
    return m_port_id_isValid;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::isRstpEnabled() const {
    return m_rstp_enabled;
}
void OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::setRstpEnabled(const bool &rstp_enabled) {
    m_rstp_enabled = rstp_enabled;
    m_rstp_enabled_isSet = true;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_rstp_enabled_Set() const{
    return m_rstp_enabled_isSet;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_rstp_enabled_Valid() const{
    return m_rstp_enabled_isValid;
}

QList<QString> OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::getStickyMacAllowList() const {
    return m_sticky_mac_allow_list;
}
void OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::setStickyMacAllowList(const QList<QString> &sticky_mac_allow_list) {
    m_sticky_mac_allow_list = sticky_mac_allow_list;
    m_sticky_mac_allow_list_isSet = true;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_sticky_mac_allow_list_Set() const{
    return m_sticky_mac_allow_list_isSet;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_sticky_mac_allow_list_Valid() const{
    return m_sticky_mac_allow_list_isValid;
}

qint32 OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::getStickyMacAllowListLimit() const {
    return m_sticky_mac_allow_list_limit;
}
void OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::setStickyMacAllowListLimit(const qint32 &sticky_mac_allow_list_limit) {
    m_sticky_mac_allow_list_limit = sticky_mac_allow_list_limit;
    m_sticky_mac_allow_list_limit_isSet = true;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_sticky_mac_allow_list_limit_Set() const{
    return m_sticky_mac_allow_list_limit_isSet;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_sticky_mac_allow_list_limit_Valid() const{
    return m_sticky_mac_allow_list_limit_isValid;
}

QString OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::getStpGuard() const {
    return m_stp_guard;
}
void OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::setStpGuard(const QString &stp_guard) {
    m_stp_guard = stp_guard;
    m_stp_guard_isSet = true;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_stp_guard_Set() const{
    return m_stp_guard_isSet;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_stp_guard_Valid() const{
    return m_stp_guard_isValid;
}

QList<QString> OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::getTags() const {
    return m_tags;
}
void OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::getType() const {
    return m_type;
}
void OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::getVlan() const {
    return m_vlan;
}
void OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::setVlan(const qint32 &vlan) {
    m_vlan = vlan;
    m_vlan_isSet = true;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_vlan_Set() const{
    return m_vlan_isSet;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_vlan_Valid() const{
    return m_vlan_isValid;
}

qint32 OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::getVoiceVlan() const {
    return m_voice_vlan;
}
void OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::setVoiceVlan(const qint32 &voice_vlan) {
    m_voice_vlan = voice_vlan;
    m_voice_vlan_isSet = true;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_voice_vlan_Set() const{
    return m_voice_vlan_isSet;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::is_voice_vlan_Valid() const{
    return m_voice_vlan_isValid;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_policy_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_vlans_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_negotiation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poe_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rstp_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sticky_mac_allow_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sticky_mac_allow_list_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stp_guard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
