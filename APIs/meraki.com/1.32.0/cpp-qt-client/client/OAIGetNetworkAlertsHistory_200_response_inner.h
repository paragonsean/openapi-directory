/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetNetworkAlertsHistory_200_response_inner.h
 *
 * 
 */

#ifndef OAIGetNetworkAlertsHistory_200_response_inner_H
#define OAIGetNetworkAlertsHistory_200_response_inner_H

#include <QJsonObject>

#include "OAIGetNetworkAlertsHistory_200_response_inner_destinations.h"
#include "OAIGetNetworkAlertsHistory_200_response_inner_device.h"
#include "OAIObject.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetNetworkAlertsHistory_200_response_inner_destinations;
class OAIGetNetworkAlertsHistory_200_response_inner_device;

class OAIGetNetworkAlertsHistory_200_response_inner : public OAIObject {
public:
    OAIGetNetworkAlertsHistory_200_response_inner();
    OAIGetNetworkAlertsHistory_200_response_inner(QString json);
    ~OAIGetNetworkAlertsHistory_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIObject getAlertData() const;
    void setAlertData(const OAIObject &alert_data);
    bool is_alert_data_Set() const;
    bool is_alert_data_Valid() const;

    QString getAlertType() const;
    void setAlertType(const QString &alert_type);
    bool is_alert_type_Set() const;
    bool is_alert_type_Valid() const;

    QString getAlertTypeId() const;
    void setAlertTypeId(const QString &alert_type_id);
    bool is_alert_type_id_Set() const;
    bool is_alert_type_id_Valid() const;

    OAIGetNetworkAlertsHistory_200_response_inner_destinations getDestinations() const;
    void setDestinations(const OAIGetNetworkAlertsHistory_200_response_inner_destinations &destinations);
    bool is_destinations_Set() const;
    bool is_destinations_Valid() const;

    OAIGetNetworkAlertsHistory_200_response_inner_device getDevice() const;
    void setDevice(const OAIGetNetworkAlertsHistory_200_response_inner_device &device);
    bool is_device_Set() const;
    bool is_device_Valid() const;

    QString getOccurredAt() const;
    void setOccurredAt(const QString &occurred_at);
    bool is_occurred_at_Set() const;
    bool is_occurred_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIObject m_alert_data;
    bool m_alert_data_isSet;
    bool m_alert_data_isValid;

    QString m_alert_type;
    bool m_alert_type_isSet;
    bool m_alert_type_isValid;

    QString m_alert_type_id;
    bool m_alert_type_id_isSet;
    bool m_alert_type_id_isValid;

    OAIGetNetworkAlertsHistory_200_response_inner_destinations m_destinations;
    bool m_destinations_isSet;
    bool m_destinations_isValid;

    OAIGetNetworkAlertsHistory_200_response_inner_device m_device;
    bool m_device_isSet;
    bool m_device_isValid;

    QString m_occurred_at;
    bool m_occurred_at_isSet;
    bool m_occurred_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetNetworkAlertsHistory_200_response_inner)

#endif // OAIGetNetworkAlertsHistory_200_response_inner_H
