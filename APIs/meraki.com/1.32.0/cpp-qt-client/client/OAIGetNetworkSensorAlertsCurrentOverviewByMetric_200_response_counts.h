/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response_counts.h
 *
 * Counts of currently alerting sensors, aggregated by alerting metric
 */

#ifndef OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response_counts_H
#define OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response_counts_H

#include <QJsonObject>

#include "OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response_counts_noise.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response_counts_noise;

class OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response_counts : public OAIObject {
public:
    OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response_counts();
    OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response_counts(QString json);
    ~OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response_counts() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDoor() const;
    void setDoor(const qint32 &door);
    bool is_door_Set() const;
    bool is_door_Valid() const;

    qint32 getHumidity() const;
    void setHumidity(const qint32 &humidity);
    bool is_humidity_Set() const;
    bool is_humidity_Valid() const;

    qint32 getIndoorAirQuality() const;
    void setIndoorAirQuality(const qint32 &indoor_air_quality);
    bool is_indoor_air_quality_Set() const;
    bool is_indoor_air_quality_Valid() const;

    OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response_counts_noise getNoise() const;
    void setNoise(const OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response_counts_noise &noise);
    bool is_noise_Set() const;
    bool is_noise_Valid() const;

    qint32 getPm25() const;
    void setPm25(const qint32 &pm25);
    bool is_pm25_Set() const;
    bool is_pm25_Valid() const;

    qint32 getTemperature() const;
    void setTemperature(const qint32 &temperature);
    bool is_temperature_Set() const;
    bool is_temperature_Valid() const;

    qint32 getTvoc() const;
    void setTvoc(const qint32 &tvoc);
    bool is_tvoc_Set() const;
    bool is_tvoc_Valid() const;

    qint32 getWater() const;
    void setWater(const qint32 &water);
    bool is_water_Set() const;
    bool is_water_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_door;
    bool m_door_isSet;
    bool m_door_isValid;

    qint32 m_humidity;
    bool m_humidity_isSet;
    bool m_humidity_isValid;

    qint32 m_indoor_air_quality;
    bool m_indoor_air_quality_isSet;
    bool m_indoor_air_quality_isValid;

    OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response_counts_noise m_noise;
    bool m_noise_isSet;
    bool m_noise_isValid;

    qint32 m_pm25;
    bool m_pm25_isSet;
    bool m_pm25_isValid;

    qint32 m_temperature;
    bool m_temperature_isSet;
    bool m_temperature_isValid;

    qint32 m_tvoc;
    bool m_tvoc_isSet;
    bool m_tvoc_isValid;

    qint32 m_water;
    bool m_water_isSet;
    bool m_water_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response_counts)

#endif // OAIGetNetworkSensorAlertsCurrentOverviewByMetric_200_response_counts_H
