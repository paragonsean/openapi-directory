/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateNetworkApplianceVlan_request.h
 *
 * 
 */

#ifndef OAICreateNetworkApplianceVlan_request_H
#define OAICreateNetworkApplianceVlan_request_H

#include <QJsonObject>

#include "OAIGetNetworkApplianceVlans_200_response_inner_mandatoryDhcp.h"
#include "OAIUpdateNetworkApplianceSingleLan_request_ipv6.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateNetworkApplianceSingleLan_request_ipv6;
class OAIGetNetworkApplianceVlans_200_response_inner_mandatoryDhcp;

class OAICreateNetworkApplianceVlan_request : public OAIObject {
public:
    OAICreateNetworkApplianceVlan_request();
    OAICreateNetworkApplianceVlan_request(QString json);
    ~OAICreateNetworkApplianceVlan_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApplianceIp() const;
    void setApplianceIp(const QString &appliance_ip);
    bool is_appliance_ip_Set() const;
    bool is_appliance_ip_Valid() const;

    QString getCidr() const;
    void setCidr(const QString &cidr);
    bool is_cidr_Set() const;
    bool is_cidr_Valid() const;

    QString getGroupPolicyId() const;
    void setGroupPolicyId(const QString &group_policy_id);
    bool is_group_policy_id_Set() const;
    bool is_group_policy_id_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIUpdateNetworkApplianceSingleLan_request_ipv6 getIpv6() const;
    void setIpv6(const OAIUpdateNetworkApplianceSingleLan_request_ipv6 &ipv6);
    bool is_ipv6_Set() const;
    bool is_ipv6_Valid() const;

    OAIGetNetworkApplianceVlans_200_response_inner_mandatoryDhcp getMandatoryDhcp() const;
    void setMandatoryDhcp(const OAIGetNetworkApplianceVlans_200_response_inner_mandatoryDhcp &mandatory_dhcp);
    bool is_mandatory_dhcp_Set() const;
    bool is_mandatory_dhcp_Valid() const;

    qint32 getMask() const;
    void setMask(const qint32 &mask);
    bool is_mask_Set() const;
    bool is_mask_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getSubnet() const;
    void setSubnet(const QString &subnet);
    bool is_subnet_Set() const;
    bool is_subnet_Valid() const;

    QString getTemplateVlanType() const;
    void setTemplateVlanType(const QString &template_vlan_type);
    bool is_template_vlan_type_Set() const;
    bool is_template_vlan_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_appliance_ip;
    bool m_appliance_ip_isSet;
    bool m_appliance_ip_isValid;

    QString m_cidr;
    bool m_cidr_isSet;
    bool m_cidr_isValid;

    QString m_group_policy_id;
    bool m_group_policy_id_isSet;
    bool m_group_policy_id_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIUpdateNetworkApplianceSingleLan_request_ipv6 m_ipv6;
    bool m_ipv6_isSet;
    bool m_ipv6_isValid;

    OAIGetNetworkApplianceVlans_200_response_inner_mandatoryDhcp m_mandatory_dhcp;
    bool m_mandatory_dhcp_isSet;
    bool m_mandatory_dhcp_isValid;

    qint32 m_mask;
    bool m_mask_isSet;
    bool m_mask_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_subnet;
    bool m_subnet_isSet;
    bool m_subnet_isValid;

    QString m_template_vlan_type;
    bool m_template_vlan_type_isSet;
    bool m_template_vlan_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateNetworkApplianceVlan_request)

#endif // OAICreateNetworkApplianceVlan_request_H
