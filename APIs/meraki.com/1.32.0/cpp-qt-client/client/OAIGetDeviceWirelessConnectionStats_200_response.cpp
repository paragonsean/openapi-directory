/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDeviceWirelessConnectionStats_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDeviceWirelessConnectionStats_200_response::OAIGetDeviceWirelessConnectionStats_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDeviceWirelessConnectionStats_200_response::OAIGetDeviceWirelessConnectionStats_200_response() {
    this->initializeModel();
}

OAIGetDeviceWirelessConnectionStats_200_response::~OAIGetDeviceWirelessConnectionStats_200_response() {}

void OAIGetDeviceWirelessConnectionStats_200_response::initializeModel() {

    m_connection_stats_isSet = false;
    m_connection_stats_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;
}

void OAIGetDeviceWirelessConnectionStats_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDeviceWirelessConnectionStats_200_response::fromJsonObject(QJsonObject json) {

    m_connection_stats_isValid = ::OpenAPI::fromJsonValue(m_connection_stats, json[QString("connectionStats")]);
    m_connection_stats_isSet = !json[QString("connectionStats")].isNull() && m_connection_stats_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;
}

QString OAIGetDeviceWirelessConnectionStats_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDeviceWirelessConnectionStats_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_stats.isSet()) {
        obj.insert(QString("connectionStats"), ::OpenAPI::toJsonValue(m_connection_stats));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    return obj;
}

OAIGetDeviceWirelessConnectionStats_200_response_connectionStats OAIGetDeviceWirelessConnectionStats_200_response::getConnectionStats() const {
    return m_connection_stats;
}
void OAIGetDeviceWirelessConnectionStats_200_response::setConnectionStats(const OAIGetDeviceWirelessConnectionStats_200_response_connectionStats &connection_stats) {
    m_connection_stats = connection_stats;
    m_connection_stats_isSet = true;
}

bool OAIGetDeviceWirelessConnectionStats_200_response::is_connection_stats_Set() const{
    return m_connection_stats_isSet;
}

bool OAIGetDeviceWirelessConnectionStats_200_response::is_connection_stats_Valid() const{
    return m_connection_stats_isValid;
}

QString OAIGetDeviceWirelessConnectionStats_200_response::getSerial() const {
    return m_serial;
}
void OAIGetDeviceWirelessConnectionStats_200_response::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIGetDeviceWirelessConnectionStats_200_response::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIGetDeviceWirelessConnectionStats_200_response::is_serial_Valid() const{
    return m_serial_isValid;
}

bool OAIGetDeviceWirelessConnectionStats_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDeviceWirelessConnectionStats_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
