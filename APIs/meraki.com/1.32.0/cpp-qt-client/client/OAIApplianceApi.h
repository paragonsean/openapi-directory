/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApplianceApi_H
#define OAI_OAIApplianceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateDeviceApplianceVmxAuthenticationToken_201_response.h"
#include "OAICreateNetworkAppliancePrefixesDelegatedStatic_request.h"
#include "OAICreateNetworkApplianceStaticRoute_request.h"
#include "OAICreateNetworkApplianceTrafficShapingCustomPerformanceClass_request.h"
#include "OAICreateNetworkApplianceVlan_201_response.h"
#include "OAICreateNetworkApplianceVlan_request.h"
#include "OAIGetDeviceApplianceUplinksSettings_200_response.h"
#include "OAIGetNetworkAppliancePorts_200_response_inner.h"
#include "OAIGetNetworkAppliancePrefixesDelegatedStatics_200_response_inner.h"
#include "OAIGetNetworkApplianceSettings_200_response.h"
#include "OAIGetNetworkApplianceSingleLan_200_response.h"
#include "OAIGetNetworkApplianceSsids_200_response_inner.h"
#include "OAIGetNetworkApplianceTrafficShapingUplinkBandwidth_200_response.h"
#include "OAIGetNetworkApplianceTrafficShapingUplinkSelection_200_response.h"
#include "OAIGetNetworkApplianceVlans_200_response_inner.h"
#include "OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response.h"
#include "OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response.h"
#include "OAIObject.h"
#include "OAIUpdateDeviceApplianceUplinksSettings_request.h"
#include "OAIUpdateNetworkApplianceConnectivityMonitoringDestinations_request.h"
#include "OAIUpdateNetworkApplianceContentFiltering_request.h"
#include "OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request.h"
#include "OAIUpdateNetworkApplianceFirewallFirewalledService_request.h"
#include "OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request.h"
#include "OAIUpdateNetworkApplianceFirewallL7FirewallRules_request.h"
#include "OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request.h"
#include "OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request.h"
#include "OAIUpdateNetworkApplianceFirewallPortForwardingRules_request.h"
#include "OAIUpdateNetworkApplianceFirewallSettings_request.h"
#include "OAIUpdateNetworkAppliancePort_request.h"
#include "OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request.h"
#include "OAIUpdateNetworkApplianceSecurityIntrusion_request.h"
#include "OAIUpdateNetworkApplianceSecurityMalware_request.h"
#include "OAIUpdateNetworkApplianceSettings_request.h"
#include "OAIUpdateNetworkApplianceSingleLan_request.h"
#include "OAIUpdateNetworkApplianceSsid_request.h"
#include "OAIUpdateNetworkApplianceStaticRoute_request.h"
#include "OAIUpdateNetworkApplianceTrafficShapingCustomPerformanceClass_request.h"
#include "OAIUpdateNetworkApplianceTrafficShapingRules_request.h"
#include "OAIUpdateNetworkApplianceTrafficShapingUplinkBandwidth_request.h"
#include "OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request.h"
#include "OAIUpdateNetworkApplianceTrafficShaping_request.h"
#include "OAIUpdateNetworkApplianceVlan_request.h"
#include "OAIUpdateNetworkApplianceVlansSettings_request.h"
#include "OAIUpdateNetworkApplianceVpnBgp_request.h"
#include "OAIUpdateNetworkApplianceVpnSiteToSiteVpn_request.h"
#include "OAIUpdateNetworkApplianceWarmSpare_request.h"
#include "OAIUpdateOrganizationApplianceSecurityIntrusion_request.h"
#include "OAIUpdateOrganizationApplianceVpnThirdPartyVPNPeers_request.h"
#include "OAIUpdateOrganizationApplianceVpnVpnFirewallRules_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApplianceApi : public QObject {
    Q_OBJECT

public:
    OAIApplianceApi(const int timeOut = 0);
    ~OAIApplianceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void createDeviceApplianceVmxAuthenticationToken(const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_appliance_prefixes_delegated_static_request OAICreateNetworkAppliancePrefixesDelegatedStatic_request [required]
    */
    virtual void createNetworkAppliancePrefixesDelegatedStatic(const QString &network_id, const OAICreateNetworkAppliancePrefixesDelegatedStatic_request &oai_create_network_appliance_prefixes_delegated_static_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_appliance_static_route_request OAICreateNetworkApplianceStaticRoute_request [required]
    */
    virtual void createNetworkApplianceStaticRoute(const QString &network_id, const OAICreateNetworkApplianceStaticRoute_request &oai_create_network_appliance_static_route_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_appliance_traffic_shaping_custom_performance_class_request OAICreateNetworkApplianceTrafficShapingCustomPerformanceClass_request [required]
    */
    virtual void createNetworkApplianceTrafficShapingCustomPerformanceClass(const QString &network_id, const OAICreateNetworkApplianceTrafficShapingCustomPerformanceClass_request &oai_create_network_appliance_traffic_shaping_custom_performance_class_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_appliance_vlan_request OAICreateNetworkApplianceVlan_request [required]
    */
    virtual void createNetworkApplianceVlan(const QString &network_id, const OAICreateNetworkApplianceVlan_request &oai_create_network_appliance_vlan_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  static_delegated_prefix_id QString [required]
    */
    virtual void deleteNetworkAppliancePrefixesDelegatedStatic(const QString &network_id, const QString &static_delegated_prefix_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void deleteNetworkApplianceStaticRoute(const QString &network_id, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  custom_performance_class_id QString [required]
    */
    virtual void deleteNetworkApplianceTrafficShapingCustomPerformanceClass(const QString &network_id, const QString &custom_performance_class_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  vlan_id QString [required]
    */
    virtual void deleteNetworkApplianceVlan(const QString &network_id, const QString &vlan_id);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceApplianceDhcpSubnets(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceAppliancePerformance(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceAppliancePrefixesDelegated(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceAppliancePrefixesDelegatedVlanAssignments(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceApplianceUplinksSettings(const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  sort_order QString [optional]
    */
    virtual void getNetworkApplianceClientSecurityEvents(const QString &network_id, const QString &client_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceConnectivityMonitoringDestinations(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceContentFiltering(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceContentFilteringCategories(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallCellularFirewallRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  service QString [required]
    */
    virtual void getNetworkApplianceFirewallFirewalledService(const QString &network_id, const QString &service);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallFirewalledServices(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallInboundCellularFirewallRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallInboundFirewallRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallL3FirewallRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallL7FirewallRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallL7FirewallRulesApplicationCategories(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallOneToManyNatRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallOneToOneNatRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallPortForwardingRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  port_id QString [required]
    */
    virtual void getNetworkAppliancePort(const QString &network_id, const QString &port_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkAppliancePorts(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  static_delegated_prefix_id QString [required]
    */
    virtual void getNetworkAppliancePrefixesDelegatedStatic(const QString &network_id, const QString &static_delegated_prefix_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkAppliancePrefixesDelegatedStatics(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  sort_order QString [optional]
    */
    virtual void getNetworkApplianceSecurityEvents(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceSecurityIntrusion(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceSecurityMalware(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceSingleLan(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkApplianceSsid(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceSsids(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void getNetworkApplianceStaticRoute(const QString &network_id, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceStaticRoutes(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceTrafficShaping(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  custom_performance_class_id QString [required]
    */
    virtual void getNetworkApplianceTrafficShapingCustomPerformanceClass(const QString &network_id, const QString &custom_performance_class_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceTrafficShapingCustomPerformanceClasses(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceTrafficShapingRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceTrafficShapingUplinkBandwidth(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceTrafficShapingUplinkSelection(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    */
    virtual void getNetworkApplianceUplinksUsageHistory(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  vlan_id QString [required]
    */
    virtual void getNetworkApplianceVlan(const QString &network_id, const QString &vlan_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceVlans(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceVlansSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceVpnBgp(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceVpnSiteToSiteVpn(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceWarmSpare(const QString &network_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  sort_order QString [optional]
    */
    virtual void getOrganizationApplianceSecurityEvents(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationApplianceSecurityIntrusion(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  iccids QList<QString> [optional]
    */
    virtual void getOrganizationApplianceUplinkStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &iccids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationApplianceVpnStats(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    */
    virtual void getOrganizationApplianceVpnStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationApplianceVpnThirdPartyVPNPeers(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationApplianceVpnVpnFirewallRules(const QString &organization_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void swapNetworkApplianceWarmSpare(const QString &network_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_appliance_uplinks_settings_request OAIUpdateDeviceApplianceUplinksSettings_request [required]
    */
    virtual void updateDeviceApplianceUplinksSettings(const QString &serial, const OAIUpdateDeviceApplianceUplinksSettings_request &oai_update_device_appliance_uplinks_settings_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_connectivity_monitoring_destinations_request OAIUpdateNetworkApplianceConnectivityMonitoringDestinations_request [optional]
    */
    virtual void updateNetworkApplianceConnectivityMonitoringDestinations(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceConnectivityMonitoringDestinations_request> &oai_update_network_appliance_connectivity_monitoring_destinations_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceConnectivityMonitoringDestinations_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_content_filtering_request OAIUpdateNetworkApplianceContentFiltering_request [optional]
    */
    virtual void updateNetworkApplianceContentFiltering(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceContentFiltering_request> &oai_update_network_appliance_content_filtering_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceContentFiltering_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_cellular_firewall_rules_request OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request [optional]
    */
    virtual void updateNetworkApplianceFirewallCellularFirewallRules(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request> &oai_update_network_appliance_firewall_cellular_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  service QString [required]
    * @param[in]  oai_update_network_appliance_firewall_firewalled_service_request OAIUpdateNetworkApplianceFirewallFirewalledService_request [required]
    */
    virtual void updateNetworkApplianceFirewallFirewalledService(const QString &network_id, const QString &service, const OAIUpdateNetworkApplianceFirewallFirewalledService_request &oai_update_network_appliance_firewall_firewalled_service_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_cellular_firewall_rules_request OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request [optional]
    */
    virtual void updateNetworkApplianceFirewallInboundCellularFirewallRules(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request> &oai_update_network_appliance_firewall_cellular_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_inbound_firewall_rules_request OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request [optional]
    */
    virtual void updateNetworkApplianceFirewallInboundFirewallRules(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request> &oai_update_network_appliance_firewall_inbound_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_inbound_firewall_rules_request OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request [optional]
    */
    virtual void updateNetworkApplianceFirewallL3FirewallRules(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request> &oai_update_network_appliance_firewall_inbound_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_l7_firewall_rules_request OAIUpdateNetworkApplianceFirewallL7FirewallRules_request [optional]
    */
    virtual void updateNetworkApplianceFirewallL7FirewallRules(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallL7FirewallRules_request> &oai_update_network_appliance_firewall_l7_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallL7FirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_one_to_many_nat_rules_request OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request [required]
    */
    virtual void updateNetworkApplianceFirewallOneToManyNatRules(const QString &network_id, const OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request &oai_update_network_appliance_firewall_one_to_many_nat_rules_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_one_to_one_nat_rules_request OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request [required]
    */
    virtual void updateNetworkApplianceFirewallOneToOneNatRules(const QString &network_id, const OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request &oai_update_network_appliance_firewall_one_to_one_nat_rules_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_port_forwarding_rules_request OAIUpdateNetworkApplianceFirewallPortForwardingRules_request [required]
    */
    virtual void updateNetworkApplianceFirewallPortForwardingRules(const QString &network_id, const OAIUpdateNetworkApplianceFirewallPortForwardingRules_request &oai_update_network_appliance_firewall_port_forwarding_rules_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_settings_request OAIUpdateNetworkApplianceFirewallSettings_request [optional]
    */
    virtual void updateNetworkApplianceFirewallSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallSettings_request> &oai_update_network_appliance_firewall_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  port_id QString [required]
    * @param[in]  oai_update_network_appliance_port_request OAIUpdateNetworkAppliancePort_request [optional]
    */
    virtual void updateNetworkAppliancePort(const QString &network_id, const QString &port_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkAppliancePort_request> &oai_update_network_appliance_port_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkAppliancePort_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  static_delegated_prefix_id QString [required]
    * @param[in]  oai_update_network_appliance_prefixes_delegated_static_request OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request [optional]
    */
    virtual void updateNetworkAppliancePrefixesDelegatedStatic(const QString &network_id, const QString &static_delegated_prefix_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request> &oai_update_network_appliance_prefixes_delegated_static_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkAppliancePrefixesDelegatedStatic_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_security_intrusion_request OAIUpdateNetworkApplianceSecurityIntrusion_request [optional]
    */
    virtual void updateNetworkApplianceSecurityIntrusion(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSecurityIntrusion_request> &oai_update_network_appliance_security_intrusion_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSecurityIntrusion_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_security_malware_request OAIUpdateNetworkApplianceSecurityMalware_request [required]
    */
    virtual void updateNetworkApplianceSecurityMalware(const QString &network_id, const OAIUpdateNetworkApplianceSecurityMalware_request &oai_update_network_appliance_security_malware_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_settings_request OAIUpdateNetworkApplianceSettings_request [optional]
    */
    virtual void updateNetworkApplianceSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSettings_request> &oai_update_network_appliance_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_single_lan_request OAIUpdateNetworkApplianceSingleLan_request [optional]
    */
    virtual void updateNetworkApplianceSingleLan(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSingleLan_request> &oai_update_network_appliance_single_lan_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSingleLan_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_appliance_ssid_request OAIUpdateNetworkApplianceSsid_request [optional]
    */
    virtual void updateNetworkApplianceSsid(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSsid_request> &oai_update_network_appliance_ssid_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSsid_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  static_route_id QString [required]
    * @param[in]  oai_update_network_appliance_static_route_request OAIUpdateNetworkApplianceStaticRoute_request [optional]
    */
    virtual void updateNetworkApplianceStaticRoute(const QString &network_id, const QString &static_route_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceStaticRoute_request> &oai_update_network_appliance_static_route_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceStaticRoute_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_traffic_shaping_request OAIUpdateNetworkApplianceTrafficShaping_request [optional]
    */
    virtual void updateNetworkApplianceTrafficShaping(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShaping_request> &oai_update_network_appliance_traffic_shaping_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShaping_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  custom_performance_class_id QString [required]
    * @param[in]  oai_update_network_appliance_traffic_shaping_custom_performance_class_request OAIUpdateNetworkApplianceTrafficShapingCustomPerformanceClass_request [optional]
    */
    virtual void updateNetworkApplianceTrafficShapingCustomPerformanceClass(const QString &network_id, const QString &custom_performance_class_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShapingCustomPerformanceClass_request> &oai_update_network_appliance_traffic_shaping_custom_performance_class_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShapingCustomPerformanceClass_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_traffic_shaping_rules_request OAIUpdateNetworkApplianceTrafficShapingRules_request [optional]
    */
    virtual void updateNetworkApplianceTrafficShapingRules(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShapingRules_request> &oai_update_network_appliance_traffic_shaping_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShapingRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_traffic_shaping_uplink_bandwidth_request OAIUpdateNetworkApplianceTrafficShapingUplinkBandwidth_request [optional]
    */
    virtual void updateNetworkApplianceTrafficShapingUplinkBandwidth(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShapingUplinkBandwidth_request> &oai_update_network_appliance_traffic_shaping_uplink_bandwidth_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShapingUplinkBandwidth_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_traffic_shaping_uplink_selection_request OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request [optional]
    */
    virtual void updateNetworkApplianceTrafficShapingUplinkSelection(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request> &oai_update_network_appliance_traffic_shaping_uplink_selection_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceTrafficShapingUplinkSelection_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  vlan_id QString [required]
    * @param[in]  oai_update_network_appliance_vlan_request OAIUpdateNetworkApplianceVlan_request [optional]
    */
    virtual void updateNetworkApplianceVlan(const QString &network_id, const QString &vlan_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceVlan_request> &oai_update_network_appliance_vlan_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceVlan_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_vlans_settings_request OAIUpdateNetworkApplianceVlansSettings_request [optional]
    */
    virtual void updateNetworkApplianceVlansSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceVlansSettings_request> &oai_update_network_appliance_vlans_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceVlansSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_vpn_bgp_request OAIUpdateNetworkApplianceVpnBgp_request [required]
    */
    virtual void updateNetworkApplianceVpnBgp(const QString &network_id, const OAIUpdateNetworkApplianceVpnBgp_request &oai_update_network_appliance_vpn_bgp_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_vpn_site_to_site_vpn_request OAIUpdateNetworkApplianceVpnSiteToSiteVpn_request [required]
    */
    virtual void updateNetworkApplianceVpnSiteToSiteVpn(const QString &network_id, const OAIUpdateNetworkApplianceVpnSiteToSiteVpn_request &oai_update_network_appliance_vpn_site_to_site_vpn_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_warm_spare_request OAIUpdateNetworkApplianceWarmSpare_request [required]
    */
    virtual void updateNetworkApplianceWarmSpare(const QString &network_id, const OAIUpdateNetworkApplianceWarmSpare_request &oai_update_network_appliance_warm_spare_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_appliance_security_intrusion_request OAIUpdateOrganizationApplianceSecurityIntrusion_request [required]
    */
    virtual void updateOrganizationApplianceSecurityIntrusion(const QString &organization_id, const OAIUpdateOrganizationApplianceSecurityIntrusion_request &oai_update_organization_appliance_security_intrusion_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_appliance_vpn_third_party_vpn_peers_request OAIUpdateOrganizationApplianceVpnThirdPartyVPNPeers_request [required]
    */
    virtual void updateOrganizationApplianceVpnThirdPartyVPNPeers(const QString &organization_id, const OAIUpdateOrganizationApplianceVpnThirdPartyVPNPeers_request &oai_update_organization_appliance_vpn_third_party_vpn_peers_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_appliance_vpn_vpn_firewall_rules_request OAIUpdateOrganizationApplianceVpnVpnFirewallRules_request [optional]
    */
    virtual void updateOrganizationApplianceVpnVpnFirewallRules(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationApplianceVpnVpnFirewallRules_request> &oai_update_organization_appliance_vpn_vpn_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationApplianceVpnVpnFirewallRules_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createDeviceApplianceVmxAuthenticationTokenCallback(OAIHttpRequestWorker *worker);
    void createNetworkAppliancePrefixesDelegatedStaticCallback(OAIHttpRequestWorker *worker);
    void createNetworkApplianceStaticRouteCallback(OAIHttpRequestWorker *worker);
    void createNetworkApplianceTrafficShapingCustomPerformanceClassCallback(OAIHttpRequestWorker *worker);
    void createNetworkApplianceVlanCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkAppliancePrefixesDelegatedStaticCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkApplianceStaticRouteCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkApplianceTrafficShapingCustomPerformanceClassCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkApplianceVlanCallback(OAIHttpRequestWorker *worker);
    void getDeviceApplianceDhcpSubnetsCallback(OAIHttpRequestWorker *worker);
    void getDeviceAppliancePerformanceCallback(OAIHttpRequestWorker *worker);
    void getDeviceAppliancePrefixesDelegatedCallback(OAIHttpRequestWorker *worker);
    void getDeviceAppliancePrefixesDelegatedVlanAssignmentsCallback(OAIHttpRequestWorker *worker);
    void getDeviceApplianceUplinksSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceClientSecurityEventsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceConnectivityMonitoringDestinationsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceContentFilteringCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceContentFilteringCategoriesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallCellularFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallFirewalledServiceCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallFirewalledServicesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallInboundCellularFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallInboundFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallL3FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallL7FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallOneToManyNatRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallOneToOneNatRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallPortForwardingRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkAppliancePortCallback(OAIHttpRequestWorker *worker);
    void getNetworkAppliancePortsCallback(OAIHttpRequestWorker *worker);
    void getNetworkAppliancePrefixesDelegatedStaticCallback(OAIHttpRequestWorker *worker);
    void getNetworkAppliancePrefixesDelegatedStaticsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSecurityEventsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSecurityIntrusionCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSecurityMalwareCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSingleLanCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSsidCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSsidsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceStaticRouteCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceStaticRoutesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceTrafficShapingCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceTrafficShapingRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceTrafficShapingUplinkBandwidthCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceTrafficShapingUplinkSelectionCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceUplinksUsageHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceVlanCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceVlansCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceVlansSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceVpnBgpCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceVpnSiteToSiteVpnCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceWarmSpareCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceSecurityEventsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceSecurityIntrusionCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceUplinkStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceVpnStatsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceVpnStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceVpnThirdPartyVPNPeersCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceVpnVpnFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void swapNetworkApplianceWarmSpareCallback(OAIHttpRequestWorker *worker);
    void updateDeviceApplianceUplinksSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceConnectivityMonitoringDestinationsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceContentFilteringCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallCellularFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallFirewalledServiceCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallInboundFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallL3FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallL7FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallOneToManyNatRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallOneToOneNatRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallPortForwardingRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkAppliancePortCallback(OAIHttpRequestWorker *worker);
    void updateNetworkAppliancePrefixesDelegatedStaticCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceSecurityIntrusionCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceSecurityMalwareCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceSingleLanCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceSsidCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceStaticRouteCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceTrafficShapingCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceTrafficShapingCustomPerformanceClassCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceTrafficShapingRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceTrafficShapingUplinkBandwidthCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceTrafficShapingUplinkSelectionCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceVlanCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceVlansSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceVpnBgpCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceVpnSiteToSiteVpnCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceWarmSpareCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationApplianceSecurityIntrusionCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationApplianceVpnThirdPartyVPNPeersCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationApplianceVpnVpnFirewallRulesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createDeviceApplianceVmxAuthenticationTokenSignal(OAICreateDeviceApplianceVmxAuthenticationToken_201_response summary);
    void createNetworkAppliancePrefixesDelegatedStaticSignal(OAIObject summary);
    void createNetworkApplianceStaticRouteSignal(OAIObject summary);
    void createNetworkApplianceTrafficShapingCustomPerformanceClassSignal(OAIObject summary);
    void createNetworkApplianceVlanSignal(OAICreateNetworkApplianceVlan_201_response summary);
    void deleteNetworkAppliancePrefixesDelegatedStaticSignal();
    void deleteNetworkApplianceStaticRouteSignal();
    void deleteNetworkApplianceTrafficShapingCustomPerformanceClassSignal();
    void deleteNetworkApplianceVlanSignal();
    void getDeviceApplianceDhcpSubnetsSignal(QList<OAIObject> summary);
    void getDeviceAppliancePerformanceSignal(OAIObject summary);
    void getDeviceAppliancePrefixesDelegatedSignal(QList<OAIObject> summary);
    void getDeviceAppliancePrefixesDelegatedVlanAssignmentsSignal(QList<OAIObject> summary);
    void getDeviceApplianceUplinksSettingsSignal(OAIGetDeviceApplianceUplinksSettings_200_response summary);
    void getNetworkApplianceClientSecurityEventsSignal(QList<OAIObject> summary);
    void getNetworkApplianceConnectivityMonitoringDestinationsSignal(OAIObject summary);
    void getNetworkApplianceContentFilteringSignal(OAIObject summary);
    void getNetworkApplianceContentFilteringCategoriesSignal(OAIObject summary);
    void getNetworkApplianceFirewallCellularFirewallRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallFirewalledServiceSignal(OAIObject summary);
    void getNetworkApplianceFirewallFirewalledServicesSignal(QList<OAIObject> summary);
    void getNetworkApplianceFirewallInboundCellularFirewallRulesSignal(QList<OAIObject> summary);
    void getNetworkApplianceFirewallInboundFirewallRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallL3FirewallRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallL7FirewallRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignal(OAIObject summary);
    void getNetworkApplianceFirewallOneToManyNatRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallOneToOneNatRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallPortForwardingRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallSettingsSignal(OAIObject summary);
    void getNetworkAppliancePortSignal(OAIGetNetworkAppliancePorts_200_response_inner summary);
    void getNetworkAppliancePortsSignal(QList<OAIGetNetworkAppliancePorts_200_response_inner> summary);
    void getNetworkAppliancePrefixesDelegatedStaticSignal(OAIGetNetworkAppliancePrefixesDelegatedStatics_200_response_inner summary);
    void getNetworkAppliancePrefixesDelegatedStaticsSignal(QList<OAIGetNetworkAppliancePrefixesDelegatedStatics_200_response_inner> summary);
    void getNetworkApplianceSecurityEventsSignal(QList<OAIObject> summary);
    void getNetworkApplianceSecurityIntrusionSignal(OAIObject summary);
    void getNetworkApplianceSecurityMalwareSignal(OAIObject summary);
    void getNetworkApplianceSettingsSignal(OAIGetNetworkApplianceSettings_200_response summary);
    void getNetworkApplianceSingleLanSignal(OAIGetNetworkApplianceSingleLan_200_response summary);
    void getNetworkApplianceSsidSignal(OAIGetNetworkApplianceSsids_200_response_inner summary);
    void getNetworkApplianceSsidsSignal(QList<OAIGetNetworkApplianceSsids_200_response_inner> summary);
    void getNetworkApplianceStaticRouteSignal(OAIObject summary);
    void getNetworkApplianceStaticRoutesSignal(QList<OAIObject> summary);
    void getNetworkApplianceTrafficShapingSignal(OAIObject summary);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassSignal(OAIObject summary);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassesSignal(QList<OAIObject> summary);
    void getNetworkApplianceTrafficShapingRulesSignal(OAIObject summary);
    void getNetworkApplianceTrafficShapingUplinkBandwidthSignal(OAIGetNetworkApplianceTrafficShapingUplinkBandwidth_200_response summary);
    void getNetworkApplianceTrafficShapingUplinkSelectionSignal(OAIGetNetworkApplianceTrafficShapingUplinkSelection_200_response summary);
    void getNetworkApplianceUplinksUsageHistorySignal(QList<OAIObject> summary);
    void getNetworkApplianceVlanSignal(OAIGetNetworkApplianceVlans_200_response_inner summary);
    void getNetworkApplianceVlansSignal(QList<OAIGetNetworkApplianceVlans_200_response_inner> summary);
    void getNetworkApplianceVlansSettingsSignal(OAIObject summary);
    void getNetworkApplianceVpnBgpSignal(OAIObject summary);
    void getNetworkApplianceVpnSiteToSiteVpnSignal(OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary);
    void getNetworkApplianceWarmSpareSignal(OAIObject summary);
    void getOrganizationApplianceSecurityEventsSignal(QList<OAIObject> summary);
    void getOrganizationApplianceSecurityIntrusionSignal(OAIObject summary);
    void getOrganizationApplianceUplinkStatusesSignal(QList<OAIObject> summary);
    void getOrganizationApplianceVpnStatsSignal(QList<OAIObject> summary);
    void getOrganizationApplianceVpnStatusesSignal(QList<OAIObject> summary);
    void getOrganizationApplianceVpnThirdPartyVPNPeersSignal(OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary);
    void getOrganizationApplianceVpnVpnFirewallRulesSignal(OAIObject summary);
    void swapNetworkApplianceWarmSpareSignal(OAIObject summary);
    void updateDeviceApplianceUplinksSettingsSignal(OAIGetDeviceApplianceUplinksSettings_200_response summary);
    void updateNetworkApplianceConnectivityMonitoringDestinationsSignal(OAIObject summary);
    void updateNetworkApplianceContentFilteringSignal(OAIObject summary);
    void updateNetworkApplianceFirewallCellularFirewallRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallFirewalledServiceSignal(OAIObject summary);
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesSignal(QList<OAIObject> summary);
    void updateNetworkApplianceFirewallInboundFirewallRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallL3FirewallRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallL7FirewallRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallOneToManyNatRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallOneToOneNatRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallPortForwardingRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallSettingsSignal(OAIObject summary);
    void updateNetworkAppliancePortSignal(OAIGetNetworkAppliancePorts_200_response_inner summary);
    void updateNetworkAppliancePrefixesDelegatedStaticSignal(OAIObject summary);
    void updateNetworkApplianceSecurityIntrusionSignal(OAIObject summary);
    void updateNetworkApplianceSecurityMalwareSignal(OAIObject summary);
    void updateNetworkApplianceSettingsSignal(OAIGetNetworkApplianceSettings_200_response summary);
    void updateNetworkApplianceSingleLanSignal(OAIGetNetworkApplianceSingleLan_200_response summary);
    void updateNetworkApplianceSsidSignal(OAIGetNetworkApplianceSsids_200_response_inner summary);
    void updateNetworkApplianceStaticRouteSignal(OAIObject summary);
    void updateNetworkApplianceTrafficShapingSignal(OAIObject summary);
    void updateNetworkApplianceTrafficShapingCustomPerformanceClassSignal(OAIObject summary);
    void updateNetworkApplianceTrafficShapingRulesSignal(OAIObject summary);
    void updateNetworkApplianceTrafficShapingUplinkBandwidthSignal(OAIObject summary);
    void updateNetworkApplianceTrafficShapingUplinkSelectionSignal(OAIGetNetworkApplianceTrafficShapingUplinkSelection_200_response summary);
    void updateNetworkApplianceVlanSignal(OAIGetNetworkApplianceVlans_200_response_inner summary);
    void updateNetworkApplianceVlansSettingsSignal(OAIObject summary);
    void updateNetworkApplianceVpnBgpSignal(OAIObject summary);
    void updateNetworkApplianceVpnSiteToSiteVpnSignal(OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary);
    void updateNetworkApplianceWarmSpareSignal(OAIObject summary);
    void updateOrganizationApplianceSecurityIntrusionSignal(OAIObject summary);
    void updateOrganizationApplianceVpnThirdPartyVPNPeersSignal(OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary);
    void updateOrganizationApplianceVpnVpnFirewallRulesSignal(OAIObject summary);


    void createDeviceApplianceVmxAuthenticationTokenSignalFull(OAIHttpRequestWorker *worker, OAICreateDeviceApplianceVmxAuthenticationToken_201_response summary);
    void createNetworkAppliancePrefixesDelegatedStaticSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkApplianceStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkApplianceTrafficShapingCustomPerformanceClassSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkApplianceVlanSignalFull(OAIHttpRequestWorker *worker, OAICreateNetworkApplianceVlan_201_response summary);
    void deleteNetworkAppliancePrefixesDelegatedStaticSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkApplianceStaticRouteSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkApplianceTrafficShapingCustomPerformanceClassSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkApplianceVlanSignalFull(OAIHttpRequestWorker *worker);
    void getDeviceApplianceDhcpSubnetsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceAppliancePerformanceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceAppliancePrefixesDelegatedSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceAppliancePrefixesDelegatedVlanAssignmentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceApplianceUplinksSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceApplianceUplinksSettings_200_response summary);
    void getNetworkApplianceClientSecurityEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkApplianceConnectivityMonitoringDestinationsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceContentFilteringSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceContentFilteringCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallCellularFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallFirewalledServiceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallFirewalledServicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkApplianceFirewallInboundCellularFirewallRulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkApplianceFirewallInboundFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallL3FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallL7FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallOneToManyNatRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallOneToOneNatRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallPortForwardingRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkAppliancePortSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkAppliancePorts_200_response_inner summary);
    void getNetworkAppliancePortsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkAppliancePorts_200_response_inner> summary);
    void getNetworkAppliancePrefixesDelegatedStaticSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkAppliancePrefixesDelegatedStatics_200_response_inner summary);
    void getNetworkAppliancePrefixesDelegatedStaticsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkAppliancePrefixesDelegatedStatics_200_response_inner> summary);
    void getNetworkApplianceSecurityEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkApplianceSecurityIntrusionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceSecurityMalwareSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceSettings_200_response summary);
    void getNetworkApplianceSingleLanSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceSingleLan_200_response summary);
    void getNetworkApplianceSsidSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceSsids_200_response_inner summary);
    void getNetworkApplianceSsidsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkApplianceSsids_200_response_inner> summary);
    void getNetworkApplianceStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceStaticRoutesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkApplianceTrafficShapingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkApplianceTrafficShapingRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceTrafficShapingUplinkBandwidthSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceTrafficShapingUplinkBandwidth_200_response summary);
    void getNetworkApplianceTrafficShapingUplinkSelectionSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceTrafficShapingUplinkSelection_200_response summary);
    void getNetworkApplianceUplinksUsageHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkApplianceVlanSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceVlans_200_response_inner summary);
    void getNetworkApplianceVlansSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkApplianceVlans_200_response_inner> summary);
    void getNetworkApplianceVlansSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceVpnBgpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceVpnSiteToSiteVpnSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary);
    void getNetworkApplianceWarmSpareSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationApplianceSecurityEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationApplianceSecurityIntrusionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationApplianceUplinkStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationApplianceVpnStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationApplianceVpnStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationApplianceVpnThirdPartyVPNPeersSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary);
    void getOrganizationApplianceVpnVpnFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void swapNetworkApplianceWarmSpareSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceApplianceUplinksSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceApplianceUplinksSettings_200_response summary);
    void updateNetworkApplianceConnectivityMonitoringDestinationsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceContentFilteringSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallCellularFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallFirewalledServiceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void updateNetworkApplianceFirewallInboundFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallL3FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallL7FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallOneToManyNatRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallOneToOneNatRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallPortForwardingRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkAppliancePortSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkAppliancePorts_200_response_inner summary);
    void updateNetworkAppliancePrefixesDelegatedStaticSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceSecurityIntrusionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceSecurityMalwareSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceSettings_200_response summary);
    void updateNetworkApplianceSingleLanSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceSingleLan_200_response summary);
    void updateNetworkApplianceSsidSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceSsids_200_response_inner summary);
    void updateNetworkApplianceStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceTrafficShapingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceTrafficShapingCustomPerformanceClassSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceTrafficShapingRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceTrafficShapingUplinkBandwidthSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceTrafficShapingUplinkSelectionSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceTrafficShapingUplinkSelection_200_response summary);
    void updateNetworkApplianceVlanSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceVlans_200_response_inner summary);
    void updateNetworkApplianceVlansSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceVpnBgpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceVpnSiteToSiteVpnSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary);
    void updateNetworkApplianceWarmSpareSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationApplianceSecurityIntrusionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationApplianceVpnThirdPartyVPNPeersSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary);
    void updateOrganizationApplianceVpnVpnFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createDeviceApplianceVmxAuthenticationTokenSignalError() instead")
    void createDeviceApplianceVmxAuthenticationTokenSignalE(OAICreateDeviceApplianceVmxAuthenticationToken_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceApplianceVmxAuthenticationTokenSignalError(OAICreateDeviceApplianceVmxAuthenticationToken_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkAppliancePrefixesDelegatedStaticSignalError() instead")
    void createNetworkAppliancePrefixesDelegatedStaticSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkAppliancePrefixesDelegatedStaticSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkApplianceStaticRouteSignalError() instead")
    void createNetworkApplianceStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkApplianceStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkApplianceTrafficShapingCustomPerformanceClassSignalError() instead")
    void createNetworkApplianceTrafficShapingCustomPerformanceClassSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkApplianceTrafficShapingCustomPerformanceClassSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkApplianceVlanSignalError() instead")
    void createNetworkApplianceVlanSignalE(OAICreateNetworkApplianceVlan_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkApplianceVlanSignalError(OAICreateNetworkApplianceVlan_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkAppliancePrefixesDelegatedStaticSignalError() instead")
    void deleteNetworkAppliancePrefixesDelegatedStaticSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkAppliancePrefixesDelegatedStaticSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkApplianceStaticRouteSignalError() instead")
    void deleteNetworkApplianceStaticRouteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkApplianceStaticRouteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkApplianceTrafficShapingCustomPerformanceClassSignalError() instead")
    void deleteNetworkApplianceTrafficShapingCustomPerformanceClassSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkApplianceTrafficShapingCustomPerformanceClassSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkApplianceVlanSignalError() instead")
    void deleteNetworkApplianceVlanSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkApplianceVlanSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceApplianceDhcpSubnetsSignalError() instead")
    void getDeviceApplianceDhcpSubnetsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceApplianceDhcpSubnetsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceAppliancePerformanceSignalError() instead")
    void getDeviceAppliancePerformanceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceAppliancePerformanceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceAppliancePrefixesDelegatedSignalError() instead")
    void getDeviceAppliancePrefixesDelegatedSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceAppliancePrefixesDelegatedSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceAppliancePrefixesDelegatedVlanAssignmentsSignalError() instead")
    void getDeviceAppliancePrefixesDelegatedVlanAssignmentsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceAppliancePrefixesDelegatedVlanAssignmentsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceApplianceUplinksSettingsSignalError() instead")
    void getDeviceApplianceUplinksSettingsSignalE(OAIGetDeviceApplianceUplinksSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceApplianceUplinksSettingsSignalError(OAIGetDeviceApplianceUplinksSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceClientSecurityEventsSignalError() instead")
    void getNetworkApplianceClientSecurityEventsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceClientSecurityEventsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceConnectivityMonitoringDestinationsSignalError() instead")
    void getNetworkApplianceConnectivityMonitoringDestinationsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceConnectivityMonitoringDestinationsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceContentFilteringSignalError() instead")
    void getNetworkApplianceContentFilteringSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceContentFilteringSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceContentFilteringCategoriesSignalError() instead")
    void getNetworkApplianceContentFilteringCategoriesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceContentFilteringCategoriesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallCellularFirewallRulesSignalError() instead")
    void getNetworkApplianceFirewallCellularFirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallCellularFirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallFirewalledServiceSignalError() instead")
    void getNetworkApplianceFirewallFirewalledServiceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallFirewalledServiceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallFirewalledServicesSignalError() instead")
    void getNetworkApplianceFirewallFirewalledServicesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallFirewalledServicesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallInboundCellularFirewallRulesSignalError() instead")
    void getNetworkApplianceFirewallInboundCellularFirewallRulesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallInboundCellularFirewallRulesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallInboundFirewallRulesSignalError() instead")
    void getNetworkApplianceFirewallInboundFirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallInboundFirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL3FirewallRulesSignalError() instead")
    void getNetworkApplianceFirewallL3FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL3FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL7FirewallRulesSignalError() instead")
    void getNetworkApplianceFirewallL7FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL7FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalError() instead")
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallOneToManyNatRulesSignalError() instead")
    void getNetworkApplianceFirewallOneToManyNatRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallOneToManyNatRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallOneToOneNatRulesSignalError() instead")
    void getNetworkApplianceFirewallOneToOneNatRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallOneToOneNatRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallPortForwardingRulesSignalError() instead")
    void getNetworkApplianceFirewallPortForwardingRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallPortForwardingRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallSettingsSignalError() instead")
    void getNetworkApplianceFirewallSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePortSignalError() instead")
    void getNetworkAppliancePortSignalE(OAIGetNetworkAppliancePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePortSignalError(OAIGetNetworkAppliancePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePortsSignalError() instead")
    void getNetworkAppliancePortsSignalE(QList<OAIGetNetworkAppliancePorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePortsSignalError(QList<OAIGetNetworkAppliancePorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePrefixesDelegatedStaticSignalError() instead")
    void getNetworkAppliancePrefixesDelegatedStaticSignalE(OAIGetNetworkAppliancePrefixesDelegatedStatics_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePrefixesDelegatedStaticSignalError(OAIGetNetworkAppliancePrefixesDelegatedStatics_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePrefixesDelegatedStaticsSignalError() instead")
    void getNetworkAppliancePrefixesDelegatedStaticsSignalE(QList<OAIGetNetworkAppliancePrefixesDelegatedStatics_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePrefixesDelegatedStaticsSignalError(QList<OAIGetNetworkAppliancePrefixesDelegatedStatics_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSecurityEventsSignalError() instead")
    void getNetworkApplianceSecurityEventsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSecurityEventsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSecurityIntrusionSignalError() instead")
    void getNetworkApplianceSecurityIntrusionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSecurityIntrusionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSecurityMalwareSignalError() instead")
    void getNetworkApplianceSecurityMalwareSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSecurityMalwareSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSettingsSignalError() instead")
    void getNetworkApplianceSettingsSignalE(OAIGetNetworkApplianceSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSettingsSignalError(OAIGetNetworkApplianceSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSingleLanSignalError() instead")
    void getNetworkApplianceSingleLanSignalE(OAIGetNetworkApplianceSingleLan_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSingleLanSignalError(OAIGetNetworkApplianceSingleLan_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSsidSignalError() instead")
    void getNetworkApplianceSsidSignalE(OAIGetNetworkApplianceSsids_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSsidSignalError(OAIGetNetworkApplianceSsids_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSsidsSignalError() instead")
    void getNetworkApplianceSsidsSignalE(QList<OAIGetNetworkApplianceSsids_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSsidsSignalError(QList<OAIGetNetworkApplianceSsids_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceStaticRouteSignalError() instead")
    void getNetworkApplianceStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceStaticRoutesSignalError() instead")
    void getNetworkApplianceStaticRoutesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceStaticRoutesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingSignalError() instead")
    void getNetworkApplianceTrafficShapingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingCustomPerformanceClassSignalError() instead")
    void getNetworkApplianceTrafficShapingCustomPerformanceClassSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingCustomPerformanceClassesSignalError() instead")
    void getNetworkApplianceTrafficShapingCustomPerformanceClassesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingRulesSignalError() instead")
    void getNetworkApplianceTrafficShapingRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingUplinkBandwidthSignalError() instead")
    void getNetworkApplianceTrafficShapingUplinkBandwidthSignalE(OAIGetNetworkApplianceTrafficShapingUplinkBandwidth_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingUplinkBandwidthSignalError(OAIGetNetworkApplianceTrafficShapingUplinkBandwidth_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingUplinkSelectionSignalError() instead")
    void getNetworkApplianceTrafficShapingUplinkSelectionSignalE(OAIGetNetworkApplianceTrafficShapingUplinkSelection_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingUplinkSelectionSignalError(OAIGetNetworkApplianceTrafficShapingUplinkSelection_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceUplinksUsageHistorySignalError() instead")
    void getNetworkApplianceUplinksUsageHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceUplinksUsageHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVlanSignalError() instead")
    void getNetworkApplianceVlanSignalE(OAIGetNetworkApplianceVlans_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVlanSignalError(OAIGetNetworkApplianceVlans_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVlansSignalError() instead")
    void getNetworkApplianceVlansSignalE(QList<OAIGetNetworkApplianceVlans_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVlansSignalError(QList<OAIGetNetworkApplianceVlans_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVlansSettingsSignalError() instead")
    void getNetworkApplianceVlansSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVlansSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVpnBgpSignalError() instead")
    void getNetworkApplianceVpnBgpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVpnBgpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVpnSiteToSiteVpnSignalError() instead")
    void getNetworkApplianceVpnSiteToSiteVpnSignalE(OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVpnSiteToSiteVpnSignalError(OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceWarmSpareSignalError() instead")
    void getNetworkApplianceWarmSpareSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceWarmSpareSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceSecurityEventsSignalError() instead")
    void getOrganizationApplianceSecurityEventsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceSecurityEventsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceSecurityIntrusionSignalError() instead")
    void getOrganizationApplianceSecurityIntrusionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceSecurityIntrusionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceUplinkStatusesSignalError() instead")
    void getOrganizationApplianceUplinkStatusesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceUplinkStatusesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnStatsSignalError() instead")
    void getOrganizationApplianceVpnStatsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnStatsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnStatusesSignalError() instead")
    void getOrganizationApplianceVpnStatusesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnStatusesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnThirdPartyVPNPeersSignalError() instead")
    void getOrganizationApplianceVpnThirdPartyVPNPeersSignalE(OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnThirdPartyVPNPeersSignalError(OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnVpnFirewallRulesSignalError() instead")
    void getOrganizationApplianceVpnVpnFirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnVpnFirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use swapNetworkApplianceWarmSpareSignalError() instead")
    void swapNetworkApplianceWarmSpareSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void swapNetworkApplianceWarmSpareSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceApplianceUplinksSettingsSignalError() instead")
    void updateDeviceApplianceUplinksSettingsSignalE(OAIGetDeviceApplianceUplinksSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceApplianceUplinksSettingsSignalError(OAIGetDeviceApplianceUplinksSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceConnectivityMonitoringDestinationsSignalError() instead")
    void updateNetworkApplianceConnectivityMonitoringDestinationsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceConnectivityMonitoringDestinationsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceContentFilteringSignalError() instead")
    void updateNetworkApplianceContentFilteringSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceContentFilteringSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallCellularFirewallRulesSignalError() instead")
    void updateNetworkApplianceFirewallCellularFirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallCellularFirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallFirewalledServiceSignalError() instead")
    void updateNetworkApplianceFirewallFirewalledServiceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallFirewalledServiceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalError() instead")
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallInboundFirewallRulesSignalError() instead")
    void updateNetworkApplianceFirewallInboundFirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallInboundFirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallL3FirewallRulesSignalError() instead")
    void updateNetworkApplianceFirewallL3FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallL3FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallL7FirewallRulesSignalError() instead")
    void updateNetworkApplianceFirewallL7FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallL7FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallOneToManyNatRulesSignalError() instead")
    void updateNetworkApplianceFirewallOneToManyNatRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallOneToManyNatRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallOneToOneNatRulesSignalError() instead")
    void updateNetworkApplianceFirewallOneToOneNatRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallOneToOneNatRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallPortForwardingRulesSignalError() instead")
    void updateNetworkApplianceFirewallPortForwardingRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallPortForwardingRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallSettingsSignalError() instead")
    void updateNetworkApplianceFirewallSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkAppliancePortSignalError() instead")
    void updateNetworkAppliancePortSignalE(OAIGetNetworkAppliancePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkAppliancePortSignalError(OAIGetNetworkAppliancePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkAppliancePrefixesDelegatedStaticSignalError() instead")
    void updateNetworkAppliancePrefixesDelegatedStaticSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkAppliancePrefixesDelegatedStaticSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSecurityIntrusionSignalError() instead")
    void updateNetworkApplianceSecurityIntrusionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSecurityIntrusionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSecurityMalwareSignalError() instead")
    void updateNetworkApplianceSecurityMalwareSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSecurityMalwareSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSettingsSignalError() instead")
    void updateNetworkApplianceSettingsSignalE(OAIGetNetworkApplianceSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSettingsSignalError(OAIGetNetworkApplianceSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSingleLanSignalError() instead")
    void updateNetworkApplianceSingleLanSignalE(OAIGetNetworkApplianceSingleLan_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSingleLanSignalError(OAIGetNetworkApplianceSingleLan_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSsidSignalError() instead")
    void updateNetworkApplianceSsidSignalE(OAIGetNetworkApplianceSsids_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSsidSignalError(OAIGetNetworkApplianceSsids_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceStaticRouteSignalError() instead")
    void updateNetworkApplianceStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingSignalError() instead")
    void updateNetworkApplianceTrafficShapingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingCustomPerformanceClassSignalError() instead")
    void updateNetworkApplianceTrafficShapingCustomPerformanceClassSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingCustomPerformanceClassSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingRulesSignalError() instead")
    void updateNetworkApplianceTrafficShapingRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingUplinkBandwidthSignalError() instead")
    void updateNetworkApplianceTrafficShapingUplinkBandwidthSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingUplinkBandwidthSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingUplinkSelectionSignalError() instead")
    void updateNetworkApplianceTrafficShapingUplinkSelectionSignalE(OAIGetNetworkApplianceTrafficShapingUplinkSelection_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingUplinkSelectionSignalError(OAIGetNetworkApplianceTrafficShapingUplinkSelection_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVlanSignalError() instead")
    void updateNetworkApplianceVlanSignalE(OAIGetNetworkApplianceVlans_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVlanSignalError(OAIGetNetworkApplianceVlans_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVlansSettingsSignalError() instead")
    void updateNetworkApplianceVlansSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVlansSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVpnBgpSignalError() instead")
    void updateNetworkApplianceVpnBgpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVpnBgpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVpnSiteToSiteVpnSignalError() instead")
    void updateNetworkApplianceVpnSiteToSiteVpnSignalE(OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVpnSiteToSiteVpnSignalError(OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceWarmSpareSignalError() instead")
    void updateNetworkApplianceWarmSpareSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceWarmSpareSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationApplianceSecurityIntrusionSignalError() instead")
    void updateOrganizationApplianceSecurityIntrusionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationApplianceSecurityIntrusionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationApplianceVpnThirdPartyVPNPeersSignalError() instead")
    void updateOrganizationApplianceVpnThirdPartyVPNPeersSignalE(OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationApplianceVpnThirdPartyVPNPeersSignalError(OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationApplianceVpnVpnFirewallRulesSignalError() instead")
    void updateOrganizationApplianceVpnVpnFirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationApplianceVpnVpnFirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createDeviceApplianceVmxAuthenticationTokenSignalErrorFull() instead")
    void createDeviceApplianceVmxAuthenticationTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceApplianceVmxAuthenticationTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkAppliancePrefixesDelegatedStaticSignalErrorFull() instead")
    void createNetworkAppliancePrefixesDelegatedStaticSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkAppliancePrefixesDelegatedStaticSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkApplianceStaticRouteSignalErrorFull() instead")
    void createNetworkApplianceStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkApplianceStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkApplianceTrafficShapingCustomPerformanceClassSignalErrorFull() instead")
    void createNetworkApplianceTrafficShapingCustomPerformanceClassSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkApplianceTrafficShapingCustomPerformanceClassSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkApplianceVlanSignalErrorFull() instead")
    void createNetworkApplianceVlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkApplianceVlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkAppliancePrefixesDelegatedStaticSignalErrorFull() instead")
    void deleteNetworkAppliancePrefixesDelegatedStaticSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkAppliancePrefixesDelegatedStaticSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkApplianceStaticRouteSignalErrorFull() instead")
    void deleteNetworkApplianceStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkApplianceStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkApplianceTrafficShapingCustomPerformanceClassSignalErrorFull() instead")
    void deleteNetworkApplianceTrafficShapingCustomPerformanceClassSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkApplianceTrafficShapingCustomPerformanceClassSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkApplianceVlanSignalErrorFull() instead")
    void deleteNetworkApplianceVlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkApplianceVlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceApplianceDhcpSubnetsSignalErrorFull() instead")
    void getDeviceApplianceDhcpSubnetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceApplianceDhcpSubnetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceAppliancePerformanceSignalErrorFull() instead")
    void getDeviceAppliancePerformanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceAppliancePerformanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceAppliancePrefixesDelegatedSignalErrorFull() instead")
    void getDeviceAppliancePrefixesDelegatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceAppliancePrefixesDelegatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceAppliancePrefixesDelegatedVlanAssignmentsSignalErrorFull() instead")
    void getDeviceAppliancePrefixesDelegatedVlanAssignmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceAppliancePrefixesDelegatedVlanAssignmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceApplianceUplinksSettingsSignalErrorFull() instead")
    void getDeviceApplianceUplinksSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceApplianceUplinksSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceClientSecurityEventsSignalErrorFull() instead")
    void getNetworkApplianceClientSecurityEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceClientSecurityEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceConnectivityMonitoringDestinationsSignalErrorFull() instead")
    void getNetworkApplianceConnectivityMonitoringDestinationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceConnectivityMonitoringDestinationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceContentFilteringSignalErrorFull() instead")
    void getNetworkApplianceContentFilteringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceContentFilteringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceContentFilteringCategoriesSignalErrorFull() instead")
    void getNetworkApplianceContentFilteringCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceContentFilteringCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallCellularFirewallRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallCellularFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallCellularFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallFirewalledServiceSignalErrorFull() instead")
    void getNetworkApplianceFirewallFirewalledServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallFirewalledServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallFirewalledServicesSignalErrorFull() instead")
    void getNetworkApplianceFirewallFirewalledServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallFirewalledServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallInboundCellularFirewallRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallInboundCellularFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallInboundCellularFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallInboundFirewallRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallInboundFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallInboundFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL3FirewallRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallL3FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL3FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL7FirewallRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallL7FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL7FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalErrorFull() instead")
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallOneToManyNatRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallOneToManyNatRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallOneToManyNatRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallOneToOneNatRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallOneToOneNatRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallOneToOneNatRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallPortForwardingRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallPortForwardingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallPortForwardingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallSettingsSignalErrorFull() instead")
    void getNetworkApplianceFirewallSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePortSignalErrorFull() instead")
    void getNetworkAppliancePortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePortsSignalErrorFull() instead")
    void getNetworkAppliancePortsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePortsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePrefixesDelegatedStaticSignalErrorFull() instead")
    void getNetworkAppliancePrefixesDelegatedStaticSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePrefixesDelegatedStaticSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAppliancePrefixesDelegatedStaticsSignalErrorFull() instead")
    void getNetworkAppliancePrefixesDelegatedStaticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAppliancePrefixesDelegatedStaticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSecurityEventsSignalErrorFull() instead")
    void getNetworkApplianceSecurityEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSecurityEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSecurityIntrusionSignalErrorFull() instead")
    void getNetworkApplianceSecurityIntrusionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSecurityIntrusionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSecurityMalwareSignalErrorFull() instead")
    void getNetworkApplianceSecurityMalwareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSecurityMalwareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSettingsSignalErrorFull() instead")
    void getNetworkApplianceSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSingleLanSignalErrorFull() instead")
    void getNetworkApplianceSingleLanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSingleLanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSsidSignalErrorFull() instead")
    void getNetworkApplianceSsidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSsidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSsidsSignalErrorFull() instead")
    void getNetworkApplianceSsidsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSsidsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceStaticRouteSignalErrorFull() instead")
    void getNetworkApplianceStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceStaticRoutesSignalErrorFull() instead")
    void getNetworkApplianceStaticRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceStaticRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingSignalErrorFull() instead")
    void getNetworkApplianceTrafficShapingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingCustomPerformanceClassSignalErrorFull() instead")
    void getNetworkApplianceTrafficShapingCustomPerformanceClassSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingCustomPerformanceClassesSignalErrorFull() instead")
    void getNetworkApplianceTrafficShapingCustomPerformanceClassesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingCustomPerformanceClassesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingRulesSignalErrorFull() instead")
    void getNetworkApplianceTrafficShapingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingUplinkBandwidthSignalErrorFull() instead")
    void getNetworkApplianceTrafficShapingUplinkBandwidthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingUplinkBandwidthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceTrafficShapingUplinkSelectionSignalErrorFull() instead")
    void getNetworkApplianceTrafficShapingUplinkSelectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceTrafficShapingUplinkSelectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceUplinksUsageHistorySignalErrorFull() instead")
    void getNetworkApplianceUplinksUsageHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceUplinksUsageHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVlanSignalErrorFull() instead")
    void getNetworkApplianceVlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVlansSignalErrorFull() instead")
    void getNetworkApplianceVlansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVlansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVlansSettingsSignalErrorFull() instead")
    void getNetworkApplianceVlansSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVlansSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVpnBgpSignalErrorFull() instead")
    void getNetworkApplianceVpnBgpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVpnBgpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVpnSiteToSiteVpnSignalErrorFull() instead")
    void getNetworkApplianceVpnSiteToSiteVpnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVpnSiteToSiteVpnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceWarmSpareSignalErrorFull() instead")
    void getNetworkApplianceWarmSpareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceWarmSpareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceSecurityEventsSignalErrorFull() instead")
    void getOrganizationApplianceSecurityEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceSecurityEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceSecurityIntrusionSignalErrorFull() instead")
    void getOrganizationApplianceSecurityIntrusionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceSecurityIntrusionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceUplinkStatusesSignalErrorFull() instead")
    void getOrganizationApplianceUplinkStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceUplinkStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnStatsSignalErrorFull() instead")
    void getOrganizationApplianceVpnStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnStatusesSignalErrorFull() instead")
    void getOrganizationApplianceVpnStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnThirdPartyVPNPeersSignalErrorFull() instead")
    void getOrganizationApplianceVpnThirdPartyVPNPeersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnThirdPartyVPNPeersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnVpnFirewallRulesSignalErrorFull() instead")
    void getOrganizationApplianceVpnVpnFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnVpnFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use swapNetworkApplianceWarmSpareSignalErrorFull() instead")
    void swapNetworkApplianceWarmSpareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void swapNetworkApplianceWarmSpareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceApplianceUplinksSettingsSignalErrorFull() instead")
    void updateDeviceApplianceUplinksSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceApplianceUplinksSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceConnectivityMonitoringDestinationsSignalErrorFull() instead")
    void updateNetworkApplianceConnectivityMonitoringDestinationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceConnectivityMonitoringDestinationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceContentFilteringSignalErrorFull() instead")
    void updateNetworkApplianceContentFilteringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceContentFilteringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallCellularFirewallRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallCellularFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallCellularFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallFirewalledServiceSignalErrorFull() instead")
    void updateNetworkApplianceFirewallFirewalledServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallFirewalledServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallInboundFirewallRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallInboundFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallInboundFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallL3FirewallRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallL3FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallL3FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallL7FirewallRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallL7FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallL7FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallOneToManyNatRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallOneToManyNatRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallOneToManyNatRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallOneToOneNatRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallOneToOneNatRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallOneToOneNatRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallPortForwardingRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallPortForwardingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallPortForwardingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallSettingsSignalErrorFull() instead")
    void updateNetworkApplianceFirewallSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkAppliancePortSignalErrorFull() instead")
    void updateNetworkAppliancePortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkAppliancePortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkAppliancePrefixesDelegatedStaticSignalErrorFull() instead")
    void updateNetworkAppliancePrefixesDelegatedStaticSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkAppliancePrefixesDelegatedStaticSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSecurityIntrusionSignalErrorFull() instead")
    void updateNetworkApplianceSecurityIntrusionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSecurityIntrusionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSecurityMalwareSignalErrorFull() instead")
    void updateNetworkApplianceSecurityMalwareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSecurityMalwareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSettingsSignalErrorFull() instead")
    void updateNetworkApplianceSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSingleLanSignalErrorFull() instead")
    void updateNetworkApplianceSingleLanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSingleLanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSsidSignalErrorFull() instead")
    void updateNetworkApplianceSsidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSsidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceStaticRouteSignalErrorFull() instead")
    void updateNetworkApplianceStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingSignalErrorFull() instead")
    void updateNetworkApplianceTrafficShapingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingCustomPerformanceClassSignalErrorFull() instead")
    void updateNetworkApplianceTrafficShapingCustomPerformanceClassSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingCustomPerformanceClassSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingRulesSignalErrorFull() instead")
    void updateNetworkApplianceTrafficShapingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingUplinkBandwidthSignalErrorFull() instead")
    void updateNetworkApplianceTrafficShapingUplinkBandwidthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingUplinkBandwidthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceTrafficShapingUplinkSelectionSignalErrorFull() instead")
    void updateNetworkApplianceTrafficShapingUplinkSelectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceTrafficShapingUplinkSelectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVlanSignalErrorFull() instead")
    void updateNetworkApplianceVlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVlansSettingsSignalErrorFull() instead")
    void updateNetworkApplianceVlansSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVlansSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVpnBgpSignalErrorFull() instead")
    void updateNetworkApplianceVpnBgpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVpnBgpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVpnSiteToSiteVpnSignalErrorFull() instead")
    void updateNetworkApplianceVpnSiteToSiteVpnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVpnSiteToSiteVpnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceWarmSpareSignalErrorFull() instead")
    void updateNetworkApplianceWarmSpareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceWarmSpareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationApplianceSecurityIntrusionSignalErrorFull() instead")
    void updateOrganizationApplianceSecurityIntrusionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationApplianceSecurityIntrusionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationApplianceVpnThirdPartyVPNPeersSignalErrorFull() instead")
    void updateOrganizationApplianceVpnThirdPartyVPNPeersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationApplianceVpnThirdPartyVPNPeersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationApplianceVpnVpnFirewallRulesSignalErrorFull() instead")
    void updateOrganizationApplianceVpnVpnFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationApplianceVpnVpnFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
