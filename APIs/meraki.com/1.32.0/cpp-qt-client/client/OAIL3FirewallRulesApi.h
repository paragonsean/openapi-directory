/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIL3FirewallRulesApi_H
#define OAI_OAIL3FirewallRulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request.h"
#include "OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIL3FirewallRulesApi : public QObject {
    Q_OBJECT

public:
    OAIL3FirewallRulesApi(const int timeOut = 0);
    ~OAIL3FirewallRulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallL3FirewallRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidFirewallL3FirewallRules(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_inbound_firewall_rules_request OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request [optional]
    */
    virtual void updateNetworkApplianceFirewallL3FirewallRules(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request> &oai_update_network_appliance_firewall_inbound_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_firewall_l3_firewall_rules_request OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request [optional]
    */
    virtual void updateNetworkWirelessSsidFirewallL3FirewallRules(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request> &oai_update_network_wireless_ssid_firewall_l3_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getNetworkApplianceFirewallL3FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidFirewallL3FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallL3FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getNetworkApplianceFirewallL3FirewallRulesSignal(OAIObject summary);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallL3FirewallRulesSignal(OAIObject summary);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignal(OAIObject summary);


    void getNetworkApplianceFirewallL3FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallL3FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL3FirewallRulesSignalError() instead")
    void getNetworkApplianceFirewallL3FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL3FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidFirewallL3FirewallRulesSignalError() instead")
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallL3FirewallRulesSignalError() instead")
    void updateNetworkApplianceFirewallL3FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallL3FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidFirewallL3FirewallRulesSignalError() instead")
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL3FirewallRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallL3FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL3FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull() instead")
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallL3FirewallRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallL3FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallL3FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull() instead")
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
