/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateNetworkSwitchDhcpServerPolicy_request.h
 *
 * 
 */

#ifndef OAIUpdateNetworkSwitchDhcpServerPolicy_request_H
#define OAIUpdateNetworkSwitchDhcpServerPolicy_request_H

#include <QJsonObject>

#include "OAIUpdateNetworkSwitchDhcpServerPolicy_request_alerts.h"
#include "OAIUpdateNetworkSwitchDhcpServerPolicy_request_arpInspection.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateNetworkSwitchDhcpServerPolicy_request_alerts;
class OAIUpdateNetworkSwitchDhcpServerPolicy_request_arpInspection;

class OAIUpdateNetworkSwitchDhcpServerPolicy_request : public OAIObject {
public:
    OAIUpdateNetworkSwitchDhcpServerPolicy_request();
    OAIUpdateNetworkSwitchDhcpServerPolicy_request(QString json);
    ~OAIUpdateNetworkSwitchDhcpServerPolicy_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIUpdateNetworkSwitchDhcpServerPolicy_request_alerts getAlerts() const;
    void setAlerts(const OAIUpdateNetworkSwitchDhcpServerPolicy_request_alerts &alerts);
    bool is_alerts_Set() const;
    bool is_alerts_Valid() const;

    QList<QString> getAllowedServers() const;
    void setAllowedServers(const QList<QString> &allowed_servers);
    bool is_allowed_servers_Set() const;
    bool is_allowed_servers_Valid() const;

    OAIUpdateNetworkSwitchDhcpServerPolicy_request_arpInspection getArpInspection() const;
    void setArpInspection(const OAIUpdateNetworkSwitchDhcpServerPolicy_request_arpInspection &arp_inspection);
    bool is_arp_inspection_Set() const;
    bool is_arp_inspection_Valid() const;

    QList<QString> getBlockedServers() const;
    void setBlockedServers(const QList<QString> &blocked_servers);
    bool is_blocked_servers_Set() const;
    bool is_blocked_servers_Valid() const;

    QString getDefaultPolicy() const;
    void setDefaultPolicy(const QString &default_policy);
    bool is_default_policy_Set() const;
    bool is_default_policy_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIUpdateNetworkSwitchDhcpServerPolicy_request_alerts m_alerts;
    bool m_alerts_isSet;
    bool m_alerts_isValid;

    QList<QString> m_allowed_servers;
    bool m_allowed_servers_isSet;
    bool m_allowed_servers_isValid;

    OAIUpdateNetworkSwitchDhcpServerPolicy_request_arpInspection m_arp_inspection;
    bool m_arp_inspection_isSet;
    bool m_arp_inspection_isValid;

    QList<QString> m_blocked_servers;
    bool m_blocked_servers_isSet;
    bool m_blocked_servers_isValid;

    QString m_default_policy;
    bool m_default_policy_isSet;
    bool m_default_policy_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateNetworkSwitchDhcpServerPolicy_request)

#endif // OAIUpdateNetworkSwitchDhcpServerPolicy_request_H
