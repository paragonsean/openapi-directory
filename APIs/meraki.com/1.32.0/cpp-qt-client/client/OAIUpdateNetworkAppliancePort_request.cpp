/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkAppliancePort_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkAppliancePort_request::OAIUpdateNetworkAppliancePort_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkAppliancePort_request::OAIUpdateNetworkAppliancePort_request() {
    this->initializeModel();
}

OAIUpdateNetworkAppliancePort_request::~OAIUpdateNetworkAppliancePort_request() {}

void OAIUpdateNetworkAppliancePort_request::initializeModel() {

    m_access_policy_isSet = false;
    m_access_policy_isValid = false;

    m_allowed_vlans_isSet = false;
    m_allowed_vlans_isValid = false;

    m_drop_untagged_traffic_isSet = false;
    m_drop_untagged_traffic_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vlan_isSet = false;
    m_vlan_isValid = false;
}

void OAIUpdateNetworkAppliancePort_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkAppliancePort_request::fromJsonObject(QJsonObject json) {

    m_access_policy_isValid = ::OpenAPI::fromJsonValue(m_access_policy, json[QString("accessPolicy")]);
    m_access_policy_isSet = !json[QString("accessPolicy")].isNull() && m_access_policy_isValid;

    m_allowed_vlans_isValid = ::OpenAPI::fromJsonValue(m_allowed_vlans, json[QString("allowedVlans")]);
    m_allowed_vlans_isSet = !json[QString("allowedVlans")].isNull() && m_allowed_vlans_isValid;

    m_drop_untagged_traffic_isValid = ::OpenAPI::fromJsonValue(m_drop_untagged_traffic, json[QString("dropUntaggedTraffic")]);
    m_drop_untagged_traffic_isSet = !json[QString("dropUntaggedTraffic")].isNull() && m_drop_untagged_traffic_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vlan_isValid = ::OpenAPI::fromJsonValue(m_vlan, json[QString("vlan")]);
    m_vlan_isSet = !json[QString("vlan")].isNull() && m_vlan_isValid;
}

QString OAIUpdateNetworkAppliancePort_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkAppliancePort_request::asJsonObject() const {
    QJsonObject obj;
    if (m_access_policy_isSet) {
        obj.insert(QString("accessPolicy"), ::OpenAPI::toJsonValue(m_access_policy));
    }
    if (m_allowed_vlans_isSet) {
        obj.insert(QString("allowedVlans"), ::OpenAPI::toJsonValue(m_allowed_vlans));
    }
    if (m_drop_untagged_traffic_isSet) {
        obj.insert(QString("dropUntaggedTraffic"), ::OpenAPI::toJsonValue(m_drop_untagged_traffic));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vlan_isSet) {
        obj.insert(QString("vlan"), ::OpenAPI::toJsonValue(m_vlan));
    }
    return obj;
}

QString OAIUpdateNetworkAppliancePort_request::getAccessPolicy() const {
    return m_access_policy;
}
void OAIUpdateNetworkAppliancePort_request::setAccessPolicy(const QString &access_policy) {
    m_access_policy = access_policy;
    m_access_policy_isSet = true;
}

bool OAIUpdateNetworkAppliancePort_request::is_access_policy_Set() const{
    return m_access_policy_isSet;
}

bool OAIUpdateNetworkAppliancePort_request::is_access_policy_Valid() const{
    return m_access_policy_isValid;
}

QString OAIUpdateNetworkAppliancePort_request::getAllowedVlans() const {
    return m_allowed_vlans;
}
void OAIUpdateNetworkAppliancePort_request::setAllowedVlans(const QString &allowed_vlans) {
    m_allowed_vlans = allowed_vlans;
    m_allowed_vlans_isSet = true;
}

bool OAIUpdateNetworkAppliancePort_request::is_allowed_vlans_Set() const{
    return m_allowed_vlans_isSet;
}

bool OAIUpdateNetworkAppliancePort_request::is_allowed_vlans_Valid() const{
    return m_allowed_vlans_isValid;
}

bool OAIUpdateNetworkAppliancePort_request::isDropUntaggedTraffic() const {
    return m_drop_untagged_traffic;
}
void OAIUpdateNetworkAppliancePort_request::setDropUntaggedTraffic(const bool &drop_untagged_traffic) {
    m_drop_untagged_traffic = drop_untagged_traffic;
    m_drop_untagged_traffic_isSet = true;
}

bool OAIUpdateNetworkAppliancePort_request::is_drop_untagged_traffic_Set() const{
    return m_drop_untagged_traffic_isSet;
}

bool OAIUpdateNetworkAppliancePort_request::is_drop_untagged_traffic_Valid() const{
    return m_drop_untagged_traffic_isValid;
}

bool OAIUpdateNetworkAppliancePort_request::isEnabled() const {
    return m_enabled;
}
void OAIUpdateNetworkAppliancePort_request::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIUpdateNetworkAppliancePort_request::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIUpdateNetworkAppliancePort_request::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIUpdateNetworkAppliancePort_request::getType() const {
    return m_type;
}
void OAIUpdateNetworkAppliancePort_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUpdateNetworkAppliancePort_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUpdateNetworkAppliancePort_request::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIUpdateNetworkAppliancePort_request::getVlan() const {
    return m_vlan;
}
void OAIUpdateNetworkAppliancePort_request::setVlan(const qint32 &vlan) {
    m_vlan = vlan;
    m_vlan_isSet = true;
}

bool OAIUpdateNetworkAppliancePort_request::is_vlan_Set() const{
    return m_vlan_isSet;
}

bool OAIUpdateNetworkAppliancePort_request::is_vlan_Valid() const{
    return m_vlan_isValid;
}

bool OAIUpdateNetworkAppliancePort_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_vlans_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drop_untagged_traffic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkAppliancePort_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
