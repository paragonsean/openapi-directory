/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAdministeredIdentitiesMe_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAdministeredIdentitiesMe_200_response::OAIGetAdministeredIdentitiesMe_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAdministeredIdentitiesMe_200_response::OAIGetAdministeredIdentitiesMe_200_response() {
    this->initializeModel();
}

OAIGetAdministeredIdentitiesMe_200_response::~OAIGetAdministeredIdentitiesMe_200_response() {}

void OAIGetAdministeredIdentitiesMe_200_response::initializeModel() {

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_last_used_dashboard_at_isSet = false;
    m_last_used_dashboard_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIGetAdministeredIdentitiesMe_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAdministeredIdentitiesMe_200_response::fromJsonObject(QJsonObject json) {

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("authentication")]);
    m_authentication_isSet = !json[QString("authentication")].isNull() && m_authentication_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_last_used_dashboard_at_isValid = ::OpenAPI::fromJsonValue(m_last_used_dashboard_at, json[QString("lastUsedDashboardAt")]);
    m_last_used_dashboard_at_isSet = !json[QString("lastUsedDashboardAt")].isNull() && m_last_used_dashboard_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIGetAdministeredIdentitiesMe_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAdministeredIdentitiesMe_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication.isSet()) {
        obj.insert(QString("authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_last_used_dashboard_at_isSet) {
        obj.insert(QString("lastUsedDashboardAt"), ::OpenAPI::toJsonValue(m_last_used_dashboard_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIGetAdministeredIdentitiesMe_200_response_authentication OAIGetAdministeredIdentitiesMe_200_response::getAuthentication() const {
    return m_authentication;
}
void OAIGetAdministeredIdentitiesMe_200_response::setAuthentication(const OAIGetAdministeredIdentitiesMe_200_response_authentication &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAIGetAdministeredIdentitiesMe_200_response::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAIGetAdministeredIdentitiesMe_200_response::is_authentication_Valid() const{
    return m_authentication_isValid;
}

QString OAIGetAdministeredIdentitiesMe_200_response::getEmail() const {
    return m_email;
}
void OAIGetAdministeredIdentitiesMe_200_response::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIGetAdministeredIdentitiesMe_200_response::is_email_Set() const{
    return m_email_isSet;
}

bool OAIGetAdministeredIdentitiesMe_200_response::is_email_Valid() const{
    return m_email_isValid;
}

QDateTime OAIGetAdministeredIdentitiesMe_200_response::getLastUsedDashboardAt() const {
    return m_last_used_dashboard_at;
}
void OAIGetAdministeredIdentitiesMe_200_response::setLastUsedDashboardAt(const QDateTime &last_used_dashboard_at) {
    m_last_used_dashboard_at = last_used_dashboard_at;
    m_last_used_dashboard_at_isSet = true;
}

bool OAIGetAdministeredIdentitiesMe_200_response::is_last_used_dashboard_at_Set() const{
    return m_last_used_dashboard_at_isSet;
}

bool OAIGetAdministeredIdentitiesMe_200_response::is_last_used_dashboard_at_Valid() const{
    return m_last_used_dashboard_at_isValid;
}

QString OAIGetAdministeredIdentitiesMe_200_response::getName() const {
    return m_name;
}
void OAIGetAdministeredIdentitiesMe_200_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetAdministeredIdentitiesMe_200_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetAdministeredIdentitiesMe_200_response::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGetAdministeredIdentitiesMe_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_used_dashboard_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAdministeredIdentitiesMe_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
