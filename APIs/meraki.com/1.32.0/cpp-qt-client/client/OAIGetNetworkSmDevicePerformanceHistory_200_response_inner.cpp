/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSmDevicePerformanceHistory_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::OAIGetNetworkSmDevicePerformanceHistory_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::OAIGetNetworkSmDevicePerformanceHistory_200_response_inner() {
    this->initializeModel();
}

OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::~OAIGetNetworkSmDevicePerformanceHistory_200_response_inner() {}

void OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::initializeModel() {

    m_cpu_percent_used_isSet = false;
    m_cpu_percent_used_isValid = false;

    m_disk_usage_isSet = false;
    m_disk_usage_isValid = false;

    m_mem_active_isSet = false;
    m_mem_active_isValid = false;

    m_mem_free_isSet = false;
    m_mem_free_isValid = false;

    m_mem_inactive_isSet = false;
    m_mem_inactive_isValid = false;

    m_mem_wired_isSet = false;
    m_mem_wired_isValid = false;

    m_network_received_isSet = false;
    m_network_received_isValid = false;

    m_network_sent_isSet = false;
    m_network_sent_isValid = false;

    m_swap_used_isSet = false;
    m_swap_used_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;
}

void OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::fromJsonObject(QJsonObject json) {

    m_cpu_percent_used_isValid = ::OpenAPI::fromJsonValue(m_cpu_percent_used, json[QString("cpuPercentUsed")]);
    m_cpu_percent_used_isSet = !json[QString("cpuPercentUsed")].isNull() && m_cpu_percent_used_isValid;

    m_disk_usage_isValid = ::OpenAPI::fromJsonValue(m_disk_usage, json[QString("diskUsage")]);
    m_disk_usage_isSet = !json[QString("diskUsage")].isNull() && m_disk_usage_isValid;

    m_mem_active_isValid = ::OpenAPI::fromJsonValue(m_mem_active, json[QString("memActive")]);
    m_mem_active_isSet = !json[QString("memActive")].isNull() && m_mem_active_isValid;

    m_mem_free_isValid = ::OpenAPI::fromJsonValue(m_mem_free, json[QString("memFree")]);
    m_mem_free_isSet = !json[QString("memFree")].isNull() && m_mem_free_isValid;

    m_mem_inactive_isValid = ::OpenAPI::fromJsonValue(m_mem_inactive, json[QString("memInactive")]);
    m_mem_inactive_isSet = !json[QString("memInactive")].isNull() && m_mem_inactive_isValid;

    m_mem_wired_isValid = ::OpenAPI::fromJsonValue(m_mem_wired, json[QString("memWired")]);
    m_mem_wired_isSet = !json[QString("memWired")].isNull() && m_mem_wired_isValid;

    m_network_received_isValid = ::OpenAPI::fromJsonValue(m_network_received, json[QString("networkReceived")]);
    m_network_received_isSet = !json[QString("networkReceived")].isNull() && m_network_received_isValid;

    m_network_sent_isValid = ::OpenAPI::fromJsonValue(m_network_sent, json[QString("networkSent")]);
    m_network_sent_isSet = !json[QString("networkSent")].isNull() && m_network_sent_isValid;

    m_swap_used_isValid = ::OpenAPI::fromJsonValue(m_swap_used, json[QString("swapUsed")]);
    m_swap_used_isSet = !json[QString("swapUsed")].isNull() && m_swap_used_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;
}

QString OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_cpu_percent_used_isSet) {
        obj.insert(QString("cpuPercentUsed"), ::OpenAPI::toJsonValue(m_cpu_percent_used));
    }
    if (m_disk_usage.isSet()) {
        obj.insert(QString("diskUsage"), ::OpenAPI::toJsonValue(m_disk_usage));
    }
    if (m_mem_active_isSet) {
        obj.insert(QString("memActive"), ::OpenAPI::toJsonValue(m_mem_active));
    }
    if (m_mem_free_isSet) {
        obj.insert(QString("memFree"), ::OpenAPI::toJsonValue(m_mem_free));
    }
    if (m_mem_inactive_isSet) {
        obj.insert(QString("memInactive"), ::OpenAPI::toJsonValue(m_mem_inactive));
    }
    if (m_mem_wired_isSet) {
        obj.insert(QString("memWired"), ::OpenAPI::toJsonValue(m_mem_wired));
    }
    if (m_network_received_isSet) {
        obj.insert(QString("networkReceived"), ::OpenAPI::toJsonValue(m_network_received));
    }
    if (m_network_sent_isSet) {
        obj.insert(QString("networkSent"), ::OpenAPI::toJsonValue(m_network_sent));
    }
    if (m_swap_used_isSet) {
        obj.insert(QString("swapUsed"), ::OpenAPI::toJsonValue(m_swap_used));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    return obj;
}

float OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::getCpuPercentUsed() const {
    return m_cpu_percent_used;
}
void OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::setCpuPercentUsed(const float &cpu_percent_used) {
    m_cpu_percent_used = cpu_percent_used;
    m_cpu_percent_used_isSet = true;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_cpu_percent_used_Set() const{
    return m_cpu_percent_used_isSet;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_cpu_percent_used_Valid() const{
    return m_cpu_percent_used_isValid;
}

OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::getDiskUsage() const {
    return m_disk_usage;
}
void OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::setDiskUsage(const OAIGetNetworkSmDevicePerformanceHistory_200_response_inner_diskUsage &disk_usage) {
    m_disk_usage = disk_usage;
    m_disk_usage_isSet = true;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_disk_usage_Set() const{
    return m_disk_usage_isSet;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_disk_usage_Valid() const{
    return m_disk_usage_isValid;
}

qint32 OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::getMemActive() const {
    return m_mem_active;
}
void OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::setMemActive(const qint32 &mem_active) {
    m_mem_active = mem_active;
    m_mem_active_isSet = true;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_mem_active_Set() const{
    return m_mem_active_isSet;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_mem_active_Valid() const{
    return m_mem_active_isValid;
}

qint32 OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::getMemFree() const {
    return m_mem_free;
}
void OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::setMemFree(const qint32 &mem_free) {
    m_mem_free = mem_free;
    m_mem_free_isSet = true;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_mem_free_Set() const{
    return m_mem_free_isSet;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_mem_free_Valid() const{
    return m_mem_free_isValid;
}

qint32 OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::getMemInactive() const {
    return m_mem_inactive;
}
void OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::setMemInactive(const qint32 &mem_inactive) {
    m_mem_inactive = mem_inactive;
    m_mem_inactive_isSet = true;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_mem_inactive_Set() const{
    return m_mem_inactive_isSet;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_mem_inactive_Valid() const{
    return m_mem_inactive_isValid;
}

qint32 OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::getMemWired() const {
    return m_mem_wired;
}
void OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::setMemWired(const qint32 &mem_wired) {
    m_mem_wired = mem_wired;
    m_mem_wired_isSet = true;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_mem_wired_Set() const{
    return m_mem_wired_isSet;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_mem_wired_Valid() const{
    return m_mem_wired_isValid;
}

qint32 OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::getNetworkReceived() const {
    return m_network_received;
}
void OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::setNetworkReceived(const qint32 &network_received) {
    m_network_received = network_received;
    m_network_received_isSet = true;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_network_received_Set() const{
    return m_network_received_isSet;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_network_received_Valid() const{
    return m_network_received_isValid;
}

qint32 OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::getNetworkSent() const {
    return m_network_sent;
}
void OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::setNetworkSent(const qint32 &network_sent) {
    m_network_sent = network_sent;
    m_network_sent_isSet = true;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_network_sent_Set() const{
    return m_network_sent_isSet;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_network_sent_Valid() const{
    return m_network_sent_isValid;
}

qint32 OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::getSwapUsed() const {
    return m_swap_used;
}
void OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::setSwapUsed(const qint32 &swap_used) {
    m_swap_used = swap_used;
    m_swap_used_isSet = true;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_swap_used_Set() const{
    return m_swap_used_isSet;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_swap_used_Valid() const{
    return m_swap_used_isValid;
}

QString OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::getTs() const {
    return m_ts;
}
void OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::setTs(const QString &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::is_ts_Valid() const{
    return m_ts_isValid;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpu_percent_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mem_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mem_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mem_inactive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mem_wired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_swap_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSmDevicePerformanceHistory_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
