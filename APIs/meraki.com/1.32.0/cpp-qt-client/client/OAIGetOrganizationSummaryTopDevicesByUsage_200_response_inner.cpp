/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner() {
    this->initializeModel();
}

OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::~OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner() {}

void OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::initializeModel() {

    m_clients_isSet = false;
    m_clients_isValid = false;

    m_mac_isSet = false;
    m_mac_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::fromJsonObject(QJsonObject json) {

    m_clients_isValid = ::OpenAPI::fromJsonValue(m_clients, json[QString("clients")]);
    m_clients_isSet = !json[QString("clients")].isNull() && m_clients_isValid;

    m_mac_isValid = ::OpenAPI::fromJsonValue(m_mac, json[QString("mac")]);
    m_mac_isSet = !json[QString("mac")].isNull() && m_mac_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("productType")]);
    m_product_type_isSet = !json[QString("productType")].isNull() && m_product_type_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_clients.isSet()) {
        obj.insert(QString("clients"), ::OpenAPI::toJsonValue(m_clients));
    }
    if (m_mac_isSet) {
        obj.insert(QString("mac"), ::OpenAPI::toJsonValue(m_mac));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network.isSet()) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_product_type_isSet) {
        obj.insert(QString("productType"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_usage.isSet()) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner_clients OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::getClients() const {
    return m_clients;
}
void OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::setClients(const OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner_clients &clients) {
    m_clients = clients;
    m_clients_isSet = true;
}

bool OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::is_clients_Set() const{
    return m_clients_isSet;
}

bool OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::is_clients_Valid() const{
    return m_clients_isValid;
}

QString OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::getMac() const {
    return m_mac;
}
void OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::setMac(const QString &mac) {
    m_mac = mac;
    m_mac_isSet = true;
}

bool OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::is_mac_Set() const{
    return m_mac_isSet;
}

bool OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::is_mac_Valid() const{
    return m_mac_isValid;
}

QString OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::getModel() const {
    return m_model;
}
void OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::is_model_Set() const{
    return m_model_isSet;
}

bool OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::getName() const {
    return m_name;
}
void OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

OAIGetOrganizationSummaryTopAppliancesByUtilization_200_response_inner_network OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::getNetwork() const {
    return m_network;
}
void OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::setNetwork(const OAIGetOrganizationSummaryTopAppliancesByUtilization_200_response_inner_network &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::is_network_Set() const{
    return m_network_isSet;
}

bool OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::getProductType() const {
    return m_product_type;
}
void OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::setProductType(const QString &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::is_product_type_Valid() const{
    return m_product_type_isValid;
}

QString OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::getSerial() const {
    return m_serial;
}
void OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::is_serial_Valid() const{
    return m_serial_isValid;
}

OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner_usage OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::getUsage() const {
    return m_usage;
}
void OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::setUsage(const OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner_usage &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clients.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationSummaryTopDevicesByUsage_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
