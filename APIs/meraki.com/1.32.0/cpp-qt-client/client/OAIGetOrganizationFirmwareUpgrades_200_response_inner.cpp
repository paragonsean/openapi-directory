/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationFirmwareUpgrades_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationFirmwareUpgrades_200_response_inner::OAIGetOrganizationFirmwareUpgrades_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationFirmwareUpgrades_200_response_inner::OAIGetOrganizationFirmwareUpgrades_200_response_inner() {
    this->initializeModel();
}

OAIGetOrganizationFirmwareUpgrades_200_response_inner::~OAIGetOrganizationFirmwareUpgrades_200_response_inner() {}

void OAIGetOrganizationFirmwareUpgrades_200_response_inner::initializeModel() {

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_from_version_isSet = false;
    m_from_version_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_to_version_isSet = false;
    m_to_version_isValid = false;

    m_upgrade_batch_id_isSet = false;
    m_upgrade_batch_id_isValid = false;

    m_upgrade_id_isSet = false;
    m_upgrade_id_isValid = false;
}

void OAIGetOrganizationFirmwareUpgrades_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationFirmwareUpgrades_200_response_inner::fromJsonObject(QJsonObject json) {

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completedAt")]);
    m_completed_at_isSet = !json[QString("completedAt")].isNull() && m_completed_at_isValid;

    m_from_version_isValid = ::OpenAPI::fromJsonValue(m_from_version, json[QString("fromVersion")]);
    m_from_version_isSet = !json[QString("fromVersion")].isNull() && m_from_version_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("productType")]);
    m_product_type_isSet = !json[QString("productType")].isNull() && m_product_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_to_version_isValid = ::OpenAPI::fromJsonValue(m_to_version, json[QString("toVersion")]);
    m_to_version_isSet = !json[QString("toVersion")].isNull() && m_to_version_isValid;

    m_upgrade_batch_id_isValid = ::OpenAPI::fromJsonValue(m_upgrade_batch_id, json[QString("upgradeBatchId")]);
    m_upgrade_batch_id_isSet = !json[QString("upgradeBatchId")].isNull() && m_upgrade_batch_id_isValid;

    m_upgrade_id_isValid = ::OpenAPI::fromJsonValue(m_upgrade_id, json[QString("upgradeId")]);
    m_upgrade_id_isSet = !json[QString("upgradeId")].isNull() && m_upgrade_id_isValid;
}

QString OAIGetOrganizationFirmwareUpgrades_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationFirmwareUpgrades_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_at_isSet) {
        obj.insert(QString("completedAt"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_from_version.isSet()) {
        obj.insert(QString("fromVersion"), ::OpenAPI::toJsonValue(m_from_version));
    }
    if (m_network.isSet()) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_product_type_isSet) {
        obj.insert(QString("productType"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_to_version.isSet()) {
        obj.insert(QString("toVersion"), ::OpenAPI::toJsonValue(m_to_version));
    }
    if (m_upgrade_batch_id_isSet) {
        obj.insert(QString("upgradeBatchId"), ::OpenAPI::toJsonValue(m_upgrade_batch_id));
    }
    if (m_upgrade_id_isSet) {
        obj.insert(QString("upgradeId"), ::OpenAPI::toJsonValue(m_upgrade_id));
    }
    return obj;
}

QString OAIGetOrganizationFirmwareUpgrades_200_response_inner::getCompletedAt() const {
    return m_completed_at;
}
void OAIGetOrganizationFirmwareUpgrades_200_response_inner::setCompletedAt(const QString &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

OAIGetOrganizationFirmwareUpgrades_200_response_inner_fromVersion OAIGetOrganizationFirmwareUpgrades_200_response_inner::getFromVersion() const {
    return m_from_version;
}
void OAIGetOrganizationFirmwareUpgrades_200_response_inner::setFromVersion(const OAIGetOrganizationFirmwareUpgrades_200_response_inner_fromVersion &from_version) {
    m_from_version = from_version;
    m_from_version_isSet = true;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::is_from_version_Set() const{
    return m_from_version_isSet;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::is_from_version_Valid() const{
    return m_from_version_isValid;
}

OAIGetOrganizationFirmwareUpgrades_200_response_inner_network OAIGetOrganizationFirmwareUpgrades_200_response_inner::getNetwork() const {
    return m_network;
}
void OAIGetOrganizationFirmwareUpgrades_200_response_inner::setNetwork(const OAIGetOrganizationFirmwareUpgrades_200_response_inner_network &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::is_network_Set() const{
    return m_network_isSet;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIGetOrganizationFirmwareUpgrades_200_response_inner::getProductType() const {
    return m_product_type;
}
void OAIGetOrganizationFirmwareUpgrades_200_response_inner::setProductType(const QString &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::is_product_type_Valid() const{
    return m_product_type_isValid;
}

QString OAIGetOrganizationFirmwareUpgrades_200_response_inner::getStatus() const {
    return m_status;
}
void OAIGetOrganizationFirmwareUpgrades_200_response_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIGetOrganizationFirmwareUpgrades_200_response_inner::getTime() const {
    return m_time;
}
void OAIGetOrganizationFirmwareUpgrades_200_response_inner::setTime(const QDateTime &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::is_time_Set() const{
    return m_time_isSet;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::is_time_Valid() const{
    return m_time_isValid;
}

OAIGetOrganizationFirmwareUpgrades_200_response_inner_toVersion OAIGetOrganizationFirmwareUpgrades_200_response_inner::getToVersion() const {
    return m_to_version;
}
void OAIGetOrganizationFirmwareUpgrades_200_response_inner::setToVersion(const OAIGetOrganizationFirmwareUpgrades_200_response_inner_toVersion &to_version) {
    m_to_version = to_version;
    m_to_version_isSet = true;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::is_to_version_Set() const{
    return m_to_version_isSet;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::is_to_version_Valid() const{
    return m_to_version_isValid;
}

QString OAIGetOrganizationFirmwareUpgrades_200_response_inner::getUpgradeBatchId() const {
    return m_upgrade_batch_id;
}
void OAIGetOrganizationFirmwareUpgrades_200_response_inner::setUpgradeBatchId(const QString &upgrade_batch_id) {
    m_upgrade_batch_id = upgrade_batch_id;
    m_upgrade_batch_id_isSet = true;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::is_upgrade_batch_id_Set() const{
    return m_upgrade_batch_id_isSet;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::is_upgrade_batch_id_Valid() const{
    return m_upgrade_batch_id_isValid;
}

QString OAIGetOrganizationFirmwareUpgrades_200_response_inner::getUpgradeId() const {
    return m_upgrade_id;
}
void OAIGetOrganizationFirmwareUpgrades_200_response_inner::setUpgradeId(const QString &upgrade_id) {
    m_upgrade_id = upgrade_id;
    m_upgrade_id_isSet = true;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::is_upgrade_id_Set() const{
    return m_upgrade_id_isSet;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::is_upgrade_id_Valid() const{
    return m_upgrade_id_isValid;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationFirmwareUpgrades_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
