/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner() {
    this->initializeModel();
}

OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::~OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner() {}

void OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::initializeModel() {

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;
}

void OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::fromJsonObject(QJsonObject json) {

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;
}

QString OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    return obj;
}

bool OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::isRDefault() const {
    return m_r_default;
}
void OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::getDescription() const {
    return m_description;
}
void OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::getIp() const {
    return m_ip;
}
void OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::is_ip_Valid() const{
    return m_ip_isValid;
}

bool OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request_destinations_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ip_isValid && true;
}

} // namespace OpenAPI
