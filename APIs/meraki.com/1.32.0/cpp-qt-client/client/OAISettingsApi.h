/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISettingsApi_H
#define OAI_OAISettingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetDeviceApplianceUplinksSettings_200_response.h"
#include "OAIGetDeviceWirelessBluetoothSettings_200_response.h"
#include "OAIGetNetworkApplianceSettings_200_response.h"
#include "OAIGetNetworkSettings_200_response.h"
#include "OAIGetNetworkSwitchSettings_200_response.h"
#include "OAIGetNetworkWirelessBluetoothSettings_200_response.h"
#include "OAIGetNetworkWirelessSettings_200_response.h"
#include "OAIGetNetworkWirelessSsidSplashSettings_200_response.h"
#include "OAIObject.h"
#include "OAIUpdateDeviceApplianceUplinksSettings_request.h"
#include "OAIUpdateDeviceCameraVideoSettings_request.h"
#include "OAIUpdateDeviceWirelessBluetoothSettings_request.h"
#include "OAIUpdateDeviceWirelessRadioSettings_request.h"
#include "OAIUpdateNetworkAlertsSettings_request.h"
#include "OAIUpdateNetworkApplianceFirewallSettings_request.h"
#include "OAIUpdateNetworkApplianceSettings_request.h"
#include "OAIUpdateNetworkApplianceVlansSettings_request.h"
#include "OAIUpdateNetworkSettings_request.h"
#include "OAIUpdateNetworkSwitchSettings_request.h"
#include "OAIUpdateNetworkWirelessBluetoothSettings_request.h"
#include "OAIUpdateNetworkWirelessSettings_request.h"
#include "OAIUpdateNetworkWirelessSsidSplashSettings_request.h"
#include "OAIUpdateOrganizationAdaptivePolicySettings_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISettingsApi : public QObject {
    Q_OBJECT

public:
    OAISettingsApi(const int timeOut = 0);
    ~OAISettingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceApplianceUplinksSettings(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceCameraVideoSettings(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceWirelessBluetoothSettings(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceWirelessRadioSettings(const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkAlertsSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceVlansSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkWirelessBluetoothSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkWirelessSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidSplashSettings(const QString &network_id, const QString &number);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicySettings(const QString &organization_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_appliance_uplinks_settings_request OAIUpdateDeviceApplianceUplinksSettings_request [required]
    */
    virtual void updateDeviceApplianceUplinksSettings(const QString &serial, const OAIUpdateDeviceApplianceUplinksSettings_request &oai_update_device_appliance_uplinks_settings_request);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_camera_video_settings_request OAIUpdateDeviceCameraVideoSettings_request [optional]
    */
    virtual void updateDeviceCameraVideoSettings(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraVideoSettings_request> &oai_update_device_camera_video_settings_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceCameraVideoSettings_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_wireless_bluetooth_settings_request OAIUpdateDeviceWirelessBluetoothSettings_request [optional]
    */
    virtual void updateDeviceWirelessBluetoothSettings(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceWirelessBluetoothSettings_request> &oai_update_device_wireless_bluetooth_settings_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceWirelessBluetoothSettings_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_wireless_radio_settings_request OAIUpdateDeviceWirelessRadioSettings_request [optional]
    */
    virtual void updateDeviceWirelessRadioSettings(const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateDeviceWirelessRadioSettings_request> &oai_update_device_wireless_radio_settings_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceWirelessRadioSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_alerts_settings_request OAIUpdateNetworkAlertsSettings_request [optional]
    */
    virtual void updateNetworkAlertsSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkAlertsSettings_request> &oai_update_network_alerts_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkAlertsSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_settings_request OAIUpdateNetworkApplianceFirewallSettings_request [optional]
    */
    virtual void updateNetworkApplianceFirewallSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallSettings_request> &oai_update_network_appliance_firewall_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_settings_request OAIUpdateNetworkApplianceSettings_request [optional]
    */
    virtual void updateNetworkApplianceSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSettings_request> &oai_update_network_appliance_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_vlans_settings_request OAIUpdateNetworkApplianceVlansSettings_request [optional]
    */
    virtual void updateNetworkApplianceVlansSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceVlansSettings_request> &oai_update_network_appliance_vlans_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceVlansSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_settings_request OAIUpdateNetworkSettings_request [optional]
    */
    virtual void updateNetworkSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSettings_request> &oai_update_network_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_settings_request OAIUpdateNetworkSwitchSettings_request [optional]
    */
    virtual void updateNetworkSwitchSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchSettings_request> &oai_update_network_switch_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_wireless_bluetooth_settings_request OAIUpdateNetworkWirelessBluetoothSettings_request [optional]
    */
    virtual void updateNetworkWirelessBluetoothSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessBluetoothSettings_request> &oai_update_network_wireless_bluetooth_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessBluetoothSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_wireless_settings_request OAIUpdateNetworkWirelessSettings_request [optional]
    */
    virtual void updateNetworkWirelessSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSettings_request> &oai_update_network_wireless_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_splash_settings_request OAIUpdateNetworkWirelessSsidSplashSettings_request [optional]
    */
    virtual void updateNetworkWirelessSsidSplashSettings(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidSplashSettings_request> &oai_update_network_wireless_ssid_splash_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidSplashSettings_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_adaptive_policy_settings_request OAIUpdateOrganizationAdaptivePolicySettings_request [optional]
    */
    virtual void updateOrganizationAdaptivePolicySettings(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicySettings_request> &oai_update_organization_adaptive_policy_settings_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicySettings_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDeviceApplianceUplinksSettingsCallback(OAIHttpRequestWorker *worker);
    void getDeviceCameraVideoSettingsCallback(OAIHttpRequestWorker *worker);
    void getDeviceWirelessBluetoothSettingsCallback(OAIHttpRequestWorker *worker);
    void getDeviceWirelessRadioSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkAlertsSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceVlansSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessBluetoothSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidSplashSettingsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicySettingsCallback(OAIHttpRequestWorker *worker);
    void updateDeviceApplianceUplinksSettingsCallback(OAIHttpRequestWorker *worker);
    void updateDeviceCameraVideoSettingsCallback(OAIHttpRequestWorker *worker);
    void updateDeviceWirelessBluetoothSettingsCallback(OAIHttpRequestWorker *worker);
    void updateDeviceWirelessRadioSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkAlertsSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceVlansSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessBluetoothSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidSplashSettingsCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAdaptivePolicySettingsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDeviceApplianceUplinksSettingsSignal(OAIGetDeviceApplianceUplinksSettings_200_response summary);
    void getDeviceCameraVideoSettingsSignal(OAIObject summary);
    void getDeviceWirelessBluetoothSettingsSignal(OAIGetDeviceWirelessBluetoothSettings_200_response summary);
    void getDeviceWirelessRadioSettingsSignal(OAIObject summary);
    void getNetworkAlertsSettingsSignal(OAIObject summary);
    void getNetworkApplianceFirewallSettingsSignal(OAIObject summary);
    void getNetworkApplianceSettingsSignal(OAIGetNetworkApplianceSettings_200_response summary);
    void getNetworkApplianceVlansSettingsSignal(OAIObject summary);
    void getNetworkSettingsSignal(OAIGetNetworkSettings_200_response summary);
    void getNetworkSwitchSettingsSignal(OAIGetNetworkSwitchSettings_200_response summary);
    void getNetworkWirelessBluetoothSettingsSignal(OAIGetNetworkWirelessBluetoothSettings_200_response summary);
    void getNetworkWirelessSettingsSignal(OAIGetNetworkWirelessSettings_200_response summary);
    void getNetworkWirelessSsidSplashSettingsSignal(OAIGetNetworkWirelessSsidSplashSettings_200_response summary);
    void getOrganizationAdaptivePolicySettingsSignal(OAIObject summary);
    void updateDeviceApplianceUplinksSettingsSignal(OAIGetDeviceApplianceUplinksSettings_200_response summary);
    void updateDeviceCameraVideoSettingsSignal(OAIObject summary);
    void updateDeviceWirelessBluetoothSettingsSignal(OAIGetDeviceWirelessBluetoothSettings_200_response summary);
    void updateDeviceWirelessRadioSettingsSignal(OAIObject summary);
    void updateNetworkAlertsSettingsSignal(OAIObject summary);
    void updateNetworkApplianceFirewallSettingsSignal(OAIObject summary);
    void updateNetworkApplianceSettingsSignal(OAIGetNetworkApplianceSettings_200_response summary);
    void updateNetworkApplianceVlansSettingsSignal(OAIObject summary);
    void updateNetworkSettingsSignal(OAIGetNetworkSettings_200_response summary);
    void updateNetworkSwitchSettingsSignal(OAIGetNetworkSwitchSettings_200_response summary);
    void updateNetworkWirelessBluetoothSettingsSignal(OAIGetNetworkWirelessBluetoothSettings_200_response summary);
    void updateNetworkWirelessSettingsSignal(OAIGetNetworkWirelessSettings_200_response summary);
    void updateNetworkWirelessSsidSplashSettingsSignal(OAIGetNetworkWirelessSsidSplashSettings_200_response summary);
    void updateOrganizationAdaptivePolicySettingsSignal(OAIObject summary);


    void getDeviceApplianceUplinksSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceApplianceUplinksSettings_200_response summary);
    void getDeviceCameraVideoSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceWirelessBluetoothSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceWirelessBluetoothSettings_200_response summary);
    void getDeviceWirelessRadioSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkAlertsSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceSettings_200_response summary);
    void getNetworkApplianceVlansSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSettings_200_response summary);
    void getNetworkSwitchSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchSettings_200_response summary);
    void getNetworkWirelessBluetoothSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessBluetoothSettings_200_response summary);
    void getNetworkWirelessSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSettings_200_response summary);
    void getNetworkWirelessSsidSplashSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSsidSplashSettings_200_response summary);
    void getOrganizationAdaptivePolicySettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceApplianceUplinksSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceApplianceUplinksSettings_200_response summary);
    void updateDeviceCameraVideoSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceWirelessBluetoothSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceWirelessBluetoothSettings_200_response summary);
    void updateDeviceWirelessRadioSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkAlertsSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceSettings_200_response summary);
    void updateNetworkApplianceVlansSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSettings_200_response summary);
    void updateNetworkSwitchSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchSettings_200_response summary);
    void updateNetworkWirelessBluetoothSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessBluetoothSettings_200_response summary);
    void updateNetworkWirelessSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSettings_200_response summary);
    void updateNetworkWirelessSsidSplashSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkWirelessSsidSplashSettings_200_response summary);
    void updateOrganizationAdaptivePolicySettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use getDeviceApplianceUplinksSettingsSignalError() instead")
    void getDeviceApplianceUplinksSettingsSignalE(OAIGetDeviceApplianceUplinksSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceApplianceUplinksSettingsSignalError(OAIGetDeviceApplianceUplinksSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraVideoSettingsSignalError() instead")
    void getDeviceCameraVideoSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraVideoSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessBluetoothSettingsSignalError() instead")
    void getDeviceWirelessBluetoothSettingsSignalE(OAIGetDeviceWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessBluetoothSettingsSignalError(OAIGetDeviceWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessRadioSettingsSignalError() instead")
    void getDeviceWirelessRadioSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessRadioSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAlertsSettingsSignalError() instead")
    void getNetworkAlertsSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAlertsSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallSettingsSignalError() instead")
    void getNetworkApplianceFirewallSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSettingsSignalError() instead")
    void getNetworkApplianceSettingsSignalE(OAIGetNetworkApplianceSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSettingsSignalError(OAIGetNetworkApplianceSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVlansSettingsSignalError() instead")
    void getNetworkApplianceVlansSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVlansSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSettingsSignalError() instead")
    void getNetworkSettingsSignalE(OAIGetNetworkSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSettingsSignalError(OAIGetNetworkSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsSignalError() instead")
    void getNetworkSwitchSettingsSignalE(OAIGetNetworkSwitchSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsSignalError(OAIGetNetworkSwitchSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessBluetoothSettingsSignalError() instead")
    void getNetworkWirelessBluetoothSettingsSignalE(OAIGetNetworkWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessBluetoothSettingsSignalError(OAIGetNetworkWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSettingsSignalError() instead")
    void getNetworkWirelessSettingsSignalE(OAIGetNetworkWirelessSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSettingsSignalError(OAIGetNetworkWirelessSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSplashSettingsSignalError() instead")
    void getNetworkWirelessSsidSplashSettingsSignalE(OAIGetNetworkWirelessSsidSplashSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSplashSettingsSignalError(OAIGetNetworkWirelessSsidSplashSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicySettingsSignalError() instead")
    void getOrganizationAdaptivePolicySettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicySettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceApplianceUplinksSettingsSignalError() instead")
    void updateDeviceApplianceUplinksSettingsSignalE(OAIGetDeviceApplianceUplinksSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceApplianceUplinksSettingsSignalError(OAIGetDeviceApplianceUplinksSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraVideoSettingsSignalError() instead")
    void updateDeviceCameraVideoSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraVideoSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceWirelessBluetoothSettingsSignalError() instead")
    void updateDeviceWirelessBluetoothSettingsSignalE(OAIGetDeviceWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceWirelessBluetoothSettingsSignalError(OAIGetDeviceWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceWirelessRadioSettingsSignalError() instead")
    void updateDeviceWirelessRadioSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceWirelessRadioSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkAlertsSettingsSignalError() instead")
    void updateNetworkAlertsSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkAlertsSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallSettingsSignalError() instead")
    void updateNetworkApplianceFirewallSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSettingsSignalError() instead")
    void updateNetworkApplianceSettingsSignalE(OAIGetNetworkApplianceSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSettingsSignalError(OAIGetNetworkApplianceSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVlansSettingsSignalError() instead")
    void updateNetworkApplianceVlansSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVlansSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSettingsSignalError() instead")
    void updateNetworkSettingsSignalE(OAIGetNetworkSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSettingsSignalError(OAIGetNetworkSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchSettingsSignalError() instead")
    void updateNetworkSwitchSettingsSignalE(OAIGetNetworkSwitchSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchSettingsSignalError(OAIGetNetworkSwitchSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessBluetoothSettingsSignalError() instead")
    void updateNetworkWirelessBluetoothSettingsSignalE(OAIGetNetworkWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessBluetoothSettingsSignalError(OAIGetNetworkWirelessBluetoothSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSettingsSignalError() instead")
    void updateNetworkWirelessSettingsSignalE(OAIGetNetworkWirelessSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSettingsSignalError(OAIGetNetworkWirelessSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSplashSettingsSignalError() instead")
    void updateNetworkWirelessSsidSplashSettingsSignalE(OAIGetNetworkWirelessSsidSplashSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSplashSettingsSignalError(OAIGetNetworkWirelessSsidSplashSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicySettingsSignalError() instead")
    void updateOrganizationAdaptivePolicySettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicySettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDeviceApplianceUplinksSettingsSignalErrorFull() instead")
    void getDeviceApplianceUplinksSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceApplianceUplinksSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceCameraVideoSettingsSignalErrorFull() instead")
    void getDeviceCameraVideoSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceCameraVideoSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessBluetoothSettingsSignalErrorFull() instead")
    void getDeviceWirelessBluetoothSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessBluetoothSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceWirelessRadioSettingsSignalErrorFull() instead")
    void getDeviceWirelessRadioSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceWirelessRadioSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAlertsSettingsSignalErrorFull() instead")
    void getNetworkAlertsSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAlertsSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallSettingsSignalErrorFull() instead")
    void getNetworkApplianceFirewallSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceSettingsSignalErrorFull() instead")
    void getNetworkApplianceSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVlansSettingsSignalErrorFull() instead")
    void getNetworkApplianceVlansSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVlansSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSettingsSignalErrorFull() instead")
    void getNetworkSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsSignalErrorFull() instead")
    void getNetworkSwitchSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessBluetoothSettingsSignalErrorFull() instead")
    void getNetworkWirelessBluetoothSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessBluetoothSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSettingsSignalErrorFull() instead")
    void getNetworkWirelessSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidSplashSettingsSignalErrorFull() instead")
    void getNetworkWirelessSsidSplashSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidSplashSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicySettingsSignalErrorFull() instead")
    void getOrganizationAdaptivePolicySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceApplianceUplinksSettingsSignalErrorFull() instead")
    void updateDeviceApplianceUplinksSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceApplianceUplinksSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceCameraVideoSettingsSignalErrorFull() instead")
    void updateDeviceCameraVideoSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceCameraVideoSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceWirelessBluetoothSettingsSignalErrorFull() instead")
    void updateDeviceWirelessBluetoothSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceWirelessBluetoothSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceWirelessRadioSettingsSignalErrorFull() instead")
    void updateDeviceWirelessRadioSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceWirelessRadioSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkAlertsSettingsSignalErrorFull() instead")
    void updateNetworkAlertsSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkAlertsSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallSettingsSignalErrorFull() instead")
    void updateNetworkApplianceFirewallSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceSettingsSignalErrorFull() instead")
    void updateNetworkApplianceSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVlansSettingsSignalErrorFull() instead")
    void updateNetworkApplianceVlansSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVlansSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSettingsSignalErrorFull() instead")
    void updateNetworkSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchSettingsSignalErrorFull() instead")
    void updateNetworkSwitchSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessBluetoothSettingsSignalErrorFull() instead")
    void updateNetworkWirelessBluetoothSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessBluetoothSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSettingsSignalErrorFull() instead")
    void updateNetworkWirelessSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidSplashSettingsSignalErrorFull() instead")
    void updateNetworkWirelessSsidSplashSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidSplashSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicySettingsSignalErrorFull() instead")
    void updateOrganizationAdaptivePolicySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
