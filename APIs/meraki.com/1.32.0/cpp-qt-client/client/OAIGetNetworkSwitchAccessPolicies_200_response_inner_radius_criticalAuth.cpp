/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth() {
    this->initializeModel();
}

OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::~OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth() {}

void OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::initializeModel() {

    m_data_vlan_id_isSet = false;
    m_data_vlan_id_isValid = false;

    m_suspend_port_bounce_isSet = false;
    m_suspend_port_bounce_isValid = false;

    m_voice_vlan_id_isSet = false;
    m_voice_vlan_id_isValid = false;
}

void OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::fromJsonObject(QJsonObject json) {

    m_data_vlan_id_isValid = ::OpenAPI::fromJsonValue(m_data_vlan_id, json[QString("dataVlanId")]);
    m_data_vlan_id_isSet = !json[QString("dataVlanId")].isNull() && m_data_vlan_id_isValid;

    m_suspend_port_bounce_isValid = ::OpenAPI::fromJsonValue(m_suspend_port_bounce, json[QString("suspendPortBounce")]);
    m_suspend_port_bounce_isSet = !json[QString("suspendPortBounce")].isNull() && m_suspend_port_bounce_isValid;

    m_voice_vlan_id_isValid = ::OpenAPI::fromJsonValue(m_voice_vlan_id, json[QString("voiceVlanId")]);
    m_voice_vlan_id_isSet = !json[QString("voiceVlanId")].isNull() && m_voice_vlan_id_isValid;
}

QString OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::asJsonObject() const {
    QJsonObject obj;
    if (m_data_vlan_id_isSet) {
        obj.insert(QString("dataVlanId"), ::OpenAPI::toJsonValue(m_data_vlan_id));
    }
    if (m_suspend_port_bounce_isSet) {
        obj.insert(QString("suspendPortBounce"), ::OpenAPI::toJsonValue(m_suspend_port_bounce));
    }
    if (m_voice_vlan_id_isSet) {
        obj.insert(QString("voiceVlanId"), ::OpenAPI::toJsonValue(m_voice_vlan_id));
    }
    return obj;
}

qint32 OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::getDataVlanId() const {
    return m_data_vlan_id;
}
void OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::setDataVlanId(const qint32 &data_vlan_id) {
    m_data_vlan_id = data_vlan_id;
    m_data_vlan_id_isSet = true;
}

bool OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::is_data_vlan_id_Set() const{
    return m_data_vlan_id_isSet;
}

bool OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::is_data_vlan_id_Valid() const{
    return m_data_vlan_id_isValid;
}

bool OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::isSuspendPortBounce() const {
    return m_suspend_port_bounce;
}
void OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::setSuspendPortBounce(const bool &suspend_port_bounce) {
    m_suspend_port_bounce = suspend_port_bounce;
    m_suspend_port_bounce_isSet = true;
}

bool OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::is_suspend_port_bounce_Set() const{
    return m_suspend_port_bounce_isSet;
}

bool OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::is_suspend_port_bounce_Valid() const{
    return m_suspend_port_bounce_isValid;
}

qint32 OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::getVoiceVlanId() const {
    return m_voice_vlan_id;
}
void OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::setVoiceVlanId(const qint32 &voice_vlan_id) {
    m_voice_vlan_id = voice_vlan_id;
    m_voice_vlan_id_isSet = true;
}

bool OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::is_voice_vlan_id_Set() const{
    return m_voice_vlan_id_isSet;
}

bool OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::is_voice_vlan_id_Valid() const{
    return m_voice_vlan_id_isValid;
}

bool OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_vlan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspend_port_bounce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_vlan_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSwitchAccessPolicies_200_response_inner_radius_criticalAuth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
