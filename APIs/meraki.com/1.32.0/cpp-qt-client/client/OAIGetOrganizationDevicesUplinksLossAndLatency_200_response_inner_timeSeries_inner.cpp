/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner() {
    this->initializeModel();
}

OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::~OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner() {}

void OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::initializeModel() {

    m_latency_ms_isSet = false;
    m_latency_ms_isValid = false;

    m_loss_percent_isSet = false;
    m_loss_percent_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;
}

void OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::fromJsonObject(QJsonObject json) {

    m_latency_ms_isValid = ::OpenAPI::fromJsonValue(m_latency_ms, json[QString("latencyMs")]);
    m_latency_ms_isSet = !json[QString("latencyMs")].isNull() && m_latency_ms_isValid;

    m_loss_percent_isValid = ::OpenAPI::fromJsonValue(m_loss_percent, json[QString("lossPercent")]);
    m_loss_percent_isSet = !json[QString("lossPercent")].isNull() && m_loss_percent_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;
}

QString OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_latency_ms_isSet) {
        obj.insert(QString("latencyMs"), ::OpenAPI::toJsonValue(m_latency_ms));
    }
    if (m_loss_percent_isSet) {
        obj.insert(QString("lossPercent"), ::OpenAPI::toJsonValue(m_loss_percent));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    return obj;
}

float OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::getLatencyMs() const {
    return m_latency_ms;
}
void OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::setLatencyMs(const float &latency_ms) {
    m_latency_ms = latency_ms;
    m_latency_ms_isSet = true;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::is_latency_ms_Set() const{
    return m_latency_ms_isSet;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::is_latency_ms_Valid() const{
    return m_latency_ms_isValid;
}

float OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::getLossPercent() const {
    return m_loss_percent;
}
void OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::setLossPercent(const float &loss_percent) {
    m_loss_percent = loss_percent;
    m_loss_percent_isSet = true;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::is_loss_percent_Set() const{
    return m_loss_percent_isSet;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::is_loss_percent_Valid() const{
    return m_loss_percent_isValid;
}

QDateTime OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::getTs() const {
    return m_ts;
}
void OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::setTs(const QDateTime &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::is_ts_Valid() const{
    return m_ts_isValid;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_latency_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loss_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationDevicesUplinksLossAndLatency_200_response_inner_timeSeries_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
