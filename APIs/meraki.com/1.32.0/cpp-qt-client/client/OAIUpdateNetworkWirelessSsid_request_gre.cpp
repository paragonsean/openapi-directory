/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkWirelessSsid_request_gre.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkWirelessSsid_request_gre::OAIUpdateNetworkWirelessSsid_request_gre(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkWirelessSsid_request_gre::OAIUpdateNetworkWirelessSsid_request_gre() {
    this->initializeModel();
}

OAIUpdateNetworkWirelessSsid_request_gre::~OAIUpdateNetworkWirelessSsid_request_gre() {}

void OAIUpdateNetworkWirelessSsid_request_gre::initializeModel() {

    m_concentrator_isSet = false;
    m_concentrator_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;
}

void OAIUpdateNetworkWirelessSsid_request_gre::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkWirelessSsid_request_gre::fromJsonObject(QJsonObject json) {

    m_concentrator_isValid = ::OpenAPI::fromJsonValue(m_concentrator, json[QString("concentrator")]);
    m_concentrator_isSet = !json[QString("concentrator")].isNull() && m_concentrator_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;
}

QString OAIUpdateNetworkWirelessSsid_request_gre::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkWirelessSsid_request_gre::asJsonObject() const {
    QJsonObject obj;
    if (m_concentrator.isSet()) {
        obj.insert(QString("concentrator"), ::OpenAPI::toJsonValue(m_concentrator));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    return obj;
}

OAIUpdateNetworkWirelessSsid_request_gre_concentrator OAIUpdateNetworkWirelessSsid_request_gre::getConcentrator() const {
    return m_concentrator;
}
void OAIUpdateNetworkWirelessSsid_request_gre::setConcentrator(const OAIUpdateNetworkWirelessSsid_request_gre_concentrator &concentrator) {
    m_concentrator = concentrator;
    m_concentrator_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request_gre::is_concentrator_Set() const{
    return m_concentrator_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request_gre::is_concentrator_Valid() const{
    return m_concentrator_isValid;
}

qint32 OAIUpdateNetworkWirelessSsid_request_gre::getKey() const {
    return m_key;
}
void OAIUpdateNetworkWirelessSsid_request_gre::setKey(const qint32 &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIUpdateNetworkWirelessSsid_request_gre::is_key_Set() const{
    return m_key_isSet;
}

bool OAIUpdateNetworkWirelessSsid_request_gre::is_key_Valid() const{
    return m_key_isValid;
}

bool OAIUpdateNetworkWirelessSsid_request_gre::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concentrator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkWirelessSsid_request_gre::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
