/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFirewallApi_H
#define OAI_OAIFirewallApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request.h"
#include "OAIUpdateNetworkApplianceFirewallFirewalledService_request.h"
#include "OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request.h"
#include "OAIUpdateNetworkApplianceFirewallL7FirewallRules_request.h"
#include "OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request.h"
#include "OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request.h"
#include "OAIUpdateNetworkApplianceFirewallPortForwardingRules_request.h"
#include "OAIUpdateNetworkApplianceFirewallSettings_request.h"
#include "OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request.h"
#include "OAIUpdateNetworkWirelessSsidFirewallL7FirewallRules_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFirewallApi : public QObject {
    Q_OBJECT

public:
    OAIFirewallApi(const int timeOut = 0);
    ~OAIFirewallApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallCellularFirewallRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  service QString [required]
    */
    virtual void getNetworkApplianceFirewallFirewalledService(const QString &network_id, const QString &service);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallFirewalledServices(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallInboundCellularFirewallRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallInboundFirewallRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallL3FirewallRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallL7FirewallRulesApplicationCategories(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallL7FirewallRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallOneToManyNatRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallOneToOneNatRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallPortForwardingRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceFirewallSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidFirewallL3FirewallRules(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidFirewallL7FirewallRules(const QString &network_id, const QString &number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_cellular_firewall_rules_request OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request [optional]
    */
    virtual void updateNetworkApplianceFirewallCellularFirewallRules(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request> &oai_update_network_appliance_firewall_cellular_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  service QString [required]
    * @param[in]  oai_update_network_appliance_firewall_firewalled_service_request OAIUpdateNetworkApplianceFirewallFirewalledService_request [required]
    */
    virtual void updateNetworkApplianceFirewallFirewalledService(const QString &network_id, const QString &service, const OAIUpdateNetworkApplianceFirewallFirewalledService_request &oai_update_network_appliance_firewall_firewalled_service_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_cellular_firewall_rules_request OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request [optional]
    */
    virtual void updateNetworkApplianceFirewallInboundCellularFirewallRules(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request> &oai_update_network_appliance_firewall_cellular_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallCellularFirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_inbound_firewall_rules_request OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request [optional]
    */
    virtual void updateNetworkApplianceFirewallInboundFirewallRules(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request> &oai_update_network_appliance_firewall_inbound_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_inbound_firewall_rules_request OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request [optional]
    */
    virtual void updateNetworkApplianceFirewallL3FirewallRules(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request> &oai_update_network_appliance_firewall_inbound_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallInboundFirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_l7_firewall_rules_request OAIUpdateNetworkApplianceFirewallL7FirewallRules_request [optional]
    */
    virtual void updateNetworkApplianceFirewallL7FirewallRules(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallL7FirewallRules_request> &oai_update_network_appliance_firewall_l7_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallL7FirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_one_to_many_nat_rules_request OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request [required]
    */
    virtual void updateNetworkApplianceFirewallOneToManyNatRules(const QString &network_id, const OAIUpdateNetworkApplianceFirewallOneToManyNatRules_request &oai_update_network_appliance_firewall_one_to_many_nat_rules_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_one_to_one_nat_rules_request OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request [required]
    */
    virtual void updateNetworkApplianceFirewallOneToOneNatRules(const QString &network_id, const OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request &oai_update_network_appliance_firewall_one_to_one_nat_rules_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_port_forwarding_rules_request OAIUpdateNetworkApplianceFirewallPortForwardingRules_request [required]
    */
    virtual void updateNetworkApplianceFirewallPortForwardingRules(const QString &network_id, const OAIUpdateNetworkApplianceFirewallPortForwardingRules_request &oai_update_network_appliance_firewall_port_forwarding_rules_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_firewall_settings_request OAIUpdateNetworkApplianceFirewallSettings_request [optional]
    */
    virtual void updateNetworkApplianceFirewallSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallSettings_request> &oai_update_network_appliance_firewall_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceFirewallSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_firewall_l3_firewall_rules_request OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request [optional]
    */
    virtual void updateNetworkWirelessSsidFirewallL3FirewallRules(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request> &oai_update_network_wireless_ssid_firewall_l3_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidFirewallL3FirewallRules_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_firewall_l7_firewall_rules_request OAIUpdateNetworkWirelessSsidFirewallL7FirewallRules_request [optional]
    */
    virtual void updateNetworkWirelessSsidFirewallL7FirewallRules(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidFirewallL7FirewallRules_request> &oai_update_network_wireless_ssid_firewall_l7_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidFirewallL7FirewallRules_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getNetworkApplianceFirewallCellularFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallFirewalledServiceCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallFirewalledServicesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallInboundCellularFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallInboundFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallL3FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallL7FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallOneToManyNatRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallOneToOneNatRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallPortForwardingRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceFirewallSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidFirewallL3FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidFirewallL7FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallCellularFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallFirewalledServiceCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallInboundFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallL3FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallL7FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallOneToManyNatRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallOneToOneNatRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallPortForwardingRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceFirewallSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getNetworkApplianceFirewallCellularFirewallRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallFirewalledServiceSignal(OAIObject summary);
    void getNetworkApplianceFirewallFirewalledServicesSignal(QList<OAIObject> summary);
    void getNetworkApplianceFirewallInboundCellularFirewallRulesSignal(QList<OAIObject> summary);
    void getNetworkApplianceFirewallInboundFirewallRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallL3FirewallRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignal(OAIObject summary);
    void getNetworkApplianceFirewallL7FirewallRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallOneToManyNatRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallOneToOneNatRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallPortForwardingRulesSignal(OAIObject summary);
    void getNetworkApplianceFirewallSettingsSignal(OAIObject summary);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignal(OAIObject summary);
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallCellularFirewallRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallFirewalledServiceSignal(OAIObject summary);
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesSignal(QList<OAIObject> summary);
    void updateNetworkApplianceFirewallInboundFirewallRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallL3FirewallRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallL7FirewallRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallOneToManyNatRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallOneToOneNatRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallPortForwardingRulesSignal(OAIObject summary);
    void updateNetworkApplianceFirewallSettingsSignal(OAIObject summary);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignal(OAIObject summary);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignal(OAIObject summary);


    void getNetworkApplianceFirewallCellularFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallFirewalledServiceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallFirewalledServicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkApplianceFirewallInboundCellularFirewallRulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkApplianceFirewallInboundFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallL3FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallL7FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallOneToManyNatRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallOneToOneNatRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallPortForwardingRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceFirewallSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallCellularFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallFirewalledServiceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void updateNetworkApplianceFirewallInboundFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallL3FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallL7FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallOneToManyNatRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallOneToOneNatRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallPortForwardingRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceFirewallSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallCellularFirewallRulesSignalError() instead")
    void getNetworkApplianceFirewallCellularFirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallCellularFirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallFirewalledServiceSignalError() instead")
    void getNetworkApplianceFirewallFirewalledServiceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallFirewalledServiceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallFirewalledServicesSignalError() instead")
    void getNetworkApplianceFirewallFirewalledServicesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallFirewalledServicesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallInboundCellularFirewallRulesSignalError() instead")
    void getNetworkApplianceFirewallInboundCellularFirewallRulesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallInboundCellularFirewallRulesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallInboundFirewallRulesSignalError() instead")
    void getNetworkApplianceFirewallInboundFirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallInboundFirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL3FirewallRulesSignalError() instead")
    void getNetworkApplianceFirewallL3FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL3FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalError() instead")
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL7FirewallRulesSignalError() instead")
    void getNetworkApplianceFirewallL7FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL7FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallOneToManyNatRulesSignalError() instead")
    void getNetworkApplianceFirewallOneToManyNatRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallOneToManyNatRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallOneToOneNatRulesSignalError() instead")
    void getNetworkApplianceFirewallOneToOneNatRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallOneToOneNatRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallPortForwardingRulesSignalError() instead")
    void getNetworkApplianceFirewallPortForwardingRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallPortForwardingRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallSettingsSignalError() instead")
    void getNetworkApplianceFirewallSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidFirewallL3FirewallRulesSignalError() instead")
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidFirewallL7FirewallRulesSignalError() instead")
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallCellularFirewallRulesSignalError() instead")
    void updateNetworkApplianceFirewallCellularFirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallCellularFirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallFirewalledServiceSignalError() instead")
    void updateNetworkApplianceFirewallFirewalledServiceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallFirewalledServiceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalError() instead")
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallInboundFirewallRulesSignalError() instead")
    void updateNetworkApplianceFirewallInboundFirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallInboundFirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallL3FirewallRulesSignalError() instead")
    void updateNetworkApplianceFirewallL3FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallL3FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallL7FirewallRulesSignalError() instead")
    void updateNetworkApplianceFirewallL7FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallL7FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallOneToManyNatRulesSignalError() instead")
    void updateNetworkApplianceFirewallOneToManyNatRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallOneToManyNatRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallOneToOneNatRulesSignalError() instead")
    void updateNetworkApplianceFirewallOneToOneNatRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallOneToOneNatRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallPortForwardingRulesSignalError() instead")
    void updateNetworkApplianceFirewallPortForwardingRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallPortForwardingRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallSettingsSignalError() instead")
    void updateNetworkApplianceFirewallSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidFirewallL3FirewallRulesSignalError() instead")
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidFirewallL7FirewallRulesSignalError() instead")
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallCellularFirewallRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallCellularFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallCellularFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallFirewalledServiceSignalErrorFull() instead")
    void getNetworkApplianceFirewallFirewalledServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallFirewalledServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallFirewalledServicesSignalErrorFull() instead")
    void getNetworkApplianceFirewallFirewalledServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallFirewalledServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallInboundCellularFirewallRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallInboundCellularFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallInboundCellularFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallInboundFirewallRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallInboundFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallInboundFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL3FirewallRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallL3FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL3FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalErrorFull() instead")
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallL7FirewallRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallL7FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallL7FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallOneToManyNatRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallOneToManyNatRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallOneToManyNatRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallOneToOneNatRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallOneToOneNatRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallOneToOneNatRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallPortForwardingRulesSignalErrorFull() instead")
    void getNetworkApplianceFirewallPortForwardingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallPortForwardingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceFirewallSettingsSignalErrorFull() instead")
    void getNetworkApplianceFirewallSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceFirewallSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull() instead")
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidFirewallL7FirewallRulesSignalErrorFull() instead")
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidFirewallL7FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallCellularFirewallRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallCellularFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallCellularFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallFirewalledServiceSignalErrorFull() instead")
    void updateNetworkApplianceFirewallFirewalledServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallFirewalledServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallInboundCellularFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallInboundFirewallRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallInboundFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallInboundFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallL3FirewallRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallL3FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallL3FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallL7FirewallRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallL7FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallL7FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallOneToManyNatRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallOneToManyNatRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallOneToManyNatRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallOneToOneNatRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallOneToOneNatRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallOneToOneNatRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallPortForwardingRulesSignalErrorFull() instead")
    void updateNetworkApplianceFirewallPortForwardingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallPortForwardingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceFirewallSettingsSignalErrorFull() instead")
    void updateNetworkApplianceFirewallSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceFirewallSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull() instead")
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidFirewallL3FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidFirewallL7FirewallRulesSignalErrorFull() instead")
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidFirewallL7FirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
