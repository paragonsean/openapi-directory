/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNetworkFirmwareUpgradesRollback_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNetworkFirmwareUpgradesRollback_200_response::OAICreateNetworkFirmwareUpgradesRollback_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNetworkFirmwareUpgradesRollback_200_response::OAICreateNetworkFirmwareUpgradesRollback_200_response() {
    this->initializeModel();
}

OAICreateNetworkFirmwareUpgradesRollback_200_response::~OAICreateNetworkFirmwareUpgradesRollback_200_response() {}

void OAICreateNetworkFirmwareUpgradesRollback_200_response::initializeModel() {

    m_product_isSet = false;
    m_product_isValid = false;

    m_reasons_isSet = false;
    m_reasons_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_to_version_isSet = false;
    m_to_version_isValid = false;

    m_upgrade_batch_id_isSet = false;
    m_upgrade_batch_id_isValid = false;
}

void OAICreateNetworkFirmwareUpgradesRollback_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNetworkFirmwareUpgradesRollback_200_response::fromJsonObject(QJsonObject json) {

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_reasons_isValid = ::OpenAPI::fromJsonValue(m_reasons, json[QString("reasons")]);
    m_reasons_isSet = !json[QString("reasons")].isNull() && m_reasons_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_to_version_isValid = ::OpenAPI::fromJsonValue(m_to_version, json[QString("toVersion")]);
    m_to_version_isSet = !json[QString("toVersion")].isNull() && m_to_version_isValid;

    m_upgrade_batch_id_isValid = ::OpenAPI::fromJsonValue(m_upgrade_batch_id, json[QString("upgradeBatchId")]);
    m_upgrade_batch_id_isSet = !json[QString("upgradeBatchId")].isNull() && m_upgrade_batch_id_isValid;
}

QString OAICreateNetworkFirmwareUpgradesRollback_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNetworkFirmwareUpgradesRollback_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_product_isSet) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_reasons.size() > 0) {
        obj.insert(QString("reasons"), ::OpenAPI::toJsonValue(m_reasons));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_to_version.isSet()) {
        obj.insert(QString("toVersion"), ::OpenAPI::toJsonValue(m_to_version));
    }
    if (m_upgrade_batch_id_isSet) {
        obj.insert(QString("upgradeBatchId"), ::OpenAPI::toJsonValue(m_upgrade_batch_id));
    }
    return obj;
}

QString OAICreateNetworkFirmwareUpgradesRollback_200_response::getProduct() const {
    return m_product;
}
void OAICreateNetworkFirmwareUpgradesRollback_200_response::setProduct(const QString &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAICreateNetworkFirmwareUpgradesRollback_200_response::is_product_Set() const{
    return m_product_isSet;
}

bool OAICreateNetworkFirmwareUpgradesRollback_200_response::is_product_Valid() const{
    return m_product_isValid;
}

QList<OAICreateNetworkFirmwareUpgradesRollback_200_response_reasons_inner> OAICreateNetworkFirmwareUpgradesRollback_200_response::getReasons() const {
    return m_reasons;
}
void OAICreateNetworkFirmwareUpgradesRollback_200_response::setReasons(const QList<OAICreateNetworkFirmwareUpgradesRollback_200_response_reasons_inner> &reasons) {
    m_reasons = reasons;
    m_reasons_isSet = true;
}

bool OAICreateNetworkFirmwareUpgradesRollback_200_response::is_reasons_Set() const{
    return m_reasons_isSet;
}

bool OAICreateNetworkFirmwareUpgradesRollback_200_response::is_reasons_Valid() const{
    return m_reasons_isValid;
}

QString OAICreateNetworkFirmwareUpgradesRollback_200_response::getStatus() const {
    return m_status;
}
void OAICreateNetworkFirmwareUpgradesRollback_200_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateNetworkFirmwareUpgradesRollback_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateNetworkFirmwareUpgradesRollback_200_response::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAICreateNetworkFirmwareUpgradesRollback_200_response::getTime() const {
    return m_time;
}
void OAICreateNetworkFirmwareUpgradesRollback_200_response::setTime(const QDateTime &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAICreateNetworkFirmwareUpgradesRollback_200_response::is_time_Set() const{
    return m_time_isSet;
}

bool OAICreateNetworkFirmwareUpgradesRollback_200_response::is_time_Valid() const{
    return m_time_isValid;
}

OAICreateNetworkFirmwareUpgradesRollback_200_response_toVersion OAICreateNetworkFirmwareUpgradesRollback_200_response::getToVersion() const {
    return m_to_version;
}
void OAICreateNetworkFirmwareUpgradesRollback_200_response::setToVersion(const OAICreateNetworkFirmwareUpgradesRollback_200_response_toVersion &to_version) {
    m_to_version = to_version;
    m_to_version_isSet = true;
}

bool OAICreateNetworkFirmwareUpgradesRollback_200_response::is_to_version_Set() const{
    return m_to_version_isSet;
}

bool OAICreateNetworkFirmwareUpgradesRollback_200_response::is_to_version_Valid() const{
    return m_to_version_isValid;
}

QString OAICreateNetworkFirmwareUpgradesRollback_200_response::getUpgradeBatchId() const {
    return m_upgrade_batch_id;
}
void OAICreateNetworkFirmwareUpgradesRollback_200_response::setUpgradeBatchId(const QString &upgrade_batch_id) {
    m_upgrade_batch_id = upgrade_batch_id;
    m_upgrade_batch_id_isSet = true;
}

bool OAICreateNetworkFirmwareUpgradesRollback_200_response::is_upgrade_batch_id_Set() const{
    return m_upgrade_batch_id_isSet;
}

bool OAICreateNetworkFirmwareUpgradesRollback_200_response::is_upgrade_batch_id_Valid() const{
    return m_upgrade_batch_id_isValid;
}

bool OAICreateNetworkFirmwareUpgradesRollback_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNetworkFirmwareUpgradesRollback_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
