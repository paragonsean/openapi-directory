/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConnectivityMonitoringDestinationsApi_H
#define OAI_OAIConnectivityMonitoringDestinationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAIUpdateNetworkApplianceConnectivityMonitoringDestinations_request.h"
#include "OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConnectivityMonitoringDestinationsApi : public QObject {
    Q_OBJECT

public:
    OAIConnectivityMonitoringDestinationsApi(const int timeOut = 0);
    ~OAIConnectivityMonitoringDestinationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceConnectivityMonitoringDestinations(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkCellularGatewayConnectivityMonitoringDestinations(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_connectivity_monitoring_destinations_request OAIUpdateNetworkApplianceConnectivityMonitoringDestinations_request [optional]
    */
    virtual void updateNetworkApplianceConnectivityMonitoringDestinations(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceConnectivityMonitoringDestinations_request> &oai_update_network_appliance_connectivity_monitoring_destinations_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkApplianceConnectivityMonitoringDestinations_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_cellular_gateway_connectivity_monitoring_destinations_request OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request [optional]
    */
    virtual void updateNetworkCellularGatewayConnectivityMonitoringDestinations(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request> &oai_update_network_cellular_gateway_connectivity_monitoring_destinations_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkCellularGatewayConnectivityMonitoringDestinations_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getNetworkApplianceConnectivityMonitoringDestinationsCallback(OAIHttpRequestWorker *worker);
    void getNetworkCellularGatewayConnectivityMonitoringDestinationsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceConnectivityMonitoringDestinationsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkCellularGatewayConnectivityMonitoringDestinationsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getNetworkApplianceConnectivityMonitoringDestinationsSignal(OAIObject summary);
    void getNetworkCellularGatewayConnectivityMonitoringDestinationsSignal(OAIObject summary);
    void updateNetworkApplianceConnectivityMonitoringDestinationsSignal(OAIObject summary);
    void updateNetworkCellularGatewayConnectivityMonitoringDestinationsSignal(OAIObject summary);


    void getNetworkApplianceConnectivityMonitoringDestinationsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkCellularGatewayConnectivityMonitoringDestinationsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceConnectivityMonitoringDestinationsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkCellularGatewayConnectivityMonitoringDestinationsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use getNetworkApplianceConnectivityMonitoringDestinationsSignalError() instead")
    void getNetworkApplianceConnectivityMonitoringDestinationsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceConnectivityMonitoringDestinationsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCellularGatewayConnectivityMonitoringDestinationsSignalError() instead")
    void getNetworkCellularGatewayConnectivityMonitoringDestinationsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCellularGatewayConnectivityMonitoringDestinationsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceConnectivityMonitoringDestinationsSignalError() instead")
    void updateNetworkApplianceConnectivityMonitoringDestinationsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceConnectivityMonitoringDestinationsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCellularGatewayConnectivityMonitoringDestinationsSignalError() instead")
    void updateNetworkCellularGatewayConnectivityMonitoringDestinationsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCellularGatewayConnectivityMonitoringDestinationsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getNetworkApplianceConnectivityMonitoringDestinationsSignalErrorFull() instead")
    void getNetworkApplianceConnectivityMonitoringDestinationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceConnectivityMonitoringDestinationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCellularGatewayConnectivityMonitoringDestinationsSignalErrorFull() instead")
    void getNetworkCellularGatewayConnectivityMonitoringDestinationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCellularGatewayConnectivityMonitoringDestinationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceConnectivityMonitoringDestinationsSignalErrorFull() instead")
    void updateNetworkApplianceConnectivityMonitoringDestinationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceConnectivityMonitoringDestinationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCellularGatewayConnectivityMonitoringDestinationsSignalErrorFull() instead")
    void updateNetworkCellularGatewayConnectivityMonitoringDestinationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCellularGatewayConnectivityMonitoringDestinationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
