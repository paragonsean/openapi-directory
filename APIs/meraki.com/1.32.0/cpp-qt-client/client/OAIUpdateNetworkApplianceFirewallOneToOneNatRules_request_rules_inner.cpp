/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner() {
    this->initializeModel();
}

OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::~OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner() {}

void OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::initializeModel() {

    m_allowed_inbound_isSet = false;
    m_allowed_inbound_isValid = false;

    m_lan_ip_isSet = false;
    m_lan_ip_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_public_ip_isSet = false;
    m_public_ip_isValid = false;

    m_uplink_isSet = false;
    m_uplink_isValid = false;
}

void OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::fromJsonObject(QJsonObject json) {

    m_allowed_inbound_isValid = ::OpenAPI::fromJsonValue(m_allowed_inbound, json[QString("allowedInbound")]);
    m_allowed_inbound_isSet = !json[QString("allowedInbound")].isNull() && m_allowed_inbound_isValid;

    m_lan_ip_isValid = ::OpenAPI::fromJsonValue(m_lan_ip, json[QString("lanIp")]);
    m_lan_ip_isSet = !json[QString("lanIp")].isNull() && m_lan_ip_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_public_ip_isValid = ::OpenAPI::fromJsonValue(m_public_ip, json[QString("publicIp")]);
    m_public_ip_isSet = !json[QString("publicIp")].isNull() && m_public_ip_isValid;

    m_uplink_isValid = ::OpenAPI::fromJsonValue(m_uplink, json[QString("uplink")]);
    m_uplink_isSet = !json[QString("uplink")].isNull() && m_uplink_isValid;
}

QString OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_inbound.size() > 0) {
        obj.insert(QString("allowedInbound"), ::OpenAPI::toJsonValue(m_allowed_inbound));
    }
    if (m_lan_ip_isSet) {
        obj.insert(QString("lanIp"), ::OpenAPI::toJsonValue(m_lan_ip));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_public_ip_isSet) {
        obj.insert(QString("publicIp"), ::OpenAPI::toJsonValue(m_public_ip));
    }
    if (m_uplink_isSet) {
        obj.insert(QString("uplink"), ::OpenAPI::toJsonValue(m_uplink));
    }
    return obj;
}

QList<OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner_allowedInbound_inner> OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::getAllowedInbound() const {
    return m_allowed_inbound;
}
void OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::setAllowedInbound(const QList<OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner_allowedInbound_inner> &allowed_inbound) {
    m_allowed_inbound = allowed_inbound;
    m_allowed_inbound_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::is_allowed_inbound_Set() const{
    return m_allowed_inbound_isSet;
}

bool OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::is_allowed_inbound_Valid() const{
    return m_allowed_inbound_isValid;
}

QString OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::getLanIp() const {
    return m_lan_ip;
}
void OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::setLanIp(const QString &lan_ip) {
    m_lan_ip = lan_ip;
    m_lan_ip_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::is_lan_ip_Set() const{
    return m_lan_ip_isSet;
}

bool OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::is_lan_ip_Valid() const{
    return m_lan_ip_isValid;
}

QString OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::getName() const {
    return m_name;
}
void OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::getPublicIp() const {
    return m_public_ip;
}
void OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::setPublicIp(const QString &public_ip) {
    m_public_ip = public_ip;
    m_public_ip_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::is_public_ip_Set() const{
    return m_public_ip_isSet;
}

bool OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::is_public_ip_Valid() const{
    return m_public_ip_isValid;
}

QString OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::getUplink() const {
    return m_uplink;
}
void OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::setUplink(const QString &uplink) {
    m_uplink = uplink;
    m_uplink_isSet = true;
}

bool OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::is_uplink_Set() const{
    return m_uplink_isSet;
}

bool OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::is_uplink_Valid() const{
    return m_uplink_isValid;
}

bool OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_inbound.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lan_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uplink_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkApplianceFirewallOneToOneNatRules_request_rules_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lan_ip_isValid && true;
}

} // namespace OpenAPI
