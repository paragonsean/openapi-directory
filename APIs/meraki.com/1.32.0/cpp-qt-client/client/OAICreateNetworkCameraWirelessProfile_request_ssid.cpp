/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNetworkCameraWirelessProfile_request_ssid.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNetworkCameraWirelessProfile_request_ssid::OAICreateNetworkCameraWirelessProfile_request_ssid(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNetworkCameraWirelessProfile_request_ssid::OAICreateNetworkCameraWirelessProfile_request_ssid() {
    this->initializeModel();
}

OAICreateNetworkCameraWirelessProfile_request_ssid::~OAICreateNetworkCameraWirelessProfile_request_ssid() {}

void OAICreateNetworkCameraWirelessProfile_request_ssid::initializeModel() {

    m_auth_mode_isSet = false;
    m_auth_mode_isValid = false;

    m_encryption_mode_isSet = false;
    m_encryption_mode_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_psk_isSet = false;
    m_psk_isValid = false;
}

void OAICreateNetworkCameraWirelessProfile_request_ssid::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNetworkCameraWirelessProfile_request_ssid::fromJsonObject(QJsonObject json) {

    m_auth_mode_isValid = ::OpenAPI::fromJsonValue(m_auth_mode, json[QString("authMode")]);
    m_auth_mode_isSet = !json[QString("authMode")].isNull() && m_auth_mode_isValid;

    m_encryption_mode_isValid = ::OpenAPI::fromJsonValue(m_encryption_mode, json[QString("encryptionMode")]);
    m_encryption_mode_isSet = !json[QString("encryptionMode")].isNull() && m_encryption_mode_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_psk_isValid = ::OpenAPI::fromJsonValue(m_psk, json[QString("psk")]);
    m_psk_isSet = !json[QString("psk")].isNull() && m_psk_isValid;
}

QString OAICreateNetworkCameraWirelessProfile_request_ssid::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNetworkCameraWirelessProfile_request_ssid::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_mode_isSet) {
        obj.insert(QString("authMode"), ::OpenAPI::toJsonValue(m_auth_mode));
    }
    if (m_encryption_mode_isSet) {
        obj.insert(QString("encryptionMode"), ::OpenAPI::toJsonValue(m_encryption_mode));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_psk_isSet) {
        obj.insert(QString("psk"), ::OpenAPI::toJsonValue(m_psk));
    }
    return obj;
}

QString OAICreateNetworkCameraWirelessProfile_request_ssid::getAuthMode() const {
    return m_auth_mode;
}
void OAICreateNetworkCameraWirelessProfile_request_ssid::setAuthMode(const QString &auth_mode) {
    m_auth_mode = auth_mode;
    m_auth_mode_isSet = true;
}

bool OAICreateNetworkCameraWirelessProfile_request_ssid::is_auth_mode_Set() const{
    return m_auth_mode_isSet;
}

bool OAICreateNetworkCameraWirelessProfile_request_ssid::is_auth_mode_Valid() const{
    return m_auth_mode_isValid;
}

QString OAICreateNetworkCameraWirelessProfile_request_ssid::getEncryptionMode() const {
    return m_encryption_mode;
}
void OAICreateNetworkCameraWirelessProfile_request_ssid::setEncryptionMode(const QString &encryption_mode) {
    m_encryption_mode = encryption_mode;
    m_encryption_mode_isSet = true;
}

bool OAICreateNetworkCameraWirelessProfile_request_ssid::is_encryption_mode_Set() const{
    return m_encryption_mode_isSet;
}

bool OAICreateNetworkCameraWirelessProfile_request_ssid::is_encryption_mode_Valid() const{
    return m_encryption_mode_isValid;
}

QString OAICreateNetworkCameraWirelessProfile_request_ssid::getName() const {
    return m_name;
}
void OAICreateNetworkCameraWirelessProfile_request_ssid::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateNetworkCameraWirelessProfile_request_ssid::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateNetworkCameraWirelessProfile_request_ssid::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateNetworkCameraWirelessProfile_request_ssid::getPsk() const {
    return m_psk;
}
void OAICreateNetworkCameraWirelessProfile_request_ssid::setPsk(const QString &psk) {
    m_psk = psk;
    m_psk_isSet = true;
}

bool OAICreateNetworkCameraWirelessProfile_request_ssid::is_psk_Set() const{
    return m_psk_isSet;
}

bool OAICreateNetworkCameraWirelessProfile_request_ssid::is_psk_Valid() const{
    return m_psk_isValid;
}

bool OAICreateNetworkCameraWirelessProfile_request_ssid::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psk_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNetworkCameraWirelessProfile_request_ssid::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
