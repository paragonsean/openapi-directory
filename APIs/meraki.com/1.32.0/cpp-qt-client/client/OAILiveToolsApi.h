/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILiveToolsApi_H
#define OAI_OAILiveToolsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBlinkDeviceLeds_request.h"
#include "OAICreateDeviceLiveToolsPingDevice_request.h"
#include "OAICreateDeviceLiveToolsPing_201_response.h"
#include "OAICreateDeviceLiveToolsPing_request.h"
#include "OAICycleDeviceSwitchPorts_request.h"
#include "OAIGetDeviceLiveToolsPing_200_response.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILiveToolsApi : public QObject {
    Q_OBJECT

public:
    OAILiveToolsApi(const int timeOut = 0);
    ~OAILiveToolsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_blink_device_leds_request OAIBlinkDeviceLeds_request [optional]
    */
    virtual void blinkDeviceLeds(const QString &serial, const ::OpenAPI::OptionalParam<OAIBlinkDeviceLeds_request> &oai_blink_device_leds_request = ::OpenAPI::OptionalParam<OAIBlinkDeviceLeds_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_create_device_live_tools_ping_device_request OAICreateDeviceLiveToolsPingDevice_request [optional]
    */
    virtual void createDeviceLiveToolsPingDevice(const QString &serial, const ::OpenAPI::OptionalParam<OAICreateDeviceLiveToolsPingDevice_request> &oai_create_device_live_tools_ping_device_request = ::OpenAPI::OptionalParam<OAICreateDeviceLiveToolsPingDevice_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_create_device_live_tools_ping_request OAICreateDeviceLiveToolsPing_request [required]
    */
    virtual void createDeviceLiveToolsPing(const QString &serial, const OAICreateDeviceLiveToolsPing_request &oai_create_device_live_tools_ping_request);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_cycle_device_switch_ports_request OAICycleDeviceSwitchPorts_request [required]
    */
    virtual void cycleDeviceSwitchPorts(const QString &serial, const OAICycleDeviceSwitchPorts_request &oai_cycle_device_switch_ports_request);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getDeviceLiveToolsPingDevice(const QString &serial, const QString &id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getDeviceLiveToolsPing(const QString &serial, const QString &id);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void rebootDevice(const QString &serial);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void blinkDeviceLedsCallback(OAIHttpRequestWorker *worker);
    void createDeviceLiveToolsPingDeviceCallback(OAIHttpRequestWorker *worker);
    void createDeviceLiveToolsPingCallback(OAIHttpRequestWorker *worker);
    void cycleDeviceSwitchPortsCallback(OAIHttpRequestWorker *worker);
    void getDeviceLiveToolsPingDeviceCallback(OAIHttpRequestWorker *worker);
    void getDeviceLiveToolsPingCallback(OAIHttpRequestWorker *worker);
    void rebootDeviceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void blinkDeviceLedsSignal(OAIObject summary);
    void createDeviceLiveToolsPingDeviceSignal(OAICreateDeviceLiveToolsPing_201_response summary);
    void createDeviceLiveToolsPingSignal(OAICreateDeviceLiveToolsPing_201_response summary);
    void cycleDeviceSwitchPortsSignal(OAIObject summary);
    void getDeviceLiveToolsPingDeviceSignal(OAIGetDeviceLiveToolsPing_200_response summary);
    void getDeviceLiveToolsPingSignal(OAIGetDeviceLiveToolsPing_200_response summary);
    void rebootDeviceSignal(OAIObject summary);


    void blinkDeviceLedsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createDeviceLiveToolsPingDeviceSignalFull(OAIHttpRequestWorker *worker, OAICreateDeviceLiveToolsPing_201_response summary);
    void createDeviceLiveToolsPingSignalFull(OAIHttpRequestWorker *worker, OAICreateDeviceLiveToolsPing_201_response summary);
    void cycleDeviceSwitchPortsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceLiveToolsPingDeviceSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceLiveToolsPing_200_response summary);
    void getDeviceLiveToolsPingSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceLiveToolsPing_200_response summary);
    void rebootDeviceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use blinkDeviceLedsSignalError() instead")
    void blinkDeviceLedsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blinkDeviceLedsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceLiveToolsPingDeviceSignalError() instead")
    void createDeviceLiveToolsPingDeviceSignalE(OAICreateDeviceLiveToolsPing_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceLiveToolsPingDeviceSignalError(OAICreateDeviceLiveToolsPing_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceLiveToolsPingSignalError() instead")
    void createDeviceLiveToolsPingSignalE(OAICreateDeviceLiveToolsPing_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceLiveToolsPingSignalError(OAICreateDeviceLiveToolsPing_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cycleDeviceSwitchPortsSignalError() instead")
    void cycleDeviceSwitchPortsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cycleDeviceSwitchPortsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceLiveToolsPingDeviceSignalError() instead")
    void getDeviceLiveToolsPingDeviceSignalE(OAIGetDeviceLiveToolsPing_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceLiveToolsPingDeviceSignalError(OAIGetDeviceLiveToolsPing_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceLiveToolsPingSignalError() instead")
    void getDeviceLiveToolsPingSignalE(OAIGetDeviceLiveToolsPing_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceLiveToolsPingSignalError(OAIGetDeviceLiveToolsPing_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rebootDeviceSignalError() instead")
    void rebootDeviceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rebootDeviceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use blinkDeviceLedsSignalErrorFull() instead")
    void blinkDeviceLedsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blinkDeviceLedsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceLiveToolsPingDeviceSignalErrorFull() instead")
    void createDeviceLiveToolsPingDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceLiveToolsPingDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceLiveToolsPingSignalErrorFull() instead")
    void createDeviceLiveToolsPingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceLiveToolsPingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cycleDeviceSwitchPortsSignalErrorFull() instead")
    void cycleDeviceSwitchPortsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cycleDeviceSwitchPortsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceLiveToolsPingDeviceSignalErrorFull() instead")
    void getDeviceLiveToolsPingDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceLiveToolsPingDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceLiveToolsPingSignalErrorFull() instead")
    void getDeviceLiveToolsPingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceLiveToolsPingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rebootDeviceSignalErrorFull() instead")
    void rebootDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rebootDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
