/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6() {
    this->initializeModel();
}

OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::~OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6() {}

void OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::initializeModel() {

    m_band_operation_mode_isSet = false;
    m_band_operation_mode_isValid = false;

    m_band_steering_enabled_isSet = false;
    m_band_steering_enabled_isValid = false;

    m_min_bitrate_isSet = false;
    m_min_bitrate_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::fromJsonObject(QJsonObject json) {

    m_band_operation_mode_isValid = ::OpenAPI::fromJsonValue(m_band_operation_mode, json[QString("bandOperationMode")]);
    m_band_operation_mode_isSet = !json[QString("bandOperationMode")].isNull() && m_band_operation_mode_isValid;

    m_band_steering_enabled_isValid = ::OpenAPI::fromJsonValue(m_band_steering_enabled, json[QString("bandSteeringEnabled")]);
    m_band_steering_enabled_isSet = !json[QString("bandSteeringEnabled")].isNull() && m_band_steering_enabled_isValid;

    m_min_bitrate_isValid = ::OpenAPI::fromJsonValue(m_min_bitrate, json[QString("minBitrate")]);
    m_min_bitrate_isSet = !json[QString("minBitrate")].isNull() && m_min_bitrate_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::asJsonObject() const {
    QJsonObject obj;
    if (m_band_operation_mode_isSet) {
        obj.insert(QString("bandOperationMode"), ::OpenAPI::toJsonValue(m_band_operation_mode));
    }
    if (m_band_steering_enabled_isSet) {
        obj.insert(QString("bandSteeringEnabled"), ::OpenAPI::toJsonValue(m_band_steering_enabled));
    }
    if (m_min_bitrate_isSet) {
        obj.insert(QString("minBitrate"), ::OpenAPI::toJsonValue(m_min_bitrate));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::getBandOperationMode() const {
    return m_band_operation_mode;
}
void OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::setBandOperationMode(const QString &band_operation_mode) {
    m_band_operation_mode = band_operation_mode;
    m_band_operation_mode_isSet = true;
}

bool OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::is_band_operation_mode_Set() const{
    return m_band_operation_mode_isSet;
}

bool OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::is_band_operation_mode_Valid() const{
    return m_band_operation_mode_isValid;
}

bool OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::isBandSteeringEnabled() const {
    return m_band_steering_enabled;
}
void OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::setBandSteeringEnabled(const bool &band_steering_enabled) {
    m_band_steering_enabled = band_steering_enabled;
    m_band_steering_enabled_isSet = true;
}

bool OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::is_band_steering_enabled_Set() const{
    return m_band_steering_enabled_isSet;
}

bool OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::is_band_steering_enabled_Valid() const{
    return m_band_steering_enabled_isValid;
}

qint32 OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::getMinBitrate() const {
    return m_min_bitrate;
}
void OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::setMinBitrate(const qint32 &min_bitrate) {
    m_min_bitrate = min_bitrate;
    m_min_bitrate_isSet = true;
}

bool OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::is_min_bitrate_Set() const{
    return m_min_bitrate_isSet;
}

bool OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::is_min_bitrate_Valid() const{
    return m_min_bitrate_isValid;
}

QString OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::getName() const {
    return m_name;
}
void OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_band_operation_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_band_steering_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNetworkWirelessRfProfile_201_response_perSsidSettings_6::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
