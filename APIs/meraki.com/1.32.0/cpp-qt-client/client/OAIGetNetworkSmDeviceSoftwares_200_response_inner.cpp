/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkSmDeviceSoftwares_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkSmDeviceSoftwares_200_response_inner::OAIGetNetworkSmDeviceSoftwares_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkSmDeviceSoftwares_200_response_inner::OAIGetNetworkSmDeviceSoftwares_200_response_inner() {
    this->initializeModel();
}

OAIGetNetworkSmDeviceSoftwares_200_response_inner::~OAIGetNetworkSmDeviceSoftwares_200_response_inner() {}

void OAIGetNetworkSmDeviceSoftwares_200_response_inner::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_bundle_size_isSet = false;
    m_bundle_size_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_dynamic_size_isSet = false;
    m_dynamic_size_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_installed_at_isSet = false;
    m_installed_at_isValid = false;

    m_ios_redemption_code_isSet = false;
    m_ios_redemption_code_isValid = false;

    m_is_managed_isSet = false;
    m_is_managed_isValid = false;

    m_itunes_id_isSet = false;
    m_itunes_id_isValid = false;

    m_license_key_isSet = false;
    m_license_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_redemption_code_isSet = false;
    m_redemption_code_isValid = false;

    m_short_version_isSet = false;
    m_short_version_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_to_install_isSet = false;
    m_to_install_isValid = false;

    m_to_uninstall_isSet = false;
    m_to_uninstall_isValid = false;

    m_uninstalled_at_isSet = false;
    m_uninstalled_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGetNetworkSmDeviceSoftwares_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkSmDeviceSoftwares_200_response_inner::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_bundle_size_isValid = ::OpenAPI::fromJsonValue(m_bundle_size, json[QString("bundleSize")]);
    m_bundle_size_isSet = !json[QString("bundleSize")].isNull() && m_bundle_size_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_dynamic_size_isValid = ::OpenAPI::fromJsonValue(m_dynamic_size, json[QString("dynamicSize")]);
    m_dynamic_size_isSet = !json[QString("dynamicSize")].isNull() && m_dynamic_size_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_installed_at_isValid = ::OpenAPI::fromJsonValue(m_installed_at, json[QString("installedAt")]);
    m_installed_at_isSet = !json[QString("installedAt")].isNull() && m_installed_at_isValid;

    m_ios_redemption_code_isValid = ::OpenAPI::fromJsonValue(m_ios_redemption_code, json[QString("iosRedemptionCode")]);
    m_ios_redemption_code_isSet = !json[QString("iosRedemptionCode")].isNull() && m_ios_redemption_code_isValid;

    m_is_managed_isValid = ::OpenAPI::fromJsonValue(m_is_managed, json[QString("isManaged")]);
    m_is_managed_isSet = !json[QString("isManaged")].isNull() && m_is_managed_isValid;

    m_itunes_id_isValid = ::OpenAPI::fromJsonValue(m_itunes_id, json[QString("itunesId")]);
    m_itunes_id_isSet = !json[QString("itunesId")].isNull() && m_itunes_id_isValid;

    m_license_key_isValid = ::OpenAPI::fromJsonValue(m_license_key, json[QString("licenseKey")]);
    m_license_key_isSet = !json[QString("licenseKey")].isNull() && m_license_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_redemption_code_isValid = ::OpenAPI::fromJsonValue(m_redemption_code, json[QString("redemptionCode")]);
    m_redemption_code_isSet = !json[QString("redemptionCode")].isNull() && m_redemption_code_isValid;

    m_short_version_isValid = ::OpenAPI::fromJsonValue(m_short_version, json[QString("shortVersion")]);
    m_short_version_isSet = !json[QString("shortVersion")].isNull() && m_short_version_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_to_install_isValid = ::OpenAPI::fromJsonValue(m_to_install, json[QString("toInstall")]);
    m_to_install_isSet = !json[QString("toInstall")].isNull() && m_to_install_isValid;

    m_to_uninstall_isValid = ::OpenAPI::fromJsonValue(m_to_uninstall, json[QString("toUninstall")]);
    m_to_uninstall_isSet = !json[QString("toUninstall")].isNull() && m_to_uninstall_isValid;

    m_uninstalled_at_isValid = ::OpenAPI::fromJsonValue(m_uninstalled_at, json[QString("uninstalledAt")]);
    m_uninstalled_at_isSet = !json[QString("uninstalledAt")].isNull() && m_uninstalled_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIGetNetworkSmDeviceSoftwares_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkSmDeviceSoftwares_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_bundle_size_isSet) {
        obj.insert(QString("bundleSize"), ::OpenAPI::toJsonValue(m_bundle_size));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_dynamic_size_isSet) {
        obj.insert(QString("dynamicSize"), ::OpenAPI::toJsonValue(m_dynamic_size));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_installed_at_isSet) {
        obj.insert(QString("installedAt"), ::OpenAPI::toJsonValue(m_installed_at));
    }
    if (m_ios_redemption_code_isSet) {
        obj.insert(QString("iosRedemptionCode"), ::OpenAPI::toJsonValue(m_ios_redemption_code));
    }
    if (m_is_managed_isSet) {
        obj.insert(QString("isManaged"), ::OpenAPI::toJsonValue(m_is_managed));
    }
    if (m_itunes_id_isSet) {
        obj.insert(QString("itunesId"), ::OpenAPI::toJsonValue(m_itunes_id));
    }
    if (m_license_key_isSet) {
        obj.insert(QString("licenseKey"), ::OpenAPI::toJsonValue(m_license_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_redemption_code_isSet) {
        obj.insert(QString("redemptionCode"), ::OpenAPI::toJsonValue(m_redemption_code));
    }
    if (m_short_version_isSet) {
        obj.insert(QString("shortVersion"), ::OpenAPI::toJsonValue(m_short_version));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_to_install_isSet) {
        obj.insert(QString("toInstall"), ::OpenAPI::toJsonValue(m_to_install));
    }
    if (m_to_uninstall_isSet) {
        obj.insert(QString("toUninstall"), ::OpenAPI::toJsonValue(m_to_uninstall));
    }
    if (m_uninstalled_at_isSet) {
        obj.insert(QString("uninstalledAt"), ::OpenAPI::toJsonValue(m_uninstalled_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_vendor_isSet) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIGetNetworkSmDeviceSoftwares_200_response_inner::getAppId() const {
    return m_app_id;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_app_id_Valid() const{
    return m_app_id_isValid;
}

qint32 OAIGetNetworkSmDeviceSoftwares_200_response_inner::getBundleSize() const {
    return m_bundle_size;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setBundleSize(const qint32 &bundle_size) {
    m_bundle_size = bundle_size;
    m_bundle_size_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_bundle_size_Set() const{
    return m_bundle_size_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_bundle_size_Valid() const{
    return m_bundle_size_isValid;
}

QString OAIGetNetworkSmDeviceSoftwares_200_response_inner::getCreatedAt() const {
    return m_created_at;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIGetNetworkSmDeviceSoftwares_200_response_inner::getDeviceId() const {
    return m_device_id;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_device_id_Valid() const{
    return m_device_id_isValid;
}

qint32 OAIGetNetworkSmDeviceSoftwares_200_response_inner::getDynamicSize() const {
    return m_dynamic_size;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setDynamicSize(const qint32 &dynamic_size) {
    m_dynamic_size = dynamic_size;
    m_dynamic_size_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_dynamic_size_Set() const{
    return m_dynamic_size_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_dynamic_size_Valid() const{
    return m_dynamic_size_isValid;
}

QString OAIGetNetworkSmDeviceSoftwares_200_response_inner::getId() const {
    return m_id;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetNetworkSmDeviceSoftwares_200_response_inner::getIdentifier() const {
    return m_identifier;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIGetNetworkSmDeviceSoftwares_200_response_inner::getInstalledAt() const {
    return m_installed_at;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setInstalledAt(const QString &installed_at) {
    m_installed_at = installed_at;
    m_installed_at_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_installed_at_Set() const{
    return m_installed_at_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_installed_at_Valid() const{
    return m_installed_at_isValid;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::isIosRedemptionCode() const {
    return m_ios_redemption_code;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setIosRedemptionCode(const bool &ios_redemption_code) {
    m_ios_redemption_code = ios_redemption_code;
    m_ios_redemption_code_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_ios_redemption_code_Set() const{
    return m_ios_redemption_code_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_ios_redemption_code_Valid() const{
    return m_ios_redemption_code_isValid;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::isIsManaged() const {
    return m_is_managed;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setIsManaged(const bool &is_managed) {
    m_is_managed = is_managed;
    m_is_managed_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_is_managed_Set() const{
    return m_is_managed_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_is_managed_Valid() const{
    return m_is_managed_isValid;
}

QString OAIGetNetworkSmDeviceSoftwares_200_response_inner::getItunesId() const {
    return m_itunes_id;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setItunesId(const QString &itunes_id) {
    m_itunes_id = itunes_id;
    m_itunes_id_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_itunes_id_Set() const{
    return m_itunes_id_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_itunes_id_Valid() const{
    return m_itunes_id_isValid;
}

QString OAIGetNetworkSmDeviceSoftwares_200_response_inner::getLicenseKey() const {
    return m_license_key;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setLicenseKey(const QString &license_key) {
    m_license_key = license_key;
    m_license_key_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_license_key_Set() const{
    return m_license_key_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_license_key_Valid() const{
    return m_license_key_isValid;
}

QString OAIGetNetworkSmDeviceSoftwares_200_response_inner::getName() const {
    return m_name;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetNetworkSmDeviceSoftwares_200_response_inner::getPath() const {
    return m_path;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_path_Set() const{
    return m_path_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIGetNetworkSmDeviceSoftwares_200_response_inner::getRedemptionCode() const {
    return m_redemption_code;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setRedemptionCode(const qint32 &redemption_code) {
    m_redemption_code = redemption_code;
    m_redemption_code_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_redemption_code_Set() const{
    return m_redemption_code_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_redemption_code_Valid() const{
    return m_redemption_code_isValid;
}

QString OAIGetNetworkSmDeviceSoftwares_200_response_inner::getShortVersion() const {
    return m_short_version;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setShortVersion(const QString &short_version) {
    m_short_version = short_version;
    m_short_version_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_short_version_Set() const{
    return m_short_version_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_short_version_Valid() const{
    return m_short_version_isValid;
}

QString OAIGetNetworkSmDeviceSoftwares_200_response_inner::getStatus() const {
    return m_status;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::isToInstall() const {
    return m_to_install;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setToInstall(const bool &to_install) {
    m_to_install = to_install;
    m_to_install_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_to_install_Set() const{
    return m_to_install_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_to_install_Valid() const{
    return m_to_install_isValid;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::isToUninstall() const {
    return m_to_uninstall;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setToUninstall(const bool &to_uninstall) {
    m_to_uninstall = to_uninstall;
    m_to_uninstall_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_to_uninstall_Set() const{
    return m_to_uninstall_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_to_uninstall_Valid() const{
    return m_to_uninstall_isValid;
}

QString OAIGetNetworkSmDeviceSoftwares_200_response_inner::getUninstalledAt() const {
    return m_uninstalled_at;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setUninstalledAt(const QString &uninstalled_at) {
    m_uninstalled_at = uninstalled_at;
    m_uninstalled_at_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_uninstalled_at_Set() const{
    return m_uninstalled_at_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_uninstalled_at_Valid() const{
    return m_uninstalled_at_isValid;
}

QString OAIGetNetworkSmDeviceSoftwares_200_response_inner::getUpdatedAt() const {
    return m_updated_at;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIGetNetworkSmDeviceSoftwares_200_response_inner::getVendor() const {
    return m_vendor;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setVendor(const QString &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_vendor_Valid() const{
    return m_vendor_isValid;
}

QString OAIGetNetworkSmDeviceSoftwares_200_response_inner::getVersion() const {
    return m_version;
}
void OAIGetNetworkSmDeviceSoftwares_200_response_inner::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ios_redemption_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_managed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_itunes_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_install_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_uninstall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uninstalled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkSmDeviceSoftwares_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
