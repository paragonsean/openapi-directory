/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVpnApi_H
#define OAI_OAIVpnApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response.h"
#include "OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response.h"
#include "OAIObject.h"
#include "OAIUpdateNetworkApplianceVpnBgp_request.h"
#include "OAIUpdateNetworkApplianceVpnSiteToSiteVpn_request.h"
#include "OAIUpdateNetworkWirelessSsidVpn_request.h"
#include "OAIUpdateOrganizationApplianceVpnThirdPartyVPNPeers_request.h"
#include "OAIUpdateOrganizationApplianceVpnVpnFirewallRules_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVpnApi : public QObject {
    Q_OBJECT

public:
    OAIVpnApi(const int timeOut = 0);
    ~OAIVpnApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceVpnBgp(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkApplianceVpnSiteToSiteVpn(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    */
    virtual void getNetworkWirelessSsidVpn(const QString &network_id, const QString &number);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getOrganizationApplianceVpnStats(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    */
    virtual void getOrganizationApplianceVpnStatuses(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationApplianceVpnThirdPartyVPNPeers(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationApplianceVpnVpnFirewallRules(const QString &organization_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_vpn_bgp_request OAIUpdateNetworkApplianceVpnBgp_request [required]
    */
    virtual void updateNetworkApplianceVpnBgp(const QString &network_id, const OAIUpdateNetworkApplianceVpnBgp_request &oai_update_network_appliance_vpn_bgp_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_appliance_vpn_site_to_site_vpn_request OAIUpdateNetworkApplianceVpnSiteToSiteVpn_request [required]
    */
    virtual void updateNetworkApplianceVpnSiteToSiteVpn(const QString &network_id, const OAIUpdateNetworkApplianceVpnSiteToSiteVpn_request &oai_update_network_appliance_vpn_site_to_site_vpn_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  number QString [required]
    * @param[in]  oai_update_network_wireless_ssid_vpn_request OAIUpdateNetworkWirelessSsidVpn_request [optional]
    */
    virtual void updateNetworkWirelessSsidVpn(const QString &network_id, const QString &number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidVpn_request> &oai_update_network_wireless_ssid_vpn_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkWirelessSsidVpn_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_appliance_vpn_third_party_vpn_peers_request OAIUpdateOrganizationApplianceVpnThirdPartyVPNPeers_request [required]
    */
    virtual void updateOrganizationApplianceVpnThirdPartyVPNPeers(const QString &organization_id, const OAIUpdateOrganizationApplianceVpnThirdPartyVPNPeers_request &oai_update_organization_appliance_vpn_third_party_vpn_peers_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_appliance_vpn_vpn_firewall_rules_request OAIUpdateOrganizationApplianceVpnVpnFirewallRules_request [optional]
    */
    virtual void updateOrganizationApplianceVpnVpnFirewallRules(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationApplianceVpnVpnFirewallRules_request> &oai_update_organization_appliance_vpn_vpn_firewall_rules_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationApplianceVpnVpnFirewallRules_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getNetworkApplianceVpnBgpCallback(OAIHttpRequestWorker *worker);
    void getNetworkApplianceVpnSiteToSiteVpnCallback(OAIHttpRequestWorker *worker);
    void getNetworkWirelessSsidVpnCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceVpnStatsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceVpnStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceVpnThirdPartyVPNPeersCallback(OAIHttpRequestWorker *worker);
    void getOrganizationApplianceVpnVpnFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceVpnBgpCallback(OAIHttpRequestWorker *worker);
    void updateNetworkApplianceVpnSiteToSiteVpnCallback(OAIHttpRequestWorker *worker);
    void updateNetworkWirelessSsidVpnCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationApplianceVpnThirdPartyVPNPeersCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationApplianceVpnVpnFirewallRulesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getNetworkApplianceVpnBgpSignal(OAIObject summary);
    void getNetworkApplianceVpnSiteToSiteVpnSignal(OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary);
    void getNetworkWirelessSsidVpnSignal(OAIObject summary);
    void getOrganizationApplianceVpnStatsSignal(QList<OAIObject> summary);
    void getOrganizationApplianceVpnStatusesSignal(QList<OAIObject> summary);
    void getOrganizationApplianceVpnThirdPartyVPNPeersSignal(OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary);
    void getOrganizationApplianceVpnVpnFirewallRulesSignal(OAIObject summary);
    void updateNetworkApplianceVpnBgpSignal(OAIObject summary);
    void updateNetworkApplianceVpnSiteToSiteVpnSignal(OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary);
    void updateNetworkWirelessSsidVpnSignal(OAIObject summary);
    void updateOrganizationApplianceVpnThirdPartyVPNPeersSignal(OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary);
    void updateOrganizationApplianceVpnVpnFirewallRulesSignal(OAIObject summary);


    void getNetworkApplianceVpnBgpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkApplianceVpnSiteToSiteVpnSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary);
    void getNetworkWirelessSsidVpnSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationApplianceVpnStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationApplianceVpnStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationApplianceVpnThirdPartyVPNPeersSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary);
    void getOrganizationApplianceVpnVpnFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceVpnBgpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkApplianceVpnSiteToSiteVpnSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary);
    void updateNetworkWirelessSsidVpnSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationApplianceVpnThirdPartyVPNPeersSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary);
    void updateOrganizationApplianceVpnVpnFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVpnBgpSignalError() instead")
    void getNetworkApplianceVpnBgpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVpnBgpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVpnSiteToSiteVpnSignalError() instead")
    void getNetworkApplianceVpnSiteToSiteVpnSignalE(OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVpnSiteToSiteVpnSignalError(OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidVpnSignalError() instead")
    void getNetworkWirelessSsidVpnSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidVpnSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnStatsSignalError() instead")
    void getOrganizationApplianceVpnStatsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnStatsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnStatusesSignalError() instead")
    void getOrganizationApplianceVpnStatusesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnStatusesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnThirdPartyVPNPeersSignalError() instead")
    void getOrganizationApplianceVpnThirdPartyVPNPeersSignalE(OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnThirdPartyVPNPeersSignalError(OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnVpnFirewallRulesSignalError() instead")
    void getOrganizationApplianceVpnVpnFirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnVpnFirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVpnBgpSignalError() instead")
    void updateNetworkApplianceVpnBgpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVpnBgpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVpnSiteToSiteVpnSignalError() instead")
    void updateNetworkApplianceVpnSiteToSiteVpnSignalE(OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVpnSiteToSiteVpnSignalError(OAIGetNetworkApplianceVpnSiteToSiteVpn_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidVpnSignalError() instead")
    void updateNetworkWirelessSsidVpnSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidVpnSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationApplianceVpnThirdPartyVPNPeersSignalError() instead")
    void updateOrganizationApplianceVpnThirdPartyVPNPeersSignalE(OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationApplianceVpnThirdPartyVPNPeersSignalError(OAIGetOrganizationApplianceVpnThirdPartyVPNPeers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationApplianceVpnVpnFirewallRulesSignalError() instead")
    void updateOrganizationApplianceVpnVpnFirewallRulesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationApplianceVpnVpnFirewallRulesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVpnBgpSignalErrorFull() instead")
    void getNetworkApplianceVpnBgpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVpnBgpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkApplianceVpnSiteToSiteVpnSignalErrorFull() instead")
    void getNetworkApplianceVpnSiteToSiteVpnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkApplianceVpnSiteToSiteVpnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkWirelessSsidVpnSignalErrorFull() instead")
    void getNetworkWirelessSsidVpnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkWirelessSsidVpnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnStatsSignalErrorFull() instead")
    void getOrganizationApplianceVpnStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnStatusesSignalErrorFull() instead")
    void getOrganizationApplianceVpnStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnThirdPartyVPNPeersSignalErrorFull() instead")
    void getOrganizationApplianceVpnThirdPartyVPNPeersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnThirdPartyVPNPeersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationApplianceVpnVpnFirewallRulesSignalErrorFull() instead")
    void getOrganizationApplianceVpnVpnFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationApplianceVpnVpnFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVpnBgpSignalErrorFull() instead")
    void updateNetworkApplianceVpnBgpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVpnBgpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkApplianceVpnSiteToSiteVpnSignalErrorFull() instead")
    void updateNetworkApplianceVpnSiteToSiteVpnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkApplianceVpnSiteToSiteVpnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkWirelessSsidVpnSignalErrorFull() instead")
    void updateNetworkWirelessSsidVpnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkWirelessSsidVpnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationApplianceVpnThirdPartyVPNPeersSignalErrorFull() instead")
    void updateOrganizationApplianceVpnThirdPartyVPNPeersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationApplianceVpnThirdPartyVPNPeersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationApplianceVpnVpnFirewallRulesSignalErrorFull() instead")
    void updateOrganizationApplianceVpnVpnFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationApplianceVpnVpnFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
