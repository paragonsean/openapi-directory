/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDeviceManagementInterface_request_wan1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDeviceManagementInterface_request_wan1::OAIUpdateDeviceManagementInterface_request_wan1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDeviceManagementInterface_request_wan1::OAIUpdateDeviceManagementInterface_request_wan1() {
    this->initializeModel();
}

OAIUpdateDeviceManagementInterface_request_wan1::~OAIUpdateDeviceManagementInterface_request_wan1() {}

void OAIUpdateDeviceManagementInterface_request_wan1::initializeModel() {

    m_static_dns_isSet = false;
    m_static_dns_isValid = false;

    m_static_gateway_ip_isSet = false;
    m_static_gateway_ip_isValid = false;

    m_static_ip_isSet = false;
    m_static_ip_isValid = false;

    m_static_subnet_mask_isSet = false;
    m_static_subnet_mask_isValid = false;

    m_using_static_ip_isSet = false;
    m_using_static_ip_isValid = false;

    m_vlan_isSet = false;
    m_vlan_isValid = false;

    m_wan_enabled_isSet = false;
    m_wan_enabled_isValid = false;
}

void OAIUpdateDeviceManagementInterface_request_wan1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDeviceManagementInterface_request_wan1::fromJsonObject(QJsonObject json) {

    m_static_dns_isValid = ::OpenAPI::fromJsonValue(m_static_dns, json[QString("staticDns")]);
    m_static_dns_isSet = !json[QString("staticDns")].isNull() && m_static_dns_isValid;

    m_static_gateway_ip_isValid = ::OpenAPI::fromJsonValue(m_static_gateway_ip, json[QString("staticGatewayIp")]);
    m_static_gateway_ip_isSet = !json[QString("staticGatewayIp")].isNull() && m_static_gateway_ip_isValid;

    m_static_ip_isValid = ::OpenAPI::fromJsonValue(m_static_ip, json[QString("staticIp")]);
    m_static_ip_isSet = !json[QString("staticIp")].isNull() && m_static_ip_isValid;

    m_static_subnet_mask_isValid = ::OpenAPI::fromJsonValue(m_static_subnet_mask, json[QString("staticSubnetMask")]);
    m_static_subnet_mask_isSet = !json[QString("staticSubnetMask")].isNull() && m_static_subnet_mask_isValid;

    m_using_static_ip_isValid = ::OpenAPI::fromJsonValue(m_using_static_ip, json[QString("usingStaticIp")]);
    m_using_static_ip_isSet = !json[QString("usingStaticIp")].isNull() && m_using_static_ip_isValid;

    m_vlan_isValid = ::OpenAPI::fromJsonValue(m_vlan, json[QString("vlan")]);
    m_vlan_isSet = !json[QString("vlan")].isNull() && m_vlan_isValid;

    m_wan_enabled_isValid = ::OpenAPI::fromJsonValue(m_wan_enabled, json[QString("wanEnabled")]);
    m_wan_enabled_isSet = !json[QString("wanEnabled")].isNull() && m_wan_enabled_isValid;
}

QString OAIUpdateDeviceManagementInterface_request_wan1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDeviceManagementInterface_request_wan1::asJsonObject() const {
    QJsonObject obj;
    if (m_static_dns.size() > 0) {
        obj.insert(QString("staticDns"), ::OpenAPI::toJsonValue(m_static_dns));
    }
    if (m_static_gateway_ip_isSet) {
        obj.insert(QString("staticGatewayIp"), ::OpenAPI::toJsonValue(m_static_gateway_ip));
    }
    if (m_static_ip_isSet) {
        obj.insert(QString("staticIp"), ::OpenAPI::toJsonValue(m_static_ip));
    }
    if (m_static_subnet_mask_isSet) {
        obj.insert(QString("staticSubnetMask"), ::OpenAPI::toJsonValue(m_static_subnet_mask));
    }
    if (m_using_static_ip_isSet) {
        obj.insert(QString("usingStaticIp"), ::OpenAPI::toJsonValue(m_using_static_ip));
    }
    if (m_vlan_isSet) {
        obj.insert(QString("vlan"), ::OpenAPI::toJsonValue(m_vlan));
    }
    if (m_wan_enabled_isSet) {
        obj.insert(QString("wanEnabled"), ::OpenAPI::toJsonValue(m_wan_enabled));
    }
    return obj;
}

QList<QString> OAIUpdateDeviceManagementInterface_request_wan1::getStaticDns() const {
    return m_static_dns;
}
void OAIUpdateDeviceManagementInterface_request_wan1::setStaticDns(const QList<QString> &static_dns) {
    m_static_dns = static_dns;
    m_static_dns_isSet = true;
}

bool OAIUpdateDeviceManagementInterface_request_wan1::is_static_dns_Set() const{
    return m_static_dns_isSet;
}

bool OAIUpdateDeviceManagementInterface_request_wan1::is_static_dns_Valid() const{
    return m_static_dns_isValid;
}

QString OAIUpdateDeviceManagementInterface_request_wan1::getStaticGatewayIp() const {
    return m_static_gateway_ip;
}
void OAIUpdateDeviceManagementInterface_request_wan1::setStaticGatewayIp(const QString &static_gateway_ip) {
    m_static_gateway_ip = static_gateway_ip;
    m_static_gateway_ip_isSet = true;
}

bool OAIUpdateDeviceManagementInterface_request_wan1::is_static_gateway_ip_Set() const{
    return m_static_gateway_ip_isSet;
}

bool OAIUpdateDeviceManagementInterface_request_wan1::is_static_gateway_ip_Valid() const{
    return m_static_gateway_ip_isValid;
}

QString OAIUpdateDeviceManagementInterface_request_wan1::getStaticIp() const {
    return m_static_ip;
}
void OAIUpdateDeviceManagementInterface_request_wan1::setStaticIp(const QString &static_ip) {
    m_static_ip = static_ip;
    m_static_ip_isSet = true;
}

bool OAIUpdateDeviceManagementInterface_request_wan1::is_static_ip_Set() const{
    return m_static_ip_isSet;
}

bool OAIUpdateDeviceManagementInterface_request_wan1::is_static_ip_Valid() const{
    return m_static_ip_isValid;
}

QString OAIUpdateDeviceManagementInterface_request_wan1::getStaticSubnetMask() const {
    return m_static_subnet_mask;
}
void OAIUpdateDeviceManagementInterface_request_wan1::setStaticSubnetMask(const QString &static_subnet_mask) {
    m_static_subnet_mask = static_subnet_mask;
    m_static_subnet_mask_isSet = true;
}

bool OAIUpdateDeviceManagementInterface_request_wan1::is_static_subnet_mask_Set() const{
    return m_static_subnet_mask_isSet;
}

bool OAIUpdateDeviceManagementInterface_request_wan1::is_static_subnet_mask_Valid() const{
    return m_static_subnet_mask_isValid;
}

bool OAIUpdateDeviceManagementInterface_request_wan1::isUsingStaticIp() const {
    return m_using_static_ip;
}
void OAIUpdateDeviceManagementInterface_request_wan1::setUsingStaticIp(const bool &using_static_ip) {
    m_using_static_ip = using_static_ip;
    m_using_static_ip_isSet = true;
}

bool OAIUpdateDeviceManagementInterface_request_wan1::is_using_static_ip_Set() const{
    return m_using_static_ip_isSet;
}

bool OAIUpdateDeviceManagementInterface_request_wan1::is_using_static_ip_Valid() const{
    return m_using_static_ip_isValid;
}

qint32 OAIUpdateDeviceManagementInterface_request_wan1::getVlan() const {
    return m_vlan;
}
void OAIUpdateDeviceManagementInterface_request_wan1::setVlan(const qint32 &vlan) {
    m_vlan = vlan;
    m_vlan_isSet = true;
}

bool OAIUpdateDeviceManagementInterface_request_wan1::is_vlan_Set() const{
    return m_vlan_isSet;
}

bool OAIUpdateDeviceManagementInterface_request_wan1::is_vlan_Valid() const{
    return m_vlan_isValid;
}

QString OAIUpdateDeviceManagementInterface_request_wan1::getWanEnabled() const {
    return m_wan_enabled;
}
void OAIUpdateDeviceManagementInterface_request_wan1::setWanEnabled(const QString &wan_enabled) {
    m_wan_enabled = wan_enabled;
    m_wan_enabled_isSet = true;
}

bool OAIUpdateDeviceManagementInterface_request_wan1::is_wan_enabled_Set() const{
    return m_wan_enabled_isSet;
}

bool OAIUpdateDeviceManagementInterface_request_wan1::is_wan_enabled_Valid() const{
    return m_wan_enabled_isValid;
}

bool OAIUpdateDeviceManagementInterface_request_wan1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_static_dns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_gateway_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_subnet_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_using_static_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wan_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDeviceManagementInterface_request_wan1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
