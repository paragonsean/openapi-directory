/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner.h
 *
 * 
 */

#ifndef OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner_H
#define OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner : public OAIObject {
public:
    OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner();
    OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner(QString json);
    ~OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccessPolicyType() const;
    void setAccessPolicyType(const QString &access_policy_type);
    bool is_access_policy_type_Set() const;
    bool is_access_policy_type_Valid() const;

    QString getAllowedVlans() const;
    void setAllowedVlans(const QString &allowed_vlans);
    bool is_allowed_vlans_Set() const;
    bool is_allowed_vlans_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QString getLinkNegotiation() const;
    void setLinkNegotiation(const QString &link_negotiation);
    bool is_link_negotiation_Set() const;
    bool is_link_negotiation_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isPoeEnabled() const;
    void setPoeEnabled(const bool &poe_enabled);
    bool is_poe_enabled_Set() const;
    bool is_poe_enabled_Valid() const;

    QString getPortId() const;
    void setPortId(const QString &port_id);
    bool is_port_id_Set() const;
    bool is_port_id_Valid() const;

    bool isRstpEnabled() const;
    void setRstpEnabled(const bool &rstp_enabled);
    bool is_rstp_enabled_Set() const;
    bool is_rstp_enabled_Valid() const;

    QList<QString> getStickyMacAllowList() const;
    void setStickyMacAllowList(const QList<QString> &sticky_mac_allow_list);
    bool is_sticky_mac_allow_list_Set() const;
    bool is_sticky_mac_allow_list_Valid() const;

    qint32 getStickyMacAllowListLimit() const;
    void setStickyMacAllowListLimit(const qint32 &sticky_mac_allow_list_limit);
    bool is_sticky_mac_allow_list_limit_Set() const;
    bool is_sticky_mac_allow_list_limit_Valid() const;

    QString getStpGuard() const;
    void setStpGuard(const QString &stp_guard);
    bool is_stp_guard_Set() const;
    bool is_stp_guard_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    qint32 getVlan() const;
    void setVlan(const qint32 &vlan);
    bool is_vlan_Set() const;
    bool is_vlan_Valid() const;

    qint32 getVoiceVlan() const;
    void setVoiceVlan(const qint32 &voice_vlan);
    bool is_voice_vlan_Set() const;
    bool is_voice_vlan_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_access_policy_type;
    bool m_access_policy_type_isSet;
    bool m_access_policy_type_isValid;

    QString m_allowed_vlans;
    bool m_allowed_vlans_isSet;
    bool m_allowed_vlans_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QString m_link_negotiation;
    bool m_link_negotiation_isSet;
    bool m_link_negotiation_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_poe_enabled;
    bool m_poe_enabled_isSet;
    bool m_poe_enabled_isValid;

    QString m_port_id;
    bool m_port_id_isSet;
    bool m_port_id_isValid;

    bool m_rstp_enabled;
    bool m_rstp_enabled_isSet;
    bool m_rstp_enabled_isValid;

    QList<QString> m_sticky_mac_allow_list;
    bool m_sticky_mac_allow_list_isSet;
    bool m_sticky_mac_allow_list_isValid;

    qint32 m_sticky_mac_allow_list_limit;
    bool m_sticky_mac_allow_list_limit_isSet;
    bool m_sticky_mac_allow_list_limit_isValid;

    QString m_stp_guard;
    bool m_stp_guard_isSet;
    bool m_stp_guard_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    qint32 m_vlan;
    bool m_vlan_isSet;
    bool m_vlan_isValid;

    qint32 m_voice_vlan;
    bool m_voice_vlan_isSet;
    bool m_voice_vlan_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner)

#endif // OAIGetOrganizationSwitchPortsBySwitch_200_response_inner_ports_inner_H
