/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInsightApi_H
#define OAI_OAIInsightApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateOrganizationInsightMonitoredMediaServer_request.h"
#include "OAIGetNetworkInsightApplicationHealthByTime_200_response_inner.h"
#include "OAIGetOrganizationInsightApplications_200_response_inner.h"
#include "OAIGetOrganizationInsightMonitoredMediaServers_200_response_inner.h"
#include "OAIObject.h"
#include "OAIUpdateOrganizationInsightMonitoredMediaServer_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInsightApi : public QObject {
    Q_OBJECT

public:
    OAIInsightApi(const int timeOut = 0);
    ~OAIInsightApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_insight_monitored_media_server_request OAICreateOrganizationInsightMonitoredMediaServer_request [required]
    */
    virtual void createOrganizationInsightMonitoredMediaServer(const QString &organization_id, const OAICreateOrganizationInsightMonitoredMediaServer_request &oai_create_organization_insight_monitored_media_server_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  monitored_media_server_id QString [required]
    */
    virtual void deleteOrganizationInsightMonitoredMediaServer(const QString &organization_id, const QString &monitored_media_server_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    */
    virtual void getNetworkInsightApplicationHealthByTime(const QString &network_id, const QString &application_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationInsightApplications(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  monitored_media_server_id QString [required]
    */
    virtual void getOrganizationInsightMonitoredMediaServer(const QString &organization_id, const QString &monitored_media_server_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationInsightMonitoredMediaServers(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  monitored_media_server_id QString [required]
    * @param[in]  oai_update_organization_insight_monitored_media_server_request OAIUpdateOrganizationInsightMonitoredMediaServer_request [optional]
    */
    virtual void updateOrganizationInsightMonitoredMediaServer(const QString &organization_id, const QString &monitored_media_server_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationInsightMonitoredMediaServer_request> &oai_update_organization_insight_monitored_media_server_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationInsightMonitoredMediaServer_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createOrganizationInsightMonitoredMediaServerCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationInsightMonitoredMediaServerCallback(OAIHttpRequestWorker *worker);
    void getNetworkInsightApplicationHealthByTimeCallback(OAIHttpRequestWorker *worker);
    void getOrganizationInsightApplicationsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationInsightMonitoredMediaServerCallback(OAIHttpRequestWorker *worker);
    void getOrganizationInsightMonitoredMediaServersCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationInsightMonitoredMediaServerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createOrganizationInsightMonitoredMediaServerSignal(OAIObject summary);
    void deleteOrganizationInsightMonitoredMediaServerSignal();
    void getNetworkInsightApplicationHealthByTimeSignal(QList<OAIGetNetworkInsightApplicationHealthByTime_200_response_inner> summary);
    void getOrganizationInsightApplicationsSignal(QList<OAIGetOrganizationInsightApplications_200_response_inner> summary);
    void getOrganizationInsightMonitoredMediaServerSignal(OAIObject summary);
    void getOrganizationInsightMonitoredMediaServersSignal(QList<OAIGetOrganizationInsightMonitoredMediaServers_200_response_inner> summary);
    void updateOrganizationInsightMonitoredMediaServerSignal(OAIObject summary);


    void createOrganizationInsightMonitoredMediaServerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteOrganizationInsightMonitoredMediaServerSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkInsightApplicationHealthByTimeSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkInsightApplicationHealthByTime_200_response_inner> summary);
    void getOrganizationInsightApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationInsightApplications_200_response_inner> summary);
    void getOrganizationInsightMonitoredMediaServerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationInsightMonitoredMediaServersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationInsightMonitoredMediaServers_200_response_inner> summary);
    void updateOrganizationInsightMonitoredMediaServerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createOrganizationInsightMonitoredMediaServerSignalError() instead")
    void createOrganizationInsightMonitoredMediaServerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationInsightMonitoredMediaServerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationInsightMonitoredMediaServerSignalError() instead")
    void deleteOrganizationInsightMonitoredMediaServerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationInsightMonitoredMediaServerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkInsightApplicationHealthByTimeSignalError() instead")
    void getNetworkInsightApplicationHealthByTimeSignalE(QList<OAIGetNetworkInsightApplicationHealthByTime_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkInsightApplicationHealthByTimeSignalError(QList<OAIGetNetworkInsightApplicationHealthByTime_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInsightApplicationsSignalError() instead")
    void getOrganizationInsightApplicationsSignalE(QList<OAIGetOrganizationInsightApplications_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInsightApplicationsSignalError(QList<OAIGetOrganizationInsightApplications_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInsightMonitoredMediaServerSignalError() instead")
    void getOrganizationInsightMonitoredMediaServerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInsightMonitoredMediaServerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInsightMonitoredMediaServersSignalError() instead")
    void getOrganizationInsightMonitoredMediaServersSignalE(QList<OAIGetOrganizationInsightMonitoredMediaServers_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInsightMonitoredMediaServersSignalError(QList<OAIGetOrganizationInsightMonitoredMediaServers_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationInsightMonitoredMediaServerSignalError() instead")
    void updateOrganizationInsightMonitoredMediaServerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationInsightMonitoredMediaServerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createOrganizationInsightMonitoredMediaServerSignalErrorFull() instead")
    void createOrganizationInsightMonitoredMediaServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationInsightMonitoredMediaServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationInsightMonitoredMediaServerSignalErrorFull() instead")
    void deleteOrganizationInsightMonitoredMediaServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationInsightMonitoredMediaServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkInsightApplicationHealthByTimeSignalErrorFull() instead")
    void getNetworkInsightApplicationHealthByTimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkInsightApplicationHealthByTimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInsightApplicationsSignalErrorFull() instead")
    void getOrganizationInsightApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInsightApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInsightMonitoredMediaServerSignalErrorFull() instead")
    void getOrganizationInsightMonitoredMediaServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInsightMonitoredMediaServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInsightMonitoredMediaServersSignalErrorFull() instead")
    void getOrganizationInsightMonitoredMediaServersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInsightMonitoredMediaServersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationInsightMonitoredMediaServerSignalErrorFull() instead")
    void updateOrganizationInsightMonitoredMediaServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationInsightMonitoredMediaServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
