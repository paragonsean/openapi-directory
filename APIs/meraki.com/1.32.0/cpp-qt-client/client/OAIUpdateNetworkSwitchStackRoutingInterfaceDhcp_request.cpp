/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request() {
    this->initializeModel();
}

OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::~OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request() {}

void OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::initializeModel() {

    m_boot_file_name_isSet = false;
    m_boot_file_name_isValid = false;

    m_boot_next_server_isSet = false;
    m_boot_next_server_isValid = false;

    m_boot_options_enabled_isSet = false;
    m_boot_options_enabled_isValid = false;

    m_dhcp_lease_time_isSet = false;
    m_dhcp_lease_time_isValid = false;

    m_dhcp_mode_isSet = false;
    m_dhcp_mode_isValid = false;

    m_dhcp_options_isSet = false;
    m_dhcp_options_isValid = false;

    m_dhcp_relay_server_ips_isSet = false;
    m_dhcp_relay_server_ips_isValid = false;

    m_dns_custom_nameservers_isSet = false;
    m_dns_custom_nameservers_isValid = false;

    m_dns_nameservers_option_isSet = false;
    m_dns_nameservers_option_isValid = false;

    m_fixed_ip_assignments_isSet = false;
    m_fixed_ip_assignments_isValid = false;

    m_reserved_ip_ranges_isSet = false;
    m_reserved_ip_ranges_isValid = false;
}

void OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::fromJsonObject(QJsonObject json) {

    m_boot_file_name_isValid = ::OpenAPI::fromJsonValue(m_boot_file_name, json[QString("bootFileName")]);
    m_boot_file_name_isSet = !json[QString("bootFileName")].isNull() && m_boot_file_name_isValid;

    m_boot_next_server_isValid = ::OpenAPI::fromJsonValue(m_boot_next_server, json[QString("bootNextServer")]);
    m_boot_next_server_isSet = !json[QString("bootNextServer")].isNull() && m_boot_next_server_isValid;

    m_boot_options_enabled_isValid = ::OpenAPI::fromJsonValue(m_boot_options_enabled, json[QString("bootOptionsEnabled")]);
    m_boot_options_enabled_isSet = !json[QString("bootOptionsEnabled")].isNull() && m_boot_options_enabled_isValid;

    m_dhcp_lease_time_isValid = ::OpenAPI::fromJsonValue(m_dhcp_lease_time, json[QString("dhcpLeaseTime")]);
    m_dhcp_lease_time_isSet = !json[QString("dhcpLeaseTime")].isNull() && m_dhcp_lease_time_isValid;

    m_dhcp_mode_isValid = ::OpenAPI::fromJsonValue(m_dhcp_mode, json[QString("dhcpMode")]);
    m_dhcp_mode_isSet = !json[QString("dhcpMode")].isNull() && m_dhcp_mode_isValid;

    m_dhcp_options_isValid = ::OpenAPI::fromJsonValue(m_dhcp_options, json[QString("dhcpOptions")]);
    m_dhcp_options_isSet = !json[QString("dhcpOptions")].isNull() && m_dhcp_options_isValid;

    m_dhcp_relay_server_ips_isValid = ::OpenAPI::fromJsonValue(m_dhcp_relay_server_ips, json[QString("dhcpRelayServerIps")]);
    m_dhcp_relay_server_ips_isSet = !json[QString("dhcpRelayServerIps")].isNull() && m_dhcp_relay_server_ips_isValid;

    m_dns_custom_nameservers_isValid = ::OpenAPI::fromJsonValue(m_dns_custom_nameservers, json[QString("dnsCustomNameservers")]);
    m_dns_custom_nameservers_isSet = !json[QString("dnsCustomNameservers")].isNull() && m_dns_custom_nameservers_isValid;

    m_dns_nameservers_option_isValid = ::OpenAPI::fromJsonValue(m_dns_nameservers_option, json[QString("dnsNameserversOption")]);
    m_dns_nameservers_option_isSet = !json[QString("dnsNameserversOption")].isNull() && m_dns_nameservers_option_isValid;

    m_fixed_ip_assignments_isValid = ::OpenAPI::fromJsonValue(m_fixed_ip_assignments, json[QString("fixedIpAssignments")]);
    m_fixed_ip_assignments_isSet = !json[QString("fixedIpAssignments")].isNull() && m_fixed_ip_assignments_isValid;

    m_reserved_ip_ranges_isValid = ::OpenAPI::fromJsonValue(m_reserved_ip_ranges, json[QString("reservedIpRanges")]);
    m_reserved_ip_ranges_isSet = !json[QString("reservedIpRanges")].isNull() && m_reserved_ip_ranges_isValid;
}

QString OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::asJsonObject() const {
    QJsonObject obj;
    if (m_boot_file_name_isSet) {
        obj.insert(QString("bootFileName"), ::OpenAPI::toJsonValue(m_boot_file_name));
    }
    if (m_boot_next_server_isSet) {
        obj.insert(QString("bootNextServer"), ::OpenAPI::toJsonValue(m_boot_next_server));
    }
    if (m_boot_options_enabled_isSet) {
        obj.insert(QString("bootOptionsEnabled"), ::OpenAPI::toJsonValue(m_boot_options_enabled));
    }
    if (m_dhcp_lease_time_isSet) {
        obj.insert(QString("dhcpLeaseTime"), ::OpenAPI::toJsonValue(m_dhcp_lease_time));
    }
    if (m_dhcp_mode_isSet) {
        obj.insert(QString("dhcpMode"), ::OpenAPI::toJsonValue(m_dhcp_mode));
    }
    if (m_dhcp_options.size() > 0) {
        obj.insert(QString("dhcpOptions"), ::OpenAPI::toJsonValue(m_dhcp_options));
    }
    if (m_dhcp_relay_server_ips.size() > 0) {
        obj.insert(QString("dhcpRelayServerIps"), ::OpenAPI::toJsonValue(m_dhcp_relay_server_ips));
    }
    if (m_dns_custom_nameservers.size() > 0) {
        obj.insert(QString("dnsCustomNameservers"), ::OpenAPI::toJsonValue(m_dns_custom_nameservers));
    }
    if (m_dns_nameservers_option_isSet) {
        obj.insert(QString("dnsNameserversOption"), ::OpenAPI::toJsonValue(m_dns_nameservers_option));
    }
    if (m_fixed_ip_assignments.size() > 0) {
        obj.insert(QString("fixedIpAssignments"), ::OpenAPI::toJsonValue(m_fixed_ip_assignments));
    }
    if (m_reserved_ip_ranges.size() > 0) {
        obj.insert(QString("reservedIpRanges"), ::OpenAPI::toJsonValue(m_reserved_ip_ranges));
    }
    return obj;
}

QString OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::getBootFileName() const {
    return m_boot_file_name;
}
void OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::setBootFileName(const QString &boot_file_name) {
    m_boot_file_name = boot_file_name;
    m_boot_file_name_isSet = true;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_boot_file_name_Set() const{
    return m_boot_file_name_isSet;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_boot_file_name_Valid() const{
    return m_boot_file_name_isValid;
}

QString OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::getBootNextServer() const {
    return m_boot_next_server;
}
void OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::setBootNextServer(const QString &boot_next_server) {
    m_boot_next_server = boot_next_server;
    m_boot_next_server_isSet = true;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_boot_next_server_Set() const{
    return m_boot_next_server_isSet;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_boot_next_server_Valid() const{
    return m_boot_next_server_isValid;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::isBootOptionsEnabled() const {
    return m_boot_options_enabled;
}
void OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::setBootOptionsEnabled(const bool &boot_options_enabled) {
    m_boot_options_enabled = boot_options_enabled;
    m_boot_options_enabled_isSet = true;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_boot_options_enabled_Set() const{
    return m_boot_options_enabled_isSet;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_boot_options_enabled_Valid() const{
    return m_boot_options_enabled_isValid;
}

QString OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::getDhcpLeaseTime() const {
    return m_dhcp_lease_time;
}
void OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::setDhcpLeaseTime(const QString &dhcp_lease_time) {
    m_dhcp_lease_time = dhcp_lease_time;
    m_dhcp_lease_time_isSet = true;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_dhcp_lease_time_Set() const{
    return m_dhcp_lease_time_isSet;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_dhcp_lease_time_Valid() const{
    return m_dhcp_lease_time_isValid;
}

QString OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::getDhcpMode() const {
    return m_dhcp_mode;
}
void OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::setDhcpMode(const QString &dhcp_mode) {
    m_dhcp_mode = dhcp_mode;
    m_dhcp_mode_isSet = true;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_dhcp_mode_Set() const{
    return m_dhcp_mode_isSet;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_dhcp_mode_Valid() const{
    return m_dhcp_mode_isValid;
}

QList<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_dhcpOptions_inner> OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::getDhcpOptions() const {
    return m_dhcp_options;
}
void OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::setDhcpOptions(const QList<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_dhcpOptions_inner> &dhcp_options) {
    m_dhcp_options = dhcp_options;
    m_dhcp_options_isSet = true;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_dhcp_options_Set() const{
    return m_dhcp_options_isSet;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_dhcp_options_Valid() const{
    return m_dhcp_options_isValid;
}

QList<QString> OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::getDhcpRelayServerIps() const {
    return m_dhcp_relay_server_ips;
}
void OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::setDhcpRelayServerIps(const QList<QString> &dhcp_relay_server_ips) {
    m_dhcp_relay_server_ips = dhcp_relay_server_ips;
    m_dhcp_relay_server_ips_isSet = true;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_dhcp_relay_server_ips_Set() const{
    return m_dhcp_relay_server_ips_isSet;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_dhcp_relay_server_ips_Valid() const{
    return m_dhcp_relay_server_ips_isValid;
}

QList<QString> OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::getDnsCustomNameservers() const {
    return m_dns_custom_nameservers;
}
void OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::setDnsCustomNameservers(const QList<QString> &dns_custom_nameservers) {
    m_dns_custom_nameservers = dns_custom_nameservers;
    m_dns_custom_nameservers_isSet = true;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_dns_custom_nameservers_Set() const{
    return m_dns_custom_nameservers_isSet;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_dns_custom_nameservers_Valid() const{
    return m_dns_custom_nameservers_isValid;
}

QString OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::getDnsNameserversOption() const {
    return m_dns_nameservers_option;
}
void OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::setDnsNameserversOption(const QString &dns_nameservers_option) {
    m_dns_nameservers_option = dns_nameservers_option;
    m_dns_nameservers_option_isSet = true;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_dns_nameservers_option_Set() const{
    return m_dns_nameservers_option_isSet;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_dns_nameservers_option_Valid() const{
    return m_dns_nameservers_option_isValid;
}

QList<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_fixedIpAssignments_inner> OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::getFixedIpAssignments() const {
    return m_fixed_ip_assignments;
}
void OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::setFixedIpAssignments(const QList<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_fixedIpAssignments_inner> &fixed_ip_assignments) {
    m_fixed_ip_assignments = fixed_ip_assignments;
    m_fixed_ip_assignments_isSet = true;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_fixed_ip_assignments_Set() const{
    return m_fixed_ip_assignments_isSet;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_fixed_ip_assignments_Valid() const{
    return m_fixed_ip_assignments_isValid;
}

QList<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_reservedIpRanges_inner> OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::getReservedIpRanges() const {
    return m_reserved_ip_ranges;
}
void OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::setReservedIpRanges(const QList<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request_reservedIpRanges_inner> &reserved_ip_ranges) {
    m_reserved_ip_ranges = reserved_ip_ranges;
    m_reserved_ip_ranges_isSet = true;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_reserved_ip_ranges_Set() const{
    return m_reserved_ip_ranges_isSet;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::is_reserved_ip_ranges_Valid() const{
    return m_reserved_ip_ranges_isValid;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boot_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boot_next_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boot_options_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhcp_lease_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhcp_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhcp_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhcp_relay_server_ips.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_custom_nameservers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_nameservers_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_ip_assignments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_ip_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
