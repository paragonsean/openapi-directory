/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrganizationLicensingCotermLicenses_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrganizationLicensingCotermLicenses_200_response_inner::OAIGetOrganizationLicensingCotermLicenses_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrganizationLicensingCotermLicenses_200_response_inner::OAIGetOrganizationLicensingCotermLicenses_200_response_inner() {
    this->initializeModel();
}

OAIGetOrganizationLicensingCotermLicenses_200_response_inner::~OAIGetOrganizationLicensingCotermLicenses_200_response_inner() {}

void OAIGetOrganizationLicensingCotermLicenses_200_response_inner::initializeModel() {

    m_claimed_at_isSet = false;
    m_claimed_at_isValid = false;

    m_counts_isSet = false;
    m_counts_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_editions_isSet = false;
    m_editions_isValid = false;

    m_expired_isSet = false;
    m_expired_isValid = false;

    m_invalidated_isSet = false;
    m_invalidated_isValid = false;

    m_invalidated_at_isSet = false;
    m_invalidated_at_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;
}

void OAIGetOrganizationLicensingCotermLicenses_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrganizationLicensingCotermLicenses_200_response_inner::fromJsonObject(QJsonObject json) {

    m_claimed_at_isValid = ::OpenAPI::fromJsonValue(m_claimed_at, json[QString("claimedAt")]);
    m_claimed_at_isSet = !json[QString("claimedAt")].isNull() && m_claimed_at_isValid;

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_editions_isValid = ::OpenAPI::fromJsonValue(m_editions, json[QString("editions")]);
    m_editions_isSet = !json[QString("editions")].isNull() && m_editions_isValid;

    m_expired_isValid = ::OpenAPI::fromJsonValue(m_expired, json[QString("expired")]);
    m_expired_isSet = !json[QString("expired")].isNull() && m_expired_isValid;

    m_invalidated_isValid = ::OpenAPI::fromJsonValue(m_invalidated, json[QString("invalidated")]);
    m_invalidated_isSet = !json[QString("invalidated")].isNull() && m_invalidated_isValid;

    m_invalidated_at_isValid = ::OpenAPI::fromJsonValue(m_invalidated_at, json[QString("invalidatedAt")]);
    m_invalidated_at_isSet = !json[QString("invalidatedAt")].isNull() && m_invalidated_at_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("organizationId")]);
    m_organization_id_isSet = !json[QString("organizationId")].isNull() && m_organization_id_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("startedAt")]);
    m_started_at_isSet = !json[QString("startedAt")].isNull() && m_started_at_isValid;
}

QString OAIGetOrganizationLicensingCotermLicenses_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrganizationLicensingCotermLicenses_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_claimed_at_isSet) {
        obj.insert(QString("claimedAt"), ::OpenAPI::toJsonValue(m_claimed_at));
    }
    if (m_counts.size() > 0) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_editions.size() > 0) {
        obj.insert(QString("editions"), ::OpenAPI::toJsonValue(m_editions));
    }
    if (m_expired_isSet) {
        obj.insert(QString("expired"), ::OpenAPI::toJsonValue(m_expired));
    }
    if (m_invalidated_isSet) {
        obj.insert(QString("invalidated"), ::OpenAPI::toJsonValue(m_invalidated));
    }
    if (m_invalidated_at_isSet) {
        obj.insert(QString("invalidatedAt"), ::OpenAPI::toJsonValue(m_invalidated_at));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organizationId"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("startedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    return obj;
}

QDateTime OAIGetOrganizationLicensingCotermLicenses_200_response_inner::getClaimedAt() const {
    return m_claimed_at;
}
void OAIGetOrganizationLicensingCotermLicenses_200_response_inner::setClaimedAt(const QDateTime &claimed_at) {
    m_claimed_at = claimed_at;
    m_claimed_at_isSet = true;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_claimed_at_Set() const{
    return m_claimed_at_isSet;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_claimed_at_Valid() const{
    return m_claimed_at_isValid;
}

QList<OAIGetOrganizationLicensingCotermLicenses_200_response_inner_counts_inner> OAIGetOrganizationLicensingCotermLicenses_200_response_inner::getCounts() const {
    return m_counts;
}
void OAIGetOrganizationLicensingCotermLicenses_200_response_inner::setCounts(const QList<OAIGetOrganizationLicensingCotermLicenses_200_response_inner_counts_inner> &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_counts_Valid() const{
    return m_counts_isValid;
}

qint32 OAIGetOrganizationLicensingCotermLicenses_200_response_inner::getDuration() const {
    return m_duration;
}
void OAIGetOrganizationLicensingCotermLicenses_200_response_inner::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_duration_Valid() const{
    return m_duration_isValid;
}

QList<OAIGetOrganizationLicensingCotermLicenses_200_response_inner_editions_inner> OAIGetOrganizationLicensingCotermLicenses_200_response_inner::getEditions() const {
    return m_editions;
}
void OAIGetOrganizationLicensingCotermLicenses_200_response_inner::setEditions(const QList<OAIGetOrganizationLicensingCotermLicenses_200_response_inner_editions_inner> &editions) {
    m_editions = editions;
    m_editions_isSet = true;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_editions_Set() const{
    return m_editions_isSet;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_editions_Valid() const{
    return m_editions_isValid;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::isExpired() const {
    return m_expired;
}
void OAIGetOrganizationLicensingCotermLicenses_200_response_inner::setExpired(const bool &expired) {
    m_expired = expired;
    m_expired_isSet = true;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_expired_Set() const{
    return m_expired_isSet;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_expired_Valid() const{
    return m_expired_isValid;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::isInvalidated() const {
    return m_invalidated;
}
void OAIGetOrganizationLicensingCotermLicenses_200_response_inner::setInvalidated(const bool &invalidated) {
    m_invalidated = invalidated;
    m_invalidated_isSet = true;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_invalidated_Set() const{
    return m_invalidated_isSet;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_invalidated_Valid() const{
    return m_invalidated_isValid;
}

QDateTime OAIGetOrganizationLicensingCotermLicenses_200_response_inner::getInvalidatedAt() const {
    return m_invalidated_at;
}
void OAIGetOrganizationLicensingCotermLicenses_200_response_inner::setInvalidatedAt(const QDateTime &invalidated_at) {
    m_invalidated_at = invalidated_at;
    m_invalidated_at_isSet = true;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_invalidated_at_Set() const{
    return m_invalidated_at_isSet;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_invalidated_at_Valid() const{
    return m_invalidated_at_isValid;
}

QString OAIGetOrganizationLicensingCotermLicenses_200_response_inner::getKey() const {
    return m_key;
}
void OAIGetOrganizationLicensingCotermLicenses_200_response_inner::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_key_Set() const{
    return m_key_isSet;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIGetOrganizationLicensingCotermLicenses_200_response_inner::getMode() const {
    return m_mode;
}
void OAIGetOrganizationLicensingCotermLicenses_200_response_inner::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIGetOrganizationLicensingCotermLicenses_200_response_inner::getOrganizationId() const {
    return m_organization_id;
}
void OAIGetOrganizationLicensingCotermLicenses_200_response_inner::setOrganizationId(const QString &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QDateTime OAIGetOrganizationLicensingCotermLicenses_200_response_inner::getStartedAt() const {
    return m_started_at;
}
void OAIGetOrganizationLicensingCotermLicenses_200_response_inner::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::is_started_at_Valid() const{
    return m_started_at_isValid;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_claimed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalidated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalidated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrganizationLicensingCotermLicenses_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
