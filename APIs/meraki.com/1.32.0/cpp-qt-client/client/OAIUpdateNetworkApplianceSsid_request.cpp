/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkApplianceSsid_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkApplianceSsid_request::OAIUpdateNetworkApplianceSsid_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkApplianceSsid_request::OAIUpdateNetworkApplianceSsid_request() {
    this->initializeModel();
}

OAIUpdateNetworkApplianceSsid_request::~OAIUpdateNetworkApplianceSsid_request() {}

void OAIUpdateNetworkApplianceSsid_request::initializeModel() {

    m_auth_mode_isSet = false;
    m_auth_mode_isValid = false;

    m_default_vlan_id_isSet = false;
    m_default_vlan_id_isValid = false;

    m_dhcp_enforced_deauthentication_isSet = false;
    m_dhcp_enforced_deauthentication_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_encryption_mode_isSet = false;
    m_encryption_mode_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_psk_isSet = false;
    m_psk_isValid = false;

    m_radius_servers_isSet = false;
    m_radius_servers_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;

    m_wpa_encryption_mode_isSet = false;
    m_wpa_encryption_mode_isValid = false;
}

void OAIUpdateNetworkApplianceSsid_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkApplianceSsid_request::fromJsonObject(QJsonObject json) {

    m_auth_mode_isValid = ::OpenAPI::fromJsonValue(m_auth_mode, json[QString("authMode")]);
    m_auth_mode_isSet = !json[QString("authMode")].isNull() && m_auth_mode_isValid;

    m_default_vlan_id_isValid = ::OpenAPI::fromJsonValue(m_default_vlan_id, json[QString("defaultVlanId")]);
    m_default_vlan_id_isSet = !json[QString("defaultVlanId")].isNull() && m_default_vlan_id_isValid;

    m_dhcp_enforced_deauthentication_isValid = ::OpenAPI::fromJsonValue(m_dhcp_enforced_deauthentication, json[QString("dhcpEnforcedDeauthentication")]);
    m_dhcp_enforced_deauthentication_isSet = !json[QString("dhcpEnforcedDeauthentication")].isNull() && m_dhcp_enforced_deauthentication_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_encryption_mode_isValid = ::OpenAPI::fromJsonValue(m_encryption_mode, json[QString("encryptionMode")]);
    m_encryption_mode_isSet = !json[QString("encryptionMode")].isNull() && m_encryption_mode_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_psk_isValid = ::OpenAPI::fromJsonValue(m_psk, json[QString("psk")]);
    m_psk_isSet = !json[QString("psk")].isNull() && m_psk_isValid;

    m_radius_servers_isValid = ::OpenAPI::fromJsonValue(m_radius_servers, json[QString("radiusServers")]);
    m_radius_servers_isSet = !json[QString("radiusServers")].isNull() && m_radius_servers_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;

    m_wpa_encryption_mode_isValid = ::OpenAPI::fromJsonValue(m_wpa_encryption_mode, json[QString("wpaEncryptionMode")]);
    m_wpa_encryption_mode_isSet = !json[QString("wpaEncryptionMode")].isNull() && m_wpa_encryption_mode_isValid;
}

QString OAIUpdateNetworkApplianceSsid_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkApplianceSsid_request::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_mode_isSet) {
        obj.insert(QString("authMode"), ::OpenAPI::toJsonValue(m_auth_mode));
    }
    if (m_default_vlan_id_isSet) {
        obj.insert(QString("defaultVlanId"), ::OpenAPI::toJsonValue(m_default_vlan_id));
    }
    if (m_dhcp_enforced_deauthentication.isSet()) {
        obj.insert(QString("dhcpEnforcedDeauthentication"), ::OpenAPI::toJsonValue(m_dhcp_enforced_deauthentication));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_encryption_mode_isSet) {
        obj.insert(QString("encryptionMode"), ::OpenAPI::toJsonValue(m_encryption_mode));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_psk_isSet) {
        obj.insert(QString("psk"), ::OpenAPI::toJsonValue(m_psk));
    }
    if (m_radius_servers.size() > 0) {
        obj.insert(QString("radiusServers"), ::OpenAPI::toJsonValue(m_radius_servers));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    if (m_wpa_encryption_mode_isSet) {
        obj.insert(QString("wpaEncryptionMode"), ::OpenAPI::toJsonValue(m_wpa_encryption_mode));
    }
    return obj;
}

QString OAIUpdateNetworkApplianceSsid_request::getAuthMode() const {
    return m_auth_mode;
}
void OAIUpdateNetworkApplianceSsid_request::setAuthMode(const QString &auth_mode) {
    m_auth_mode = auth_mode;
    m_auth_mode_isSet = true;
}

bool OAIUpdateNetworkApplianceSsid_request::is_auth_mode_Set() const{
    return m_auth_mode_isSet;
}

bool OAIUpdateNetworkApplianceSsid_request::is_auth_mode_Valid() const{
    return m_auth_mode_isValid;
}

qint32 OAIUpdateNetworkApplianceSsid_request::getDefaultVlanId() const {
    return m_default_vlan_id;
}
void OAIUpdateNetworkApplianceSsid_request::setDefaultVlanId(const qint32 &default_vlan_id) {
    m_default_vlan_id = default_vlan_id;
    m_default_vlan_id_isSet = true;
}

bool OAIUpdateNetworkApplianceSsid_request::is_default_vlan_id_Set() const{
    return m_default_vlan_id_isSet;
}

bool OAIUpdateNetworkApplianceSsid_request::is_default_vlan_id_Valid() const{
    return m_default_vlan_id_isValid;
}

OAIUpdateNetworkApplianceSsid_request_dhcpEnforcedDeauthentication OAIUpdateNetworkApplianceSsid_request::getDhcpEnforcedDeauthentication() const {
    return m_dhcp_enforced_deauthentication;
}
void OAIUpdateNetworkApplianceSsid_request::setDhcpEnforcedDeauthentication(const OAIUpdateNetworkApplianceSsid_request_dhcpEnforcedDeauthentication &dhcp_enforced_deauthentication) {
    m_dhcp_enforced_deauthentication = dhcp_enforced_deauthentication;
    m_dhcp_enforced_deauthentication_isSet = true;
}

bool OAIUpdateNetworkApplianceSsid_request::is_dhcp_enforced_deauthentication_Set() const{
    return m_dhcp_enforced_deauthentication_isSet;
}

bool OAIUpdateNetworkApplianceSsid_request::is_dhcp_enforced_deauthentication_Valid() const{
    return m_dhcp_enforced_deauthentication_isValid;
}

bool OAIUpdateNetworkApplianceSsid_request::isEnabled() const {
    return m_enabled;
}
void OAIUpdateNetworkApplianceSsid_request::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIUpdateNetworkApplianceSsid_request::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIUpdateNetworkApplianceSsid_request::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIUpdateNetworkApplianceSsid_request::getEncryptionMode() const {
    return m_encryption_mode;
}
void OAIUpdateNetworkApplianceSsid_request::setEncryptionMode(const QString &encryption_mode) {
    m_encryption_mode = encryption_mode;
    m_encryption_mode_isSet = true;
}

bool OAIUpdateNetworkApplianceSsid_request::is_encryption_mode_Set() const{
    return m_encryption_mode_isSet;
}

bool OAIUpdateNetworkApplianceSsid_request::is_encryption_mode_Valid() const{
    return m_encryption_mode_isValid;
}

QString OAIUpdateNetworkApplianceSsid_request::getName() const {
    return m_name;
}
void OAIUpdateNetworkApplianceSsid_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateNetworkApplianceSsid_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateNetworkApplianceSsid_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateNetworkApplianceSsid_request::getPsk() const {
    return m_psk;
}
void OAIUpdateNetworkApplianceSsid_request::setPsk(const QString &psk) {
    m_psk = psk;
    m_psk_isSet = true;
}

bool OAIUpdateNetworkApplianceSsid_request::is_psk_Set() const{
    return m_psk_isSet;
}

bool OAIUpdateNetworkApplianceSsid_request::is_psk_Valid() const{
    return m_psk_isValid;
}

QList<OAIUpdateNetworkApplianceSsid_request_radiusServers_inner> OAIUpdateNetworkApplianceSsid_request::getRadiusServers() const {
    return m_radius_servers;
}
void OAIUpdateNetworkApplianceSsid_request::setRadiusServers(const QList<OAIUpdateNetworkApplianceSsid_request_radiusServers_inner> &radius_servers) {
    m_radius_servers = radius_servers;
    m_radius_servers_isSet = true;
}

bool OAIUpdateNetworkApplianceSsid_request::is_radius_servers_Set() const{
    return m_radius_servers_isSet;
}

bool OAIUpdateNetworkApplianceSsid_request::is_radius_servers_Valid() const{
    return m_radius_servers_isValid;
}

bool OAIUpdateNetworkApplianceSsid_request::isVisible() const {
    return m_visible;
}
void OAIUpdateNetworkApplianceSsid_request::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAIUpdateNetworkApplianceSsid_request::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAIUpdateNetworkApplianceSsid_request::is_visible_Valid() const{
    return m_visible_isValid;
}

QString OAIUpdateNetworkApplianceSsid_request::getWpaEncryptionMode() const {
    return m_wpa_encryption_mode;
}
void OAIUpdateNetworkApplianceSsid_request::setWpaEncryptionMode(const QString &wpa_encryption_mode) {
    m_wpa_encryption_mode = wpa_encryption_mode;
    m_wpa_encryption_mode_isSet = true;
}

bool OAIUpdateNetworkApplianceSsid_request::is_wpa_encryption_mode_Set() const{
    return m_wpa_encryption_mode_isSet;
}

bool OAIUpdateNetworkApplianceSsid_request::is_wpa_encryption_mode_Valid() const{
    return m_wpa_encryption_mode_isValid;
}

bool OAIUpdateNetworkApplianceSsid_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_vlan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhcp_enforced_deauthentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wpa_encryption_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkApplianceSsid_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
