/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner() {
    this->initializeModel();
}

OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::~OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner() {}

void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::initializeModel() {

    m_sudi_isSet = false;
    m_sudi_isValid = false;

    m_tunnel_isSet = false;
    m_tunnel_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_vty_isSet = false;
    m_vty_isValid = false;
}

void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::fromJsonObject(QJsonObject json) {

    m_sudi_isValid = ::OpenAPI::fromJsonValue(m_sudi, json[QString("sudi")]);
    m_sudi_isSet = !json[QString("sudi")].isNull() && m_sudi_isValid;

    m_tunnel_isValid = ::OpenAPI::fromJsonValue(m_tunnel, json[QString("tunnel")]);
    m_tunnel_isSet = !json[QString("tunnel")].isNull() && m_tunnel_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_vty_isValid = ::OpenAPI::fromJsonValue(m_vty, json[QString("vty")]);
    m_vty_isSet = !json[QString("vty")].isNull() && m_vty_isValid;
}

QString OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_sudi_isSet) {
        obj.insert(QString("sudi"), ::OpenAPI::toJsonValue(m_sudi));
    }
    if (m_tunnel.isSet()) {
        obj.insert(QString("tunnel"), ::OpenAPI::toJsonValue(m_tunnel));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_vty.isSet()) {
        obj.insert(QString("vty"), ::OpenAPI::toJsonValue(m_vty));
    }
    return obj;
}

QString OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::getSudi() const {
    return m_sudi;
}
void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::setSudi(const QString &sudi) {
    m_sudi = sudi;
    m_sudi_isSet = true;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::is_sudi_Set() const{
    return m_sudi_isSet;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::is_sudi_Valid() const{
    return m_sudi_isValid;
}

OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::getTunnel() const {
    return m_tunnel;
}
void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::setTunnel(const OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_tunnel &tunnel) {
    m_tunnel = tunnel;
    m_tunnel_isSet = true;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::is_tunnel_Set() const{
    return m_tunnel_isSet;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::is_tunnel_Valid() const{
    return m_tunnel_isValid;
}

OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_user OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::getUser() const {
    return m_user;
}
void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::setUser(const OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::is_user_Set() const{
    return m_user_isSet;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::is_user_Valid() const{
    return m_user_isValid;
}

OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_vty OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::getVty() const {
    return m_vty;
}
void OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::setVty(const OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner_vty &vty) {
    m_vty = vty;
    m_vty_isSet = true;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::is_vty_Set() const{
    return m_vty_isSet;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::is_vty_Valid() const{
    return m_vty_isValid;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sudi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tunnel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vty.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOrganizationInventoryOnboardingCloudMonitoringPrepare_request_devices_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sudi_isValid && true;
}

} // namespace OpenAPI
