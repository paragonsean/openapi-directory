/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISwitchApi_H
#define OAI_OAISwitchApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddNetworkSwitchStack_request.h"
#include "OAICloneOrganizationSwitchDevices_request.h"
#include "OAICreateDeviceSwitchRoutingInterface_request.h"
#include "OAICreateDeviceSwitchRoutingStaticRoute_request.h"
#include "OAICreateNetworkSwitchAccessPolicy_request.h"
#include "OAICreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request.h"
#include "OAICreateNetworkSwitchLinkAggregation_request.h"
#include "OAICreateNetworkSwitchPortSchedule_request.h"
#include "OAICreateNetworkSwitchQosRule_request.h"
#include "OAICreateNetworkSwitchRoutingMulticastRendezvousPoint_request.h"
#include "OAICreateNetworkSwitchStackRoutingInterface_request.h"
#include "OAICreateNetworkSwitchStack_request.h"
#include "OAICycleDeviceSwitchPorts_request.h"
#include "OAIGetDeviceSwitchPortsStatuses_200_response_inner.h"
#include "OAIGetDeviceSwitchPorts_200_response_inner.h"
#include "OAIGetDeviceSwitchRoutingInterfaces_200_response_inner.h"
#include "OAIGetDeviceSwitchRoutingStaticRoute_200_response.h"
#include "OAIGetNetworkSwitchAccessControlLists_200_response.h"
#include "OAIGetNetworkSwitchAccessPolicies_200_response_inner.h"
#include "OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner.h"
#include "OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner.h"
#include "OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner.h"
#include "OAIGetNetworkSwitchMtu_200_response.h"
#include "OAIGetNetworkSwitchSettings_200_response.h"
#include "OAIGetNetworkSwitchStack_200_response.h"
#include "OAIGetNetworkSwitchStormControl_200_response.h"
#include "OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner.h"
#include "OAIGetOrganizationConfigTemplateSwitchProfiles_200_response.h"
#include "OAIGetOrganizationSwitchPortsBySwitch_200_response_inner.h"
#include "OAIObject.h"
#include "OAIRemoveNetworkSwitchStack_request.h"
#include "OAIUpdateDeviceSwitchPort_request.h"
#include "OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request.h"
#include "OAIUpdateDeviceSwitchRoutingStaticRoute_request.h"
#include "OAIUpdateDeviceSwitchWarmSpare_request.h"
#include "OAIUpdateNetworkSwitchAccessControlLists_request.h"
#include "OAIUpdateNetworkSwitchAccessPolicy_request.h"
#include "OAIUpdateNetworkSwitchAlternateManagementInterface_request.h"
#include "OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request.h"
#include "OAIUpdateNetworkSwitchDhcpServerPolicy_request.h"
#include "OAIUpdateNetworkSwitchDscpToCosMappings_request.h"
#include "OAIUpdateNetworkSwitchLinkAggregation_request.h"
#include "OAIUpdateNetworkSwitchMtu_request.h"
#include "OAIUpdateNetworkSwitchPortSchedule_request.h"
#include "OAIUpdateNetworkSwitchQosRule_request.h"
#include "OAIUpdateNetworkSwitchQosRulesOrder_request.h"
#include "OAIUpdateNetworkSwitchRoutingMulticastRendezvousPoint_request.h"
#include "OAIUpdateNetworkSwitchRoutingMulticast_request.h"
#include "OAIUpdateNetworkSwitchRoutingOspf_request.h"
#include "OAIUpdateNetworkSwitchSettings_request.h"
#include "OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request.h"
#include "OAIUpdateNetworkSwitchStackRoutingInterface_request.h"
#include "OAIUpdateNetworkSwitchStormControl_request.h"
#include "OAIUpdateNetworkSwitchStp_request.h"
#include "OAIUpdateOrganizationConfigTemplateSwitchProfilePort_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISwitchApi : public QObject {
    Q_OBJECT

public:
    OAISwitchApi(const int timeOut = 0);
    ~OAISwitchApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  oai_add_network_switch_stack_request OAIAddNetworkSwitchStack_request [required]
    */
    virtual void addNetworkSwitchStack(const QString &network_id, const QString &switch_stack_id, const OAIAddNetworkSwitchStack_request &oai_add_network_switch_stack_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_clone_organization_switch_devices_request OAICloneOrganizationSwitchDevices_request [required]
    */
    virtual void cloneOrganizationSwitchDevices(const QString &organization_id, const OAICloneOrganizationSwitchDevices_request &oai_clone_organization_switch_devices_request);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_create_device_switch_routing_interface_request OAICreateDeviceSwitchRoutingInterface_request [optional]
    */
    virtual void createDeviceSwitchRoutingInterface(const QString &serial, const ::OpenAPI::OptionalParam<OAICreateDeviceSwitchRoutingInterface_request> &oai_create_device_switch_routing_interface_request = ::OpenAPI::OptionalParam<OAICreateDeviceSwitchRoutingInterface_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_create_device_switch_routing_static_route_request OAICreateDeviceSwitchRoutingStaticRoute_request [required]
    */
    virtual void createDeviceSwitchRoutingStaticRoute(const QString &serial, const OAICreateDeviceSwitchRoutingStaticRoute_request &oai_create_device_switch_routing_static_route_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_access_policy_request OAICreateNetworkSwitchAccessPolicy_request [required]
    */
    virtual void createNetworkSwitchAccessPolicy(const QString &network_id, const OAICreateNetworkSwitchAccessPolicy_request &oai_create_network_switch_access_policy_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request OAICreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request [required]
    */
    virtual void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(const QString &network_id, const OAICreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request &oai_create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_link_aggregation_request OAICreateNetworkSwitchLinkAggregation_request [optional]
    */
    virtual void createNetworkSwitchLinkAggregation(const QString &network_id, const ::OpenAPI::OptionalParam<OAICreateNetworkSwitchLinkAggregation_request> &oai_create_network_switch_link_aggregation_request = ::OpenAPI::OptionalParam<OAICreateNetworkSwitchLinkAggregation_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_port_schedule_request OAICreateNetworkSwitchPortSchedule_request [required]
    */
    virtual void createNetworkSwitchPortSchedule(const QString &network_id, const OAICreateNetworkSwitchPortSchedule_request &oai_create_network_switch_port_schedule_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_qos_rule_request OAICreateNetworkSwitchQosRule_request [required]
    */
    virtual void createNetworkSwitchQosRule(const QString &network_id, const OAICreateNetworkSwitchQosRule_request &oai_create_network_switch_qos_rule_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_routing_multicast_rendezvous_point_request OAICreateNetworkSwitchRoutingMulticastRendezvousPoint_request [required]
    */
    virtual void createNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const OAICreateNetworkSwitchRoutingMulticastRendezvousPoint_request &oai_create_network_switch_routing_multicast_rendezvous_point_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_stack_request OAICreateNetworkSwitchStack_request [required]
    */
    virtual void createNetworkSwitchStack(const QString &network_id, const OAICreateNetworkSwitchStack_request &oai_create_network_switch_stack_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  oai_create_network_switch_stack_routing_interface_request OAICreateNetworkSwitchStackRoutingInterface_request [required]
    */
    virtual void createNetworkSwitchStackRoutingInterface(const QString &network_id, const QString &switch_stack_id, const OAICreateNetworkSwitchStackRoutingInterface_request &oai_create_network_switch_stack_routing_interface_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  oai_create_device_switch_routing_static_route_request OAICreateDeviceSwitchRoutingStaticRoute_request [required]
    */
    virtual void createNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const OAICreateDeviceSwitchRoutingStaticRoute_request &oai_create_device_switch_routing_static_route_request);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_cycle_device_switch_ports_request OAICycleDeviceSwitchPorts_request [required]
    */
    virtual void cycleDeviceSwitchPorts(const QString &serial, const OAICycleDeviceSwitchPorts_request &oai_cycle_device_switch_ports_request);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void deleteDeviceSwitchRoutingInterface(const QString &serial, const QString &interface_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void deleteDeviceSwitchRoutingStaticRoute(const QString &serial, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  access_policy_number QString [required]
    */
    virtual void deleteNetworkSwitchAccessPolicy(const QString &network_id, const QString &access_policy_number);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  trusted_server_id QString [required]
    */
    virtual void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(const QString &network_id, const QString &trusted_server_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  link_aggregation_id QString [required]
    */
    virtual void deleteNetworkSwitchLinkAggregation(const QString &network_id, const QString &link_aggregation_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  port_schedule_id QString [required]
    */
    virtual void deleteNetworkSwitchPortSchedule(const QString &network_id, const QString &port_schedule_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  qos_rule_id QString [required]
    */
    virtual void deleteNetworkSwitchQosRule(const QString &network_id, const QString &qos_rule_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rendezvous_point_id QString [required]
    */
    virtual void deleteNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const QString &rendezvous_point_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    */
    virtual void deleteNetworkSwitchStack(const QString &network_id, const QString &switch_stack_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void deleteNetworkSwitchStackRoutingInterface(const QString &network_id, const QString &switch_stack_id, const QString &interface_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void deleteNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const QString &static_route_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  port_id QString [required]
    */
    virtual void getDeviceSwitchPort(const QString &serial, const QString &port_id);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceSwitchPorts(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getDeviceSwitchPortsStatuses(const QString &serial, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getDeviceSwitchPortsStatusesPackets(const QString &serial, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void getDeviceSwitchRoutingInterface(const QString &serial, const QString &interface_id);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void getDeviceSwitchRoutingInterfaceDhcp(const QString &serial, const QString &interface_id);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceSwitchRoutingInterfaces(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void getDeviceSwitchRoutingStaticRoute(const QString &serial, const QString &static_route_id);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceSwitchRoutingStaticRoutes(const QString &serial);

    /**
    * @param[in]  serial QString [required]
    */
    virtual void getDeviceSwitchWarmSpare(const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchAccessControlLists(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchAccessPolicies(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  access_policy_number QString [required]
    */
    virtual void getNetworkSwitchAccessPolicy(const QString &network_id, const QString &access_policy_number);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchAlternateManagementInterface(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchDhcpServerPolicy(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers(const QString &network_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice(const QString &network_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSwitchDhcpV4ServersSeen(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchDscpToCosMappings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchLinkAggregations(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchMtu(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchPortSchedules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  qos_rule_id QString [required]
    */
    virtual void getNetworkSwitchQosRule(const QString &network_id, const QString &qos_rule_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchQosRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchQosRulesOrder(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchRoutingMulticast(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rendezvous_point_id QString [required]
    */
    virtual void getNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const QString &rendezvous_point_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchRoutingMulticastRendezvousPoints(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchRoutingOspf(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    */
    virtual void getNetworkSwitchStack(const QString &network_id, const QString &switch_stack_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingInterface(const QString &network_id, const QString &switch_stack_id, const QString &interface_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingInterfaceDhcp(const QString &network_id, const QString &switch_stack_id, const QString &interface_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingInterfaces(const QString &network_id, const QString &switch_stack_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    */
    virtual void getNetworkSwitchStackRoutingStaticRoutes(const QString &network_id, const QString &switch_stack_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchStacks(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchStormControl(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchStp(const QString &network_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  port_id QString [required]
    */
    virtual void getOrganizationConfigTemplateSwitchProfilePort(const QString &organization_id, const QString &config_template_id, const QString &profile_id, const QString &port_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    * @param[in]  profile_id QString [required]
    */
    virtual void getOrganizationConfigTemplateSwitchProfilePorts(const QString &organization_id, const QString &config_template_id, const QString &profile_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    */
    virtual void getOrganizationConfigTemplateSwitchProfiles(const QString &organization_id, const QString &config_template_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  network_ids QList<QString> [optional]
    * @param[in]  port_profile_ids QList<QString> [optional]
    * @param[in]  name QString [optional]
    * @param[in]  mac QString [optional]
    * @param[in]  macs QList<QString> [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  serials QList<QString> [optional]
    * @param[in]  configuration_updated_after QString [optional]
    */
    virtual void getOrganizationSwitchPortsBySwitch(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &network_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &port_profile_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &macs = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &serials = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &configuration_updated_after = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  oai_remove_network_switch_stack_request OAIRemoveNetworkSwitchStack_request [required]
    */
    virtual void removeNetworkSwitchStack(const QString &network_id, const QString &switch_stack_id, const OAIRemoveNetworkSwitchStack_request &oai_remove_network_switch_stack_request);

    /**
    * @param[in]  serial QString [required]
    * @param[in]  port_id QString [required]
    * @param[in]  oai_update_device_switch_port_request OAIUpdateDeviceSwitchPort_request [optional]
    */
    virtual void updateDeviceSwitchPort(const QString &serial, const QString &port_id, const ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchPort_request> &oai_update_device_switch_port_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchPort_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  interface_id QString [required]
    * @param[in]  oai_create_device_switch_routing_interface_request OAICreateDeviceSwitchRoutingInterface_request [optional]
    */
    virtual void updateDeviceSwitchRoutingInterface(const QString &serial, const QString &interface_id, const ::OpenAPI::OptionalParam<OAICreateDeviceSwitchRoutingInterface_request> &oai_create_device_switch_routing_interface_request = ::OpenAPI::OptionalParam<OAICreateDeviceSwitchRoutingInterface_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  interface_id QString [required]
    * @param[in]  oai_update_device_switch_routing_interface_dhcp_request OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request [optional]
    */
    virtual void updateDeviceSwitchRoutingInterfaceDhcp(const QString &serial, const QString &interface_id, const ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request> &oai_update_device_switch_routing_interface_dhcp_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingInterfaceDhcp_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  static_route_id QString [required]
    * @param[in]  oai_update_device_switch_routing_static_route_request OAIUpdateDeviceSwitchRoutingStaticRoute_request [optional]
    */
    virtual void updateDeviceSwitchRoutingStaticRoute(const QString &serial, const QString &static_route_id, const ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingStaticRoute_request> &oai_update_device_switch_routing_static_route_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingStaticRoute_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_device_switch_warm_spare_request OAIUpdateDeviceSwitchWarmSpare_request [required]
    */
    virtual void updateDeviceSwitchWarmSpare(const QString &serial, const OAIUpdateDeviceSwitchWarmSpare_request &oai_update_device_switch_warm_spare_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_access_control_lists_request OAIUpdateNetworkSwitchAccessControlLists_request [required]
    */
    virtual void updateNetworkSwitchAccessControlLists(const QString &network_id, const OAIUpdateNetworkSwitchAccessControlLists_request &oai_update_network_switch_access_control_lists_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  access_policy_number QString [required]
    * @param[in]  oai_update_network_switch_access_policy_request OAIUpdateNetworkSwitchAccessPolicy_request [optional]
    */
    virtual void updateNetworkSwitchAccessPolicy(const QString &network_id, const QString &access_policy_number, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchAccessPolicy_request> &oai_update_network_switch_access_policy_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchAccessPolicy_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_alternate_management_interface_request OAIUpdateNetworkSwitchAlternateManagementInterface_request [optional]
    */
    virtual void updateNetworkSwitchAlternateManagementInterface(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchAlternateManagementInterface_request> &oai_update_network_switch_alternate_management_interface_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchAlternateManagementInterface_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_dhcp_server_policy_request OAIUpdateNetworkSwitchDhcpServerPolicy_request [optional]
    */
    virtual void updateNetworkSwitchDhcpServerPolicy(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchDhcpServerPolicy_request> &oai_update_network_switch_dhcp_server_policy_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchDhcpServerPolicy_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  trusted_server_id QString [required]
    * @param[in]  oai_update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request [optional]
    */
    virtual void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(const QString &network_id, const QString &trusted_server_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request> &oai_update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_dscp_to_cos_mappings_request OAIUpdateNetworkSwitchDscpToCosMappings_request [required]
    */
    virtual void updateNetworkSwitchDscpToCosMappings(const QString &network_id, const OAIUpdateNetworkSwitchDscpToCosMappings_request &oai_update_network_switch_dscp_to_cos_mappings_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  link_aggregation_id QString [required]
    * @param[in]  oai_update_network_switch_link_aggregation_request OAIUpdateNetworkSwitchLinkAggregation_request [optional]
    */
    virtual void updateNetworkSwitchLinkAggregation(const QString &network_id, const QString &link_aggregation_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchLinkAggregation_request> &oai_update_network_switch_link_aggregation_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchLinkAggregation_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_mtu_request OAIUpdateNetworkSwitchMtu_request [optional]
    */
    virtual void updateNetworkSwitchMtu(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchMtu_request> &oai_update_network_switch_mtu_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchMtu_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  port_schedule_id QString [required]
    * @param[in]  oai_update_network_switch_port_schedule_request OAIUpdateNetworkSwitchPortSchedule_request [optional]
    */
    virtual void updateNetworkSwitchPortSchedule(const QString &network_id, const QString &port_schedule_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchPortSchedule_request> &oai_update_network_switch_port_schedule_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchPortSchedule_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  qos_rule_id QString [required]
    * @param[in]  oai_update_network_switch_qos_rule_request OAIUpdateNetworkSwitchQosRule_request [optional]
    */
    virtual void updateNetworkSwitchQosRule(const QString &network_id, const QString &qos_rule_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchQosRule_request> &oai_update_network_switch_qos_rule_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchQosRule_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_qos_rules_order_request OAIUpdateNetworkSwitchQosRulesOrder_request [required]
    */
    virtual void updateNetworkSwitchQosRulesOrder(const QString &network_id, const OAIUpdateNetworkSwitchQosRulesOrder_request &oai_update_network_switch_qos_rules_order_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_routing_multicast_request OAIUpdateNetworkSwitchRoutingMulticast_request [optional]
    */
    virtual void updateNetworkSwitchRoutingMulticast(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchRoutingMulticast_request> &oai_update_network_switch_routing_multicast_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchRoutingMulticast_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  rendezvous_point_id QString [required]
    * @param[in]  oai_update_network_switch_routing_multicast_rendezvous_point_request OAIUpdateNetworkSwitchRoutingMulticastRendezvousPoint_request [required]
    */
    virtual void updateNetworkSwitchRoutingMulticastRendezvousPoint(const QString &network_id, const QString &rendezvous_point_id, const OAIUpdateNetworkSwitchRoutingMulticastRendezvousPoint_request &oai_update_network_switch_routing_multicast_rendezvous_point_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_routing_ospf_request OAIUpdateNetworkSwitchRoutingOspf_request [optional]
    */
    virtual void updateNetworkSwitchRoutingOspf(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchRoutingOspf_request> &oai_update_network_switch_routing_ospf_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchRoutingOspf_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_settings_request OAIUpdateNetworkSwitchSettings_request [optional]
    */
    virtual void updateNetworkSwitchSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchSettings_request> &oai_update_network_switch_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    * @param[in]  oai_update_network_switch_stack_routing_interface_request OAIUpdateNetworkSwitchStackRoutingInterface_request [optional]
    */
    virtual void updateNetworkSwitchStackRoutingInterface(const QString &network_id, const QString &switch_stack_id, const QString &interface_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStackRoutingInterface_request> &oai_update_network_switch_stack_routing_interface_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStackRoutingInterface_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  interface_id QString [required]
    * @param[in]  oai_update_network_switch_stack_routing_interface_dhcp_request OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request [optional]
    */
    virtual void updateNetworkSwitchStackRoutingInterfaceDhcp(const QString &network_id, const QString &switch_stack_id, const QString &interface_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request> &oai_update_network_switch_stack_routing_interface_dhcp_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStackRoutingInterfaceDhcp_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  switch_stack_id QString [required]
    * @param[in]  static_route_id QString [required]
    * @param[in]  oai_update_device_switch_routing_static_route_request OAIUpdateDeviceSwitchRoutingStaticRoute_request [optional]
    */
    virtual void updateNetworkSwitchStackRoutingStaticRoute(const QString &network_id, const QString &switch_stack_id, const QString &static_route_id, const ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingStaticRoute_request> &oai_update_device_switch_routing_static_route_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceSwitchRoutingStaticRoute_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_storm_control_request OAIUpdateNetworkSwitchStormControl_request [optional]
    */
    virtual void updateNetworkSwitchStormControl(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStormControl_request> &oai_update_network_switch_storm_control_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStormControl_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_stp_request OAIUpdateNetworkSwitchStp_request [optional]
    */
    virtual void updateNetworkSwitchStp(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStp_request> &oai_update_network_switch_stp_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchStp_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  port_id QString [required]
    * @param[in]  oai_update_organization_config_template_switch_profile_port_request OAIUpdateOrganizationConfigTemplateSwitchProfilePort_request [optional]
    */
    virtual void updateOrganizationConfigTemplateSwitchProfilePort(const QString &organization_id, const QString &config_template_id, const QString &profile_id, const QString &port_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationConfigTemplateSwitchProfilePort_request> &oai_update_organization_config_template_switch_profile_port_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationConfigTemplateSwitchProfilePort_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addNetworkSwitchStackCallback(OAIHttpRequestWorker *worker);
    void cloneOrganizationSwitchDevicesCallback(OAIHttpRequestWorker *worker);
    void createDeviceSwitchRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void createDeviceSwitchRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchAccessPolicyCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchLinkAggregationCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchPortScheduleCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchQosRuleCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchStackCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchStackRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void createNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void cycleDeviceSwitchPortsCallback(OAIHttpRequestWorker *worker);
    void deleteDeviceSwitchRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void deleteDeviceSwitchRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchAccessPolicyCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchLinkAggregationCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchPortScheduleCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchQosRuleCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchPortCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchPortsCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchPortsStatusesCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchPortsStatusesPacketsCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingInterfaceDhcpCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingInterfacesCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchRoutingStaticRoutesCallback(OAIHttpRequestWorker *worker);
    void getDeviceSwitchWarmSpareCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchAccessControlListsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchAccessPoliciesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchAccessPolicyCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchAlternateManagementInterfaceCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchDhcpServerPolicyCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchDhcpV4ServersSeenCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchDscpToCosMappingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchLinkAggregationsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchMtuCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchPortSchedulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchQosRuleCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchQosRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchQosRulesOrderCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchRoutingMulticastCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchRoutingMulticastRendezvousPointsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchRoutingOspfCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingInterfaceDhcpCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingInterfacesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStackRoutingStaticRoutesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStacksCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStormControlCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchStpCallback(OAIHttpRequestWorker *worker);
    void getOrganizationConfigTemplateSwitchProfilePortCallback(OAIHttpRequestWorker *worker);
    void getOrganizationConfigTemplateSwitchProfilePortsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationConfigTemplateSwitchProfilesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSwitchPortsBySwitchCallback(OAIHttpRequestWorker *worker);
    void removeNetworkSwitchStackCallback(OAIHttpRequestWorker *worker);
    void updateDeviceSwitchPortCallback(OAIHttpRequestWorker *worker);
    void updateDeviceSwitchRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void updateDeviceSwitchRoutingInterfaceDhcpCallback(OAIHttpRequestWorker *worker);
    void updateDeviceSwitchRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void updateDeviceSwitchWarmSpareCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchAccessControlListsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchAccessPolicyCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchAlternateManagementInterfaceCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchDhcpServerPolicyCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchDscpToCosMappingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchLinkAggregationCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchMtuCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchPortScheduleCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchQosRuleCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchQosRulesOrderCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchRoutingMulticastCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchRoutingMulticastRendezvousPointCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchRoutingOspfCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchStackRoutingInterfaceCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchStackRoutingInterfaceDhcpCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchStackRoutingStaticRouteCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchStormControlCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchStpCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationConfigTemplateSwitchProfilePortCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addNetworkSwitchStackSignal(OAIObject summary);
    void cloneOrganizationSwitchDevicesSignal(OAIObject summary);
    void createDeviceSwitchRoutingInterfaceSignal(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary);
    void createDeviceSwitchRoutingStaticRouteSignal(OAIObject summary);
    void createNetworkSwitchAccessPolicySignal(OAIGetNetworkSwitchAccessPolicies_200_response_inner summary);
    void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignal(OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner summary);
    void createNetworkSwitchLinkAggregationSignal(OAIObject summary);
    void createNetworkSwitchPortScheduleSignal(OAIObject summary);
    void createNetworkSwitchQosRuleSignal(OAIObject summary);
    void createNetworkSwitchRoutingMulticastRendezvousPointSignal(OAIObject summary);
    void createNetworkSwitchStackSignal(OAIObject summary);
    void createNetworkSwitchStackRoutingInterfaceSignal(OAIObject summary);
    void createNetworkSwitchStackRoutingStaticRouteSignal(OAIObject summary);
    void cycleDeviceSwitchPortsSignal(OAIObject summary);
    void deleteDeviceSwitchRoutingInterfaceSignal();
    void deleteDeviceSwitchRoutingStaticRouteSignal();
    void deleteNetworkSwitchAccessPolicySignal();
    void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignal();
    void deleteNetworkSwitchLinkAggregationSignal();
    void deleteNetworkSwitchPortScheduleSignal();
    void deleteNetworkSwitchQosRuleSignal();
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignal();
    void deleteNetworkSwitchStackSignal();
    void deleteNetworkSwitchStackRoutingInterfaceSignal();
    void deleteNetworkSwitchStackRoutingStaticRouteSignal();
    void getDeviceSwitchPortSignal(OAIGetDeviceSwitchPorts_200_response_inner summary);
    void getDeviceSwitchPortsSignal(QList<OAIGetDeviceSwitchPorts_200_response_inner> summary);
    void getDeviceSwitchPortsStatusesSignal(QList<OAIGetDeviceSwitchPortsStatuses_200_response_inner> summary);
    void getDeviceSwitchPortsStatusesPacketsSignal(QList<OAIObject> summary);
    void getDeviceSwitchRoutingInterfaceSignal(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary);
    void getDeviceSwitchRoutingInterfaceDhcpSignal(OAIObject summary);
    void getDeviceSwitchRoutingInterfacesSignal(QList<OAIGetDeviceSwitchRoutingInterfaces_200_response_inner> summary);
    void getDeviceSwitchRoutingStaticRouteSignal(OAIGetDeviceSwitchRoutingStaticRoute_200_response summary);
    void getDeviceSwitchRoutingStaticRoutesSignal(QList<OAIObject> summary);
    void getDeviceSwitchWarmSpareSignal(OAIObject summary);
    void getNetworkSwitchAccessControlListsSignal(OAIGetNetworkSwitchAccessControlLists_200_response summary);
    void getNetworkSwitchAccessPoliciesSignal(QList<OAIGetNetworkSwitchAccessPolicies_200_response_inner> summary);
    void getNetworkSwitchAccessPolicySignal(OAIGetNetworkSwitchAccessPolicies_200_response_inner summary);
    void getNetworkSwitchAlternateManagementInterfaceSignal(OAIObject summary);
    void getNetworkSwitchDhcpServerPolicySignal(OAIObject summary);
    void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersSignal(QList<OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner> summary);
    void getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceSignal(QList<OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner> summary);
    void getNetworkSwitchDhcpV4ServersSeenSignal(QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner> summary);
    void getNetworkSwitchDscpToCosMappingsSignal(OAIObject summary);
    void getNetworkSwitchLinkAggregationsSignal(QList<OAIObject> summary);
    void getNetworkSwitchMtuSignal(OAIGetNetworkSwitchMtu_200_response summary);
    void getNetworkSwitchPortSchedulesSignal(QList<OAIObject> summary);
    void getNetworkSwitchQosRuleSignal(OAIObject summary);
    void getNetworkSwitchQosRulesSignal(QList<OAIObject> summary);
    void getNetworkSwitchQosRulesOrderSignal(OAIObject summary);
    void getNetworkSwitchRoutingMulticastSignal(OAIObject summary);
    void getNetworkSwitchRoutingMulticastRendezvousPointSignal(OAIObject summary);
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignal(QList<QList<OAIObject>> summary);
    void getNetworkSwitchRoutingOspfSignal(OAIObject summary);
    void getNetworkSwitchSettingsSignal(OAIGetNetworkSwitchSettings_200_response summary);
    void getNetworkSwitchStackSignal(OAIGetNetworkSwitchStack_200_response summary);
    void getNetworkSwitchStackRoutingInterfaceSignal(OAIObject summary);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignal(OAIObject summary);
    void getNetworkSwitchStackRoutingInterfacesSignal(QList<OAIObject> summary);
    void getNetworkSwitchStackRoutingStaticRouteSignal(OAIObject summary);
    void getNetworkSwitchStackRoutingStaticRoutesSignal(QList<OAIObject> summary);
    void getNetworkSwitchStacksSignal(QList<OAIObject> summary);
    void getNetworkSwitchStormControlSignal(OAIGetNetworkSwitchStormControl_200_response summary);
    void getNetworkSwitchStpSignal(OAIObject summary);
    void getOrganizationConfigTemplateSwitchProfilePortSignal(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary);
    void getOrganizationConfigTemplateSwitchProfilePortsSignal(QList<OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner> summary);
    void getOrganizationConfigTemplateSwitchProfilesSignal(OAIGetOrganizationConfigTemplateSwitchProfiles_200_response summary);
    void getOrganizationSwitchPortsBySwitchSignal(QList<OAIGetOrganizationSwitchPortsBySwitch_200_response_inner> summary);
    void removeNetworkSwitchStackSignal(OAIObject summary);
    void updateDeviceSwitchPortSignal(OAIGetDeviceSwitchPorts_200_response_inner summary);
    void updateDeviceSwitchRoutingInterfaceSignal(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary);
    void updateDeviceSwitchRoutingInterfaceDhcpSignal(OAIObject summary);
    void updateDeviceSwitchRoutingStaticRouteSignal(OAIObject summary);
    void updateDeviceSwitchWarmSpareSignal(OAIObject summary);
    void updateNetworkSwitchAccessControlListsSignal(OAIGetNetworkSwitchAccessControlLists_200_response summary);
    void updateNetworkSwitchAccessPolicySignal(OAIGetNetworkSwitchAccessPolicies_200_response_inner summary);
    void updateNetworkSwitchAlternateManagementInterfaceSignal(OAIObject summary);
    void updateNetworkSwitchDhcpServerPolicySignal(OAIObject summary);
    void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignal(OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner summary);
    void updateNetworkSwitchDscpToCosMappingsSignal(OAIObject summary);
    void updateNetworkSwitchLinkAggregationSignal(OAIObject summary);
    void updateNetworkSwitchMtuSignal(OAIObject summary);
    void updateNetworkSwitchPortScheduleSignal(OAIObject summary);
    void updateNetworkSwitchQosRuleSignal(OAIObject summary);
    void updateNetworkSwitchQosRulesOrderSignal(OAIObject summary);
    void updateNetworkSwitchRoutingMulticastSignal(OAIObject summary);
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignal(OAIObject summary);
    void updateNetworkSwitchRoutingOspfSignal(OAIObject summary);
    void updateNetworkSwitchSettingsSignal(OAIGetNetworkSwitchSettings_200_response summary);
    void updateNetworkSwitchStackRoutingInterfaceSignal(OAIObject summary);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignal(OAIObject summary);
    void updateNetworkSwitchStackRoutingStaticRouteSignal(OAIObject summary);
    void updateNetworkSwitchStormControlSignal(OAIObject summary);
    void updateNetworkSwitchStpSignal(OAIObject summary);
    void updateOrganizationConfigTemplateSwitchProfilePortSignal(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary);


    void addNetworkSwitchStackSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void cloneOrganizationSwitchDevicesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createDeviceSwitchRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary);
    void createDeviceSwitchRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchAccessPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchAccessPolicies_200_response_inner summary);
    void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner summary);
    void createNetworkSwitchLinkAggregationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchPortScheduleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchQosRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchStackSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchStackRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void cycleDeviceSwitchPortsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteDeviceSwitchRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker);
    void deleteDeviceSwitchRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchAccessPolicySignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchLinkAggregationSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchPortScheduleSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchQosRuleSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker);
    void getDeviceSwitchPortSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchPorts_200_response_inner summary);
    void getDeviceSwitchPortsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetDeviceSwitchPorts_200_response_inner> summary);
    void getDeviceSwitchPortsStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetDeviceSwitchPortsStatuses_200_response_inner> summary);
    void getDeviceSwitchPortsStatusesPacketsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceSwitchRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary);
    void getDeviceSwitchRoutingInterfaceDhcpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getDeviceSwitchRoutingInterfacesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetDeviceSwitchRoutingInterfaces_200_response_inner> summary);
    void getDeviceSwitchRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchRoutingStaticRoute_200_response summary);
    void getDeviceSwitchRoutingStaticRoutesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getDeviceSwitchWarmSpareSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchAccessControlListsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchAccessControlLists_200_response summary);
    void getNetworkSwitchAccessPoliciesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSwitchAccessPolicies_200_response_inner> summary);
    void getNetworkSwitchAccessPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchAccessPolicies_200_response_inner summary);
    void getNetworkSwitchAlternateManagementInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchDhcpServerPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner> summary);
    void getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner> summary);
    void getNetworkSwitchDhcpV4ServersSeenSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner> summary);
    void getNetworkSwitchDscpToCosMappingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchLinkAggregationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSwitchMtuSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchMtu_200_response summary);
    void getNetworkSwitchPortSchedulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSwitchQosRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchQosRulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSwitchQosRulesOrderSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchRoutingMulticastSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalFull(OAIHttpRequestWorker *worker, QList<QList<OAIObject>> summary);
    void getNetworkSwitchRoutingOspfSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchSettings_200_response summary);
    void getNetworkSwitchStackSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchStack_200_response summary);
    void getNetworkSwitchStackRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchStackRoutingInterfacesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchStackRoutingStaticRoutesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSwitchStacksSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSwitchStormControlSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchStormControl_200_response summary);
    void getNetworkSwitchStpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationConfigTemplateSwitchProfilePortSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary);
    void getOrganizationConfigTemplateSwitchProfilePortsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner> summary);
    void getOrganizationConfigTemplateSwitchProfilesSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationConfigTemplateSwitchProfiles_200_response summary);
    void getOrganizationSwitchPortsBySwitchSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetOrganizationSwitchPortsBySwitch_200_response_inner> summary);
    void removeNetworkSwitchStackSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceSwitchPortSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchPorts_200_response_inner summary);
    void updateDeviceSwitchRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary);
    void updateDeviceSwitchRoutingInterfaceDhcpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceSwitchRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateDeviceSwitchWarmSpareSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchAccessControlListsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchAccessControlLists_200_response summary);
    void updateNetworkSwitchAccessPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchAccessPolicies_200_response_inner summary);
    void updateNetworkSwitchAlternateManagementInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchDhcpServerPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner summary);
    void updateNetworkSwitchDscpToCosMappingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchLinkAggregationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchMtuSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchPortScheduleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchQosRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchQosRulesOrderSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchRoutingMulticastSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchRoutingOspfSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetNetworkSwitchSettings_200_response summary);
    void updateNetworkSwitchStackRoutingInterfaceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchStackRoutingStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchStormControlSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchStpSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationConfigTemplateSwitchProfilePortSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary);

    Q_DECL_DEPRECATED_X("Use addNetworkSwitchStackSignalError() instead")
    void addNetworkSwitchStackSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addNetworkSwitchStackSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloneOrganizationSwitchDevicesSignalError() instead")
    void cloneOrganizationSwitchDevicesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloneOrganizationSwitchDevicesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceSwitchRoutingInterfaceSignalError() instead")
    void createDeviceSwitchRoutingInterfaceSignalE(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceSwitchRoutingInterfaceSignalError(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceSwitchRoutingStaticRouteSignalError() instead")
    void createDeviceSwitchRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceSwitchRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchAccessPolicySignalError() instead")
    void createNetworkSwitchAccessPolicySignalE(OAIGetNetworkSwitchAccessPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchAccessPolicySignalError(OAIGetNetworkSwitchAccessPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalError() instead")
    void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalE(OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalError(OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchLinkAggregationSignalError() instead")
    void createNetworkSwitchLinkAggregationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchLinkAggregationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchPortScheduleSignalError() instead")
    void createNetworkSwitchPortScheduleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchPortScheduleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchQosRuleSignalError() instead")
    void createNetworkSwitchQosRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchQosRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchRoutingMulticastRendezvousPointSignalError() instead")
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackSignalError() instead")
    void createNetworkSwitchStackSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackRoutingInterfaceSignalError() instead")
    void createNetworkSwitchStackRoutingInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackRoutingInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void createNetworkSwitchStackRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cycleDeviceSwitchPortsSignalError() instead")
    void cycleDeviceSwitchPortsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cycleDeviceSwitchPortsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeviceSwitchRoutingInterfaceSignalError() instead")
    void deleteDeviceSwitchRoutingInterfaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeviceSwitchRoutingInterfaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeviceSwitchRoutingStaticRouteSignalError() instead")
    void deleteDeviceSwitchRoutingStaticRouteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeviceSwitchRoutingStaticRouteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchAccessPolicySignalError() instead")
    void deleteNetworkSwitchAccessPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchAccessPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalError() instead")
    void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchLinkAggregationSignalError() instead")
    void deleteNetworkSwitchLinkAggregationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchLinkAggregationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchPortScheduleSignalError() instead")
    void deleteNetworkSwitchPortScheduleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchPortScheduleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchQosRuleSignalError() instead")
    void deleteNetworkSwitchQosRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchQosRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchRoutingMulticastRendezvousPointSignalError() instead")
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackSignalError() instead")
    void deleteNetworkSwitchStackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackRoutingInterfaceSignalError() instead")
    void deleteNetworkSwitchStackRoutingInterfaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackRoutingInterfaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void deleteNetworkSwitchStackRoutingStaticRouteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackRoutingStaticRouteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortSignalError() instead")
    void getDeviceSwitchPortSignalE(OAIGetDeviceSwitchPorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortSignalError(OAIGetDeviceSwitchPorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsSignalError() instead")
    void getDeviceSwitchPortsSignalE(QList<OAIGetDeviceSwitchPorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsSignalError(QList<OAIGetDeviceSwitchPorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsStatusesSignalError() instead")
    void getDeviceSwitchPortsStatusesSignalE(QList<OAIGetDeviceSwitchPortsStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsStatusesSignalError(QList<OAIGetDeviceSwitchPortsStatuses_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsStatusesPacketsSignalError() instead")
    void getDeviceSwitchPortsStatusesPacketsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsStatusesPacketsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfaceSignalError() instead")
    void getDeviceSwitchRoutingInterfaceSignalE(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfaceSignalError(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfaceDhcpSignalError() instead")
    void getDeviceSwitchRoutingInterfaceDhcpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfaceDhcpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfacesSignalError() instead")
    void getDeviceSwitchRoutingInterfacesSignalE(QList<OAIGetDeviceSwitchRoutingInterfaces_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfacesSignalError(QList<OAIGetDeviceSwitchRoutingInterfaces_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingStaticRouteSignalError() instead")
    void getDeviceSwitchRoutingStaticRouteSignalE(OAIGetDeviceSwitchRoutingStaticRoute_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingStaticRouteSignalError(OAIGetDeviceSwitchRoutingStaticRoute_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingStaticRoutesSignalError() instead")
    void getDeviceSwitchRoutingStaticRoutesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingStaticRoutesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchWarmSpareSignalError() instead")
    void getDeviceSwitchWarmSpareSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchWarmSpareSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchAccessControlListsSignalError() instead")
    void getNetworkSwitchAccessControlListsSignalE(OAIGetNetworkSwitchAccessControlLists_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchAccessControlListsSignalError(OAIGetNetworkSwitchAccessControlLists_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchAccessPoliciesSignalError() instead")
    void getNetworkSwitchAccessPoliciesSignalE(QList<OAIGetNetworkSwitchAccessPolicies_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchAccessPoliciesSignalError(QList<OAIGetNetworkSwitchAccessPolicies_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchAccessPolicySignalError() instead")
    void getNetworkSwitchAccessPolicySignalE(OAIGetNetworkSwitchAccessPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchAccessPolicySignalError(OAIGetNetworkSwitchAccessPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchAlternateManagementInterfaceSignalError() instead")
    void getNetworkSwitchAlternateManagementInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchAlternateManagementInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDhcpServerPolicySignalError() instead")
    void getNetworkSwitchDhcpServerPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDhcpServerPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersSignalError() instead")
    void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersSignalE(QList<OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersSignalError(QList<OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceSignalError() instead")
    void getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceSignalE(QList<OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceSignalError(QList<OAIGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDhcpV4ServersSeenSignalError() instead")
    void getNetworkSwitchDhcpV4ServersSeenSignalE(QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDhcpV4ServersSeenSignalError(QList<OAIGetNetworkSwitchDhcpV4ServersSeen_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDscpToCosMappingsSignalError() instead")
    void getNetworkSwitchDscpToCosMappingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDscpToCosMappingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchLinkAggregationsSignalError() instead")
    void getNetworkSwitchLinkAggregationsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchLinkAggregationsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchMtuSignalError() instead")
    void getNetworkSwitchMtuSignalE(OAIGetNetworkSwitchMtu_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchMtuSignalError(OAIGetNetworkSwitchMtu_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchPortSchedulesSignalError() instead")
    void getNetworkSwitchPortSchedulesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchPortSchedulesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchQosRuleSignalError() instead")
    void getNetworkSwitchQosRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchQosRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchQosRulesSignalError() instead")
    void getNetworkSwitchQosRulesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchQosRulesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchQosRulesOrderSignalError() instead")
    void getNetworkSwitchQosRulesOrderSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchQosRulesOrderSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastSignalError() instead")
    void getNetworkSwitchRoutingMulticastSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastRendezvousPointSignalError() instead")
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastRendezvousPointsSignalError() instead")
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalE(QList<QList<OAIObject>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalError(QList<QList<OAIObject>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingOspfSignalError() instead")
    void getNetworkSwitchRoutingOspfSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingOspfSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsSignalError() instead")
    void getNetworkSwitchSettingsSignalE(OAIGetNetworkSwitchSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsSignalError(OAIGetNetworkSwitchSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackSignalError() instead")
    void getNetworkSwitchStackSignalE(OAIGetNetworkSwitchStack_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackSignalError(OAIGetNetworkSwitchStack_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfaceSignalError() instead")
    void getNetworkSwitchStackRoutingInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfaceDhcpSignalError() instead")
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfacesSignalError() instead")
    void getNetworkSwitchStackRoutingInterfacesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfacesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void getNetworkSwitchStackRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRoutesSignalError() instead")
    void getNetworkSwitchStackRoutingStaticRoutesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRoutesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStacksSignalError() instead")
    void getNetworkSwitchStacksSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStacksSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStormControlSignalError() instead")
    void getNetworkSwitchStormControlSignalE(OAIGetNetworkSwitchStormControl_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStormControlSignalError(OAIGetNetworkSwitchStormControl_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStpSignalError() instead")
    void getNetworkSwitchStpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilePortSignalError() instead")
    void getOrganizationConfigTemplateSwitchProfilePortSignalE(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilePortSignalError(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilePortsSignalError() instead")
    void getOrganizationConfigTemplateSwitchProfilePortsSignalE(QList<OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilePortsSignalError(QList<OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilesSignalError() instead")
    void getOrganizationConfigTemplateSwitchProfilesSignalE(OAIGetOrganizationConfigTemplateSwitchProfiles_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilesSignalError(OAIGetOrganizationConfigTemplateSwitchProfiles_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSwitchPortsBySwitchSignalError() instead")
    void getOrganizationSwitchPortsBySwitchSignalE(QList<OAIGetOrganizationSwitchPortsBySwitch_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSwitchPortsBySwitchSignalError(QList<OAIGetOrganizationSwitchPortsBySwitch_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNetworkSwitchStackSignalError() instead")
    void removeNetworkSwitchStackSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeNetworkSwitchStackSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchPortSignalError() instead")
    void updateDeviceSwitchPortSignalE(OAIGetDeviceSwitchPorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchPortSignalError(OAIGetDeviceSwitchPorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingInterfaceSignalError() instead")
    void updateDeviceSwitchRoutingInterfaceSignalE(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingInterfaceSignalError(OAIGetDeviceSwitchRoutingInterfaces_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingInterfaceDhcpSignalError() instead")
    void updateDeviceSwitchRoutingInterfaceDhcpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingInterfaceDhcpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingStaticRouteSignalError() instead")
    void updateDeviceSwitchRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchWarmSpareSignalError() instead")
    void updateDeviceSwitchWarmSpareSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchWarmSpareSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchAccessControlListsSignalError() instead")
    void updateNetworkSwitchAccessControlListsSignalE(OAIGetNetworkSwitchAccessControlLists_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchAccessControlListsSignalError(OAIGetNetworkSwitchAccessControlLists_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchAccessPolicySignalError() instead")
    void updateNetworkSwitchAccessPolicySignalE(OAIGetNetworkSwitchAccessPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchAccessPolicySignalError(OAIGetNetworkSwitchAccessPolicies_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchAlternateManagementInterfaceSignalError() instead")
    void updateNetworkSwitchAlternateManagementInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchAlternateManagementInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchDhcpServerPolicySignalError() instead")
    void updateNetworkSwitchDhcpServerPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchDhcpServerPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalError() instead")
    void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalE(OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalError(OAIGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchDscpToCosMappingsSignalError() instead")
    void updateNetworkSwitchDscpToCosMappingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchDscpToCosMappingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchLinkAggregationSignalError() instead")
    void updateNetworkSwitchLinkAggregationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchLinkAggregationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchMtuSignalError() instead")
    void updateNetworkSwitchMtuSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchMtuSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchPortScheduleSignalError() instead")
    void updateNetworkSwitchPortScheduleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchPortScheduleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchQosRuleSignalError() instead")
    void updateNetworkSwitchQosRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchQosRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchQosRulesOrderSignalError() instead")
    void updateNetworkSwitchQosRulesOrderSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchQosRulesOrderSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingMulticastSignalError() instead")
    void updateNetworkSwitchRoutingMulticastSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingMulticastSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingMulticastRendezvousPointSignalError() instead")
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingOspfSignalError() instead")
    void updateNetworkSwitchRoutingOspfSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingOspfSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchSettingsSignalError() instead")
    void updateNetworkSwitchSettingsSignalE(OAIGetNetworkSwitchSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchSettingsSignalError(OAIGetNetworkSwitchSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingInterfaceSignalError() instead")
    void updateNetworkSwitchStackRoutingInterfaceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingInterfaceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingInterfaceDhcpSignalError() instead")
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingStaticRouteSignalError() instead")
    void updateNetworkSwitchStackRoutingStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStormControlSignalError() instead")
    void updateNetworkSwitchStormControlSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStormControlSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStpSignalError() instead")
    void updateNetworkSwitchStpSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStpSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationConfigTemplateSwitchProfilePortSignalError() instead")
    void updateOrganizationConfigTemplateSwitchProfilePortSignalE(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationConfigTemplateSwitchProfilePortSignalError(OAIGetOrganizationConfigTemplateSwitchProfilePorts_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addNetworkSwitchStackSignalErrorFull() instead")
    void addNetworkSwitchStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addNetworkSwitchStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloneOrganizationSwitchDevicesSignalErrorFull() instead")
    void cloneOrganizationSwitchDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloneOrganizationSwitchDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceSwitchRoutingInterfaceSignalErrorFull() instead")
    void createDeviceSwitchRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceSwitchRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDeviceSwitchRoutingStaticRouteSignalErrorFull() instead")
    void createDeviceSwitchRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceSwitchRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchAccessPolicySignalErrorFull() instead")
    void createNetworkSwitchAccessPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchAccessPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalErrorFull() instead")
    void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchLinkAggregationSignalErrorFull() instead")
    void createNetworkSwitchLinkAggregationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchLinkAggregationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchPortScheduleSignalErrorFull() instead")
    void createNetworkSwitchPortScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchPortScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchQosRuleSignalErrorFull() instead")
    void createNetworkSwitchQosRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchQosRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull() instead")
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackSignalErrorFull() instead")
    void createNetworkSwitchStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackRoutingInterfaceSignalErrorFull() instead")
    void createNetworkSwitchStackRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void createNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cycleDeviceSwitchPortsSignalErrorFull() instead")
    void cycleDeviceSwitchPortsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cycleDeviceSwitchPortsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeviceSwitchRoutingInterfaceSignalErrorFull() instead")
    void deleteDeviceSwitchRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeviceSwitchRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeviceSwitchRoutingStaticRouteSignalErrorFull() instead")
    void deleteDeviceSwitchRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeviceSwitchRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchAccessPolicySignalErrorFull() instead")
    void deleteNetworkSwitchAccessPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchAccessPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalErrorFull() instead")
    void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchLinkAggregationSignalErrorFull() instead")
    void deleteNetworkSwitchLinkAggregationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchLinkAggregationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchPortScheduleSignalErrorFull() instead")
    void deleteNetworkSwitchPortScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchPortScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchQosRuleSignalErrorFull() instead")
    void deleteNetworkSwitchQosRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchQosRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull() instead")
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackSignalErrorFull() instead")
    void deleteNetworkSwitchStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackRoutingInterfaceSignalErrorFull() instead")
    void deleteNetworkSwitchStackRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void deleteNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortSignalErrorFull() instead")
    void getDeviceSwitchPortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsSignalErrorFull() instead")
    void getDeviceSwitchPortsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsStatusesSignalErrorFull() instead")
    void getDeviceSwitchPortsStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchPortsStatusesPacketsSignalErrorFull() instead")
    void getDeviceSwitchPortsStatusesPacketsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchPortsStatusesPacketsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfaceSignalErrorFull() instead")
    void getDeviceSwitchRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfaceDhcpSignalErrorFull() instead")
    void getDeviceSwitchRoutingInterfaceDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfaceDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingInterfacesSignalErrorFull() instead")
    void getDeviceSwitchRoutingInterfacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingInterfacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingStaticRouteSignalErrorFull() instead")
    void getDeviceSwitchRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchRoutingStaticRoutesSignalErrorFull() instead")
    void getDeviceSwitchRoutingStaticRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchRoutingStaticRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSwitchWarmSpareSignalErrorFull() instead")
    void getDeviceSwitchWarmSpareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSwitchWarmSpareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchAccessControlListsSignalErrorFull() instead")
    void getNetworkSwitchAccessControlListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchAccessControlListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchAccessPoliciesSignalErrorFull() instead")
    void getNetworkSwitchAccessPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchAccessPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchAccessPolicySignalErrorFull() instead")
    void getNetworkSwitchAccessPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchAccessPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchAlternateManagementInterfaceSignalErrorFull() instead")
    void getNetworkSwitchAlternateManagementInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchAlternateManagementInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDhcpServerPolicySignalErrorFull() instead")
    void getNetworkSwitchDhcpServerPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDhcpServerPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersSignalErrorFull() instead")
    void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceSignalErrorFull() instead")
    void getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDhcpV4ServersSeenSignalErrorFull() instead")
    void getNetworkSwitchDhcpV4ServersSeenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDhcpV4ServersSeenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchDscpToCosMappingsSignalErrorFull() instead")
    void getNetworkSwitchDscpToCosMappingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchDscpToCosMappingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchLinkAggregationsSignalErrorFull() instead")
    void getNetworkSwitchLinkAggregationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchLinkAggregationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchMtuSignalErrorFull() instead")
    void getNetworkSwitchMtuSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchMtuSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchPortSchedulesSignalErrorFull() instead")
    void getNetworkSwitchPortSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchPortSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchQosRuleSignalErrorFull() instead")
    void getNetworkSwitchQosRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchQosRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchQosRulesSignalErrorFull() instead")
    void getNetworkSwitchQosRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchQosRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchQosRulesOrderSignalErrorFull() instead")
    void getNetworkSwitchQosRulesOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchQosRulesOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastSignalErrorFull() instead")
    void getNetworkSwitchRoutingMulticastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull() instead")
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingMulticastRendezvousPointsSignalErrorFull() instead")
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingMulticastRendezvousPointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchRoutingOspfSignalErrorFull() instead")
    void getNetworkSwitchRoutingOspfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchRoutingOspfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsSignalErrorFull() instead")
    void getNetworkSwitchSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackSignalErrorFull() instead")
    void getNetworkSwitchStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfaceSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingInterfacesSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingInterfacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingInterfacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStackRoutingStaticRoutesSignalErrorFull() instead")
    void getNetworkSwitchStackRoutingStaticRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStackRoutingStaticRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStacksSignalErrorFull() instead")
    void getNetworkSwitchStacksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStacksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStormControlSignalErrorFull() instead")
    void getNetworkSwitchStormControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStormControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchStpSignalErrorFull() instead")
    void getNetworkSwitchStpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchStpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilePortSignalErrorFull() instead")
    void getOrganizationConfigTemplateSwitchProfilePortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilePortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilePortsSignalErrorFull() instead")
    void getOrganizationConfigTemplateSwitchProfilePortsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilePortsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationConfigTemplateSwitchProfilesSignalErrorFull() instead")
    void getOrganizationConfigTemplateSwitchProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationConfigTemplateSwitchProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSwitchPortsBySwitchSignalErrorFull() instead")
    void getOrganizationSwitchPortsBySwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSwitchPortsBySwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNetworkSwitchStackSignalErrorFull() instead")
    void removeNetworkSwitchStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeNetworkSwitchStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchPortSignalErrorFull() instead")
    void updateDeviceSwitchPortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchPortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingInterfaceSignalErrorFull() instead")
    void updateDeviceSwitchRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingInterfaceDhcpSignalErrorFull() instead")
    void updateDeviceSwitchRoutingInterfaceDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingInterfaceDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchRoutingStaticRouteSignalErrorFull() instead")
    void updateDeviceSwitchRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceSwitchWarmSpareSignalErrorFull() instead")
    void updateDeviceSwitchWarmSpareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceSwitchWarmSpareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchAccessControlListsSignalErrorFull() instead")
    void updateNetworkSwitchAccessControlListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchAccessControlListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchAccessPolicySignalErrorFull() instead")
    void updateNetworkSwitchAccessPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchAccessPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchAlternateManagementInterfaceSignalErrorFull() instead")
    void updateNetworkSwitchAlternateManagementInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchAlternateManagementInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchDhcpServerPolicySignalErrorFull() instead")
    void updateNetworkSwitchDhcpServerPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchDhcpServerPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalErrorFull() instead")
    void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchDscpToCosMappingsSignalErrorFull() instead")
    void updateNetworkSwitchDscpToCosMappingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchDscpToCosMappingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchLinkAggregationSignalErrorFull() instead")
    void updateNetworkSwitchLinkAggregationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchLinkAggregationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchMtuSignalErrorFull() instead")
    void updateNetworkSwitchMtuSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchMtuSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchPortScheduleSignalErrorFull() instead")
    void updateNetworkSwitchPortScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchPortScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchQosRuleSignalErrorFull() instead")
    void updateNetworkSwitchQosRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchQosRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchQosRulesOrderSignalErrorFull() instead")
    void updateNetworkSwitchQosRulesOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchQosRulesOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingMulticastSignalErrorFull() instead")
    void updateNetworkSwitchRoutingMulticastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingMulticastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull() instead")
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingMulticastRendezvousPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchRoutingOspfSignalErrorFull() instead")
    void updateNetworkSwitchRoutingOspfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchRoutingOspfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchSettingsSignalErrorFull() instead")
    void updateNetworkSwitchSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingInterfaceSignalErrorFull() instead")
    void updateNetworkSwitchStackRoutingInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull() instead")
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingInterfaceDhcpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStackRoutingStaticRouteSignalErrorFull() instead")
    void updateNetworkSwitchStackRoutingStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStackRoutingStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStormControlSignalErrorFull() instead")
    void updateNetworkSwitchStormControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStormControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchStpSignalErrorFull() instead")
    void updateNetworkSwitchStpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchStpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationConfigTemplateSwitchProfilePortSignalErrorFull() instead")
    void updateOrganizationConfigTemplateSwitchProfilePortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationConfigTemplateSwitchProfilePortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
