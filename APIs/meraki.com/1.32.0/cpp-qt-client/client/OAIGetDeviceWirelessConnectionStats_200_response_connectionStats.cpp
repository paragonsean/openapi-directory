/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDeviceWirelessConnectionStats_200_response_connectionStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::OAIGetDeviceWirelessConnectionStats_200_response_connectionStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::OAIGetDeviceWirelessConnectionStats_200_response_connectionStats() {
    this->initializeModel();
}

OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::~OAIGetDeviceWirelessConnectionStats_200_response_connectionStats() {}

void OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::initializeModel() {

    m_assoc_isSet = false;
    m_assoc_isValid = false;

    m_auth_isSet = false;
    m_auth_isValid = false;

    m_dhcp_isSet = false;
    m_dhcp_isValid = false;

    m_dns_isSet = false;
    m_dns_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::fromJsonObject(QJsonObject json) {

    m_assoc_isValid = ::OpenAPI::fromJsonValue(m_assoc, json[QString("assoc")]);
    m_assoc_isSet = !json[QString("assoc")].isNull() && m_assoc_isValid;

    m_auth_isValid = ::OpenAPI::fromJsonValue(m_auth, json[QString("auth")]);
    m_auth_isSet = !json[QString("auth")].isNull() && m_auth_isValid;

    m_dhcp_isValid = ::OpenAPI::fromJsonValue(m_dhcp, json[QString("dhcp")]);
    m_dhcp_isSet = !json[QString("dhcp")].isNull() && m_dhcp_isValid;

    m_dns_isValid = ::OpenAPI::fromJsonValue(m_dns, json[QString("dns")]);
    m_dns_isSet = !json[QString("dns")].isNull() && m_dns_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::asJsonObject() const {
    QJsonObject obj;
    if (m_assoc_isSet) {
        obj.insert(QString("assoc"), ::OpenAPI::toJsonValue(m_assoc));
    }
    if (m_auth_isSet) {
        obj.insert(QString("auth"), ::OpenAPI::toJsonValue(m_auth));
    }
    if (m_dhcp_isSet) {
        obj.insert(QString("dhcp"), ::OpenAPI::toJsonValue(m_dhcp));
    }
    if (m_dns_isSet) {
        obj.insert(QString("dns"), ::OpenAPI::toJsonValue(m_dns));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

qint32 OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::getAssoc() const {
    return m_assoc;
}
void OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::setAssoc(const qint32 &assoc) {
    m_assoc = assoc;
    m_assoc_isSet = true;
}

bool OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::is_assoc_Set() const{
    return m_assoc_isSet;
}

bool OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::is_assoc_Valid() const{
    return m_assoc_isValid;
}

qint32 OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::getAuth() const {
    return m_auth;
}
void OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::setAuth(const qint32 &auth) {
    m_auth = auth;
    m_auth_isSet = true;
}

bool OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::is_auth_Set() const{
    return m_auth_isSet;
}

bool OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::is_auth_Valid() const{
    return m_auth_isValid;
}

qint32 OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::getDhcp() const {
    return m_dhcp;
}
void OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::setDhcp(const qint32 &dhcp) {
    m_dhcp = dhcp;
    m_dhcp_isSet = true;
}

bool OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::is_dhcp_Set() const{
    return m_dhcp_isSet;
}

bool OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::is_dhcp_Valid() const{
    return m_dhcp_isValid;
}

qint32 OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::getDns() const {
    return m_dns;
}
void OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::setDns(const qint32 &dns) {
    m_dns = dns;
    m_dns_isSet = true;
}

bool OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::is_dns_Set() const{
    return m_dns_isSet;
}

bool OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::is_dns_Valid() const{
    return m_dns_isValid;
}

qint32 OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::getSuccess() const {
    return m_success;
}
void OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::setSuccess(const qint32 &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::is_success_Set() const{
    return m_success_isSet;
}

bool OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assoc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhcp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDeviceWirelessConnectionStats_200_response_connectionStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
