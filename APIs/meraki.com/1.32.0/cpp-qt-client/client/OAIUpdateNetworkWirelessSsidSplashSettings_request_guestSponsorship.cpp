/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship::OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship::OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship() {
    this->initializeModel();
}

OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship::~OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship() {}

void OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship::initializeModel() {

    m_duration_in_minutes_isSet = false;
    m_duration_in_minutes_isValid = false;

    m_guest_can_request_timeframe_isSet = false;
    m_guest_can_request_timeframe_isValid = false;
}

void OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship::fromJsonObject(QJsonObject json) {

    m_duration_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_duration_in_minutes, json[QString("durationInMinutes")]);
    m_duration_in_minutes_isSet = !json[QString("durationInMinutes")].isNull() && m_duration_in_minutes_isValid;

    m_guest_can_request_timeframe_isValid = ::OpenAPI::fromJsonValue(m_guest_can_request_timeframe, json[QString("guestCanRequestTimeframe")]);
    m_guest_can_request_timeframe_isSet = !json[QString("guestCanRequestTimeframe")].isNull() && m_guest_can_request_timeframe_isValid;
}

QString OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_in_minutes_isSet) {
        obj.insert(QString("durationInMinutes"), ::OpenAPI::toJsonValue(m_duration_in_minutes));
    }
    if (m_guest_can_request_timeframe_isSet) {
        obj.insert(QString("guestCanRequestTimeframe"), ::OpenAPI::toJsonValue(m_guest_can_request_timeframe));
    }
    return obj;
}

qint32 OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship::getDurationInMinutes() const {
    return m_duration_in_minutes;
}
void OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship::setDurationInMinutes(const qint32 &duration_in_minutes) {
    m_duration_in_minutes = duration_in_minutes;
    m_duration_in_minutes_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship::is_duration_in_minutes_Set() const{
    return m_duration_in_minutes_isSet;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship::is_duration_in_minutes_Valid() const{
    return m_duration_in_minutes_isValid;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship::isGuestCanRequestTimeframe() const {
    return m_guest_can_request_timeframe;
}
void OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship::setGuestCanRequestTimeframe(const bool &guest_can_request_timeframe) {
    m_guest_can_request_timeframe = guest_can_request_timeframe;
    m_guest_can_request_timeframe_isSet = true;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship::is_guest_can_request_timeframe_Set() const{
    return m_guest_can_request_timeframe_isSet;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship::is_guest_can_request_timeframe_Valid() const{
    return m_guest_can_request_timeframe_isValid;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_can_request_timeframe_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkWirelessSsidSplashSettings_request_guestSponsorship::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
