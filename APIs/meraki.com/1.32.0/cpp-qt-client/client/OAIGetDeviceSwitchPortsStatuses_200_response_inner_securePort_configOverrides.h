/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides.h
 *
 * The configuration overrides applied to this port when Secure Port is active.
 */

#ifndef OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides_H
#define OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides : public OAIObject {
public:
    OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides();
    OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides(QString json);
    ~OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAllowedVlans() const;
    void setAllowedVlans(const QString &allowed_vlans);
    bool is_allowed_vlans_Set() const;
    bool is_allowed_vlans_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    qint32 getVlan() const;
    void setVlan(const qint32 &vlan);
    bool is_vlan_Set() const;
    bool is_vlan_Valid() const;

    qint32 getVoiceVlan() const;
    void setVoiceVlan(const qint32 &voice_vlan);
    bool is_voice_vlan_Set() const;
    bool is_voice_vlan_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_allowed_vlans;
    bool m_allowed_vlans_isSet;
    bool m_allowed_vlans_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    qint32 m_vlan;
    bool m_vlan_isSet;
    bool m_vlan_isValid;

    qint32 m_voice_vlan;
    bool m_voice_vlan_isSet;
    bool m_voice_vlan_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides)

#endif // OAIGetDeviceSwitchPortsStatuses_200_response_inner_securePort_configOverrides_H
