/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 1.32.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAdaptivePolicyApi_H
#define OAI_OAIAdaptivePolicyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateOrganizationAdaptivePolicyAcl_request.h"
#include "OAICreateOrganizationAdaptivePolicyGroup_request.h"
#include "OAICreateOrganizationAdaptivePolicyPolicy_request.h"
#include "OAIGetOrganizationAdaptivePolicyOverview_200_response.h"
#include "OAIObject.h"
#include "OAIUpdateOrganizationAdaptivePolicyAcl_request.h"
#include "OAIUpdateOrganizationAdaptivePolicyGroup_request.h"
#include "OAIUpdateOrganizationAdaptivePolicyPolicy_request.h"
#include "OAIUpdateOrganizationAdaptivePolicySettings_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAdaptivePolicyApi : public QObject {
    Q_OBJECT

public:
    OAIAdaptivePolicyApi(const int timeOut = 0);
    ~OAIAdaptivePolicyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_adaptive_policy_acl_request OAICreateOrganizationAdaptivePolicyAcl_request [required]
    */
    virtual void createOrganizationAdaptivePolicyAcl(const QString &organization_id, const OAICreateOrganizationAdaptivePolicyAcl_request &oai_create_organization_adaptive_policy_acl_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_adaptive_policy_group_request OAICreateOrganizationAdaptivePolicyGroup_request [required]
    */
    virtual void createOrganizationAdaptivePolicyGroup(const QString &organization_id, const OAICreateOrganizationAdaptivePolicyGroup_request &oai_create_organization_adaptive_policy_group_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_adaptive_policy_policy_request OAICreateOrganizationAdaptivePolicyPolicy_request [required]
    */
    virtual void createOrganizationAdaptivePolicyPolicy(const QString &organization_id, const OAICreateOrganizationAdaptivePolicyPolicy_request &oai_create_organization_adaptive_policy_policy_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  acl_id QString [required]
    */
    virtual void deleteOrganizationAdaptivePolicyAcl(const QString &organization_id, const QString &acl_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteOrganizationAdaptivePolicyGroup(const QString &organization_id, const QString &id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteOrganizationAdaptivePolicyPolicy(const QString &organization_id, const QString &id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  acl_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyAcl(const QString &organization_id, const QString &acl_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyAcls(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyGroup(const QString &organization_id, const QString &id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyGroups(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyOverview(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyPolicies(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getOrganizationAdaptivePolicyPolicy(const QString &organization_id, const QString &id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationAdaptivePolicySettings(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  acl_id QString [required]
    * @param[in]  oai_update_organization_adaptive_policy_acl_request OAIUpdateOrganizationAdaptivePolicyAcl_request [optional]
    */
    virtual void updateOrganizationAdaptivePolicyAcl(const QString &organization_id, const QString &acl_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyAcl_request> &oai_update_organization_adaptive_policy_acl_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyAcl_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_update_organization_adaptive_policy_group_request OAIUpdateOrganizationAdaptivePolicyGroup_request [optional]
    */
    virtual void updateOrganizationAdaptivePolicyGroup(const QString &organization_id, const QString &id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyGroup_request> &oai_update_organization_adaptive_policy_group_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyGroup_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_update_organization_adaptive_policy_policy_request OAIUpdateOrganizationAdaptivePolicyPolicy_request [optional]
    */
    virtual void updateOrganizationAdaptivePolicyPolicy(const QString &organization_id, const QString &id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyPolicy_request> &oai_update_organization_adaptive_policy_policy_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicyPolicy_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_adaptive_policy_settings_request OAIUpdateOrganizationAdaptivePolicySettings_request [optional]
    */
    virtual void updateOrganizationAdaptivePolicySettings(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicySettings_request> &oai_update_organization_adaptive_policy_settings_request = ::OpenAPI::OptionalParam<OAIUpdateOrganizationAdaptivePolicySettings_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createOrganizationAdaptivePolicyAclCallback(OAIHttpRequestWorker *worker);
    void createOrganizationAdaptivePolicyGroupCallback(OAIHttpRequestWorker *worker);
    void createOrganizationAdaptivePolicyPolicyCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyAclCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyGroupCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyPolicyCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyAclCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyAclsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyGroupCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyGroupsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyOverviewCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyPoliciesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyPolicyCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicySettingsCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAdaptivePolicyAclCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAdaptivePolicyGroupCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAdaptivePolicyPolicyCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAdaptivePolicySettingsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createOrganizationAdaptivePolicyAclSignal(OAIObject summary);
    void createOrganizationAdaptivePolicyGroupSignal(OAIObject summary);
    void createOrganizationAdaptivePolicyPolicySignal(OAIObject summary);
    void deleteOrganizationAdaptivePolicyAclSignal();
    void deleteOrganizationAdaptivePolicyGroupSignal();
    void deleteOrganizationAdaptivePolicyPolicySignal();
    void getOrganizationAdaptivePolicyAclSignal(OAIObject summary);
    void getOrganizationAdaptivePolicyAclsSignal(QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyGroupSignal(OAIObject summary);
    void getOrganizationAdaptivePolicyGroupsSignal(QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyOverviewSignal(OAIGetOrganizationAdaptivePolicyOverview_200_response summary);
    void getOrganizationAdaptivePolicyPoliciesSignal(QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyPolicySignal(OAIObject summary);
    void getOrganizationAdaptivePolicySettingsSignal(OAIObject summary);
    void updateOrganizationAdaptivePolicyAclSignal(OAIObject summary);
    void updateOrganizationAdaptivePolicyGroupSignal(OAIObject summary);
    void updateOrganizationAdaptivePolicyPolicySignal(OAIObject summary);
    void updateOrganizationAdaptivePolicySettingsSignal(OAIObject summary);


    void createOrganizationAdaptivePolicyAclSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationAdaptivePolicyGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationAdaptivePolicyPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteOrganizationAdaptivePolicyAclSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyGroupSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationAdaptivePolicyPolicySignalFull(OAIHttpRequestWorker *worker);
    void getOrganizationAdaptivePolicyAclSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationAdaptivePolicyAclsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationAdaptivePolicyGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyOverviewSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationAdaptivePolicyOverview_200_response summary);
    void getOrganizationAdaptivePolicyPoliciesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationAdaptivePolicyPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationAdaptivePolicySettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationAdaptivePolicyAclSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationAdaptivePolicyGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationAdaptivePolicyPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationAdaptivePolicySettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyAclSignalError() instead")
    void createOrganizationAdaptivePolicyAclSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyAclSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyGroupSignalError() instead")
    void createOrganizationAdaptivePolicyGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyPolicySignalError() instead")
    void createOrganizationAdaptivePolicyPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyAclSignalError() instead")
    void deleteOrganizationAdaptivePolicyAclSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyAclSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyGroupSignalError() instead")
    void deleteOrganizationAdaptivePolicyGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyPolicySignalError() instead")
    void deleteOrganizationAdaptivePolicyPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyAclSignalError() instead")
    void getOrganizationAdaptivePolicyAclSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyAclSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyAclsSignalError() instead")
    void getOrganizationAdaptivePolicyAclsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyAclsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyGroupSignalError() instead")
    void getOrganizationAdaptivePolicyGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyGroupsSignalError() instead")
    void getOrganizationAdaptivePolicyGroupsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyGroupsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyOverviewSignalError() instead")
    void getOrganizationAdaptivePolicyOverviewSignalE(OAIGetOrganizationAdaptivePolicyOverview_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyOverviewSignalError(OAIGetOrganizationAdaptivePolicyOverview_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyPoliciesSignalError() instead")
    void getOrganizationAdaptivePolicyPoliciesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyPoliciesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyPolicySignalError() instead")
    void getOrganizationAdaptivePolicyPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicySettingsSignalError() instead")
    void getOrganizationAdaptivePolicySettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicySettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyAclSignalError() instead")
    void updateOrganizationAdaptivePolicyAclSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyAclSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyGroupSignalError() instead")
    void updateOrganizationAdaptivePolicyGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyPolicySignalError() instead")
    void updateOrganizationAdaptivePolicyPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicySettingsSignalError() instead")
    void updateOrganizationAdaptivePolicySettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicySettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyAclSignalErrorFull() instead")
    void createOrganizationAdaptivePolicyAclSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyAclSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyGroupSignalErrorFull() instead")
    void createOrganizationAdaptivePolicyGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationAdaptivePolicyPolicySignalErrorFull() instead")
    void createOrganizationAdaptivePolicyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationAdaptivePolicyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyAclSignalErrorFull() instead")
    void deleteOrganizationAdaptivePolicyAclSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyAclSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyGroupSignalErrorFull() instead")
    void deleteOrganizationAdaptivePolicyGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationAdaptivePolicyPolicySignalErrorFull() instead")
    void deleteOrganizationAdaptivePolicyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationAdaptivePolicyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyAclSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyAclSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyAclSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyAclsSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyAclsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyAclsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyGroupSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyGroupsSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyOverviewSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyPoliciesSignalErrorFull() instead")
    void getOrganizationAdaptivePolicyPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicyPolicySignalErrorFull() instead")
    void getOrganizationAdaptivePolicyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdaptivePolicySettingsSignalErrorFull() instead")
    void getOrganizationAdaptivePolicySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdaptivePolicySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyAclSignalErrorFull() instead")
    void updateOrganizationAdaptivePolicyAclSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyAclSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyGroupSignalErrorFull() instead")
    void updateOrganizationAdaptivePolicyGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicyPolicySignalErrorFull() instead")
    void updateOrganizationAdaptivePolicyPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicyPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAdaptivePolicySettingsSignalErrorFull() instead")
    void updateOrganizationAdaptivePolicySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAdaptivePolicySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
